{
    "functions": {
        "FUN_00000410": {
            "additional_data": {
                "FUN_00000410": {
                    "1": "call_sub_functions",
                    "18": "initialize_system",
                    "2": "initialize_program",
                    "3": "execute_initialization"
                },
                "FUN_00000df4": {
                    "1": "print_welcome_message",
                    "10": "execute_initialization",
                    "2": "do_something",
                    "7": "perform_initialization"
                }
            },
            "called": [
                "FUN_00000df4"
            ],
            "calling": [
                "FUN_0000459c"
            ],
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "current_name": "initialize_system_00000410",
            "entrypoint": "0x00000410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000428": {
            "additional_data": {
                "FUN_00000428": {
                    "1": "extract_and_adjust_offset",
                    "2": "validate_and_update_offset",
                    "3": "reverse_and_update_offset",
                    "4": "update_offset"
                },
                "FUN_00000cd0": {
                    "1": "get_return_value"
                },
                "FUN_00000d0c": {
                    "1": "release_base_address",
                    "2": "release_value"
                },
                "local_c": {
                    "1": "old_offset",
                    "10": "updated_offset",
                    "2": "adjusted_offset",
                    "6": "result",
                    "7": "new_offset"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output_pointer",
                    "4": "result_ptr",
                    "6": "output",
                    "9": "result"
                },
                "param_2": {
                    "1": "relocation_value",
                    "2": "base_address",
                    "4": "input",
                    "5": "input_offset",
                    "6": "input_value",
                    "7": "offset"
                },
                "uVar1": {
                    "1": "retrieved_value",
                    "10": "result",
                    "2": "result2",
                    "3": "value",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "calling": [
                "FUN_00004bd0"
            ],
            "code": "\ndword update_offset_00000428(undefined4 *result,int offset)\n\n{\n  undefined4 result;\n  dword updated_offset;\n  \n  result = FUN_00000cd0();\n  updated_offset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    updated_offset = 0xffffffff;\n  }\n  FUN_00000d0c(result);\n  return updated_offset;\n}\n\n",
            "current_name": "update_offset_00000428",
            "entrypoint": "0x00000428",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "local_c": "updated_offset",
                "param_1": "result",
                "param_2": "offset",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000490": {
            "additional_data": {
                "FUN_00000490": {
                    "1": "calculate_result",
                    "2": "extract_data"
                },
                "FUN_00000e14": {
                    "1": "perform_operation",
                    "2": "compute_result",
                    "3": "sub_function"
                },
                "param_1": {
                    "1": "data_1",
                    "10": "input_1",
                    "14": "input1",
                    "4": "input_param_1"
                },
                "param_2": {
                    "1": "arg2",
                    "10": "input_2",
                    "14": "input2",
                    "4": "input_param_2"
                },
                "param_3": {
                    "1": "param",
                    "2": "data_1",
                    "3": "data1",
                    "4": "input_param_3",
                    "7": "input3"
                },
                "param_4": {
                    "1": "input_2",
                    "2": "data_2",
                    "3": "data2",
                    "4": "input_param_4",
                    "7": "input4"
                },
                "uVar1": {
                    "20": "result"
                }
            },
            "called": [
                "FUN_00000e14"
            ],
            "calling": [
                "FUN_00004dc8"
            ],
            "code": "\nundefined4 extract_data_00000490(undefined4 input1,undefined4 input2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(input_3,input_4);\n  return result;\n}\n\n",
            "current_name": "extract_data_00000490",
            "entrypoint": "0x00000490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000490": "extract_data_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000004f2": {
            "additional_data": {
                "*param_1": {
                    "1": "output_value"
                },
                "*result": {
                    "1": "19"
                },
                "0x13": {
                    "1": "default_value"
                },
                "FUN_000004f2": {
                    "1": "initialize_parameter",
                    "2": "set_value_and_return_error",
                    "3": "set_default_value",
                    "5": "initialize_value_and_return"
                },
                "PTR_00000013": {
                    "1": "value"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "value_pointer",
                    "5": "output",
                    "8": "output_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "code": "\nundefined4 initialize_value_and_return_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_value_and_return_000004f2",
            "entrypoint": "0x000004f2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000514": {
            "additional_data": {
                "*param_1": {
                    "1": "result"
                },
                "0x13": {
                    "1": "new_value"
                },
                "FUN_00000514": {
                    "1": "initialize_values",
                    "2": "initialize_value_and_return",
                    "3": "set_default_value",
                    "4": "initialize_variable"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "output",
                    "5": "result_pointer",
                    "8": "output_value"
                },
                "param_1(inside_function)": {
                    "1": "result_pointer"
                },
                "param_1(return_value)": {
                    "1": "result_pointer"
                },
                "param_1[0]": {
                    "1": "output[0]"
                }
            },
            "called": [],
            "calling": [
                "FUN_000056b8"
            ],
            "code": "\nundefined4 initialize_variable_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_variable_00000514",
            "entrypoint": "0x00000514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000514": "initialize_variable_00000514",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000534": {
            "additional_data": {
                "FUN_00000534": {
                    "1": "check_validity",
                    "2": "check_param_validity",
                    "5": "check_valid_input",
                    "9": "check_valid_param"
                },
                "param_1": {
                    "1": "is_valid",
                    "22": "result",
                    "3": "output_value",
                    "5": "output"
                },
                "param_2": {
                    "1": "input_option",
                    "13": "input_value",
                    "2": "value",
                    "7": "input_param"
                },
                "uVar1": {
                    "1": "is_supported",
                    "22": "is_valid"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_valid_param_00000534(undefined4 *result,int input_value)\n\n{\n  undefined4 is_valid;\n  \n  *result = 0;\n  if (((input_value == 0) || (input_value == 1)) || (input_value == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  return is_valid;\n}\n\n",
            "current_name": "check_valid_param_00000534",
            "entrypoint": "0x00000534",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000534": "check_valid_param_00000534",
                "param_1": "result",
                "param_2": "input_value",
                "uVar1": "is_valid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000566": {
            "additional_data": {
                "FUN_00000566": {
                    "1": "convert_integer_to_binary",
                    "2": "count_set_bits",
                    "3": "convert_to_little_endian"
                },
                "bVar1": {
                    "1": "least_significant_byte",
                    "10": "byte1",
                    "2": "byte4",
                    "3": "first_byte",
                    "7": "byte3"
                },
                "bVar2": {
                    "1": "lsb",
                    "10": "byte2",
                    "2": "byte1",
                    "3": "second_byte",
                    "7": "byte0"
                },
                "bVar3": {
                    "1": "third_least_significant_byte",
                    "10": "byte3",
                    "2": "second_byte",
                    "3": "third_byte",
                    "7": "byte1"
                },
                "bVar4": {
                    "1": "least_significant_byte",
                    "10": "byte4",
                    "2": "byte3",
                    "3": "fourth_byte",
                    "7": "byte2"
                },
                "iVar5": {
                    "1": "output",
                    "17": "result",
                    "2": "decoded_int",
                    "3": "reversed_value"
                },
                "param_1": {
                    "1": "encoded_value",
                    "11": "input",
                    "12": "input_value",
                    "3": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000610"
            ],
            "code": "\nint convert_to_little_endian_00000566(int input_value)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input_value;\n  byte3 = (byte)((uint)input_value >> 8);\n  byte4 = (byte)((uint)input_value >> 0x10);\n  byte1 = (byte)((uint)input_value >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input_value == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "current_name": "convert_to_little_endian_00000566",
            "entrypoint": "0x00000566",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000566": "convert_to_little_endian_00000566",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000058e": {
            "additional_data": {
                "(int)param_2": {
                    "1": "destination_value_as_int"
                },
                "*(undefined4 *)*param_1": {
                    "1": "source_value_as_pointer"
                },
                "*(undefined4 **)*param_1": {
                    "1": "source_ptr_as_pointer"
                },
                "*param_1": {
                    "1": "pointer_value",
                    "2": "source_value"
                },
                "*param_2": {
                    "1": "new_data",
                    "2": "destination_value"
                },
                "FUN_0000058e": {
                    "1": "reverse_pointer",
                    "15": "update_pointer",
                    "2": "reverse_update_pointer",
                    "4": "update_param"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "source_pointer",
                    "3": "source_ptr",
                    "5": "pointer"
                },
                "param_1->param_1": {
                    "1": "pointer->next_pointer"
                },
                "param_1->param_2": {
                    "1": "pointer->new_pointer"
                },
                "param_1_0": {
                    "1": "temp_param1"
                },
                "param_2": {
                    "1": "new_data",
                    "2": "destination_ptr",
                    "3": "target_pointer",
                    "4": "new_pointer",
                    "7": "destination_pointer"
                },
                "param_2->param_1": {
                    "1": "new_pointer->prev_pointer"
                },
                "param_2_0": {
                    "1": "temp_param2"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nvoid update_pointer_0000058e(int *source_pointer,undefined4 *destination_pointer)\n\n{\n  if (*source_pointer == 0) {\n    *destination_pointer = destination_pointer;\n  }\n  else {\n    *destination_pointer = *(undefined4 *)*source_pointer;\n    *(undefined4 **)*source_pointer = destination_pointer;\n  }\n  *source_pointer = destination_value_as_int;\n  return;\n}\n\n",
            "current_name": "update_pointer_0000058e",
            "entrypoint": "0x0000058e",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_2": "destination_value_as_int",
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "source_pointer",
                "param_2": "destination_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000005ca": {
            "additional_data": {
                "*param_1": {
                    "1": "value_at_input_pointer"
                },
                "*puVar1": {
                    "1": "value_at_extracted_value"
                },
                "FUN_000005ca": {
                    "1": "get_ptr_from_param",
                    "10": "extract_value_from_pointer",
                    "2": "extract_pointer",
                    "5": "extract_value"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "ptr",
                    "3": "input_ptr",
                    "4": "pointer",
                    "9": "input_pointer"
                },
                "puVar1": {
                    "1": "output",
                    "14": "extracted_value",
                    "2": "result_ptr",
                    "3": "extracted_data",
                    "5": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nundefined4 * extract_value_from_pointer_000005ca(int *input_pointer)\n\n{\n  undefined4 *extracted_value;\n  \n  if (*input_pointer == 0) {\n    extracted_value = (undefined4 *)0x0;\n  }\n  else {\n    extracted_value = *(undefined4 **)*input_pointer;\n    if (extracted_value == (undefined4 *)*input_pointer) {\n      *input_pointer = 0;\n    }\n    else {\n      *(undefined4 *)*input_pointer = *extracted_value;\n    }\n  }\n  return extracted_value;\n}\n\n",
            "current_name": "extract_value_from_pointer_000005ca",
            "entrypoint": "0x000005ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "input_pointer",
                "puVar1": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000610": {
            "additional_data": {
                "&DAT_1fff03e4": {
                    "1": "offsets"
                },
                "*(char *)(iVar1 + 4)": {
                    "1": "original_char"
                },
                "*(char *)(original_value + 4)": {
                    "1": "character_at_offset_4"
                },
                "*(int **)(&DAT_1fff03e4 + iVar2 * 4)": {
                    "1": "data_array_pointer"
                },
                "*(undefined *)(iVar1 + 4)": {
                    "1": "modified_char"
                },
                "*(undefined *)(iVar2 + -4)": {
                    "1": "reserved_value"
                },
                "*(undefined *)(modified_value + -4)": {
                    "1": "set_value"
                },
                "*(undefined *)(original_value + 4)": {
                    "1": "set_character"
                },
                "*(undefined2 *)(iVar2 + -2)": {
                    "1": "temp_value"
                },
                "*(undefined2 *)(modified_value + -2)": {
                    "1": "data_value"
                },
                "DAT_1fff0354": {
                    "1": "return_value"
                },
                "DAT_1fff03dc": {
                    "1": "input_value"
                },
                "DAT_1fff03e0": {
                    "2": "stored_value"
                },
                "DAT_1fff03e4": {
                    "1": "data_array"
                },
                "DAT_1fff0424": {
                    "1": "offset_array"
                },
                "FUN_00000566": {
                    "1": "get_offset",
                    "4": "get_array_index"
                },
                "FUN_00000610": {
                    "1": "check_and_modify_value",
                    "2": "check_and_modify_data",
                    "4": "check_and_update_data"
                },
                "iVar1": {
                    "1": "input_pointer",
                    "10": "original_value",
                    "4": "data_ptr"
                },
                "iVar2": {
                    "1": "ptr_value",
                    "2": "array_index",
                    "3": "new_value",
                    "4": "result",
                    "9": "index"
                },
                "iVar2 * 4": {
                    "1": "offset_index"
                },
                "iVar2 + -4": {
                    "1": "new_value"
                },
                "iVar2 + -8": {
                    "1": "adjusted_value"
                },
                "param_1": {
                    "1": "input",
                    "2": "input_param"
                },
                "uVar3": {
                    "1": "success",
                    "10": "return_value",
                    "17": "result"
                }
            },
            "called": [
                "FUN_00000566"
            ],
            "calling": [],
            "code": "\nundefined4 check_and_update_data_00000610(void)\n\n{\n  int original_value;\n  int index;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (original_value == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_update_data_00000610",
            "entrypoint": "0x00000610",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000610": "check_and_update_data_00000610",
                "iVar1": "original_value",
                "iVar2": "index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000698": {
            "additional_data": {
                "&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4": {
                    "1": "ptr_offset",
                    "2": "data_ptr"
                },
                "&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "1": "data_ptr"
                },
                "(1 << *(sbyte *)(param_1 + 5))": {
                    "1": "flag"
                },
                "(char)param_2": {
                    "1": "updated_value",
                    "2": "new_value_char"
                },
                "*(byte *)(param_1 + 4)": {
                    "1": "byte_value2",
                    "2": "byte_value1",
                    "3": "current_value"
                },
                "*(byte *)(param_1 + 5)": {
                    "1": "byte_value2",
                    "4": "index"
                },
                "*(char *)(param_1 + 4)": {
                    "1": "current_status"
                },
                "*(int *)(&DAT_1fff03e4 + (uint)*(byte *)(param_1 + 5) * 4)": {
                    "1": "status_data",
                    "2": "data_value"
                },
                "*(sbyte *)(param_1 + 5)": {
                    "1": "signed_byte_value",
                    "2": "signed_index"
                },
                "*(signed byte *)": {
                    "1": "signed_byte_value"
                },
                "*FUN_0000058e": {
                    "1": "modify_value"
                },
                "*FUN_000005ca": {
                    "1": "check_value"
                },
                "DAT_1fff03e4": {
                    "1": "data_chunk",
                    "2": "data_buffer",
                    "7": "data_array"
                },
                "DAT_1fff0424": {
                    "1": "bitmap",
                    "2": "status_flags",
                    "3": "data_flag"
                },
                "DAT_1fff0424 & ~(1 << *(sbyte *)(param_1 + 5))": {
                    "1": "updated_flags_a"
                },
                "DAT_1fff0424 | 1 << *(sbyte *)(param_1 + 5)": {
                    "1": "updated_flags_b"
                },
                "FUN_0000058e": {
                    "1": "set_next_status",
                    "2": "copy_data",
                    "3": "copy_value"
                },
                "FUN_000005ca": {
                    "1": "update_data",
                    "10": "check_and_update_value",
                    "2": "check_status"
                },
                "FUN_00000698": {
                    "1": "update_data_value",
                    "12": "update_data",
                    "3": "update_param",
                    "4": "update_parameter_value"
                },
                "byte": {
                    "1": "byte_data",
                    "2": "byte_val",
                    "3": "byte",
                    "4": "byte_value"
                },
                "byte *(param_1 + 4)": {
                    "1": "current_value_ptr"
                },
                "byte *(param_1 + 5)": {
                    "1": "array_index_ptr"
                },
                "byteVal": {
                    "1": "offset"
                },
                "byteValue1": {
                    "1": "usage_index"
                },
                "byte_1": {
                    "1": "byte_1"
                },
                "byte_2": {
                    "1": "byte_2"
                },
                "byte_3": {
                    "1": "byte_3"
                },
                "byte_4": {
                    "1": "byte_4"
                },
                "char": {
                    "1": "char",
                    "2": "char_value"
                },
                "checkAndUpdateValue": {
                    "1": "check_and_update_value"
                },
                "copyValue": {
                    "1": "copy_value"
                },
                "currentValue": {
                    "1": "current_value"
                },
                "int": {
                    "1": "integer",
                    "2": "int_value"
                },
                "newValue": {
                    "1": "value"
                },
                "param_1": {
                    "1": "param",
                    "2": "value_index",
                    "3": "param1",
                    "4": "data_address"
                },
                "param_1 + 4": {
                    "1": "parameter_index_plus4"
                },
                "param_1 + 5": {
                    "1": "parameter_index_plus5"
                },
                "param_1 + 8": {
                    "1": "new_data"
                },
                "param_2": {
                    "1": "new_address",
                    "2": "source_data",
                    "20": "new_value",
                    "3": "new_status"
                },
                "parameterIndex + 8": {
                    "1": "parameter_index_plus8"
                },
                "sbyte": {
                    "1": "bit_index",
                    "2": "signed_byte_value",
                    "3": "signed_byte"
                },
                "updateValue:8": {
                    "1": "current_value"
                },
                "valueIndex": {
                    "1": "index"
                }
            },
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "code": "\nvoid update_data_00000698(int_value data_pointer,uint_value new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte_value *)(data_pointer + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint_value)*(byte_value *)(data_pointer + 5) * 4),\n       *(int_value *)(&DAT_1fff03e4 + (uint_value)*(byte_value *)(data_pointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signed_byte *)(data_pointer + 5));\n    }\n  }\n  else if (*(byte_value *)(data_pointer + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint_value)*(byte_value *)(data_pointer + 5) * 4,data_pointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signed_byte *)(data_pointer + 5);\n  }\n  *(char_value *)(data_pointer + 4) = new_value_char;\n  return;\n}\n\n",
            "current_name": "update_data_00000698",
            "entrypoint": "0x00000698",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_2": "new_value_char",
                "FUN_00000698": "update_data_00000698",
                "byte": "byte_value",
                "char": "char_value",
                "int": "int_value",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "sbyte": "signed_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000738": {
            "additional_data": {
                "DAT_1fff0354": {
                    "2": "flag"
                },
                "DAT_1fff03dc": {
                    "2": "data_ptr"
                },
                "FUI_0000093c": {
                    "1": "execute_function"
                },
                "FUI_00000d2a": {
                    "1": "check_value"
                },
                "FUN_00000738": {
                    "1": "check_param_validity",
                    "2": "check_and_execute",
                    "3": "validate_parameters",
                    "6": "check_parameters"
                },
                "FUN_0000093c": {
                    "1": "execute_operation",
                    "2": "handle_failure",
                    "5": "execute_action"
                },
                "FUN_00000d2a": {
                    "1": "check_conditions",
                    "13": "check_condition",
                    "2": "check_value"
                },
                "Fbla1": {
                    "1": "byte1"
                },
                "Fbla2": {
                    "1": "byte2"
                },
                "iVar1": {
                    "1": "function_result",
                    "2": "return_value",
                    "26": "result"
                },
                "param_1": {
                    "1": "parameter",
                    "16": "input_value",
                    "2": "input_param",
                    "4": "value"
                }
            },
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nvoid check_parameters_00000738(ushort input_value)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_parameters_00000738",
            "entrypoint": "0x00000738",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000738": "check_parameters_00000738",
                "iVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000794": {
            "additional_data": {
                "FUN_00000698": {
                    "1": "set_values_in_array"
                },
                "FUN_00000794": {
                    "1": "initialize_stack",
                    "12": "initialize_data",
                    "2": "initialize_function",
                    "3": "initialize_int_array",
                    "7": "initialize_array"
                },
                "FUN_00000930": {
                    "1": "perform_initialization"
                },
                "FUN_00000cd0": {
                    "1": "initialize_function",
                    "2": "initialize_something",
                    "3": "perform_initialization"
                },
                "F_00000698": {
                    "1": "set_parameters"
                },
                "F_00000794": {
                    "1": "initialize_and_generate_stack"
                },
                "F_00000930": {
                    "1": "initialize_stack"
                },
                "F_00000cd0": {
                    "1": "initialize_data"
                },
                "extraout_r1": {
                    "1": "extra_output",
                    "15": "return_value",
                    "3": "extra_return_value",
                    "5": "result"
                },
                "iStack_18": {
                    "1": "loop_count2",
                    "3": "loop_var2",
                    "5": "inner_loop_counter",
                    "6": "loop_counter2"
                },
                "iStack_1c": {
                    "1": "count_down2",
                    "3": "loop_var1",
                    "5": "outer_loop_counter",
                    "6": "loop_counter1"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "14": "index",
                    "2": "loop_counter",
                    "7": "counter"
                },
                "param_1": {
                    "1": "array_size"
                },
                "param_2": {
                    "1": "value"
                },
                "piStack_14": {
                    "1": "data_array_ptr",
                    "10": "array_pointer",
                    "2": "ptr",
                    "3": "array_ptr",
                    "6": "stack_pointer"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "12": "pointer",
                    "3": "pointer_var",
                    "4": "data_pointer",
                    "6": "ptr"
                },
                "uVar3": {
                    "1": "temp_variable2",
                    "2": "alignment",
                    "3": "address",
                    "7": "aligned_pointer",
                    "8": "aligned_address"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "calling": [],
            "code": "\nint * initialize_data_00000794(void)\n\n{\n  int return_value;\n  int index;\n  undefined4 *pointer;\n  uint aligned_address;\n  int loop_counter1;\n  int loop_counter2;\n  int *array_pointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  aligned_address = (int)pointer + index & 0xfffffffc;\n  array_pointer = (int *)(aligned_address - 4);\n  *array_pointer = 0x77777777;\n  if (((uint)array_pointer & 7) != 0) {\n    array_pointer = (int *)(aligned_address - 8);\n    *array_pointer = 0x88888888;\n  }\n  array_pointer[-1] = 0x1000000;\n  array_pointer[-2] = index << 0xd;\n  array_pointer[-3] = 0x795;\n  array_pointer = array_pointer + -4;\n  *array_pointer = 0;\n  for (loop_counter2 = 3; 0 < loop_counter2; loop_counter2 = loop_counter2 + -1) {\n    array_pointer = array_pointer + -1;\n    *array_pointer = loop_counter2;\n  }\n  array_pointer = array_pointer + -1;\n  *array_pointer = return_value;\n  for (loop_counter1 = 0xb; 3 < loop_counter1; loop_counter1 = loop_counter1 + -1) {\n    array_pointer = array_pointer + -1;\n    *array_pointer = loop_counter1;\n  }\n  array_pointer[-1] = -3;\n  return array_pointer + -1;\n}\n\n",
            "current_name": "initialize_data_00000794",
            "entrypoint": "0x00000794",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "extraout_r1": "return_value",
                "iStack_18": "loop_counter2",
                "iStack_1c": "loop_counter1",
                "iVar1": "index",
                "piStack_14": "array_pointer",
                "puVar2": "pointer",
                "uVar3": "aligned_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000007dc": {
            "additional_data": {
                "FUN_000007dc": {
                    "1": "allocate_memory",
                    "2": "initialize_data",
                    "25": "initialize_memory"
                },
                "local_10": {
                    "1": "loop_counter_2",
                    "2": "loop_counter2",
                    "4": "counter2",
                    "8": "j"
                },
                "local_14": {
                    "1": "count2",
                    "2": "loop_index",
                    "3": "counter",
                    "9": "i"
                },
                "local_c": {
                    "1": "current_pointer",
                    "15": "ptr",
                    "2": "memory_pointer",
                    "6": "memory_ptr"
                },
                "local_c[-1]": {
                    "1": "value1"
                },
                "local_c[-2]": {
                    "1": "ptr[-2]"
                },
                "local_c[-3]": {
                    "1": "constant_value"
                },
                "local_c[-4]": {
                    "1": "count"
                },
                "param_1": {
                    "1": "param_addr",
                    "2": "param",
                    "3": "arg1",
                    "4": "param1",
                    "5": "initial_value"
                },
                "param_2": {
                    "1": "param",
                    "2": "argument2",
                    "3": "arg2",
                    "5": "param2",
                    "9": "value"
                },
                "param_3": {
                    "1": "argument3",
                    "11": "offset",
                    "2": "size",
                    "3": "arg3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "end_value",
                    "2": "base_address",
                    "3": "arg4",
                    "5": "alignment",
                    "6": "size"
                },
                "uVar1": {
                    "1": "aligned_address",
                    "14": "aligned_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nint * initialize_memory_000007dc(undefined4 initial_value,int value,int offset,int size)\n\n{\n  uint aligned_size;\n  int i;\n  int j;\n  int *ptr;\n  \n  aligned_size = size + offset & 0xfffffffc;\n  ptr = (int *)(aligned_size - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(aligned_size - 8);\n    *ptr = 0x88888888;\n  }\n  value1 = 0x1000000;\n  initial_value_ptr = initial_value;\n  constant_value = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  value1 = -3;\n  return ptr + -1;\n}\n\n",
            "current_name": "initialize_memory_000007dc",
            "entrypoint": "0x000007dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "local_10": "j",
                "local_14": "i",
                "local_c": "ptr",
                "local_c[-1]": "value1",
                "local_c[-2]": "initial_value_ptr",
                "local_c[-3]": "constant_value",
                "param_1": "initial_value",
                "param_2": "value",
                "param_3": "offset",
                "param_4": "size",
                "uVar1": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000008b8": {
            "additional_data": {
                "Elf32_Rel": {
                    "1": "relocation_entry"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array_end"
                },
                "F1": {
                    "1": "calculate_rel_offset"
                },
                "FUN_000008b8": {
                    "1": "find_relocation_length",
                    "2": "calculate_relative_offset",
                    "4": "find_last_offset"
                },
                "local_c": {
                    "1": "entry_ptr",
                    "2": "rel_table_entry",
                    "3": "relocation_entry",
                    "4": "rel_ptr",
                    "5": "rel_entry",
                    "6": "current_rel_entry"
                },
                "r_info": {
                    "1": "info"
                },
                "r_offset": {
                    "1": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  relocation_entry *current_rel_entry;\n  \n  for (current_rel_entry = (relocation_entry *)&DAT_1fff0000;\n      (current_rel_entry->offset == 0xe7fee7fe && (current_rel_entry < rel_array_end));\n      current_rel_entry = (relocation_entry *)&current_rel_entry->info) {\n  }\n  return ((int)rel_array_end - (int)current_rel_entry >> 2) << 2;\n}\n\n",
            "current_name": "find_last_offset_000008b8",
            "entrypoint": "0x000008b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel": "relocation_entry",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array_end",
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "current_rel_entry",
                "r_info": "info",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000900": {
            "additional_data": {
                "FUN_00000900": {
                    "1": "get_main_stack_pointer_improved",
                    "21": "get_main_stack_pointer",
                    "9": "get_stack_pointer"
                },
                "uVar1": {
                    "12": "stack_pointer",
                    "18": "main_stack_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "current_name": "get_main_stack_pointer_00000900",
            "entrypoint": "0x00000900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000091c": {
            "additional_data": {
                "0x1fff0000": {
                    "1": "max_value",
                    "2": "default_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_0000091c": {
                    "1": "get_memory_address_range",
                    "12": "get_memory_address",
                    "2": "get_constant_value",
                    "7": "get_magic_number"
                },
                "PTR_00000000": {
                    "1": "unimportant_pointer"
                },
                "return value": {
                    "2": "memory_address"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "15": "uint32_t",
                    "2": "uint32"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nuint32_t get_memory_address_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "current_name": "get_memory_address_0000091c",
            "entrypoint": "0x0000091c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000930": {
            "additional_data": {
                "FUN_00000930": {
                    "1": "execute_func_with_interrupt",
                    "15": "run_infinite_loop",
                    "2": "infinite_loop",
                    "5": "execute_infinite_loop"
                },
                "FUN_00000cf0": {
                    "1": "first_subfunction",
                    "10": "initialize_system",
                    "2": "perform_initialization",
                    "8": "initialize"
                },
                "FUN_00000cf0_RETVAL": {
                    "1": "initialize_ret_val"
                },
                "software_interrupt": {
                    "1": "interrupt",
                    "3": "trigger_interrupt"
                },
                "undefined4": {
                    "4": "void"
                }
            },
            "called": [
                "FUN_00000cf0"
            ],
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_00000930",
            "entrypoint": "0x00000930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000093c": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "DAT_e000ed04": {
                    "1": "register_e000ed04"
                },
                "FUN_0000093c": {
                    "1": "enable_memory_access",
                    "2": "enable_interrupt_flag",
                    "3": "set_memory_flag",
                    "7": "set_flag"
                },
                "_DAT_e000ed04": {
                    "1": "cache_control_reg",
                    "2": "status_register",
                    "3": "memory_flag",
                    "4": "register_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "code": "\n\n\nvoid set_flag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "current_name": "set_flag_0000093c",
            "entrypoint": "0x0000093c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000093c": "set_flag_0000093c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000990": {
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000990",
            "entrypoint": "0x00000990",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00000a30": {
            "additional_data": {
                "FUN_00000a30": {
                    "1": "calculate_stack_address",
                    "18": "get_nmi_handler_address",
                    "2": "decrement_stack_pointer"
                },
                "FUN_00000f04": {
                    "10": "print_debug_message",
                    "12": "print_message"
                },
                "in_r3": {
                    "1": "parameter",
                    "11": "offset",
                    "2": "input_register",
                    "3": "handler_offset",
                    "5": "register_value"
                },
                "param_1": {
                    "1": "message",
                    "2": "character",
                    "8": "message_type"
                },
                "param_2": {
                    "1": "message_string",
                    "11": "message"
                },
                "stack0xe000ffe0": {
                    "1": "nmi_handler_address"
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [],
            "code": "\nundefined * get_nmi_handler_address_00000a30(void)\n\n{\n  int offset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return &nmi_handler_address + -*(int *)(offset + 0x4c);\n}\n\n",
            "current_name": "get_nmi_handler_address_00000a30",
            "entrypoint": "0x00000a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "offset",
                "stack0xe000ffe0": "nmi_handler_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "additional_data": {
                "FUN_00000cc0": {
                    "1": "disable_ir_qinterrupts_and_return_previous_irq_status",
                    "2": "disable_ir_qinterrupts_if_needed",
                    "4": "disable_ir_qinterrupts_and_return_irq_status"
                },
                "FUN_00000f04": {
                    "1": "print_dummy_handler",
                    "2": "log_dummy_handler"
                },
                "bVar1": {
                    "22": "is_privileged_mode",
                    "8": "is_privileged"
                },
                "isCurrentModePrivileged": {
                    "1": "check_if_current_mode_is_privileged",
                    "2": "is_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_if_ir_qinterrupts_are_enabled"
                },
                "param_1": {
                    "1": "handler_num",
                    "2": "handler_type",
                    "5": "handler_id"
                },
                "param_2": {
                    "1": "dummy_description",
                    "11": "handler_name"
                },
                "uVar2": {
                    "1": "saved_irq_state",
                    "3": "irq_state",
                    "5": "irq_status",
                    "8": "interrupts_enabled"
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00000dc0"
            ],
            "code": "\nundefined4 disable_ir_qinterrupts_and_return_irq_status_00000cc0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = is_irq_interrupts_enabled();\n  }\n  disableIRQinterrupts();\n  return interrupts_enabled;\n}\n\n",
            "current_name": "disable_ir_qinterrupts_and_return_irq_status_00000cc0",
            "entrypoint": "0x00000cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_return_irq_status_00000cc0",
                "bVar1": "is_privileged_mode",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "is_irq_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "additional_data": {
                "FUN_00000cd0": {
                    "1": "check_interrupts",
                    "2": "check_interrupt_status",
                    "3": "get_ir_qinterrupt_status",
                    "8": "get_interrupt_status"
                },
                "bVar1": {
                    "10": "is_current_mode_privileged",
                    "17": "is_privileged_mode",
                    "3": "is_privileged"
                },
                "disableIRQinterrupts": {
                    "1": "disable_interrupts"
                },
                "isCurrentModePrivileged": {
                    "1": "check_current_mode_privilege",
                    "2": "is_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_irq_interrupts_enabled"
                },
                "uVar2": {
                    "1": "is_enabled_irq_interrupts",
                    "11": "interrupt_status",
                    "2": "is_interrupts_enabled",
                    "3": "are_irq_interrupts_enabled",
                    "5": "interrupts_enabled"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "code": "\nundefined4 get_interrupt_status_00000cd0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupt_status;\n  \n  interrupt_status = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupt_status = check_irq_interrupts_enabled();\n  }\n  disable_interrupts();\n  return interrupt_status;\n}\n\n",
            "current_name": "get_interrupt_status_00000cd0",
            "entrypoint": "0x00000cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cd0": "get_interrupt_status_00000cd0",
                "bVar1": "is_privileged_mode",
                "disableIRQinterrupts": "disable_interrupts",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled",
                "uVar2": "interrupt_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "additional_data": {
                "FUN_00000cf0": {
                    "1": "get_irq_status",
                    "11": "check_irq_interrupts",
                    "2": "check_interrupts_enabled",
                    "3": "check_interrupts",
                    "4": "check_interrupt_status"
                },
                "bVar1": {
                    "1": "is_mode_privileged",
                    "20": "is_privileged_mode",
                    "3": "is_privileged"
                },
                "enableIRQinterrupts": {
                    "1": "enable_interrupts"
                },
                "isCurrentModePrivileged": {
                    "1": "is_privileged_mode"
                },
                "isIRQinterruptsEnabled": {
                    "1": "check_irq_enabled",
                    "2": "is_interrupts_enabled"
                },
                "uVar2": {
                    "1": "interrupts_enabled_status",
                    "2": "is_interrupts_enabled",
                    "22": "interrupts_enabled"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000930"
            ],
            "code": "\nundefined4 check_irq_interrupts_00000cf0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  enable_interrupts();\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_current_mode_privilege();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_00000cf0_enabled();\n  }\n  return interrupts_enabled;\n}\n\n",
            "current_name": "check_irq_interrupts_00000cf0",
            "entrypoint": "0x00000cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "bVar1": "is_privileged_mode",
                "enableIRQinterrupts": "enable_interrupts",
                "isCurrentModePrivileged": "check_current_mode_privilege",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "additional_data": {
                "FUN_00000d0c": {
                    "1": "enable_interrupts_based_on_mode",
                    "11": "enable_irq_interrupts_if_privileged",
                    "4": "enable_ir_qinterrupts_if_needed",
                    "7": "enable_ir_qinterrupts_if_privileged"
                },
                "bVar1": {
                    "1": "is_mode_privileged",
                    "14": "is_privileged_mode",
                    "9": "is_privileged"
                },
                "enableIRQinterrupts": {
                    "1": "set_interrupts_enabled",
                    "2": "enable_interrupts",
                    "4": "enable_irq_interrupts"
                },
                "isCurrentModePrivileged": {
                    "1": "check_current_mode_privilege",
                    "4": "check_privileged_mode"
                },
                "param_1": {
                    "1": "interrupt_config",
                    "10": "interrupt_flag",
                    "2": "flags",
                    "3": "input",
                    "6": "interrupt_flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "code": "\nvoid enable_irq_interrupts_if_privileged_00000d0c(uint interrupt_flag)\n\n{\n  bool is_privileged_mode;\n  \n  is_privileged_mode = (bool)check_privileged_mode();\n  if (is_privileged_mode) {\n    enable_irq_interrupts((interrupt_flag & 1) == 1);\n  }\n  return;\n}\n\n",
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c",
            "entrypoint": "0x00000d0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "bVar1": "is_privileged_mode",
                "enableIRQinterrupts": "enable_irq_interrupts",
                "isCurrentModePrivileged": "check_privileged_mode",
                "param_1": "interrupt_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "additional_data": {
                "FUN_00000d2a": {
                    "1": "get_current_exception_number_if_privileged",
                    "2": "get_active_exception_number",
                    "23": "get_exception_number",
                    "5": "get_current_exception_number"
                },
                "bVar1": {
                    "2": "is_privileged",
                    "24": "is_privileged_mode"
                },
                "getCurrentExceptionNumber": {
                    "1": "retrieve_current_exception_number",
                    "2": "fetch_current_exception_number"
                },
                "isCurrentModePrivileged": {
                    "1": "is_privileged_mode",
                    "2": "is_current_mode_privileged"
                },
                "isCurrentModePrivileged()": {
                    "1": "is_current_mode_privileged"
                },
                "uVar2": {
                    "1": "active_exception_number",
                    "28": "exception_number"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000738"
            ],
            "code": "\nuint get_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)is_current_mode_privileged;\n  if (is_privileged_mode) {\n    exception_number = fetch_current_exception_number();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "current_name": "get_exception_number_00000d2a",
            "entrypoint": "0x00000d2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "getCurrentExceptionNumber": "fetch_current_exception_number",
                "isCurrentModePrivileged": "is_current_mode_privileged",
                "isCurrentModePrivileged()": "is_current_mode_privileged",
                "uVar2": "exception_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d44": {
            "additional_data": {
                "(param_1 & 0xfffff) << 5": {
                    "1": "shifted_lower_bits"
                },
                "(param_1 & mask1)": {
                    "1": "result2"
                },
                "(param_1 & mask2) << 5": {
                    "1": "result3"
                },
                "0x2000000": {
                    "1": "constant"
                },
                "0xf0000000": {
                    "1": "mask1"
                },
                "0xfffff": {
                    "1": "mask2"
                },
                "<unchanged_variable_1>": {
                    "1": "<unchanged_variable_1>"
                },
                "<unchanged_variable_2>": {
                    "1": "<unchanged_variable_2>"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_00000d44": {
                    "1": "calculate_updated_value",
                    "18": "calculate_offset",
                    "2": "multiply_and_shift",
                    "5": "calculate_result"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "new_variable_name_1": {
                    "1": "mask1"
                },
                "new_variable_name_2": {
                    "1": "mask2"
                },
                "new_variable_name_3": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "input_param",
                    "18": "input_value",
                    "2": "value",
                    "3": "base_address"
                },
                "param_1 & 0xf0000000": {
                    "1": "first_bit_of_value"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "masked_input"
                },
                "param_1 & 0xfffff": {
                    "1": "lower_bits_of_value"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "offset_multiplier",
                    "25": "multiplier"
                },
                "param_2 * 4": {
                    "1": "result1"
                },
                "param_2 * 4 + (param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5) + 0x2000000": {
                    "1": "offset"
                },
                "param_3": {
                    "1": "result"
                },
                "param_4": {
                    "1": "bitwise_and_constant"
                },
                "param_5": {
                    "1": "constant"
                },
                "param_6": {
                    "1": "sum"
                },
                "param_7": {
                    "1": "result"
                },
                "result": {
                    "1": "final_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000d76"
            ],
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00000d44",
            "entrypoint": "0x00000d44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d76": {
            "additional_data": {
                "FUN_00000d44": {
                    "1": "calculate_pointer_address"
                },
                "FUN_00000d76": {
                    "1": "reset_memory_value",
                    "17": "clear_memory",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "input_1",
                    "3": "input_ptr",
                    "5": "input1",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "input_val",
                    "2": "input_2",
                    "4": "size",
                    "5": "input2",
                    "6": "flag"
                },
                "puVar1": {
                    "1": "memory_location",
                    "2": "ptr_to_memory",
                    "3": "output_ptr",
                    "4": "result_pointer",
                    "5": "result_ptr",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00000d44"
            ],
            "calling": [
                "FUN_00000d9c"
            ],
            "code": "\nvoid clear_memory_00000d76(undefined4 input_param,undefined flag)\n\n{\n  undefined4 *result;\n  \n  result = (undefined4 *)FUN_00000d44(input_param,flag);\n  *result = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00000d76",
            "entrypoint": "0x00000d76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "input_param",
                "param_2": "flag",
                "puVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "additional_data": {
                "FUN_00000d76": {
                    "1": "perform_initialization",
                    "2": "set_register_value",
                    "3": "configure_device",
                    "5": "configure_peripheral"
                },
                "FUN_00000d9c": {
                    "1": "initialize_communication",
                    "13": "initialize_hardware",
                    "3": "initialize_device",
                    "4": "initialize_peripheral",
                    "8": "initialize_system"
                },
                "param_1": {
                    "1": "command_address",
                    "5": "base_address",
                    "7": "address"
                },
                "param_2": {
                    "1": "configuration_flag",
                    "2": "config_value",
                    "3": "value",
                    "4": "flag"
                }
            },
            "called": [
                "FUN_00000d76"
            ],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\nvoid initialize_hardware_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_00000d9c",
            "entrypoint": "0x00000d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d9c": "initialize_hardware_00000d9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000db0": {
            "additional_data": {
                "FUN_00000d9c": {
                    "1": "initialize_data",
                    "2": "execute_task1",
                    "3": "perform_task1",
                    "5": "perform_first_task",
                    "6": "perform_initialization"
                },
                "FUN_00000db0": {
                    "1": "initialize_components",
                    "11": "initialize_system",
                    "2": "initialize_program",
                    "5": "execute_initialization",
                    "8": "initialize"
                },
                "FUN_00000dcc": {
                    "1": "perform_action_b",
                    "2": "perform_task_b",
                    "3": "perform_task2",
                    "5": "perform_second_task"
                }
            },
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_system_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "current_name": "initialize_system_00000db0",
            "entrypoint": "0x00000db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "additional_data": {
                "FUN_00000cc0": {
                    "1": "reset_system",
                    "2": "initialize_subsystem",
                    "4": "execute_initialization",
                    "5": "sub_function",
                    "8": "perform_initialization"
                },
                "FUN_00000dc0": {
                    "1": "initialize_components",
                    "17": "initialize_system",
                    "3": "execute_main_function",
                    "5": "execute_initialization"
                }
            },
            "called": [
                "FUN_00000cc0"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "current_name": "initialize_system_00000dc0",
            "entrypoint": "0x00000dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dc0": "initialize_system_00000dc0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "FUN_00000dcc": {
                    "1": "initialize_settings",
                    "10": "initialize_memory",
                    "13": "initialize_data",
                    "6": "initialize_registers"
                },
                "N/A": {
                    "1": "new_value"
                },
                "_40052000": {
                    "1": "data_identifier"
                },
                "_4005200e": {
                    "1": "data_value"
                },
                "_DAT_40052000": {
                    "1": "register2",
                    "2": "memory_value",
                    "3": "data_flag",
                    "5": "initial_value"
                },
                "_DAT_4005200e": {
                    "1": "variable1",
                    "2": "register_value",
                    "5": "data_value",
                    "7": "memory_address"
                },
                "var_40052000": {
                    "1": "data_flag"
                },
                "var_4005200e": {
                    "1": "data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\n\n\nvoid initialize_data_00000dcc(void)\n\n{\n  _DATdata_value = 0xd928;\n  _DATdata_identifier = 0xd2;\n  return;\n}\n\n",
            "current_name": "initialize_data_00000dcc",
            "entrypoint": "0x00000dcc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc",
                "_40052000": "data_identifier",
                "_4005200e": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000df4": {
            "additional_data": {
                "FUN_00000df4": {
                    "1": "initialize_components",
                    "10": "initialize_device",
                    "2": "initialize_communication",
                    "4": "initialize_system"
                },
                "FUN_000013b8": {
                    "1": "execute_commands",
                    "2": "perform_initialization",
                    "3": "configure_peripheral",
                    "4": "send_data"
                },
                "param_1": {
                    "1": "config_id",
                    "2": "input1",
                    "3": "mode",
                    "9": "flag"
                },
                "param_2": {
                    "1": "memory_address",
                    "2": "register1",
                    "5": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "param2",
                    "4": "value1",
                    "5": "value2"
                },
                "param_4": {
                    "1": "parameter_3",
                    "2": "value_2",
                    "4": "value2",
                    "5": "value3"
                }
            },
            "called": [
                "FUN_000013b8"
            ],
            "calling": [
                "FUN_00000410"
            ],
            "code": "\nvoid initialize_device_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "current_name": "initialize_device_00000df4",
            "entrypoint": "0x00000df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000df4": "initialize_device_00000df4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e14": {
            "additional_data": {
                "FUN_00000e14": {
                    "1": "extract_and_return_value",
                    "6": "process_data"
                },
                "FUN_000012e2": {
                    "1": "process_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_param_1",
                    "5": "input_1",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "input_param_2",
                    "5": "input_2",
                    "7": "output_param",
                    "8": "input2"
                },
                "uVar1": {
                    "1": "result_code",
                    "11": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_000012e2"
            ],
            "calling": [
                "FUN_00000490"
            ],
            "code": "\nundefined4 process_data_00000e14(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,input1,input2);\n  return result;\n}\n\n",
            "current_name": "process_data_00000e14",
            "entrypoint": "0x00000e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e14": "process_data_00000e14",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e38": {
            "additional_data": {
                "FUN_00000e38": {
                    "1": "execute_process",
                    "2": "reverse_and_return",
                    "7": "execute_function"
                },
                "FUN_000015d0": {
                    "1": "calculate_result",
                    "2": "perform_operation",
                    "3": "call_sub_function",
                    "4": "process_data"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "sub_param1",
                    "3": "input_param1",
                    "7": "input_param",
                    "8": "input1"
                },
                "param_2": {
                    "1": "output",
                    "2": "arg2",
                    "7": "input2",
                    "8": "output_param"
                },
                "param_3": {
                    "1": "flags",
                    "2": "sub_param3"
                }
            },
            "called": [
                "FUN_000015d0"
            ],
            "calling": [
                "FUN_00004dee"
            ],
            "code": "\nundefined4 execute_function_00000e38(undefined4 input1,undefined4 output_param)\n\n{\n  FUN_000015d0(0,input1,output_param);\n  return output_param;\n}\n\n",
            "current_name": "execute_function_00000e38",
            "entrypoint": "0x00000e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e38": "execute_function_00000e38",
                "param_1": "input1",
                "param_2": "output_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e58": {
            "additional_data": {
                "FUN_00000cd0": {
                    "1": "initialize_device_settings",
                    "22": "initialize",
                    "4": "initialize_system"
                },
                "FUN_00000e58": {
                    "1": "loop_forever",
                    "15": "infinite_loop",
                    "2": "execute_infinite_loop",
                    "3": "endless_loop",
                    "9": "run_infinite_loop"
                },
                "undefined4": {
                    "1": "uint32_t"
                }
            },
            "called": [
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid infinite_loop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_00000e58",
            "entrypoint": "0x00000e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e64": {
            "additional_data": {
                "FUN_00000e64": {
                    "1": "initialize_flags_and_functions",
                    "2": "configure_peripheral",
                    "3": "set_flags_and_call_functions",
                    "5": "initialize_system",
                    "9": "initialize_hardware"
                },
                "FUN_00001274": {
                    "1": "initialize_data",
                    "13": "perform_initialization",
                    "2": "perform_initial_setup",
                    "6": "initialize"
                },
                "FUN_00001eea": {
                    "1": "send_command",
                    "2": "set_config",
                    "5": "set_configuration",
                    "6": "configure_device",
                    "9": "configure_peripheral"
                },
                "FUN_00001ff6": {
                    "1": "acknowledge_interrupt",
                    "2": "perform_action",
                    "3": "trigger_event"
                },
                "_DAT_40048038": {
                    "1": "device_register1"
                },
                "_DAT_40049048": {
                    "1": "device_register2"
                },
                "param_1": {
                    "1": "device_id",
                    "2": "peripheral_address"
                },
                "param_2": {
                    "1": "command_data",
                    "2": "mask"
                }
            },
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_hardware_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_00000e64",
            "entrypoint": "0x00000e64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e64": "initialize_hardware_00000e64"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "additional_data": {
                "FUN_00000ed8": {
                    "1": "initialize_components",
                    "2": "execute_initialization",
                    "21": "initialize_data"
                },
                "FUN_00004c84": {
                    "1": "initialize_data",
                    "13": "process_data"
                },
                "in_lr": {
                    "1": "function_return_address",
                    "4": "return_address",
                    "7": "link_register"
                },
                "param_1": {
                    "1": "input1",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "lr"
                },
                "param_3": {
                    "1": "input_param3",
                    "4": "param3"
                },
                "param_4": {
                    "1": "input4",
                    "4": "param4"
                }
            },
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid initialize_data_00000ed8(void)\n\n{\n  undefined4 link_register;\n  \n  FUN_00004c84(&DAT_00006f58,link_register);\n  return;\n}\n\n",
            "current_name": "initialize_data_00000ed8",
            "entrypoint": "0x00000ed8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "link_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000ef8",
            "entrypoint": "0x00000ef8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00000f04": {
            "additional_data": {
                "DAT_00006f78": {
                    "1": "halted_message"
                },
                "DAT_1fff0468": {
                    "1": "kernel_panic_flag"
                },
                "FUNC_00000ef8": {
                    "1": "perform_preprocessing",
                    "2": "do_something3",
                    "3": "execute_function1"
                },
                "FUNC_00002400": {
                    "1": "perform_initialization",
                    "2": "do_something4",
                    "3": "execute_function2"
                },
                "FUN_00000cd0": {
                    "1": "perform_some_action",
                    "2": "do_something",
                    "3": "perform_initialization",
                    "6": "perform_cleanup"
                },
                "FUN_00000e58": {
                    "1": "setup",
                    "2": "execute_function3"
                },
                "FUN_00000ed8": {
                    "1": "handle_panic_type3",
                    "2": "handle_error",
                    "3": "handle_special_case",
                    "5": "handle_panic",
                    "7": "handle_exception"
                },
                "FUN_00000f04": {
                    "1": "kernel_panic",
                    "24": "handle_kernel_panic",
                    "4": "kernel_panic_handler"
                },
                "FUN_0000211c": {
                    "1": "execute211c",
                    "2": "do_something5",
                    "5": "cleanup"
                },
                "FUN_000023a4": {
                    "1": "perform_initialization",
                    "2": "do_something2",
                    "3": "initialize",
                    "5": "initialize_system"
                },
                "FUN_00004c84": {
                    "1": "print_panic_msg",
                    "19": "print_message",
                    "2": "print_error_message"
                },
                "F_U308C86": {
                    "1": "handle_panic"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "unrecovered_jump_table",
                    "14": "jump_table",
                    "3": "jumptable"
                },
                "local_10": {
                    "1": "message_length",
                    "2": "panic_message",
                    "5": "panic_message_copy",
                    "8": "message"
                },
                "local_9": {
                    "1": "panic_code_local",
                    "2": "local_panic_type",
                    "3": "type",
                    "5": "code",
                    "6": "panic_type_copy"
                },
                "param_1": {
                    "1": "error_code",
                    "12": "panic_code",
                    "13": "panic_type",
                    "2": "error_type"
                },
                "param_2": {
                    "1": "panic_msg",
                    "2": "version",
                    "21": "panic_message",
                    "4": "error_message"
                },
                "uStack_18": {
                    "1": "stack_var",
                    "2": "stack_pointer",
                    "5": "stack_variable"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 stack_variable;\n  code *jump_table;\n  undefined4 message;\n  char panic_type_copy;\n  \n  message = panic_message;\n  panic_type_copy = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  FUN_00000e58();\n  stack_variable = (int)&stack_variable + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "handle_kernel_panic_00000f04",
            "entrypoint": "0x00000f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "message",
                "local_9": "panic_type_copy",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "uStack_18": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "additional_data": {
                "DAT_1fff046c": {
                    "1": "data2"
                },
                "DAT_1fff0a6c": {
                    "1": "data1"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array"
                },
                "FUN_00000930": {
                    "1": "get_mask",
                    "2": "get_initial_value",
                    "6": "get_random_value"
                },
                "FUN_00000cd0": {
                    "1": "perform_some_action",
                    "11": "perform_initialization",
                    "4": "initialize_subsystem",
                    "5": "initialize_system"
                },
                "FUN_00000f8c": {
                    "1": "initialize_variables",
                    "10": "initialize_memory",
                    "14": "initialize_data",
                    "2": "initialize_function"
                },
                "FUN_000010d4": {
                    "1": "write_data_to_memory",
                    "2": "copy_data_to_memory",
                    "3": "copy_memory",
                    "4": "copy_data"
                },
                "dword": {
                    "1": "local_variable_size"
                },
                "iStack_24": {
                    "1": "multiplier",
                    "2": "stack_value",
                    "9": "shifted_value"
                },
                "local_10": {
                    "1": "constant_4",
                    "2": "r_info"
                },
                "local_14": {
                    "1": "constant2",
                    "2": "value2",
                    "3": "constant_value2"
                },
                "local_18": {
                    "1": "unused_var2",
                    "2": "constant_value",
                    "3": "constant_value1"
                },
                "piStack_20": {
                    "1": "shifted_value_ptr",
                    "2": "shifted_value_pointer",
                    "3": "stack_pointer",
                    "4": "pointer_to_shifted_value"
                },
                "puVar2": {
                    "1": "pointer_array",
                    "2": "pointer_to_data",
                    "3": "data_pointer",
                    "7": "pointer"
                },
                "uStack_1c": {
                    "1": "stack_variable_2",
                    "8": "constant_value"
                },
                "uVar1": {
                    "1": "highest_bit",
                    "2": "bit_mask",
                    "7": "shifted_value"
                },
                "uVar3": {
                    "1": "shifted_input",
                    "2": "counter",
                    "4": "loop_counter"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_data_00000f8c(void)\n\n{\n  uint shifted_value;\n  undefined4 *pointer;\n  uint loop_counter;\n  int shifted_value;\n  int *pointer_to_shifted_value;\n  undefined4 constant_value;\n  undefined4 constant_value1;\n  undefined4 constant_value2;\n  local_variable_size r_info;\n  \n  FUN_00000cd0();\n  r_info = array[3].r_info;\n  constant_value2 = 0;\n  constant_value1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  r_info = array[3].r_offset;\n  constant_value2 = 0;\n  constant_value1 = 0xf5d;\n  loop_counter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  constant_value = 0xfd3;\n  shifted_value = FUN_00000930();\n  shifted_value = shifted_value >> 0x1e;\n  pointer = (undefined4 *)(loop_counter * 0x100);\n  shifted_value = (loop_counter >> 0x1d) << 0x11;\n  pointer_to_shifted_value = &shifted_value;\n  if ((shifted_value & shifted_value - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = shifted_value - 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_00000f8c",
            "entrypoint": "0x00000f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "array",
                "FUN_00000f8c": "initialize_data_00000f8c",
                "dword": "local_variable_size",
                "iStack_24": "shifted_value",
                "local_10": "r_info",
                "local_14": "constant_value2",
                "local_18": "constant_value1",
                "piStack_20": "pointer_to_shifted_value",
                "puVar2": "pointer",
                "uStack_1c": "constant_value",
                "uVar1": "shifted_value",
                "uVar3": "loop_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000fec": {
            "additional_data": {
                "*param_1": {
                    "2": "array[0]"
                },
                "FUN_00000f04": {
                    "1": "print_assertion_failed",
                    "10": "print_error_message",
                    "2": "display_error_message",
                    "4": "print_error"
                },
                "FUN_00000fec": {
                    "1": "initialize_bitmask",
                    "2": "initialize_bit_pattern",
                    "22": "initialize_array",
                    "3": "initialize_param_array"
                },
                "param_1": {
                    "1": "error_type",
                    "18": "array",
                    "3": "param_array",
                    "4": "output_array"
                },
                "param_1 (in FUN_00000f04)": {
                    "1": "error_type"
                },
                "param_1[1]": {
                    "2": "array[1]"
                },
                "param_1[2]": {
                    "1": "array[2]"
                },
                "param_2": {
                    "1": "error_info",
                    "15": "size",
                    "2": "bit_count",
                    "8": "array_size"
                },
                "param_2 (in FUN_00000f04)": {
                    "1": "error_detail"
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nvoid initialize_array_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "current_name": "initialize_array_00000fec",
            "entrypoint": "0x00000fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001034": {
            "additional_data": {
                "FUN_00000f04": {
                    "1": "print_failed_assertion"
                },
                "FUN_00001034": {
                    "1": "copy_data_to_array",
                    "13": "update_pointer",
                    "2": "update_pointer_list"
                },
                "local_1c": {
                    "1": "current_value",
                    "17": "current_pointer",
                    "2": "current_ptr",
                    "3": "current_element",
                    "8": "current_node"
                },
                "param_1": {
                    "1": "input_list",
                    "11": "pointer_list",
                    "2": "array_of_pointers",
                    "3": "array",
                    "4": "node_list"
                },
                "param_2": {
                    "1": "new_node",
                    "19": "index"
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00002434"
            ],
            "code": "\nvoid update_pointer_00001034(int **pointer_list,int index)\n\n{\n  int **current_pointer;\n  \n  if (8 < *(byte *)(index + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_pointer = pointer_list;\n      (*current_pointer != (int *)0x0 && (*(byte *)((int)*current_pointer + -3) <= *(byte *)(index + 5)));\n      current_pointer = (int **)*current_pointer) {\n  }\n  *(int **)(index + 8) = *current_pointer;\n  *current_pointer = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "current_name": "update_pointer_00001034",
            "entrypoint": "0x00001034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001034": "update_pointer_00001034",
                "local_1c": "current_pointer",
                "param_1": "pointer_list",
                "param_2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010a0": {
            "additional_data": {
                "FUN_000010a0": {
                    "1": "calculate_parameter_difference",
                    "2": "find_first_mismatch_index",
                    "5": "find_offset",
                    "6": "calculate_array_offset",
                    "8": "calculate_offset"
                },
                "local_c": {
                    "2": "current_pointer",
                    "20": "current_element",
                    "8": "current_ptr"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "array_ptr",
                    "21": "array",
                    "3": "input_array"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "current_name": "calculate_offset_000010a0",
            "entrypoint": "0x000010a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "local_c": "current_element",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010d4": {
            "additional_data": {
                "DAT_1fff0350": {
                    "1": "data_pointer_count"
                },
                "DAT_1fff0358": {
                    "1": "data_pointer_array"
                },
                "FUN_00000698": {
                    "1": "process_data_resource"
                },
                "FUN_00000738": {
                    "1": "release_resource"
                },
                "FUN_000007dc": {
                    "1": "process_data_chunk"
                },
                "FUN_00000cd0": {
                    "1": "initialize"
                },
                "FUN_00000d0c": {
                    "1": "cleanup"
                },
                "FUN_00000fec": {
                    "1": "initialize_resource"
                },
                "FUN_000010d4": {
                    "1": "decode_and_process_data",
                    "10": "process_data",
                    "3": "initialize_data_structure"
                },
                "iVar3": {
                    "1": "result_var_3",
                    "19": "return_value",
                    "2": "output",
                    "3": "error_code",
                    "4": "result"
                },
                "local_10": {
                    "1": "local_var_3",
                    "2": "local_10",
                    "4": "loop_variable",
                    "8": "loop_var",
                    "9": "loop_counter"
                },
                "local_2c": {
                    "1": "var_3",
                    "2": "aligned_address",
                    "3": "adjusted_data"
                },
                "local_30": {
                    "1": "adjusted_size2",
                    "2": "aligned_offset",
                    "3": "adjusted_length",
                    "5": "adjusted_size"
                },
                "local_a": {
                    "1": "var_6",
                    "2": "index_2",
                    "6": "available_index"
                },
                "local_c": {
                    "1": "inner_loop_var",
                    "2": "loop_var1"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param",
                    "4": "input_value",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "input_parameter2",
                    "2": "size_param",
                    "3": "data_length",
                    "4": "buffer_size",
                    "5": "length"
                },
                "param_3": {
                    "1": "byte_param",
                    "2": "length",
                    "3": "data_type",
                    "6": "byte_value"
                },
                "param_4": {
                    "1": "input_parameter4",
                    "18": "flags",
                    "2": "options",
                    "5": "flag"
                },
                "param_5": {
                    "1": "input_parameter5",
                    "18": "param5",
                    "3": "arg1",
                    "8": "param_5"
                },
                "param_6": {
                    "1": "input_parameter6",
                    "18": "param6",
                    "3": "arg2",
                    "8": "param_6"
                },
                "param_7": {
                    "1": "input_parameter7",
                    "18": "param7",
                    "3": "arg3",
                    "8": "param_7"
                },
                "puVar5": {
                    "1": "result_array_ptr",
                    "2": "buffer_ptr",
                    "4": "ptr",
                    "6": "pointer",
                    "7": "data_pointer"
                },
                "uVar1": {
                    "1": "result_var1",
                    "10": "result",
                    "2": "temp_var1",
                    "4": "result_1"
                },
                "uVar2": {
                    "1": "new_data",
                    "13": "result2",
                    "2": "temp_var2",
                    "3": "temp",
                    "4": "result_2"
                },
                "uVar4": {
                    "1": "var_1",
                    "2": "u_var4",
                    "3": "temp_var",
                    "4": "aligned_size"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "calling": [
                "FUN_00000f8c"
            ],
            "code": "\nint process_data_000010d4(uint input_data,int size,byte byte_count,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int return_value;\n  uint aligned_size;\n  undefined4 *data_pointer;\n  int adjusted_size;\n  uint adjusted_data;\n  uint loop_counter;\n  short index1;\n  short available_index;\n  \n  if (byte_count < 0x10) {\n    adjusted_size = size;\n    adjusted_data = input_data;\n    if ((input_data & 3) != 0) {\n      adjusted_size = 4 - (input_data & 3);\n      adjusted_data = adjusted_size + input_data;\n      adjusted_size = size - adjusted_size;\n    }\n    aligned_size = adjusted_size - 0x30U & 0xfffffffc;\n    data_pointer = (undefined4 *)(aligned_size + adjusted_data);\n    if ((flags & 8) == 0) {\n      *(uint *)adjusted_data = adjusted_data;\n    }\n    else {\n      for (loop_counter = adjusted_data; loop_counter < aligned_size + adjusted_data; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    result1 = FUN_00000cd0();\n    available_index = 0;\n    for (index1 = 1; index1 < 0x21; index1 = index1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + index1 * 4) == 0) {\n        available_index = index1;\n        break;\n      }\n    }\n    if (available_index == 0) {\n      FUN_00000d0c(result1);\n      return_value = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + available_index * 4) = data_pointer;\n      *(short *)((int)data_pointer + 6) = available_index;\n      result2 = FUN_000007dc(param5,param6,adjusted_data,aligned_size);\n      *data_pointer = result2;\n      data_pointer[9] = adjusted_data;\n      data_pointer[0xb] = size;\n      data_pointer[10] = param7;\n      *(byte *)((int)data_pointer + 5) = byte_count;\n      *(undefined *)(data_pointer + 1) = 0;\n      data_pointer[2] = 0;\n      data_pointer[3] = 0;\n      data_pointer[4] = 0;\n      FUN_00000fec(data_pointer + 5,0);\n      data_pointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(data_pointer,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result1);\n          FUN_00000738(byte_count);\n          return (int)available_index;\n        }\n      }\n      else {\n        FUN_00000698(data_pointer,1);\n      }\n      FUN_00000d0c(result1);\n      return_value = (int)available_index;\n    }\n  }\n  else {\n    return_value = -0x16;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_000010d4",
            "entrypoint": "0x000010d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010d4": "process_data_000010d4",
                "iVar3": "return_value",
                "local_10": "loop_counter",
                "local_2c": "adjusted_data",
                "local_30": "adjusted_size",
                "local_a": "available_index",
                "local_c": "index1",
                "param_1": "input_data",
                "param_2": "size",
                "param_3": "byte_count",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "puVar5": "data_pointer",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001274": {
            "additional_data": {
                "FUN_00001274": {
                    "1": "initialize_components",
                    "2": "initialize_module",
                    "21": "initialize_system"
                },
                "FUN_00001c84": {
                    "1": "perform_additional_tasks",
                    "2": "setup_device",
                    "3": "perform_initialization",
                    "5": "initialize_data"
                },
                "FUN_00002396": {
                    "1": "perform_initialization",
                    "2": "execute_process",
                    "3": "execute_task"
                },
                "FUN_0000258c": {
                    "1": "perform_initialization",
                    "2": "perform_startup_tasks",
                    "4": "perform_preprocessing"
                }
            },
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "current_name": "initialize_system_00001274",
            "entrypoint": "0x00001274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000129c": {
            "additional_data": {
                "FUN_0000129c": {
                    "1": "initialize_communication",
                    "5": "initialize_function",
                    "7": "initialize_device"
                },
                "FUN_00002434": {
                    "1": "set_system_status",
                    "2": "execute_sub_function",
                    "3": "set_device_mode",
                    "8": "set_flag"
                },
                "param_1": {
                    "1": "process_id",
                    "10": "data",
                    "2": "flag",
                    "3": "param"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "mode",
                    "6": "value"
                }
            },
            "called": [
                "FUN_00002434"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nvoid initialize_0000129c(undefined4 data)\n\n{\n  FUN_00002434(data,1);\n  return;\n}\n\n",
            "current_name": "initialize_0000129c",
            "entrypoint": "0x0000129c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000129c": "initialize_0000129c",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012b4": {
            "additional_data": {
                "FUN_000012b4": {
                    "1": "call_and_cleanup",
                    "14": "process_data",
                    "2": "reverse_and_cleanup"
                },
                "FUN_00002364": {
                    "1": "process_data_step",
                    "2": "process_data",
                    "3": "calculate_result"
                },
                "FUN_000024bc": {
                    "1": "execute_operation",
                    "5": "cleanup_data"
                },
                "param_1": {
                    "1": "input_number",
                    "2": "input_param",
                    "3": "input_data",
                    "4": "input",
                    "5": "input_value",
                    "6": "input_array"
                },
                "param_2": {
                    "1": "unused_param",
                    "2": "unknown_param",
                    "3": "input_data",
                    "4": "input"
                },
                "uVar1": {
                    "23": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "calling": [],
            "code": "\nundefined4 process_data_000012b4(int input_array,undefined input)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(input_array + 4,input);\n  FUN_000024bc(input_array);\n  return result;\n}\n\n",
            "current_name": "process_data_000012b4",
            "entrypoint": "0x000012b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "input_array",
                "param_2": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012e2": {
            "additional_data": {
                "FUM_000012e2": {
                    "1": "check_and_update_value"
                },
                "FUN_0000129c": {
                    "1": "sub_function_2",
                    "3": "cleanup_function",
                    "4": "cleanup"
                },
                "FUN_000012e2": {
                    "1": "loop_until_not_zero",
                    "2": "find_nonzero_value",
                    "3": "reverse_loop"
                },
                "FUN_0000231c": {
                    "1": "execute_operation",
                    "2": "check_function",
                    "4": "check_condition"
                },
                "iVar1": {
                    "20": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "param_1",
                    "10": "input_value",
                    "2": "input_array",
                    "4": "array",
                    "5": "input_param",
                    "6": "input"
                },
                "param_2": {
                    "1": "param",
                    "2": "param_a",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "unknown2",
                    "2": "arg2",
                    "4": "param_3"
                }
            },
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "calling": [
                "FUN_00000e14"
            ],
            "code": "\nint reverse_loop_000012e2(int input_value,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input_value + 4,param2,param3);\n    if (result != 0) break;\n    FUN_0000129c(input_value);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_loop_000012e2",
            "entrypoint": "0x000012e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012e2": "reverse_loop_000012e2",
                "iVar1": "result",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001318": {
            "additional_data": {
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "shifted_val"
                },
                "*((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "memory_address"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "array_element_address",
                    "6": "memory_address"
                },
                "-0x1fff1f00": {
                    "1": "base_address"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shifted_value",
                    "2": "bit_mask",
                    "3": "bit_value",
                    "5": "bit_to_set"
                },
                "<unnamed_var>": {
                    "1": "shifted_value"
                },
                "BYTE": {
                    "1": "param_1"
                },
                "FUM_00001318": {
                    "1": "set_bit_in_memory"
                },
                "FUN_00001318": {
                    "1": "reverse_bits_and_store",
                    "14": "set_bit_in_memory",
                    "2": "set_bit_at_position",
                    "3": "set_bit_in_array",
                    "7": "set_bit"
                },
                "byte": {
                    "1": "param_1"
                },
                "char": {
                    "1": "character"
                },
                "int": {
                    "1": "integer_pointer"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "byte_value",
                    "20": "input_byte",
                    "5": "byte_to_set"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_000014c4"
            ],
            "code": "\nvoid set_bit_in_memory_00001318(param_1 input_byte)\n\n{\n  *(integer_pointer *)(((unsigned_integer)(integer_pointer)(character)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00001318",
            "entrypoint": "0x00001318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "byte": "param_1",
                "char": "character",
                "int": "integer_pointer",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001348": {
            "additional_data": {
                "FUN_0000093c": {
                    "1": "execute_requested_function",
                    "2": "execute_task",
                    "3": "perform_action",
                    "4": "execute_function",
                    "6": "execute_sub_function"
                },
                "FUN_00001348": {
                    "1": "check_if_data_is_valid",
                    "2": "check_data_and_call_function",
                    "6": "check_and_call_function",
                    "7": "check_and_execute_function"
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00001628"
            ],
            "code": "\nvoid check_and_execute_function_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_function_00001348",
            "entrypoint": "0x00001348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001348": "check_and_execute_function_00001348"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001360": {
            "additional_data": {
                "(param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5)": {
                    "1": "shifted_value"
                },
                "0x2000000": {
                    "2": "constant_offset"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00001360": {
                    "1": "calculate_shifted_value",
                    "24": "calculate_offset",
                    "3": "calculate_result"
                },
                "PTR_": {
                    "1": ""
                },
                "param_1": {
                    "1": "input_a",
                    "2": "input_number",
                    "3": "value",
                    "4": "base_value",
                    "8": "input_value"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "masked_value"
                },
                "param_1 (internal)": {
                    "1": "param1"
                },
                "param_1 (masked)": {
                    "1": "masked_value"
                },
                "param_1 (shifted)": {
                    "1": "shifted_value"
                },
                "param_2": {
                    "1": "value_2",
                    "20": "multiplier",
                    "3": "index"
                },
                "param_2 (internal)": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "temp_value",
                    "2": "constant_1"
                },
                "param_4": {
                    "1": "shifted_value",
                    "2": "constant_2"
                },
                "param_5": {
                    "1": "final_value"
                },
                "result": {
                    "1": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001392"
            ],
            "code": "\nint calculate_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001360",
            "entrypoint": "0x00001360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001392": {
            "additional_data": {
                "FUN_00001360": {
                    "1": "calculate_flag"
                },
                "FUN_00001392": {
                    "1": "set_return_value_to1",
                    "2": "set_return_value_to_one",
                    "3": "set_flag_to_true",
                    "8": "set_flag"
                },
                "int FUN_00001360(uint param_1,int param_2)": {
                    "1": "calculate_result"
                },
                "int param_2": {
                    "1": "input2"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "param",
                    "4": "input1",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "flag_value",
                    "10": "flag",
                    "2": "arg2",
                    "4": "input2"
                },
                "puVar1": {
                    "1": "result",
                    "2": "return_value_pointer",
                    "3": "output_pointer",
                    "5": "result_ptr",
                    "6": "result_pointer"
                },
                "uint param_1": {
                    "1": "input1"
                },
                "undefined param_2": {
                    "1": "arg2"
                },
                "undefined4 *puVar1": {
                    "1": "result_ptr"
                },
                "undefined4 param_1": {
                    "1": "arg1"
                }
            },
            "called": [
                "FUN_00001360"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid set_flag_00001392(undefined4 input_param,undefined flag)\n\n{\n  undefined4 *result_pointer;\n  \n  result_pointer = (undefined4 *)FUN_00001360(input_param,flag);\n  *result_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_flag_00001392",
            "entrypoint": "0x00001392",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001392": "set_flag_00001392",
                "param_1": "input_param",
                "param_2": "flag",
                "puVar1": "result_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000013b8": {
            "additional_data": {
                "DAT_00006ffc": {
                    "1": "config1_address"
                },
                "DAT_00007002": {
                    "1": "config_flag"
                },
                "DAT_1fff0b6c": {
                    "1": "config1_array"
                },
                "DAT_1fff0b70": {
                    "1": "config2_array"
                },
                "FUN_00000f04": {
                    "1": "display_message",
                    "3": "log_error",
                    "4": "print_error_message"
                },
                "FUN_00001392": {
                    "1": "execute_operation",
                    "4": "process_data"
                },
                "FUN_000013b8": {
                    "1": "update_device_info",
                    "16": "update_data",
                    "2": "initialize_data"
                },
                "FUN_00001448": {
                    "1": "perform_operation",
                    "2": "process_index",
                    "4": "process_data"
                },
                "FUN_000014c4": {
                    "1": "handle_failure",
                    "6": "handle_error"
                },
                "param_1": {
                    "1": "record_index",
                    "29": "index"
                },
                "param_2": {
                    "1": "result",
                    "24": "value",
                    "5": "status"
                },
                "param_3": {
                    "1": "config1",
                    "2": "data_1",
                    "24": "data1"
                },
                "param_4": {
                    "1": "config2",
                    "2": "value2",
                    "24": "data2"
                },
                "uVar1": {
                    "11": "return_value",
                    "17": "result"
                }
            },
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "calling": [
                "FUN_00000df4"
            ],
            "code": "\nundefined4 update_data_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "update_data_000013b8",
            "entrypoint": "0x000013b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001448": {
            "additional_data": {
                "*(short *)(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "value1"
                },
                "*(short *)(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "value2"
                },
                "*(undefined2 *)(&DAT_00006fec + param_1 * 0x20)": {
                    "1": "value1_ptr"
                },
                "*(undefined2 *)(&DAT_00006fee + param_1 * 0x20)": {
                    "1": "value2_ptr"
                },
                "*(undefined4 *)(&DAT_00006ff0 + param_1 * 0x20)": {
                    "1": "value1_param"
                },
                "*(undefined4 *)(&DAT_00006ff4 + param_1 * 0x20)": {
                    "1": "value2_param"
                },
                "<no_change>": {
                    "1": "action_array"
                },
                "DAT_00006fec": {
                    "1": "data1"
                },
                "DAT_00006fee": {
                    "1": "data2"
                },
                "DAT_00006ff0": {
                    "1": "param2_1"
                },
                "DAT_00006ff4": {
                    "1": "param2_2"
                },
                "FUN_00001448": {
                    "1": "execute_functions",
                    "2": "process_params",
                    "22": "process_data",
                    "3": "check_and_call_functions"
                },
                "FUN_00001f80": {
                    "1": "execute_operation",
                    "2": "process_sub_function",
                    "4": "execute_action",
                    "5": "process_entry"
                },
                "param_1": {
                    "1": "param",
                    "19": "index",
                    "3": "value"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "arg",
                    "4": "data"
                },
                "undefined2": {
                    "1": "subfunction_param1"
                },
                "undefined4": {
                    "1": "subfunction_param2"
                }
            },
            "called": [
                "FUN_00001f80"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid process_data_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(subfunction_param1 *)(&DAT_00006fec + index * 0x20),\n                 *(subfunction_param2 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(subfunction_param1 *)(&DAT_00006fee + index * 0x20),\n                 *(subfunction_param2 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00001448",
            "entrypoint": "0x00001448",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index",
                "undefined2": "subfunction_param1",
                "undefined4": "subfunction_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000014c4": {
            "additional_data": {
                "FUN_00001318": {
                    "1": "perform_action"
                },
                "FUN_000014c4": {
                    "1": "optimize_function",
                    "12": "update_data",
                    "2": "update_config",
                    "3": "update_settings",
                    "5": "update_configuration"
                },
                "FirmwareUpgrade": {
                    "1": "perform_firmware_upgrade"
                },
                "param_1": {
                    "1": "device_index",
                    "2": "config_index",
                    "28": "index"
                },
                "param_2": {
                    "1": "divide_by_value",
                    "13": "value",
                    "2": "block_size",
                    "3": "factor",
                    "8": "divisor"
                },
                "pbVar1": {
                    "1": "memory_ptr",
                    "2": "byte_array",
                    "9": "data_ptr"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "2": "data_size",
                    "3": "data_value",
                    "8": "value1"
                },
                "uVar3": {
                    "1": "packet_value",
                    "2": "calculated_value",
                    "3": "result",
                    "4": "div_result",
                    "8": "value2"
                }
            },
            "called": [
                "FUN_00001318"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid update_data_000014c4(int index,uint value)\n\n{\n  byte *data_ptr;\n  uint value1;\n  uint value2;\n  \n  data_ptr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data_ptr[3] = data_ptr[3] & 0xf3;\n  data_ptr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (value << 4);\n  *data_ptr = (byte)(value2 >> 8) & 0x1f;\n  data_ptr[1] = (byte)value2;\n  data_ptr[10] = (byte)((value1 << 2) / value + 1 >> 1) & 0x1f;\n  data_ptr[0x10] = data_ptr[0x10] | 0x88;\n  if ((data_ptr[0x10] & 0x70) == 0) {\n    data_ptr[0x13] = 0;\n  }\n  else {\n    data_ptr[0x13] = (char)(2 << (data_ptr[0x10] >> 4 & 7)) - 1;\n  }\n  data_ptr[0x15] = 1;\n  data_ptr[0x11] = 0xc0;\n  data_ptr[3] = data_ptr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "current_name": "update_data_000014c4",
            "entrypoint": "0x000014c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data_ptr",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000015d0": {
            "additional_data": {
                "FUN_000015d0": {
                    "1": "copy_data_into_memory",
                    "16": "copy_data",
                    "2": "copy_data_to_destination",
                    "8": "copy_data_to_memory"
                },
                "iVar1": {
                    "1": "data_address",
                    "2": "data_offset",
                    "3": "dest_addr",
                    "5": "data_pointer",
                    "6": "destination_address"
                },
                "local_c": {
                    "1": "index",
                    "15": "counter",
                    "2": "loop_counter",
                    "7": "i"
                },
                "param_1": {
                    "1": "array_index",
                    "26": "index",
                    "3": "offset"
                },
                "param_2": {
                    "1": "source_offset",
                    "12": "source",
                    "2": "source_buffer",
                    "5": "source_addr",
                    "7": "source_address"
                },
                "param_3": {
                    "1": "data_length",
                    "13": "length",
                    "6": "num_elements",
                    "8": "size"
                }
            },
            "called": [],
            "calling": [
                "FUN_00000e38"
            ],
            "code": "\nvoid copy_data_000015d0(int index,int source,uint length)\n\n{\n  int destination_address;\n  uint counter;\n  \n  destination_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_000015d0",
            "entrypoint": "0x000015d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "iVar1": "destination_address",
                "local_c": "counter",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001628": {
            "additional_data": {
                "&DAT_00006fe4": {
                    "1": "ptr_array"
                },
                "&DAT_00006fe4 + param_1 * 0x20": {
                    "1": "ptr_entry"
                },
                "&DAT_00006fe4 + param_1 * 0x20 + 4": {
                    "1": "entry_flag"
                },
                "&DAT_00006fe4 + param_1 * 0x20 + 7": {
                    "1": "entry_data"
                },
                "&DAT_1fff0b6c": {
                    "1": "func_array"
                },
                "&DAT_1fff0b6c + param_1 * 8": {
                    "1": "func_entry"
                },
                "&DAT_1fff0b70 + param_1 * 8": {
                    "1": "func_arg"
                },
                "(&DAT_1fff0b6c + index * 8)": {
                    "1": "function_ptr"
                },
                "(*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20)": {
                    "1": "is_flag_set"
                },
                "(*(int *)(&DAT_1fff0b6c + index * 8))": {
                    "1": "function"
                },
                "(*(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7))": {
                    "1": "arg2"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + index * 8))": {
                    "1": "arg1"
                },
                "(*(undefined4 *)(&DAT_1fff0b70 + param_1 * 8), parameter)": {
                    "1": "execute_function"
                },
                "(code **)(*(int *)(&DAT_1fff0b6c + param_1 * 8))": {
                    "1": "function"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4)": {
                    "1": "flag"
                },
                "*(byte *)(*(int *)(&DAT_00006fe4 + param_1 * 0x20) + 4)": {
                    "1": "byte_value"
                },
                "*(int *)(&DAT_00006fe4 + param_1 * 0x20)": {
                    "1": "memory_address"
                },
                "*(int *)(&DAT_1fff0b6c + index * 8)": {
                    "1": "function_pointer"
                },
                "*(int *)(&DAT_1fff0b6c + param_1 * 8)": {
                    "1": "function_pointer"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7)": {
                    "1": "arg2"
                },
                "*(undefined *)(*(int *)(&DAT_00006fe4 + param_1 * 0x20) + 7)": {
                    "1": "parameter"
                },
                "*(undefined4 *)(&DAT_1fff0b70 + index * 8)": {
                    "1": "arg1"
                },
                "DAT_00006fe4": {
                    "1": "data_structure_array",
                    "2": "data_pointer_array",
                    "3": "function_table"
                },
                "DAT_1fff0b6c": {
                    "1": "function_pointer_table",
                    "4": "function_table"
                },
                "DAT_1fff0b70": {
                    "1": "arg_table",
                    "2": "function_arg"
                },
                "FUN_00001348": {
                    "1": "execute_cleanup_function",
                    "18": "cleanup",
                    "2": "cleanup_function",
                    "4": "perform_cleanup"
                },
                "FUN_00001628": {
                    "1": "execute_operation",
                    "11": "execute_function",
                    "2": "execute_function_if_valid",
                    "7": "execute_function_if_condition_met"
                },
                "PTR_00006fe4": {
                    "1": "data_pointer"
                },
                "PTR_1fff0b70": {
                    "1": "code_pointer"
                },
                "byte": {
                    "2": "flag",
                    "9": "flags"
                },
                "byteValue": {
                    "1": "flags"
                },
                "byte_1": {
                    "1": "flag"
                },
                "code": {
                    "2": "function_pointer"
                },
                "functionParameter": {
                    "1": "callback_parameter"
                },
                "functionPointer": {
                    "1": "callback_function"
                },
                "int": {
                    "1": "function_ptr"
                },
                "int_1": {
                    "1": "function_pointer"
                },
                "param_1": {
                    "1": "task_index",
                    "29": "index"
                },
                "undefined4_1": {
                    "1": "arg1"
                },
                "undefined_1": {
                    "1": "arg2"
                }
            },
            "called": [
                "FUN_00001348"
            ],
            "calling": [
                "FUN_00001688"
            ],
            "code": "\nvoid execute_function_00001628(function_ptr index)\n\n{\n  if (((*(flags *)(*(function_ptr *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(function_ptr *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(function_pointer **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(function_ptr *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "current_name": "execute_function_00001628",
            "entrypoint": "0x00001628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001628": "execute_function_00001628",
                "byte": "flags",
                "code": "function_pointer",
                "int": "function_ptr",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001688": {
            "additional_data": {
                "FUN_00001628": {
                    "1": "initialize_value",
                    "2": "perform_initialization",
                    "7": "set_initial_value"
                },
                "FUN_00001688": {
                    "1": "execute_process",
                    "10": "initialize_function",
                    "2": "initialize_system",
                    "3": "initialize_application"
                },
                "param_1": {
                    "1": "process_id",
                    "4": "initial_value"
                }
            },
            "called": [
                "FUN_00001628"
            ],
            "calling": [],
            "code": "\nvoid initialize_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "current_name": "initialize_00001688",
            "entrypoint": "0x00001688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001688": "initialize_00001688"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001696": {
            "additional_data": {
                "0x2000000": {
                    "1": "constant_offset"
                },
                "FUN_00001696": {
                    "1": "calculate_new_value",
                    "2": "calculate_result",
                    "26": "calculate_offset"
                },
                "F_UNF_001696": {
                    "1": "calculate_result"
                },
                "offset": {
                    "1": "result"
                },
                "param_1": {
                    "1": "input_val",
                    "10": "input_value",
                    "2": "offset",
                    "3": "base_value",
                    "6": "base_address",
                    "8": "address"
                },
                "param_1 & 0xf0000000 | (param_1 & 0xfffff) << 5": {
                    "1": "upper_bits"
                },
                "param_1_low": {
                    "1": "address_low"
                },
                "param_1_masked": {
                    "1": "address_masked"
                },
                "param_2": {
                    "1": "index",
                    "2": "count",
                    "21": "multiplier",
                    "3": "value"
                },
                "param_2 * 4": {
                    "1": "multiplied_index"
                },
                "param_3": {
                    "3": "offset"
                },
                "param_4": {
                    "1": "constant"
                },
                "param_5": {
                    "1": "constant_shifted"
                },
                "param_6": {
                    "1": "constant2"
                },
                "result": {
                    "1": "output_value"
                },
                "return": {
                    "1": "offset"
                },
                "temp_1": {
                    "1": "shifted_base"
                },
                "temp_2": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  offset multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001696",
            "entrypoint": "0x00001696",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier",
                "return": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016c8": {
            "additional_data": {
                "*puVar1": {
                    "1": "result_pointer"
                },
                "FUN_00001696": {
                    "1": "get_int_value"
                },
                "FUN_000016c8": {
                    "1": "initialize_variable",
                    "16": "set_flag",
                    "2": "set_flag_to_true"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "input",
                    "3": "value",
                    "4": "input_param",
                    "7": "input1"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "data",
                    "3": "value",
                    "4": "arg2",
                    "7": "input2",
                    "8": "flag"
                },
                "puVar1": {
                    "1": "result_pointer",
                    "2": "output_pointer",
                    "4": "result",
                    "9": "result_ptr"
                },
                "undefined param_2": {
                    "1": "flag"
                },
                "undefined4 param_1": {
                    "1": "input_value"
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_000017dc"
            ],
            "code": "\nvoid set_flag_000016c8(undefined4 input1,undefined flag)\n\n{\n  undefined4 *result_ptr;\n  \n  result_ptr = (undefined4 *)FUN_00001696(input1,flag);\n  *result_ptr = 1;\n  return;\n}\n\n",
            "current_name": "set_flag_000016c8",
            "entrypoint": "0x000016c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016c8": "set_flag_000016c8",
                "param_1": "input1",
                "param_2": "flag",
                "puVar1": "result_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016ec": {
            "additional_data": {
                "FUN_00001696": {
                    "1": "get_data"
                },
                "FUN_000016ec": {
                    "1": "mark_function_as_called",
                    "16": "set_flag",
                    "2": "initialize_flag",
                    "6": "set_flag_to_true"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param",
                    "4": "input1",
                    "5": "param"
                },
                "param_2": {
                    "1": "value2",
                    "2": "value",
                    "3": "flag_value",
                    "4": "arg2",
                    "5": "flag"
                },
                "puVar1": {
                    "1": "output_buffer",
                    "2": "output_ptr",
                    "3": "result",
                    "4": "flag_ptr",
                    "6": "flag_pointer"
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "code": "\nvoid set_flag_000016ec(undefined4 param,undefined flag)\n\n{\n  undefined *flag_pointer;\n  \n  flag_pointer = (undefined *)FUN_00001696(param,flag);\n  *flag_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_flag_000016ec",
            "entrypoint": "0x000016ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "param",
                "param_2": "flag",
                "puVar1": "flag_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001710": {
            "additional_data": {
                "FUN_00001696": {
                    "1": "get_value"
                },
                "FUN_00001710": {
                    "1": "clear_value",
                    "2": "set_to_zero",
                    "22": "clear_memory",
                    "3": "initialize_memory"
                },
                "function_name": {
                    "1": "initialize_memory"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_param",
                    "3": "param",
                    "4": "input"
                },
                "param_2": {
                    "1": "param",
                    "10": "size",
                    "2": "arg2",
                    "4": "flag"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "2": "result_pointer",
                    "3": "result_ptr",
                    "7": "memory_pointer"
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "code": "\nvoid clear_memory_00001710(undefined4 input,undefined size)\n\n{\n  undefined *memory_pointer;\n  \n  memory_pointer = (undefined *)FUN_00001696(input,size);\n  *memory_pointer = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00001710",
            "entrypoint": "0x00001710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "input",
                "param_2": "size",
                "puVar1": "memory_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001734": {
            "additional_data": {
                "FUN_00001710": {
                    "1": "sub_function",
                    "2": "set_values",
                    "3": "copy_data",
                    "5": "set_parameters",
                    "6": "set_data"
                },
                "FUN_00001734": {
                    "1": "execute_data_transfer",
                    "2": "initialize_data_structures",
                    "25": "initialize_data"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "memory_address",
                    "3": "data_address",
                    "5": "data_pointer"
                },
                "param_2": {
                    "1": "param2",
                    "12": "data_size",
                    "2": "config_size",
                    "3": "length",
                    "5": "size"
                }
            },
            "called": [
                "FUN_00001710"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "code": "\nvoid initialize_data_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "current_name": "initialize_data_00001734",
            "entrypoint": "0x00001734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001748": {
            "additional_data": {
                "DAT_40064003": {
                    "1": "flag_value",
                    "2": "flags"
                },
                "FUN_00001748": {
                    "1": "update_data_with_masking",
                    "2": "update_flag",
                    "3": "update_flag_bits",
                    "4": "update_flags"
                },
                "param_1": {
                    "1": "value_to_add",
                    "2": "value",
                    "3": "input_value",
                    "6": "input_byte"
                },
                "param_1 | DAT_40064003 & 0x1f": {
                    "1": "updated_bits"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                }
            },
            "called": [],
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "code": "\nvoid update_flags_00001748(byte input_byte)\n\n{\n  DAT_40064003 = input_byte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "current_name": "update_flags_00001748",
            "entrypoint": "0x00001748",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001778": {
            "additional_data": {
                "FUN_000016ec": {
                    "1": "set_register_value",
                    "2": "update_flag",
                    "4": "apply_mask"
                },
                "FUN_00001710": {
                    "1": "send_status",
                    "2": "call_sub_function",
                    "8": "call_function"
                },
                "FUN_00001778": {
                    "1": "update_global_value",
                    "2": "update_configuration",
                    "4": "update_flags_and_call_function"
                },
                "param_1": {
                    "1": "flags",
                    "2": "register_address"
                },
                "param_2": {
                    "1": "bitmask_length",
                    "2": "size",
                    "3": "length"
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid update_flags_and_call_function_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "current_name": "update_flags_and_call_function_00001778",
            "entrypoint": "0x00001778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001778": "update_flags_and_call_function_00001778"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000017dc": {
            "additional_data": {
                "DAT_4004803c": {
                    "1": "data_settings_ptr"
                },
                "FUN_000016c8": {
                    "1": "set_initial_value",
                    "2": "copy_data",
                    "4": "configure_peripheral",
                    "5": "initialize_memory"
                },
                "FUN_000017dc": {
                    "1": "initialize_config",
                    "10": "initialize_hardware",
                    "3": "initialize_system",
                    "4": "initialize_data",
                    "5": "initialize_memory"
                },
                "_DAT_4003d010": {
                    "1": "data_flag",
                    "2": "flag",
                    "3": "control_register",
                    "4": "status_register"
                },
                "_DAT_40047000": {
                    "1": "register_value",
                    "2": "data_register",
                    "3": "memory_register"
                },
                "param_1": {
                    "1": "data_settings",
                    "2": "config_address",
                    "4": "peripheral_address",
                    "6": "memory_address"
                },
                "param_2": {
                    "1": "peripheral_configuration",
                    "2": "data_length",
                    "3": "size",
                    "8": "value"
                }
            },
            "called": [
                "FUN_000016c8"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n\n\nvoid initialize_hardware_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "current_name": "initialize_hardware_000017dc",
            "entrypoint": "0x000017dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000017dc": "initialize_hardware_000017dc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000182c": {
            "additional_data": {
                "FUN_000016ec": {
                    "1": "reset_buffer",
                    "2": "initialize_pointer",
                    "9": "set_flag"
                },
                "FUN_00001710": {
                    "1": "update_value",
                    "2": "toggle_flag",
                    "3": "set_option",
                    "6": "set_flag"
                },
                "FUN_0000182c": {
                    "1": "configure_peripheral",
                    "16": "initialize_data",
                    "2": "update_configuration",
                    "8": "update_data"
                },
                "param_1": {
                    "1": "ptr_data",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "option_value",
                    "9": "flag"
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initialize_data_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "current_name": "initialize_data_0000182c",
            "entrypoint": "0x0000182c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000018bc": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "device_data",
                    "4": "result",
                    "7": "counter"
                },
                "DAT_40064000": {
                    "1": "power_control_register",
                    "2": "config_data"
                },
                "DAT_40064001": {
                    "1": "config_data",
                    "2": "memory_address",
                    "3": "data_buffer"
                },
                "DAT_40064006": {
                    "1": "status",
                    "3": "status_flags"
                },
                "FUN_00001710": {
                    "1": "set_config_parameter",
                    "13": "initialize_data",
                    "2": "set_config"
                },
                "FUN_00001710_param_1": {
                    "1": "data_pointer"
                },
                "FUN_00001710_param_2": {
                    "1": "data_size"
                },
                "FUN_00001748": {
                    "1": "configure_peripheral",
                    "2": "set_config",
                    "3": "set_device_mode"
                },
                "FUN_00001748_param_1": {
                    "1": "interrupt_code"
                },
                "FUN_000018bc": {
                    "1": "initialize_data",
                    "19": "initialize_system",
                    "2": "initialize_hardware",
                    "7": "initialize_device"
                },
                "fun_00001710": {
                    "1": "set_system_mode"
                },
                "param_1": {
                    "1": "power_mode",
                    "2": "configuration",
                    "5": "byte_value"
                },
                "param_2": {
                    "1": "length",
                    "3": "config_flag"
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_system_000018bc",
            "entrypoint": "0x000018bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000191c": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "system_initialized",
                    "4": "flag"
                },
                "DAT_40064000": {
                    "1": "data_flag",
                    "2": "data_value"
                },
                "DAT_40064006": {
                    "1": "status_flags",
                    "2": "control_value"
                },
                "FUN_00001748": {
                    "1": "set_config",
                    "2": "set_initial_value",
                    "3": "set_mode",
                    "4": "set_configuration",
                    "6": "set_flag"
                },
                "FUN_00001778": {
                    "1": "perform_preprocessing",
                    "2": "perform_pre_initialization",
                    "3": "perform_preparation",
                    "5": "perform_initialization"
                },
                "FUN_0000191c": {
                    "1": "initialize_and_enable",
                    "14": "initialize_data",
                    "2": "initialize_hardware",
                    "5": "initialize",
                    "7": "initialize_system"
                },
                "param_1": {
                    "1": "configuration",
                    "3": "mode",
                    "5": "flag_value"
                }
            },
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_0000191c",
            "entrypoint": "0x0000191c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001960": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "initialized_flag",
                    "2": "result",
                    "3": "system_status"
                },
                "DAT_40064000": {
                    "1": "register_value",
                    "2": "configuration",
                    "7": "device_status"
                },
                "DAT_40064001": {
                    "1": "ptr_data",
                    "5": "memory_address"
                },
                "DAT_40064006": {
                    "1": "check_flags",
                    "2": "status",
                    "6": "status_register",
                    "7": "device_flags"
                },
                "FUN_00001710": {
                    "1": "configure_settings",
                    "2": "set_device_config",
                    "5": "initialize_memory"
                },
                "FUN_00001748": {
                    "1": "set_device_config",
                    "3": "set_register_value",
                    "4": "set_byte_value",
                    "5": "set_mode"
                },
                "FUN_00001960": {
                    "1": "initialize_application",
                    "19": "initialize_system",
                    "5": "initialize_hardware",
                    "6": "initialize_device"
                },
                "param_1": {
                    "1": "flag_value",
                    "10": "byte_value",
                    "2": "register_value",
                    "8": "mode"
                },
                "param_2": {
                    "1": "data_byte",
                    "2": "value",
                    "3": "data",
                    "4": "memory_value",
                    "5": "config",
                    "6": "undefined_value"
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "current_name": "initialize_system_00001960",
            "entrypoint": "0x00001960",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000019c0": {
            "additional_data": {
                "&DAT_40064001": {
                    "1": "device_configuration"
                },
                "DAT_1fff0b74": {
                    "1": "error_status",
                    "2": "status"
                },
                "DAT_40064000": {
                    "1": "system_status",
                    "4": "device_status"
                },
                "DAT_40064001": {
                    "1": "configuration"
                },
                "DAT_40064006": {
                    "1": "device_control",
                    "2": "device_flags"
                },
                "FUN_00001710": {
                    "1": "set_register_value",
                    "2": "configure_device",
                    "5": "initialize_data"
                },
                "FUN_00001734": {
                    "1": "cleanup_procedure",
                    "2": "cleanup_process",
                    "3": "perform_cleanup",
                    "4": "cleanup_system",
                    "6": "finalize_initialization"
                },
                "FUN_00001748": {
                    "1": "set_flags",
                    "13": "set_buffer_size",
                    "2": "set_mode",
                    "3": "set_buffer_length"
                },
                "FUN_00001778": {
                    "1": "initialize_subcomponent1",
                    "2": "perform_initialization",
                    "4": "perform_pre_setup"
                },
                "FUN_000019c0": {
                    "1": "initialize_data",
                    "12": "initialize_device",
                    "14": "initialize_system"
                },
                "byte": {
                    "1": "mode"
                },
                "param_1": {
                    "1": "mode",
                    "2": "byte_value",
                    "3": "buffer_size"
                },
                "param_2": {
                    "1": "enabled"
                },
                "undefined": {
                    "1": "register_value"
                },
                "undefined4": {
                    "1": "config_ptr"
                }
            },
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "current_name": "initialize_system_000019c0",
            "entrypoint": "0x000019c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a18": {
            "additional_data": {
                "F0": {
                    "1": "initialize"
                },
                "F1": {
                    "1": "perform_additional_operations"
                },
                "FUN_000016ec": {
                    "1": "set_device_config",
                    "2": "set_memory_value",
                    "3": "set_config",
                    "5": "set_flag",
                    "6": "set_configuration"
                },
                "FUN_00001734": {
                    "1": "execute_process",
                    "2": "perform_operations",
                    "3": "perform_operation",
                    "5": "perform_initialization",
                    "8": "perform_action"
                },
                "FUN_00001a18": {
                    "1": "initialize_memory",
                    "2": "initialize_system",
                    "22": "initialize_data"
                },
                "param_1": {
                    "1": "data_address"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "flag"
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "current_name": "initialize_data_00001a18",
            "entrypoint": "0x00001a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a18": "initialize_data_00001a18"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "data_value",
                    "2": "constant_value"
                },
                "DAT_40064001": {
                    "1": "memory_block"
                },
                "FUM_00001a3c": {
                    "1": "initialize_system"
                },
                "FUN_000016ec": {
                    "1": "set_pointer_with_value",
                    "4": "set_data",
                    "5": "set_flag",
                    "6": "set_initial_value"
                },
                "FUN_00001734": {
                    "1": "perform_additional_tasks",
                    "14": "perform_action",
                    "2": "perform_cleanup",
                    "3": "perform_initialization",
                    "7": "perform_task"
                },
                "FUN_00001a3c": {
                    "1": "set_data_and_call_functions",
                    "27": "initialize_data"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "data_pointer"
                },
                "param_2": {
                    "1": "flag_value",
                    "3": "value"
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "current_name": "initialize_data_00001a3c",
            "entrypoint": "0x00001a3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a60": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "device_count",
                    "2": "result",
                    "4": "error_code"
                },
                "DAT_40064000": {
                    "1": "device_control",
                    "2": "flag",
                    "3": "device_status"
                },
                "DAT_40064001": {
                    "1": "communication_config",
                    "2": "config_data"
                },
                "DAT_40064005": {
                    "1": "device_param_ptr"
                },
                "DAT_40064006": {
                    "1": "status_flags",
                    "2": "status_register"
                },
                "FUNKY_FUNCTION": {
                    "1": "initialize_device"
                },
                "FUN_000016ec": {
                    "1": "set_device_config",
                    "2": "set_flags",
                    "3": "set_configuration",
                    "8": "send_data"
                },
                "FUN_00001710": {
                    "1": "set_register_value",
                    "2": "configure_peripheral",
                    "4": "set_flag",
                    "6": "configure_device"
                },
                "FUN_00001a60": {
                    "1": "perform_initialization",
                    "5": "initialize_system",
                    "6": "initialize_communication",
                    "9": "initialize_device"
                },
                "PTR_40064001": {
                    "1": "data_ptr"
                },
                "UNKNOWN_PARAM_1": {
                    "1": "data_ptr"
                },
                "UNKNOWN_PARAM_2": {
                    "1": "data_length"
                },
                "UNKNOWN_VAR_1": {
                    "1": "status_register"
                },
                "UNKNOWN_VAR_2": {
                    "1": "counter"
                },
                "dataPtr": {
                    "1": "data_buffer"
                },
                "length": {
                    "1": "data_length"
                },
                "param_1": {
                    "1": "values_param",
                    "3": "data_address",
                    "4": "config_data"
                },
                "param_2": {
                    "1": "num_bits",
                    "2": "data_len",
                    "3": "data_length",
                    "5": "length"
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_device_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "current_name": "initialize_device_00001a60",
            "entrypoint": "0x00001a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "status_value",
                    "2": "data_value",
                    "3": "count",
                    "8": "counter"
                },
                "DAT_40064000": {
                    "1": "status_flags",
                    "2": "input_data",
                    "3": "flags",
                    "6": "data_flag"
                },
                "DAT_40064006": {
                    "1": "status_register",
                    "2": "control_flag",
                    "3": "control_bits",
                    "6": "status"
                },
                "FUN_00001ad4": {
                    "1": "clear_bits_and_get_completion_flag",
                    "16": "initialize_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "current_name": "initialize_data_00001ad4",
            "entrypoint": "0x00001ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001b10": {
            "additional_data": {
                "DAT_00007004": {
                    "1": "code_table"
                },
                "DAT_1fff0b74": {
                    "1": "table_size"
                },
                "FUN_000018bc": {
                    "1": "execute_command_0",
                    "3": "perform_action0"
                },
                "FUN_0000191c": {
                    "1": "execute_command_1",
                    "3": "handle_case1"
                },
                "FUN_00001960": {
                    "1": "execute_command_2",
                    "3": "handle_case2"
                },
                "FUN_000019c0": {
                    "1": "process_case_3",
                    "3": "perform_action3"
                },
                "FUN_00001a18": {
                    "1": "function_e",
                    "3": "handle_case4"
                },
                "FUN_00001a3c": {
                    "1": "execute_command_5",
                    "3": "handle_case5"
                },
                "FUN_00001a60": {
                    "1": "process_case_6",
                    "3": "perform_action6"
                },
                "FUN_00001ad4": {
                    "1": "execute_command7",
                    "3": "handle_case7"
                },
                "FUN_00001b10": {
                    "1": "process_bytes",
                    "12": "process_byte",
                    "2": "process_commands",
                    "3": "process_input",
                    "4": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "command_index",
                    "9": "byte_value"
                },
                "uVar1": {
                    "21": "return_value",
                    "6": "result"
                }
            },
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nundefined4 process_byte_00001b10(byte byte_value)\n\n{\n  undefined4 return_value;\n  \n  if (byte_value < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)byte_value + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (byte_value != DAT_1fff0b74);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_byte_00001b10",
            "entrypoint": "0x00001b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001b10": "process_byte_00001b10",
                "param_1": "byte_value",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "1": "termination_flag",
                    "10": "result",
                    "2": "counter"
                },
                "DAT_40064000": {
                    "1": "configuration",
                    "2": "control"
                },
                "DAT_40064001": {
                    "1": "module_status1",
                    "2": "flags1",
                    "5": "flag1"
                },
                "DAT_40064005": {
                    "1": "control_register2",
                    "2": "flags2",
                    "5": "flag2"
                },
                "DAT_40064006": {
                    "1": "module_flag",
                    "2": "status_register",
                    "3": "status"
                },
                "FUN_00001710": {
                    "1": "update_communication",
                    "2": "configure_device",
                    "3": "set_flags",
                    "6": "update_data"
                },
                "FUN_00001748": {
                    "1": "send_reset_signal",
                    "11": "set_flag",
                    "2": "reset_flags"
                },
                "FUN_00001bb8": {
                    "1": "perform_initialization",
                    "2": "initialize_peripheral",
                    "3": "initialize_communication",
                    "6": "initialize_hardware",
                    "7": "initialize_system",
                    "8": "process_data"
                },
                "byte param_1": {
                    "1": "flag"
                },
                "param_1": {
                    "1": "flag_value",
                    "10": "flag",
                    "3": "byte_value",
                    "5": "data"
                },
                "param_2": {
                    "1": "flag2",
                    "10": "length",
                    "2": "num_bytes",
                    "3": "count"
                },
                "undefined param_2": {
                    "1": "size"
                },
                "undefined4 param_1": {
                    "1": "data_ptr"
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nvoid process_data_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "process_data_00001bb8",
            "entrypoint": "0x00001bb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001bb8": "process_data_00001bb8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001c84": {
            "additional_data": {
                "DAT_40064000": {
                    "1": "data_value"
                },
                "DAT_40064004": {
                    "1": "constant_value"
                },
                "DAT_40064005": {
                    "1": "config_value2"
                },
                "DAT_4006400c": {
                    "1": "data_config",
                    "2": "counter"
                },
                "FUN_00000cd0": {
                    "1": "get_data",
                    "10": "get_initial_value",
                    "2": "get_device_info",
                    "4": "get_initialization_value"
                },
                "FUN_00000d0c": {
                    "1": "process_initial_value",
                    "2": "initialize_peripherals",
                    "3": "set_initial_value"
                },
                "FUN_000017dc": {
                    "1": "perform_initialization",
                    "2": "perform_preprocessing"
                },
                "FUN_0000182c": {
                    "1": "initialize_display",
                    "2": "setup_hardware",
                    "3": "configure_settings",
                    "5": "initialize_components"
                },
                "FUN_00001b10": {
                    "1": "set_flags",
                    "19": "set_mode",
                    "3": "set_operating_mode"
                },
                "FUN_00001bb8": {
                    "1": "perform_task_a",
                    "2": "perform_initialization"
                },
                "FUN_00001c84": {
                    "2": "initialize_hardware",
                    "26": "initialize_system",
                    "3": "initialize"
                },
                "_DAT_40048044": {
                    "1": "register_address"
                },
                "param_1": {
                    "1": "mode"
                },
                "uVar1": {
                    "1": "initialization_value",
                    "2": "configuration",
                    "5": "result"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "current_name": "initialize_system_00001c84",
            "entrypoint": "0x00001c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "additional_data": {
                "DAT_1fff0354": {
                    "2": "data_flag"
                },
                "FUN_0000093c": {
                    "1": "do_something",
                    "2": "execute_initialization",
                    "5": "perform_action",
                    "6": "execute_sub_function",
                    "7": "execute_function"
                },
                "FUN_00001cf0": {
                    "1": "perform_action_if_data_not_empty",
                    "10": "check_and_call_function",
                    "2": "check_if_data_valid",
                    "5": "check_and_execute_function"
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002028"
            ],
            "code": "\nvoid check_and_call_function_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_00001cf0",
            "entrypoint": "0x00001cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001cf0": "check_and_call_function_00001cf0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d08": {
            "additional_data": {
                "FUN_00001d08": {
                    "1": "calculate_modified_value",
                    "2": "calculate_new_value",
                    "25": "calculate_offset"
                },
                "param_1": {
                    "1": "base",
                    "15": "input_value",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "count",
                    "2": "index",
                    "24": "multiplier"
                },
                "param_3": {
                    "1": "multiplier",
                    "3": "offset"
                },
                "param_4": {
                    "1": "constant_value",
                    "2": "constant"
                },
                "param_5": {
                    "1": "result"
                },
                "param_6": {
                    "1": "constant"
                },
                "param_7": {
                    "1": "final_result"
                },
                "param_8": {
                    "1": "constant2"
                },
                "result": {
                    "1": "output_value"
                },
                "var_1": {
                    "1": "high_bits_mask"
                },
                "var_2": {
                    "1": "low_bits_mask"
                },
                "var_3": {
                    "1": "shifted_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001d3a"
            ],
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001d08",
            "entrypoint": "0x00001d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "additional_data": {
                "FUN_00001d08": {
                    "1": "get_address"
                },
                "FUN_00001d3a": {
                    "1": "mark_as_one",
                    "2": "set_return_value_to1",
                    "3": "set_flag_value",
                    "5": "set_flag_to_true",
                    "9": "set_flag"
                },
                "param_1": {
                    "1": "input_parameter1",
                    "2": "param",
                    "3": "input_param",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "flag_value",
                    "3": "input_param2",
                    "6": "flag",
                    "8": "input2"
                },
                "puVar1": {
                    "1": "return_value_pointer",
                    "10": "result_pointer",
                    "2": "flag_ptr",
                    "3": "result",
                    "4": "result_ptr"
                }
            },
            "called": [
                "FUN_00001d08"
            ],
            "calling": [
                "FUN_00001ddc"
            ],
            "code": "\nvoid set_flag_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *result_pointer;\n  \n  result_pointer = (undefined4 *)FUN_00001d08(input1,input2);\n  *result_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_flag_00001d3a",
            "entrypoint": "0x00001d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d3a": "set_flag_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "result_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "additional_data": {
                "FUN_00001d5e": {
                    "1": "extract_flag_from_param",
                    "2": "combine_flags",
                    "3": "apply_mask",
                    "4": "extract_bits"
                },
                "param_1": {
                    "1": "modified_value",
                    "21": "input_value",
                    "3": "input"
                },
                "param_1 & 0x7000 | 0x40048000": {
                    "1": "result"
                },
                "param_2": {
                    "1": "unused"
                },
                "param_n": {
                    "1": "new_name_n"
                },
                "param_n+1": {
                    "1": "new_name_n+1"
                },
                "result": {
                    "1": "combined_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "code": "\nuint extract_bits_00001d5e(ushort input_value)\n\n{\n  return input_value & 0x7000 | 0x40048000;\n}\n\n",
            "current_name": "extract_bits_00001d5e",
            "entrypoint": "0x00001d5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d5e": "extract_bits_00001d5e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d80": {
            "additional_data": {
                "0x1c0": {
                    "1": "bit_mask"
                },
                "0x400ff000": {
                    "2": "fixed_value"
                },
                "FUN_00001d80": {
                    "1": "combine_and_set_bits",
                    "2": "combine_values",
                    "3": "extract_bits"
                },
                "PTR_....": {
                    "1": "..."
                },
                "param_1": {
                    "1": "input_data",
                    "21": "input_value",
                    "3": "input"
                },
                "param_1 & 0x1c0 | 0x400ff000": {
                    "1": "bits_extracted"
                },
                "param_2": {
                    "1": "output"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "code": "\nuint combine_bits_and_mask_00001d80(ushort input_value)\n\n{\n  return input_value & 0x1c0 | 0x400ff000;\n}\n\n",
            "current_name": "combine_bits_and_mask_00001d80",
            "entrypoint": "0x00001d80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d80": "combine_bits_and_mask_00001d80",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001da2": {
            "additional_data": {
                "FUN_00001da2": {
                    "1": "get_bits_from_six_to_eight",
                    "12": "extract_bits",
                    "2": "extract_three_least_significant_bits",
                    "3": "extract_bits_from_value"
                },
                "local_1": {
                    "1": "shifted_input"
                },
                "local_2": {
                    "1": "extracted_bits"
                },
                "param_1": {
                    "1": "input_number",
                    "21": "input_value",
                    "7": "input"
                },
                "param_1 >> 6 & 7": {
                    "1": "extracted_bits"
                },
                "param_2": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "code": "\nushort extract_bits_00001da2(ushort input_value)\n\n{\n  return input_value >> 6 & 7;\n}\n\n",
            "current_name": "extract_bits_00001da2",
            "entrypoint": "0x00001da2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "additional_data": {
                "0x3f": {
                    "2": "bit_mask"
                },
                "<original_function_name>": {
                    "1": "extract_least_significant_bits"
                },
                "DAT_XXX": {
                    "1": "new_data_name"
                },
                "FUNG_00001dc0": {
                    "1": "clear_bitmask"
                },
                "FUN_00001dc0": {
                    "1": "mask_lowest6_bits",
                    "2": "truncate_to6_bits",
                    "3": "extract_least_significant_bits",
                    "4": "extract_bits"
                },
                "PTR_XXX": {
                    "1": "new_pointer_name"
                },
                "param_1": {
                    "1": "result",
                    "19": "input_value",
                    "2": "value",
                    "7": "input"
                },
                "param_1 (in return statement)": {
                    "1": "truncated_value"
                },
                "param_2": {
                    "1": "new_variable_name"
                },
                "return": {
                    "1": "truncated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "code": "\nushort extract_lower_bits_00001dc0(ushort input_value)\n\n{\n  truncated_value input_value & 0x3f;\n}\n\n",
            "current_name": "extract_lower_bits_00001dc0",
            "entrypoint": "0x00001dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001dc0": "extract_lower_bits_00001dc0",
                "param_1": "input_value",
                "return": "truncated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "additional_data": {
                "DAT_40048038": {
                    "1": "stdout_buffer"
                },
                "FUN_00001d3a": {
                    "1": "print_to_screen",
                    "2": "update_data"
                },
                "FUN_00001da2": {
                    "1": "calculate_modified_value",
                    "2": "process_data",
                    "3": "calculate_offset"
                },
                "FUN_00001ddc": {
                    "1": "print_character_with_offset",
                    "4": "process_data",
                    "8": "update_data"
                },
                "cVar1": {
                    "1": "shifted_char",
                    "15": "result",
                    "2": "processed_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "character",
                    "3": "value",
                    "4": "input",
                    "5": "input_data",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "character_to_print",
                    "4": "character",
                    "6": "value"
                }
            },
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid update_data_00001ddc(undefined2 data)\n\n{\n  char result;\n  \n  result = FUN_00001da2(data);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "current_name": "update_data_00001ddc",
            "entrypoint": "0x00001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "cVar1": "result",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "additional_data": {
                "&": {
                    "2": "bitwise_and"
                },
                "& 0xf": {
                    "1": "bit_mask"
                },
                "&DAT_1fff0bd8": {
                    "1": "data_ptr",
                    "2": "data"
                },
                "(&(DAT_1fff0bd8) + ((shifted_value + index * 4) * 4))": {
                    "1": "data_address"
                },
                "(*(uint *)(data_address) >> (bit_position << 2)) & 0xf": {
                    "1": "extracted_bits"
                },
                "(*uint *)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "memory_address"
                },
                "(*uint)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "extracted_pointer"
                },
                "(param_2 & 7)": {
                    "1": "bit_offset"
                },
                "(param_2 & 7) << 2": {
                    "1": "bit_shift"
                },
                "*(uint *)(&DAT_1fff0bd8 + (((int)value >> 3) + offset * 4) * 4)": {
                    "1": "data_segment_value"
                },
                "*(uint*)(&DAT_1fff0bd8 + (((int)param_2 >> 3) + param_1 * 4) * 4)": {
                    "1": "value"
                },
                "0xf": {
                    "1": "bit_mask",
                    "5": "mask"
                },
                "4": {
                    "1": "offset"
                },
                ">>": {
                    "1": "right_shift"
                },
                "DAT_1fff0bd8": {
                    "1": "memory_array",
                    "2": "data_array"
                },
                "FUN_00001e0c": {
                    "1": "get_bits_from_memory",
                    "20": "extract_bits"
                },
                "PTR_DAT_1fff0bd8": {
                    "1": "base_address"
                },
                "int": {
                    "1": "index"
                },
                "new_variable_name_1": {
                    "1": "base_address"
                },
                "new_variable_name_2": {
                    "1": "shifted_bitstream"
                },
                "new_variable_name_3": {
                    "1": "result"
                },
                "param_1": {
                    "1": "start_offset",
                    "11": "offset",
                    "3": "start_index",
                    "6": "index"
                },
                "param_1 * 4": {
                    "1": "offset_in_bytes"
                },
                "param_2": {
                    "1": "bit_field",
                    "2": "bitstream",
                    "5": "bit_position",
                    "6": "value",
                    "9": "data"
                },
                "param_2 & 7": {
                    "1": "bit_index",
                    "3": "bit_position"
                },
                "param_2 >> 3": {
                    "1": "shifted_value"
                },
                "param_3": {
                    "1": "bit_mask"
                },
                "result": {
                    "1": "extracted_bits"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "code": "\nunsigned_integer extract_bits_00001e0c(index offset,unsigned_integer data)\n\n{\n  return *(unsigned_integer *)(bitwise_andDAT_1fff0bd8 + (((index)data >> 3) + offset * 4) * 4) >> ((data bitwise_and 7) << 2)\n         bitwise_and 0xf;\n}\n\n",
            "current_name": "extract_bits_00001e0c",
            "entrypoint": "0x00001e0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&": "bitwise_and",
                "FUN_00001e0c": "extract_bits_00001e0c",
                "int": "index",
                "param_1": "offset",
                "param_2": "data",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e44": {
            "additional_data": {
                "(param_2 & 7) << 2": {
                    "1": "shift"
                },
                "*(&DAT_1fff0bd8 + (iVar1 + baseIndex * 4) * 4)": {
                    "1": "data"
                },
                "*(uint *)(&DAT_1fff0bd8 + (iVar1 + baseIndex * 4) * 4)": {
                    "1": "data_value"
                },
                "FUN_00001e44": {
                    "1": "update_bit_sequence",
                    "12": "update_bits",
                    "2": "update_data",
                    "3": "update_bitwise_value"
                },
                "F_UNPACK_BITS": {
                    "1": "unpack_bits"
                },
                "iVar1": {
                    "1": "shift_count",
                    "10": "byte_offset",
                    "2": "shifted_position",
                    "5": "shift_amount",
                    "6": "shifted_index"
                },
                "param_1": {
                    "1": "address_offset",
                    "14": "index",
                    "2": "array_index",
                    "6": "base_index"
                },
                "param_2": {
                    "1": "bit_mask",
                    "14": "bit_offset",
                    "2": "bit_pos",
                    "5": "bit_position",
                    "6": "bit_index"
                },
                "param_2 & 7": {
                    "1": "offset"
                },
                "param_3": {
                    "1": "bit_value",
                    "26": "new_value",
                    "4": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00001ec4"
            ],
            "code": "\nvoid update_bits_00001e44(int index,uint bit_offset,int new_value)\n\n{\n  int byte_offset;\n  \n  byte_offset = (int)bit_offset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) & ~(0xf << ((bit_offset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byte_offset + index * 4) * 4) | new_value << ((bit_offset & 7) << 2);\n  return;\n}\n\n",
            "current_name": "update_bits_00001e44",
            "entrypoint": "0x00001e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "iVar1": "byte_offset",
                "param_1": "index",
                "param_2": "bit_offset",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "additional_data": {
                "FUN_00001e0c": {
                    "1": "compute_value",
                    "10": "calculate_value",
                    "2": "compute_result",
                    "4": "calculate_result"
                },
                "FUN_00001e44": {
                    "1": "execute_operation",
                    "2": "update_data",
                    "3": "process_result",
                    "4": "print_result"
                },
                "FUN_00001ec4": {
                    "1": "extract_and_process_data",
                    "19": "process_data",
                    "2": "process_and_execute"
                },
                "param_1": {
                    "1": "input_data1",
                    "2": "input_1",
                    "20": "input1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "input_2",
                    "20": "input2",
                    "3": "output_param"
                },
                "param_3": {
                    "1": "result"
                },
                "uVar1": {
                    "1": "processed_value",
                    "26": "result",
                    "3": "result1"
                }
            },
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid process_data_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "current_name": "process_data_00001ec4",
            "entrypoint": "0x00001ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001eea": {
            "additional_data": {
                "FUN_00001d5e": {
                    "1": "get_setting_index",
                    "3": "get_index"
                },
                "FUN_00001d80": {
                    "1": "get_address",
                    "2": "get_data_pointer"
                },
                "FUN_00001dc0": {
                    "1": "get_flag_index"
                },
                "FUN_00001eea": {
                    "1": "update_flag_and_store_data",
                    "2": "update_flag_and_set_value",
                    "6": "update_flag_and_value",
                    "9": "update_status"
                },
                "FUN_00001f80": {
                    "1": "set_default_value",
                    "2": "initialize_data"
                },
                "iVar2": {
                    "1": "temp_var1",
                    "2": "device_data",
                    "3": "address",
                    "4": "data_ptr",
                    "7": "ptr"
                },
                "iVar3": {
                    "1": "array_index",
                    "12": "offset",
                    "2": "ptr2",
                    "6": "index"
                },
                "param_1": {
                    "1": "device_id",
                    "10": "data",
                    "2": "input_param",
                    "5": "input"
                },
                "param_2": {
                    "1": "byte_param",
                    "2": "new_value",
                    "5": "status",
                    "7": "value",
                    "9": "flag"
                },
                "uVar1": {
                    "1": "offset",
                    "18": "index",
                    "2": "result",
                    "3": "bit_position"
                }
            },
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nundefined4 update_status_00001eea(undefined2 data,byte flag)\n\n{\n  uint index;\n  int ptr;\n  int offset;\n  \n  FUN_00001f80(data,0);\n  if ((char)flag < '\\0') {\n    index = FUN_00001dc0(data);\n    ptr = FUN_00001d80(data);\n    *(uint *)(ptr + 0x14) = *(uint *)(ptr + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(data);\n    ptr = FUN_00001d80(data);\n    *(uint *)(ptr + 0x14) = *(uint *)(ptr + 0x14) & ~(1 << (index & 0xff));\n  }\n  ptr = FUN_00001d5e(data);\n  offset = FUN_00001dc0(data);\n  *(uint *)(ptr + offset * 4) = flag & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "current_name": "update_status_00001eea",
            "entrypoint": "0x00001eea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001eea": "update_status_00001eea",
                "iVar2": "ptr",
                "iVar3": "offset",
                "param_1": "data",
                "param_2": "flag",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001f80": {
            "additional_data": {
                "FUN_00001d5e": {
                    "1": "get_result1",
                    "4": "get_index",
                    "5": "get_index1"
                },
                "FUN_00001da2": {
                    "1": "get_adjusted_value",
                    "2": "get_updated_value",
                    "3": "get_modified_value"
                },
                "FUN_00001dc0": {
                    "1": "get_result2",
                    "3": "calculate_offset",
                    "5": "get_index2"
                },
                "FUN_00001ddc": {
                    "1": "perform_initialization",
                    "8": "initialize_data"
                },
                "FUN_00001ec4": {
                    "1": "update_elements",
                    "2": "process_result",
                    "7": "perform_action"
                },
                "FUN_00001f80": {
                    "1": "update_value_in_memory",
                    "13": "update_value",
                    "3": "update_value_in_array",
                    "9": "update_data"
                },
                "iVar1": {
                    "1": "idx1",
                    "12": "index1",
                    "2": "offset1",
                    "5": "result1"
                },
                "iVar2": {
                    "1": "idx2",
                    "12": "index2",
                    "2": "index",
                    "5": "result2"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param",
                    "3": "input_value",
                    "5": "param",
                    "7": "input",
                    "8": "data"
                },
                "param_2": {
                    "1": "new_param",
                    "23": "new_value",
                    "4": "new_data"
                },
                "uVar3": {
                    "1": "temp_var1",
                    "3": "value1",
                    "6": "temp1",
                    "8": "result1"
                },
                "uVar4": {
                    "1": "result_2",
                    "3": "value2",
                    "6": "temp2",
                    "8": "result2"
                },
                "uVar5": {
                    "1": "previous_value",
                    "2": "original_value",
                    "3": "old_value",
                    "7": "current_value",
                    "9": "value"
                },
                "undefined2 param_1": {
                    "1": "input_array"
                },
                "undefined4 param_2": {
                    "1": "new_value"
                }
            },
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "code": "\nvoid update_value_00001f80(undefined2 data,undefined4 new_value)\n\n{\n  int index1;\n  int index2;\n  undefined4 result1;\n  undefined4 result2;\n  uint value;\n  \n  FUN_00001ddc(data);\n  index1 = FUN_00001d5e(data);\n  index2 = FUN_00001dc0(data);\n  value = *(uint *)(index1 + index2 * 4);\n  index1 = FUN_00001d5e(data);\n  index2 = FUN_00001dc0(data);\n  *(undefined4 *)(index1 + index2 * 4) = new_value;\n  if ((value & 0xf0000) != 0) {\n    result1 = FUN_00001da2(data);\n    result2 = FUN_00001dc0(data);\n    FUN_00001ec4(result1,result2);\n  }\n  return;\n}\n\n",
            "current_name": "update_value_00001f80",
            "entrypoint": "0x00001f80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001f80": "update_value_00001f80",
                "iVar1": "index1",
                "iVar2": "index2",
                "param_1": "data",
                "param_2": "new_value",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "additional_data": {
                "(iVar2 + 4)": {
                    "1": "bit_position"
                },
                "*(int *)(iVar2 + 4)": {
                    "1": "bitmask"
                },
                "1 << (uVar1 & 0xff)": {
                    "1": "bit_mask"
                },
                "FUM_00001ff6": {
                    "1": "set_bit_at_index"
                },
                "FUN_00001d80": {
                    "1": "get_adjusted_value",
                    "2": "get_offset"
                },
                "FUN_00001dc0": {
                    "1": "get_bits",
                    "2": "get_masked_value",
                    "3": "get_shift_value"
                },
                "FUN_00001ff6": {
                    "1": "set_bit_as_one",
                    "2": "set_bit_position",
                    "3": "set_bit_at_index",
                    "4": "set_bit_at_position"
                },
                "iVar2": {
                    "1": "integer_address",
                    "2": "modified_value",
                    "6": "result2",
                    "8": "result"
                },
                "param_1": {
                    "1": "input_number",
                    "16": "input_value",
                    "5": "input",
                    "9": "value"
                },
                "uVar1": {
                    "1": "index",
                    "11": "shifted_value",
                    "2": "modified_value",
                    "3": "bit_position",
                    "6": "result1"
                }
            },
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid set_bit_00001ff6(undefined2 input_value)\n\n{\n  uint shifted_value;\n  int result;\n  \n  shifted_value = FUN_00001dc0(input_value);\n  result = FUN_00001d80(input_value);\n  *(int *)(result + 4) = 1 << (shifted_value & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_00001ff6",
            "entrypoint": "0x00001ff6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ff6": "set_bit_00001ff6",
                "iVar2": "result",
                "param_1": "input_value",
                "uVar1": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002028": {
            "additional_data": {
                "FUN_00001cf0": {
                    "1": "cleanup"
                },
                "FUN_00001e0c": {
                    "1": "check_condition"
                },
                "FUN_00002028": {
                    "1": "update_flags",
                    "2": "process_flagged_values",
                    "21": "process_data",
                    "4": "process_flags"
                },
                "iVar1": {
                    "1": "func_result",
                    "12": "index",
                    "16": "result"
                },
                "local_c": {
                    "1": "bit",
                    "14": "bit_index",
                    "2": "bit_position",
                    "4": "counter",
                    "7": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_struct",
                    "4": "data_pointer",
                    "7": "data_address",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "param_val",
                    "7": "value",
                    "9": "param"
                },
                "uVar2": {
                    "1": "bit_flags",
                    "2": "flag_value",
                    "3": "bit_mask",
                    "6": "flags",
                    "8": "flag"
                }
            },
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "code": "\nvoid process_data_00002028(int data_ptr,undefined4 param)\n\n{\n  int result;\n  uint flag;\n  uint bit_index;\n  \n  flag = *(uint *)(data_ptr + 0xa0);\n  for (bit_index = 0; (int)bit_index < 0x20; bit_index = bit_index + 1) {\n    if (((flag & 1 << (bit_index & 0xff)) != 0) &&\n       ((*(uint *)(data_ptr + bit_index * 4) & 0xf0000) != 0)) {\n      *(int *)(data_ptr + 0xa0) = 1 << (bit_index & 0xff);\n      result = FUN_00001e0c(param,bit_index);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "current_name": "process_data_00002028",
            "entrypoint": "0x00002028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "iVar1": "result",
                "local_c": "bit_index",
                "param_1": "data_ptr",
                "param_2": "param",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020b8": {
            "additional_data": {
                "0x40049000": {
                    "1": "device_address"
                },
                "FUN_00002028": {
                    "1": "write_to_memory_area",
                    "2": "write_memory",
                    "3": "call_sub_function",
                    "9": "set_memory"
                },
                "FUN_000020b8": {
                    "1": "initialize_memory_area",
                    "2": "initialize_function",
                    "22": "initialize_memory"
                },
                "param_1": {
                    "1": "hardware_address",
                    "10": "memory_address",
                    "2": "device_address",
                    "5": "base_address",
                    "6": "address"
                },
                "param_2": {
                    "1": "param",
                    "2": "parameter",
                    "3": "param2",
                    "5": "value"
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_000020b8",
            "entrypoint": "0x000020b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020cc": {
            "additional_data": {
                "FUN_00002028": {
                    "1": "set_hardware_config",
                    "2": "configure_peripheral",
                    "3": "set_memory_value",
                    "7": "write_to_memory"
                },
                "FUN_000020cc": {
                    "1": "initialize_system",
                    "17": "initialize_memory",
                    "4": "initialize_device",
                    "7": "initialize_hardware"
                },
                "param_1": {
                    "1": "memory_location",
                    "10": "memory_address",
                    "3": "device_address",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "initialize_value",
                    "13": "value",
                    "2": "value_to_write",
                    "3": "config_value"
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "current_name": "initialize_memory_000020cc",
            "entrypoint": "0x000020cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020e0": {
            "additional_data": {
                "FUN_00002028": {
                    "1": "execute_process",
                    "2": "configure_memory",
                    "3": "configure_peripheral",
                    "5": "set_memory"
                },
                "FUN_000020e0": {
                    "1": "initialize_module",
                    "14": "initialize_memory",
                    "2": "initialize_peripheral",
                    "4": "initialize_system",
                    "6": "initialize_hardware"
                },
                "param_1": {
                    "1": "data_address",
                    "12": "memory_address",
                    "2": "device_address",
                    "5": "address",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "process_id",
                    "2": "config_value",
                    "3": "size",
                    "8": "value"
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "current_name": "initialize_memory_000020e0",
            "entrypoint": "0x000020e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020f4": {
            "additional_data": {
                "FUN_00002028": {
                    "1": "set_peripheral_parameter",
                    "2": "set_hardware_configuration",
                    "3": "configure_peripheral",
                    "6": "set_configuration"
                },
                "FUN_000020f4": {
                    "1": "initialize_data",
                    "11": "initialize_hardware",
                    "2": "initialize_memory",
                    "3": "initialize_device",
                    "4": "initialize_module",
                    "8": "initialize_peripheral"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "hardware_address",
                    "21": "base_address",
                    "4": "peripheral_address"
                },
                "param_2": {
                    "1": "parameter_value",
                    "2": "configuration",
                    "3": "num_devices",
                    "4": "num_iterations",
                    "6": "config_value"
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_hardware_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_000020f4",
            "entrypoint": "0x000020f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020f4": "initialize_hardware_000020f4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002108": {
            "additional_data": {
                "FUN_00002028": {
                    "1": "set_device_register",
                    "2": "configure_peripheral",
                    "5": "write_to_memory",
                    "9": "set_memory"
                },
                "FUN_00002108": {
                    "1": "initialize_function",
                    "18": "initialize_memory",
                    "4": "initialize_device"
                },
                "param_1": {
                    "1": "data_address",
                    "14": "memory_address",
                    "2": "peripheral_address",
                    "3": "device_address"
                },
                "param_2": {
                    "1": "device_count",
                    "3": "size",
                    "4": "data",
                    "7": "value"
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00002108",
            "entrypoint": "0x00002108",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000211c": {
            "additional_data": {
                "&DAT_000070b8": {
                    "1": "state_title"
                },
                "&DAT_00007190": {
                    "1": "total_stacks_title"
                },
                "&DAT_00007194": {
                    "1": "total_priority_stacks"
                },
                "&DAT_1fff0358": {
                    "1": "elf_array"
                },
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": {
                    "1": "elf_rel_offset"
                },
                "(int)local_2c + 5": {
                    "1": "process_state"
                },
                "(int)local_2c + 6": {
                    "1": "short_value"
                },
                "*local_2c": {
                    "1": "process_id"
                },
                "DAT_000070b8": {
                    "1": "pid"
                },
                "DAT_00007190": {
                    "1": "header1"
                },
                "DAT_00007194": {
                    "1": "header2"
                },
                "DAT_1fff0358": {
                    "1": "entry_array"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "offset_array"
                },
                "FUM_00004c84": {
                    "1": "print_formatted"
                },
                "FUN_000008b8": {
                    "1": "get_used_stack_size",
                    "3": "get_stack_size",
                    "4": "get_stack_used"
                },
                "FUN_00000900": {
                    "1": "get_current_pointer",
                    "2": "get_base_address",
                    "7": "get_current_address"
                },
                "FUN_0000091c": {
                    "1": "get_stack_base_addr",
                    "4": "get_base_address"
                },
                "FUN_000010a0": {
                    "1": "get_process_size",
                    "2": "calculate_size"
                },
                "FUN_0000211c": {
                    "1": "print_process_details",
                    "18": "print_process_information",
                    "9": "print_process_info"
                },
                "FUN_00004c84": {
                    "1": "print_formatted_output",
                    "2": "print_formatted_string",
                    "3": "print_formatted"
                },
                "iVar1": {
                    "1": "size_difference"
                },
                "local_14": {
                    "1": "used_stack_size",
                    "2": "total_memory",
                    "4": "total_stack_used"
                },
                "local_18": {
                    "1": "total_stack_difference",
                    "2": "total_priority",
                    "4": "total_stack_used",
                    "5": "total_stack_size",
                    "8": "total_stack"
                },
                "local_1a": {
                    "1": "pid",
                    "12": "process_index",
                    "3": "index",
                    "5": "counter"
                },
                "local_20": {
                    "1": "used_stack_size",
                    "2": "total_stack_usage",
                    "6": "stack_size"
                },
                "local_24": {
                    "1": "main_stack_used",
                    "2": "stack",
                    "3": "base_address"
                },
                "local_28": {
                    "1": "isr_stack_base",
                    "2": "base_address",
                    "3": "base_addr",
                    "5": "current_address",
                    "8": "current"
                },
                "local_2c": {
                    "1": "entry",
                    "2": "function_pointer",
                    "3": "current_process"
                },
                "local_2c[0xb]": {
                    "1": "process_stack"
                },
                "local_2c[10]": {
                    "1": "process_name"
                },
                "local_2c[9]": {
                    "1": "process_priority"
                },
                "local_30": {
                    "1": "process_state",
                    "2": "queue",
                    "21": "index"
                },
                "local_34": {
                    "1": "stack_base",
                    "10": "base_address",
                    "2": "current_address",
                    "6": "base_addr"
                },
                "local_38": {
                    "1": "stack_descriptor",
                    "2": "stack_usage",
                    "5": "priority"
                },
                "local_3c": {
                    "1": "stack_difference",
                    "10": "stack_size",
                    "2": "stack_usage",
                    "4": "stack_used"
                },
                "local_40": {
                    "1": "label",
                    "2": "pid",
                    "3": "header",
                    "6": "format_string"
                },
                "param_1": {
                    "1": "format_string"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "code": "\nvoid print_process_information_0000211c(void)\n\n{\n  int size_difference;\n  undefined2 format_string;\n  int stack_size;\n  int priority;\n  dword base_address;\n  uint index;\n  undefined4 *current_process;\n  undefined4 current;\n  undefined4 base;\n  int stack_size;\n  short process_index;\n  int total_stack;\n  int total_stack_used;\n  \n  format_string = 0x515f;\n  total_stack_used = 0;\n  total_stack = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  stack_size = FUN_000008b8();\n  base = FUN_0000091c();\n  current = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               stack_size,base,current);\n  total_stack_used = total_stack_used + 0x200;\n  if (0 < stack_size) {\n    total_stack = stack_size + total_stack;\n  }\n  for (process_index = 1; process_index < 0x21; process_index = process_index + 1) {\n    current_process = *(undefined4 **)(&DAT_1fff0358 + process_index * 4);\n    if (current_process != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(current_process + 1);\n      base_address = (elf_rel_offset)[index];\n      priority = (int)&format_string + (uint)(8 < index);\n      stack_size = process_stack;\n      total_stack_used = stack_size + total_stack_used;\n      size_difference = FUN_000010a0(process_priority);\n      stack_size = stack_size - size_difference;\n      total_stack = stack_size + total_stack;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)current_process + 6),process_name,base_address,priority,\n                   *(undefined *)((int)current_process + 5),process_stack,stack_size,process_priority,*current_process);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,total_stack_used,total_stack);\n  return;\n}\n\n",
            "current_name": "print_process_information_0000211c",
            "entrypoint": "0x0000211c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "elf_rel_offset",
                "Elf32_Rel_ARRAY_1fff0200": "offset_array",
                "FUN_0000211c": "print_process_information_0000211c",
                "iVar1": "size_difference",
                "local_14": "total_stack_used",
                "local_18": "total_stack",
                "local_1a": "process_index",
                "local_20": "stack_size",
                "local_24": "base",
                "local_28": "current",
                "local_2c": "current_process",
                "local_2c[0xb]": "process_stack",
                "local_2c[10]": "process_name",
                "local_2c[9]": "process_priority",
                "local_30": "index",
                "local_34": "base_address",
                "local_38": "priority",
                "local_3c": "stack_size",
                "local_40": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002270": {
            "additional_data": {
                "FUN_00002270": {
                    "1": "is_valid_pointer",
                    "2": "check_equal_values",
                    "23": "check_equality",
                    "3": "check_if_equal"
                },
                "bVar3": {
                    "1": "is_matching",
                    "10": "is_match",
                    "16": "is_equal",
                    "2": "is_value_equal"
                },
                "iVar2": {
                    "1": "compare_value",
                    "18": "value",
                    "2": "value_at_offset",
                    "6": "value1"
                },
                "param_1": {
                    "1": "context",
                    "23": "input",
                    "5": "input_value"
                },
                "uVar1": {
                    "9": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nundefined check_equality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool is_equal;\n  \n  value = *(int *)(input + 0xc);\n  is_equal = *(int *)(input + 8) == value;\n  if (is_equal) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_00002270",
            "entrypoint": "0x00002270",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "bVar3": "is_equal",
                "iVar2": "value",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002294": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "check_sum_equal"
                },
                "<param_1>": {
                    "1": "input"
                },
                "FUN_00002294": {
                    "1": "check_difference_and_assign",
                    "10": "check_equality",
                    "2": "check_equal_difference",
                    "3": "check_condition"
                },
                "bVar3": {
                    "1": "is_equality_true",
                    "11": "is_equal",
                    "3": "is_sum_equal",
                    "4": "is_difference_equal",
                    "5": "is_match"
                },
                "iVar2": {
                    "1": "checksum",
                    "12": "difference",
                    "2": "sum_difference",
                    "9": "offset"
                },
                "param_1": {
                    "1": "input_data",
                    "18": "input",
                    "2": "address",
                    "3": "data"
                },
                "uVar1": {
                    "1": "return_value",
                    "19": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nundefined check_equality_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool is_equal;\n  \n  difference = *(int *)(input + 4);\n  is_equal = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (is_equal) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_00002294",
            "entrypoint": "0x00002294",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "bVar3": "is_equal",
                "iVar2": "difference",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022be": {
            "additional_data": {
                "*(undefined *)((uVar1 & array[1] - 1U) + *array)": {
                    "1": "target_location"
                },
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "address_to_store_value",
                    "6": "target_address"
                },
                "*param_1": {
                    "1": "array_base",
                    "8": "base_address"
                },
                "FUN_000022be": {
                    "1": "increment_and_store",
                    "10": "increment_and_store_value",
                    "2": "update_and_store_value",
                    "3": "update_array_element"
                },
                "param_1": {
                    "1": "memory_array",
                    "27": "array"
                },
                "param_1[1]": {
                    "1": "size",
                    "2": "mask"
                },
                "param_1[3]": {
                    "1": "current_value",
                    "2": "count"
                },
                "param_2": {
                    "1": "byte",
                    "2": "value_to_store",
                    "24": "value"
                },
                "uVar1": {
                    "1": "array_index",
                    "10": "previous_value",
                    "5": "current_index",
                    "6": "index",
                    "7": "current_value"
                },
                "uVar1 & param_1[1] - 1U": {
                    "1": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nvoid increment_and_store_value_000022be(int *array,undefined value)\n\n{\n  uint previous_value;\n  \n  previous_value = count;\n  count = previous_value + 1;\n  *(undefined *)((previous_value & mask - 1U) + *array) = value;\n  return;\n}\n\n",
            "current_name": "increment_and_store_value_000022be",
            "entrypoint": "0x000022be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_1[1]": "mask",
                "param_1[3]": "count",
                "param_2": "value",
                "uVar1": "previous_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022f0": {
            "additional_data": {
                "*(undefined *)((uVar1 & param_1[1] - 1U) + *param_1)": {
                    "1": "byte_value"
                },
                "*(undefined*)((uVar1 & array[1] - 1U) + *array)": {
                    "1": "new_pointer"
                },
                "*param_1": {
                    "1": "pointer_to_value",
                    "5": "base_address"
                },
                "FUN_000022f0": {
                    "1": "increment_and_retrieve_data",
                    "3": "increment_and_retrieve_value",
                    "8": "increment_and_return_element"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "array_pointer",
                    "22": "array",
                    "3": "data"
                },
                "param_1[1]": {
                    "2": "array[1]",
                    "4": "mask"
                },
                "param_1[1] - 1U": {
                    "1": "masked_index"
                },
                "param_1[2]": {
                    "1": "element_value",
                    "2": "count",
                    "3": "array[2]",
                    "4": "current_value"
                },
                "param_1[2] + 1": {
                    "1": "updated_value"
                },
                "uVar1": {
                    "1": "original_value",
                    "2": "current_value",
                    "5": "value",
                    "6": "current_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nundefined increment_and_return_element_000022f0(int *array)\n\n{\n  uint index;\n  \n  index = current_value;\n  current_value = index + 1;\n  return *(undefined *)((index & mask - 1U) + *array);\n}\n\n",
            "current_name": "increment_and_return_element_000022f0",
            "entrypoint": "0x000022f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "param_1[1]": "mask",
                "param_1[2]": "current_value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000231c": {
            "additional_data": {
                "*local_20": {
                    "1": "ptr_dest"
                },
                "FUN_00002270": {
                    "1": "check_end_condition"
                },
                "FUN_000022f0": {
                    "1": "get_byte"
                },
                "FUN_0000231c": {
                    "1": "reverse_and_count",
                    "2": "copy_to_buffer",
                    "4": "extract_data",
                    "5": "copy_bytes",
                    "8": "copy_data"
                },
                "iVar2": {
                    "1": "function_result",
                    "23": "result"
                },
                "local_14": {
                    "1": "bytes_remaining",
                    "13": "remaining_size",
                    "2": "remaining_count",
                    "3": "remaining_bytes",
                    "5": "remaining_length"
                },
                "local_20": {
                    "1": "current_output_pointer",
                    "10": "dest_ptr",
                    "2": "current_byte",
                    "3": "current_output",
                    "4": "current_dest"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_data",
                    "3": "arg1",
                    "5": "input",
                    "7": "param"
                },
                "param_2": {
                    "1": "destination_address",
                    "2": "output",
                    "3": "buffer",
                    "5": "destination",
                    "8": "dest",
                    "9": "output_buffer"
                },
                "param_3": {
                    "1": "array_size",
                    "2": "count",
                    "3": "num_bytes",
                    "6": "size",
                    "7": "length",
                    "9": "buffer_size"
                },
                "uVar1": {
                    "1": "data_element",
                    "2": "byte_value",
                    "5": "value"
                }
            },
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nint copy_data_0000231c(undefined4 param,undefined *output_buffer,int buffer_size)\n\n{\n  undefined value;\n  int result;\n  undefined *dest_ptr;\n  int remaining_size;\n  \n  dest_ptr = output_buffer;\n  remaining_size = buffer_size;\n  while ((remaining_size != 0 && (result = FUN_00002270(param), result == 0))) {\n    value = FUN_000022f0(param);\n    *dest_ptr = value;\n    remaining_size = remaining_size + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return buffer_size - remaining_size;\n}\n\n",
            "current_name": "copy_data_0000231c",
            "entrypoint": "0x0000231c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "iVar2": "result",
                "local_14": "remaining_size",
                "local_20": "dest_ptr",
                "param_1": "param",
                "param_2": "output_buffer",
                "param_3": "buffer_size",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002364": {
            "additional_data": {
                "FUN_00002294": {
                    "1": "check_input"
                },
                "FUN_000022be": {
                    "1": "perform_operation"
                },
                "FUN_00002364": {
                    "1": "validate_and_execute",
                    "3": "check_and_process_data",
                    "4": "check_status",
                    "8": "check_and_execute"
                },
                "iVar1": {
                    "1": "error_flag",
                    "2": "status",
                    "27": "result"
                },
                "param_1": {
                    "1": "arg1",
                    "12": "input",
                    "2": "data",
                    "3": "input_data",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "data",
                    "2": "output_param",
                    "3": "output",
                    "4": "input_data"
                },
                "uVar2": {
                    "1": "return_val",
                    "22": "return_value",
                    "3": "result",
                    "5": "status"
                }
            },
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nundefined4 check_and_execute_00002364(undefined4 input,undefined data)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = FUN_00002294(input);\n  if (result == 0) {\n    FUN_000022be(input,data);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_and_execute_00002364",
            "entrypoint": "0x00002364",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002364": "check_and_execute_00002364",
                "iVar1": "result",
                "param_1": "input",
                "param_2": "data",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002396": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00002396": {
                    "1": "execute_process",
                    "19": "initialize_system",
                    "3": "initialize_application",
                    "4": "execute_initialization"
                },
                "FUN_000025f4": {
                    "1": "perform_initial_setup",
                    "12": "perform_initialization",
                    "2": "execute_initialization"
                }
            },
            "called": [
                "FUN_000025f4"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "current_name": "initialize_system_00002396",
            "entrypoint": "0x00002396",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023a4": {
            "additional_data": {
                "FUN_000023a4": {
                    "1": "initialize_riot_system",
                    "17": "initialize_system",
                    "2": "start_program",
                    "6": "initialize_riot"
                },
                "FUN_000023d0": {
                    "1": "set_initialization_parameter",
                    "2": "perform_initialization",
                    "3": "set_initial_state"
                },
                "FUN_00002e6c": {
                    "1": "copy_buffer_to_memory",
                    "2": "read_input_data",
                    "3": "copy_memory",
                    "4": "copy_buffer",
                    "9": "copy_data"
                },
                "FUN_000042d0": {
                    "1": "display_message"
                },
                "FUN_00004db8": {
                    "1": "print_welcome_msg",
                    "14": "print_welcome_message",
                    "6": "display_message",
                    "8": "display_welcome_message"
                },
                "auStack_88": {
                    "1": "input_buffer",
                    "16": "buffer"
                },
                "param_1": {
                    "1": "initialization_param",
                    "2": "param1",
                    "4": "status"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "uVar1": {
                    "2": "return_value",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  result = FUN_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return result;\n}\n\n",
            "current_name": "initialize_system_000023a4",
            "entrypoint": "0x000023a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023c8": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_00000010": {
                    "1": "not_needed_variable1"
                },
                "DAT_87654321": {
                    "1": "unchanged"
                },
                "FUN_000023c8": {
                    "1": "initiate_software_interrupt",
                    "10": "trigger_software_interrupt",
                    "2": "invoke_system_interrupt",
                    "4": "execute_software_interrupt",
                    "6": "send_software_interrupt"
                },
                "INTERRUPT_NUMBER": {
                    "1": "interrupt_number"
                },
                "PTR_00000003": {
                    "1": "interrupt_code"
                },
                "PTR_00000008": {
                    "1": "not_needed_param1"
                },
                "PTR_000023fc": {
                    "1": "original_variable1"
                },
                "PTR_003f": {
                    "1": "interrupt_number"
                },
                "PTR_12345678": {
                    "1": "unchanged"
                },
                "software_interrupt": {
                    "1": "call_software_interrupt",
                    "2": "invoke_interrupt",
                    "4": "execute_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_000023d0"
            ],
            "code": "\nvoid trigger_software_interrupt_000023c8(void)\n\n{\n  execute_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "trigger_software_interrupt_000023c8",
            "entrypoint": "0x000023c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8",
                "software_interrupt": "execute_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023d0": {
            "additional_data": {
                "DAT_1fff0d98": {
                    "1": "flag"
                },
                "FUN_000023c8": {
                    "1": "perform_action"
                },
                "FUN_000023d0": {
                    "1": "initialize_process",
                    "2": "execute_function",
                    "3": "initialize",
                    "6": "initialize_function"
                },
                "param_1": {
                    "1": "flag_value",
                    "2": "input_param",
                    "3": "data",
                    "4": "param",
                    "6": "input",
                    "7": "input_value"
                },
                "uVar1": {
                    "1": "return_val",
                    "13": "return_value",
                    "17": "result"
                }
            },
            "called": [
                "FUN_000023c8"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nundefined4 initialize_function_000023d0(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = FUN_000023c8(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_function_000023d0",
            "entrypoint": "0x000023d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023d0": "initialize_function_000023d0",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002400": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00002400",
            "entrypoint": "0x00002400",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0000240c": {
            "additional_data": {
                "FUN_0000240c": {
                    "1": "copy_and_update_pointer",
                    "2": "copy_pointer",
                    "3": "extract_next_value",
                    "4": "extract_next_pointer"
                },
                "param_1": {
                    "1": "current_value",
                    "2": "pointer",
                    "4": "input_pointer"
                },
                "puVar1": {
                    "1": "value_pointer",
                    "2": "next_value",
                    "3": "next_ptr",
                    "5": "next_node",
                    "7": "next_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_000024bc"
            ],
            "code": "\nundefined4 * extract_next_pointer_0000240c(undefined4 *input_ptr)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*input_ptr;\n  if (next_pointer != (undefined4 *)0x0) {\n    *input_ptr = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "current_name": "extract_next_pointer_0000240c",
            "entrypoint": "0x0000240c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "input_ptr",
                "puVar1": "next_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002434": {
            "additional_data": {
                "DAT_1fff03dc": {
                    "1": "data"
                },
                "D_UNK_1fff03dc": {
                    "1": "saved_value"
                },
                "FUM_00000cd0": {
                    "1": "initialize"
                },
                "FUN_00000698": {
                    "1": "set_resource_flag",
                    "5": "set_flag"
                },
                "FUN_0000093c": {
                    "1": "finalize_processing",
                    "2": "perform_operation"
                },
                "FUN_00000cd0": {
                    "1": "initialize_data",
                    "2": "initialize"
                },
                "FUN_00000d0c": {
                    "1": "free_resources",
                    "3": "release_resource",
                    "4": "cleanup"
                },
                "FUN_00001034": {
                    "1": "process_data_with_constant",
                    "2": "update_value"
                },
                "FUN_00002434": {
                    "1": "update_value_if_needed",
                    "11": "process_data",
                    "2": "update_param_and_return_status",
                    "3": "update_param",
                    "4": "update_status"
                },
                "F_UNK_00002434": {
                    "1": "result"
                },
                "dVar1": {
                    "1": "temp_value"
                },
                "iVar1": {
                    "1": "initial_status",
                    "2": "backup_value",
                    "6": "temp_var"
                },
                "param_1": {
                    "1": "input_array",
                    "3": "param",
                    "4": "status",
                    "7": "data"
                },
                "param_2": {
                    "1": "value",
                    "25": "flag",
                    "3": "condition"
                },
                "uVar2": {
                    "1": "return_value_from_fun_00000cd0",
                    "19": "result",
                    "2": "status",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "calling": [
                "FUN_0000129c"
            ],
            "code": "\nundefined4 process_data_00002434(int *data,int flag)\n\n{\n  int temp_var;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  temp_var = DAT_1fff03dc;\n  if (*data == 0) {\n    *data = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*data == -1) {\n      *data = temp_var + 8;\n      *(undefined4 *)*data = 0;\n    }\n    else {\n      FUN_00001034(data,temp_var);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_00002434",
            "entrypoint": "0x00002434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002434": "process_data_00002434",
                "iVar1": "temp_var",
                "param_1": "data",
                "param_2": "flag",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000024bc": {
            "additional_data": {
                "*param_1": {
                    "1": "param_ptr"
                },
                "FUN_00000698": {
                    "1": "print_numbers",
                    "2": "perform_operation"
                },
                "FUN_00000738": {
                    "1": "cleanup_data",
                    "2": "print_value"
                },
                "FUN_00000cd0": {
                    "1": "get_some_data",
                    "2": "get_func_result",
                    "3": "get_return_value"
                },
                "FUN_00000d0c": {
                    "1": "update_value_if_needed"
                },
                "FUN_0000240c": {
                    "1": "find_param_value",
                    "2": "process_param"
                },
                "FUN_000024bc": {
                    "1": "update_param_if_valid",
                    "2": "process_input",
                    "3": "process_parameter",
                    "4": "update_param",
                    "5": "update_param_value",
                    "7": "process_param"
                },
                "iVar3": {
                    "1": "ptr",
                    "11": "temp_var",
                    "3": "result",
                    "6": "temp"
                },
                "param_1": {
                    "1": "status",
                    "12": "param",
                    "2": "parameter",
                    "5": "data"
                },
                "uVar1": {
                    "1": "byte_val",
                    "2": "byte_value",
                    "3": "status",
                    "4": "temp",
                    "5": "value"
                },
                "uVar2": {
                    "1": "random_number",
                    "16": "result",
                    "2": "function_result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nvoid process_param_000024bc(int *param)\n\n{\n  undefined value;\n  undefined4 result;\n  int temp_var;\n  \n  result = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(result);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(result);\n  }\n  else {\n    temp_var = FUN_0000240c(param);\n    FUN_00000698(temp_var + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    value = *(undefined *)(temp_var + -3);\n    FUN_00000d0c(result);\n    FUN_00000738(value);\n  }\n  return;\n}\n\n",
            "current_name": "process_param_000024bc",
            "entrypoint": "0x000024bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "iVar3": "temp_var",
                "param_1": "param",
                "uVar1": "value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002538": {
            "additional_data": {
                "&-0x1fff1c00": {
                    "1": "base_address"
                },
                "&0xf": {
                    "1": "index_mask"
                },
                "&0xff": {
                    "1": "value_mask"
                },
                "&DAT_e000ed14": {
                    "2": "memory_array"
                },
                "&DAT_e000ed14 + (param_1 & 0xf)": {
                    "1": "data_array[index]"
                },
                "(&DAT_e000ed14)[param_1 & 0xf]": {
                    "1": "variable1"
                },
                "(char)param_1 + -0x1fff1c00": {
                    "1": "variable2"
                },
                "*(char *)((char)byteIndex + -0x1fff1c00)": {
                    "1": "memory_location"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "data_address"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "DAT_e000ed14": {
                    "1": "byte_array"
                },
                "FUN_00002538": {
                    "1": "set_byte",
                    "2": "set_byte_in_memory",
                    "3": "store_data",
                    "5": "update_data",
                    "6": "update_memory"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_0x1fff1c00": {
                    "1": "address"
                },
                "PTR_ffff1c00": {
                    "1": "array2"
                },
                "byteOffset": {
                    "1": "offset"
                },
                "char": {
                    "1": "character",
                    "3": "byte"
                },
                "char_1": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "byte_index",
                    "2": "offset",
                    "4": "byte_value",
                    "6": "index"
                },
                "param_1 & 0xf": {
                    "1": "offset_masked"
                },
                "param_1&0xf": {
                    "1": "masked_index"
                },
                "param_2": {
                    "1": "byte_value",
                    "13": "value",
                    "2": "updated_value",
                    "4": "new_value",
                    "5": "data"
                },
                "param_2 & 0xff": {
                    "1": "data_masked"
                },
                "setByteInMemory": {
                    "1": "set_byte"
                },
                "value": {
                    "1": "data"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000258c"
            ],
            "code": "\nvoid update_memory_00002538(byte input_byte,uint value)\n\n{\n  if ((byte)input_byte < '\\0') {\n    (&DAT_e000ed14)[input_byte & 0xf] = (byte)((value & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)input_byte + -0x1fff1c00) = (byte)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_00002538",
            "entrypoint": "0x00002538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "char": "byte",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000258c": {
            "additional_data": {
                "FUN_00002538": {
                    "1": "configure_peripheral",
                    "3": "set_register_value",
                    "5": "set_configuration",
                    "6": "send_data"
                },
                "FUN_0000258c": {
                    "1": "initialize_memory",
                    "17": "initialize_system",
                    "2": "initialize_flags",
                    "4": "initialize_registers"
                },
                "local_c": {
                    "1": "i",
                    "11": "index",
                    "18": "counter"
                },
                "param_1": {
                    "1": "port_number",
                    "2": "flag_value",
                    "4": "byte_value",
                    "5": "data"
                },
                "param_2": {
                    "1": "is_set",
                    "2": "flag_value",
                    "3": "count",
                    "5": "length"
                }
            },
            "called": [
                "FUN_00002538"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_system_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "current_name": "initialize_system_0000258c",
            "entrypoint": "0x0000258c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000025f4": {
            "additional_data": {
                "FUN_000025f4": {
                    "1": "initialize_process",
                    "15": "initialize_system",
                    "2": "execute_initial_setup",
                    "4": "execute_initialization",
                    "6": "initialize"
                },
                "FUN_000027b0": {
                    "1": "perform_sub_process",
                    "10": "perform_initialization",
                    "2": "execute_initialization",
                    "3": "do_something",
                    "4": "perform_system_setup"
                }
            },
            "called": [
                "FUN_000027b0"
            ],
            "calling": [
                "FUN_00002396"
            ],
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "current_name": "initialize_system_000025f4",
            "entrypoint": "0x000025f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002600": {
            "additional_data": {
                "FUN_00002600": {
                    "1": "initialize_program",
                    "2": "process_function",
                    "4": "initialize_system",
                    "6": "initialize_and_process_data"
                },
                "FUN_0000285c": {
                    "1": "finalize_processing",
                    "4": "process_data",
                    "6": "print_result"
                },
                "FUN_000047e4": {
                    "1": "decode_input",
                    "2": "extract_information",
                    "5": "reverse_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "13": "input_data",
                    "2": "input_array",
                    "9": "data"
                },
                "uVar1": {
                    "1": "output_data",
                    "2": "processed_data",
                    "23": "result"
                }
            },
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "calling": [
                "FUN_00003478"
            ],
            "code": "\nundefined4 initialize_and_process_data_00002600(undefined4 input_data)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(input_data);\n  FUN_0000285c(result);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_process_data_00002600",
            "entrypoint": "0x00002600",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002600": "initialize_and_process_data_00002600",
                "param_1": "input_data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002624": {
            "additional_data": {
                "FUN_00002624": {
                    "1": "initialize_and_process_data",
                    "11": "process_data",
                    "2": "initialize_and_copy_data",
                    "5": "extract_and_process_data"
                },
                "FUN_0000281c": {
                    "1": "get_value",
                    "2": "initialize"
                },
                "FUN_0000443c": {
                    "1": "process_data"
                },
                "local_10": {
                    "1": "ptr_data",
                    "2": "function_result",
                    "20": "result",
                    "4": "output_data"
                },
                "param_1": {
                    "1": "param",
                    "18": "input_data",
                    "2": "input_param",
                    "5": "input"
                },
                "param_2": {
                    "1": "reversed_data"
                },
                "uStack_c": {
                    "1": "buffer",
                    "11": "temp",
                    "2": "stack_variable",
                    "3": "temp_value",
                    "4": "temp_var"
                }
            },
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "calling": [
                "FUN_00003444"
            ],
            "code": "\nundefined4 process_data_00002624(undefined4 input_data)\n\n{\n  undefined4 result;\n  undefined4 temp;\n  \n  result = FUN_0000281c();\n  temp = 0;\n  FUN_0000443c(&result,input_data);\n  return 0;\n}\n\n",
            "current_name": "process_data_00002624",
            "entrypoint": "0x00002624",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "local_10": "result",
                "param_1": "input_data",
                "uStack_c": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002654": {
            "additional_data": {
                "FUN_00002654": {
                    "1": "initialize_sensor",
                    "15": "initialize_data",
                    "2": "initialize_and_process_data",
                    "5": "initialize_function"
                },
                "FUN_00002894": {
                    "1": "set_values",
                    "2": "update_data",
                    "3": "perform_action",
                    "5": "perform_operation"
                },
                "FUN_000047e4": {
                    "1": "reverse_integer",
                    "2": "get_pointer",
                    "3": "reverse_data",
                    "7": "process_input_data"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "processed_data",
                    "5": "data",
                    "8": "input_data",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "operation_code",
                    "2": "config_param",
                    "3": "data_value",
                    "5": "data_param"
                },
                "param_3": {
                    "1": "option",
                    "2": "size",
                    "3": "param3",
                    "4": "additional_data",
                    "6": "config_param"
                },
                "uVar1": {
                    "1": "decoded_data",
                    "12": "result"
                }
            },
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "calling": [
                "FUN_000033f4"
            ],
            "code": "\nundefined4 initialize_data_00002654(undefined4 input_param,undefined4 value,undefined4 config_param)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(input_param);\n  DAT_1fff0d9c = value;\n  FUN_00002894(result,0x26f1,config_param);\n  return 0;\n}\n\n",
            "current_name": "initialize_data_00002654",
            "entrypoint": "0x00002654",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "input_param",
                "param_2": "value",
                "param_3": "config_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002690": {
            "additional_data": {
                "FUN_00002690": {
                    "1": "decode_and_process_data",
                    "2": "extract_data",
                    "3": "process_data",
                    "4": "extract_and_process_data"
                },
                "FUN_000028f0": {
                    "1": "get_random_number"
                },
                "FUN_0000443c": {
                    "1": "modify_result",
                    "2": "process_data"
                },
                "local_10": {
                    "1": "processed_data",
                    "16": "result",
                    "2": "output_data",
                    "3": "function_result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "parameter",
                    "15": "input_data",
                    "2": "data",
                    "3": "input",
                    "4": "input_parameter",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "result"
                },
                "uStack_c": {
                    "1": "stack_variable",
                    "2": "unused_stack_var",
                    "3": "temp_var",
                    "4": "temp_variable"
                }
            },
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "calling": [
                "FUN_000033c0"
            ],
            "code": "\nundefined4 extract_and_process_data_00002690(undefined4 input_data)\n\n{\n  undefined4 result;\n  undefined4 temp_variable;\n  \n  result = FUN_000028f0();\n  temp_variable = 0;\n  FUN_0000443c(&result,input_data);\n  return 0;\n}\n\n",
            "current_name": "extract_and_process_data_00002690",
            "entrypoint": "0x00002690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002690": "extract_and_process_data_00002690",
                "local_10": "result",
                "param_1": "input_data",
                "uStack_c": "temp_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026c0": {
            "additional_data": {
                "DAT_1fff0d9c": {
                    "1": "data"
                },
                "FUN_000026c0": {
                    "1": "initialize_function",
                    "30": "initialize_data"
                },
                "FUN_00002910": {
                    "1": "perform_system_checks",
                    "5": "sub_function",
                    "6": "perform_initialization",
                    "7": "reset_counter"
                }
            },
            "called": [
                "FUN_00002910"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid initialize_data_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_000026c0",
            "entrypoint": "0x000026c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026d8": {
            "additional_data": {
                "FUN_000026d8": {
                    "1": "initialize_device",
                    "2": "execute_initialization",
                    "20": "initialize_system",
                    "3": "initialize"
                },
                "FUN_0000294c": {
                    "1": "perform_operation",
                    "15": "perform_initialization",
                    "2": "call_sub_function"
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid initialize_system_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "current_name": "initialize_system_000026d8",
            "entrypoint": "0x000026d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026e4": {
            "additional_data": {
                "FUN_000026e4": {
                    "1": "run_initialization",
                    "2": "initialize_application",
                    "21": "initialize_system",
                    "5": "execute_initialization"
                },
                "FUN_00002970": {
                    "1": "initialize_data",
                    "18": "perform_initialization",
                    "2": "reset_system"
                }
            },
            "called": [
                "FUN_00002970"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "current_name": "initialize_system_000026e4",
            "entrypoint": "0x000026e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026f0": {
            "additional_data": {
                "(*DAT_1fff0d9c)": {
                    "1": "callback_function"
                },
                "DAT_1fff0d9c": {
                    "1": "callback_func",
                    "2": "function_ptr",
                    "4": "function_pointer",
                    "7": "callback_function"
                },
                "FUN_000026f0": {
                    "1": "execute_function_if_exists",
                    "18": "execute_callback",
                    "2": "execute_function",
                    "5": "execute_callback_function"
                },
                "param_1": {
                    "1": "function_parameter",
                    "2": "param",
                    "3": "data",
                    "4": "argument",
                    "5": "callback_parameter"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_callback_000026f0(undefined4 callback_param)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callback_param);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_000026f0",
            "entrypoint": "0x000026f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callback_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002714": {
            "additional_data": {
                "(inputByte & 0x1F)": {
                    "1": "bit_position"
                },
                "(uint)(int)(char)param_1 >> 5": {
                    "1": "shifted_value"
                },
                "*((uint)(byteToSet >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "memory_address"
                },
                "*((uint*)(inputByte >> 5) * 4 + -0x1FFF1F00)": {
                    "1": "memory_location"
                },
                "*(int *)(((uint)(int)(char)param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "result",
                    "3": "target_address",
                    "8": "memory_address"
                },
                "-0x1fff1f00": {
                    "1": "memory_address"
                },
                "1 << (byteToSet & 0x1f)": {
                    "1": "bit_to_set"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_shift_value",
                    "2": "bit_to_set",
                    "4": "bit_mask",
                    "6": "bit_value"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_1fff1f00": {
                    "1": "bit_mask"
                },
                "FUN_00002714": {
                    "1": "set_bit_in_array",
                    "10": "set_bit_in_memory",
                    "2": "set_bit_at_index",
                    "4": "set_bit_at_offset",
                    "9": "set_bit"
                },
                "PTR_": {
                    "1": ""
                },
                "byte": {
                    "1": "input_byte"
                },
                "char": {
                    "1": "char_value"
                },
                "int": {
                    "1": "int_ptr"
                },
                "param_1": {
                    "1": "value",
                    "12": "input_byte",
                    "2": "input",
                    "3": "byte_to_set",
                    "7": "byte_value"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "param_2": {
                    "1": "bit_position"
                },
                "uint": {
                    "1": "converted_unsigned_int"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid set_bit_in_memory_00002714(input_byte input_byte)\n\n{\n  *(int_ptr *)(((converted_unsigned_int)(int_ptr)(char_value)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00002714",
            "entrypoint": "0x00002714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "byte": "input_byte",
                "char": "char_value",
                "int": "int_ptr",
                "param_1": "input_byte",
                "uint": "converted_unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002744": {
            "additional_data": {
                "&0xf": {
                    "1": "mask"
                },
                "&0xff": {
                    "1": "value_mask"
                },
                "&DAT_e000ed14": {
                    "1": "ptr_data1"
                },
                "(char)param_1 < '\\0'": {
                    "1": "is_negative"
                },
                "(param_2 & 0xff) << 4": {
                    "1": "shifted_value"
                },
                "*(char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "ptr_data2"
                },
                "<< 4": {
                    "1": "shift_left_by_four"
                },
                "DAT_": {
                    "1": ""
                },
                "DAT_e000ed14": {
                    "1": "data_buffer",
                    "2": "byte_array"
                },
                "FUN_00002744": {
                    "1": "store_byte_in_memory",
                    "2": "store_byte",
                    "4": "update_memory",
                    "7": "update_data"
                },
                "PTR_": {
                    "1": "ptr_",
                    "2": ""
                },
                "PTR_-0x1fff1c00": {
                    "1": "memory_pointer"
                },
                "PTR_UNCHANGED_VARIABLE": {
                    "1": "unchanged_variable"
                },
                "array": {
                    "1": "data_array"
                },
                "char": {
                    "1": "byte_value",
                    "3": "byte"
                },
                "char *)((char)param_1 + -0x1fff1c00)": {
                    "1": "memory_location"
                },
                "dataIndex": {
                    "1": "index"
                },
                "param_1": {
                    "1": "offset",
                    "3": "index",
                    "4": "byte_value",
                    "6": "input_byte"
                },
                "param_1 & 0xf": {
                    "1": "masked_index"
                },
                "param_2": {
                    "1": "data_value",
                    "10": "value",
                    "4": "new_value",
                    "5": "data",
                    "8": "input_value"
                },
                "value": {
                    "1": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid update_data_00002744(byte address,uint value)\n\n{\n  if ((byte)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (byte)((value & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)address + -0x1fff1c00) = (byte)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00002744",
            "entrypoint": "0x00002744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "char": "byte",
                "param_1": "address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002798": {
            "additional_data": {
                "FUN_0000093c": {
                    "1": "execute_helper_function",
                    "2": "execute_action",
                    "5": "execute_sub_function",
                    "9": "perform_action"
                },
                "FUN_00002798": {
                    "1": "check_and_call_subfunction",
                    "13": "check_and_call_function",
                    "3": "check_and_execute",
                    "5": "check_and_execute_function"
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002994"
            ],
            "code": "\nvoid check_and_call_function_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_call_function_00002798",
            "entrypoint": "0x00002798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002798": "check_and_call_function_00002798"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000027b0": {
            "additional_data": {
                "FUN_000027b0": {
                    "1": "configure_peripheral",
                    "14": "initialize_system",
                    "2": "set_flag_and_initialize",
                    "5": "initialize_hardware"
                },
                "FUN_0000294c": {
                    "1": "perform_initialization",
                    "2": "perform_additional_tasks"
                },
                "_DAT_4003d000": {
                    "1": "some_flag",
                    "2": "system_control_register",
                    "6": "data_register"
                },
                "_DAT_4003d008": {
                    "1": "uart_baud_rate",
                    "2": "config_register"
                },
                "_DAT_4003d010": {
                    "1": "status_register",
                    "2": "timer_register",
                    "3": "timer_control",
                    "4": "interrupt_control_register"
                },
                "_DAT_4003d014": {
                    "1": "register2",
                    "12": "status_register",
                    "2": "status_flag"
                },
                "_DAT_4003d01c": {
                    "1": "error_count",
                    "2": "interrupt_flag",
                    "3": "counter",
                    "6": "data_register"
                },
                "_DAT_4004803c": {
                    "1": "interrupt_registers",
                    "2": "system_control_register",
                    "3": "system_flags"
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_000025f4"
            ],
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "current_name": "initialize_system_000027b0",
            "entrypoint": "0x000027b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000281c": {
            "additional_data": {
                "FUN_0000281c": {
                    "1": "get_initialized_value",
                    "2": "get_data_pointer",
                    "3": "get_global_data",
                    "4": "get_data_address",
                    "8": "get_base_address"
                },
                "_DAT_4003d000": {
                    "1": "memory_address",
                    "2": "data_pointer",
                    "3": "data_address",
                    "6": "base_address",
                    "7": "data"
                },
                "undefined4": {
                    "1": "uint32",
                    "2": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nuint32_t get_base_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "current_name": "get_base_address_0000281c",
            "entrypoint": "0x0000281c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000285c": {
            "additional_data": {
                "0x10": {
                    "1": "bit_to_set"
                },
                "0xffffffef": {
                    "1": "clear_bits_mask"
                },
                "FUN_0000285c": {
                    "1": "set_flag_and_store_value",
                    "2": "initialize_flags",
                    "3": "set_flag",
                    "7": "initialize_data"
                },
                "_DAT_4003d000": {
                    "1": "param",
                    "2": "data"
                },
                "_DAT_4003d014": {
                    "1": "flag_value",
                    "2": "register_value",
                    "4": "flag",
                    "7": "flags"
                },
                "param_1": {
                    "1": "param",
                    "10": "value",
                    "2": "new_value",
                    "6": "data",
                    "7": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002600"
            ],
            "code": "\n\n\nvoid initialize_data_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "current_name": "initialize_data_0000285c",
            "entrypoint": "0x0000285c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002894": {
            "additional_data": {
                "FUN_00002714": {
                    "1": "display_message",
                    "2": "perform_action_a",
                    "3": "perform_operation",
                    "4": "perform_action"
                },
                "FUN_00002744": {
                    "1": "send_data_to_device",
                    "2": "perform_action_b",
                    "3": "perform_operation2",
                    "7": "send_data"
                },
                "FUN_00002894": {
                    "1": "update_parameters",
                    "13": "initialize_data",
                    "2": "update_and_call_functions",
                    "3": "decrement_and_set_flags"
                },
                "_DAT_4003d008": {
                    "1": "data_1"
                },
                "_DAT_4003d01c": {
                    "1": "updated_flag"
                },
                "param_1": {
                    "1": "data_byte",
                    "13": "input_value",
                    "2": "input_param",
                    "3": "byte_value",
                    "4": "value"
                },
                "param_2": {
                    "1": "data_1",
                    "2": "value1",
                    "3": "data1",
                    "5": "data_value_1"
                },
                "param_3": {
                    "1": "option_value",
                    "2": "parameter2",
                    "3": "value2",
                    "4": "data2",
                    "5": "data_value_2"
                }
            },
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "calling": [
                "FUN_00002654"
            ],
            "code": "\n\n\nvoid initialize_data_00002894(int input_value,undefined4 value_1,undefined4 value_2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value_1;\n  DAT_1fff0da4 = value_2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "current_name": "initialize_data_00002894",
            "entrypoint": "0x00002894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "input_value",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000028f0": {
            "additional_data": {
                "1": {
                    "1": "one"
                },
                "FUN_000028f0": {
                    "1": "increment_and_return_value",
                    "17": "increment_value",
                    "2": "increment_pointer"
                },
                "_DAT_4003d008": {
                    "1": "ptr_value",
                    "10": "original_value",
                    "2": "pointer",
                    "3": "value",
                    "6": "current_value"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002690"
            ],
            "code": "\n\n\nint increment_value_000028f0(void)\n\n{\n  result _DAT_4003d008 + 1;\n}\n\n",
            "current_name": "increment_value_000028f0",
            "entrypoint": "0x000028f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002910": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "1": "data0",
                    "18": "data1",
                    "2": "variable1"
                },
                "DAT_1fff0da4": {
                    "1": "counter_value2",
                    "18": "data2",
                    "2": "variable2"
                },
                "FUN_00002910": {
                    "1": "clear_status_flags",
                    "17": "clear_flags",
                    "2": "clear_registers",
                    "3": "initialize_data"
                },
                "_DAT_4003d008": {
                    "1": "register2",
                    "2": "status_register",
                    "24": "counter"
                },
                "_DAT_4003d01c": {
                    "1": "settings_flag",
                    "17": "flags",
                    "2": "data_flag",
                    "3": "status_register"
                },
                "counter": {
                    "1": ""
                },
                "initialize": {
                    "1": ""
                },
                "settings": {
                    "1": ""
                }
            },
            "called": [],
            "calling": [
                "FUN_000026c0"
            ],
            "code": "\n\n\nvoid clear_flags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "current_name": "clear_flags_00002910",
            "entrypoint": "0x00002910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000294c": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_0000294c": {
                    "1": "set_register_flag",
                    "24": "set_flag"
                },
                "_DAT_4003d014": {
                    "1": "register_flag",
                    "2": "register_value",
                    "23": "flag",
                    "3": "flag_register"
                }
            },
            "called": [],
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "code": "\n\n\nvoid set_flag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "current_name": "set_flag_0000294c",
            "entrypoint": "0x0000294c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002970": {
            "additional_data": {
                "FUN_00002970": {
                    "1": "clear_interrupts",
                    "2": "disable_interrupts",
                    "6": "clear_bit_in_register",
                    "9": "clear_interrupt_flag"
                },
                "_DAT_4003d014": {
                    "1": "flags",
                    "2": "status_register",
                    "6": "flag",
                    "7": "register_value",
                    "8": "interrupt_flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_000026e4"
            ],
            "code": "\n\n\nvoid clear_interrupt_flag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "current_name": "clear_interrupt_flag_00002970",
            "entrypoint": "0x00002970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002994": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "1": "callback_function1",
                    "2": "function_pointer1"
                },
                "DAT_1fff0da4": {
                    "1": "callback1_arg",
                    "2": "parameter1"
                },
                "DAT_1fff0da8": {
                    "1": "callback_function_2",
                    "2": "callback2"
                },
                "DAT_1fff0dac": {
                    "1": "arg2",
                    "2": "parameter2"
                },
                "FUN_00002798": {
                    "1": "update_status",
                    "2": "perform_additional_operations",
                    "5": "perform_cleanup",
                    "8": "perform_additional_tasks"
                },
                "FUN_00002994": {
                    "1": "execute_function_calls",
                    "2": "execute_code_blocks",
                    "6": "execute_function",
                    "8": "execute_callbacks"
                },
                "_DAT_4003d014": {
                    "1": "status_flags"
                },
                "_DAT_4003d01c": {
                    "1": "variable_2"
                }
            },
            "called": [
                "FUN_00002798"
            ],
            "calling": [],
            "code": "\n\n\nvoid execute_callbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "current_name": "execute_callbacks_00002994",
            "entrypoint": "0x00002994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a00": {
            "additional_data": {
                "FUN_00002a00": {
                    "1": "initialize_function",
                    "18": "initialize",
                    "2": "initialize_application",
                    "3": "execute_initialization"
                },
                "FUN_00004cb4": {
                    "1": "perform_initialization",
                    "16": "process_data",
                    "4": "perform_operation"
                },
                "param_1": {
                    "1": "application_data",
                    "2": "input_param",
                    "7": "data",
                    "8": "input"
                }
            },
            "called": [
                "FUN_00004cb4"
            ],
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "code": "\nvoid initialize_00002a00(undefined4 input)\n\n{\n  FUN_00004cb4(input);\n  return;\n}\n\n",
            "current_name": "initialize_00002a00",
            "entrypoint": "0x00002a00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a00": "initialize_00002a00",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a18": {
            "additional_data": {
                "FUN_00002a18": {
                    "1": "find_valid_command",
                    "2": "find_reboot_param",
                    "3": "find_reboot_code",
                    "5": "find_matching_value",
                    "8": "find_reboot_value"
                },
                "FUN_00004e52": {
                    "1": "check_reboot_status"
                },
                "iVar1": {
                    "1": "match_result",
                    "9": "result"
                },
                "local_10": {
                    "1": "array_index",
                    "27": "index"
                },
                "local_14": {
                    "1": "error_msgs",
                    "2": "reboot_string_ptr",
                    "3": "reboot_message",
                    "5": "reboot_string",
                    "7": "reboot_strings"
                },
                "local_18": {
                    "1": "ptr_array",
                    "2": "current_value",
                    "5": "current_array",
                    "9": "array_ptr"
                },
                "local_c": {
                    "1": "current_value",
                    "2": "current_byte",
                    "3": "current_string",
                    "6": "current_element"
                },
                "param_1": {
                    "1": "code_list",
                    "2": "byte_array_1",
                    "4": "input_array",
                    "9": "array"
                },
                "param_2": {
                    "1": "reference_value",
                    "2": "byte_array_2",
                    "6": "param",
                    "7": "value"
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nint find_reboot_value_00002a18(int *array,undefined4 value)\n\n{\n  int result;\n  int *array_ptr;\n  undefined **reboot_strings;\n  uint index;\n  int *current_element;\n  \n  array_ptr = array;\n  reboot_strings = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_element = (&array_ptr)[index];\n    if (current_element != (int *)0x0) {\n      for (; *current_element != 0; current_element = current_element + 3) {\n        result = FUN_00004e52(*current_element,value);\n        if (result == 0) {\n          return current_element[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "find_reboot_value_00002a18",
            "entrypoint": "0x00002a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a18": "find_reboot_value_00002a18",
                "iVar1": "result",
                "local_10": "index",
                "local_14": "reboot_strings",
                "local_18": "array_ptr",
                "local_c": "current_element",
                "param_1": "array",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a88": {
            "additional_data": {
                "FUN_00002a88": {
                    "1": "print_commands",
                    "2": "display_command_description",
                    "21": "print_command_descriptions",
                    "3": "display_command_descriptions",
                    "4": "print_command_description"
                },
                "FUN_00004c84": {
                    "1": "print_formatted_text",
                    "2": "print_formatted_string"
                },
                "FUN_00004db8": {
                    "1": "print_line",
                    "2": "print_separator"
                },
                "local_10": {
                    "10": "command_index",
                    "18": "index",
                    "3": "i"
                },
                "local_14": {
                    "1": "command_description_array",
                    "10": "command_names",
                    "2": "command_descriptions",
                    "3": "command_list",
                    "9": "command_description"
                },
                "local_18": {
                    "1": "command_array",
                    "29": "current_command"
                },
                "local_c": {
                    "1": "current_command",
                    "15": "current_parameter",
                    "2": "current_argument"
                },
                "param_1": {
                    "10": "command_list",
                    "16": "commands",
                    "2": "command_array"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nvoid print_command_descriptions_00002a88(int *commands)\n\n{\n  int *current_command;\n  undefined **command_names;\n  uint index;\n  int *current_parameter;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  current_command = commands;\n  command_names = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    current_parameter = (&current_command)[index];\n    if (current_parameter != (int *)0x0) {\n      for (; *current_parameter != 0; current_parameter = current_parameter + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*current_parameter,current_parameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "print_command_descriptions_00002a88",
            "entrypoint": "0x00002a88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "local_10": "index",
                "local_14": "command_names",
                "local_18": "current_command",
                "local_c": "current_parameter",
                "param_1": "commands"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002b10": {
            "additional_data": {
                "FUN_00002a18": {
                    "1": "execute_command"
                },
                "FUN_00002a88": {
                    "1": "cleanup_resources"
                },
                "FUN_00002b10": {
                    "1": "extract_shell_arguments",
                    "2": "process_input",
                    "3": "process_string",
                    "4": "process_command",
                    "7": "parse_and_execute_command"
                },
                "FUN_00004c84": {
                    "2": "print_error_message"
                },
                "FUN_00004db8": {
                    "1": "execute_command"
                },
                "FUN_00004e52": {
                    "1": "is_command_in_list"
                },
                "iVar1": {
                    "1": "check_result",
                    "11": "result",
                    "2": "return_value"
                },
                "local_14": {
                    "1": "current_byte",
                    "2": "ptr",
                    "4": "curr_char_ptr",
                    "5": "current_char",
                    "8": "current_char_ptr"
                },
                "local_18": {
                    "1": "string_count",
                    "14": "quote_count",
                    "2": "num_strings",
                    "3": "arg_count",
                    "7": "num_quotes"
                },
                "local_1c": {
                    "1": "caret_count",
                    "16": "escape_count",
                    "2": "num_backslashes",
                    "5": "num_escapes"
                },
                "local_20": {
                    "1": "current_index",
                    "16": "index",
                    "3": "arg_index",
                    "8": "i"
                },
                "local_24": {
                    "1": "arg_ptr_list",
                    "2": "arg_ptr_array",
                    "3": "arg_ptrs"
                },
                "local_28": {
                    "1": "current_argument",
                    "10": "current_arg",
                    "3": "current_command",
                    "4": "current_string"
                },
                "local_2c": {
                    "1": "escape_ptr",
                    "14": "current_char",
                    "3": "curr_char",
                    "5": "escape_char"
                },
                "local_2d": {
                    "1": "quote_type",
                    "24": "quote_char",
                    "5": "quote"
                },
                "local_34": {
                    "1": "argument_count",
                    "10": "num_args",
                    "2": "arg_index",
                    "3": "num_arguments",
                    "4": "args_count"
                },
                "local_38": {
                    "1": "parameters",
                    "2": "command_array",
                    "3": "arg_list",
                    "5": "command_args",
                    "6": "arguments"
                },
                "local_3c": {
                    "1": "function",
                    "2": "execute_function",
                    "3": "command_handler",
                    "5": "function_pointer",
                    "6": "command_function"
                },
                "local_48": {
                    "1": "input_args",
                    "2": "command_array",
                    "3": "string_array",
                    "4": "args"
                },
                "param_1": {
                    "1": "unknown_param",
                    "2": "param_ptr",
                    "4": "arg_count",
                    "6": "arg1",
                    "7": "param1",
                    "8": "param"
                },
                "param_2": {
                    "1": "arg_string",
                    "2": "command_string",
                    "3": "command_line",
                    "4": "arg2",
                    "5": "input_string",
                    "8": "command"
                },
                "pbVar2": {
                    "1": "var2",
                    "2": "current_char",
                    "4": "next_char"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid parse_command_00002b10(undefined4 param,byte *command)\n\n{\n  int result;\n  byte *next_char;\n  byte *args [3];\n  code *command_function;\n  char **arguments;\n  uint num_args;\n  byte quote_char;\n  char *current_char;\n  char *current_arg;\n  char **arg_ptrs;\n  uint index;\n  int escape_count;\n  uint quote_count;\n  byte *current_char_ptr;\n  \n  quote_count = 0;\n  escape_count = 0;\n  current_char_ptr = command;\n  while( true ) {\n    args[0] = command;\n    args[1] = (byte *)param;\n    if (0x20 < *current_char_ptr) {\n      if ((*current_char_ptr == 0x22) || (*current_char_ptr == 0x27)) {\n        quote_char = *current_char_ptr;\n        do {\n          next_char = current_char_ptr + 1;\n          if (*next_char == 0) {\n            current_char_ptr = next_char;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*next_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char_ptr = current_char_ptr + 2;\n            next_char = current_char_ptr;\n            if (*current_char_ptr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char_ptr = next_char;\n        } while (quote_char != *current_char_ptr);\n        if (0x20 < current_char_ptr[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char_ptr == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char_ptr = current_char_ptr + 1;\n            if (*current_char_ptr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char_ptr = current_char_ptr + 1;\n          if (*current_char_ptr == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char_ptr);\n      }\n      quote_count = quote_count + 1;\n    }\n    if (*current_char_ptr == 0) break;\n    *current_char_ptr = 0;\n    current_char_ptr = current_char_ptr + 1;\n  }\n  if (quote_count != 0) {\n    num_args = quote_count;\n    arguments = (char **)((int)args - ((quote_count + 1) * 4 + 7 & 0xfffffff8));\n    arguments[quote_count] = (char *)0x0;\n    current_char_ptr = command;\n    for (index = 0; arg_ptrs = arguments, index < quote_count; index = index + 1) {\n      for (; *current_char_ptr == 0; current_char_ptr = current_char_ptr + 1) {\n      }\n      if ((*current_char_ptr == 0x22) || (*current_char_ptr == 0x27)) {\n        current_char_ptr = current_char_ptr + 1;\n      }\n      arguments[index] = (char *)current_char_ptr;\n      for (; *current_char_ptr != 0; current_char_ptr = current_char_ptr + 1) {\n      }\n    }\n    for (; (escape_count != 0 && (*arg_ptrs != (char *)0x0)); arg_ptrs = arg_ptrs + 1) {\n      for (current_arg = *arg_ptrs; *current_arg != '\\0'; current_arg = current_arg + 1) {\n        if (*current_arg == '\\') {\n          for (current_char = current_arg; *current_char != '\\0'; current_char = current_char + 1) {\n            *current_char = current_char[1];\n          }\n          escape_count = escape_count + -1;\n          if (escape_count == 0) break;\n        }\n      }\n    }\n    command_function = (code *)FUN_00002a18(param,*arguments);\n    if (command_function == (code *)0x0) {\n      result = FUN_00004e52(&DAT_00007214,*arguments);\n      if (result == 0) {\n        FUN_00002a88(args[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*arguments);\n      }\n    }\n    else {\n      (*command_function)(quote_count,arguments);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "parse_command_00002b10",
            "entrypoint": "0x00002b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002b10": "parse_command_00002b10",
                "iVar1": "result",
                "local_14": "current_char_ptr",
                "local_18": "quote_count",
                "local_1c": "escape_count",
                "local_20": "index",
                "local_24": "arg_ptrs",
                "local_28": "current_arg",
                "local_2c": "current_char",
                "local_2d": "quote_char",
                "local_34": "num_args",
                "local_38": "arguments",
                "local_3c": "command_function",
                "local_48": "args",
                "param_1": "param",
                "param_2": "command",
                "pbVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002d94": {
            "additional_data": {
                "FUN_00002a00": {
                    "1": "output_char",
                    "2": "print_char"
                },
                "FUN_00002d94": {
                    "1": "process_input_data",
                    "10": "process_input",
                    "2": "extract_input_string",
                    "3": "extract_string"
                },
                "FUN_00004418": {
                    "1": "read_char",
                    "2": "get_next_char"
                },
                "bVar2": {
                    "1": "result",
                    "2": "result_byte",
                    "4": "output_byte",
                    "5": "byte_value"
                },
                "bVar3": {
                    "1": "is_param1_equal_to_local_c",
                    "10": "is_first_char",
                    "2": "is_buffer_empty"
                },
                "iVar1": {
                    "1": "read_char",
                    "2": "input_character",
                    "3": "current_char",
                    "7": "input_char"
                },
                "local_c": {
                    "1": "current_char_ptr",
                    "11": "current_position",
                    "18": "current_char"
                },
                "param_1": {
                    "1": "output_buffer",
                    "13": "input_buffer",
                    "3": "string_buffer",
                    "5": "input_string",
                    "6": "buffer"
                },
                "param_2": {
                    "1": "length",
                    "2": "buffer_length",
                    "20": "buffer_size",
                    "4": "max_length"
                }
            },
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nuint process_input_00002d94(undefined *input_buffer,int buffer_size)\n\n{\n  int input_char;\n  byte byte_value;\n  bool is_first_char;\n  undefined *current_char;\n  \n  current_char = input_buffer;\n  while( true ) {\n    if (buffer_size + -1 <= (int)current_char - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    input_char = FUN_00004418();\n    if (input_char < 0) break;\n    if ((input_char == 0xd) || (input_char == 10)) {\n      *current_char = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      is_first_char = current_char == input_buffer;\n      if (is_first_char) {\n        input_buffer = (undefined *)0x1;\n      }\n      byte_value = (byte)input_buffer;\n      if (!is_first_char) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((input_char == 8) || (input_char == 0x7f)) {\n      if (current_char != input_buffer) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *current_char = (char)input_char;\n      FUN_00002a00(input_char);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "process_input_00002d94",
            "entrypoint": "0x00002d94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "bVar2": "byte_value",
                "bVar3": "is_first_char",
                "iVar1": "input_char",
                "local_c": "current_char",
                "param_1": "input_buffer",
                "param_2": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e48": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_entries",
                    "2": "rel_array"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "offset"
                },
                "FUN_00002a00": {
                    "1": "set_configuration",
                    "12": "set_flag",
                    "2": "set_register_value",
                    "9": "set_mode"
                },
                "FUN_00002e48": {
                    "1": "initialize_subsystem",
                    "11": "initialize_components",
                    "2": "initialize",
                    "7": "initialize_function"
                },
                "FUN_000041d0": {
                    "1": "execute_function_b",
                    "2": "execute_operation",
                    "26": "process_data"
                },
                "param_1": {
                    "1": "flag",
                    "2": "value1",
                    "3": "mode"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "value2",
                    "3": "param2"
                },
                "param_3": {
                    "1": "arg3",
                    "3": "param3"
                }
            },
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid initialize_components_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(offset + 8));\n  return;\n}\n\n",
            "current_name": "initialize_components_00002e48",
            "entrypoint": "0x00002e48",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "offset",
                "FUN_00002e48": "initialize_components_00002e48"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "additional_data": {
                "FUN_00002b10": {
                    "1": "perform_operation",
                    "2": "handle_data",
                    "3": "process_data",
                    "4": "handle_success"
                },
                "FUN_00002d94": {
                    "1": "check_validity",
                    "2": "check_data_validity",
                    "7": "check_data",
                    "9": "check_condition"
                },
                "FUN_00002e48": {
                    "1": "wait_for_interrupt",
                    "2": "wait",
                    "3": "wait_for_data"
                },
                "FUN_00002e6c": {
                    "1": "loop_until_success",
                    "18": "process_data",
                    "2": "check_and_execute",
                    "4": "check_and_process_data"
                },
                "iVar1": {
                    "1": "condition_result",
                    "14": "result",
                    "2": "return_value"
                },
                "param_1": {
                    "1": "function_param1",
                    "11": "arg1",
                    "2": "input_param_1",
                    "3": "param1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "data_1",
                    "2": "buffer",
                    "3": "data_ptr",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "function_param3",
                    "2": "input_param_3",
                    "3": "input3",
                    "5": "size",
                    "9": "arg3"
                }
            },
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nvoid process_data_00002e6c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(arg2,arg3);\n    if (result == 0) {\n      FUN_00002b10(arg1,arg2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "current_name": "process_data_00002e6c",
            "entrypoint": "0x00002e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "iVar1": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "additional_data": {
                "FUN_00002e9c": {
                    "1": "initialize_binary",
                    "2": "execute_main_function",
                    "3": "execute_initialization",
                    "5": "initialize",
                    "8": "initialize_system"
                },
                "FUN_00003688": {
                    "1": "execute_startup_tasks",
                    "2": "do_something",
                    "5": "execute_initialization",
                    "6": "perform_initialization"
                }
            },
            "called": [
                "FUN_00003688"
            ],
            "calling": [],
            "code": "\nundefined4 initialize_system_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_00002e9c",
            "entrypoint": "0x00002e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e9c": "initialize_system_00002e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "additional_data": {
                "FUN_0000211c": {
                    "1": "perform_initial_setup",
                    "14": "perform_initialization",
                    "2": "initialize_system",
                    "5": "execute_initialization"
                },
                "FUN_00002eb4": {
                    "1": "perform_initialization",
                    "2": "initialize_program",
                    "6": "execute_initialization",
                    "7": "initialize_application",
                    "9": "initialize_system"
                }
            },
            "called": [
                "FUN_0000211c"
            ],
            "calling": [],
            "code": "\nundefined4 initialize_system_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_00002eb4",
            "entrypoint": "0x00002eb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002eb4": "initialize_system_00002eb4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "additional_data": {
                "FUN_00002ecc": {
                    "1": "read_and_print_device_info",
                    "2": "read_data_from_device",
                    "26": "read_from_device"
                },
                "FUN_00003694": {
                    "1": "process_data"
                },
                "FUN_000039e8": {
                    "1": "get_device_type"
                },
                "FUN_00003d64": {
                    "1": "read_from_device_helper"
                },
                "FUN_00004c84": {
                    "1": "print_error_message"
                },
                "auStack_1c": {
                    "1": "device_info_buffer",
                    "2": "read_buffer",
                    "25": "buffer"
                },
                "local_14": {
                    "1": "read_count",
                    "15": "read_result",
                    "5": "bytes_read",
                    "7": "read_size"
                },
                "param_1": {
                    "1": "device_num",
                    "27": "device_number",
                    "3": "device_index"
                },
                "param_2": {
                    "1": "device_ptr",
                    "2": "device_address",
                    "20": "device_info",
                    "6": "device_data"
                },
                "uVar1": {
                    "1": "device_name_pointer",
                    "15": "device_type",
                    "9": "device_name"
                },
                "uVar2": {
                    "1": "name_value",
                    "10": "device_type",
                    "15": "device_name",
                    "2": "device_info"
                }
            },
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "code": "\nvoid read_from_device_00002ecc(undefined4 device_number,int device_info)\n\n{\n  undefined4 device_type;\n  undefined4 device_name;\n  undefined buffer [8];\n  uint read_result;\n  \n  read_result = FUN_00003d64(device_info,buffer);\n  if ((int)read_result < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",device_number);\n  }\n  else {\n    device_name = *(undefined4 *)(device_info + 8);\n    device_type = FUN_000039e8(*(undefined *)(*(int *)(device_info + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",device_number,device_name,device_type);\n    FUN_00003694(buffer,read_result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "read_from_device_00002ecc",
            "entrypoint": "0x00002ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "auStack_1c": "buffer",
                "local_14": "read_result",
                "param_1": "device_number",
                "param_2": "device_info",
                "uVar1": "device_type",
                "uVar2": "device_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f30": {
            "additional_data": {
                "FUN_00002ecc": {
                    "1": "handle_data",
                    "2": "process_element"
                },
                "FUN_00002f30": {
                    "1": "iterate_linked_list_and_do_something",
                    "2": "iterate_and_process",
                    "3": "process_list",
                    "4": "process_items",
                    "9": "process_data"
                },
                "FUN_00004db8": {
                    "1": "perform_operation"
                },
                "local_10": {
                    "1": "item_count",
                    "12": "index",
                    "2": "count",
                    "4": "counter",
                    "9": "iteration_count"
                },
                "local_c": {
                    "1": "item",
                    "2": "data_pointer",
                    "4": "current_element",
                    "6": "current_item",
                    "7": "current_node"
                },
                "param_1": {
                    "1": "item_index",
                    "4": "index"
                },
                "param_2": {
                    "1": "entry"
                }
            },
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "calling": [
                "FUN_00002fe0"
            ],
            "code": "\nvoid process_data_00002f30(void)\n\n{\n  int index;\n  undefined4 *current_node;\n  \n  index = 0;\n  for (current_node = DAT_1fff0db0; current_node != (undefined4 *)0x0; current_node = (undefined4 *)*current_node) {\n    FUN_00002ecc(index,current_node);\n    FUN_00004db8(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00002f30",
            "entrypoint": "0x00002f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f30": "process_data_00002f30",
                "local_10": "index",
                "local_c": "current_node"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f74": {
            "additional_data": {
                "FUN_00002f74": {
                    "1": "print_devices",
                    "13": "print_device_list",
                    "2": "print_device_details",
                    "6": "print_device_information",
                    "7": "print_device_info"
                },
                "FUN_000039e8": {
                    "1": "get_device_class_name",
                    "2": "get_device_name",
                    "7": "get_device_class"
                },
                "FUN_00004c84": {
                    "1": "print_device_information",
                    "3": "print_device_details",
                    "4": "print_device"
                },
                "FUN_00004db8": {
                    "1": "log_message",
                    "2": "print_error_message",
                    "4": "display_error_message",
                    "5": "display_message"
                },
                "local_14": {
                    "1": "device_entry",
                    "18": "device_list",
                    "2": "current_device",
                    "3": "device_ptr"
                },
                "local_18": {
                    "1": "index",
                    "23": "device_count",
                    "5": "device_index"
                },
                "param_1": {
                    "2": "device_list"
                },
                "param_2": {
                    "1": "device_count"
                },
                "uVar1": {
                    "1": "device_name",
                    "2": "device_class"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid print_device_list_00002f74(void)\n\n{\n  undefined4 device_class;\n  int device_count;\n  undefined4 *device_list;\n  \n  device_list = DAT_1fff0db0;\n  device_count = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    device_class = FUN_000039e8(*(undefined *)(device_list[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",device_count,device_class,device_list[2]);\n    device_count = device_count + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_device_list_00002f74",
            "entrypoint": "0x00002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_14": "device_list",
                "local_18": "device_count",
                "uVar1": "device_class"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "additional_data": {
                "&DAT_000073d4": {
                    "1": "device_config"
                },
                "*param_2": {
                    "1": "program_name"
                },
                "DAT_000073d4": {
                    "1": "default_device_config"
                },
                "FUN_00002ecc": {
                    "1": "execute_device",
                    "10": "configure_device",
                    "2": "process_device_id",
                    "6": "process_device"
                },
                "FUN_00002f30": {
                    "1": "execute_action",
                    "2": "execute_operation",
                    "3": "handle_success",
                    "4": "perform_operation",
                    "6": "perform_action"
                },
                "FUN_00002fe0": {
                    "1": "process_command",
                    "10": "process_device",
                    "2": "parse_command_line_arguments"
                },
                "FUN_00003d24": {
                    "1": "get_device_data",
                    "2": "get_device_status",
                    "4": "validate_device_id",
                    "6": "find_device_id"
                },
                "FUN_00004042": {
                    "1": "get_device_data",
                    "2": "lookup_device",
                    "3": "convert_device_id",
                    "6": "get_device",
                    "9": "get_device_id"
                },
                "FUN_00004c84": {
                    "12": "print_usage",
                    "15": "print_usage_error",
                    "2": "print_error_message"
                },
                "FUN_00004db8": {
                    "1": "print_undefined_error",
                    "24": "print_error"
                },
                "FUN_00004e52": {
                    "1": "validate_parameters",
                    "2": "is_valid_device",
                    "3": "check_device_id",
                    "5": "check_device",
                    "8": "find_device"
                },
                "iVar1": {
                    "1": "is_valid_device",
                    "19": "result",
                    "2": "device_count"
                },
                "param_1": {
                    "1": "device_string",
                    "11": "argc",
                    "18": "device_count"
                },
                "param_2": {
                    "1": "device_arguments",
                    "10": "arguments",
                    "12": "argv",
                    "2": "args"
                },
                "param_2[1]": {
                    "1": "device_id_arg"
                },
                "param_2[2]": {
                    "1": "device_name"
                },
                "param_3": {
                    "1": "error_message1"
                },
                "param_4": {
                    "1": "error_message2"
                },
                "uVar2": {
                    "1": "device_identifier",
                    "2": "device",
                    "25": "device_id"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid process_device_00002fe0(int device_count,undefined4 *argv)\n\n{\n  int result;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*argv,device_id_arg);\n  }\n  else {\n    result = FUN_00004e52(device_name,&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      device_id = FUN_00004042(device_name);\n      result = FUN_00003d24(device_id);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(device_id,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_device_00002fe0",
            "entrypoint": "0x00002fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002fe0": "process_device_00002fe0",
                "iVar1": "result",
                "param_1": "device_count",
                "param_2": "argv",
                "param_2[1]": "device_id_arg",
                "param_2[2]": "device_name",
                "uVar2": "device_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000305c": {
            "additional_data": {
                "FUN_0000305c": {
                    "1": "process_device_values",
                    "28": "write_to_device"
                },
                "FUN_00003694": {
                    "1": "write_to_device_memory",
                    "10": "write_data_to_device"
                },
                "FUN_00003d24": {
                    "1": "find_device_index",
                    "2": "find_device",
                    "3": "get_device_id",
                    "5": "get_device_index"
                },
                "FUN_00003d94": {
                    "1": "write_data_to_device",
                    "3": "write_to_device_memory"
                },
                "FUN_00004042": {
                    "1": "parse_input_value",
                    "3": "convert_to_value",
                    "6": "parse_value"
                },
                "FUN_00004622": {
                    "1": "reset_data_buffer",
                    "2": "initialize_buffer",
                    "3": "initialize_array"
                },
                "FUN_00004c84": {
                    "1": "print_error_message",
                    "3": "print_usage_error",
                    "8": "print_usage"
                },
                "FUN_00004db8": {
                    "1": "print_error_device_undefined",
                    "2": "print_device_error",
                    "3": "print_error"
                },
                "auStack_20": {
                    "1": "stack_array",
                    "12": "device_values",
                    "2": "values_array"
                },
                "local_10": {
                    "2": "device",
                    "22": "device_id",
                    "5": "device_name"
                },
                "local_14": {
                    "15": "device_index",
                    "2": "device_ptr",
                    "3": "device_id",
                    "7": "device"
                },
                "local_18": {
                    "1": "array_length",
                    "2": "value_count",
                    "25": "num_values"
                },
                "local_c": {
                    "16": "i",
                    "2": "loop_index",
                    "4": "loop_counter",
                    "5": "index"
                },
                "param_1": {
                    "1": "num_arguments",
                    "23": "argc",
                    "3": "num_args"
                },
                "param_2": {
                    "1": "arguments",
                    "2": "arg_values",
                    "23": "argv",
                    "3": "args"
                },
                "param_3": {
                    "1": "size"
                },
                "uVar1": {
                    "12": "value",
                    "2": "device_id",
                    "5": "device_value"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid write_to_device_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id = FUN_00004042(argv[2]);\n    device_index = FUN_00003d24(device_id);\n    if (device_index == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        value = FUN_00004042(argv[i + 3]);\n        values[i] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_index + 8));\n      FUN_00003694(values,num_values & 0xff);\n      num_values = FUN_00003d94(device_index,values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "write_to_device_0000305c",
            "entrypoint": "0x0000305c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "auStack_20": "values",
                "local_10": "device_id",
                "local_14": "device_index",
                "local_18": "num_values",
                "local_c": "i",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000316c": {
            "additional_data": {
                "FIM_0x00004c84": {
                    "1": "print_usage"
                },
                "FUM_0x00002f74": {
                    "1": "handle_error"
                },
                "FUM_0x00002fe0": {
                    "1": "read_data"
                },
                "FUM_0x0000305c": {
                    "1": "write_data"
                },
                "FUM_0x00004e52": {
                    "1": "compare_strings"
                },
                "FUN_00002f74": {
                    "1": "display_error_message",
                    "2": "print_error_message",
                    "3": "print_usage",
                    "4": "handle_invalid_input",
                    "5": "handle_invalid_command",
                    "8": "handle_error"
                },
                "FUN_00002fe0": {
                    "1": "perform_read_action",
                    "2": "execute_read_command",
                    "3": "handle_read_command",
                    "5": "perform_read",
                    "6": "execute_read"
                },
                "FUN_0000305c": {
                    "1": "perform_write_action",
                    "2": "execute_write_command",
                    "3": "handle_write_command",
                    "5": "perform_write",
                    "6": "execute_write"
                },
                "FUN_0000316c": {
                    "1": "validate_input_and_execute",
                    "2": "check_read_write_usage",
                    "3": "process_command",
                    "7": "execute_command"
                },
                "FUN_00004c84": {
                    "2": "print_error_message",
                    "21": "print_usage",
                    "3": "print_error"
                },
                "FUN_00004e52": {
                    "1": "find_command",
                    "17": "compare_strings",
                    "4": "check_command"
                },
                "iVar1": {
                    "1": "read_result",
                    "27": "result"
                },
                "param_1": {
                    "1": "command_length",
                    "2": "operation_type",
                    "7": "command_type",
                    "8": "argc"
                },
                "param_2": {
                    "1": "args_list",
                    "10": "arguments",
                    "3": "command_args",
                    "9": "argv"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "calling": [],
            "code": "\nundefined4 execute_command_0000316c(int argc,undefined4 *arguments)\n\n{\n  int result;\n  \n  if (argc < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(arguments[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(argc,arguments);\n    }\n    else {\n      result = FUN_00004e52(arguments[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(argc,arguments);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "execute_command_0000316c",
            "entrypoint": "0x0000316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000316c": "execute_command_0000316c",
                "iVar1": "result",
                "param_1": "argc",
                "param_2": "arguments"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031e0": {
            "additional_data": {
                "DAT_": {
                    "1": "(unchanged)"
                },
                "FUN_000031e0": {
                    "1": "trigger_alarm",
                    "11": "print_alarm_message",
                    "14": "ring_alarm",
                    "3": "display_alarm_message"
                },
                "FUN_00004db8": {
                    "22": "print_message",
                    "8": "display_message"
                },
                "PTR_": {
                    "1": "(unchanged)"
                },
                "The alarm rang": {
                    "1": "alarm_message"
                },
                "fun_00004db8": {
                    "1": "print_message"
                },
                "message": {
                    "1": "alarm_message"
                },
                "param_1": {
                    "1": "ring_message",
                    "26": "message"
                },
                "undefined4": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [],
            "code": "\nvoid ring_alarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "current_name": "ring_alarm_000031e0",
            "entrypoint": "0x000031e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031fc": {
            "additional_data": {
                "<unnamed_variable>": {
                    "1": "day_offset"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "days_in_month",
                    "2": "weekdays",
                    "6": "weekday_offsets"
                },
                "FUN_000031fc": {
                    "1": "calculate_weekday_for_date",
                    "12": "calculate_weekday",
                    "14": "calculate_day_of_week",
                    "2": "get_weekday"
                },
                "bVar1": {
                    "1": "leap_year_flag",
                    "2": "leap_year",
                    "24": "is_leap_year"
                },
                "iVar2": {
                    "1": "adjusted_day",
                    "21": "adjusted_year",
                    "9": "adjusted_month"
                },
                "param_1": {
                    "1": "adjusted_year",
                    "2": "day",
                    "26": "year"
                },
                "param_2": {
                    "1": "input_month",
                    "30": "month"
                },
                "param_3": {
                    "2": "offset",
                    "24": "day",
                    "3": "year"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c"
            ],
            "code": "\nint calculate_day_of_week_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekday_offsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "current_name": "calculate_day_of_week_000031fc",
            "entrypoint": "0x000031fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "weekday_offsets",
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000328c": {
            "additional_data": {
                "*param_1": {
                    "1": "data_array"
                },
                "*param_2": {
                    "1": "result_array"
                },
                "FUN_000031fc": {
                    "1": "perform_calculation",
                    "2": "calculate_result"
                },
                "FUN_0000328c": {
                    "1": "extract_information",
                    "2": "parse_input_data",
                    "4": "extract_and_process_data",
                    "6": "parse_data",
                    "7": "extract_data"
                },
                "FUN_00004f84": {
                    "1": "parse_byte_stream"
                },
                "iVar1": {
                    "1": "reversed_value",
                    "5": "result"
                },
                "local_10": {
                    "1": "temp_var1",
                    "10": "index",
                    "16": "current_index",
                    "2": "offset"
                },
                "local_a": {
                    "1": "processed_value",
                    "11": "result",
                    "3": "parsed_value",
                    "4": "value"
                },
                "param_1": {
                    "1": "input_ptr",
                    "11": "input_array",
                    "2": "input_data",
                    "3": "data_array",
                    "4": "data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "decoded_data",
                    "16": "output_array",
                    "2": "result",
                    "4": "result_array"
                }
            },
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "code": "\nundefined4 extract_data_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int result;\n  int current_index;\n  short result;\n  \n  result = FUN_00004f84(*input_array,&current_index,10);\n  output_array[5] = result + -0x76c;\n  result = FUN_00004f84(current_index + 1,&current_index,10);\n  output_array[4] = result + -1;\n  result = FUN_00004f84(current_index + 1,&current_index,10);\n  output_array[3] = (int)result;\n  result = FUN_00004f84(input_array[1],&current_index,10);\n  output_array[2] = (int)result;\n  result = FUN_00004f84(current_index + 1,&current_index,10);\n  output_array[1] = (int)result;\n  result = FUN_00004f84(current_index + 1,&current_index,10);\n  *output_array = (int)result;\n  result = FUN_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "current_name": "extract_data_0000328c",
            "entrypoint": "0x0000328c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000328c": "extract_data_0000328c",
                "iVar1": "result",
                "local_10": "current_index",
                "local_a": "result",
                "param_1": "input_array",
                "param_2": "output_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003378": {
            "additional_data": {
                "*param_1": {
                    "16": "second"
                },
                "FUN_00003378": {
                    "1": "print_timestamp",
                    "2": "print_datetime",
                    "25": "print_date_time"
                },
                "FUN_00004c84": {
                    "1": "print_formatted_string",
                    "6": "print_formatted_date_time"
                },
                "[param_1+0x10]": {
                    "1": "month"
                },
                "[param_1+0x14]": {
                    "1": "year"
                },
                "[param_1+0xc]": {
                    "1": "day"
                },
                "[param_1+4]": {
                    "1": "minute"
                },
                "[param_1+8]": {
                    "1": "hour"
                },
                "[param_1]": {
                    "1": "second"
                },
                "param_1": {
                    "1": "format_str",
                    "15": "date_time_array",
                    "2": "date_time_arr",
                    "3": "datetime",
                    "5": "date_time"
                },
                "param_1[1]": {
                    "16": "minute"
                },
                "param_1[2]": {
                    "16": "hour"
                },
                "param_1[3]": {
                    "16": "day"
                },
                "param_1[4]": {
                    "16": "month"
                },
                "param_1[5]": {
                    "16": "year"
                },
                "param_2": {
                    "1": "year"
                },
                "param_3": {
                    "1": "month"
                },
                "param_4": {
                    "1": "day"
                },
                "param_5": {
                    "1": "hour"
                },
                "param_6": {
                    "1": "minute"
                },
                "param_7": {
                    "1": "second"
                }
            },
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "code": "\nundefined4 print_date_time_00003378(undefined4 *date_time_array)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*date_time_array);\n  return 0;\n}\n\n",
            "current_name": "print_date_time_00003378",
            "entrypoint": "0x00003378",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "date_time_array",
                "param_1[1]": "minute",
                "param_1[2]": "hour",
                "param_1[3]": "day",
                "param_1[4]": "month",
                "param_1[5]": "year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000033c0": {
            "additional_data": {
                "FUN_00002690": {
                    "1": "get_alarm_info",
                    "3": "get_alarm",
                    "5": "get_alarm_status"
                },
                "FUN_00003378": {
                    "1": "do_alarm_action",
                    "2": "handle_alarm",
                    "3": "process_alarm"
                },
                "FUN_000033c0": {
                    "1": "check_and_get_alarm",
                    "10": "check_alarm_status",
                    "15": "get_alarm_status",
                    "3": "check_alarm"
                },
                "FUN_00004db8": {
                    "1": "print_error_message",
                    "2": "log_alarm_error",
                    "8": "log_error"
                },
                "auStack_2c": {
                    "1": "alarm_status_buffer",
                    "2": "stack_buffer",
                    "3": "data_buffer",
                    "7": "buffer"
                },
                "iVar1": {
                    "1": "error_code",
                    "14": "result",
                    "4": "status"
                }
            },
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_alarm_status_000033c0(void)\n\n{\n  int result;\n  undefined buffer [36];\n  \n  result = FUN_00002690(buffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "get_alarm_status_000033c0",
            "entrypoint": "0x000033c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033c0": "get_alarm_status_000033c0",
                "auStack_2c": "buffer",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000033f4": {
            "additional_data": {
                "FUN_00002654": {
                    "1": "set_time",
                    "2": "set_alarm_value"
                },
                "FUN_0000328c": {
                    "1": "get_data"
                },
                "FUN_000033f4": {
                    "2": "set_alarm_status",
                    "27": "set_alarm"
                },
                "FUN_00004db8": {
                    "1": "log_error_message",
                    "3": "print_error"
                },
                "auStack_2c": {
                    "1": "data_array",
                    "12": "buffer",
                    "2": "alarm_buffer",
                    "3": "alarm_data",
                    "7": "stack_data"
                },
                "iVar1": {
                    "31": "result"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "alarm_value",
                    "3": "input_param",
                    "4": "param",
                    "5": "input_value"
                },
                "param_2": {
                    "1": "alarm_value"
                },
                "param_3": {
                    "1": "flags"
                },
                "uVar2": {
                    "1": "error_flag",
                    "12": "status",
                    "2": "success_flag",
                    "6": "return_value",
                    "8": "success"
                }
            },
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 set_alarm_000033f4(undefined4 input_value)\n\n{\n  int result;\n  undefined4 status;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(input_value,buffer);\n  if (result == 0) {\n    result = FUN_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "current_name": "set_alarm_000033f4",
            "entrypoint": "0x000033f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "auStack_2c": "buffer",
                "iVar1": "result",
                "param_1": "input_value",
                "uVar2": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003444": {
            "additional_data": {
                "F\nUN_00003444": {
                    "1": "get_rtc_time_and_handle_error"
                },
                "FUN_00002624": {
                    "1": "fetch_time_data",
                    "4": "get_time"
                },
                "FUN_00003378": {
                    "1": "handle_time_data",
                    "2": "process_time_data",
                    "4": "process_time"
                },
                "FUN_00003444": {
                    "1": "get_time_and_handle_errors",
                    "2": "get_time_and_log_error",
                    "3": "get_time_and_check_error",
                    "7": "get_rtc_time"
                },
                "FUN_00004db8": {
                    "1": "log_error_message",
                    "2": "log_time_error",
                    "6": "log_error"
                },
                "auStack_2c": {
                    "1": "buffer",
                    "14": "time_buffer",
                    "2": "rtc_time_buffer",
                    "5": "time_data"
                },
                "iVar1": {
                    "2": "error_code",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_rtc_time_00003444(void)\n\n{\n  int error;\n  undefined time_buffer [36];\n  \n  error = FUN_00002624(time_buffer);\n  if (error != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(time_buffer);\n  }\n  return error != 0;\n}\n\n",
            "current_name": "get_rtc_time_00003444",
            "entrypoint": "0x00003444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003444": "get_rtc_time_00003444",
                "auStack_2c": "time_buffer",
                "iVar1": "error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003478": {
            "additional_data": {
                "FILL_ARRAY_AND_SET_TIME": {
                    "1": "set_system_time"
                },
                "FUN_00002600": {
                    "1": "set_time",
                    "2": "set_rtc_time"
                },
                "FUN_0000328c": {
                    "1": "copy_time_to_buffer"
                },
                "FUN_00003478": {
                    "1": "set_and_check_rtc",
                    "18": "set_time",
                    "2": "set_system_time",
                    "3": "set_rtc_time",
                    "4": "set_rtc"
                },
                "FUN_00004db8": {
                    "1": "log_error",
                    "2": "log_error_message"
                },
                "auStack_2c": {
                    "1": "stack_data",
                    "2": "stack_buffer",
                    "5": "time_data",
                    "7": "time_buffer",
                    "8": "buffer"
                },
                "iVar1": {
                    "1": "param_status",
                    "27": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "time_value",
                    "22": "time"
                },
                "param_2": {
                    "1": "buffer_size"
                },
                "uVar2": {
                    "1": "result",
                    "16": "status",
                    "2": "success",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 set_time_00003478(undefined4 time)\n\n{\n  int result;\n  undefined4 status;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(time,buffer);\n  if (result == 0) {\n    result = FUN_00002600(buffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "current_name": "set_time_00003478",
            "entrypoint": "0x00003478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003478": "set_time_00003478",
                "auStack_2c": "buffer",
                "iVar1": "result",
                "param_1": "time",
                "uVar2": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000034c0": {
            "additional_data": {
                "CMD_CLEAR_ALARM": {
                    "1": "clear_alarm"
                },
                "CMD_GET_ALARM": {
                    "1": "get_alarm"
                },
                "CMD_GET_TIME": {
                    "1": "get_time"
                },
                "CMD_POWER_OFF": {
                    "1": "power_off"
                },
                "CMD_POWER_ON": {
                    "1": "power_on"
                },
                "CMD_SET_ALARM": {
                    "1": "set_alarm"
                },
                "CMD_SET_TIME": {
                    "1": "set_time"
                },
                "FUN_000034c0": {
                    "1": "print_command_usage",
                    "15": "print_usage",
                    "3": "print_rtc_command_usage",
                    "8": "print_rtc_usage"
                },
                "FUN_00004db8": {
                    "28": "print_message"
                },
                "param_1": {
                    "1": "error_code",
                    "7": "message"
                },
                "undefined4": {
                    "1": "int"
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nint print_usage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "current_name": "print_usage_000034c0",
            "entrypoint": "0x000034c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003524": {
            "additional_data": {
                "FUN_000026c0": {
                    "1": "handle_clearalarm",
                    "9": "handle_clear_alarm"
                },
                "FUN_000026d8": {
                    "1": "print_power_on",
                    "9": "handle_power_on"
                },
                "FUN_000026e4": {
                    "1": "handle_poweroff",
                    "9": "handle_power_off"
                },
                "FUN_000033c0": {
                    "1": "handle_getalarm",
                    "9": "handle_get_alarm"
                },
                "FUN_000033f4": {
                    "1": "handle_setalarm",
                    "9": "handle_set_alarm"
                },
                "FUN_00003444": {
                    "1": "print_get_time",
                    "9": "handle_get_time"
                },
                "FUN_00003478": {
                    "1": "handle_settime",
                    "9": "handle_set_time"
                },
                "FUN_000034c0": {
                    "1": "print_unsupported_command",
                    "7": "handle_invalid_command"
                },
                "FUN_00003524": {
                    "1": "manage_power",
                    "10": "handle_command",
                    "11": "execute_command",
                    "7": "process_command"
                },
                "FUN_00004c84": {
                    "1": "display_error_message",
                    "7": "print_error_message"
                },
                "FUN_00004e66": {
                    "1": "check_command_validity",
                    "2": "check_command",
                    "4": "execute_command"
                },
                "iVar1": {
                    "1": "result_code",
                    "26": "result",
                    "4": "error_code"
                },
                "param_1": {
                    "1": "alarm_time",
                    "14": "command_type",
                    "2": "num_params",
                    "3": "command",
                    "6": "command_count"
                },
                "param_2": {
                    "1": "arg_ptr",
                    "10": "command_data",
                    "2": "command_ptr",
                    "3": "command",
                    "8": "command_string"
                },
                "param_2 + 4": {
                    "1": "command"
                },
                "param_2 + 8": {
                    "1": "parameters"
                },
                "uVar2": {
                    "1": "is_successful",
                    "11": "success",
                    "2": "result",
                    "3": "status",
                    "5": "return_value",
                    "8": "is_success"
                }
            },
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "calling": [],
            "code": "\nundefined4 execute_command_00003524(int command_type,int command_data)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (command_type < 2) {\n    FUN_000034c0();\n    success = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"setalarm\",8);\n            if ((result == 0) && (command_type == 4)) {\n              FUN_000033f4(command_data + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(command_data + 4),\"settime\",7);\n                if ((result != 0) || (command_type != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(command_data + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(command_data + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    success = 0;\n  }\n  return success;\n}\n\n",
            "current_name": "execute_command_00003524",
            "entrypoint": "0x00003524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003524": "execute_command_00003524",
                "iVar1": "result",
                "param_1": "command_type",
                "param_2": "command_data",
                "uVar2": "success"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003658": {
            "additional_data": {
                "0xf": {
                    "1": "barrier"
                },
                "DataSynchronizationBarrier": {
                    "1": "sync",
                    "2": "synchronize_data",
                    "20": "sync_barrier",
                    "3": "barrier"
                },
                "FUN_00003658": {
                    "1": "endless_loop",
                    "11": "infinite_loop",
                    "2": "wait_forever",
                    "5": "continuous_loop",
                    "9": "run_infinite_loop"
                }
            },
            "called": [],
            "calling": [
                "FUN_00003688"
            ],
            "code": "\nvoid infinite_loop_00003658(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_00003658",
            "entrypoint": "0x00003658",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_00003658": "infinite_loop_00003658"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003688": {
            "additional_data": {
                "FUN_00003658": {
                    "1": "subfunction",
                    "2": "call_sub_function",
                    "8": "perform_initialization"
                },
                "FUN_00003688": {
                    "1": "process",
                    "2": "execute_initial_setup",
                    "4": "initialize",
                    "6": "execute_initialization",
                    "9": "initialize_system"
                }
            },
            "called": [
                "FUN_00003658"
            ],
            "calling": [
                "FUN_00002e9c"
            ],
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "current_name": "initialize_system_00003688",
            "entrypoint": "0x00003688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003694": {
            "additional_data": {
                "&DAT_000077bc": {
                    "1": "data_label1"
                },
                "&DAT_000077d8": {
                    "1": "data_label2"
                },
                "&DAT_000077dc": {
                    "1": "data_label3"
                },
                "&DAT_000077e8": {
                    "1": "data_label4"
                },
                "FUN_00003694": {
                    "1": "display_data",
                    "27": "display_data_object",
                    "3": "display_data_objects"
                },
                "FUN_00003810": {
                    "1": "get_format_string",
                    "2": "get_data_type"
                },
                "FUN_00003918": {
                    "1": "get_character",
                    "2": "get_char_value"
                },
                "FUN_00003e9e": {
                    "1": "format_string",
                    "2": "convert_to_string"
                },
                "FUN_00004c84": {
                    "1": "print",
                    "3": "print_string"
                },
                "FUN_00004db8": {
                    "1": "display_error",
                    "4": "display_error_message"
                },
                "auStack_18": {
                    "1": "output_buffer",
                    "10": "buffer",
                    "2": "stack_array",
                    "4": "string_buffer",
                    "7": "temp_stack"
                },
                "bVar4": {
                    "1": "condition",
                    "15": "is_bit_set",
                    "4": "is_flag_set",
                    "6": "is_set"
                },
                "cVar2": {
                    "1": "is_bit_set",
                    "10": "flag",
                    "2": "flag_char",
                    "3": "bit_value"
                },
                "local_10": {
                    "1": "output_length",
                    "2": "length",
                    "3": "temp_var",
                    "5": "buffer_length",
                    "6": "buffer_size",
                    "9": "string_length"
                },
                "local_9": {
                    "1": "object_index",
                    "2": "current_index",
                    "21": "index",
                    "6": "i"
                },
                "local_a": {
                    "1": "hex_character",
                    "11": "character",
                    "2": "ascii_char"
                },
                "param_1": {
                    "1": "data_obj_address",
                    "12": "data_object",
                    "3": "data_object_ptr",
                    "4": "data_address",
                    "9": "data_object_address"
                },
                "param_2": {
                    "1": "num_data_objects",
                    "2": "data_object_length",
                    "3": "size",
                    "6": "data_object_size",
                    "7": "data_size",
                    "8": "data_length"
                },
                "uVar1": {
                    "1": "data_obj_type",
                    "12": "data_type",
                    "2": "result",
                    "4": "data_format"
                },
                "uVar3": {
                    "1": "type_bit",
                    "19": "bit_mask",
                    "2": "bit_flag",
                    "4": "bitmask"
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "code": "\nvoid display_data_object_00003694(int data_object,byte data_length)\n\n{\n  undefined4 data_type;\n  char flag;\n  uint bit_mask;\n  bool is_bit_set;\n  undefined buffer [8];\n  int string_length;\n  char character;\n  byte index;\n  \n  if ((data_object == 0) || (3 < data_length)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < data_length; index = index + 1) {\n      if (*(byte *)(data_object + 6) < 0x14) {\n        bit_mask = 1 << (uint)*(byte *)(data_object + 6) & 0x8018f;\n        is_bit_set = bit_mask != 0;\n        if (is_bit_set) {\n          bit_mask = 1;\n        }\n        flag = (char)bit_mask;\n        if (!is_bit_set) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(data_object + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (data_length < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(data_object + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(data_object + (uint)index * 2));\n        }\n        else if ((*(char *)(data_object + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object + 7),4)) &&\n                (*(char *)(data_object + 7) < '\\0')) {\n          string_length = FUN_00003e9e(buffer,(int)*(short *)(data_object + (uint)index * 2),\n                                  (int)*(char *)(data_object + 7));\n          buffer[string_length] = 0;\n          FUN_00004c84(&DAT_000077dc,buffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(data_object + (uint)index * 2),\n                       (int)*(char *)(data_object + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(data_object + (uint)index * 2),character);\n      }\n      data_type = FUN_00003810(*(undefined *)(data_object + 6));\n      FUN_00004c84(&DAT_000077e8,data_type);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "display_data_object_00003694",
            "entrypoint": "0x00003694",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "auStack_18": "buffer",
                "bVar4": "is_bit_set",
                "cVar2": "flag",
                "local_10": "string_length",
                "local_9": "index",
                "local_a": "character",
                "param_1": "data_object",
                "param_2": "data_length",
                "uVar1": "data_type",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003810": {
            "additional_data": {
                "FUN_00003810": {
                    "1": "get_constant_value",
                    "18": "get_memory_address",
                    "2": "get_data_address",
                    "3": "get_data_pointer"
                },
                "param_1": {
                    "1": "data_value",
                    "10": "input_value",
                    "11": "input",
                    "5": "value"
                },
                "puVar1": {
                    "1": "data_offset",
                    "11": "result",
                    "2": "data_address",
                    "7": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined * get_memory_address_00003810(undefined input)\n\n{\n  undefined *result;\n  \n  switch(input) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "current_name": "get_memory_address_00003810",
            "entrypoint": "0x00003810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003918": {
            "additional_data": {
                "FUN_00003918": {
                    "1": "convert_param_to_value",
                    "10": "map_param_to_value",
                    "2": "get_char_code",
                    "3": "decode_value"
                },
                "param_1": {
                    "1": "symbol",
                    "11": "input",
                    "3": "input_param",
                    "4": "value"
                },
                "uVar1": {
                    "1": "translated_value",
                    "3": "output",
                    "4": "decoded_value",
                    "5": "result",
                    "7": "mapped_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined4 map_param_to_value_00003918(undefined input)\n\n{\n  undefined4 mapped_value;\n  \n  switch(input) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "current_name": "map_param_to_value_00003918",
            "entrypoint": "0x00003918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "input",
                "uVar1": "mapped_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000039e8": {
            "additional_data": {
                "FUN_000039e8": {
                    "1": "map_byte_to_class",
                    "2": "get_device_type_name",
                    "3": "get_description",
                    "4": "get_device_class_name",
                    "9": "get_class_name"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "device_class",
                    "5": "device_type",
                    "6": "class_code"
                },
                "pcVar1": {
                    "1": "sensor_class_name",
                    "13": "class_name",
                    "2": "class_string",
                    "3": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "code": "\nchar * get_class_name_000039e8(char class_code)\n\n{\n  char *class_name;\n  \n  switch(class_code) {\n  case '\\0':\n    class_name = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    class_name = \"ACT_ANY\";\n    break;\n  case 'B':\n    class_name = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    class_name = \"ACT_SERVO\";\n    break;\n  case 'D':\n    class_name = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    class_name = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    class_name = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    class_name = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    class_name = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    class_name = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    class_name = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    class_name = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    class_name = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    class_name = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    class_name = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    class_name = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    class_name = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    class_name = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    class_name = \"SENSE_UV\";\n    break;\n  case -0x74:\n    class_name = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    class_name = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    class_name = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    class_name = \"SENSE_CO2\";\n    break;\n  default:\n    if (class_code == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    class_name = \"CLASS_UNKNOWN\";\n  }\n  return class_name;\n}\n\n",
            "current_name": "get_class_name_000039e8",
            "entrypoint": "0x000039e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "class_code",
                "pcVar1": "class_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d24": {
            "additional_data": {
                "FUN_00003d24": {
                    "1": "find_first_occurrence",
                    "15": "find_nth_element",
                    "5": "find_element_by_index",
                    "6": "find_element"
                },
                "local_10": {
                    "1": "index",
                    "2": "current_index",
                    "24": "count",
                    "4": "counter"
                },
                "local_c": {
                    "2": "current_item",
                    "26": "current_element",
                    "3": "current_node"
                },
                "param_1": {
                    "1": "num_items",
                    "14": "n",
                    "5": "index",
                    "6": "num_elements"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "current_name": "find_nth_element_00003d24",
            "entrypoint": "0x00003d24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "local_10": "count",
                "local_c": "current_element",
                "param_1": "n"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d64": {
            "additional_data": {
                "FUN_00003d64": {
                    "1": "process_function",
                    "22": "execute_function",
                    "3": "execute_code"
                },
                "param_1": {
                    "1": "action_pointer",
                    "14": "function_pointer",
                    "2": "function_address",
                    "7": "function_ptr"
                },
                "param_2": {
                    "1": "input_argument",
                    "2": "input_param",
                    "3": "parameter",
                    "4": "argument",
                    "7": "param"
                },
                "uVar1": {
                    "23": "return_value",
                    "7": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00002ecc"
            ],
            "code": "\nundefined4 execute_function_00003d64(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_00003d64",
            "entrypoint": "0x00003d64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d94": {
            "additional_data": {
                "*(int *)(param_1 + 0xc) + 4": {
                    "1": "function_ptr"
                },
                "*(undefined4 *)(param_1 + 4)": {
                    "1": "data_param"
                },
                "FUN_00003d94": {
                    "1": "execute_operation",
                    "2": "perform_operation",
                    "24": "execute_function"
                },
                "param_1": {
                    "1": "user_input",
                    "12": "function_pointer",
                    "2": "input_param",
                    "3": "input_value",
                    "6": "function_ptr"
                },
                "param_2": {
                    "1": "secondary_param",
                    "2": "arg",
                    "3": "input_param",
                    "6": "param"
                },
                "uVar1": {
                    "13": "result",
                    "18": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000305c"
            ],
            "code": "\nundefined4 execute_function_00003d94(int function_pointer,undefined4 argument)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(undefined4 *)(function_pointer + 4),argument);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_00003d94",
            "entrypoint": "0x00003d94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "function_pointer",
                "param_2": "argument",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "additional_data": {
                "FUN_00003dc4": {
                    "1": "calculate_digits_and_fill_array",
                    "19": "count_digits",
                    "2": "calculate_digit_count",
                    "3": "calculate_digits"
                },
                "local_10": {
                    "1": "digit",
                    "11": "multiplier",
                    "2": "power",
                    "6": "power_of_ten",
                    "8": "base"
                },
                "local_14": {
                    "1": "digit_ptr",
                    "2": "output_buffer",
                    "3": "current_char",
                    "4": "string_ptr",
                    "6": "current_digit"
                },
                "local_20": {
                    "1": "number_copy",
                    "15": "remainder",
                    "2": "temp_number",
                    "3": "remaining",
                    "6": "remaining_number"
                },
                "local_c": {
                    "1": "digits_count",
                    "2": "num_of_digits",
                    "22": "digit_count",
                    "6": "num_digits"
                },
                "param_1": {
                    "1": "num_array",
                    "2": "base_address",
                    "7": "offset"
                },
                "param_2": {
                    "1": "base",
                    "2": "value",
                    "23": "number",
                    "3": "num"
                }
            },
            "called": [],
            "calling": [
                "FUN_00003e58"
            ],
            "code": "\nint count_digits_00003dc4(int offset,uint number)\n\n{\n  uint remainder;\n  char *current_digit;\n  uint multiplier;\n  int digit_count;\n  \n  digit_count = 1;\n  if (number < 1000000000) {\n    for (multiplier = 10; multiplier <= number; multiplier = multiplier * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (offset != 0) {\n    current_digit = (char *)(digit_count + offset);\n    remainder = number;\n    do {\n      current_digit = current_digit + -1;\n      *current_digit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "current_name": "count_digits_00003dc4",
            "entrypoint": "0x00003dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "local_10": "multiplier",
                "local_14": "current_digit",
                "local_20": "remainder",
                "local_c": "digit_count",
                "param_1": "offset",
                "param_2": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e58": {
            "additional_data": {
                "FUN_00003dc4": {
                    "1": "process_string_and_number",
                    "2": "process_number",
                    "5": "calculate_sum"
                },
                "FUN_00003e58": {
                    "1": "reverse_and_calculate",
                    "2": "convert_integer_to_negative",
                    "4": "reverse_and_add",
                    "6": "convert_to_negative"
                },
                "iVar1": {
                    "1": "converted_integer",
                    "12": "result"
                },
                "local_14": {
                    "1": "temp_str",
                    "2": "updated_buffer",
                    "3": "modified_input_string",
                    "4": "new_str"
                },
                "local_18": {
                    "1": "num_elements_clone",
                    "2": "abs_number",
                    "3": "abs_input_number",
                    "5": "absolute_value"
                },
                "param_1": {
                    "1": "input_str",
                    "2": "string_ptr",
                    "3": "string_pointer",
                    "4": "string",
                    "5": "input_array",
                    "8": "input_string"
                },
                "param_2": {
                    "1": "size",
                    "2": "length",
                    "3": "input_int",
                    "4": "num",
                    "8": "number"
                }
            },
            "called": [
                "FUN_00003dc4"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nint convert_to_negative_00003e58(undefined *input_string,int number)\n\n{\n  int result;\n  int absolute_value;\n  undefined *modified_array;\n  \n  absolute_value = number;\n  modified_array = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      modified_array = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_value = -number;\n  }\n  result = FUN_00003dc4(modified_array,absolute_value);\n  return -(number >> 0x1f) + result;\n}\n\n",
            "current_name": "convert_to_negative_00003e58",
            "entrypoint": "0x00003e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e58": "convert_to_negative_00003e58",
                "iVar1": "result",
                "local_14": "modified_array",
                "local_18": "absolute_value",
                "param_1": "input_string",
                "param_2": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "additional_data": {
                "FUN_00003e9e": {
                    "1": "perform_operation",
                    "10": "process_data",
                    "4": "execute_function"
                },
                "FUN_00003ec4": {
                    "1": "calculate_result",
                    "2": "process_sub_function",
                    "3": "perform_operation",
                    "4": "reverse_data"
                },
                "param_1": {
                    "1": "execution_status",
                    "11": "input",
                    "2": "input_param",
                    "3": "input_data",
                    "4": "data"
                },
                "param_2": {
                    "1": "input_2",
                    "14": "value",
                    "2": "input_value",
                    "3": "arg2"
                },
                "param_3": {
                    "1": "offset_param",
                    "2": "flags",
                    "3": "arg3",
                    "4": "config"
                },
                "uVar1": {
                    "1": "output",
                    "7": "result"
                }
            },
            "called": [
                "FUN_00003ec4"
            ],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined4 process_data_00003e9e(undefined4 input,short value,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)value,config);\n  return result;\n}\n\n",
            "current_name": "process_data_00003e9e",
            "entrypoint": "0x00003e9e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "value",
                "param_3": "config",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "additional_data": {
                "FUN_00000f04": {
                    "1": "handle_assertion_failure"
                },
                "FUN_00003e58": {
                    "1": "convert_integer_to_string"
                },
                "FUN_00003ec4": {
                    "1": "convert_integer_to_string",
                    "2": "calculate_decimal_length",
                    "3": "convert_number_to_string"
                },
                "FUN_00003ff4": {
                    "1": "convert_integer_to_string_with_padding"
                },
                "FUN_00004622": {
                    "1": "pad_output_buffer_with_zeros"
                },
                "iVar1": {
                    "1": "integer_result",
                    "11": "result",
                    "2": "length"
                },
                "int param_3": {
                    "1": "num_digits"
                },
                "local_10": {
                    "1": "remaining_number",
                    "28": "remainder"
                },
                "local_c": {
                    "1": "length_output_string",
                    "2": "total_characters",
                    "3": "output_length",
                    "4": "total_length",
                    "6": "length"
                },
                "param_1": {
                    "1": "result_string",
                    "10": "output_string",
                    "11": "output_buffer",
                    "2": "str",
                    "4": "output"
                },
                "param_2": {
                    "1": "base",
                    "10": "input_number",
                    "13": "number",
                    "3": "input_value"
                },
                "param_3": {
                    "1": "length",
                    "2": "number_of_digits",
                    "3": "precision",
                    "6": "decimal_places",
                    "8": "base"
                },
                "uVar2": {
                    "1": "decimal_result",
                    "2": "conversion_result",
                    "3": "decimal_length",
                    "5": "decimal_part"
                },
                "uVar3": {
                    "1": "integer_part",
                    "16": "quotient",
                    "6": "divisor"
                },
                "uint param_2": {
                    "1": "input_number"
                },
                "uint uVar3": {
                    "1": "division_result"
                },
                "undefined *param_1": {
                    "1": "output_string"
                },
                "undefined4 uVar2": {
                    "1": "subfunc_return_value2"
                }
            },
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "calling": [
                "FUN_00003e9e"
            ],
            "code": "\nint convert_number_to_string_00003ec4(undefined *output_buffer,uint number,int base)\n\n{\n  int result;\n  undefined4 decimal_part;\n  uint quotient;\n  int remainder;\n  int length;\n  \n  if (base + 7 < 0 != SCARRY4(base,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  length = 0;\n  if (base == 0) {\n    length = FUN_00003e58(output_buffer,number);\n  }\n  else if (base < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + base * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + base * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      length = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      result = FUN_00003e58(0,quotient);\n      length = result + 1 + length;\n    }\n    else {\n      result = FUN_00003e58(output_buffer + length,quotient);\n      result = length + result;\n      length = result + 1;\n      output_buffer[result] = 0x2e;\n      decimal_part = FUN_00003e58(output_buffer + length,remainder);\n      FUN_00003ff4(output_buffer + length,decimal_part,-base,0x30);\n    }\n    length = -base + length;\n  }\n  else {\n    length = FUN_00003e58(output_buffer,number);\n    if (output_buffer != (undefined *)0x0) {\n      FUN_00004622(output_buffer + length,0x30,base);\n    }\n    length = base + length;\n  }\n  return length;\n}\n\n",
            "current_name": "convert_number_to_string_00003ec4",
            "entrypoint": "0x00003ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ec4": "convert_number_to_string_00003ec4",
                "iVar1": "result",
                "local_10": "remainder",
                "local_c": "length",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "decimal_part",
                "uVar3": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "additional_data": {
                "FUN_00003ff4": {
                    "1": "calculate_smallest_value",
                    "2": "calculate_updated_value",
                    "3": "calculate_new_value",
                    "4": "calculate_minimum"
                },
                "FUN_000045ee": {
                    "1": "copy_data",
                    "6": "calculate_difference"
                },
                "FUN_00004622": {
                    "1": "make_adjustment",
                    "2": "process_data",
                    "5": "perform_operation"
                },
                "param_1": {
                    "1": "start_offset",
                    "2": "difference",
                    "5": "offset",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "value2",
                    "14": "start_value",
                    "2": "current_value"
                },
                "param_3": {
                    "1": "end_index",
                    "14": "end_value",
                    "2": "end"
                },
                "param_4": {
                    "1": "unknown_param",
                    "13": "undefined_param",
                    "2": "value4",
                    "3": "undefined",
                    "4": "data"
                },
                "uVar1": {
                    "1": "result_index",
                    "2": "max_value",
                    "3": "minimum_value",
                    "5": "updated_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nuint calculate_minimum_00003ff4(int input_value,uint start_value,uint end_value,undefined undefined_param)\n\n{\n  uint result;\n  \n  result = start_value;\n  if ((start_value < end_value) && (result = end_value, input_value != 0)) {\n    FUN_000045ee((end_value - start_value) + input_value,input_value,start_value);\n    FUN_00004622(input_value,undefined_param,end_value - start_value);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_minimum_00003ff4",
            "entrypoint": "0x00003ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ff4": "calculate_minimum_00003ff4",
                "param_1": "input_value",
                "param_2": "start_value",
                "param_3": "end_value",
                "param_4": "undefined_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004042": {
            "additional_data": {
                "FUN_00004042": {
                    "1": "initialize_memory",
                    "10": "initialize_function",
                    "11": "initialize_data",
                    "2": "initialize_counter"
                },
                "FUN_00004f84": {
                    "1": "process_bytes",
                    "19": "process_data",
                    "2": "copy_bytes",
                    "3": "copy_data_to_buffer",
                    "4": "copy_data"
                },
                "param_1": {
                    "1": "input_data",
                    "19": "data",
                    "2": "input_param",
                    "3": "buffer"
                },
                "param_2": {
                    "1": "byte_array",
                    "2": "destination_data",
                    "3": "output_data",
                    "4": "buffer"
                },
                "param_3": {
                    "1": "array_size",
                    "11": "data_size",
                    "2": "output_size",
                    "4": "size",
                    "5": "length"
                },
                "undefined4": {
                    "1": "counter"
                }
            },
            "called": [
                "FUN_00004f84"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nvoid initialize_data_00004042(counter data)\n\n{\n  FUN_00004f84(data,0,10);\n  return;\n}\n\n",
            "current_name": "initialize_data_00004042",
            "entrypoint": "0x00004042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004042": "initialize_data_00004042",
                "param_1": "data",
                "undefined4": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000404c": {
            "additional_data": {
                "FUN_0000404c": {
                    "1": "decompile_and_improve",
                    "2": "decode_and_process_data",
                    "8": "process_data"
                },
                "FUN_00004b34": {
                    "1": "clear_memory"
                },
                "bVar9": {
                    "1": "temp_var8",
                    "12": "is_zero",
                    "3": "bool_flag",
                    "4": "bool_var",
                    "6": "flag"
                },
                "iVar1": {
                    "1": "decoded_length",
                    "10": "temp_var1",
                    "2": "offset",
                    "3": "status"
                },
                "iVar2": {
                    "1": "temp_var2"
                },
                "iVar5": {
                    "1": "config_offset",
                    "2": "temp_var_3",
                    "3": "temp_var",
                    "4": "temp3",
                    "6": "temp_var5"
                },
                "iVar7": {
                    "1": "temp_int3",
                    "2": "count",
                    "3": "temp_var4",
                    "4": "temp4",
                    "5": "temp_var7"
                },
                "iVarHolder1": {
                    "1": "temp_var_holder1"
                },
                "iVarHolder2": {
                    "1": "temp_var_holder2"
                },
                "param_1": {
                    "1": "output_buffer",
                    "15": "input_array",
                    "2": "data_buffer",
                    "3": "data_array",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "config_data",
                    "2": "parameters",
                    "3": "state_array",
                    "5": "info_array"
                },
                "pcVar6": {
                    "1": "callback_func",
                    "15": "function_ptr",
                    "3": "callback_function",
                    "9": "function_pointer"
                },
                "piVar2": {
                    "1": "var2",
                    "2": "temp_pointer",
                    "3": "temp2",
                    "5": "temp_ptr",
                    "8": "temp_var2"
                },
                "temp_var10": {
                    "1": "temp_var10"
                },
                "temp_var11": {
                    "1": "temp_var11"
                },
                "temp_var12": {
                    "1": "temp_var12"
                },
                "temp_var13": {
                    "1": "temp_var13"
                },
                "temp_var14": {
                    "1": "temp_var14"
                },
                "temp_var15": {
                    "1": "temp_var15"
                },
                "uVar3": {
                    "1": "u_var_1",
                    "2": "ushort_var",
                    "3": "value",
                    "5": "ushort_value",
                    "6": "temp_var3"
                },
                "uVar4": {
                    "1": "u_var4",
                    "2": "ushort_var2",
                    "5": "temp_var4"
                },
                "uVar8": {
                    "1": "temp_var_5",
                    "2": "uint_var",
                    "3": "temp_var",
                    "5": "temp_var8"
                },
                "uVar9": {
                    "1": "bool_value"
                },
                "uVarHolder": {
                    "1": "temp_var_holder3"
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "code": "\nundefined4 process_data_0000404c(uint *input_array,int *info_array)\n\n{\n  int temp_var1;\n  int *temp_var2;\n  uint temp_var3;\n  ushort flags;\n  int temp_var5;\n  code *function_ptr;\n  int temp_var7;\n  uint temp_var8;\n  bool is_zero;\n  \n  flags = *(ushort *)(info_array + 3);\n  temp_var3 = (uint)flags;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var1 = info_array[4];\n    if (temp_var1 != 0) {\n      temp_var5 = temp_var3 << 0x1e;\n      is_zero = temp_var5 == 0;\n      temp_var7 = *info_array;\n      if (is_zero) {\n        temp_var5 = info_array[5];\n      }\n      *info_array = temp_var1;\n      if (!is_zero) {\n        temp_var5 = 0;\n      }\n      info_array[2] = temp_var5;\n      for (temp_var7 = temp_var7 - temp_var1; 0 < temp_var7; temp_var7 = temp_var7 - temp_var5) {\n        temp_var5 = (*(code *)info_array[10])(input_array,info_array[8],temp_var1,temp_var7);\n        if (temp_var5 < 1) {\n          *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var1 = temp_var1 + temp_var5;\n      }\n    }\n  }\n  else {\n    if ((info_array[1] < 1) && (info_array[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)info_array[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp_var8 = *input_array;\n    *input_array = 0;\n    if ((flags & 0x1000) == 0) {\n      temp_var1 = (*function_ptr)(input_array,info_array[8],temp_var3 & 0x1000,1);\n      if ((temp_var1 == -1) && (temp_var3 = *input_array, temp_var3 != 0)) {\n        if ((temp_var3 == 0x1d) || (temp_var3 == 0x16)) {\n          *input_array = temp_var8;\n          return 0;\n        }\n        flags = *(ushort *)(info_array + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var1 = info_array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_array + 3) << 0x1d) < 0) &&\n       (temp_var1 = temp_var1 - info_array[1], info_array[0xd] != 0)) {\n      temp_var1 = temp_var1 - info_array[0x10];\n    }\n    temp_var1 = (*(code *)info_array[0xb])(input_array,info_array[8],temp_var1,0);\n    flags = *(ushort *)(info_array + 3);\n    if ((temp_var1 == -1) &&\n       ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_array + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info_array[1] = 0;\n    *info_array = info_array[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((temp_var1 != -1 || (*input_array == 0)))) {\n      info_array[0x15] = temp_var1;\n    }\n    temp_var2 = (int *)info_array[0xd];\n    *input_array = temp_var8;\n    if (temp_var2 != (int *)0x0) {\n      if (temp_var2 != info_array + 0x11) {\n        FUN_00004b34(input_array);\n      }\n      info_array[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0000404c",
            "entrypoint": "0x0000404c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "bVar9": "is_zero",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "iVar5": "temp_var5",
                "iVar7": "temp_var7",
                "param_1": "input_array",
                "param_2": "info_array",
                "pcVar6": "function_ptr",
                "piVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "flags",
                "uVar8": "temp_var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004158": {
            "additional_data": {
                "&DAT_00007998": {
                    "1": "array_marker3"
                },
                "&DAT_000079b8": {
                    "1": "array_marker1"
                },
                "&DAT_000079d8": {
                    "1": "array_marker2"
                },
                "DAT_00007998": {
                    "1": "config3"
                },
                "DAT_000079b8": {
                    "1": "dat_a"
                },
                "DAT_000079d8": {
                    "1": "config2"
                },
                "FUNC_0000404c": {
                    "1": "perform_action",
                    "2": "process_data"
                },
                "FUNC_000045e8": {
                    "1": "process_data_externally",
                    "2": "reverse_func1"
                },
                "FUNC_000045ec": {
                    "1": "cleanup_action",
                    "2": "reverse_func2"
                },
                "FUN_0000404c": {
                    "1": "calculate_result",
                    "2": "process_data"
                },
                "FUN_00004158": {
                    "1": "check_and_execute_task",
                    "16": "process_data",
                    "3": "process_function",
                    "5": "check_and_process_data"
                },
                "FUN_000042a4": {
                    "1": "process_header",
                    "2": "handle_case1",
                    "3": "perform_action"
                },
                "FUN_000045e8": {
                    "1": "process_data_internally"
                },
                "FUN_000045ec": {
                    "1": "perform_action2"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "2": "input",
                    "4": "input_data",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "config_ptr",
                    "3": "output_data",
                    "6": "data_array"
                },
                "uVar1": {
                    "15": "return_value"
                }
            },
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "code": "\nundefined4 process_data_00004158(int input_param,undefined4 *data_array)\n\n{\n  undefined4 result;\n  \n  if (data_array[4] != 0) {\n    if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (data_array == &DAT_000079b8) {\n      data_array = *(undefined4 **)(input_param + 4);\n    }\n    else if (data_array == (undefined4 *)&DAT_000079d8) {\n      data_array = *(undefined4 **)(input_param + 8);\n    }\n    else if (data_array == (undefined4 *)&DAT_00007998) {\n      data_array = *(undefined4 **)(input_param + 0xc);\n    }\n    if (*(short *)(data_array + 3) != 0) {\n      if ((-1 < (int)(data_array[0x19] << 0x1f)) && (-1 < (int)*(short *)(data_array + 3) << 0x16)) {\n        FUNC_000045e8(data_array[0x16]);\n      }\n      result = FUN_0000404c(input_param,data_array);\n      if ((int)(data_array[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(data_array + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(data_array[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00004158",
            "entrypoint": "0x00004158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "input_param",
                "param_2": "data_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041d0": {
            "additional_data": {
                "FUN_00004158": {
                    "1": "perform_relocation"
                },
                "FUN_000041d0": {
                    "1": "process_binary",
                    "15": "process_relocations",
                    "2": "process_relocation_table",
                    "5": "process_relocation_entries"
                },
                "iVar2": {
                    "1": "relocation_entry_count",
                    "2": "num_relocations",
                    "3": "counter",
                    "6": "count"
                },
                "iVar4": {
                    "1": "current_value",
                    "2": "entry",
                    "3": "offset",
                    "5": "current_offset"
                },
                "iVar6": {
                    "1": "num_relocations",
                    "2": "remaining_relocations",
                    "3": "inner_loop_counter"
                },
                "param_1": {
                    "1": "section_index",
                    "11": "base_address",
                    "2": "flag",
                    "3": "input_param",
                    "5": "address"
                },
                "param_2": {
                    "1": "rel_array",
                    "2": "relocation_offset",
                    "3": "base_address",
                    "5": "offset"
                },
                "param_3": {
                    "1": "relocation_section_size",
                    "2": "unused_param2",
                    "4": "size",
                    "6": "param_3"
                },
                "pdVar3": {
                    "1": "ptr",
                    "2": "entry",
                    "3": "rel_table",
                    "4": "relocation_entry"
                },
                "puVar7": {
                    "1": "section_base",
                    "2": "str_table",
                    "4": "data_pointer",
                    "5": "symbol_table"
                },
                "uVar1": {
                    "1": "return_value",
                    "29": "result"
                },
                "uVar5": {
                    "1": "relocation_result",
                    "12": "combined_result",
                    "2": "output",
                    "6": "total_result"
                }
            },
            "called": [
                "FUN_00004158"
            ],
            "calling": [
                "FUN_00002e48"
            ],
            "code": "\nuint process_relocations_000041d0(int base_address,undefined4 offset,undefined4 param_3)\n\n{\n  uint result;\n  int count;\n  dword *rel_array;\n  int current_offset;\n  uint combined_result;\n  int inner_loop_counter;\n  undefined4 *symbol_table;\n  \n  if (base_address == 0) {\n    symbol_table = &DAT_000079f8;\n    rel_array = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      inner_loop_counter = rel_array[1];\n      current_offset = rel_array[2];\n      while (inner_loop_counter = inner_loop_counter + -1, -1 < inner_loop_counter) {\n        if ((1 < *(ushort *)(current_offset + 0xc)) && (count = *(short *)(current_offset + 0xe) + 1, count != 0)) {\n          result = FUN_00004158(0x1fff0284,current_offset,param_3,count,symbol_table);\n          combined_result = combined_result | result;\n        }\n        current_offset = current_offset + 0x68;\n      }\n      rel_array = (dword *)*rel_array;\n    } while (rel_array != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,base_address);\n  return combined_result;\n}\n\n",
            "current_name": "process_relocations_000041d0",
            "entrypoint": "0x000041d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "iVar2": "count",
                "iVar4": "current_offset",
                "iVar6": "inner_loop_counter",
                "param_1": "base_address",
                "param_2": "offset",
                "pdVar3": "rel_array",
                "puVar7": "symbol_table",
                "uVar1": "result",
                "uVar5": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041f4": {
            "additional_data": {
                "FUN_000041f4": {
                    "1": "initialize_param_array",
                    "2": "initialize_memory",
                    "3": "initialize_function",
                    "5": "initialize_parameters",
                    "6": "initialize_data"
                },
                "FUN_00004622": {
                    "1": "fill_memory_with_zeros",
                    "2": "fill_memory",
                    "7": "initialize_array",
                    "9": "initialize_memory"
                },
                "LAB_00004e4a_1": {
                    "2": "some_label"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "10": "memory",
                    "2": "output_array",
                    "7": "array"
                },
                "param_2": {
                    "1": "start_value",
                    "15": "value",
                    "2": "init_value",
                    "4": "initial_value",
                    "5": "value1"
                },
                "param_3": {
                    "1": "block_size",
                    "11": "size",
                    "12": "length",
                    "5": "value2"
                }
            },
            "called": [
                "FUN_00004622"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid initialize_data_000041f4(undefined4 *memory,undefined2 value,undefined2 length)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = length;\n  memory[6] = 0;\n  FUN_00004622(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[0xb] = 0x4e27;\n  memory[8] = memory;\n  memory[0xc] = &some_label;\n  return;\n}\n\n",
            "current_name": "initialize_data_000041f4",
            "entrypoint": "0x000041f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041f4": "initialize_data_000041f4",
                "LAB_00004e4a_1": "some_label",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004248": {
            "additional_data": {
                "FUN_00004248": {
                    "1": "initialize_data_struct",
                    "21": "initialize_data_structure",
                    "4": "initialize_data"
                },
                "FUN_00004622": {
                    "1": "memset_data",
                    "12": "initialize_memory"
                },
                "FUN_00004bd0": {
                    "14": "allocate_memory"
                },
                "iVar2": {
                    "1": "size",
                    "2": "adjusted_size",
                    "23": "offset",
                    "4": "index"
                },
                "param_1": {
                    "1": "param1",
                    "11": "data",
                    "2": "start_address",
                    "3": "data_pointer",
                    "7": "input_data"
                },
                "param_2": {
                    "1": "initial_value",
                    "16": "size",
                    "2": "arg2",
                    "3": "num_elements",
                    "6": "count"
                },
                "param_3": {
                    "1": "param3",
                    "2": "size"
                },
                "param_4": {
                    "1": "param4",
                    "2": "value2"
                },
                "puVar1": {
                    "1": "ptr_to_data",
                    "2": "result_pointer",
                    "3": "result",
                    "4": "ptr"
                }
            },
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nundefined4 * initialize_data_structure_00004248(undefined4 data,int size)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  ptr = (undefined4 *)FUN_00004bd0(data,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = size;\n    ptr[2] = ptr + 3;\n    FUN_00004622(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "current_name": "initialize_data_structure_00004248",
            "entrypoint": "0x00004248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "iVar2": "offset",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004274": {
            "additional_data": {
                "FUNC_000045e8": {
                    "1": "perform_initialization",
                    "21": "process_data"
                },
                "FUN_00004274": {
                    "1": "initialize_memory",
                    "2": "initialize_data_structures",
                    "23": "initialize_data"
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid initialize_data_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "initialize_data_00004274",
            "entrypoint": "0x00004274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004280": {
            "additional_data": {
                "FUNC_000045ec": {
                    "1": "perform_initialization",
                    "24": "process_data"
                },
                "FUN_00004280": {
                    "1": "initialize_device",
                    "2": "initialize_data_structure",
                    "26": "initialize_data"
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid initialize_data_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "initialize_data_00004280",
            "entrypoint": "0x00004280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000428c": {
            "additional_data": {
                "0x1fff0de7": {
                    "1": "data_packet",
                    "2": "input_value"
                },
                "FUNC_000045e8": {
                    "1": "perform_initialization",
                    "2": "write_data_to_memory",
                    "3": "set_memory_value"
                },
                "FUN_0000428c": {
                    "1": "initialize_function",
                    "2": "initialize_sensor",
                    "5": "initialize_data",
                    "6": "initialize_system",
                    "9": "initialize_memory"
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid initialize_memory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "initialize_memory_0000428c",
            "entrypoint": "0x0000428c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000042a4": {
            "additional_data": {
                "&DAT_0000423d": {
                    "1": "constant_data"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "data_struct.flag"
                },
                "*(undefined4 *)(param_1 + 0x18)": {
                    "1": "data_struct.flag"
                },
                "*(undefined4 *)(param_1 + 0x48)": {
                    "1": "data_struct.ptr1"
                },
                "*(undefined4 *)(param_1 + 0x4c)": {
                    "1": "data_struct.ptr2"
                },
                "*(undefined4 *)(param_1 + 0x50)": {
                    "1": "data_struct.ptr3"
                },
                "*(undefined4 *)(param_1 + 0xc)": {
                    "1": "data_struct.ptr3"
                },
                "*(undefined4 *)(param_1 + 4)": {
                    "1": "data_struct.ptr1"
                },
                "*(undefined4 *)(param_1 + 8)": {
                    "1": "data_struct.ptr2"
                },
                "0x18": {
                    "1": "offset"
                },
                "0x1fff0284": {
                    "1": "constant_value"
                },
                "0x1fff0de7": {
                    "1": "constant_value"
                },
                "0x28": {
                    "1": "data_offset"
                },
                "0x48": {
                    "1": "first_value_offset"
                },
                "0x4c": {
                    "1": "second_value_offset"
                },
                "0x50": {
                    "1": "third_value_offset"
                },
                "FUNC_000045ec": {
                    "1": "execute_operation",
                    "2": "finalize_process",
                    "3": "finalize_function",
                    "4": "perform_action",
                    "5": "execute_function"
                },
                "FUN_000041f4": {
                    "1": "set_function_value",
                    "2": "set_values",
                    "3": "set_configuration",
                    "5": "set_param"
                },
                "FUN_0000428c": {
                    "1": "initialize_foo",
                    "2": "perform_initialization",
                    "3": "preliminary_setup",
                    "4": "initialize"
                },
                "FUN_000042a4": {
                    "1": "initialize_and_configure",
                    "13": "initialize_data",
                    "2": "initialize_parameters",
                    "3": "initialize_params",
                    "9": "initialize_function"
                },
                "FUN_00004314": {
                    "1": "initialize_sub_function",
                    "2": "retrieve_value",
                    "3": "process_data",
                    "9": "allocate_memory"
                },
                "FUN_000045ec": {
                    "1": "finalize_process"
                },
                "param_1": {
                    "1": "context",
                    "2": "input_param",
                    "3": "param",
                    "5": "function_parameter",
                    "6": "data_pointer"
                },
                "param_1 + 0x18": {
                    "1": "flag_value"
                },
                "param_1 + 0x28": {
                    "1": "data_pointer"
                },
                "param_1 + 0x48": {
                    "1": "var1_address"
                },
                "param_1 + 0x4c": {
                    "1": "var2_address"
                },
                "param_1 + 0x50": {
                    "1": "var3_address"
                },
                "param_1 + 0xc": {
                    "1": "value3_address"
                },
                "param_1 + 4": {
                    "1": "data_struct.ptr1"
                },
                "param_1 + 8": {
                    "1": "data_struct.ptr2"
                },
                "param_1 == 0x1fff0284": {
                    "1": "is_flag_set"
                },
                "param_2": {
                    "1": "value1"
                },
                "param_3": {
                    "1": "param3"
                },
                "uVar1": {
                    "1": "initialize_value",
                    "2": "status",
                    "5": "default_value",
                    "6": "return_value"
                }
            },
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "code": "\nvoid initialize_data_000042a4(int data_pointer)\n\n{\n  undefined4 return_value;\n  \n  FUN_0000428c();\n  if (*(int *)(data_pointer + 0x18) == 0) {\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    return_value = 0x1fff0284;\n    *(undefined **)(data_pointer + 0x28) = &DAT_0000423d;\n    if (data_pointer == 0x1fff0284) {\n      return_value = 1;\n    }\n    if (data_pointer == 0x1fff0284) {\n      *(undefined4 *)(data_pointer + 0x18) = return_value;\n    }\n    return_value = FUN_00004314(data_pointer);\n    *(undefined4 *)(data_pointer + 4) = return_value;\n    return_value = FUN_00004314(data_pointer);\n    *(undefined4 *)(data_pointer + 8) = return_value;\n    return_value = FUN_00004314(data_pointer);\n    *(undefined4 *)(data_pointer + 0xc) = return_value;\n    FUN_000041f4(*(undefined4 *)(data_pointer + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(data_pointer + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(data_pointer + 0xc),0x12,2);\n    *(undefined4 *)(data_pointer + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "initialize_data_000042a4",
            "entrypoint": "0x000042a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "data_pointer",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004314": {
            "additional_data": {
                "*pdVar4": {
                    "1": "next_relocation_info"
                },
                "0": {
                    "1": "zero"
                },
                "0x1fff0284": {
                    "1": "constant_value"
                },
                "0xffff0001": {
                    "1": "error_value"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_table",
                    "2": "relocation_array",
                    "5": "rel_array"
                },
                "FUNC_000045e4": {
                    "1": "process_element",
                    "4": "process_data"
                },
                "FUNC_00004622": {
                    "1": "set_memory"
                },
                "FUN_00004248": {
                    "1": "allocate_memory_block",
                    "2": "allocate_memory"
                },
                "FUN_00004274": {
                    "1": "initialize_rel_array",
                    "2": "initialize_data",
                    "6": "initialize"
                },
                "FUN_00004280": {
                    "1": "cleanup_function",
                    "8": "cleanup"
                },
                "FUN_000042a4": {
                    "1": "print_error",
                    "8": "handle_error"
                },
                "FUN_00004314": {
                    "1": "process_relocation",
                    "2": "process_relocation_entries",
                    "5": "process_relocations"
                },
                "FUN_00004622": {
                    "1": "initialize_value",
                    "2": "initialize_memory",
                    "3": "initialize_data"
                },
                "dVar1": {
                    "1": "new_index",
                    "12": "result",
                    "2": "new_entry",
                    "3": "return_value"
                },
                "iVar2": {
                    "1": "iteration_count",
                    "2": "num_relocations",
                    "4": "num_iterations",
                    "9": "count"
                },
                "param_1": {
                    "1": "parameters",
                    "2": "result",
                    "3": "param",
                    "5": "param_array",
                    "6": "result_array"
                },
                "param_2": {
                    "1": "start",
                    "2": "size"
                },
                "param_3": {
                    "4": "length"
                },
                "pdVar4": {
                    "1": "ptr_info_array",
                    "2": "relocation_info",
                    "4": "current_rel_info"
                },
                "puVar3": {
                    "1": "entry",
                    "2": "ptr",
                    "3": "current_pointer",
                    "6": "current_element"
                }
            },
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nundefined4 * process_relocations_00004314(undefined4 *input_array)\n\n{\n  dword result;\n  int count;\n  undefined4 *current_element;\n  dword *current_rel_info;\n  \n  FUN_00004274();\n  if (rel_array[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  current_rel_info = &rel_array[0x19].r_info;\n  do {\n    count = current_rel_info[1];\n    current_element = (undefined4 *)current_rel_info[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(current_element + 3) == 0) {\n        current_element[3] = 0xffff0001;\n        current_element[0x19] = 0;\n        FUNC_000045e4(current_element + 0x16);\n        FUN_00004280();\n        current_element[1] = 0;\n        current_element[2] = 0;\n        current_element[4] = 0;\n        current_element[5] = 0;\n        *current_element = 0;\n        current_element[6] = 0;\n        FUN_00004622(current_element + 0x17,0,8);\n        current_element[0xd] = 0;\n        current_element[0xe] = 0;\n        current_element[0x12] = 0;\n        current_element[0x13] = 0;\n        return current_element;\n      }\n      current_element = current_element + 0x1a;\n    }\n    if (*current_rel_info == 0) {\n      result = FUN_00004248(input_array,4);\n      *current_rel_info = result;\n      if (result == 0) {\n        FUN_00004280();\n        *input_array = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    current_rel_info = (dword *)*current_rel_info;\n  } while( true );\n}\n\n",
            "current_name": "process_relocations_00004314",
            "entrypoint": "0x00004314",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004314": "process_relocations_00004314",
                "dVar1": "result",
                "iVar2": "count",
                "param_1": "input_array",
                "pdVar4": "current_rel_info",
                "puVar3": "current_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000043a0": {
            "additional_data": {
                "FUN_000043a0": {
                    "1": "calculate_checksum",
                    "13": "process_data"
                },
                "iVar3": {
                    "1": "array_index",
                    "2": "offset",
                    "5": "inner_var1"
                },
                "iVar5": {
                    "1": "size_counter",
                    "2": "inner_loop_counter",
                    "3": "counter",
                    "4": "remaining_iterations",
                    "5": "inner_var2",
                    "7": "count"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "base_address",
                    "2": "input_offset",
                    "3": "starting_address",
                    "4": "start_address"
                },
                "param_2": {
                    "1": "comparison_function",
                    "16": "callback_function",
                    "2": "callback_func",
                    "4": "callback",
                    "6": "function_pointer"
                },
                "piVar2": {
                    "1": "current_code_entry",
                    "2": "ptr_array",
                    "3": "current_pointer",
                    "4": "pointer"
                },
                "uVar1": {
                    "1": "callback_return_value",
                    "18": "result",
                    "2": "function_result",
                    "4": "callback_result"
                },
                "uVar4": {
                    "1": "checksum",
                    "3": "final_result",
                    "6": "combined_results",
                    "8": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00006768"
            ],
            "code": "\nuint process_data_000043a0(int base_address,code *callback_function)\n\n{\n  uint result;\n  int *pointer;\n  int inner_var1;\n  uint result;\n  int count;\n  \n  pointer = (int *)(base_address + 0x48);\n  result = 0;\n  do {\n    count = pointer[1];\n    inner_var1 = pointer[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(inner_var1 + 0xc)) && (*(short *)(inner_var1 + 0xe) != -1)) {\n        result = (*callback_function)(inner_var1);\n        result = result | result;\n      }\n      inner_var1 = inner_var1 + 0x68;\n    }\n    pointer = (int *)*pointer;\n  } while (pointer != (int *)0x0);\n  return result;\n}\n\n",
            "current_name": "process_data_000043a0",
            "entrypoint": "0x000043a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "iVar3": "inner_var1",
                "iVar5": "count",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "pointer",
                "uVar1": "result",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004418": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array_data",
                    "2": "relocations",
                    "3": "relocation_table",
                    "8": "rel_array"
                },
                "FUC_000045ec": {
                    "1": "execute_function2"
                },
                "FUNC_000045e8": {
                    "1": "perform_operation",
                    "2": "perform_action2"
                },
                "FUNC_000045ec": {
                    "1": "process_value2",
                    "2": "perform_action1"
                },
                "FUNC_00005e10": {
                    "1": "handle_negative_offset"
                },
                "FUN_000042a4": {
                    "1": "reverse_data",
                    "2": "perform_action",
                    "3": "handle_error"
                },
                "FUN_00004418": {
                    "1": "calculate_return_value",
                    "2": "calculate_result",
                    "4": "perform_operation",
                    "8": "process_data"
                },
                "FUN_00005e10": {
                    "1": "calculate_checksum",
                    "2": "calculate_value",
                    "3": "process_data"
                },
                "dVar1": {
                    "1": "offset_value",
                    "15": "offset",
                    "3": "r_offset",
                    "9": "relocation_offset"
                },
                "param_1": {
                    "2": "offset"
                },
                "param_2": {
                    "1": "data_pointer"
                },
                "pbVar4": {
                    "1": "pointer_byte",
                    "11": "byte_pointer",
                    "2": "byte_value",
                    "4": "byte_ptr"
                },
                "ppbVar3": {
                    "1": "relocation_entry",
                    "2": "current_pointer",
                    "7": "pointer_array"
                },
                "uVar2": {
                    "1": "modified_value",
                    "2": "return_value",
                    "25": "result"
                }
            },
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00002d94"
            ],
            "code": "\nuint process_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **data_pointer;\n  byte *byte_pointer;\n  \n  offset = rel_array[16].r_offset;\n  if ((rel_array[16].r_offset != 0) &&\n     (*(int *)(rel_array[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(rel_array[16].r_offset);\n  }\n  data_pointer = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_pointer == (byte **)&DAT_000079b8) {\n    data_pointer = *(byte ***)(offset + 4);\n  }\n  else if (data_pointer == (byte **)&DAT_000079d8) {\n    data_pointer = *(byte ***)(offset + 8);\n  }\n  else if (data_pointer == (byte **)&DAT_00007998) {\n    data_pointer = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045e8(data_pointer[0x16]);\n  }\n  byte_pointer = data_pointer[1];\n  data_pointer[1] = byte_pointer + -1;\n  if ((int)(byte_pointer + -1) < 0) {\n    result = FUN_00005e10(offset,data_pointer);\n  }\n  else {\n    byte_pointer = *data_pointer;\n    *data_pointer = byte_pointer + 1;\n    result = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)data_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_pointer + 3) << 0x16))) {\n    FUNC_000045ec(data_pointer[0x16]);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_00004418",
            "entrypoint": "0x00004418",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004418": "process_data_00004418",
                "dVar1": "offset",
                "pbVar4": "byte_pointer",
                "ppbVar3": "data_pointer",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000443c": {
            "additional_data": {
                "*param_2": {
                    "1": "minutes"
                },
                "-10": {
                    "1": "negative_offset"
                },
                "0x15180": {
                    "1": "seconds_per_day"
                },
                "0x16d": {
                    "1": "minutes_per_hour_other_than_february"
                },
                "0x23ab0": {
                    "1": "months_per_year"
                },
                "0x23ab1": {
                    "1": "minutes_per_year"
                },
                "0x3c": {
                    "1": "minutes_per_hour"
                },
                "0x5b4": {
                    "1": "minutes_per_day_other_than_february"
                },
                "0x5fa": {
                    "1": "approx_minutes_per_day_threshold"
                },
                "0x8eac": {
                    "1": "minutes_per_month"
                },
                "0x99": {
                    "1": "approx_minutes_per_day"
                },
                "0xafa6b": {
                    "1": "offset1"
                },
                "0xafa6c": {
                    "1": "offset2"
                },
                "0xe10": {
                    "1": "minutes_per_day"
                },
                "2": {
                    "1": "threshold_difference"
                },
                "FUN_0000443c": {
                    "1": "calculate_date_time_components",
                    "10": "calculate_date_time",
                    "3": "calculate_date",
                    "4": "extract_date_time",
                    "6": "extract_date_time_components"
                },
                "FUN_00006974": {
                    "1": "get_value"
                },
                "bVar9": {
                    "1": "negative_flag",
                    "26": "is_negative"
                },
                "iVar1": {
                    "1": "adjusted_days",
                    "11": "temp_var1",
                    "2": "day_of_year"
                },
                "iVar1 - 0x76c": {
                    "1": "year_days_adjustment"
                },
                "param_1": {
                    "1": "input_date",
                    "2": "timestamp",
                    "3": "date_time_ptr",
                    "5": "date_time_pointer"
                },
                "param_2": {
                    "1": "result_pointer",
                    "2": "components",
                    "6": "result"
                },
                "param_2[1]": {
                    "1": "minutes"
                },
                "param_2[2]": {
                    "1": "hours"
                },
                "param_2[3]": {
                    "1": "year_day"
                },
                "param_2[4]": {
                    "1": "output_components[4]"
                },
                "param_2[5]": {
                    "1": "output_components[5]"
                },
                "param_2[6]": {
                    "1": "weekday_adjusted",
                    "2": "day_of_week"
                },
                "param_2[7]": {
                    "1": "modified_minutes"
                },
                "param_2[8]": {
                    "1": "reserved"
                },
                "param_3": {
                    "1": "value1"
                },
                "param_4": {
                    "1": "value2"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "11": "temp_var2",
                    "2": "days",
                    "3": "total_days"
                },
                "uVar2 * 5 + 2": {
                    "1": "minutes_per_week"
                },
                "uVar2 + 0x3b + uVar3": {
                    "1": "modified_minutes"
                },
                "uVar2 + 1": {
                    "1": "total_minutes"
                },
                "uVar2 + 3) % 7": {
                    "1": "week_day"
                },
                "uVar2 - 0x132": {
                    "1": "adjusted_minutes"
                },
                "uVar2 - 0x23ab0": {
                    "1": "modified_minutes_per_year"
                },
                "uVar2 / 0x23ab1": {
                    "1": "num_years"
                },
                "uVar3": {
                    "1": "total_seconds",
                    "2": "remaining_days",
                    "3": "remaining_seconds",
                    "5": "total_minutes",
                    "9": "temp_var3"
                },
                "uVar3 % 0xe10": {
                    "1": "remaining_minutes"
                },
                "uVar3 / 0x23ab1 * 400 + uVar5": {
                    "1": "total_year_days"
                },
                "uVar3 / 0xe10": {
                    "1": "num_days"
                },
                "uVar4": {
                    "1": "temp2",
                    "2": "days_in_month",
                    "5": "days",
                    "9": "temp_var4"
                },
                "uVar4 * 0x99 + 2) / 5": {
                    "1": "approx_minutes_per_day_adjustment"
                },
                "uVar5": {
                    "1": "adjusted_days",
                    "2": "temp2",
                    "4": "leap_years",
                    "9": "temp_var5"
                },
                "uVar5 % 400 == 0": {
                    "1": "is_leap_year"
                },
                "uVar5 & 3": {
                    "1": "leap_year_check"
                },
                "uVar5 / 100 - uVar4 / 0x5b4": {
                    "1": "leap_year_adjustment"
                },
                "uVar6": {
                    "1": "first_entry",
                    "2": "first_param",
                    "3": "date_time_value1",
                    "4": "temp_var6",
                    "7": "year"
                },
                "uVar7": {
                    "1": "var2",
                    "2": "second_param",
                    "3": "date_time_value2",
                    "4": "temp_var7",
                    "6": "month"
                },
                "uVar8": {
                    "1": "total_days",
                    "2": "temp_var6",
                    "5": "weekday",
                    "7": "temp_var8"
                },
                "uVar8 / 0x99": {
                    "1": "approx_num_weeks"
                }
            },
            "called": [
                "FUN_00006974"
            ],
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculate_date_time_0000443c(undefined4 *date_time_pointer,uint *result)\n\n{\n  int temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  undefined4 year;\n  undefined4 month;\n  uint temp_var8;\n  bool is_negative;\n  \n  year = *date_time_pointer;\n  month = date_time_pointer[1];\n  temp_var1 = FUN_00006974(year,month,0x15180,0);\n  temp_var3 = 0x15180;\n  FUN_00006974(year,month,0x15180,0);\n  is_negative = (int)temp_var3 < 0;\n  if (is_negative) {\n    temp_var3 = temp_var3 + 0x15180;\n  }\n  if (is_negative) {\n    temp_var2 = temp_var1 + 0xafa6b;\n  }\n  else {\n    temp_var2 = temp_var1 + 0xafa6c;\n  }\n  years = temp_var3 / 0xe10;\n  months = (temp_var3 % 0xe10) / 0x3c;\n  *result = (temp_var3 % 0xe10) % 0x3c;\n  day_of_week = (temp_var2 + 3) % 7;\n  temp_var3 = temp_var2;\n  if ((int)temp_var2 < 0) {\n    temp_var3 = temp_var2 - 0x23ab0;\n  }\n  temp_var2 = (temp_var3 / 0x23ab1) * -0x23ab1 + temp_var2;\n  temp_var4 = ((temp_var2 / 0x8eac + temp_var2) - temp_var2 / 0x5b4) - temp_var2 / 0x23ab0;\n  temp_var5 = temp_var4 / 0x16d;\n  temp_var2 = (temp_var5 / 100 - temp_var4 / 0x5b4) + temp_var2 + temp_var5 * -0x16d;\n  temp_var8 = temp_var2 * 5 + 2;\n  temp_var4 = temp_var8 / 0x99;\n  if (temp_var8 < 0x5fa) {\n    temp_var1 = 2;\n  }\n  else {\n    temp_var1 = -10;\n  }\n  temp_var8 = temp_var4 + temp_var1;\n  temp_var1 = (temp_var3 / 0x23ab1) * 400 + temp_var5;\n  if (temp_var8 < 2) {\n    temp_var1 = temp_var1 + 1;\n  }\n  if (temp_var2 < 0x132) {\n    if (((temp_var5 & 3) == 0) && (temp_var5 != (temp_var5 / 100) * 100)) {\n      temp_var3 = 1;\n    }\n    else {\n      temp_var3 = (uint)(temp_var5 % 400 == 0);\n    }\n    temp_var3 = temp_var2 + 0x3b + temp_var3;\n  }\n  else {\n    temp_var3 = temp_var2 - 0x132;\n  }\n  day_of_year = temp_var3;\n  day_of_month = (temp_var2 + 1) - (temp_var4 * 0x99 + 2) / 5;\n  leap_year_adj = temp_var8;\n  day_of_week_adj = temp_var1 - 0x76c;\n  unused = 0;\n  return result;\n}\n\n",
            "current_name": "calculate_date_time_0000443c",
            "entrypoint": "0x0000443c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "bVar9": "is_negative",
                "iVar1": "temp_var1",
                "param_1": "date_time_pointer",
                "param_2": "result",
                "param_2[1]": "months",
                "param_2[2]": "years",
                "param_2[3]": "day_of_month",
                "param_2[4]": "leap_year_adj",
                "param_2[5]": "day_of_week_adj",
                "param_2[6]": "day_of_week",
                "param_2[7]": "day_of_year",
                "param_2[8]": "unused",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "year",
                "uVar7": "month",
                "uVar8": "temp_var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000459c": {
            "additional_data": {
                "<iVar2>": {
                    "1": "loop_index"
                },
                "<original_function_name>": {
                    "1": "initialize_and_execute"
                },
                "<ppcVar1>": {
                    "1": "function_pointer_array"
                },
                "FUN_00000410": {
                    "1": "execute_function",
                    "2": "perform_cleanup"
                },
                "FUN_0000459c": {
                    "1": "execute_sub_functions_twice",
                    "2": "execute_subfunctions",
                    "3": "execute_all_functions",
                    "5": "execute_functions",
                    "8": "execute_sub_functions"
                },
                "iVar2": {
                    "12": "index",
                    "2": "iteration_index",
                    "4": "iteration_count",
                    "6": "counter"
                },
                "ppcVar1": {
                    "1": "function_list",
                    "2": "function_pointer_list",
                    "4": "function_array",
                    "5": "function_pointer",
                    "6": "function_pointer_array",
                    "7": "function_pointers"
                }
            },
            "called": [
                "FUN_00000410"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_sub_functions_0000459c(void)\n\n{\n  code **function_pointers;\n  int index;\n  \n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  FUN_00000410();\n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_0000459c",
            "entrypoint": "0x0000459c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000459c": "execute_sub_functions_0000459c",
                "iVar2": "index",
                "ppcVar1": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000045e4": {
            "called": [],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e4",
            "entrypoint": "0x000045e4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045e8": {
            "called": [],
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e8",
            "entrypoint": "0x000045e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ec": {
            "called": [],
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045ec",
            "entrypoint": "0x000045ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ee": {
            "additional_data": {
                "FUN_000045ee": {
                    "1": "copy_memory_range",
                    "2": "copy_within_range",
                    "3": "copy_data",
                    "5": "copy_range",
                    "7": "reverse_copy"
                },
                "param_1": {
                    "1": "src",
                    "12": "source",
                    "7": "dest"
                },
                "param_2": {
                    "1": "dest_ptr",
                    "12": "destination",
                    "7": "source",
                    "8": "src"
                },
                "param_3": {
                    "2": "size",
                    "27": "length"
                },
                "puVar1": {
                    "1": "src",
                    "2": "src_ptr",
                    "3": "dest_end",
                    "5": "source_end",
                    "6": "source_ptr",
                    "9": "dest_ptr"
                },
                "puVar2": {
                    "1": "src_last",
                    "3": "dest_ptr",
                    "4": "destination_ptr",
                    "5": "dest_end",
                    "8": "src_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00003ff4"
            ],
            "code": "\nvoid copy_and_reverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = destination + length;\n  if ((destination < source) && (source < src_ptr)) {\n    dest_ptr = source + length;\n    while (dest_ptr != source) {\n      src_ptr = src_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_ptr;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != src_ptr; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_000045ee",
            "entrypoint": "0x000045ee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004622": {
            "additional_data": {
                "FUN_00004622": {
                    "1": "fill_memory_with_byte",
                    "2": "fill_memory_with_value",
                    "3": "set_memory",
                    "5": "initialize_memory",
                    "6": "memset",
                    "7": "fill_memory"
                },
                "param_1": {
                    "1": "memory_start",
                    "11": "memory",
                    "2": "dest",
                    "3": "memory_ptr",
                    "7": "destination"
                },
                "param_2": {
                    "1": "byte_to_fill",
                    "2": "constant",
                    "28": "value"
                },
                "param_3": {
                    "1": "array_size",
                    "11": "length",
                    "15": "size",
                    "2": "count"
                },
                "puVar1": {
                    "1": "end",
                    "3": "end_pointer",
                    "7": "end_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "code": "\nvoid fill_memory_00004622(undefined *memory,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = memory + size;\n  for (; memory != end_address; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_00004622",
            "entrypoint": "0x00004622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004634": {
            "additional_data": {
                "FUN_00004634": {
                    "1": "update_dates",
                    "19": "update_date_time",
                    "3": "calculate_date",
                    "5": "update_date"
                },
                "FUN_00005584": {
                    "1": "calculate_days_in_month"
                },
                "bVar5": {
                    "1": "negative_days",
                    "27": "is_negative"
                },
                "iVar1": {
                    "1": "month_index",
                    "13": "days_in_month",
                    "2": "month_increment",
                    "5": "days_to_add"
                },
                "iVar4": {
                    "1": "months_to_add",
                    "12": "days_in_month",
                    "2": "days_to_add",
                    "3": "month_days",
                    "6": "days_in_year"
                },
                "local_1c": {
                    "1": "day",
                    "2": "current_value",
                    "3": "days_remaining",
                    "5": "current_month",
                    "8": "current_day"
                },
                "local_20": {
                    "1": "buffer",
                    "19": "temp_array",
                    "2": "temp"
                },
                "param_1": {
                    "1": "calendar",
                    "11": "date_time",
                    "2": "date",
                    "7": "date_time_array",
                    "8": "date_array"
                },
                "param_2": {
                    "1": "length",
                    "2": "num_elements",
                    "3": "year",
                    "6": "days",
                    "7": "days_to_add"
                },
                "param_3": {
                    "1": "starting_day_of_week",
                    "2": "unused",
                    "3": "offset",
                    "4": "param_3"
                },
                "uStack_18": {
                    "1": "var_stack",
                    "2": "reserved",
                    "3": "stack_var",
                    "4": "temp_var"
                },
                "uVar2": {
                    "1": "updated_day",
                    "2": "temp_var1",
                    "4": "current_day",
                    "5": "total_days"
                },
                "uVar3": {
                    "1": "updated_month",
                    "2": "days_in_month",
                    "3": "leap_year_days"
                }
            },
            "called": [
                "FUN_00005584"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid update_date_time_00004634(uint *date_time,uint days_to_add,undefined4 param_3)\n\n{\n  int days_in_month;\n  uint total_days;\n  uint year;\n  int days_in_month;\n  bool is_negative;\n  uint *temp_array;\n  uint current_day;\n  undefined4 temp_var;\n  \n  temp_array = date_time;\n  current_day = days_to_add;\n  temp_var = param_3;\n  if (0x3b < *date_time) {\n    FUN_00005584(&temp_array,*date_time,0x3c);\n    total_days = date_time[1] + (int)temp_array;\n    date_time[1] = total_days;\n    if ((int)current_day < 0) {\n      total_days = total_days - 1;\n      *date_time = current_day + 0x3c;\n    }\n    else {\n      *date_time = current_day;\n    }\n    if ((int)current_day < 0) {\n      date_time[1] = total_days;\n    }\n  }\n  if (0x3b < date_time[1]) {\n    FUN_00005584(&temp_array,date_time[1],0x3c);\n    is_negative = (int)current_day < 0;\n    year = date_time[2] + (int)temp_array;\n    date_time[2] = year;\n    total_days = current_day;\n    if (is_negative) {\n      total_days = current_day + 0x3c;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_time[1] = total_days;\n    }\n    if (is_negative) {\n      date_time[1] = total_days;\n    }\n    if (is_negative) {\n      date_time[2] = year;\n    }\n  }\n  if (0x17 < date_time[2]) {\n    FUN_00005584(&temp_array,date_time[2],0x18);\n    is_negative = (int)current_day < 0;\n    year = date_time[3] + (int)temp_array;\n    date_time[3] = year;\n    total_days = current_day;\n    if (is_negative) {\n      total_days = current_day + 0x18;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_time[2] = total_days;\n    }\n    if (is_negative) {\n      date_time[2] = total_days;\n    }\n    if (is_negative) {\n      date_time[3] = year;\n    }\n  }\n  if (0xb < date_time[4]) {\n    FUN_00005584(&temp_array,date_time[4],0xc);\n    is_negative = (int)current_day < 0;\n    total_days = date_time[5] + (int)temp_array;\n    date_time[5] = total_days;\n    if (is_negative) {\n      current_day = current_day + 0xc;\n      total_days = total_days - 1;\n    }\n    if (!is_negative) {\n      date_time[4] = current_day;\n    }\n    if (is_negative) {\n      date_time[4] = current_day;\n    }\n    if (is_negative) {\n      date_time[5] = total_days;\n    }\n  }\n  total_days = date_time[5];\n  if ((total_days & 3) == 0) {\n    if (total_days == (total_days / 100) * 100) {\n      if ((total_days + 0x76c) % 400 == 0) {\n        days_in_month = 0x1d;\n      }\n      else {\n        days_in_month = 0x1c;\n      }\n    }\n    else {\n      days_in_month = 0x1d;\n    }\n  }\n  else {\n    days_in_month = 0x1c;\n  }\n  if ((int)date_time[3] < 1) {\n    while ((int)date_time[3] < 1) {\n      total_days = date_time[4];\n      date_time[4] = total_days - 1;\n      if (total_days - 1 == 0xffffffff) {\n        year = date_time[5];\n        total_days = year - 1;\n        date_time[4] = 0xb;\n        date_time[5] = total_days;\n        if ((total_days & 3) == 0) {\n          if (total_days == (total_days / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n      days_in_month = days_in_month;\n      if (date_time[4] != 1) {\n        days_in_month = (&DAT_000079fc)[date_time[4]];\n      }\n      date_time[3] = days_in_month + date_time[3];\n    }\n  }\n  else {\n    while( true ) {\n      total_days = date_time[4];\n      days_in_month = days_in_month;\n      if (total_days != 1) {\n        days_in_month = (&DAT_000079fc)[total_days];\n      }\n      if ((int)date_time[3] <= days_in_month) break;\n      date_time[3] = date_time[3] - days_in_month;\n      date_time[4] = total_days + 1;\n      if (total_days + 1 == 0xc) {\n        year = date_time[5];\n        total_days = year + 1;\n        date_time[4] = 0;\n        date_time[5] = total_days;\n        if ((total_days & 3) == 0) {\n          if (total_days % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_date_time_00004634",
            "entrypoint": "0x00004634",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "bVar5": "is_negative",
                "iVar1": "days_in_month",
                "iVar4": "days_in_month",
                "local_1c": "current_day",
                "local_20": "temp_array",
                "param_1": "date_time",
                "param_2": "days_to_add",
                "uStack_18": "temp_var",
                "uVar2": "total_days",
                "uVar3": "year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000047e4": {
            "additional_data": {
                "DAT_00002710": {
                    "1": "constant"
                },
                "DAT_00007a2c": {
                    "1": "constant2"
                },
                "DAT_1fff0dd8": {
                    "1": ""
                },
                "FUN_00004634": {
                    "1": "normalize_date"
                },
                "FUN_000047e4": {
                    "1": "calculate_calendar_day",
                    "2": "calculate_adjusted_date",
                    "3": "calculate_weekday",
                    "4": "calculate_date_difference",
                    "7": "calculate_date_offset"
                },
                "FUN_00004f98": {
                    "1": "is_first_day_of_year",
                    "3": "is_leap_year"
                },
                "FUN_000050e8": {
                    "1": "get_constants",
                    "2": "allocate_memory"
                },
                "FUN_000050f4": {
                    "1": "set_date_time"
                },
                "FUN_00005100": {
                    "1": "set_daylight_saving_time"
                },
                "FUN_000056b0": {
                    "1": "get_date_func"
                },
                "bVar16": {
                    "1": "is_multiple",
                    "13": "is_leap_year"
                },
                "bVar17": {
                    "1": "is_leap_year"
                },
                "iVar11": {
                    "1": "temp_value7",
                    "2": "total_days_offset"
                },
                "iVar24": {
                    "1": "temp_var10"
                },
                "iVar32": {
                    "1": "temp_var14"
                },
                "iVar37": {
                    "1": "temp_var15"
                },
                "iVar38": {
                    "1": "temp_var16"
                },
                "iVar5": {
                    "1": "days_in_month",
                    "2": "offset",
                    "3": "temp_var2"
                },
                "iVar6": {
                    "1": "temp_value3",
                    "2": "temp_var",
                    "3": "temp_var2"
                },
                "iVar7": {
                    "1": "updated_day_of_week",
                    "2": "total_seconds",
                    "3": "final_result"
                },
                "lVar1": {
                    "1": "total_days_with_time",
                    "18": "total_days",
                    "6": "total_seconds"
                },
                "lVar2": {
                    "1": "temp9",
                    "2": "adjusted_days",
                    "3": "new_total_seconds",
                    "7": "updated_total_days",
                    "8": "new_total_days"
                },
                "lvar1": {
                    "1": "total_days"
                },
                "lvar2": {
                    "1": "temp_total_days"
                },
                "param_1": {
                    "1": "parameters",
                    "3": "date_components",
                    "5": "date_params",
                    "8": "date",
                    "9": "date_array"
                },
                "param_1[6]": {
                    "1": "adjusted_weekday"
                },
                "param_1[7]": {
                    "1": "adjusted_days"
                },
                "param_1[8]": {
                    "1": "is_adjustment_required"
                },
                "piVar29": {
                    "1": "temp_pointer"
                },
                "piVar3": {
                    "1": "date_time_func",
                    "2": "ptr",
                    "4": "pi_var3"
                },
                "uVar.firstConditionalCheck": {
                    "1": "is_multiples_of100"
                },
                "uVar.secondConditionalCheck1": {
                    "1": "is_multiples_of400"
                },
                "uVar.secondConditionalCheck2": {
                    "1": "is_not_multiples_of400"
                },
                "uVar10": {
                    "1": "temp_var6",
                    "2": "temp_var7",
                    "3": "temp3"
                },
                "uVar12": {
                    "1": "param_1_5",
                    "2": "year_offset",
                    "4": "year"
                },
                "uVar13": {
                    "1": "temp10",
                    "6": "is_negative",
                    "9": "is_leap_year"
                },
                "uVar13.logicalXORresult": {
                    "1": "is_reverse_required"
                },
                "uVar14": {
                    "1": "days_in_month",
                    "2": "u_var14"
                },
                "uVar15": {
                    "1": "days_in_month",
                    "2": "result",
                    "4": "days"
                },
                "uVar15.isNotMultiplesOf100No": {
                    "1": "utc_offset_subtraction"
                },
                "uVar15.isNotMultiplesOf100Yes": {
                    "1": "utc_offset_addition"
                },
                "uVar15.isReverseRequiredNo": {
                    "1": "non_reversed_offset"
                },
                "uVar15.isReverseRequiredYes": {
                    "1": "reversed_offset"
                },
                "uVar15.logicalXORresult": {
                    "1": "is_reverse_required"
                },
                "uVar16": {
                    "1": "remainder3"
                },
                "uVar17": {
                    "1": "is_negative"
                },
                "uVar18": {
                    "1": "is_greater"
                },
                "uVar19": {
                    "1": "is_less"
                },
                "uVar21": {
                    "1": "temp_var9"
                },
                "uVar25": {
                    "1": "temp_var11"
                },
                "uVar26": {
                    "1": "temp_var12"
                },
                "uVar27": {
                    "1": "temp_var13"
                },
                "uVar39": {
                    "1": "temp_var17"
                },
                "uVar4": {
                    "1": "leap_year_remainder",
                    "12": "remainder",
                    "2": "temp1",
                    "3": "temp_var1"
                },
                "uVar8": {
                    "1": "remaining_days",
                    "2": "temp_var5",
                    "3": "temp_var3"
                },
                "uVar9": {
                    "1": "counter",
                    "2": "temp_var6"
                },
                "uVar9.temporary": {
                    "1": "is_not_multiples_of100"
                }
            },
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_date_offset_000047e4(int *date_array)\n\n{\n  longlong total_days;\n  longlong new_total_days;\n  int *pointer_array;\n  uint remainder;\n  int temp_var2;\n  int temp_var3;\n  int final_result;\n  uint temp_var3;\n  uint u_var9;\n  uint u_var10;\n  int total_days_offset;\n  uint year;\n  uint is_leap_year;\n  uint current_year;\n  uint days;\n  bool is_leap_year;\n  \n  pointer_array = (int *)FUN_000056b0();\n  FUN_00004634(date_array);\n  year = date_array[5];\n  total_days_offset = date_array[3] + -1 + *(int *)(&DAT_00007a2c + date_array[4] * 4);\n  if (((1 < date_array[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    total_days_offset = total_days_offset + 1;\n  }\n  adjusted_days = total_days_offset;\n  if (20000 < (int)&DAT_00002710 + year) {\n    final_result = -1;\n    temp_var2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (u_var9 = 0x45; (int)year < (int)u_var9; u_var9 = u_var9 - 1) {\n        if ((u_var9 & 3) == 0) {\n          if (u_var9 == (u_var9 / 100) * 100) {\n            if ((u_var9 + 0x76c) % 400 == 0) {\n              final_result = 0x16e;\n            }\n            else {\n              final_result = 0x16d;\n            }\n          }\n          else {\n            final_result = 0x16e;\n          }\n        }\n        else {\n          final_result = 0x16d;\n        }\n        total_days_offset = total_days_offset - final_result;\n      }\n      if ((u_var9 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          final_result = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            final_result = 0x16e;\n          }\n        }\n        else {\n          final_result = 0x16e;\n        }\n      }\n      else {\n        final_result = 0x16d;\n      }\n      total_days_offset = total_days_offset - final_result;\n    }\n  }\n  else {\n    u_var9 = 0x46;\n    do {\n      if ((u_var9 & 3) == 0) {\n        if (u_var9 % 100 == 0) {\n          if ((u_var9 + 0x76c) % 400 == 0) {\n            final_result = 0x16e;\n          }\n          else {\n            final_result = 0x16d;\n          }\n        }\n        else {\n          final_result = 0x16e;\n        }\n      }\n      else {\n        final_result = 0x16d;\n      }\n      u_var9 = u_var9 + 1;\n      total_days_offset = total_days_offset + final_result;\n    } while (year != u_var9);\n  }\n  total_days = (longlong)total_days_offset * 0x15180 + (longlong)(date_array[2] * 0xe10 + date_array[1] * 0x3c + *date_array)\n  ;\n  days = (uint)total_days;\n  final_result = (int)((ulonglong)total_days >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  u_var9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = pointer_array[10];\n    final_result = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n  }\n  else {\n    current_year = is_adjustment_required;\n    is_leap_year = current_year;\n    if (0 < (int)current_year) {\n      is_leap_year = 1;\n    }\n    if ((pointer_array[1] == date_array[5] + 0x76c) || (temp_var2 = FUN_00004f98(), temp_var2 != 0)) {\n      u_var10 = pointer_array[0x14];\n      remainder = pointer_array[0x12];\n      temp_var3 = pointer_array[10];\n      u_var9 = remainder - temp_var3;\n      temp_var2 = (pointer_array[0x13] - ((int)temp_var3 >> 0x1f)) - (uint)(remainder < temp_var3);\n      if (((int)((final_result - temp_var2) - (uint)(days < u_var9)) < 0 ==\n           (SBORROW4(final_result,temp_var2) != SBORROW4(final_result - temp_var2,(uint)(days < u_var9)))) &&\n         (temp_var3 = (pointer_array[0x13] - ((int)u_var10 >> 0x1f)) - (uint)(remainder < u_var10),\n         is_leap_year = days < remainder - u_var10,\n         (int)((final_result - temp_var3) - (uint)is_leap_year) < 0 !=\n         (SBORROW4(final_result,temp_var3) != SBORROW4(final_result - temp_var3,(uint)is_leap_year)))) goto LAB_00004a88;\n      remainder = pointer_array[8] - u_var10;\n      temp_var3 = (pointer_array[9] - ((int)u_var10 >> 0x1f)) - (uint)((uint)pointer_array[8] < u_var10);\n      if (*pointer_array != 0) {\n        if ((int)((final_result - temp_var3) - (uint)(days < remainder)) < 0 ==\n            (SBORROW4(final_result,temp_var3) != SBORROW4(final_result - temp_var3,(uint)(days < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        u_var9 = 0;\n        if ((int)current_year < 0) goto LAB_00004934;\nLAB_00004a14:\n        days = is_leap_year ^ u_var9;\n        is_leap_year = u_var9;\n        if (days == 1) {\n          if (u_var9 == 0) {\n            final_result = u_var10 - temp_var3;\n          }\n          else {\n            final_result = temp_var3 - u_var10;\n          }\n          temp_var2 = date_array[3];\n          *date_array = *date_array + final_result;\n          new_total_days = total_days + final_result;\n          FUN_00004634(date_array);\n          temp_var2 = date_array[3] - temp_var2;\n          total_days = total_days + final_result;\n          if (temp_var2 != 0) {\n            if (temp_var2 < 2) {\n              if (temp_var2 == -2 || temp_var2 + 2 < 0 != SCARRY4(temp_var2,2)) {\n                temp_var2 = 1;\n              }\n            }\n            else {\n              temp_var2 = -1;\n            }\n            final_result = temp_var2 + adjusted_days;\n            total_days_offset = total_days_offset + temp_var2;\n            if (final_result < 0) {\n              u_var9 = year - 1;\n              if ((u_var9 & 3) == 0) {\n                if (u_var9 == (u_var9 / 100) * 100) {\n                  final_result = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    final_result = 0x16c;\n                  }\n                }\n                else {\n                  final_result = 0x16d;\n                }\n              }\n              else {\n                final_result = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  temp_var2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    temp_var2 = 0x16e;\n                  }\n                }\n                else {\n                  temp_var2 = 0x16e;\n                }\n              }\n              else {\n                temp_var2 = 0x16d;\n              }\n              if (temp_var2 <= final_result) {\n                final_result = final_result - temp_var2;\n              }\n            }\n            adjusted_days = final_result;\n            total_days = new_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((final_result - temp_var3) - (uint)(days < remainder)) < 0 !=\n          (SBORROW4(final_result,temp_var3) != SBORROW4(final_result - temp_var3,(uint)(days < remainder)))) {\nLAB_0000491e:\n        if ((int)((final_result - temp_var2) - (uint)(days < u_var9)) < 0 ==\n            (SBORROW4(final_result,temp_var2) != SBORROW4(final_result - temp_var2,(uint)(days < u_var9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)current_year) {\n        u_var9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      u_var9 = is_leap_year;\n      if (is_leap_year != 1) goto LAB_00004934;\n    }\n    year = pointer_array[0x14];\n    final_result = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_days,year);\n    u_var9 = 1;\n  }\n  FUN_000050f4();\n  is_adjustment_required = u_var9;\n  adjusted_weekday = (total_days_offset + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp_var2,final_result);\n}\n\n",
            "current_name": "calculate_date_offset_000047e4",
            "entrypoint": "0x000047e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "bVar16": "is_leap_year",
                "iVar11": "total_days_offset",
                "iVar5": "temp_var2",
                "iVar6": "temp_var3",
                "iVar7": "final_result",
                "lVar1": "total_days",
                "lVar2": "new_total_days",
                "param_1": "date_array",
                "param_1[6]": "adjusted_weekday",
                "param_1[7]": "adjusted_days",
                "param_1[8]": "is_adjustment_required",
                "piVar3": "pointer_array",
                "uVar10": "u_var10",
                "uVar12": "year",
                "uVar13": "is_leap_year",
                "uVar14": "current_year",
                "uVar15": "days",
                "uVar4": "remainder",
                "uVar8": "temp_var3",
                "uVar9": "u_var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004b34": {
            "additional_data": {
                "DAT_1fff0db4": {
                    "1": "global_ptr"
                },
                "FUN_00004b34": {
                    "1": "rearrange_data",
                    "2": "update_linked_list"
                },
                "FUN_00005790": {
                    "1": "initialization_function",
                    "2": "sub_function2",
                    "4": "initialize_data"
                },
                "FUN_0000579c": {
                    "1": "perform_operation",
                    "2": "sub_function1"
                },
                "bVar6": {
                    "1": "bool_variable",
                    "11": "is_equal",
                    "2": "is_condition_true"
                },
                "extraout_r1": {
                    "1": "temp_ptr_2",
                    "2": "next_node",
                    "4": "extra_output"
                },
                "param_1": {
                    "1": "output_data",
                    "10": "output_array",
                    "2": "output_pointer",
                    "3": "output_buffer",
                    "8": "result"
                },
                "param_2": {
                    "1": "length",
                    "10": "size",
                    "3": "input_size",
                    "4": "array_size"
                },
                "param_3": {
                    "1": "param_a",
                    "12": "param_3",
                    "2": "arg3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "unused_param2",
                    "12": "param_4",
                    "2": "arg2",
                    "7": "param4"
                },
                "piVar1": {
                    "1": "temp_var4",
                    "2": "temp_ptr1",
                    "3": "temp_var1",
                    "5": "temp_ptr",
                    "6": "temp"
                },
                "ppiVar1": {
                    "1": "current_element"
                },
                "ppiVar2": {
                    "1": "temp3",
                    "2": "current_node",
                    "6": "current_ptr"
                },
                "ppiVar3": {
                    "1": "temp4",
                    "2": "previous_node",
                    "3": "prev_ptr"
                },
                "ppiVar4": {
                    "1": "temp_ptr",
                    "3": "prev_ptr",
                    "6": "next_ptr"
                },
                "ppiVar5": {
                    "1": "temp_var6",
                    "2": "new_element",
                    "5": "new_node",
                    "7": "new_ptr"
                }
            },
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "code": "\nvoid update_linked_list_00004b34(undefined4 *output_array,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *temp;\n  int **extra_output;\n  int **current_ptr;\n  int **next_ptr;\n  int **next_ptr;\n  int **new_ptr;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  next_ptr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    current_ptr = extra_output;\n    DAT_1fff0db4 = new_ptr;\n  }\n  else {\n    next_ptr = DAT_1fff0db4;\n    if (new_ptr < DAT_1fff0db4) {\n      current_ptr = (int **)*new_ptr;\n      next_ptr = (int **)((int)new_ptr + (int)current_ptr);\n      is_equal = DAT_1fff0db4 == next_ptr;\n      if (is_equal) {\n        next_ptr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_ptr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_ptr;\n      if (is_equal) {\n        next_ptr = (int **)((int)next_ptr + (int)current_ptr);\n        *new_ptr = (int *)next_ptr;\n      }\n    }\n    else {\n      do {\n        next_ptr = next_ptr;\n        next_ptr = (int **)next_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_ptr);\n      current_ptr = (int **)*next_ptr;\n      if ((int **)((int)next_ptr + (int)current_ptr) == new_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n        *next_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)next_ptr + (int)current_ptr)) {\n          temp = *next_ptr;\n          next_ptr[1] = next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp);\n          *next_ptr = (int *)current_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)next_ptr + (int)current_ptr)) {\n        *output_array = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        is_equal = next_ptr == current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)*next_ptr;\n          next_ptr = (int **)next_ptr[1];\n        }\n        new_ptr[1] = (int *)next_ptr;\n        if (is_equal) {\n          current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n          *new_ptr = (int *)current_ptr;\n        }\n        next_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  FUN_0000579c(output_array,current_ptr,next_ptr,param_4);\n  return;\n}\n\n",
            "current_name": "update_linked_list_00004b34",
            "entrypoint": "0x00004b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004b34": "update_linked_list_00004b34",
                "bVar6": "is_equal",
                "extraout_r1": "extra_output",
                "param_1": "output_array",
                "param_2": "size",
                "piVar1": "temp",
                "ppiVar2": "current_ptr",
                "ppiVar3": "next_ptr",
                "ppiVar4": "next_ptr",
                "ppiVar5": "new_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "additional_data": {
                "*param_1": {
                    "1": "mem_ptr"
                },
                "DAT_1fff0db4": {
                    "1": "first_block_ptr",
                    "5": "first_block"
                },
                "DAT_1fff0db8": {
                    "1": "initialized_allocations",
                    "2": "initialized"
                },
                "FUN_00000428": {
                    "1": "allocate_memory_block",
                    "4": "allocate_memory"
                },
                "FUN_00004bd0": {
                    "1": "calculate_new_size_and_allocate_memory",
                    "11": "allocate_memory_block",
                    "2": "resize_memory_block",
                    "7": "allocate_memory"
                },
                "FUN_00005790": {
                    "1": "initialize_allocations",
                    "4": "initialize_memory"
                },
                "FUN_0000579c": {
                    "1": "clean_up_memory",
                    "2": "cleanup_memory"
                },
                "_DAT_1fff0db8": {
                    "1": "heap_end"
                },
                "iVar2": {
                    "1": "chunk_size",
                    "19": "difference",
                    "2": "block_size"
                },
                "param_1": {
                    "1": "out_param",
                    "2": "output",
                    "3": "output_buffer",
                    "5": "result"
                },
                "param_2": {
                    "1": "old_size",
                    "16": "size",
                    "2": "required_size",
                    "6": "requested_size"
                },
                "param_3": {
                    "1": "param_a",
                    "2": "unused_param_1",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "unk2",
                    "2": "arg2",
                    "9": "param_4"
                },
                "puVar1": {
                    "1": "current_chunk",
                    "13": "previous_block",
                    "2": "previous_block_ptr",
                    "4": "current_block",
                    "7": "prev_block"
                },
                "puVar4": {
                    "1": "previous_chunk",
                    "15": "current_block",
                    "2": "current_chunk",
                    "4": "curr_block"
                },
                "uVar3": {
                    "1": "difference_unsigned",
                    "2": "block_size_diff",
                    "3": "block_size_difference",
                    "4": "difference",
                    "5": "block_difference"
                },
                "uVar5": {
                    "1": "adjusted_block_size",
                    "14": "aligned_size",
                    "2": "block_size",
                    "3": "new_size",
                    "4": "required_size"
                }
            },
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "code": "\nuint allocate_memory_block_00004bd0(undefined4 *result,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *previous_block;\n  int difference;\n  uint block_difference;\n  uint *current_block;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUN_00005790();\n    previous_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      block_difference = *current_block - aligned_size;\n      if (-1 < (int)block_difference) {\n        if (0xb < block_difference) {\n          *current_block = block_difference;\n          current_block = (uint *)((int)current_block + block_difference);\n          goto LAB_00004c34;\n        }\n        if (previous_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(result,0,previous_block,0,param_4);\n    }\n    previous_block = (uint *)FUN_00000428(result,aligned_size);\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == current_block ||\n        (difference = FUN_00000428(result,(int)current_block - (int)previous_block), difference != -1)))) {\nLAB_00004c34:\n      *current_block = aligned_size;\nLAB_00004c42:\n      FUN_0000579c(result);\n      aligned_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - aligned_size;\n      return aligned_size;\n    }\n    *result = 0xc;\n    FUN_0000579c(result);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_block_00004bd0",
            "entrypoint": "0x00004bd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "iVar2": "difference",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "previous_block",
                "puVar4": "current_block",
                "uVar3": "block_difference",
                "uVar5": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004c84": {
            "additional_data": {
                "FNC_00004c84": {
                    "1": "process_relocation"
                },
                "FUN_00004c84": {
                    "1": "extract_and_call_function",
                    "2": "perform_operation",
                    "3": "process_relocation",
                    "8": "process_function"
                },
                "dVar1": {
                    "1": "offset_copy",
                    "11": "relocation_offset",
                    "14": "offset",
                    "3": "r_offset"
                },
                "param_1": {
                    "1": "offset",
                    "2": "param1",
                    "5": "input_param",
                    "6": "arg1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "5": "param2",
                    "6": "arg2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "third_param",
                    "5": "param3",
                    "6": "arg3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "info_param",
                    "5": "param4",
                    "6": "arg4",
                    "9": "input4"
                },
                "uStack_4": {
                    "1": "fourth_param_copy",
                    "3": "arg4_copy"
                },
                "uStack_8": {
                    "1": "arg3_result",
                    "3": "arg3_copy"
                },
                "uStack_c": {
                    "1": "second_param_copy",
                    "2": "param2_copy",
                    "3": "arg2_copy"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "param_copy",
                    "3": "input1_copy",
                    "5": "arg1_copy",
                    "6": "param1_copy"
                }
            },
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "code": "\nvoid process_function_00004c84(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  dword offset;\n  undefined4 param1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param1_copy = input1;\n  arg2_copy = input2;\n  arg3_copy = input3;\n  arg4_copy = input4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(offset,*(undefined4 *)(offset + 8),input1,&arg2_copy,param1_copy,&arg2_copy);\n  return;\n}\n\n",
            "current_name": "process_function_00004c84",
            "entrypoint": "0x00004c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004c84": "process_function_00004c84",
                "dVar1": "offset",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_4": "arg4_copy",
                "uStack_8": "arg3_copy",
                "uStack_c": "arg2_copy",
                "uVar2": "param1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "additional_data": {
                "FUNC_000045e8": {
                    "1": "perform_action1"
                },
                "FUNC_000045ec": {
                    "1": "process_func4"
                },
                "FUN_000042a4": {
                    "1": "perform_action3"
                },
                "FUN_00004cb4": {
                    "1": "decode_and_process_value",
                    "2": "decode_input",
                    "3": "decode_and_update",
                    "4": "process_param",
                    "5": "process_parameter"
                },
                "FUN_00005404": {
                    "1": "process_func2"
                },
                "dVar1": {
                    "1": "r_offset_value",
                    "19": "offset",
                    "2": "r_offset",
                    "3": "offset_value",
                    "6": "rel_offset"
                },
                "pParam": {
                    "1": "param_1"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param",
                    "21": "input_value",
                    "3": "input"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "2": "array_ptr",
                    "3": "ptr",
                    "5": "pointer",
                    "8": "data_ptr"
                },
                "puVar4": {
                    "1": "ptr_char",
                    "2": "char_pointer",
                    "3": "byte_ptr",
                    "6": "char_ptr"
                },
                "uVar3": {
                    "1": "temp_val",
                    "3": "temp_var",
                    "4": "counter",
                    "7": "updated_value",
                    "9": "count"
                },
                "unaff_r4": {
                    "1": "register_4",
                    "2": "arg4"
                },
                "unaff_r5": {
                    "1": "var5",
                    "2": "register5"
                }
            },
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00002a00"
            ],
            "code": "\nuint process_parameter_00004cb4(uint input_value)\n\n{\n  dword offset;\n  undefined4 *data_ptr;\n  uint count;\n  undefined *char_ptr;\n  undefined4 param_4;\n  undefined4 param_5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  count = data_ptr[2] - 1;\n  data_ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)data_ptr[6] || (count = input_value & 0xff, count == 10))))\n  {\n    input_value = FUN_00005404(offset,input_value,data_ptr,count,param_4,param_5);\n  }\n  else {\n    char_ptr = (undefined *)*data_ptr;\n    *data_ptr = char_ptr + 1;\n    *char_ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "current_name": "process_parameter_00004cb4",
            "entrypoint": "0x00004cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004cb4": "process_parameter_00004cb4",
                "dVar1": "offset",
                "param_1": "input_value",
                "puVar2": "data_ptr",
                "puVar4": "char_ptr",
                "uVar3": "count",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004db8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_table"
                },
                "FUNC_000045e8": {
                    "1": "perform_operation"
                },
                "FUNC_000045ec": {
                    "1": "process_data3"
                },
                "FUN_000042a4": {
                    "1": "do_something"
                },
                "FUN_00004db8": {
                    "1": "extract_strings_from_binary",
                    "15": "process_data",
                    "5": "process_input"
                },
                "FUN_00005404": {
                    "1": "reverse_data"
                },
                "FUN_000054a8": {
                    "1": "process_relocation_table"
                },
                "cVar1": {
                    "1": "current_char_value",
                    "23": "current_char",
                    "4": "character"
                },
                "dVar2": {
                    "1": "rel_entry",
                    "2": "r_offset",
                    "24": "offset",
                    "3": "rel_offset"
                },
                "iVar3": {
                    "1": "function_result",
                    "2": "return_value",
                    "28": "result"
                },
                "param_1": {
                    "1": "input_value",
                    "13": "input_data",
                    "2": "input_size",
                    "3": "input_param",
                    "9": "input"
                },
                "pcVar4": {
                    "1": "str_ptr2",
                    "2": "ptr",
                    "3": "str_pointer",
                    "4": "string_pointer",
                    "5": "string_ptr"
                },
                "pcVar7": {
                    "1": "current_char_ptr",
                    "2": "current_pointer",
                    "3": "current_ptr",
                    "4": "current_char",
                    "7": "char_ptr"
                },
                "ppcVar5": {
                    "1": "pointer_ptr",
                    "2": "str_array",
                    "3": "data_pointer",
                    "4": "string_array_ptr",
                    "8": "data_ptr"
                },
                "uVar6": {
                    "1": "return_val",
                    "2": "output",
                    "25": "return_value",
                    "3": "result"
                }
            },
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "code": "\nundefined4 process_data_00004db8(int input_data)\n\n{\n  char current_char;\n  dword offset;\n  int result;\n  char *str_ptr;\n  char **data_ptr;\n  undefined4 return_value;\n  char *char_ptr;\n  \n  offset = relocation_table[16].r_offset;\n  if ((relocation_table[16].r_offset != 0) &&\n     (*(int *)(relocation_table[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  data_ptr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (data_ptr == (char **)&DAT_000079b8) {\n    data_ptr = *(char ***)(offset + 4);\n  }\n  else if (data_ptr == (char **)&DAT_000079d8) {\n    data_ptr = *(char ***)(offset + 8);\n  }\n  else if (data_ptr == (char **)&DAT_00007998) {\n    data_ptr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data_ptr + 3) << 0x1c) < 0) && (data_ptr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,data_ptr), result == 0)) {\n    char_ptr = (char *)(input_data + -1);\n    do {\n      while( true ) {\n        char_ptr = char_ptr + 1;\n        current_char = *char_ptr;\n        str_ptr = data_ptr[2] + -1;\n        data_ptr[2] = str_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)str_ptr) {\n            char_ptr = *data_ptr;\n            return_value = 10;\n            *data_ptr = char_ptr + 1;\n            *char_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,data_ptr);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)str_ptr < 0) && (((int)str_ptr < (int)data_ptr[6] || (current_char == '\\n')))) break;\n        str_ptr = *data_ptr;\n        *data_ptr = str_ptr + 1;\n        *str_ptr = current_char;\n      }\n      result = FUN_00005404(offset,current_char,data_ptr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_00004db8",
            "entrypoint": "0x00004db8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "FUN_00004db8": "process_data_00004db8",
                "cVar1": "current_char",
                "dVar2": "offset",
                "iVar3": "result",
                "param_1": "input_data",
                "pcVar4": "str_ptr",
                "pcVar7": "char_ptr",
                "ppcVar5": "data_ptr",
                "uVar6": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "additional_data": {
                "FUN_00004dc8": {
                    "1": "update_values",
                    "2": "update_data",
                    "21": "update_value"
                },
                "bVar3": {
                    "1": "is_valid",
                    "30": "is_positive"
                },
                "iVar1": {
                    "2": "return_value",
                    "29": "result"
                },
                "param_1": {
                    "1": "param_a",
                    "2": "param",
                    "4": "input_param",
                    "6": "data"
                },
                "param_2": {
                    "1": "base_addr",
                    "2": "buffer",
                    "4": "input2",
                    "5": "address",
                    "6": "data"
                },
                "uVar2": {
                    "1": "new_data",
                    "21": "new_value",
                    "7": "updated_value"
                }
            },
            "called": [
                "FUN_00000490"
            ],
            "calling": [],
            "code": "\nvoid update_value_00004dc8(undefined4 data,int data)\n\n{\n  int result;\n  uint new_value;\n  bool is_positive;\n  \n  result = FUN_00000490(data,(int)*(short *)(data + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    new_value = *(int *)(data + 0x54) + result;\n  }\n  else {\n    new_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data + 0x54) = new_value;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_00004dc8",
            "entrypoint": "0x00004dc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "bVar3": "is_positive",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "data",
                "uVar2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dee": {
            "additional_data": {
                "FUN_000004f2": {
                    "1": "process_input_data",
                    "2": "process_data",
                    "3": "perform_action"
                },
                "FUN_00000e38": {
                    "1": "execute_operation",
                    "3": "process_data"
                },
                "FUN_00004dee": {
                    "1": "execute_operation",
                    "2": "extract_and_process_data",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_param1",
                    "3": "result",
                    "4": "data",
                    "6": "input",
                    "8": "output"
                },
                "param_2": {
                    "1": "input_address",
                    "2": "input_data",
                    "4": "data_ptr",
                    "5": "data_pointer",
                    "6": "input"
                },
                "param_3": {
                    "1": "input3",
                    "2": "input_param3",
                    "3": "param_1",
                    "6": "param3",
                    "7": "param1",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "input_param4",
                    "3": "param_2",
                    "6": "param4",
                    "7": "param2",
                    "9": "param_4"
                },
                "uVar1": {
                    "24": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "calling": [],
            "code": "\nundefined4 process_data_00004dee(undefined4 output,int input,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    FUN_000004f2(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = FUN_00000e38(param_3,param_4);\n  return result;\n}\n\n",
            "current_name": "process_data_00004dee",
            "entrypoint": "0x00004dee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e26": {
            "additional_data": {
                "<bVar3>": {
                    "1": "is_negative"
                },
                "<iVar1>": {
                    "1": "result"
                },
                "<param_1>": {
                    "1": "data"
                },
                "<param_2>": {
                    "1": "address"
                },
                "<uVar2>": {
                    "1": "new_value"
                },
                "FUN_00004e26": {
                    "1": "update_flags",
                    "2": "update_data",
                    "3": "update_parameter",
                    "6": "update_flag",
                    "9": "update_status"
                },
                "bVar3": {
                    "1": "is_result_minus_one",
                    "14": "is_error",
                    "4": "is_result_negative",
                    "8": "is_negative"
                },
                "bool bVar3": {
                    "1": "is_failure"
                },
                "iVar1": {
                    "1": "return_value",
                    "29": "result"
                },
                "int param_2": {
                    "1": "data_ptr"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "ptr",
                    "3": "input_param",
                    "4": "param"
                },
                "param_2": {
                    "1": "buffer",
                    "14": "data",
                    "2": "data_offset",
                    "3": "param2"
                },
                "uVar2": {
                    "1": "flag_value",
                    "14": "updated_value",
                    "2": "updated_flag",
                    "3": "updated_flags"
                },
                "undefined4 param_1": {
                    "1": "status"
                },
                "ushort uVar2": {
                    "1": "updated_value"
                }
            },
            "called": [
                "FUN_000004f2"
            ],
            "calling": [],
            "code": "\nvoid update_status_00004e26(undefined4 param,int data)\n\n{\n  int result;\n  ushort updated_value;\n  bool is_error;\n  \n  result = FUN_000004f2(param,(int)*(short *)(data + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_status_00004e26",
            "entrypoint": "0x00004e26",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "bVar3": "is_error",
                "iVar1": "result",
                "param_1": "param",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e52": {
            "additional_data": {
                "FUN_00004e52": {
                    "1": "compare_buffers",
                    "10": "compare_bytes",
                    "17": "compare_byte_arrays",
                    "2": "compare_arrays"
                },
                "bVar1": {
                    "1": "current_byte_array2",
                    "2": "value2",
                    "3": "byte_2",
                    "4": "array2_element",
                    "5": "byte2",
                    "6": "current_byte1"
                },
                "bVar3": {
                    "1": "bytes_match",
                    "2": "are_equal",
                    "23": "is_equal",
                    "5": "is_match"
                },
                "param_1": {
                    "1": "data_1",
                    "16": "array1",
                    "2": "input_bytes1",
                    "4": "byte_array1"
                },
                "param_2": {
                    "1": "comparison_buffer",
                    "16": "array2",
                    "2": "bytes2",
                    "4": "byte_array2"
                },
                "uVar2": {
                    "1": "array1_byte",
                    "2": "byte_value",
                    "3": "byte_1",
                    "4": "array1_element",
                    "6": "current_byte2"
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "code": "\nint compare_byte_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte current_byte1;\n  uint byte1;\n  bool is_equal;\n  \n  do {\n    byte1 = (uint)*array1;\n    current_byte1 = *array2;\n    is_equal = byte1 == 1;\n    if (byte1 != 0) {\n      is_equal = byte1 == current_byte1;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (is_equal);\n  return byte1 - current_byte1;\n}\n\n",
            "current_name": "compare_byte_arrays_00004e52",
            "entrypoint": "0x00004e52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "bVar1": "current_byte1",
                "bVar3": "is_equal",
                "param_1": "array1",
                "param_2": "array2",
                "uVar2": "byte1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e66": {
            "additional_data": {
                "FUN_00004e66": {
                    "1": "compare_and_adjust",
                    "2": "compare_byte_arrays",
                    "4": "compare_arrays",
                    "6": "find_difference"
                },
                "iVar2": {
                    "1": "offset_difference",
                    "2": "result",
                    "24": "difference"
                },
                "param_1": {
                    "1": "bytes_array",
                    "14": "data",
                    "2": "buffer",
                    "6": "array1"
                },
                "param_2": {
                    "1": "first_index",
                    "11": "start_index",
                    "7": "offset"
                },
                "param_3": {
                    "1": "array1_size",
                    "2": "array_length",
                    "20": "length",
                    "3": "array1_length"
                },
                "pbVar1": {
                    "1": "current_element1",
                    "22": "current_byte",
                    "3": "ptr1"
                },
                "pbVar3": {
                    "1": "current_byte_array2",
                    "18": "next_byte",
                    "3": "ptr2"
                },
                "uVar4": {
                    "1": "source_byte",
                    "11": "current_byte_value",
                    "2": "current_byte",
                    "4": "byte_value",
                    "5": "current_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "code": "\nint find_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "current_name": "find_difference_00004e66",
            "entrypoint": "0x00004e66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e66": "find_difference_00004e66",
                "iVar2": "difference",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f84": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "some_array"
                },
                "FUN_00004f84": {
                    "1": "convert_string_to_int",
                    "10": "parse_integer",
                    "2": "convert_to_number",
                    "4": "convert_string_to_number",
                    "6": "parse_number"
                },
                "iVar5": {
                    "1": "result",
                    "5": "comparison_result",
                    "6": "compare_result",
                    "7": "comparison"
                },
                "param_1": {
                    "1": "input_bytes",
                    "18": "input_string",
                    "2": "input_str",
                    "7": "input"
                },
                "param_2": {
                    "1": "remainder",
                    "4": "output_pointer",
                    "5": "remaining_string",
                    "6": "output_string",
                    "7": "output"
                },
                "param_3": {
                    "1": "radix",
                    "30": "base"
                },
                "pbVar8": {
                    "1": "current_char_ptr",
                    "10": "current_char",
                    "16": "current_byte",
                    "2": "current_ptr"
                },
                "pbVar9": {
                    "1": "next_char_ptr",
                    "10": "next_char",
                    "17": "next_byte",
                    "2": "next_ptr"
                },
                "uVar1": {
                    "1": "number",
                    "2": "parsed_number",
                    "24": "result",
                    "4": "parsed_integer"
                },
                "uVar2": {
                    "1": "digit",
                    "18": "current_char",
                    "9": "ch"
                },
                "uVar3": {
                    "1": "char_check",
                    "2": "flag",
                    "22": "is_negative"
                },
                "uVar4": {
                    "1": "converted_digit",
                    "16": "digit",
                    "3": "char_value",
                    "7": "digit_value"
                },
                "uVar6": {
                    "1": "int_value_max",
                    "15": "max_value",
                    "2": "max_dividend",
                    "4": "max_result"
                },
                "uVar7": {
                    "1": "div",
                    "17": "quotient",
                    "2": "max_divisor",
                    "3": "dividend",
                    "4": "divisor"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "code": "\nuint parse_integer_00004f84(byte *input_string,byte **output,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint digit;\n  int status;\n  uint max_value;\n  uint quotient;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00004ed6;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  max_value = is_negative + 0x7fffffff;\n  status = 0;\n  quotient = max_value / base;\n  result = 0;\n  do {\n    digit = current_char - 0x30;\n    if (9 < digit) {\n      if (current_char - 0x41 < 0x1a) {\n        digit = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (status != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(max_value - base * quotient) < (int)digit)))) {\n        status = -1;\n      }\n      else {\n        result = result * base + digit;\n        status = 1;\n      }\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status == -1) {\n    *(undefined4 *)some_array[16].r_offset = 0x22;\n    result = max_value;\n    if (output == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00004f64;\n  }\n  input_string = next_byte + -1;\nLAB_00004f64:\n  *output = input_string;\n  return result;\n}\n\n",
            "current_name": "parse_integer_00004f84",
            "entrypoint": "0x00004f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "some_array",
                "FUN_00004f84": "parse_integer_00004f84",
                "iVar5": "status",
                "param_1": "input_string",
                "param_2": "output",
                "param_3": "base",
                "pbVar8": "current_byte",
                "pbVar9": "next_byte",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "digit",
                "uVar6": "max_value",
                "uVar7": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f98": {
            "additional_data": {
                "*puVar1": {
                    "1": "is_day_of_week_valid"
                },
                "0x14": {
                    "1": "array_length"
                },
                "FUN_00004f98": {
                    "1": "calculate_date_offset",
                    "2": "calculate_leap_year",
                    "20": "calculate_day_of_week",
                    "4": "calculate_weekday"
                },
                "FUN_000056b0": {
                    "1": "allocate_memory",
                    "2": "initialize_result_array"
                },
                "SBORROW4": {
                    "1": "subtract_borrow"
                },
                "UNK_00007b98": {
                    "1": "year_data"
                },
                "iVar4": {
                    "1": "days_from_first_day",
                    "2": "day_of_week_offset",
                    "3": "total_days",
                    "4": "day_of_week"
                },
                "iVar6": {
                    "1": "day_of_year",
                    "2": "days_since_start",
                    "3": "base_days",
                    "5": "total_days"
                },
                "iVar8": {
                    "1": "month_counter",
                    "11": "i",
                    "2": "counter",
                    "3": "month_index",
                    "6": "index"
                },
                "iVar9": {
                    "1": "days_of_week_offset",
                    "2": "offset",
                    "3": "day_of_week",
                    "4": "day_offset"
                },
                "implified_name": {
                    "1": "descriptive_name"
                },
                "param_1": {
                    "1": "input_date",
                    "30": "year"
                },
                "puVar1": {
                    "1": "output",
                    "12": "result",
                    "14": "result_array",
                    "2": "date_array"
                },
                "puVar5": {
                    "1": "table_pointer",
                    "2": "current_array",
                    "3": "ptr"
                },
                "uParam1[19]": {
                    "1": "day_difference"
                },
                "uParam1[9]": {
                    "1": "is_negative"
                },
                "uVar10": {
                    "1": "is_multipleof400",
                    "10": "is_divisible_by400",
                    "2": "is_divisible",
                    "3": "is_multiple_of400"
                },
                "uVar10_2": {
                    "1": "is_divisible_by400"
                },
                "uVar11": {
                    "1": "start_of_day_offset"
                },
                "uVar12": {
                    "1": "is_earlier_month"
                },
                "uVar13": {
                    "1": "is_earlier_year"
                },
                "uVar2": {
                    "1": "return_value",
                    "26": "is_leap_year",
                    "4": "result"
                },
                "uVar3": {
                    "1": "result",
                    "14": "day_of_week",
                    "2": "day_offset",
                    "5": "day_of_week_offset"
                },
                "uVar7": {
                    "1": "is_multiple",
                    "2": "leap_year_adjustment",
                    "3": "is_leap_year_temp",
                    "4": "leap_year"
                }
            },
            "called": [
                "FUN_000056b0"
            ],
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "code": "\nundefined4 calculate_day_of_week_00004f98(uint year)\n\n{\n  uint *result_array;\n  undefined4 is_leap_year;\n  uint day_of_week;\n  int day_of_week;\n  uint *ptr;\n  int total_days;\n  uint leap_year;\n  int i;\n  int day_offset;\n  uint is_divisible_by400;\n  \n  result_array = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    is_leap_year = 0;\n  }\n  else {\n    total_days = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result_array[1] = year;\n    is_divisible_by400 = (uint)(year % 400 == 0);\n    ptr = result_array;\n    do {\n      day_of_week = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            day_of_week = 0;\n          }\n          else {\n            day_of_week = 1;\n          }\n        }\n        else {\n          day_of_week = 0;\n        }\n        day_of_week = day_of_week + total_days + day_of_week + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        day_of_week = total_days + day_of_week;\n      }\n      else {\n        leap_year = is_divisible_by400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leap_year = 1;\n        }\n        i = 0;\n        day_of_week = total_days;\n        while( true ) {\n          i = i + 1;\n          if ((int)ptr[3] <= i) break;\n          day_of_week = day_of_week + *(int *)(&month_offsets + i * 4 + leap_year * 0x30);\n        }\n        day_offset = day_of_week - (day_of_week + 4U) % 7;\n        if (day_offset < 0) {\n          day_offset = day_offset + 7;\n        }\n        for (day_offset = (ptr[4] - 1) * 7 + day_offset;\n            *(int *)(&month_offsets + i * 4 + leap_year * 0x30) <= day_offset; day_offset = day_offset + -7) {\n        }\n        day_of_week = day_of_week + day_offset;\n      }\n      day_of_week = ptr[10] + day_of_week * 0x15180 + ptr[6];\n      ptr[8] = day_of_week;\n      ptr[9] = (int)day_of_week >> 0x1f;\n      ptr = ptr + 10;\n    } while (result_array + 0x14 != ptr);\n    day_of_week = result_array[9];\n    is_divisible_by400 = result_array[0x13];\n    *result_array = (uint)((int)((day_of_week - is_divisible_by400) - (uint)(result_array[8] < result_array[0x12])) < 0 !=\n                    (subtract_check(day_of_week,is_divisible_by400) !=\n                    subtract_check(day_of_week - is_divisible_by400,(uint)(result_array[8] < result_array[0x12]))));\n    is_leap_year = 1;\n  }\n  return is_leap_year;\n}\n\n",
            "current_name": "calculate_day_of_week_00004f98",
            "entrypoint": "0x00004f98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "SBORROW4": "subtract_check",
                "UNK_00007b98": "month_offsets",
                "iVar4": "day_of_week",
                "iVar6": "total_days",
                "iVar8": "i",
                "iVar9": "day_offset",
                "param_1": "year",
                "puVar1": "result_array",
                "puVar5": "ptr",
                "uVar10": "is_divisible_by400",
                "uVar2": "is_leap_year",
                "uVar3": "day_of_week",
                "uVar7": "leap_year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050e8": {
            "additional_data": {
                "&DAT_1fff0deb": {
                    "1": "starting_address"
                },
                "DAT_1fff0deb": {
                    "1": "data_ptr",
                    "3": "starting_address",
                    "7": "memory_address"
                },
                "FUN_000050e8": {
                    "1": "get_memory_data_address",
                    "2": "get_memory_data",
                    "4": "get_starting_address",
                    "5": "get_data_address",
                    "7": "get_memory_address",
                    "8": "get_data_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nundefined * get_data_pointer_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_data_pointer_000050e8",
            "entrypoint": "0x000050e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050e8": "get_data_pointer_000050e8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050f4": {
            "additional_data": {
                "DAT_1fff0deb": {
                    "1": "data_pointer",
                    "11": "memory_address",
                    "2": "data_address",
                    "3": "starting_address"
                },
                "FUN_000050f4": {
                    "1": "get_data_ptr",
                    "12": "get_memory_address",
                    "2": "get_base_address",
                    "3": "get_starting_address",
                    "5": "get_data_address"
                },
                "undefined": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_memory_address_000050f4",
            "entrypoint": "0x000050f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005100": {
            "additional_data": {
                "(&DAT_00007a5c)": {
                    "1": "delimiters1"
                },
                "(&DAT_00007a5f)": {
                    "1": "relocation_data1"
                },
                "(&DAT_00007a85)": {
                    "1": "delimiters2"
                },
                "DAT_00007a5c": {
                    "1": "magic_value"
                },
                "DAT_00007a5f": {
                    "1": "target_string2"
                },
                "DAT_1fff0dbc": {
                    "1": "parsed_value4"
                },
                "DAT_1fff0dc7": {
                    "1": "parsed_value3"
                },
                "DAT_1fff0dd4": {
                    "1": "flag3"
                },
                "DAT_1fff0dd8": {
                    "1": "output_string1"
                },
                "DAT_1fff0ddc": {
                    "1": "ptr_to_data2"
                },
                "DVar1": {
                    "1": "offset"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "relocation_table"
                },
                "FUN_00004bd0": {
                    "11": "allocate_memory"
                },
                "FUN_00004e52": {
                    "1": "is_data_valid",
                    "3": "check_validity",
                    "5": "check_condition"
                },
                "FUN_00004f98": {
                    "1": "perform_operation"
                },
                "FUN_00005100": {
                    "1": "parse_and_set_parameters",
                    "2": "parse_input_data",
                    "3": "process_data",
                    "4": "parse_configuration",
                    "7": "parse_data"
                },
                "FUN_000056a0": {
                    "1": "get_string_from_offset",
                    "2": "find_data"
                },
                "FUN_000056b0": {
                    "1": "get_memory_offset",
                    "2": "get_elf32_rel_offset"
                },
                "FUN_00005780": {
                    "1": "cleanup",
                    "3": "reset_data"
                },
                "FUN_00005e68": {
                    "1": "parse_coordinates_from_format",
                    "2": "parse_format_string",
                    "3": "parse_string"
                },
                "FUN_00005ebc": {
                    "1": "copy_string_to_memory",
                    "2": "copy_data",
                    "8": "copy_string"
                },
                "FUN_00005ecc": {
                    "1": "parse_string",
                    "2": "parse_number",
                    "4": "get_string_length"
                },
                "FUN_00005fd8": {
                    "1": "parse_string"
                },
                "bVar8": {
                    "1": "is_first_run",
                    "2": "flag2",
                    "3": "flag"
                },
                "dVar1": {
                    "1": "relocation_offset",
                    "14": "offset",
                    "2": "rel_offset"
                },
                "iVar2": {
                    "1": "device_info",
                    "16": "result",
                    "2": "function_result"
                },
                "iVar4": {
                    "1": "check",
                    "2": "temp_var",
                    "3": "result",
                    "4": "return_value",
                    "6": "status"
                },
                "iVar5": {
                    "1": "length",
                    "2": "temp2",
                    "3": "parse_result",
                    "7": "count"
                },
                "local_2c": {
                    "1": "parsed_values_array",
                    "2": "temp_string_array"
                },
                "local_30": {
                    "1": "var7",
                    "2": "val7",
                    "4": "length"
                },
                "local_32": {
                    "1": "value_f",
                    "3": "num6",
                    "4": "val6",
                    "6": "value6"
                },
                "local_34": {
                    "1": "var2",
                    "3": "num5",
                    "4": "val5",
                    "6": "value5"
                },
                "local_36": {
                    "1": "ushort_val_4",
                    "3": "num4",
                    "4": "val4",
                    "6": "value4"
                },
                "local_38": {
                    "1": "ushort_val_3",
                    "3": "num3",
                    "4": "val3",
                    "6": "value3"
                },
                "local_3a": {
                    "1": "minute",
                    "3": "num2",
                    "4": "val2",
                    "6": "value2"
                },
                "local_3c": {
                    "1": "hour1",
                    "3": "num1",
                    "4": "val1",
                    "6": "value1"
                },
                "pcVar3": {
                    "1": "string_ptr",
                    "2": "input_str",
                    "3": "data_ptr"
                },
                "pcVar3[local_30]": {
                    "1": "current_char"
                },
                "pcVar7": {
                    "1": "config_data",
                    "2": "temp_str",
                    "4": "temp_ptr"
                },
                "piVar10": {
                    "1": "config_offset",
                    "2": "ptr2"
                },
                "piVar12": {
                    "1": "int_ptr2",
                    "3": "ptr4"
                },
                "puVar11": {
                    "1": "pointer3",
                    "2": "ptr3",
                    "4": "ptr2"
                },
                "puVar9": {
                    "1": "pointer1",
                    "5": "ptr1"
                },
                "uVar6": {
                    "1": "unsigned_var",
                    "13": "flag",
                    "2": "data_type"
                }
            },
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid parse_data_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *str;\n  int status;\n  int count;\n  undefined flag;\n  char *temp_ptr;\n  bool flag;\n  ushort *ptr1;\n  int *ptr2;\n  ushort *ptr2;\n  int *ptr4;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int length;\n  char *str_array [2];\n  \n  offset = array[16].r_offset;\n  result = FUN_000056b0();\n  str = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (str == (char *)0x0) {\n    array[28].r_info = (dword)&DAT_00007a5f;\n    array[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = str;\n    DAT_1fff0ddc = str;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (status = FUN_00004e52(), status != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    status = FUN_00005ecc(str);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,status + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,str);\n    }\n    if (*str == ':') {\n      str = str + 1;\n    }\n    status = FUN_00005e68(str,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&length);\n    if (0 < status) {\n      temp_ptr = str + length;\n      if (current_char == '-') {\n        temp_ptr = temp_ptr + 1;\n        status = -1;\n      }\n      else {\n        if (current_char == '+') {\n          temp_ptr = temp_ptr + 1;\n        }\n        status = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      ptr1 = &value2;\n      ptr2 = &length;\n      ptr2 = &value3;\n      ptr4 = &length;\n      count = FUN_00005e68(temp_ptr,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                           &value3,&length);\n      if (0 < count) {\n        *(uint *)(result + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * status;\n        array[28].r_info = (dword)&DAT_1fff0dc7;\n        temp_ptr = temp_ptr + length;\n        status = FUN_00005e68(temp_ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&length,ptr1,ptr2,ptr2,\n                             ptr4);\n        if (status < 1) {\n          array[29].r_offset = array[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          array[29].r_offset = (dword)&DAT_1fff0dbc;\n          str = temp_ptr + length;\n          if (temp_ptr[length] == '-') {\n            str = str + 1;\n            status = -1;\n          }\n          else {\n            if (temp_ptr[length] == '+') {\n              str = str + 1;\n            }\n            status = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          length = 0;\n          count = FUN_00005e68(str,\"%hu%n:%hu%n:%hu%n\",&value1,&length,&value2,&length,\n                               &value3,&length);\n          if (count < 1) {\n            status = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            status = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * status;\n          }\n          *(int *)(result + 0x50) = status;\n          str = str + length;\n          flag = false;\n          status = result;\n          while( true ) {\n            if (*str == ',') {\n              str = str + 1;\n            }\n            if (*str == 'M') {\n              count = FUN_00005e68(str,\"M%hu%n.%hu%n.%hu%n\",&value4,&length,&value5,\n                                   &length,&value6,&length);\n              if (count != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(status + 0xc) = (uint)value4;\n              *(uint *)(status + 0x10) = (uint)value5;\n              *(undefined *)(status + 8) = 0x4d;\n              *(uint *)(status + 0x14) = (uint)value6;\n              temp_ptr = str + length;\n            }\n            else {\n              if (*str == 'J') {\n                str = str + 1;\n                flag = 0x4a;\n              }\n              else {\n                flag = 0x44;\n              }\n              value6 = FUN_00005fd8(str,str_array,10);\n              temp_ptr = str_array[0];\n              if (str_array[0] == str) {\n                if (flag) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(status + 8) = flag;\n                *(uint *)(status + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            length = 0;\n            if (*temp_ptr == '/') {\n              FUN_00005e68(temp_ptr,&DAT_00007a85,&value1,&length,&value2,&length,&value3,\n                           &length);\n            }\n            *(uint *)(status + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            status = status + 0x28;\n            str = temp_ptr + length;\n            if (flag) break;\n            flag = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "parse_data_00005100",
            "entrypoint": "0x00005100",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "array",
                "FUN_00005100": "parse_data_00005100",
                "bVar8": "flag",
                "dVar1": "offset",
                "iVar2": "result",
                "iVar4": "status",
                "iVar5": "count",
                "local_2c": "str_array",
                "local_30": "length",
                "local_32": "value6",
                "local_34": "value5",
                "local_36": "value4",
                "local_38": "value3",
                "local_3a": "value2",
                "local_3c": "value1",
                "pcVar3": "str",
                "pcVar3[local_30]": "current_char",
                "pcVar7": "temp_ptr",
                "piVar10": "ptr2",
                "piVar12": "ptr4",
                "puVar11": "ptr2",
                "puVar9": "ptr1",
                "uVar6": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005404": {
            "additional_data": {
                "&DAT_00007998": {
                    "1": "constant3"
                },
                "&DAT_000079b8": {
                    "1": "dat_000079b8"
                },
                "&DAT_000079d8": {
                    "1": "constant2"
                },
                "(char)param_2": {
                    "1": "(char)value"
                },
                "(uint)*(ushort *)(param_3 + 3) << 0x1f": {
                    "1": "shifted_value"
                },
                "*(ushort *)(param_3 + 3)": {
                    "1": "ushort_value"
                },
                "*param_3": {
                    "1": "data"
                },
                "0x18": {
                    "1": "offset"
                },
                "0x1c": {
                    "1": "shift_value"
                },
                "0xc": {
                    "1": "offset3"
                },
                "0xffffffff": {
                    "1": "0xffffffff"
                },
                "4": {
                    "1": "offset1"
                },
                "8": {
                    "1": "offset2"
                },
                "DAT_00007998": {
                    "1": "constant3"
                },
                "DAT_000079b8": {
                    "1": "data_1"
                },
                "DAT_000079d8": {
                    "1": "constant2"
                },
                "FUND_00004158": {
                    "1": "check_buffer_limits"
                },
                "FUND_000042a4": {
                    "1": "initialize"
                },
                "FUND_000054a8": {
                    "1": "process_data_internal"
                },
                "FUNG_00005404": {
                    "1": "reverse_and_update_data"
                },
                "FUN_00004158": {
                    "1": "some_function",
                    "2": "check_data",
                    "7": "check_condition"
                },
                "FUN_000042a4": {
                    "1": "perform_operation",
                    "3": "perform_action",
                    "6": "initialize"
                },
                "FUN_00005404": {
                    "1": "decode_and_process_data",
                    "19": "process_data"
                },
                "FUN_000054a8": {
                    "1": "calculate_result_function",
                    "2": "calculate_result",
                    "3": "perform_operation"
                },
                "iVar1": {
                    "1": "data_offset",
                    "2": "offset",
                    "6": "result",
                    "8": "temp_var1"
                },
                "iVar1 + 1": {
                    "1": "incremented_var"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data_ptr",
                    "3": "input_value",
                    "4": "input_param",
                    "5": "input_ptr"
                },
                "param_2": {
                    "1": "flags",
                    "2": "length",
                    "3": "output_value",
                    "5": "flag",
                    "7": "value"
                },
                "param_2 & 0xff": {
                    "1": "mask_value"
                },
                "param_3": {
                    "1": "array_ptr",
                    "2": "array_param",
                    "4": "data",
                    "5": "data_ptr",
                    "7": "buffer"
                },
                "param_3[2]": {
                    "1": "data_array_index"
                },
                "param_3[4]": {
                    "1": "buffer_ptr[4]"
                },
                "param_3[5]": {
                    "1": "limit"
                },
                "param_3[6]": {
                    "1": "temp_var3"
                },
                "param_4": {
                    "1": "config_param",
                    "10": "param",
                    "2": "unknown_value",
                    "3": "additional_param"
                },
                "puVar3": {
                    "1": "data_byte",
                    "2": "ptr_var",
                    "3": "temp_var3",
                    "7": "ptr"
                },
                "uVar2": {
                    "1": "temp_variable2",
                    "2": "temp_var_2",
                    "5": "value",
                    "8": "temp_var2"
                }
            },
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "code": "\nuint process_data_00005404(int input,uint value,int *buffer,undefined4 param)\n\n{\n  int temp_var1;\n  uint temp_var2;\n  undefined *ptr;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(input + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(input + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(input + 0xc);\n  }\n  data_array_index = temp_var3;\n  temp_var2 = (uint)*(ushort *)(buffer + 3);\n  temp_var1 = temp_var2 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var2 = temp_var4, temp_var2 != 0)) ||\n     (temp_var1 = FUN_000054a8(input,buffer,temp_var1,temp_var2,param), temp_var1 == 0)) {\n    temp_var1 = *buffer - temp_var4;\n    value = value & 0xff;\n    if ((temp_var1 < limit) || (temp_var1 = FUN_00004158(input,buffer), temp_var1 == 0)) {\n      data_array_index = data_array_index + -1;\n      ptr = (undefined *)*buffer;\n      *buffer = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (limit != temp_var1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      temp_var1 = FUN_00004158(input,buffer);\n      if (temp_var1 == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_00005404",
            "entrypoint": "0x00005404",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_2": "(char)value",
                "FUN_00005404": "process_data_00005404",
                "iVar1": "temp_var1",
                "param_1": "input",
                "param_2": "value",
                "param_3": "buffer",
                "param_3[2]": "data_array_index",
                "param_3[4]": "temp_var4",
                "param_3[5]": "limit",
                "param_3[6]": "temp_var3",
                "param_4": "param",
                "puVar3": "ptr",
                "uVar2": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000054a8": {
            "additional_data": {
                "&DAT_00007998": {
                    "1": "data3"
                },
                "&DAT_000079b8": {
                    "1": "data1"
                },
                "&DAT_000079d8": {
                    "1": "data2"
                },
                "*param_1": {
                    "1": "result"
                },
                "*param_2": {
                    "1": "data"
                },
                "FUN_000042a4": {
                    "1": "perform_action1"
                },
                "FUN_00004b34": {
                    "1": "execute_process"
                },
                "FUN_000054a8": {
                    "1": "extract_integer_from_param",
                    "2": "parse_data",
                    "3": "process_relocation",
                    "5": "process_function",
                    "9": "process_data"
                },
                "FUN_00005700": {
                    "1": "handle_error"
                },
                "F_UND05a8": {
                    "1": "decode_data"
                },
                "dVar2": {
                    "1": "var2",
                    "17": "offset",
                    "2": "dword_var2",
                    "3": "temp2"
                },
                "param_1": {
                    "1": "relocation_result",
                    "13": "output_param",
                    "2": "output1",
                    "3": "output",
                    "4": "result"
                },
                "param_2": {
                    "1": "input1",
                    "13": "input_param",
                    "2": "input_ptr",
                    "3": "input_data"
                },
                "uVar1": {
                    "1": "first_var",
                    "2": "flag1",
                    "3": "flag",
                    "4": "temp_var1"
                },
                "uVar3": {
                    "1": "ushort_value2",
                    "2": "temp1",
                    "3": "temp3",
                    "4": "value2"
                },
                "uVar4": {
                    "1": "relocation_value",
                    "2": "temp_val1",
                    "3": "temp4"
                },
                "uVar5": {
                    "1": "temp4",
                    "2": "value4",
                    "3": "temp3"
                }
            },
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "code": "\nuint process_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort temp_var1;\n  dword offset;\n  ushort value2;\n  uint temp2;\n  uint temp3;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(offset + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(offset + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(offset + 0xc);\n  }\n  temp2 = (uint)*(ushort *)(input_param + 3);\n  value2 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp2 << 0x1c)) {\n    if (-1 < (int)(temp2 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp2 << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          FUN_00004b34(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output_param,input_param);\n  }\n  temp_var1 = *(ushort *)(input_param + 3);\n  temp2 = (uint)temp_var1;\n  value2 = *(ushort *)(input_param + 3);\n  temp3 = temp2 & 1;\n  if ((temp_var1 & 1) == 0) {\n    if (-1 < (int)(temp2 << 0x1e)) {\n      temp3 = input_param[5];\n    }\n    input_param[2] = temp3;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] != 0) {\n    return 0;\n  }\n  if ((temp_var1 & 0x80) == 0) {\n    return temp2 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = value2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_000054a8",
            "entrypoint": "0x000054a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "dVar2": "offset",
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "temp_var1",
                "uVar3": "value2",
                "uVar4": "temp2",
                "uVar5": "temp3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005584": {
            "additional_data": {
                "*param_1": {
                    "1": "quotient"
                },
                "FUN_00005584": {
                    "1": "divide_and_update_remainder",
                    "15": "divide_and_remainder",
                    "2": "divide_and_store",
                    "6": "divide_and_store_remainder"
                },
                "param_1": {
                    "1": "quotient_out",
                    "2": "quotient_pointer",
                    "20": "quotient_and_remainder",
                    "6": "quotient"
                },
                "param_1[1]": {
                    "1": "remainder"
                },
                "param_2": {
                    "31": "dividend"
                },
                "param_3": {
                    "31": "divisor"
                },
                "uVar1": {
                    "31": "remainder"
                },
                "uVar2": {
                    "1": "final_quotient",
                    "2": "quotient_without_remainder",
                    "25": "quotient"
                }
            },
            "called": [],
            "calling": [
                "FUN_00004634"
            ],
            "code": "\nvoid divide_and_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  remainder = remainder;\n  return;\n}\n\n",
            "current_name": "divide_and_remainder_00005584",
            "entrypoint": "0x00005584",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_1[1]": "remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000562c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200[41].r_offset": {
                    "1": "rel_offset"
                },
                "FUN_00004e66": {
                    "1": "check_match"
                },
                "FUN_0000562c": {
                    "1": "reverse_lookup",
                    "2": "find_assignment_offset",
                    "4": "find_key_value_pair",
                    "5": "find_variable_offset"
                },
                "FUN_00005fec": {
                    "1": "initialize_environment",
                    "3": "initialize"
                },
                "FUN_00005ff8": {
                    "1": "post_processing",
                    "3": "cleanup"
                },
                "F_0000562c": {
                    "1": "find_value_offset"
                },
                "cVar1": {
                    "31": "current_char"
                },
                "iVar3": {
                    "1": "compare_result",
                    "14": "result",
                    "2": "check_result",
                    "5": "comparison_result"
                },
                "iVar6": {
                    "1": "input_str_offset",
                    "12": "string_offset",
                    "2": "difference",
                    "3": "string_index",
                    "4": "offset"
                },
                "param_1": {
                    "1": "param_a",
                    "14": "param_1",
                    "2": "input_param",
                    "3": "param1",
                    "7": "param"
                },
                "param_2": {
                    "1": "variable_string",
                    "13": "string",
                    "2": "string_to_search",
                    "8": "input_string"
                },
                "param_3": {
                    "1": "match_index",
                    "2": "output_index",
                    "3": "index",
                    "5": "result_offset",
                    "6": "result_index"
                },
                "pcVar4": {
                    "1": "current_entry_char",
                    "2": "string_ptr",
                    "4": "current_pos",
                    "6": "current_char_ptr",
                    "9": "current_ptr"
                },
                "piVar2": {
                    "1": "offset_list",
                    "2": "current_offset",
                    "3": "rel_array_ptr",
                    "6": "rel_offset_ptr"
                },
                "piVar5": {
                    "1": "rel_array_elem_ptr",
                    "2": "current_pointer",
                    "3": "current_rel_offset_ptr",
                    "4": "current_offset_ptr",
                    "6": "current_rel_offset"
                }
            },
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "calling": [
                "FUN_000056a0"
            ],
            "code": "\nint find_variable_offset_0000562c(undefined4 param_1,char *string,int *result_index)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int result;\n  char *current_ptr;\n  int *current_rel_offset;\n  int string_offset;\n  \n  FUN_00005fec();\n  current_ptr = string;\n  if (rel_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        string_offset = (int)current_ptr - (int)string;\n        rel_offset_ptr = (int *)rel_offset;\n        while( true ) {\n          current_rel_offset = rel_offset_ptr;\n          if (*current_rel_offset == 0) break;\n          result = FUN_00004e66(*current_rel_offset,string,string_offset);\n          rel_offset_ptr = current_rel_offset + 1;\n          if ((result == 0) && (result = *current_rel_offset, *(char *)(result + string_offset) == '=')) {\n            *result_index = (int)((int)current_rel_offset - rel_offset) >> 2;\n            FUN_00005ff8(param_1);\n            return result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param_1);\n  return 0;\n}\n\n",
            "current_name": "find_variable_offset_0000562c",
            "entrypoint": "0x0000562c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200[41].r_offset": "rel_offset",
                "FUN_0000562c": "find_variable_offset_0000562c",
                "cVar1": "current_char",
                "iVar3": "result",
                "iVar6": "string_offset",
                "param_2": "string",
                "param_3": "result_index",
                "pcVar4": "current_ptr",
                "piVar2": "rel_offset_ptr",
                "piVar5": "current_rel_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056a0": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "extracted_binary_function"
                },
                "<param_1>": {
                    "1": "input1"
                },
                "<param_2>": {
                    "1": "param_2"
                },
                "<param_3>": {
                    "1": "param_3"
                },
                "<param_4>": {
                    "1": "param_4"
                },
                "<uStack_8>": {
                    "1": "temp2"
                },
                "<uStack_c>": {
                    "1": "temp1"
                },
                "FUN_0000562c": {
                    "1": "reverse_data_processing",
                    "2": "process_data"
                },
                "FUN_000056a0": {
                    "1": "perform_operation",
                    "2": "extract_and_process_data",
                    "7": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_param",
                    "5": "input_param",
                    "9": "input1"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "buffer_param",
                    "4": "buffer",
                    "5": "arg2",
                    "7": "input2"
                },
                "param_3": {
                    "1": "input_2",
                    "2": "output",
                    "3": "input3",
                    "5": "arg3"
                },
                "param_4": {
                    "1": "data_4",
                    "2": "config_param",
                    "3": "input4",
                    "5": "arg4"
                },
                "uStack_8": {
                    "1": "result2",
                    "2": "output_buffer",
                    "3": "temp2"
                },
                "uStack_c": {
                    "1": "processed_data_source",
                    "2": "stack_var1",
                    "3": "temp1"
                },
                "undefined4 param_1": {
                    "1": "input1"
                },
                "undefined4 param_2": {
                    "1": "input2"
                },
                "undefined4 param_3": {
                    "1": "input3"
                },
                "undefined4 param_4": {
                    "1": "input4"
                }
            },
            "called": [
                "FUN_0000562c"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid process_data_000056a0(undefined4 input1,undefined4 input2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = input2;\n  temp2 = arg3;\n  FUN_0000562c(input1,input2,&temp1,arg4,input1);\n  return;\n}\n\n",
            "current_name": "process_data_000056a0",
            "entrypoint": "0x000056a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "temp2",
                "uStack_c": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b0": {
            "additional_data": {
                "0x1fff02f0": {
                    "1": "constant_value"
                },
                "FUN_000056b0": {
                    "1": "get_initial_memory_address",
                    "15": "get_memory_address",
                    "2": "get_initial_value",
                    "3": "get_default_value",
                    "5": "get_magic_number"
                },
                "FUN_000056b0_return_value": {
                    "1": "maximum_memory_address"
                },
                "return": {
                    "1": "memory_address"
                },
                "undefined4": {
                    "1": "unsigned_int",
                    "14": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "code": "\nuint32_t get_memory_address_000056b0(void)\n\n{\n  memory_address 0x1fff02f0;\n}\n\n",
            "current_name": "get_memory_address_000056b0",
            "entrypoint": "0x000056b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "return": "memory_address",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b8": {
            "additional_data": {
                "FUN_000056b8": {
                    "1": "check_file_status",
                    "13": "check_permissions",
                    "3": "check_memory_permissions"
                },
                "auStack_68": {
                    "1": "aux_stack",
                    "2": "stack_data",
                    "3": "stack_var",
                    "4": "temp_array",
                    "5": "temp_buffer",
                    "9": "buffer"
                },
                "iVar1": {
                    "1": "status_code",
                    "12": "result",
                    "2": "result_code",
                    "9": "status"
                },
                "local_64": {
                    "1": "local_flags",
                    "3": "flags",
                    "4": "value",
                    "5": "local_flag"
                },
                "param_1": {
                    "1": "param",
                    "2": "input1",
                    "3": "input_param",
                    "5": "param1"
                },
                "param_2": {
                    "1": "address_param",
                    "2": "arg2",
                    "4": "param2",
                    "8": "data"
                },
                "param_3": {
                    "1": "result_pointer",
                    "2": "status",
                    "3": "out_result",
                    "5": "output_param",
                    "6": "result",
                    "7": "output"
                },
                "param_4": {
                    "1": "output",
                    "2": "status",
                    "3": "out_flag",
                    "4": "flag",
                    "6": "result"
                },
                "uVar2": {
                    "1": "status_value",
                    "11": "permission",
                    "2": "flags",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00000514"
            ],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_permissions_000056b8(undefined4 param_1,int data,undefined4 *output,uint *result)\n\n{\n  int result;\n  undefined4 permission;\n  undefined buffer [4];\n  uint local_flag;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (result = FUN_00000514(param_1,(int)*(short *)(data + 0xe),buffer), result < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *result = (uint)((local_flag & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *output = permission;\n  return 0;\n}\n\n",
            "current_name": "check_permissions_000056b8",
            "entrypoint": "0x000056b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b8": "check_permissions_000056b8",
                "auStack_68": "buffer",
                "iVar1": "result",
                "local_64": "local_flag",
                "param_2": "data",
                "param_3": "output",
                "param_4": "result",
                "uVar2": "permission"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005700": {
            "additional_data": {
                "FUN_00005700": {
                    "1": "update_parameter_data",
                    "2": "process_function",
                    "21": "process_data"
                },
                "iVar2": {
                    "1": "temp_var1",
                    "2": "result",
                    "7": "return_value",
                    "8": "status",
                    "9": "error_code"
                },
                "local_14": {
                    "1": "temp_ptr",
                    "2": "temp_array",
                    "3": "local_var2",
                    "5": "temp_var2"
                },
                "local_18": {
                    "1": "local1",
                    "2": "value1",
                    "3": "local_var1",
                    "5": "temp_var1"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_data",
                    "3": "input_param",
                    "4": "input_value",
                    "6": "data"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "output_data",
                    "3": "output_param",
                    "4": "output_array",
                    "6": "output"
                },
                "uVar1": {
                    "1": "processed_data",
                    "2": "result_flag",
                    "23": "result"
                }
            },
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "code": "\nvoid process_data_00005700(int data,int *output)\n\n{\n  ushort result;\n  int error_code;\n  int temp_var1;\n  int *temp_var2;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    temp_var1 = data;\n    temp_var2 = output;\n    result = FUN_000056b8(data,output,&temp_var1,&temp_var2);\n    error_code = FUN_00004bd0(data,temp_var1);\n    if (error_code != 0) {\n      *(undefined **)(data + 0x28) = &DAT_0000423d;\n      *output = error_code;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = temp_var1;\n      output[4] = error_code;\n      if ((temp_var2 != (int *)0x0) &&\n         (error_code = FUN_00000534(data,(int)*(short *)((int)output + 0xe)), error_code != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "current_name": "process_data_00005700",
            "entrypoint": "0x00005700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "iVar2": "error_code",
                "local_14": "temp_var2",
                "local_18": "temp_var1",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005780": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array",
                    "4": "relocation_array"
                },
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": {
                    "1": "relocation_offset"
                },
                "FUN_00004b34": {
                    "1": "process_relocation_entry",
                    "2": "process_rel",
                    "3": "process_relocation",
                    "4": "perform_relocation",
                    "8": "apply_relocation"
                },
                "FUN_00005780": {
                    "1": "call_rel_offset_func",
                    "2": "execute_function",
                    "4": "execute_relocation"
                },
                "param_1": {
                    "1": "entry",
                    "2": "relocation_entry",
                    "3": "offset"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "param_2",
                    "4": "param2",
                    "6": "offset"
                },
                "param_3": {
                    "1": "sub_fun_arg3",
                    "12": "param3",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "relocation_entry_param3",
                    "12": "param4",
                    "4": "param_4"
                },
                "r_offset": {
                    "1": "offset"
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid execute_relocation_00005780(undefined4 input_param)\n\n{\n  FUN_00004b34(relocation_offset,input_param);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00005780",
            "entrypoint": "0x00005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "relocation_offset",
                "FUN_00005780": "execute_relocation_00005780",
                "param_1": "input_param",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005790": {
            "additional_data": {
                "FUNC_000045e8": {
                    "1": "perform_initialization",
                    "25": "process_data"
                },
                "FUN_00005790": {
                    "1": "execute_initialization",
                    "2": "initialize_data_structure",
                    "27": "initialize_data"
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid initialize_data_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "initialize_data_00005790",
            "entrypoint": "0x00005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000579c": {
            "additional_data": {
                "FUNC_000045ec": {
                    "1": "copy_data_to_memory",
                    "2": "update_data",
                    "24": "process_data"
                },
                "FUN_0000579c": {
                    "1": "initialize_data_structures",
                    "2": "initialize_memory",
                    "28": "initialize_data"
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid initialize_data_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "initialize_data_0000579c",
            "entrypoint": "0x0000579c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057a8": {
            "additional_data": {
                "FUN_00005404": {
                    "1": "reverse_data"
                },
                "FUN_000057a8": {
                    "1": "process_character",
                    "15": "process_input",
                    "2": "parse_input",
                    "4": "update_buffer"
                },
                "F_00005404": {
                    "1": "handle_error"
                },
                "iVar1": {
                    "1": "decremented_index",
                    "2": "array_index",
                    "4": "remaining_elements",
                    "7": "index",
                    "8": "count"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "param",
                    "8": "status"
                },
                "param_2": {
                    "1": "new_data",
                    "4": "input_value",
                    "5": "input_char",
                    "6": "arg2",
                    "9": "character"
                },
                "param_3": {
                    "1": "buffer_info",
                    "2": "input_data",
                    "3": "array",
                    "5": "data",
                    "6": "data_array",
                    "9": "buffer"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "12": "ptr",
                    "2": "current_char",
                    "7": "current_element"
                }
            },
            "called": [
                "FUN_00005404"
            ],
            "calling": [
                "FUN_000057d2"
            ],
            "code": "\nint process_input_000057a8(undefined4 arg1,int character,undefined4 *buffer)\n\n{\n  int count;\n  undefined *ptr;\n  \n  count = buffer[2] + -1;\n  buffer[2] = count;\n  if ((count < 0) && ((count < (int)buffer[6] || (character == 10)))) {\n    count = FUN_00005404();\n    return count;\n  }\n  ptr = (undefined *)*buffer;\n  *buffer = ptr + 1;\n  *ptr = (char)character;\n  return character;\n}\n\n",
            "current_name": "process_input_000057a8",
            "entrypoint": "0x000057a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057a8": "process_input_000057a8",
                "iVar1": "count",
                "param_1": "arg1",
                "param_2": "character",
                "param_3": "buffer",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057d2": {
            "additional_data": {
                "FUN_000057a8": {
                    "1": "evaluate"
                },
                "FUN_000057d2": {
                    "1": "iterate_array",
                    "11": "process_data",
                    "2": "process_items",
                    "7": "process_array"
                },
                "iVar1": {
                    "1": "index",
                    "2": "iteration_result",
                    "23": "result",
                    "4": "return_value"
                },
                "iVar3": {
                    "1": "initial_length",
                    "2": "iteration_index",
                    "3": "remaining_size",
                    "4": "current_length",
                    "9": "current_index"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "arg1",
                    "5": "input1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "second_param",
                    "13": "arg2",
                    "2": "param_2",
                    "4": "input2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "input_data",
                    "11": "data",
                    "14": "array",
                    "2": "items"
                },
                "param_4": {
                    "1": "data_size",
                    "2": "num_items",
                    "3": "array_size",
                    "6": "array_length",
                    "8": "length",
                    "9": "size"
                },
                "puVar2": {
                    "1": "end_of_items",
                    "13": "end_ptr",
                    "2": "end",
                    "5": "end_pointer"
                }
            },
            "called": [
                "FUN_000057a8"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\nint process_data_000057d2(undefined4 arg1,undefined4 arg2,undefined *array,int size)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = array + size;\n  current_index = size;\n  do {\n    if (array == end_ptr) {\n      return 0;\n    }\n    result = FUN_000057a8(arg1,*array,arg2,size,current_index);\n    size = result + 1;\n    array = array + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "current_name": "process_data_000057d2",
            "entrypoint": "0x000057d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "iVar1": "result",
                "iVar3": "current_index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "array",
                "param_4": "size",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057f8": {
            "additional_data": {
                "FUNC_000045e8": {
                    "1": "function7"
                },
                "FUNC_000045ec": {
                    "1": "cleanup"
                },
                "FUNC_000057f8": {
                    "1": "process_data"
                },
                "FUN_000042a4": {
                    "1": "print_error"
                },
                "FUN_000045ec": {
                    "1": "function2"
                },
                "FUN_000054a8": {
                    "1": "function3"
                },
                "FUN_000057d2": {
                    "1": "function5"
                },
                "FUN_000057f8": {
                    "1": "parse_string",
                    "2": "decode_and_process_data",
                    "3": "parse_input_string",
                    "6": "process_data"
                },
                "FUN_00005b34": {
                    "1": "function1"
                },
                "FUN_00006010": {
                    "1": "function6"
                },
                "bVar4": {
                    "1": "boolean_variable",
                    "2": "is_valid",
                    "3": "is_digit",
                    "4": "bool_var",
                    "5": "is_true"
                },
                "iVar1": {
                    "1": "value1",
                    "10": "result",
                    "2": "result_1",
                    "3": "temp_var1"
                },
                "iVar2": {
                    "1": "value2",
                    "2": "result_2",
                    "3": "result"
                },
                "local_30": {
                    "1": "local_var6",
                    "2": "unused_variable"
                },
                "local_45": {
                    "1": "local_flag3",
                    "2": "local_var_45",
                    "3": "flag"
                },
                "local_6e": {
                    "1": "temp4",
                    "2": "local_var_6e",
                    "3": "plus_flag"
                },
                "local_6f": {
                    "1": "local_var6",
                    "2": "local_var_6f",
                    "3": "space_flag"
                },
                "local_70": {
                    "1": "local_byte_var",
                    "2": "byte_var",
                    "3": "conversion_specifier",
                    "4": "current_char"
                },
                "local_74": {
                    "1": "local_var4",
                    "11": "total_length",
                    "2": "local_var_74",
                    "3": "total"
                },
                "local_7c": {
                    "1": "int_var",
                    "2": "index",
                    "3": "value"
                },
                "local_84": {
                    "1": "decimal_place",
                    "2": "value",
                    "4": "flag2",
                    "6": "precision"
                },
                "local_88": {
                    "1": "local_var1",
                    "11": "flags",
                    "2": "local_var_88",
                    "4": "flag1"
                },
                "local_8c": {
                    "1": "temp_array_ptr",
                    "2": "local_array"
                },
                "param_1": {
                    "1": "param",
                    "2": "arg1",
                    "3": "input_param",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "header_ptr",
                    "2": "arg2",
                    "3": "param2",
                    "5": "param_array"
                },
                "param_3": {
                    "1": "string_param",
                    "2": "input",
                    "3": "buffer",
                    "7": "input_string"
                },
                "param_4": {
                    "1": "counter_ptr",
                    "2": "length",
                    "3": "result",
                    "6": "output_array"
                },
                "pbVar5": {
                    "1": "ptr_data",
                    "2": "current_char",
                    "3": "byte_ptr1",
                    "5": "current_byte",
                    "6": "byte_ptr"
                },
                "pbVar6": {
                    "1": "current_position",
                    "2": "byte_pointer2",
                    "3": "next_byte",
                    "7": "byte_ptr2"
                },
                "piVar3": {
                    "1": "var_3",
                    "2": "array_pointer",
                    "3": "temp_ptr",
                    "4": "ptr"
                },
                "uStack_80": {
                    "1": "temp_var",
                    "2": "stack_var_80",
                    "4": "u_stack_80"
                },
                "unaff_r7": {
                    "1": "temp_var1",
                    "11": "unaff_r7",
                    "2": "unaff",
                    "3": "temp_var"
                }
            },
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint process_data_000057f8(int input_data,undefined4 *param_array,byte *input_string,int *output_array)\n\n{\n  int result;\n  int temp_var2;\n  int *ptr;\n  bool flag;\n  byte *byte_ptr;\n  int unaff_r7;\n  byte *byte_ptr2;\n  int *ptr_array;\n  uint flags;\n  int precision;\n  undefined4 u_stack_80;\n  int value;\n  int total_length;\n  byte current_char;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined flag;\n  undefined4 unused_variable;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (param_array == &DAT_000079b8) {\n    param_array = *(undefined4 **)(input_data + 4);\n  }\n  else if (param_array == (undefined4 *)&DAT_000079d8) {\n    param_array = *(undefined4 **)(input_data + 8);\n  }\n  else if (param_array == (undefined4 *)&DAT_00007998) {\n    param_array = *(undefined4 **)(input_data + 0xc);\n  }\n  if ((-1 < (int)(param_array[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param_array + 3) << 0x16))) {\n    FUNC_000045e8(param_array[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_array + 3) << 0x1c)) || (param_array[4] == 0)) &&\n     (result = FUN_000054a8(input_data,param_array), result != 0)) {\n    if ((-1 < (int)(param_array[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param_array + 3) << 0x16)))\n    {\n      FUNC_000045ec(param_array[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  byte_ptr2 = input_string;\n  ptr_array = output_array;\nLAB_0000588e:\n  byte_ptr = byte_ptr2;\n  if (*byte_ptr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  byte_ptr2 = byte_ptr + 1;\n  if (*byte_ptr == 0x25) {\nLAB_0000589a:\n    result = (int)byte_ptr - (int)input_string;\n    if (result != 0) {\n      temp_var2 = FUN_000057d2(input_data,param_array,input_string,result);\n      if (temp_var2 == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(param_array[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(param_array + 3) << 0x16))) {\n          FUNC_000045ec(param_array[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(param_array + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*byte_ptr == 0) goto LAB_00005a06;\n    precision = -1;\n    u_stack_80 = 0;\n    flags = 0;\n    value = 0;\n    flag = 0;\n    unused_variable = 0;\n    byte_ptr2 = byte_ptr + 1;\n    while( true ) {\n      byte_ptr = byte_ptr2 + 1;\n      result = FUN_00006010(\"#-0+ \",*byte_ptr2,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      byte_ptr2 = byte_ptr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      flag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      flag = 0x2b;\n    }\n    if (*byte_ptr2 == 0x2a) {\n      ptr = ptr_array + 1;\n      value = *ptr_array;\n      ptr_array = ptr;\n      if (value < 0) {\n        value = -value;\n        flags = flags | 2;\n      }\n    }\n    else {\n      flag = false;\n      result = value;\n      byte_ptr = byte_ptr2;\n      while( true ) {\n        if (9 < *byte_ptr - 0x30) break;\n        result = result * 10 + (*byte_ptr - 0x30);\n        flag = true;\n        byte_ptr = byte_ptr + 1;\n      }\n      if (flag) {\n        value = result;\n      }\n    }\n    if (*byte_ptr == 0x2e) {\n      if (byte_ptr[1] == 0x2a) {\n        precision = *ptr_array;\n        if (precision < 0) {\n          precision = -1;\n        }\n        byte_ptr = byte_ptr + 2;\n        ptr_array = ptr_array + 1;\n      }\n      else {\n        flag = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          byte_ptr = byte_ptr + 1;\n          if (9 < *byte_ptr - 0x30) break;\n          result = result * 10 + (*byte_ptr - 0x30);\n          flag = true;\n        }\n        if (flag) {\n          precision = result;\n        }\n      }\n    }\n    result = FUN_00006010(&DAT_00007c02,*byte_ptr,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      byte_ptr = byte_ptr + 1;\n    }\n    input_string = byte_ptr + 1;\n    current_char = *byte_ptr;\n    result = FUN_00006010(\"efgEFG\",current_char,6);\n    if (result == 0) {\n      unaff_r7 = FUN_00005b34(input_data,&flags,param_array,0x57d3,&ptr_array);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      ptr_array = (int *)(((int)ptr_array + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + unaff_r7;\n    byte_ptr2 = input_string;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "current_name": "process_data_000057f8",
            "entrypoint": "0x000057f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "bVar4": "flag",
                "iVar1": "result",
                "iVar2": "temp_var2",
                "local_30": "unused_variable",
                "local_45": "flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "current_char",
                "local_74": "total_length",
                "local_7c": "value",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "ptr_array",
                "param_1": "input_data",
                "param_2": "param_array",
                "param_3": "input_string",
                "param_4": "output_array",
                "pbVar5": "byte_ptr",
                "pbVar6": "byte_ptr2",
                "piVar3": "ptr",
                "uStack_80": "u_stack_80"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005a58": {
            "additional_data": {
                "FUN_00005a58": {
                    "1": "convert_and_count_characters",
                    "12": "process_data",
                    "2": "update_data"
                },
                "bVar6": {
                    "1": "has_condition",
                    "2": "is_flag_set",
                    "3": "is_condition_true",
                    "4": "condition",
                    "8": "is_condition_met"
                },
                "iVar1": {
                    "1": "loop_index1",
                    "11": "index",
                    "2": "loop_counter1",
                    "4": "loop_index"
                },
                "iVar3": {
                    "1": "temp_var1",
                    "2": "status",
                    "4": "return_value",
                    "6": "result"
                },
                "param_1": {
                    "1": "input_param",
                    "11": "input",
                    "13": "input_value"
                },
                "param_2": {
                    "1": "data_arr",
                    "12": "data",
                    "2": "buffer",
                    "3": "data_array",
                    "6": "array"
                },
                "param_3": {
                    "1": "size",
                    "12": "output",
                    "2": "result",
                    "3": "buffer_size",
                    "6": "output_size"
                },
                "param_4": {
                    "1": "temp_val",
                    "10": "param",
                    "2": "param_4",
                    "8": "param4"
                },
                "param_5": {
                    "1": "function_ptr",
                    "16": "callback",
                    "2": "output_function",
                    "4": "callback_func",
                    "7": "callback_function"
                },
                "uVar2": {
                    "1": "result_status",
                    "13": "return_value",
                    "14": "result",
                    "2": "status"
                },
                "uVar4": {
                    "1": "temp_var1",
                    "11": "max_size",
                    "2": "max_buffer_size"
                },
                "uVar5": {
                    "1": "tmp3",
                    "11": "counter",
                    "2": "var",
                    "6": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005b34"
            ],
            "code": "\nundefined4\nprocess_data_00005a58(undefined4 input_value,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int result;\n  uint max_size;\n  uint counter;\n  bool flag;\n  \n  max_size = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_size = data[2];\n  }\n  *output = max_size;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_size + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input_value,param,(int)data + 0x19,1);\n      if (result == -1) goto LAB_00005afc;\n    }\n  }\n  max_size = (uint)*(byte *)((int)data + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_size + 0x43) = 0x30;\n    *(undefined *)((int)data + max_size + 0x44) = *(undefined *)((int)data + 0x45);\n    max_size = max_size + 2;\n  }\n  index = (*callback)(input_value,param,(int)data + 0x43,max_size);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    max_size = data[3];\n    flag = (*data & 6) == 4;\n    if (flag) {\n      max_size = max_size - *output;\n    }\n    if (flag) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    else {\n      max_size = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_size = max_size + (data[2] - data[4]);\n    }\n    for (counter = 0; max_size != counter; counter = counter + 1) {\n      index = (*callback)(input_value,param,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_00005a58",
            "entrypoint": "0x00005a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005a58": "process_data_00005a58",
                "bVar6": "flag",
                "iVar1": "index",
                "iVar3": "result",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "uVar2": "result",
                "uVar4": "max_size",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005b34": {
            "additional_data": {
                "FUN_00005b34": {
                    "1": "decode_and_format_value",
                    "2": "format_number"
                },
                "bVar1": {
                    "1": "is_less",
                    "15": "is_greater",
                    "2": "is_greater_than",
                    "4": "is_negative",
                    "5": "is_positive"
                },
                "bVar2": {
                    "1": "data_value",
                    "14": "byte_value",
                    "3": "digit",
                    "6": "byte_val"
                },
                "bool bVar1": {
                    "1": "is_true"
                },
                "byte bVar2": {
                    "1": "byte_val"
                },
                "char **ppcVar12": {
                    "1": "temp_char_array"
                },
                "char *pcVar14": {
                    "1": "output_char"
                },
                "char *pcVar5": {
                    "1": "hex_array"
                },
                "char *pcVar7": {
                    "1": "char_array"
                },
                "code *local_24": {
                    "1": "temp_function"
                },
                "code *param_4": {
                    "1": "output_function"
                },
                "code *pcVar4": {
                    "1": "result_function"
                },
                "iVar3": {
                    "1": "index_var",
                    "2": "int_var",
                    "3": "index",
                    "5": "int_value",
                    "6": "return_value",
                    "9": "result"
                },
                "iVar5": {
                    "1": "temp"
                },
                "iVar6": {
                    "1": "inner_loop_counter",
                    "2": "status",
                    "3": "loop_var",
                    "5": "return_value"
                },
                "iVar7": {
                    "1": "temp_value2"
                },
                "iVar8": {
                    "1": "value_var"
                },
                "int iVar3": {
                    "1": "index_var"
                },
                "int iVar6": {
                    "1": "loop_var"
                },
                "local_24": {
                    "1": "final_result",
                    "2": "local_variable",
                    "3": "local_func_ptr",
                    "5": "local_callback"
                },
                "param_1": {
                    "1": "input_data",
                    "11": "param1",
                    "2": "input_value",
                    "3": "input1",
                    "6": "input"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "number",
                    "4": "param2",
                    "6": "input_array"
                },
                "param_3": {
                    "1": "input_value_2",
                    "12": "param3",
                    "2": "param_3",
                    "3": "input3",
                    "4": "param"
                },
                "param_4": {
                    "1": "input4",
                    "2": "printer",
                    "4": "param4",
                    "6": "callback_function",
                    "8": "callback"
                },
                "param_5": {
                    "1": "arg_ptr",
                    "2": "ptr",
                    "6": "param5"
                },
                "pcVar14": {
                    "1": "format_buffer",
                    "2": "char_pointer",
                    "3": "char_ptr2"
                },
                "pcVar4": {
                    "1": "code_ptr",
                    "2": "function_pointer",
                    "3": "output",
                    "6": "result"
                },
                "pcVar5": {
                    "1": "char_array",
                    "2": "digit_string",
                    "5": "digits",
                    "8": "hex_digits",
                    "9": "hex_chars"
                },
                "pcVar7": {
                    "1": "format_buffer",
                    "2": "ptr",
                    "3": "str",
                    "4": "current_char",
                    "5": "char_pointer"
                },
                "ppcVar12": {
                    "1": "char_pointer_ptr",
                    "2": "str_ptr_ptr"
                },
                "ppuVar11": {
                    "1": "double_pointer",
                    "2": "double_ptr",
                    "3": "ptr_ptr"
                },
                "puVar9": {
                    "1": "ptr_addr",
                    "2": "ptr",
                    "4": "ptr_value"
                },
                "uVar10": {
                    "1": "temp_val2",
                    "16": "base",
                    "2": "temp_value2"
                },
                "uVar13": {
                    "1": "length_var",
                    "10": "length",
                    "2": "temp_value3",
                    "3": "var13"
                },
                "uVar8": {
                    "1": "unsigned_var",
                    "2": "num",
                    "3": "value1",
                    "8": "value"
                },
                "uint **param_5": {
                    "1": "input_ptr_array"
                },
                "uint **ppuVar11": {
                    "1": "temp_ptr_array"
                },
                "uint *param_2": {
                    "1": "input_array"
                },
                "uint *puVar9": {
                    "1": "temp_ptr"
                },
                "uint uVar10": {
                    "1": "base_val"
                },
                "uint uVar13": {
                    "1": "array_length"
                },
                "uint uVar8": {
                    "1": "temp_val"
                }
            },
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\ncode * convert_to_string_00005b34(undefined4 param1,uint *input_array,undefined4 param3,code *callback,uint **param5\n                   )\n\n{\n  bool is_greater;\n  byte byte_value;\n  int result;\n  code *result;\n  char *hex_chars;\n  int loop_counter;\n  char *char_pointer;\n  uint value;\n  uint *ptr_value;\n  uint base;\n  uint **ptr_ptr;\n  char **str_ptr_ptr;\n  uint length;\n  char *char_ptr2;\n  code *local_callback;\n  \n  byte_value = *(byte *)(input_array + 6);\n  char_pointer = (char *)((int)input_array + 0x43);\n  local_callback = callback;\n  if (0x78 < byte_value) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)input_array + 0x42) = byte_value;\nLAB_00005bdc:\n    char_pointer = (char *)((int)input_array + 0x42);\n    value = 1;\nLAB_00005d28:\n    input_array[4] = value;\n    *(undefined *)((int)input_array + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto LAB_00005d06;\n    if (byte_value == 0x58) {\n      hex_chars = \"0123456789ABCDEF\";\n      *(undefined *)((int)input_array + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byte_value) {\n  case 99:\n    value = **param5;\n    *param5 = *param5 + 1;\n    *(char *)((int)input_array + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *input_array;\n    ptr_value = *param5;\n    if ((int)(base << 0x18) < 0) {\n      value = *ptr_value;\n      *param5 = ptr_value + 1;\n    }\n    else {\n      value = *ptr_value;\n      *param5 = ptr_value + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)input_array + 0x43) = 0x2d;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptr_ptr = (uint **)*param5;\n    base = *input_array;\n    value = input_array[5];\n    *param5 = (uint *)(ptr_ptr + 1);\n    ptr_value = *ptr_ptr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *ptr_value = value;\n    }\n    else {\n      *(short *)ptr_value = (short)value;\n    }\nLAB_00005d06:\n    input_array[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptr_value = *param5;\n    value = *input_array;\n    *param5 = ptr_value + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *ptr_value;\n    }\n    else {\n      value = (uint)*(ushort *)ptr_value;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *input_array = *input_array | 0x20;\n  case 0x78:\n    hex_chars = \"0123456789abcdef\";\n    *(undefined *)((int)input_array + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *input_array;\n    value = **param5;\n    *param5 = *param5 + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *input_array = base | 0x20;\n    }\n    if (value == 0) {\n      *input_array = *input_array & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    str_ptr_ptr = (char **)*param5;\n    *param5 = (uint *)(str_ptr_ptr + 1);\n    char_pointer = *str_ptr_ptr;\n    result = FUN_00006010(char_pointer,0,input_array[1],str_ptr_ptr,param1,input_array,param3);\n    if (result != 0) {\n      input_array[1] = result - (int)char_pointer;\n    }\n    value = input_array[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)input_array + 0x43) = 0;\nLAB_00005c36:\n  length = input_array[1];\n  input_array[2] = length;\n  if (-1 < (int)length) {\n    *input_array = *input_array & 0xfffffffb;\n  }\n  char_ptr2 = char_pointer;\n  if ((value != 0) || (length != 0)) {\n    do {\n      char_ptr2 = char_ptr2 + -1;\n      *char_ptr2 = hex_chars[value - base * (value / base)];\n      is_greater = base <= value;\n      value = value / base;\n    } while (is_greater);\n  }\n  if (((base == 8) && ((int)(*input_array << 0x1f) < 0)) && ((int)input_array[1] <= (int)input_array[4])) {\n    char_ptr2[-1] = '0';\n    char_ptr2 = char_ptr2 + -1;\n  }\n  input_array[4] = (int)char_pointer - (int)char_ptr2;\n  char_pointer = char_ptr2;\nLAB_00005c84:\n  result = FUN_00005a58(param1,input_array,&local_callback,param3,callback);\n  if ((result == -1) || (result = (*callback)(param1,param3,char_pointer,input_array[4]), result == -1)) {\nLAB_00005c98:\n    result = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*input_array << 0x1e) < 0) {\n      for (result = 0; result < (int)(input_array[3] - (int)local_callback); result = result + 1) {\n        loop_counter = (*callback)(param1,param3,(int)input_array + 0x19,1);\n        if (loop_counter == -1) goto LAB_00005c98;\n      }\n    }\n    result = (code *)input_array[3];\n    if ((int)(code *)input_array[3] < (int)local_callback) {\n      result = local_callback;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "convert_to_string_00005b34",
            "entrypoint": "0x00005b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005b34": "convert_to_string_00005b34",
                "bVar1": "is_greater",
                "bVar2": "byte_value",
                "iVar3": "result",
                "iVar6": "loop_counter",
                "local_24": "local_callback",
                "param_1": "param1",
                "param_2": "input_array",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "param5",
                "pcVar14": "char_ptr2",
                "pcVar4": "result",
                "pcVar5": "hex_chars",
                "pcVar7": "char_pointer",
                "ppcVar12": "str_ptr_ptr",
                "ppuVar11": "ptr_ptr",
                "puVar9": "ptr_value",
                "uVar10": "base",
                "uVar13": "length",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e10": {
            "additional_data": {
                "FUN_000042a4": {
                    "1": "initialize"
                },
                "FUN_00005e10": {
                    "1": "decode_and_update_param",
                    "2": "decode_byte",
                    "4": "decode_data",
                    "9": "process_data"
                },
                "FUN_00006768": {
                    "1": "check_data_validity",
                    "2": "validate_data"
                },
                "iVar1": {
                    "1": "return_value",
                    "29": "result"
                },
                "param_1": {
                    "1": "buffer_address",
                    "2": "data_address",
                    "3": "input_param",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "byte_sequence",
                    "2": "output_buffer",
                    "4": "data_ptr",
                    "5": "data_pointer"
                },
                "pbVar3": {
                    "1": "ptr_to_byte_value",
                    "16": "current_byte",
                    "4": "byte_value"
                },
                "uVar2": {
                    "1": "first_byte",
                    "2": "byte_value",
                    "3": "output",
                    "4": "extracted_byte",
                    "9": "decoded_value"
                }
            },
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004418"
            ],
            "code": "\nuint process_data_00005e10(int data,byte **data_pointer)\n\n{\n  int result;\n  uint decoded_value;\n  byte *current_byte;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_pointer == (byte **)&DAT_000079b8) {\n    data_pointer = *(byte ***)(data + 4);\n  }\n  else if (data_pointer == (byte **)&DAT_000079d8) {\n    data_pointer = *(byte ***)(data + 8);\n  }\n  else if (data_pointer == (byte **)&DAT_00007998) {\n    data_pointer = *(byte ***)(data + 0xc);\n  }\n  result = FUN_00006768(data,data_pointer);\n  if (result == 0) {\n    data_pointer[1] = data_pointer[1] + -1;\n    current_byte = *data_pointer;\n    *data_pointer = current_byte + 1;\n    decoded_value = (uint)*current_byte;\n  }\n  else {\n    decoded_value = 0xffffffff;\n  }\n  return decoded_value;\n}\n\n",
            "current_name": "process_data_00005e10",
            "entrypoint": "0x00005e10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "data_pointer",
                "pbVar3": "current_byte",
                "uVar2": "decoded_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e68": {
            "additional_data": {
                "&LAB_00004dea_1": {
                    "1": "pointer_to_label"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "array"
                },
                "FUN_00005e68": {
                    "1": "decode_and_process_data",
                    "2": "process_binary_function",
                    "5": "process_function"
                },
                "FUN_00005ecc": {
                    "1": "get_pointer_value",
                    "2": "get_string"
                },
                "FUN_000061cc": {
                    "1": "execute_function",
                    "3": "process_data"
                },
                "local_38": {
                    "1": "temp_var6",
                    "2": "zero2",
                    "3": "counter2",
                    "4": "var9"
                },
                "local_4c": {
                    "1": "counter_var",
                    "2": "constant_value3",
                    "3": "zero",
                    "4": "var8",
                    "8": "counter"
                },
                "local_5c": {
                    "1": "local_variable5",
                    "2": "string_ptr",
                    "4": "var7",
                    "6": "string_pointer"
                },
                "local_6c": {
                    "1": "modified_return_value",
                    "2": "result2",
                    "4": "var6",
                    "7": "result_copy"
                },
                "local_70": {
                    "1": "result_1_copy",
                    "2": "local_param2",
                    "4": "var5"
                },
                "local_72": {
                    "1": "new_variable2",
                    "2": "constant_value",
                    "3": "constant_2",
                    "4": "constant2",
                    "5": "constant_value2"
                },
                "local_74": {
                    "1": "constant",
                    "3": "constant_1",
                    "4": "constant_value"
                },
                "local_7c": {
                    "1": "result_var1",
                    "2": "result1",
                    "4": "var2",
                    "9": "result"
                },
                "local_80": {
                    "1": "local_param1",
                    "2": "input1_copy",
                    "3": "temp_var1",
                    "4": "var1"
                },
                "param_1": {
                    "1": "input_parameter_1",
                    "11": "input_param1",
                    "6": "input_param",
                    "7": "input1"
                },
                "param_2": {
                    "1": "arg2",
                    "11": "input_param2",
                    "3": "output_param",
                    "7": "input2"
                },
                "param_3": {
                    "1": "symbol_table",
                    "11": "input_param3",
                    "2": "offset_param",
                    "7": "input3"
                },
                "param_4": {
                    "1": "address_param",
                    "11": "input_param4",
                    "7": "input4"
                },
                "uStack_4": {
                    "1": "temp_var8",
                    "4": "var11"
                },
                "uStack_8": {
                    "1": "additional_copy1",
                    "4": "var10"
                }
            },
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid process_function_00005e68(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 var1;\n  undefined4 result;\n  undefined2 var3;\n  undefined2 constant_value2;\n  undefined4 var5;\n  undefined4 result_copy;\n  undefined *string_pointer;\n  undefined4 counter;\n  undefined4 var9;\n  undefined4 var10;\n  undefined4 var11;\n  \n  var3 = 0x204;\n  var1 = input_param1;\n  var5 = input_param1;\n  var10 = input_param3;\n  var11 = input_param4;\n  result = FUN_00005ecc();\n  string_pointer = pointer_to_label;\n  counter = 0;\n  var9 = 0;\n  constant_value2 = 0xffff;\n  result_copy = result;\n  FUN_000061cc(array[16].r_offset,&var1,input_param2,&var10);\n  return;\n}\n\n",
            "current_name": "process_function_00005e68",
            "entrypoint": "0x00005e68",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_00004dea_1": "pointer_to_label",
                "Elf32_Rel_ARRAY_1fff0200": "array",
                "FUN_00005e68": "process_function_00005e68",
                "local_38": "var9",
                "local_4c": "counter",
                "local_5c": "string_pointer",
                "local_6c": "result_copy",
                "local_70": "var5",
                "local_72": "constant_value2",
                "local_74": "var3",
                "local_7c": "result",
                "local_80": "var1",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uStack_4": "var11",
                "uStack_8": "var10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "additional_data": {
                "FUN_00005ebc": {
                    "1": "copy_strings",
                    "30": "copy_string"
                },
                "cVar1": {
                    "1": "character",
                    "19": "current_char",
                    "8": "current_character"
                },
                "param_1": {
                    "1": "dst_string",
                    "26": "destination",
                    "3": "dest"
                },
                "param_2": {
                    "1": "src_string",
                    "26": "source",
                    "3": "src"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "current_name": "copy_string_00005ebc",
            "entrypoint": "0x00005ebc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "additional_data": {
                "FUN_00005ecc": {
                    "1": "find_null_terminated",
                    "2": "find_null_terminated_string",
                    "3": "reverse_string",
                    "4": "find_string_length",
                    "6": "get_string_length",
                    "9": "find_end_of_string"
                },
                "cVar1": {
                    "1": "char",
                    "2": "current_character_value",
                    "21": "current_char",
                    "5": "current_char_value"
                },
                "param_1": {
                    "13": "input_string",
                    "9": "str"
                },
                "pcVar2": {
                    "1": "current_char",
                    "15": "next_char",
                    "2": "next_ptr",
                    "3": "next_char_pointer",
                    "6": "next_character"
                },
                "pcVar3": {
                    "1": "p_current_char",
                    "2": "current_char_ptr",
                    "3": "current_char_pointer",
                    "4": "current_position",
                    "5": "current_character",
                    "7": "current_char"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_00005ecc",
            "entrypoint": "0x00005ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005edc": {
            "additional_data": {
                "FUN_00005edc": {
                    "1": "extract_number_from_string",
                    "12": "parse_number",
                    "2": "parse_integer_from_string",
                    "3": "parse_integer",
                    "6": "convert_string_to_number"
                },
                "bVar3": {
                    "18": "is_negative",
                    "4": "negative_flag",
                    "9": "negative"
                },
                "iVar4": {
                    "1": "result",
                    "2": "is_error",
                    "3": "parse_status",
                    "4": "parse_result",
                    "5": "is_valid",
                    "8": "status"
                },
                "param_1": {
                    "1": "parsed_integer",
                    "2": "output_value",
                    "20": "result",
                    "3": "output"
                },
                "param_2": {
                    "1": "input_bytes",
                    "12": "input_string",
                    "14": "input",
                    "3": "string"
                },
                "param_3": {
                    "1": "rest",
                    "2": "remaining_input",
                    "3": "end_ptr",
                    "6": "next",
                    "9": "remaining_string"
                },
                "param_4": {
                    "1": "number_base",
                    "30": "base"
                },
                "pbVar7": {
                    "1": "current_pointer",
                    "2": "current_char_ptr",
                    "6": "current_byte"
                },
                "pbVar8": {
                    "1": "next_pos",
                    "2": "next_char_ptr",
                    "5": "next_ptr",
                    "6": "next_char"
                },
                "uVar1": {
                    "1": "accumulator",
                    "2": "number",
                    "4": "converted_number",
                    "6": "parsed_value",
                    "7": "result",
                    "9": "parsed_number"
                },
                "uVar2": {
                    "1": "current_byte",
                    "23": "current_char",
                    "5": "ch"
                },
                "uVar5": {
                    "1": "converted_digit",
                    "17": "digit_value",
                    "4": "parsed_digit",
                    "7": "digit"
                },
                "uVar6": {
                    "1": "limit",
                    "17": "max_value",
                    "2": "max_dividend",
                    "6": "max_divisor"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005fd8"
            ],
            "code": "\nuint parse_number_00005edc(undefined4 *result,byte *input,byte **remaining_string,uint base)\n\n{\n  uint parsed_number;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_ptr;\n  byte *next_char;\n  \n  next_char = input;\n  do {\n    current_ptr = next_char;\n    next_char = current_ptr + 1;\n    current_char = (uint)*current_ptr;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_char;\n    is_negative = 1;\n    next_char = current_ptr + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_char;\n    next_char = current_ptr + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_char & 0xdf) == 0x58) {\n    current_char = (uint)next_char[1];\n    base = 0x10;\n    next_char = next_char + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_number = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_number)) ||\n       ((max_value == parsed_number && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_number = parsed_number * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_char;\n    next_char = next_char + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_number = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_number = -parsed_number;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_number;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = next_char + -1;\nLAB_00005fb8:\n  *remaining_string = input;\n  return parsed_number;\n}\n\n",
            "current_name": "parse_number_00005edc",
            "entrypoint": "0x00005edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "bVar3": "is_negative",
                "iVar4": "status",
                "param_1": "result",
                "param_2": "input",
                "param_3": "remaining_string",
                "param_4": "base",
                "pbVar7": "current_ptr",
                "pbVar8": "next_char",
                "uVar1": "parsed_number",
                "uVar2": "current_char",
                "uVar5": "digit_value",
                "uVar6": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "additional_data": {
                "**param_3": {
                    "1": "byte_data_array"
                },
                "*param_1": {
                    "1": "pointer"
                },
                "*param_2": {
                    "1": "byte_data"
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "1": "rel_array"
                },
                "FUN_00005edc": {
                    "1": "process_relocation",
                    "3": "process_relocation_entry",
                    "7": "perform_relocation"
                },
                "FUN_00005fd8": {
                    "1": "extract_and_call_function",
                    "2": "process_elf32_rel",
                    "5": "execute_relocation",
                    "6": "process_relocation"
                },
                "param_1": {
                    "1": "r_offset",
                    "2": "offset",
                    "3": "relocation_entry",
                    "4": "rel_array"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "input_data",
                    "3": "input_byte",
                    "4": "byte_pointer",
                    "9": "byte_array"
                },
                "param_3": {
                    "1": "modified_data_buffer",
                    "2": "byte_pointer"
                },
                "param_4": {
                    "1": "parameter",
                    "2": "buffer_size",
                    "4": "size",
                    "5": "count",
                    "6": "length"
                }
            },
            "called": [
                "FUN_00005edc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid process_relocation_00005fd8(undefined4 rel_array,undefined4 byte_array,undefined4 byte_pointer_pointer)\n\n{\n  FUN_00005edc(rel_table_array[16].r_offset,rel_array,byte_array,byte_pointer_pointer);\n  return;\n}\n\n",
            "current_name": "process_relocation_00005fd8",
            "entrypoint": "0x00005fd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_table_array",
                "FUN_00005fd8": "process_relocation_00005fd8",
                "param_1": "rel_array",
                "param_2": "byte_array",
                "param_3": "byte_pointer_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fec": {
            "additional_data": {
                "0x1fff0de6": {
                    "1": "data_address"
                },
                "FUNC_000045e8": {
                    "1": "write_data_to_memory",
                    "2": "configure_peripheral",
                    "3": "perform_initialization",
                    "6": "set_memory_value"
                },
                "FUN_00005fec": {
                    "1": "initialize_function",
                    "13": "initialize_memory",
                    "2": "initialize_device",
                    "3": "initialize_hardware",
                    "8": "initialize_system"
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid initialize_memory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00005fec",
            "entrypoint": "0x00005fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "additional_data": {
                "0x1fff0de6": {
                    "1": "parameter",
                    "2": "configuration_data"
                },
                "FUNC_000045ec": {
                    "1": "configure_settings",
                    "2": "write_data_to_memory",
                    "3": "perform_initialization"
                },
                "FUN_00005ff8": {
                    "1": "initialize_sensor",
                    "13": "initialize_memory",
                    "2": "initialize_device",
                    "3": "initialize_data"
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid initialize_memory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00005ff8",
            "entrypoint": "0x00005ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006010": {
            "additional_data": {
                "FUN_00006010": {
                    "1": "find_occurrence_position",
                    "2": "reverse_byte_sequence",
                    "20": "find_byte_sequence",
                    "3": "find_first_occurrence"
                },
                "bVar1": {
                    "28": "current_byte",
                    "3": "byte_value"
                },
                "bVar13": {
                    "1": "byte0_nonzero",
                    "3": "is_byte_nonzero"
                },
                "bVar14": {
                    "1": "is_byte_high_nonzero"
                },
                "bVar15": {
                    "1": "bit15"
                },
                "bVar16": {
                    "1": "is_zero4"
                },
                "cVar2": {
                    "1": "byte1_match",
                    "2": "is_zero"
                },
                "cVar3": {
                    "1": "carry_2",
                    "2": "bit_2"
                },
                "cVar4": {
                    "1": "byte_check3",
                    "2": "bit_3"
                },
                "cVar5": {
                    "1": "byte3",
                    "2": "is_zero_4",
                    "3": "bit_4"
                },
                "param_1": {
                    "1": "input_sequence",
                    "12": "data",
                    "2": "input_data",
                    "3": "buffer",
                    "4": "input_array"
                },
                "param_2": {
                    "1": "byte_value",
                    "15": "target_byte",
                    "3": "target",
                    "7": "byte_to_find"
                },
                "param_3": {
                    "1": "size",
                    "11": "length",
                    "2": "input_length",
                    "3": "buffer_length",
                    "4": "data_length"
                },
                "pbVar6": {
                    "1": "pointer1",
                    "2": "result_pointer",
                    "3": "result_ptr",
                    "7": "next_byte",
                    "9": "result"
                },
                "pbVar8": {
                    "1": "pointer3",
                    "2": "temp_ptr",
                    "3": "result_ptr",
                    "8": "result"
                },
                "puVar7": {
                    "1": "current_address",
                    "2": "current_position",
                    "3": "data_ptr",
                    "6": "current_ptr"
                },
                "uVar10": {
                    "1": "aligned_data_size",
                    "2": "remaining_length",
                    "3": "aligned_size",
                    "5": "length_aligned",
                    "7": "aligned_length"
                },
                "uVar11": {
                    "1": "masked_byte_1",
                    "2": "temp1",
                    "3": "xor_result"
                },
                "uVar12": {
                    "1": "mod_8_result_2",
                    "2": "temp2",
                    "3": "xor_result_2"
                },
                "uVar13": {
                    "1": "<unchanged>"
                },
                "uVar14": {
                    "1": "<unchanged>"
                },
                "uVar15": {
                    "1": "<unchanged>"
                },
                "uVar16": {
                    "1": "<unchanged>"
                },
                "uVar9": {
                    "1": "pointer_align",
                    "2": "ptr_alignment",
                    "3": "alignment",
                    "4": "offset",
                    "5": "alignment_offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char is_zero;\n  char is_zero_2;\n  char is_zero_byte_highest;\n  char bit_4;\n  byte *result;\n  uint *current_ptr;\n  byte *result;\n  uint alignment_offset;\n  uint aligned_length;\n  uint xor_result;\n  uint xor_result_2;\n  bool is_byte_nonzero;\n  bool check2;\n  bool check3;\n  bool check4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    alignment_offset = (uint)data & 7;\n    while( true ) {\n      if (alignment_offset == 0) {\n        alignment_offset = target_byte | target_byte << 8;\n        alignment_offset = alignment_offset | alignment_offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result = *data ^ alignment_offset;\n          xor_result_2 = data[1] ^ alignment_offset;\n          is_zero = -((char)xor_result == '\\0');\n          is_zero_2 = -((char)(xor_result >> 8) == '\\0');\n          is_zero_byte_highest = -((char)(xor_result >> 0x10) == '\\0');\n          bit_4 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(bit_4,CONCAT12(is_zero_byte_highest,CONCAT11(is_zero_2,is_zero)));\n          is_byte_nonzero = (char)xor_result_2 != '\\0';\n          check2 = (char)(xor_result_2 >> 8) != '\\0';\n          check3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          check4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(check4 * bit_4 - !check4,\n                            CONCAT12(check3 * is_zero_byte_highest - !check3,\n                                     CONCAT11(check2 * is_zero_2 - !check2,is_byte_nonzero * is_zero - !is_byte_nonzero)));\n          if (xor_result_2 != 0) {\n            if (xor_result == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              is_byte_nonzero = (xor_result & 0x100) == 0;\n              result = result + 1;\n              if (is_byte_nonzero) {\n                is_byte_nonzero = (xor_result & 0x18000) == 0;\n                result = result + 2;\n              }\n              result = result;\n              if (is_byte_nonzero) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      alignment_offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "current_name": "find_byte_sequence_00006010",
            "entrypoint": "0x00006010",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "bVar1": "current_byte",
                "bVar13": "is_byte_nonzero",
                "bVar14": "check2",
                "bVar15": "check3",
                "bVar16": "check4",
                "cVar2": "is_zero",
                "cVar3": "is_zero_2",
                "cVar4": "is_zero_byte_highest",
                "cVar5": "bit_4",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "pbVar6": "result",
                "pbVar8": "result",
                "puVar7": "current_ptr",
                "uVar10": "aligned_length",
                "uVar11": "xor_result",
                "uVar12": "xor_result_2",
                "uVar9": "alignment_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060b0": {
            "additional_data": {
                "FUN_000060b0": {
                    "1": "copy_and_increment",
                    "12": "copy_array",
                    "2": "copy_bytes",
                    "3": "copy_data",
                    "5": "copy_memory"
                },
                "param_1": {
                    "1": "destination_pointer",
                    "2": "dest_offset",
                    "3": "dest_index",
                    "4": "dest",
                    "5": "destination_index",
                    "9": "destination"
                },
                "param_2": {
                    "1": "src_pointer",
                    "2": "source_buffer",
                    "5": "src",
                    "9": "source"
                },
                "param_3": {
                    "1": "block_size",
                    "2": "array_size",
                    "3": "source_length",
                    "8": "length"
                },
                "puVar1": {
                    "1": "source_array_ptr",
                    "10": "src_ptr",
                    "2": "source_pointer",
                    "3": "next_source",
                    "7": "source_ptr"
                },
                "puVar2": {
                    "1": "dst_ptr",
                    "12": "end_ptr",
                    "3": "end_pointer",
                    "4": "end_source"
                },
                "puVar3": {
                    "1": "dst_ptr",
                    "2": "next_destination",
                    "3": "destination_pointer",
                    "6": "destination_ptr",
                    "9": "dest_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "code": "\nvoid copy_array_000060b0(int destination,undefined *source_array,int size)\n\n{\n  undefined *src_ptr;\n  undefined *end_ptr;\n  undefined *dest_ptr;\n  \n  end_ptr = source_array + size;\n  dest_ptr = (undefined *)(destination + -1);\n  if (source_array != end_ptr) {\n    do {\n      src_ptr = source_array + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source_array;\n      source_array = src_ptr;\n    } while (src_ptr != end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_array_000060b0",
            "entrypoint": "0x000060b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destination",
                "param_2": "source_array",
                "param_3": "size",
                "puVar1": "src_ptr",
                "puVar2": "end_ptr",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060cc": {
            "additional_data": {
                "FUN_00004b34": {
                    "1": "initialize_data",
                    "2": "perform_task"
                },
                "FUN_00004bd0": {
                    "1": "validate_parameters",
                    "3": "allocate_memory"
                },
                "FUN_000060b0": {
                    "1": "perform_sub_operation",
                    "2": "perform_operation"
                },
                "FUN_000060cc": {
                    "1": "check_param_validity",
                    "2": "validate_parameters",
                    "3": "perform_operation",
                    "8": "process_data"
                },
                "FUN_00006964": {
                    "1": "get_threshold",
                    "2": "get_comparison_result",
                    "4": "get_value"
                },
                "iVar1": {
                    "26": "result",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "input_data",
                    "4": "input",
                    "8": "arg1"
                },
                "param_2": {
                    "1": "input_param",
                    "10": "size",
                    "2": "input_size",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "size",
                    "4": "arg3",
                    "8": "limit"
                },
                "param_4": {
                    "1": "input4",
                    "4": "extra_param",
                    "5": "param_4",
                    "8": "arg4"
                },
                "uVar2": {
                    "1": "actual_size",
                    "2": "result",
                    "3": "comparison_result",
                    "4": "value"
                }
            },
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "calling": [
                "FUN_000068f0"
            ],
            "code": "\nint process_data_000060cc(undefined4 arg1,int size,uint limit,undefined4 arg4)\n\n{\n  int result;\n  uint count;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      count = FUN_00006964();\n      result = size;\n      if ((count < limit) && (result = FUN_00004bd0(arg1,limit), result != 0)) {\n        FUN_000060b0(result,size,limit);\n        FUN_00004b34(arg1,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(arg1,limit,limit,arg4);\n  return result;\n}\n\n",
            "current_name": "process_data_000060cc",
            "entrypoint": "0x000060cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "iVar1": "result",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "arg4",
                "uVar2": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006192": {
            "additional_data": {
                "*(ushort *)(param_2 + 3)": {
                    "1": "flag_value"
                },
                "*param_2": {
                    "1": "data_ptr[0]"
                },
                "FUN_00004b34": {
                    "1": "perform_special_action",
                    "2": "process_data",
                    "6": "perform_action",
                    "9": "handle_error"
                },
                "FUN_00006192": {
                    "1": "update_parameters",
                    "3": "initialize_data",
                    "4": "extract_data",
                    "5": "update_data",
                    "8": "process_data"
                },
                "param_1": {
                    "1": "value",
                    "2": "param",
                    "4": "param1",
                    "7": "input",
                    "8": "status"
                },
                "param_2": {
                    "1": "parameters",
                    "2": "arg2",
                    "4": "data_array",
                    "6": "output",
                    "9": "data"
                },
                "param_2 + 0x11": {
                    "1": "ptr_check_expected"
                },
                "param_2[0x10]": {
                    "1": "variable2",
                    "3": "data[16]"
                },
                "param_2[0xd]": {
                    "1": "ptr_check",
                    "2": "ptr",
                    "3": "data[13]"
                },
                "param_2[0xf]": {
                    "1": "variable4",
                    "2": "data[15]"
                },
                "param_2[1]": {
                    "1": "data_ptr[1]",
                    "3": "data[1]"
                },
                "param_2[2]": {
                    "1": "flag"
                },
                "param_2[3]": {
                    "1": "data_array[3]"
                },
                "param_2[4]": {
                    "1": "data_array[4]",
                    "3": "data[4]"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "param_3",
                    "3": "param1",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param_2",
                    "3": "param_4",
                    "5": "param4"
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 process_data_00006192(undefined4 status,undefined4 *data)\n\n{\n  if ((undefined4 *)data[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)data[13] != data + 0x11) {\n      FUN_00004b34();\n    }\n    data[1] = data[16];\n    data[13] = 0;\n    if (data[16] != 0) {\n      *data = data[15];\n      return 0;\n    }\n  }\n  *data = data[4];\n  data[1] = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_00006192",
            "entrypoint": "0x00006192",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "status",
                "param_2": "data",
                "param_2[0x10]": "data[16]",
                "param_2[0xd]": "data[13]",
                "param_2[0xf]": "data[15]",
                "param_2[1]": "data[1]",
                "param_2[4]": "data[4]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000061cc": {
            "additional_data": {
                "&DAT_00007a99": {
                    "1": "char_flags"
                },
                "&DAT_00007c02": {
                    "1": "size_table"
                },
                "FUN_00006010": {
                    "1": "check_flag"
                },
                "FUN_00006192": {
                    "1": "default_func"
                },
                "FUN_000061cc": {
                    "1": "parse_expression",
                    "2": "parse_string",
                    "5": "parse_data",
                    "7": "parse_input"
                },
                "FUN_000064bc": {
                    "1": "process_data_type_3"
                },
                "FUN_0000656c": {
                    "1": "process_data_type_4"
                },
                "FUN_0000687c": {
                    "1": "process_expression"
                },
                "auStack_2ac": {
                    "1": "aux_stack",
                    "2": "buffer",
                    "3": "stack_buffer"
                },
                "byte **param_2": {
                    "1": "pointer_to_array_of_pointers"
                },
                "byte *param_3": {
                    "1": "pointer_to_array"
                },
                "byte *pbVar3": {
                    "1": "current_byte"
                },
                "byte* param_3": {
                    "1": "param3"
                },
                "byte* pbVar3": {
                    "1": "curr_byte"
                },
                "byte** param_2": {
                    "1": "param2"
                },
                "code *local_2c": {
                    "1": "local_function_pointer"
                },
                "code* local_2c": {
                    "1": "function_pointer"
                },
                "iVar1": {
                    "1": "temp_int_variable",
                    "19": "result",
                    "6": "return_value"
                },
                "int **local_2b0": {
                    "1": "local_pointer_to_pointer_to_integers_array"
                },
                "int **param_4": {
                    "1": "pointer_to_pointer_to_array_of_integers"
                },
                "int iVar1": {
                    "1": "index"
                },
                "int local_194": {
                    "1": "local_index"
                },
                "int local_19c": {
                    "1": "local_index"
                },
                "int local_1a0": {
                    "1": "local_index"
                },
                "int** local_2b0": {
                    "1": "param4"
                },
                "int** param_4": {
                    "1": "param4"
                },
                "local_194": {
                    "1": "param",
                    "2": "flag3",
                    "3": "mode",
                    "4": "type"
                },
                "local_198": {
                    "1": "local_stack",
                    "2": "temp_array",
                    "3": "stack_ptr",
                    "4": "stack_buffer"
                },
                "local_19c": {
                    "1": "count2",
                    "2": "counter2",
                    "7": "count",
                    "9": "counter"
                },
                "local_1a0": {
                    "1": "num_success",
                    "2": "output",
                    "3": "result_value",
                    "5": "result",
                    "8": "return_value"
                },
                "local_1a4": {
                    "1": "temp_var6",
                    "2": "flag_temp",
                    "3": "flag3"
                },
                "local_1a8": {
                    "1": "a8_val",
                    "2": "base",
                    "5": "flag2"
                },
                "local_1ac": {
                    "1": "flag_bitmask",
                    "2": "flag2",
                    "3": "flag",
                    "5": "flags",
                    "6": "flag1"
                },
                "local_2b0": {
                    "1": "output_data_ptr",
                    "2": "result_ptr",
                    "3": "result_array",
                    "7": "output_ptr"
                },
                "local_2c": {
                    "1": "callback_function",
                    "2": "next_func_ptr",
                    "3": "next_function"
                },
                "local_30": {
                    "1": "temp10",
                    "2": "pointer1",
                    "5": "function_ptr"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "param1",
                    "2": "input",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "input_bytes_ptr",
                    "2": "param_2",
                    "3": "arg2",
                    "4": "input",
                    "8": "param2"
                },
                "param_3": {
                    "1": "input_byte_ptr",
                    "2": "param_3",
                    "3": "arg3",
                    "6": "pattern",
                    "7": "param3"
                },
                "param_3[1]": {
                    "1": "param"
                },
                "param_4": {
                    "1": "result_pointer",
                    "2": "param_4",
                    "3": "arg4",
                    "8": "output"
                },
                "pbVar3": {
                    "1": "temp2",
                    "2": "current_byte",
                    "3": "byte_ptr",
                    "4": "ptr",
                    "5": "next_byte",
                    "6": "next_char"
                },
                "uVar2": {
                    "1": "byte_val",
                    "2": "current_byte",
                    "3": "value",
                    "4": "current_char"
                },
                "uVar4": {
                    "1": "current_byte_mask",
                    "2": "temp",
                    "4": "flag"
                },
                "uint local_1a4": {
                    "1": "flag2"
                },
                "uint local_1ac": {
                    "1": "local_value"
                },
                "uint uVar2": {
                    "1": "value"
                },
                "uint uVar4": {
                    "1": "current_value"
                },
                "undefined *local_198": {
                    "1": "local_pointer"
                },
                "undefined *local_30": {
                    "1": "local_pointer"
                },
                "undefined auStack_2ac [256]": {
                    "1": "stack_array"
                },
                "undefined* local_198": {
                    "1": "local_buffer"
                },
                "undefined* local_30": {
                    "1": "local_pointer"
                },
                "undefined4 local_1a8": {
                    "1": "local_scalar"
                },
                "undefined4 param_1": {
                    "1": "param1"
                }
            },
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "calling": [
                "FUN_00005e68"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parse_input_000061cc(undefined4 param1,byte **param2,byte *param3,int **output)\n\n{\n  int result;\n  uint current_char;\n  byte *next_char;\n  uint flag;\n  int **output_ptr;\n  undefined temp_stack [256];\n  uint flag1;\n  undefined4 flag2;\n  uint flag3;\n  int return_value;\n  int counter;\n  undefined *stack_buffer;\n  int type;\n  undefined *function_pointer;\n  code *next_function;\n  \n  return_value = 0;\n  counter = 0;\n  function_pointer = &LAB_00006118_1;\n  next_function = FUN_00006192 + 1;\n  output_ptr = output;\n  stack_buffer = temp_stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      flag = (uint)*param3;\n      if (flag == 0) {\n        return return_value;\n      }\n      current_char = (byte)(&DAT_00007a99)[flag] & 8;\n      next_char = param3 + 1;\n      if (((&DAT_00007a99)[flag] & 8) == 0) break;\n      while (((param3 = next_char, 0 < (int)param2[1] ||\n              (result = (*next_function)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (flag == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*next_function)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != flag) {\n      return return_value;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = next_char;\n  }\n  flag3 = current_char;\n  flag1 = current_char;\n  if (param == 0x2a) {\n    next_char = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    current_char = (uint)*next_char;\n    if (9 < current_char - 0x30) break;\n    next_char = next_char + 1;\n    flag3 = (flag3 * 10 + current_char) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,current_char,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    next_char = next_char + 1;\n  }\n  param3 = next_char + 1;\n  current_char = (uint)*next_char;\n  if (current_char < 0x79) {\n    if (0x57 < current_char) {\n      switch(current_char) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(temp_stack,param3);\n        flag1 = flag1 | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (current_char < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*output_ptr = (short)counter;\n            output_ptr = output_ptr + 1;\n          }\n          else {\n            **output_ptr = counter;\n            output_ptr = output_ptr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*next_function)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          next_char = param2[1];\n          param2[1] = next_char + -1;\n          if ((int)(next_char + -1) < 1) {\n            result = (*next_function)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        result = FUN_000064bc(param1,&flag1,param2,&output_ptr);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flag1,param2,&output_ptr);\n      }\n      if (result == 1) {\n        return return_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto LAB_000061f6;\n    }\n    next_char = param3;\n    if (current_char == 0x25) goto LAB_00006352;\n    if (current_char < 0x26) {\n      if (current_char != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_char - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "current_name": "parse_input_000061cc",
            "entrypoint": "0x000061cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000061cc": "parse_input_000061cc",
                "auStack_2ac": "temp_stack",
                "iVar1": "result",
                "local_194": "type",
                "local_198": "stack_buffer",
                "local_19c": "counter",
                "local_1a0": "return_value",
                "local_1a4": "flag3",
                "local_1a8": "flag2",
                "local_1ac": "flag1",
                "local_2b0": "output_ptr",
                "local_2c": "next_function",
                "local_30": "function_pointer",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_3[1]": "param",
                "param_4": "output",
                "pbVar3": "next_char",
                "uVar2": "current_char",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000064bc": {
            "additional_data": {
                "FUN_000064bc": {
                    "1": "decode_and_process_data",
                    "27": "process_data"
                },
                "LAB_0000654a": {
                    "1": "end_of_function"
                },
                "iVar1": {
                    "1": "result_code",
                    "21": "result"
                },
                "iVar6": {
                    "1": "iteration_count",
                    "10": "count",
                    "17": "counter"
                },
                "param_1": {
                    "1": "param",
                    "11": "input_value",
                    "2": "input_param",
                    "4": "status",
                    "5": "input"
                },
                "param_2": {
                    "1": "info",
                    "2": "data_info",
                    "3": "data",
                    "4": "flags",
                    "6": "params"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "data_pointers",
                    "3": "data",
                    "6": "buffer",
                    "9": "byte_array"
                },
                "param_4": {
                    "1": "output_status",
                    "2": "result",
                    "3": "result_ptr",
                    "4": "status",
                    "5": "output",
                    "7": "output_value"
                },
                "pbVar4": {
                    "1": "next_buffer",
                    "3": "ptr1",
                    "6": "next_byte"
                },
                "pbVar5": {
                    "1": "current_byte_next",
                    "2": "next_byte",
                    "4": "current_byte"
                },
                "ppbVar3": {
                    "1": "temp_ptr",
                    "2": "ptr_data",
                    "3": "ptr_buffer",
                    "6": "byte_ptr_ptr"
                },
                "uVar2": {
                    "1": "result",
                    "2": "var1",
                    "3": "temp_var",
                    "4": "status",
                    "6": "temp"
                },
                "unaff_r6": {
                    "1": "temp_byte_ptr",
                    "2": "byte_ptr_2",
                    "3": "ptr2",
                    "8": "current_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 process_data_000064bc(undefined4 input_value,uint *data_array,byte **byte_array,undefined4 *output_value)\n\n{\n  int result;\n  uint temp;\n  byte **byte_ptr_ptr;\n  byte *byte_ptr;\n  byte *current_byte;\n  byte *byte_ptr3;\n  int counter;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    data_array[2] = temp;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    byte_ptr_ptr = (byte **)*output_value;\n    *output_value = byte_ptr_ptr + 1;\n    current_byte = *byte_ptr_ptr;\n  }\n  counter = 0;\n  do {\n    temp = data_array[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_array) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nend_of_function:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *current_byte = 0;\n          }\n          data_array[4] = counter + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0))\n      goto end_of_function;\n    }\n    byte_ptr3 = current_byte;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_ptr3 = current_byte + 1;\n      *current_byte = **byte_array;\n    }\n    byte_ptr = byte_array[1];\n    *byte_array = *byte_array + 1;\n    temp = data_array[2] - 1;\n    byte_array[1] = byte_ptr + -1;\n    counter = counter + 1;\n    data_array[2] = temp;\n    current_byte = byte_ptr3;\n    if ((temp == 0) ||\n       (((int)(byte_ptr + -1) < 1 &&\n        (result = (*(code *)data_array[0x60])(input_value,byte_array,temp,(code *)data_array[0x60],output_value),\n        result != 0)))) goto end_of_function;\n  } while( true );\n}\n\n",
            "current_name": "process_data_000064bc",
            "entrypoint": "0x000064bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "LAB_0000654a": "end_of_function",
                "iVar1": "result",
                "iVar6": "counter",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "byte_array",
                "param_4": "output_value",
                "pbVar4": "byte_ptr",
                "pbVar5": "byte_ptr3",
                "ppbVar3": "byte_ptr_ptr",
                "uVar2": "temp",
                "unaff_r6": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000656c": {
            "additional_data": {
                "FUN_0000656c": {
                    "1": "parse_data",
                    "13": "process_data"
                },
                "iVar1": {
                    "1": "int_value",
                    "15": "result",
                    "2": "temp_var1",
                    "9": "return_value"
                },
                "iVar11": {
                    "1": "loop_iter",
                    "10": "loop_counter",
                    "4": "loop_var",
                    "5": "index"
                },
                "local_34": {
                    "1": "char_array",
                    "3": "data_array",
                    "4": "string_array",
                    "8": "local_array"
                },
                "local_34[0]": {
                    "1": "str1"
                },
                "local_34[1]": {
                    "1": "constant2"
                },
                "local_34[2]": {
                    "1": "constant3"
                },
                "param_1": {
                    "1": "input1",
                    "3": "input",
                    "4": "input_param",
                    "6": "param1",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "input_argument2",
                    "2": "param_array",
                    "3": "parameters",
                    "4": "params"
                },
                "param_3": {
                    "1": "byte_param",
                    "2": "data_pointer",
                    "4": "buffer",
                    "6": "byte_array"
                },
                "param_4": {
                    "1": "input4",
                    "2": "output_data",
                    "3": "result",
                    "4": "output_value",
                    "5": "output"
                },
                "pbVar5": {
                    "1": "temp_byte_ptr",
                    "10": "byte_ptr",
                    "11": "byte_pointer",
                    "2": "temp2"
                },
                "pcVar3": {
                    "1": "process_code",
                    "13": "function_pointer",
                    "2": "function_ptr"
                },
                "puVar10": {
                    "1": "loop_var3",
                    "2": "temp_pointer3"
                },
                "puVar7": {
                    "1": "output_data_ptr",
                    "2": "ptr1",
                    "3": "output_pointer",
                    "7": "output_ptr"
                },
                "puVar8": {
                    "1": "loop_var1",
                    "2": "ptr2",
                    "3": "temp_ptr",
                    "4": "temp_pointer"
                },
                "puVar9": {
                    "1": "input_pointer",
                    "2": "temp_ptr",
                    "3": "temp_pointer"
                },
                "uVar2": {
                    "1": "new_result",
                    "2": "modified_value",
                    "3": "temp_var",
                    "4": "result"
                },
                "uVar4": {
                    "1": "temp_var1",
                    "2": "value",
                    "3": "temp",
                    "4": "temp_var2",
                    "5": "temp_var",
                    "9": "temp_value"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "limit",
                    "3": "temp_variable",
                    "5": "temp_var2"
                },
                "unaff_r9": {
                    "1": "temp4",
                    "2": "unaff_var1",
                    "4": "counter",
                    "6": "unaff_r9"
                }
            },
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 process_data_0000656c(undefined4 input_value,uint *params,byte **byte_array,undefined4 *output)\n\n{\n  int result;\n  undefined4 return_value;\n  code *function_pointer;\n  uint temp_value;\n  byte *byte_pointer;\n  uint temp_var2;\n  undefined4 *output_ptr;\n  uint *temp_pointer;\n  uint *temp_pointer;\n  uint *temp_pointer3;\n  int unaff_r9;\n  int loop_counter;\n  undefined *local_array [4];\n  \n  constant1 = &DAT_00007c2f;\n  constant2 = &DAT_00007c32;\n  constant3 = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (params[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  temp_var2 = params[2];\n  temp_value = temp_var2 - 1;\n  if (0x15c < temp_value) {\n    unaff_r9 = temp_var2 - 0x15d;\n    temp_var2 = 0x15d;\n  }\n  if (0x15c < temp_value) {\n    params[2] = temp_var2;\n  }\n  temp_pointer3 = params + 7;\n  if (temp_value < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *params = *params | 0xd00;\n  loop_counter = 0;\n  temp_pointer = temp_pointer3;\n  do {\n    result = FUN_00006010(local_array[loop_counter],**byte_array,2);\n    if (result != 0) {\n      if (loop_counter == 1) {\n        if (params[1] == 0) {\n          params[1] = 8;\n          *params = *params | 0x200;\n        }\n        temp_value = *params & 0xfffffaff;\nLAB_000065f4:\n        *params = temp_value;\n      }\n      else if (loop_counter == 2) {\n        if ((*params & 0x600) != 0x200) goto LAB_00006624;\n        params[1] = 0x10;\n        temp_value = *params | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_value = params[2];\n      params[2] = temp_value - 1;\n      if (temp_value != 0) {\n        byte_pointer = *byte_array;\n        *byte_array = byte_pointer + 1;\n        temp_pointer = (uint *)((int)temp_pointer + 1);\n        *(byte *)temp_pointer = *byte_pointer;\n        byte_pointer = byte_array[1];\n        byte_array[1] = byte_pointer + -1;\n        temp_pointer = temp_pointer;\n        if (((int)(byte_pointer + -1) < 1) &&\n           (result = (*(code *)params[0x60])(input_value,byte_array), result != 0)) {\n          loop_counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_counter = loop_counter + 1;\n  } while (loop_counter != 3);\n  if (params[1] == 0) {\n    params[1] = 10;\n  }\n  FUN_0000687c(params[5],\"01234567]\" + (8 - params[1]));\n  loop_counter = 0;\n  while( true ) {\n    temp_pointer = temp_pointer;\n    if (params[2] == 0) break;\n    byte_pointer = *byte_array;\n    temp_value = (uint)*byte_pointer;\n    if (*(char *)(params[5] + temp_value) == '\\0') break;\n    if ((temp_value == 0x30) && ((int)(*params << 0x14) < 0)) {\n      loop_counter = loop_counter + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        params[2] = params[2] + 1;\n      }\n    }\n    else {\n      *params = *params & 0xfffff6ff;\n      temp_pointer = (uint *)((int)temp_pointer + 1);\n      *(byte *)temp_pointer = *byte_pointer;\n    }\n    byte_pointer = byte_array[1];\n    byte_array[1] = byte_pointer + -1;\n    if ((int)(byte_pointer + -1) < 1) {\n      result = (*(code *)params[0x60])(input_value,byte_array);\n      if (result != 0) break;\n    }\n    else {\n      *byte_array = *byte_array + 1;\n    }\n    params[2] = params[2] - 1;\n    temp_pointer = temp_pointer;\n  }\nLAB_000066ca:\n  if ((int)(*params << 0x17) < 0) {\n    if (temp_pointer3 < temp_pointer) {\n      (*(code *)params[0x5f])(input_value,*(byte *)((int)temp_pointer + -1),byte_array);\n      temp_pointer = (uint *)((int)temp_pointer + -1);\n    }\n    if (temp_pointer == temp_pointer3) {\n      return 1;\n    }\n  }\n  if ((*params & 0x10) == 0) {\n    *(byte *)temp_pointer = 0;\n    return_value = (*function_pointer)(input_value,temp_pointer3,0,params[1]);\n    output_ptr = (undefined4 *)*output;\n    temp_value = *params;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_value & 0x20) == 0) {\n      if ((int)(temp_value << 0x1f) < 0) {\n        *(short *)output_ptr = (short)return_value;\n      }\n      else {\n        *output_ptr = return_value;\n      }\n    }\n    else {\n      *output_ptr = return_value;\n    }\n    params[3] = params[3] + 1;\n  }\n  params[4] = (uint)((int)temp_pointer + params[4] + (loop_counter - (int)temp_pointer3));\n  return 0;\n}\n\n",
            "current_name": "process_data_0000656c",
            "entrypoint": "0x0000656c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "iVar1": "result",
                "iVar11": "loop_counter",
                "local_34": "local_array",
                "local_34[0]": "constant1",
                "local_34[1]": "constant2",
                "local_34[2]": "constant3",
                "param_1": "input_value",
                "param_2": "params",
                "param_3": "byte_array",
                "param_4": "output",
                "pbVar5": "byte_pointer",
                "pcVar3": "function_pointer",
                "puVar10": "temp_pointer3",
                "puVar7": "output_ptr",
                "puVar8": "temp_pointer",
                "puVar9": "temp_pointer",
                "uVar2": "return_value",
                "uVar4": "temp_value",
                "uVar6": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006768": {
            "additional_data": {
                "&DAT_00007998": {
                    "1": "constant_3"
                },
                "&DAT_000079b8": {
                    "1": "constant_1"
                },
                "&DAT_000079d8": {
                    "1": "dat2"
                },
                "(code *)paramArray[9]": {
                    "1": "function_ptr"
                },
                "(int)(uVar5 << 0x1a)": {
                    "1": "shifted_ulong1"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "param_ptr1[0xd]"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "ushort_ptr1"
                },
                "*param_1": {
                    "1": "dereferenced_param_array"
                },
                "*param_2": {
                    "1": "dereferenced_param_ptr"
                },
                "0x1fff0284": {
                    "1": "constant_1"
                },
                "DAT_00007998": {
                    "1": "dat_00007998"
                },
                "DAT_000079b8": {
                    "1": "dat_000079b8"
                },
                "DAT_000079d8": {
                    "1": "dat_000079d8"
                },
                "FUN_0000404c": {
                    "1": "call_function5"
                },
                "FUN_00004158": {
                    "1": "reverse_data"
                },
                "FUN_000042a4": {
                    "1": "initialize_data"
                },
                "FUN_000043a0": {
                    "1": "handle_case2"
                },
                "FUN_00004b34": {
                    "1": "call_function2",
                    "2": "cleanup_data"
                },
                "FUN_00005700": {
                    "1": "execute_func"
                },
                "FUN_00006768": {
                    "1": "handle_data_processing",
                    "15": "process_data"
                },
                "LAB_00006754_1": {
                    "1": "constant_2"
                },
                "data_2[2]": {
                    "1": "data_2[2]"
                },
                "data_2[3]": {
                    "1": "data_2[3]"
                },
                "data_2[6]": {
                    "1": "data_2[6]"
                },
                "iVar2": {
                    "1": "variable2",
                    "10": "temp_var2",
                    "2": "result",
                    "3": "var2",
                    "7": "temp2"
                },
                "paramArray + 0x10": {
                    "1": "temp_var_array4"
                },
                "paramArray + 0xd": {
                    "1": "temp_var_array3"
                },
                "paramArray + 0xf": {
                    "1": "temp_var_array5"
                },
                "paramArray + 1": {
                    "1": "temp_var_array2"
                },
                "paramArray + 3": {
                    "1": "temp_var_array1"
                },
                "paramArray + 4": {
                    "1": "temp_var_array6"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_params",
                    "3": "data_ptr",
                    "4": "data_pointer",
                    "9": "input_array"
                },
                "param_1[1]": {
                    "1": "data_1[1]"
                },
                "param_1[2]": {
                    "1": "data_1[2]"
                },
                "param_1[3]": {
                    "1": "data_1[3]"
                },
                "param_1[6]": {
                    "1": "param_array[6]"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "data2",
                    "3": "lookup_array"
                },
                "param_2[0x10]": {
                    "1": "data_2[16]"
                },
                "param_2[0x11]": {
                    "1": "data_2[17]"
                },
                "param_2[0xd]": {
                    "1": "data_2[13]"
                },
                "param_2[0xf]": {
                    "1": "data_2[15]"
                },
                "param_2[1]": {
                    "1": "param_ptr[1]"
                },
                "param_2[4]": {
                    "1": "data_2[4]"
                },
                "param_2[5]": {
                    "1": "data_2[5]"
                },
                "param_2[8]": {
                    "1": "data_2[8]"
                },
                "param_2[9]": {
                    "1": "data_2[9]"
                },
                "param_3": {
                    "1": "third_param",
                    "2": "param1",
                    "3": "param_3",
                    "5": "value1",
                    "8": "param3"
                },
                "param_4": {
                    "1": "input4",
                    "2": "param2",
                    "3": "val2",
                    "5": "value2",
                    "8": "param4"
                },
                "uVar1": {
                    "1": "variable1",
                    "2": "status",
                    "3": "var1",
                    "7": "temp1",
                    "9": "temp_var1"
                },
                "uVar3": {
                    "1": "variable3",
                    "3": "result",
                    "4": "var3",
                    "6": "temp3",
                    "8": "temp_var3"
                },
                "uVar4": {
                    "1": "value_3",
                    "2": "flag2",
                    "3": "flags",
                    "4": "temp4",
                    "7": "temp_var4"
                },
                "uVar5": {
                    "1": "temp_value_5",
                    "2": "flag2",
                    "4": "var5",
                    "7": "temp_var5"
                }
            },
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00005e10"
            ],
            "code": "\nundefined4\nprocess_data_00006768(undefined4 *input_array,undefined4 *lookup_array,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 temp_var1;\n  int temp_var2;\n  undefined4 temp_var3;\n  ushort temp_var4;\n  uint temp_var5;\n  \n  if ((input_array != (undefined4 *)0x0) && (param_array[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (lookup_array == &DAT_000079b8) {\n    lookup_array = (undefined4 *)data_1[1];\n  }\n  else if (lookup_array == (undefined4 *)&DAT_000079d8) {\n    lookup_array = (undefined4 *)data_1[2];\n  }\n  else if (lookup_array == (undefined4 *)&DAT_00007998) {\n    lookup_array = (undefined4 *)data_1[3];\n  }\n  temp_var4 = *(ushort *)(lookup_array + 3);\n  param_ptr[1] = 0;\n  temp_var5 = (uint)*(ushort *)(lookup_array + 3);\n  if ((int)(temp_var5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp_var5 << 0x1d) < 0) {\n    if ((undefined4 *)param_ptr[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)param_ptr[0xd] != lookup_array + 0x11) {\n        FUN_00004b34(input_array);\n      }\n      param_ptr[1] = param_ptr[0x10];\n      param_ptr[0xd] = 0;\n      if (param_ptr[0x10] != 0) {\n        *lookup_array = data_2[15];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp_var5 << 0x1b)) {\n      *input_array = 9;\n      temp_var4 = temp_var4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp_var5 << 0x1c) < 0) {\n      temp_var2 = FUN_00004158(input_array,lookup_array,temp_var5 << 0x1c,temp_var5,param4);\n      if (temp_var2 != 0) {\n        return 0xffffffff;\n      }\n      lookup_array[2] = 0;\n      *(ushort *)(lookup_array + 3) = *(ushort *)(lookup_array + 3) & 0xfff7;\n      lookup_array[6] = 0;\n    }\n    *(ushort *)(lookup_array + 3) = *(ushort *)(lookup_array + 3) | 4;\n  }\n  if (data_2[4] == 0) {\n    FUN_00005700(input_array,lookup_array);\n  }\n  temp_var4 = *(ushort *)(lookup_array + 3);\n  temp_var1 = *(undefined2 *)(lookup_array + 3);\n  if ((temp_var4 & 3) != 0) {\n    *(undefined2 *)(lookup_array + 3) = 1;\n    FUN_000043a0(0x1fff0284,&constant_2);\n    *(undefined2 *)(lookup_array + 3) = temp_var1;\n    if ((temp_var4 & 9) == 9) {\n      FUN_0000404c(input_array,lookup_array);\n    }\n  }\n  temp_var3 = data_2[4];\n  *lookup_array = temp_var3;\n  temp_var2 = (*(code *)data_2[9])(input_array,data_2[8],temp_var3,data_2[5]);\n  param_ptr[1] = temp_var2;\n  if (0 < temp_var2) {\n    return 0;\n  }\n  temp_var4 = *(ushort *)(lookup_array + 3);\n  if (temp_var2 != 0) {\n    temp_var3 = 0;\n  }\n  else {\n    temp_var4 = temp_var4 | 0x20;\n  }\n  if (temp_var2 != 0) {\n    param_ptr[1] = temp_var3;\n    temp_var4 = temp_var4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(lookup_array + 3) = temp_var4;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_00006768",
            "entrypoint": "0x00006768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "LAB_00006754_1": "constant_2",
                "iVar2": "temp_var2",
                "param_1": "input_array",
                "param_1[1]": "data_1[1]",
                "param_1[2]": "data_1[2]",
                "param_1[3]": "data_1[3]",
                "param_1[6]": "param_array[6]",
                "param_2": "lookup_array",
                "param_2[0x10]": "param_ptr[0x10]",
                "param_2[0xd]": "param_ptr[0xd]",
                "param_2[0xf]": "data_2[15]",
                "param_2[1]": "param_ptr[1]",
                "param_2[4]": "data_2[4]",
                "param_2[5]": "data_2[5]",
                "param_2[8]": "data_2[8]",
                "param_2[9]": "data_2[9]",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp_var1",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000687c": {
            "additional_data": {
                "FUN_0000687c": {
                    "1": "reverse_extracted_bytes",
                    "2": "reverse_bytes",
                    "3": "reverse_bits",
                    "4": "extract_byte_sequence"
                },
                "bVar7": {
                    "1": "is_5e",
                    "2": "is_carat",
                    "4": "is_caret"
                },
                "iVar3": {
                    "1": "temp_var_2",
                    "21": "index",
                    "4": "i"
                },
                "param_1": {
                    "1": "segment_size",
                    "2": "byte_sequence_length",
                    "3": "sequence_length",
                    "8": "size",
                    "9": "length"
                },
                "param_2": {
                    "1": "buffer",
                    "13": "data",
                    "3": "input_array",
                    "4": "byte_sequence"
                },
                "pbVar1": {
                    "1": "result_pointer",
                    "2": "decoded_data",
                    "23": "result"
                },
                "uVar2": {
                    "1": "length",
                    "2": "temp_var1",
                    "5": "temp_var"
                },
                "uVar4": {
                    "1": "byte_value",
                    "2": "current",
                    "3": "current_value",
                    "4": "next_byte",
                    "6": "first_byte",
                    "8": "current_byte"
                },
                "uVar5": {
                    "1": "current_value",
                    "2": "second_byte",
                    "4": "start",
                    "5": "current_byte"
                },
                "uVar6": {
                    "1": "end_position",
                    "2": "end_index",
                    "4": "end",
                    "5": "end_byte"
                }
            },
            "called": [],
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "code": "\nbyte * extract_byte_sequence_0000687c(int length,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint current_byte;\n  uint current_byte;\n  uint end_byte;\n  bool is_caret;\n  \n  current_byte = (uint)*data;\n  is_caret = current_byte == 0x5e;\n  if (is_caret) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_caret;\n  } while (index != length + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      current_byte = current_byte;\n      *(bool *)(length + current_byte) = !is_caret;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        end_byte = (uint)*data;\n        if ((end_byte == 0x5d) || (temp_var = current_byte, (int)end_byte < (int)current_byte)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(length + temp_var) = !is_caret;\n        } while ((int)temp_var < (int)end_byte);\n        index = ~current_byte + end_byte;\n        if ((int)end_byte <= (int)current_byte) {\n          index = 0;\n        }\n        current_byte = current_byte + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "current_name": "extract_byte_sequence_0000687c",
            "entrypoint": "0x0000687c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000687c": "extract_byte_sequence_0000687c",
                "bVar7": "is_caret",
                "iVar3": "index",
                "param_1": "length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "uVar4": "current_byte",
                "uVar5": "current_byte",
                "uVar6": "end_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000068f0": {
            "additional_data": {
                "(int *)param_2[0xd]": {
                    "1": "current_block_address"
                },
                "(int)param_2 + 0x45": {
                    "1": "param2_value"
                },
                "(int)param_2 + 0x46": {
                    "1": "param1_value"
                },
                "*(undefined *)((int)param_2 + 0x45)": {
                    "1": "element2"
                },
                "*(undefined *)((int)param_2 + 0x46)": {
                    "1": "buffer[0x46]"
                },
                "*(undefined *)(iVar1 + 0x3fd)": {
                    "1": "third_byte"
                },
                "*(undefined *)(iVar1 + 0x3fe)": {
                    "1": "second_byte"
                },
                "*(undefined *)(iVar1 + 0x3ff)": {
                    "1": "first_byte"
                },
                "*(undefined *)(param_2 + 0x11)": {
                    "1": "buffer[0x11]"
                },
                "*param_1": {
                    "1": "init_param"
                },
                "*param_2": {
                    "1": "data_structure_start",
                    "2": "buffer[0]"
                },
                "0x400": {
                    "1": "memory_size",
                    "2": "buffer_size"
                },
                "0xffffffff": {
                    "2": "error_return_value",
                    "3": "error"
                },
                "FUN_00004bd0": {
                    "1": "create_new_buffer",
                    "13": "allocate_memory",
                    "5": "allocate_buffer"
                },
                "FUN_000060b0": {
                    "1": "copy_data_to_array",
                    "2": "copy_buffer_data",
                    "4": "copy_buffer",
                    "6": "copy_data"
                },
                "FUN_000060cc": {
                    "1": "resize_data_structure",
                    "3": "resize_array",
                    "6": "resize_buffer"
                },
                "FUN_000068f0": {
                    "1": "update_data",
                    "2": "initialize_data",
                    "3": "initialize_data_structure",
                    "9": "initialize_buffer"
                },
                "iVar1": {
                    "1": "new_data",
                    "2": "new_data_buffer",
                    "7": "new_buffer"
                },
                "iVar1 + 0x3fd": {
                    "1": "next_available_address"
                },
                "iVar1 + iVar2": {
                    "1": "new_block_address"
                },
                "iVar2": {
                    "1": "previous_size",
                    "2": "old_size",
                    "5": "current_size",
                    "7": "buffer_size"
                },
                "iVar2 << 1": {
                    "1": "new_block_size"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "buffer",
                    "3": "input_param",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "array_param",
                    "2": "data_structure",
                    "4": "data_buffer",
                    "5": "data_array",
                    "9": "buffer"
                },
                "param_2 + 0x11": {
                    "1": "next_block_address"
                },
                "param_2[0xd]": {
                    "1": "array[old_index]",
                    "2": "buffer[0xd]"
                },
                "param_2[0xe]": {
                    "1": "data_buffer[0xe]",
                    "3": "buffer_size"
                },
                "param_3": {
                    "1": "size"
                },
                "param_4": {
                    "1": "param_4"
                }
            },
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "calling": [],
            "code": "\nundefined4 initialize_buffer_000068f0(undefined4 data,int *buffer)\n\n{\n  int new_buffer;\n  int buffer_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = FUN_00004bd0(data,0x400);\n    if (new_buffer != 0) {\n      buffer_size = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    buffer_size = buffer_size;\n    new_buffer = FUN_000060cc(data,(int *)buffer[0xd],buffer_size << 1);\n    if (new_buffer != 0) {\n      FUN_000060b0(new_buffer + buffer_size,new_buffer,buffer_size);\n      buffer[0xd] = new_buffer;\n      buffer_size = buffer_size << 1;\n      *buffer = new_buffer + buffer_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_buffer_000068f0",
            "entrypoint": "0x000068f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000068f0": "initialize_buffer_000068f0",
                "iVar1": "new_buffer",
                "iVar2": "buffer_size",
                "param_1": "data",
                "param_2": "buffer",
                "param_2[0xd]": "buffer[0xd]",
                "param_2[0xe]": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006964": {
            "additional_data": {
                "*(int *)(param_2 + -4)": {
                    "1": "last_value"
                },
                "FUN_00006964": {
                    "1": "calculate_offset",
                    "17": "calculate_sum",
                    "2": "calculate_updated_value",
                    "4": "calculate_new_value",
                    "5": "calculate_result"
                },
                "iVar1": {
                    "1": "modified_value",
                    "2": "new_index",
                    "4": "updated_value",
                    "5": "index",
                    "6": "result",
                    "9": "sum"
                },
                "iVar1 + *(int *)(param_2 + iVar1)": {
                    "1": "updated_sum"
                },
                "param_1": {
                    "1": "first_parameter",
                    "2": "undefined",
                    "9": "result"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "array_address",
                    "3": "array_index",
                    "7": "array"
                },
                "param_2 + -4": {
                    "1": "last_index"
                },
                "param_2 + iVar1": {
                    "1": "current_value_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_000060cc"
            ],
            "code": "\nint calculate_sum_00006964(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "current_name": "calculate_sum_00006964",
            "entrypoint": "0x00006964",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006974": {
            "additional_data": {
                "FUN_00006974": {
                    "1": "extract_data_from_binary",
                    "2": "get_min_max",
                    "3": "get_constrained_value"
                },
                "FUN_00006a14": {
                    "1": "process_data_from_binary",
                    "2": "perform_calculation"
                },
                "iVar1": {
                    "1": "negative_value",
                    "2": "neg_value2",
                    "3": "temp_var1",
                    "4": "temp_var"
                },
                "local_8": {
                    "1": "temp2",
                    "2": "result",
                    "4": "buffer",
                    "6": "temp_array"
                },
                "param_1": {
                    "1": "start_param",
                    "2": "lower_limit",
                    "4": "num1",
                    "7": "value1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "upper_limit",
                    "4": "num2",
                    "7": "value2",
                    "8": "input2"
                },
                "param_3": {
                    "1": "value1",
                    "3": "limit1",
                    "4": "num3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "3": "limit2",
                    "4": "value4",
                    "8": "input4"
                },
                "param_5": {
                    "1": "param_array"
                },
                "uVar2": {
                    "1": "output_value",
                    "23": "result"
                }
            },
            "called": [
                "FUN_00006a14"
            ],
            "calling": [
                "FUN_0000443c"
            ],
            "code": "\nundefined8 get_constrained_value_00006974(int input1,int input2,int input3,int input4)\n\n{\n  int temp_var;\n  undefined8 result;\n  undefined temp_array [8];\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 < 0) {\n      input1 = 0;\n      input2 = -0x80000000;\n    }\n    else if (input2 != 0 || input1 != 0) {\n      input2 = 0x7fffffff;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  if (input2 < 0) {\n    temp_var = -input2 - (uint)(input1 != 0);\n    if (input4 < 0) {\n      result = FUN_00006a14(-input1,temp_var,-input3,-input4 - (uint)(input3 != 0),temp_array);\n      return result;\n    }\n    result = FUN_00006a14(-input1,temp_var,input3,input4,temp_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (input4 < 0) {\n    result = FUN_00006a14(input1,input2,-input3,-input4 - (uint)(input3 != 0),temp_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "current_name": "get_constrained_value_00006974",
            "entrypoint": "0x00006974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006974": "get_constrained_value_00006974",
                "iVar1": "temp_var",
                "local_8": "temp_array",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006a14": {
            "additional_data": {
                "CARRY4": {
                    "1": "carry_operation",
                    "2": "carry4"
                },
                "FUN_00006a14": {
                    "1": "perform_division",
                    "2": "calculate_quotient_remainder",
                    "3": "calculate_quotient_and_remainder",
                    "6": "divide_and_remainder"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "udf_function",
                    "5": "jump_table"
                },
                "bVar10": {
                    "1": "carry_occurred",
                    "19": "carry_flag",
                    "5": "carry"
                },
                "iVar2": {
                    "1": "bit_shift",
                    "11": "shift_count",
                    "15": "shift_amount",
                    "3": "shift"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "1": "dividend_high_word",
                    "14": "dividend_high",
                    "2": "divisor",
                    "3": "dividend_upper_bits",
                    "6": "dividend_upper"
                },
                "param_3": {
                    "1": "divisor_lower",
                    "27": "divisor"
                },
                "param_4": {
                    "1": "divisor_high_word",
                    "15": "divisor_high",
                    "3": "divisor_upper_bits",
                    "6": "divisor_upper"
                },
                "param_5": {
                    "1": "remainder_quotient",
                    "12": "remainder",
                    "2": "result",
                    "3": "quotient",
                    "5": "quotient_and_remainder"
                },
                "uVar1": {
                    "1": "dividend_quotient_upper",
                    "15": "quotient",
                    "2": "quotient1",
                    "3": "quotient_high"
                },
                "uVar10": {
                    "1": "carry_flag",
                    "2": "carry"
                },
                "uVar11": {
                    "1": "u_var11",
                    "27": "result",
                    "3": "return_value"
                },
                "uVar2": {
                    "1": "quotient_lower2"
                },
                "uVar3": {
                    "1": "dividend_temp",
                    "11": "temp1",
                    "2": "dividend_low"
                },
                "uVar4": {
                    "1": "quotient_high",
                    "2": "u_var4",
                    "3": "quotient_low",
                    "9": "temp2"
                },
                "uVar5": {
                    "1": "quotient_upper_bits",
                    "2": "u_var5",
                    "3": "quotient_low",
                    "6": "temp3"
                },
                "uVar6": {
                    "1": "divisor_quotient2",
                    "2": "temp1",
                    "3": "remainder",
                    "6": "temp4"
                },
                "uVar7": {
                    "1": "temp_value3",
                    "2": "temp2",
                    "3": "divisor_low",
                    "6": "temp5"
                },
                "uVar8": {
                    "1": "divisor_remainder_upper",
                    "2": "u_var8",
                    "3": "temp3",
                    "5": "temp6"
                },
                "uVar9": {
                    "1": "temp3",
                    "2": "temp4",
                    "4": "divisor_low",
                    "5": "temp7"
                }
            },
            "called": [],
            "calling": [
                "FUN_00006974"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divide_and_remainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      temp3 = divisor;\n      if (shift_amount != 0) {\n        temp3 = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = dividend_high / temp4;\n      temp1 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      quotient = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = carry4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = carry4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp7 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        temp3 = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_amount;\n        temp7 = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp1 = quotient / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << shift_amount;\n        quotient = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carry_flag = carry4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        dividend_high = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          carry_flag = carry4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          temp3 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            temp3 = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        temp3 = temp3 | quotient << 0x10;\n      }\n      temp6 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp6) * 0x10000;\n      quotient = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = carry4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carry_flag = carry4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    temp3 = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(divisor_high);\n    if (shift_amount != 0) {\n      temp5 = 0x20 - shift_amount;\n      temp1 = divisor >> (temp5 & 0xff) | divisor_high << shift_amount;\n      temp7 = temp1 >> 0x10;\n      quotient = dividend_high >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | dividend_high << shift_amount;\n      temp4 = quotient / temp7;\n      temp2 = temp3 >> 0x10 | (quotient - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_amount);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (temp5 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp3 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp3,quotient);\n}\n\n",
            "current_name": "divide_and_remainder_00006a14",
            "entrypoint": "0x00006a14",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "LZCOUNT": "leading_zero_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar10": "carry_flag",
                "iVar2": "shift_amount",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "quotient",
                "uVar11": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x0000099c",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 774760
}