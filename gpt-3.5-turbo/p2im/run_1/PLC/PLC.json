{
    "functions": {
        "FUN_080001ac": {
            "additional_data": {
                "DAT_20000104": {
                    "1": "is_flag_set",
                    "17": "flag",
                    "2": "flag_variable"
                },
                "FUN_080001ac": {
                    "1": "initialize_flag_if_zero",
                    "2": "set_flag_if_not_set",
                    "25": "initialize_flag"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "input_param",
                    "20": "input",
                    "4": "input_value"
                }
            },
            "called": [
                "FUN_080059f8"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initialize_flag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_080001ac",
            "entrypoint": "0x080001ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000230": {
            "additional_data": {
                "FUN_08000230": {
                    "1": "find_first_occurrence",
                    "2": "reverse_byte_sequence",
                    "22": "find_byte_sequence",
                    "3": "find_last_occurrence"
                },
                "bVar1": {
                    "1": "byte_value",
                    "29": "current_byte"
                },
                "bVar13": {
                    "1": "nonzero_lowest_byte",
                    "2": "check_1",
                    "3": "is_nonzero"
                },
                "bVar14": {
                    "1": "is_current_byte_shifted_16_nonzero",
                    "2": "is_nonzero_8"
                },
                "bVar15": {
                    "1": "fourth_xor_non_zero",
                    "2": "check_3"
                },
                "bVar16": {
                    "1": "byte_flag8",
                    "2": "check_4"
                },
                "bVar17": {
                    "1": "bit_mask_3"
                },
                "bVar18": {
                    "1": "condition_2"
                },
                "bVar19": {
                    "1": "condition_3"
                },
                "bVar20": {
                    "1": "condition_4"
                },
                "cVar2": {
                    "1": "byte_flag1",
                    "2": "bit_0",
                    "3": "is_current_byte_zero",
                    "5": "is_zero"
                },
                "cVar3": {
                    "1": "is_current_byte_shifted_8_zero",
                    "2": "mask_2"
                },
                "cVar4": {
                    "1": "check_3",
                    "2": "is_zero_16"
                },
                "cVar5": {
                    "1": "bit_24_of_result",
                    "2": "is_zero_24"
                },
                "param_1": {
                    "1": "array_ptr",
                    "13": "data",
                    "2": "buffer",
                    "5": "byte_array"
                },
                "param_2": {
                    "1": "pattern",
                    "16": "target_byte",
                    "2": "byte_value",
                    "5": "target",
                    "6": "byte_to_find"
                },
                "param_3": {
                    "1": "size",
                    "13": "length",
                    "2": "buffer_length",
                    "8": "array_length"
                },
                "pbVar6": {
                    "1": "ptr_data",
                    "2": "result_pointer",
                    "3": "next_byte_ptr",
                    "4": "result_ptr",
                    "5": "result",
                    "6": "next_byte_pointer",
                    "9": "next_byte"
                },
                "pbVar8": {
                    "1": "result_pointer_advanced",
                    "2": "result_pointer",
                    "5": "result",
                    "7": "result_ptr"
                },
                "puVar7": {
                    "1": "current_uint_ptr",
                    "2": "ptr_data",
                    "3": "next_uint_ptr",
                    "4": "data_ptr",
                    "7": "current_ptr"
                },
                "uVar10": {
                    "1": "length_rounded",
                    "2": "aligned_data_size",
                    "3": "length_mod_8",
                    "6": "aligned_length"
                },
                "uVar11": {
                    "1": "xored_byte_0",
                    "2": "xor_result_1",
                    "4": "xor_result1",
                    "5": "xor_result"
                },
                "uVar12": {
                    "1": "bitwise_result_8_31",
                    "3": "xor_result_2",
                    "4": "second_xor_result"
                },
                "uVar13": {
                    "1": "b_var13"
                },
                "uVar14": {
                    "1": "temp_4"
                },
                "uVar15": {
                    "1": "calc_3"
                },
                "uVar16": {
                    "1": "calc_4"
                },
                "uVar9": {
                    "1": "num_bits",
                    "2": "data_offset",
                    "3": "ptr_alignment",
                    "6": "offset"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char is_zero;\n  char is_zero_8;\n  char is_zero_16;\n  char is_zero_24;\n  byte *next_byte;\n  uint *current_ptr;\n  byte *result_ptr;\n  uint offset;\n  uint aligned_length;\n  uint xor_result;\n  uint xor_result2;\n  bool is_nonzero;\n  bool is_nonzero_8;\n  bool is_nonzero_16;\n  bool is_nonzero_24;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target_byte | target_byte << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result = *data ^ offset;\n          xor_result2 = data[1] ^ offset;\n          is_zero = -((char)xor_result == '\\0');\n          is_zero_8 = -((char)(xor_result >> 8) == '\\0');\n          is_zero_16 = -((char)(xor_result >> 0x10) == '\\0');\n          is_zero_24 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(is_zero_24,CONCAT12(is_zero_16,CONCAT11(is_zero_8,is_zero)));\n          is_nonzero = (char)xor_result2 != '\\0';\n          is_nonzero_8 = (char)(xor_result2 >> 8) != '\\0';\n          is_nonzero_16 = (char)(xor_result2 >> 0x10) != '\\0';\n          is_nonzero_24 = (char)(xor_result2 >> 0x18) != '\\0';\n          xor_result2 = CONCAT13(is_nonzero_24 * is_zero_24 - !is_nonzero_24,\n                            CONCAT12(is_nonzero_16 * is_zero_16 - !is_nonzero_16,\n                                     CONCAT11(is_nonzero_8 * is_zero_8 - !is_nonzero_8,is_nonzero * is_zero - !is_nonzero)));\n          if (xor_result2 != 0) {\n            if (xor_result == 0) {\n              result_ptr = (byte *)((int)data + 5);\n              xor_result = xor_result2;\n            }\n            else {\n              result_ptr = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              is_nonzero = (xor_result & 0x100) == 0;\n              next_byte = result_ptr + 1;\n              if (is_nonzero) {\n                is_nonzero = (xor_result & 0x18000) == 0;\n                next_byte = result_ptr + 2;\n              }\n              result_ptr = next_byte;\n              if (is_nonzero) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x08000290;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "current_name": "find_byte_sequence_08000230",
            "entrypoint": "0x08000230",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "bVar1": "current_byte",
                "bVar13": "is_nonzero",
                "bVar14": "is_nonzero_8",
                "bVar15": "is_nonzero_16",
                "bVar16": "is_nonzero_24",
                "cVar2": "is_zero",
                "cVar3": "is_zero_8",
                "cVar4": "is_zero_16",
                "cVar5": "is_zero_24",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "pbVar6": "next_byte",
                "pbVar8": "result_ptr",
                "puVar7": "current_ptr",
                "uVar10": "aligned_length",
                "uVar11": "xor_result",
                "uVar12": "xor_result2",
                "uVar9": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002d0": {
            "additional_data": {
                "CONCAT44": {
                    "1": "combine_parameters"
                },
                "FUN_080002d0": {
                    "1": "process_input_params",
                    "12": "calculate_result",
                    "2": "process_data",
                    "3": "process_parameters"
                },
                "param_1": {
                    "1": "input_param",
                    "13": "input1",
                    "3": "input_param1",
                    "9": "input_1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "13": "input2",
                    "3": "input_param2",
                    "9": "input_2"
                },
                "param_3": {
                    "1": "num3",
                    "3": "input_param3",
                    "5": "flag1",
                    "6": "input_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "input_param_4",
                    "3": "input_param4",
                    "5": "flag2",
                    "6": "input_4",
                    "9": "input4"
                },
                "uVar1": {
                    "25": "result"
                }
            },
            "called": [
                "FUN_08000300"
            ],
            "calling": [
                "FUN_080023b4"
            ],
            "code": "\nundefined8 calculate_result_080002d0(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return combine_parameters(input2,input1);\n  }\n  result = divide_with_remainder_08000300();\n  return result;\n}\n\n",
            "current_name": "calculate_result_080002d0",
            "entrypoint": "0x080002d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_parameters",
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000300": {
            "additional_data": {
                "CARRY4": {
                    "1": "check_carry"
                },
                "FUN_08000300": {
                    "1": "calculate_division_remainder",
                    "11": "divide_with_remainder",
                    "2": "perform_division",
                    "3": "div_mod",
                    "4": "divide_and_remainder"
                },
                "LZCOUNT": {
                    "4": "leading_zero_count"
                },
                "bVar1": {
                    "1": "carry_flag"
                },
                "bVar11": {
                    "1": "overflow",
                    "12": "carry",
                    "17": "carry_flag"
                },
                "iVar1": {
                    "1": "shift_amount"
                },
                "iVar10": {
                    "1": "bit_count",
                    "10": "shift_amount",
                    "3": "bit_shift",
                    "5": "shift",
                    "7": "shift_count"
                },
                "param_1": {
                    "1": "dividend_low",
                    "30": "dividend"
                },
                "param_2": {
                    "1": "numerator",
                    "3": "divisor_high",
                    "4": "dividend_upper",
                    "5": "divisor",
                    "6": "dividend_high"
                },
                "param_3": {
                    "1": "quotient_high",
                    "15": "divisor",
                    "3": "divisor_high",
                    "4": "divisor_low",
                    "5": "quotient"
                },
                "param_4": {
                    "1": "divisor_remainder",
                    "3": "divisor",
                    "4": "divisor_high",
                    "5": "divisor_upper",
                    "8": "remainder"
                },
                "param_5": {
                    "1": "result_array",
                    "2": "quotient",
                    "3": "remainder_ptr",
                    "4": "result",
                    "6": "quotient_and_remainder",
                    "8": "remainder"
                },
                "uVar1": {
                    "1": "quotient_high",
                    "17": "result",
                    "2": "product",
                    "7": "quotient"
                },
                "uVar10": {
                    "1": "divisor_high1"
                },
                "uVar11": {
                    "1": "quotient_limb_temp"
                },
                "uVar12": {
                    "1": "divisor_high2"
                },
                "uVar13": {
                    "1": "quotient_temp"
                },
                "uVar14": {
                    "1": "quotient_temp2"
                },
                "uVar15": {
                    "1": "remainder_temp"
                },
                "uVar2": {
                    "1": "temp_var1",
                    "10": "temp1",
                    "2": "quotient_low",
                    "3": "u_var2",
                    "5": "quotient"
                },
                "uVar3": {
                    "1": "quotient_low",
                    "2": "quotient1",
                    "3": "u_var3",
                    "5": "quotient_high",
                    "7": "temp2"
                },
                "uVar4": {
                    "1": "quotient_low1",
                    "2": "quotient",
                    "3": "quotient_low",
                    "6": "temp3"
                },
                "uVar5": {
                    "1": "temp3",
                    "2": "remainder2",
                    "3": "u_var5",
                    "4": "temp2",
                    "5": "temp1",
                    "6": "temp4"
                },
                "uVar6": {
                    "1": "remainder_lower",
                    "3": "temp3",
                    "6": "temp2"
                },
                "uVar7": {
                    "1": "quotient4",
                    "2": "temp1",
                    "3": "u_var7",
                    "5": "temp3",
                    "6": "temp6"
                },
                "uVar8": {
                    "1": "temporary0",
                    "2": "shift",
                    "3": "u_var8",
                    "5": "temp4",
                    "6": "temp7"
                },
                "uVar9": {
                    "1": "temp_8",
                    "2": "dividend_high",
                    "3": "temp3",
                    "5": "temp5",
                    "6": "temp8"
                }
            },
            "called": [],
            "calling": [
                "FUN_080002d0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_high,uint divisor,uint remainder,uint *remainder)\n\n{\n  ulonglong result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp2;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp7 = divisor >> 0x10;\n      temp2 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp2) * 0x10000;\n      temp3 = temp2 * (divisor & 0xffff);\n      temp2 = temp2;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = carry4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp2 = temp2 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp2 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - temp3) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp3) - temp7 * temp2) * 0x10000;\n      temp7 = temp2 * (divisor & 0xffff);\n      temp3 = temp2;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carry_flag = carry4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp2 - 1;\n        if ((carry_flag == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp2 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp7;\n      temp3 = temp3 | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp4 = divisor >> 0x10;\n        temp8 = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp4 = divisor >> 0x10;\n        temp3 = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp6 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp2 = temp3 / temp4;\n        temp8 = divisor & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp3 - temp4 * temp2) * 0x10000;\n        temp2 = temp2 * temp8;\n        dividend = dividend << shift_amount;\n        temp3 = temp2;\n        if (temp7 <= temp2 && temp2 - temp7 != 0) {\n          carry_flag = carry4(temp7,divisor);\n          temp7 = temp7 + divisor;\n          temp3 = temp2 - 1;\n          if ((carry_flag == false) && (temp7 <= temp2 && temp2 - temp7 != 0)) {\n            temp3 = temp2 - 2;\n            temp7 = temp7 + divisor;\n          }\n        }\n        temp1 = (temp7 - temp2) / temp4;\n        dividend_high = temp6 & 0xffff | ((temp7 - temp2) - temp4 * temp1) * 0x10000;\n        temp2 = temp1 * temp8;\n        temp2 = temp1;\n        if (dividend_high <= temp2 && temp2 - dividend_high != 0) {\n          carry_flag = carry4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          temp2 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp2 && temp2 - dividend_high != 0)) {\n            temp2 = temp1 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp2;\n        temp2 = temp2 | temp3 << 0x10;\n      }\n      temp6 = dividend_high / temp4;\n      temp7 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      temp3 = temp8 * temp6;\n      temp2 = temp6;\n      if (temp7 <= temp3 && temp3 - temp7 != 0) {\n        carry_flag = carry4(temp7,divisor);\n        temp7 = temp7 + divisor;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n          temp2 = temp6 - 2;\n          temp7 = temp7 + divisor;\n        }\n      }\n      temp6 = (temp7 - temp3) / temp4;\n      temp4 = dividend & 0xffff | ((temp7 - temp3) - temp4 * temp6) * 0x10000;\n      temp8 = temp8 * temp6;\n      temp3 = temp6;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carry_flag = carry4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp6 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp8;\n      temp3 = temp3 | temp2 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> shift_amount;\n      remainder[1] = 0;\n      return CONCAT44(temp2,temp3);\n    }\n  }\n  else if (dividend_high < remainder) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    temp3 = 0;\n    temp2 = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(remainder);\n    if (shift_amount != 0) {\n      temp7 = 0x20 - shift_amount;\n      temp2 = divisor >> (temp7 & 0xff) | remainder << shift_amount;\n      temp8 = temp2 >> 0x10;\n      temp3 = dividend_high >> (temp7 & 0xff);\n      temp1 = dividend >> (temp7 & 0xff) | dividend_high << shift_amount;\n      temp6 = temp3 / temp8;\n      temp2 = temp1 >> 0x10 | (temp3 - temp8 * temp6) * 0x10000;\n      temp4 = temp6 * (temp2 & 0xffff);\n      dividend = dividend << shift_amount;\n      temp3 = temp6;\n      if (temp2 <= temp4 && temp4 - temp2 != 0) {\n        carry_flag = carry4(temp2,temp2);\n        temp2 = temp2 + temp2;\n        temp3 = temp6 - 1;\n        if ((carry_flag == false) && (temp2 <= temp4 && temp4 - temp2 != 0)) {\n          temp3 = temp6 - 2;\n          temp2 = temp2 + temp2;\n        }\n      }\n      temp6 = (temp2 - temp4) / temp8;\n      temp2 = temp1 & 0xffff | ((temp2 - temp4) - temp8 * temp6) * 0x10000;\n      temp8 = temp6 * (temp2 & 0xffff);\n      temp4 = temp6;\n      if (temp2 <= temp8 && temp8 - temp2 != 0) {\n        carry_flag = carry4(temp2,temp2);\n        temp2 = temp2 + temp2;\n        temp4 = temp6 - 1;\n        if ((carry_flag == false) && (temp2 <= temp8 && temp8 - temp2 != 0)) {\n          temp4 = temp6 - 2;\n          temp2 = temp2 + temp2;\n        }\n      }\n      temp4 = temp4 | temp3 << 0x10;\n      result = (ulonglong)temp4 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp2 - temp8,dividend) < result) {\n        result = result - CONCAT44(temp2,divisor << shift_amount);\n        temp4 = temp4 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp3 = ((temp2 - temp8) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = temp3 << (temp7 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = temp3 >> shift_amount;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((remainder < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - remainder) - (uint)carry_flag;\n      temp3 = 1;\n    }\n    else {\n      temp3 = 0;\n    }\n    temp2 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return (ulonglong)temp3;\n    }\n  }\n  return CONCAT44(temp2,temp3);\n}\n\n",
            "current_name": "divide_with_remainder_08000300",
            "entrypoint": "0x08000300",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_08000300": "divide_with_remainder_08000300",
                "LZCOUNT": "leading_zero_count",
                "bVar1": "carry_flag",
                "bVar11": "carry_flag",
                "iVar1": "shift_amount",
                "iVar10": "shift_amount",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp2",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005e0": {
            "additional_data": {
                "<no_variables_renamed>": {
                    "1": "<no_changes>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "DAT_08000f00": {
                    "1": "interrupt_value"
                },
                "DAT_XXXXX": {
                    "1": "unchanged"
                },
                "FUN_080005e0": {
                    "1": "notify_system_call",
                    "2": "call_software_interrupt",
                    "3": "execute_system_call",
                    "5": "execute_software_interrupt"
                },
                "PTR_3f": {
                    "1": "interrupt_code"
                },
                "PTR_XXXXX": {
                    "1": "unchanged"
                },
                "original_parameter_name_1": {
                    "1": "new_parameter_name_1"
                },
                "original_variable_name_1": {
                    "1": "new_variable_name_1"
                },
                "software_interrupt": {
                    "1": "system_call",
                    "2": "invoke_system_call",
                    "5": "trigger_interrupt"
                }
            },
            "called": [],
            "calling": [
                "FUN_080005e4"
            ],
            "code": "\nvoid execute_software_interrupt_080005e0(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_080005e0",
            "entrypoint": "0x080005e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005e4": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "execute_software_interrupt"
                },
                "FUN_080005e4": {
                    "1": "execute_software_interrupt_wrapper",
                    "11": "execute_interrupt",
                    "2": "execute_software_interrupt",
                    "4": "execute_interrupt_check",
                    "6": "execute_interrupt_handler"
                },
                "param_1": {
                    "1": "input_value1",
                    "11": "input_param",
                    "2": "input_value",
                    "3": "input_1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "unused_param_1"
                },
                "param_3": {
                    "1": "input_value3",
                    "3": "unused_param_2"
                },
                "param_4": {
                    "1": "input_value4",
                    "3": "output",
                    "4": "arg4",
                    "7": "output_param"
                },
                "uVar1": {
                    "15": "result",
                    "3": "interrupt_result"
                }
            },
            "called": [
                "FUN_080005e0"
            ],
            "calling": [
                "FUN_08000c4c"
            ],
            "code": "\nundefined4 execute_interrupt_080005e4(undefined4 input_param,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_080005e0(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "current_name": "execute_interrupt_080005e4",
            "entrypoint": "0x080005e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005e4": "execute_interrupt_080005e4",
                "param_1": "input_param",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000600": {
            "additional_data": {
                "*(byte *)((int)param_1 + 6)": {
                    "1": "buffer_size"
                },
                "*(byte *)(param_1 + 6)": {
                    "1": "buffer_size"
                },
                "**(code **)(**param_1 + 0xc)": {
                    "1": "process_function"
                },
                "*param_1": {
                    "1": "data_buffer"
                },
                "FUN_08000600": {
                    "1": "configure_and_process",
                    "10": "initialize_serial_port",
                    "12": "configure_and_process_data",
                    "4": "initialize_serial_communication"
                },
                "cVar1": {
                    "1": "serial_port_value",
                    "2": "serial_port_type",
                    "3": "serial_mode"
                },
                "configure_serial_port_08004388": {
                    "4": "configure_serial_port"
                },
                "iVar2": {
                    "1": "loop_iteration",
                    "16": "result",
                    "2": "function_result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "serial_context",
                    "2": "serial_port_config",
                    "4": "data_pointer",
                    "9": "serial_port"
                },
                "param_2": {
                    "1": "port_address",
                    "2": "port_number",
                    "3": "param",
                    "6": "port_config"
                },
                "process_data_08004110": {
                    "1": "process_incoming_data",
                    "2": "process_data"
                },
                "process_data_080041bc": {
                    "1": "process_outgoing_data",
                    "2": "process_data2"
                }
            },
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "calling": [
                "FUN_08000c4c"
            ],
            "code": "\nvoid configure_and_process_data_08000600(int **serial_port,undefined4 port_config)\n\n{\n  char serial_mode;\n  int result;\n  \n  serial_mode = *(char *)((int)serial_port + 5);\n  if (serial_mode == '\\x02') {\n    *serial_port = &DAT_20000338;\n  }\n  else if (serial_mode == '\\x03') {\n    *serial_port = &DAT_20000338;\n  }\n  else if (serial_mode == '\\x01') {\n    *serial_port = &DAT_20000338;\n  }\n  else {\n    *serial_port = &DAT_20000338;\n  }\n  configure_serial_port(*serial_port,port_config,6);\n  if (1 < *(byte *)((int)serial_port + 6)) {\n    process_data(*(byte *)((int)serial_port + 6),1);\n    process_data2(*(undefined *)((int)serial_port + 6),0);\n  }\n  do {\n    result = (**(code **)(**serial_port + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)serial_port + 0x49) = 0;\n  *(undefined *)((int)serial_port + 0x4a) = 0;\n  *(undefined2 *)(serial_port + 0x15) = 0;\n  *(undefined2 *)((int)serial_port + 0x52) = 0;\n  *(undefined2 *)(serial_port + 0x14) = 0;\n  return;\n}\n\n",
            "current_name": "configure_and_process_data_08000600",
            "entrypoint": "0x08000600",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000600": "configure_and_process_data_08000600",
                "cVar1": "serial_mode",
                "configure_serial_port_08004388": "configure_serial_port",
                "iVar2": "result",
                "param_1": "serial_port",
                "param_2": "port_config",
                "process_data_08004110": "process_data",
                "process_data_080041bc": "process_data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800066c": {
            "additional_data": {
                "(char)param_3": {
                    "1": "clamped_limit"
                },
                "*(char *)(param_1 + 5)": {
                    "1": "store_limit"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data.value"
                },
                "*(undefined *)(param_1 + 6)": {
                    "1": "store_metadata"
                },
                "*(undefined2 *)(param_1 + 0x56)": {
                    "1": "constant_value"
                },
                "FUN_0800066c": {
                    "1": "update_parameters",
                    "11": "update_data",
                    "3": "set_parameters",
                    "4": "initialize_data"
                },
                "new_variable_name_1": {
                    "1": "value_pointer"
                },
                "new_variable_name_2": {
                    "1": "value_limited"
                },
                "new_variable_name_3": {
                    "1": "value_placeholder"
                },
                "param_1": {
                    "1": "data_structure_pointer",
                    "2": "memory_address",
                    "3": "data_pointer",
                    "4": "data",
                    "9": "data_address"
                },
                "param_1 + 0x56": {
                    "1": "config_timeout",
                    "2": "constant_value"
                },
                "param_1 + 4": {
                    "1": "config_value"
                },
                "param_1 + 5": {
                    "1": "address_of_limit"
                },
                "param_1 + 6": {
                    "1": "updated_more_data_pointer"
                },
                "param_2": {
                    "1": "input1",
                    "12": "new_value",
                    "2": "new_data",
                    "4": "value",
                    "8": "value1"
                },
                "param_3": {
                    "1": "param_val2",
                    "17": "limit",
                    "2": "max_value",
                    "7": "value2"
                },
                "param_4": {
                    "1": "updated_value",
                    "2": "extra_data",
                    "7": "value3"
                },
                "param_5": {
                    "1": "new_data"
                },
                "param_6": {
                    "1": "maximum_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000682"
            ],
            "code": "\nvoid update_data_0800066c(int data_address,undefined new_value,int limit,undefined value3)\n\n{\n  *(undefined *)(data_address + 4) = new_value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(data_address + 5) = clamped_limit;\n  *(undefined *)(data_address + 6) = value3;\n  *(undefined2 *)(data_address + 0x56) = 1000;\n  return;\n}\n\n",
            "current_name": "update_data_0800066c",
            "entrypoint": "0x0800066c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)param_3": "clamped_limit",
                "FUN_0800066c": "update_data_0800066c",
                "param_1": "data_address",
                "param_2": "new_value",
                "param_3": "limit",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000682": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "FUN_08000682": {
                    "1": "update_data_function",
                    "19": "update_data",
                    "2": "update_and_return",
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "param",
                    "3": "input_value",
                    "4": "input_parameter",
                    "6": "input_param",
                    "7": "input"
                },
                "update_data_0800066c": {
                    "1": "perform_data_update",
                    "4": "update_data"
                }
            },
            "called": [
                "FUN_0800066c"
            ],
            "calling": [
                "FUN_08000690"
            ],
            "code": "\nundefined4 update_data_08000682(undefined4 input)\n\n{\n  update_data_08000682();\n  return input;\n}\n\n",
            "current_name": "update_data_08000682",
            "entrypoint": "0x08000682",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000682": "update_data_08000682",
                "param_1": "input",
                "update_data_0800066c": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000690": {
            "additional_data": {
                "DAT_20000124": {
                    "2": "data_variable",
                    "5": "data_buffer"
                },
                "FUN_08000690": {
                    "1": "handle_param_update",
                    "2": "update_data_if_param1_equals_1",
                    "3": "update_data_if_condition_met",
                    "6": "update_data_if_param1_is_one"
                },
                "param_1": {
                    "1": "is_first_parameter_one",
                    "2": "is_param1_one",
                    "3": "flag",
                    "4": "status",
                    "6": "condition"
                },
                "param_2": {
                    "1": "param_2_value",
                    "17": "value",
                    "2": "flag_value",
                    "4": "param2_value"
                },
                "param_3": {
                    "1": "arg_1",
                    "2": "param_3",
                    "7": "unused_param"
                },
                "param_4": {
                    "1": "value",
                    "2": "param",
                    "4": "param4_value",
                    "6": "data"
                },
                "update_data_08000682": {
                    "1": "update_data_helper",
                    "16": "update_data"
                }
            },
            "called": [
                "FUN_08000682"
            ],
            "calling": [],
            "code": "\nvoid update_data_if_param1_is_one_08000690(int condition,int value,undefined4 unused_param,undefined4 data)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    update_data(&DAT_20000124,1,0,0,data);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_if_param1_is_one_08000690",
            "entrypoint": "0x08000690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000690": "update_data_if_param1_is_one_08000690",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unused_param",
                "param_4": "data",
                "update_data_08000682": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006b4": {
            "additional_data": {
                "(code **)(**param_1 + 0xc)": {
                    "1": "process_data_function_ptr"
                },
                "(code **)(**param_1 + 8)": {
                    "1": "read_data_function_ptr"
                },
                "(int)param_1 + 0x49": {
                    "1": "count_ptr"
                },
                "(int)param_1 + 0x49 + 9": {
                    "1": "next_processed_data_ptr"
                },
                "(int)param_1 + 9": {
                    "1": "processed_data_ptr"
                },
                "*(byte *)((int)param_1 + 5)": {
                    "1": "condition_value"
                },
                "*(byte *)((int)param_1 + 6)": {
                    "3": "data_length"
                },
                "*(byte *)(PTR_DAT_param_1 + 5)": {
                    "1": "limit"
                },
                "*(byte *)(PTR_DAT_param_1 + 6)": {
                    "1": "data_length"
                },
                "*(char *)((int)param_1 + 0x49)": {
                    "1": "data_array_index"
                },
                "*(char *)(PTR_DAT_param_1 + 0x49)": {
                    "1": "output_position"
                },
                "*(short *)(param_1 + 0x14)": {
                    "1": "data_counter_ptr"
                },
                "*(short *)(param_1 + 0x15)": {
                    "1": "overflow_counter_ptr"
                },
                "*(undefined *)((int)param_1 + 0x49)": {
                    "1": "current_index"
                },
                "*(undefined *)(PTR_DAT_param_1 + 0x49)": {
                    "1": "output_buffer"
                },
                "**(code **)(**param_1 + 0xc)": {
                    "1": "process_value"
                },
                "**(code **)(**param_1 + 0xc))": {
                    "1": "pointer_to_function_2"
                },
                "**(code **)(**param_1 + 8)": {
                    "1": "get_next_char_fn"
                },
                "**(code **)(**param_1 + 8))": {
                    "1": "pointer_to_function_1"
                },
                "**param_1": {
                    "1": "data_ptr"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "DAT_080041bc": {
                    "1": "unchange"
                },
                "DAT_FUN_080006b4": {
                    "1": "data"
                },
                "DAT_FUN_080006b4_1": {
                    "1": "data_1"
                },
                "FUN_080006b4": {
                    "1": "process_and_count_chars",
                    "12": "process_data",
                    "2": "process_data_and_count_chars",
                    "4": "process_and_count_bytes",
                    "6": "process_and_count_data"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "PTR_080041bc": {
                    "1": "process_data_ptr"
                },
                "PTR_FUN_**(code **)": {
                    "1": "func_pointer"
                },
                "PTR_FUN_080006b4": {
                    "1": "function_ptr"
                },
                "PTR_FUN_080006b4+0xc": {
                    "1": "function_pointer3"
                },
                "PTR_FUN_080006b4+8": {
                    "1": "function_pointer2"
                },
                "PTR_FUN_080006b4_1": {
                    "1": "function_ptr_1"
                },
                "PTR_FUN_080031bc": {
                    "1": "process_data_function"
                },
                "PTR_FUN_080031c0": {
                    "1": "get_next_data_function"
                },
                "PTR__param_1": {
                    "1": "unchange"
                },
                "PTR_fun1": {
                    "1": "function_ptr1"
                },
                "PTR_fun2": {
                    "1": "function_ptr2"
                },
                "bVar1": {
                    "1": "is_data_overflow",
                    "11": "is_full",
                    "2": "exceeded_threshold",
                    "7": "is_overflow"
                },
                "bVar4": {
                    "1": "char_index",
                    "11": "counter",
                    "2": "current_index",
                    "3": "index"
                },
                "code": {
                    "1": "function_ptr"
                },
                "iVar3": {
                    "1": "execution_result",
                    "12": "result"
                },
                "param_1": {
                    "1": "parameter",
                    "14": "data",
                    "2": "input_data",
                    "3": "data_pointer",
                    "6": "data_array"
                },
                "param_1 + 0x14": {
                    "1": "counter1"
                },
                "param_1 + 0x15": {
                    "1": "counter2"
                },
                "param_1 + 0x49": {
                    "1": "data_offset"
                },
                "process_data_080041bc": {
                    "1": "process_data080041bc",
                    "15": "process_data",
                    "4": "process_data_helper"
                },
                "uVar2": {
                    "1": "processed_value",
                    "10": "result",
                    "2": "data_value",
                    "4": "byte_value",
                    "6": "processed_data"
                }
            },
            "called": [
                "FUN_080041bc"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nint process_data_080006b4(int **data)\n\n{\n  bool is_full;\n  undefined result;\n  int result;\n  byte counter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080006b4(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    is_full = false;\n    while (result = (**(function_ptr **)(**data + 8))(), result != 0) {\n      counter = *(byte *)((int)data + 0x49);\n      result = (**(function_ptr **)(**data + 0xc))();\n      *(undefined *)((int)data + counter + 9) = result;\n      counter = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = counter;\n      if (0x3f < counter) {\n        is_full = true;\n      }\n    }\n  }\n  else {\n    is_full = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_full) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "current_name": "process_data_080006b4",
            "entrypoint": "0x080006b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "bVar1": "is_full",
                "bVar4": "counter",
                "code": "function_ptr",
                "iVar3": "result",
                "param_1": "data",
                "process_data_080041bc": "process_data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000728": {
            "additional_data": {
                "FUN_08000728": {
                    "2": "calculate_crc16",
                    "20": "calculate_checksum",
                    "3": "checksum"
                },
                "bVar1": {
                    "1": "bit_position",
                    "2": "bit_count",
                    "7": "bit",
                    "8": "bit_index"
                },
                "param_1": {
                    "1": "data_start_index",
                    "12": "data_address",
                    "2": "input_address",
                    "9": "data_start"
                },
                "param_2": {
                    "1": "input_length",
                    "23": "data_length",
                    "3": "length",
                    "4": "data_size"
                },
                "uVar2": {
                    "1": "initial_checksum",
                    "19": "checksum",
                    "2": "crc_value",
                    "8": "crc"
                },
                "uVar3": {
                    "1": "carry",
                    "16": "bit",
                    "5": "lsb"
                },
                "uVar4": {
                    "1": "iteration",
                    "10": "index",
                    "17": "i",
                    "2": "byte_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800076c"
            ],
            "code": "\nuint calculate_checksum_08000728(int data_address,int data_length)\n\n{\n  byte bit_counter;\n  uint checksum;\n  uint bit;\n  uint i;\n  \n  checksum = 0xffff;\n  for (i = 0; (int)i < data_length; i = i + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_address + i + 9);\n    for (bit_counter = 1; bit_counter < 9; bit_counter = bit_counter + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "current_name": "calculate_checksum_08000728",
            "entrypoint": "0x08000728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "bVar1": "bit_counter",
                "param_1": "data_address",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "i"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800076c": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "update_checksum"
                },
                "<param_1>": {
                    "1": "data_ptr"
                },
                "<param_2>": {
                    "1": "param2"
                },
                "<param_3>": {
                    "1": "param3"
                },
                "<param_4>": {
                    "1": "param4"
                },
                "FUN_0800076c": {
                    "1": "update_param_and_process_data",
                    "2": "update_data_checksum",
                    "20": "update_checksum_and_process_data",
                    "5": "update_checksum"
                },
                "calculate_checksum_08000728": {
                    "4": "calculate_checksum"
                },
                "iVar2": {
                    "1": "data_value",
                    "21": "result",
                    "6": "return_value"
                },
                "initialize_data_08004204": {
                    "4": "initialize_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_ptr",
                    "23": "data"
                },
                "param_2": {
                    "1": "var2",
                    "2": "value1",
                    "26": "param2"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "value2",
                    "26": "param3"
                },
                "param_4": {
                    "1": "var4",
                    "2": "value3",
                    "26": "param4"
                },
                "process_data_080041bc": {
                    "4": "process_data"
                },
                "uVar1": {
                    "1": "calculated_checksum",
                    "30": "checksum"
                },
                "uVar3": {
                    "1": "checksum_index",
                    "2": "length",
                    "20": "index"
                }
            },
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "code": "\nvoid update_checksum_and_process_data_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksum;\n  int result;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  checksum = calculate_checksum(data,index,param3,param4,param4);\n  *(char *)((int)data + index + 9) = (char)((ushort)checksum >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)checksum;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = initialize_data();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "current_name": "update_checksum_and_process_data_0800076c",
            "entrypoint": "0x0800076c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800076c": "update_checksum_and_process_data_0800076c",
                "calculate_checksum_08000728": "calculate_checksum",
                "iVar2": "result",
                "initialize_data_08004204": "initialize_data",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_080041bc": "process_data",
                "uVar1": "checksum",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080007f0": {
            "additional_data": {
                "FUN_080007f0": {
                    "1": "check_and_modify_value",
                    "2": "validate_input",
                    "4": "check_conditions",
                    "6": "check_values"
                },
                "bVar1": {
                    "1": "is_matching",
                    "2": "condition_met",
                    "4": "is_valid",
                    "6": "found_match",
                    "8": "is_match"
                },
                "bVar2": {
                    "1": "result",
                    "22": "combined_value",
                    "4": "combined_byte"
                },
                "cVar3": {
                    "1": "combination_1",
                    "10": "combined_value1",
                    "2": "first_combined_value",
                    "3": "combined_result_1"
                },
                "cVar4": {
                    "1": "result_2",
                    "10": "combined_value2",
                    "2": "second_combined_value",
                    "3": "combined_result_2"
                },
                "iVar5": {
                    "1": "result",
                    "2": "combined_value_3",
                    "3": "combined_result1",
                    "5": "combined_value_1"
                },
                "iVar7": {
                    "1": "result",
                    "2": "value",
                    "3": "combined_result2",
                    "5": "combined_value_2"
                },
                "param_1": {
                    "1": "value_ptr",
                    "2": "base_address",
                    "3": "address",
                    "4": "data_ptr",
                    "5": "input",
                    "6": "input_address"
                },
                "param_1 + 0x54": {
                    "1": "counter_address"
                },
                "param_1 + 0x60": {
                    "1": "threshold"
                },
                "param_1 + 0xb": {
                    "1": "input1"
                },
                "param_1 + 0xc": {
                    "1": "input2"
                },
                "param_1 + 10": {
                    "1": "operation"
                },
                "param_2": {
                    "1": "param",
                    "2": "size",
                    "4": "input_value",
                    "5": "value",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "parameter_value",
                    "2": "value2",
                    "3": "param_3",
                    "4": "value"
                },
                "param_4": {
                    "1": "data_value_2",
                    "2": "value_2",
                    "6": "param4",
                    "8": "param_4"
                },
                "uVar6": {
                    "1": "current_index",
                    "12": "index",
                    "2": "loop_counter",
                    "3": "iterator",
                    "8": "counter"
                }
            },
            "called": [
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nundefined4 check_values_080007f0(int input_address,undefined4 param_2,uint value,undefined4 param_4)\n\n{\n  bool is_match;\n  byte combined_value;\n  char combined_value_1;\n  char combined_value_2;\n  int combined_value_1;\n  uint index;\n  int combined_value_2;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(input_address + 0x54) = *(short *)(input_address + 0x54) + 1;\n        return 1;\n      }\n      combined_value_2 = *(byte *)(input_address + 10) - 1;\n      switch(*(byte *)(input_address + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        combined_value_1 = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),value,\n                             combined_value_2,param_4);\n        combined_value_2 = combine_values_08004640(*(undefined *)(input_address + 0xd),*(undefined *)(input_address + 0xe));\n        if (*(byte *)(input_address + 0x60) < (byte)(combined_value_2 + combined_value_1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combined_value_2 = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),value,\n                             combined_value_2,param_4);\n        if ((uint)*(byte *)(input_address + 0x60) < (uint)(combined_value_2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combined_value = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),value,\n                             combined_value_2,param_4);\n        if (*(byte *)(input_address + 0x60) < combined_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(input_address + 10);\n    if ((byte)(&DAT_08005a10)[index] == value) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combined_value_2 = combine_values_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),value,combined_value_2,\n                       param_4);\n  combined_value_1 = combine_values_08004640(*(undefined *)(input_address + 0xd),*(undefined *)(input_address + 0xe));\n  if ((uint)*(byte *)(input_address + 0x60) <\n      (((uint)(combined_value_2 << 0xc) >> 0x10) + ((uint)(combined_value_1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_values_080007f0",
            "entrypoint": "0x080007f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080007f0": "check_values_080007f0",
                "bVar1": "is_match",
                "bVar2": "combined_value",
                "cVar3": "combined_value_1",
                "cVar4": "combined_value_2",
                "iVar5": "combined_value_1",
                "iVar7": "combined_value_2",
                "param_1": "input_address",
                "param_3": "value",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008cc": {
            "additional_data": {
                "*(byte *)(param_1 + 10)": {
                    "1": "buffer[10]",
                    "2": "byte_to_modify",
                    "3": "byte_value"
                },
                "*(byte *)(param_1 + 10) ^ 0x80": {
                    "1": "modified_value"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "result",
                    "2": "constant_value"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "param_1_address"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "source_byte",
                    "3": "source"
                },
                "*(undefined *)(param_1 + 9)": {
                    "1": "buffer[9]",
                    "3": "destination"
                },
                "+0x49": {
                    "1": "constant_value"
                },
                "+0xb": {
                    "1": "user_data_offset"
                },
                "+10": {
                    "1": "flag_offset"
                },
                "+4": {
                    "1": "src_offset"
                },
                "+9": {
                    "1": "dest_offset"
                },
                "0x10": {
                    "1": "mask"
                },
                "0x4": {
                    "1": "source_offset"
                },
                "0x49": {
                    "1": "constant",
                    "3": "constant_value"
                },
                "0x80": {
                    "1": "0b10000000"
                },
                "0x9": {
                    "1": "dest_offset"
                },
                "0xb": {
                    "1": "new_value_offset"
                },
                "10": {
                    "1": "target_byte"
                },
                "4": {
                    "1": "source",
                    "2": "source_offset"
                },
                "9": {
                    "1": "destination",
                    "2": "destination_offset"
                },
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_080008cc": {
                    "1": "copy_and_flip_bits",
                    "16": "copy_and_modify_data",
                    "3": "copy_data_and_toggle_flag",
                    "5": "copy_data"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "VAR_1": {
                    "1": "destination"
                },
                "VAR_2": {
                    "1": "control_byte"
                },
                "b": {
                    "1": "existing_value"
                },
                "byte": {
                    "1": "byte_type"
                },
                "c": {
                    "1": "new_value_flag"
                },
                "param_1": {
                    "1": "buffer",
                    "3": "data_address",
                    "7": "source_address"
                },
                "param_1 + 0x49": {
                    "1": "constant"
                },
                "param_1 + 0xb": {
                    "1": "data_to_store"
                },
                "param_1 + 10": {
                    "1": "byte_to_flip"
                },
                "param_1 + 4": {
                    "1": "source_value"
                },
                "param_1 + 9": {
                    "1": "destination"
                },
                "param_1+0x49": {
                    "1": "flag_value"
                },
                "param_1+0xb": {
                    "1": "new_data_address"
                },
                "param_1+10": {
                    "1": "flag_address"
                },
                "param_1+4": {
                    "1": "data_to_copy_address"
                },
                "param_1+9": {
                    "1": "destination_address"
                },
                "param_2": {
                    "1": "new_data_value",
                    "13": "new_value",
                    "2": "new_data",
                    "6": "data"
                },
                "param_3": {
                    "2": "destination_address"
                },
                "sourceAddress + 0x49": {
                    "1": "constant_value"
                },
                "sourceAddress + 0xb": {
                    "1": "destination_address2"
                },
                "sourceAddress + 4": {
                    "1": "temp_value"
                },
                "sourceAddress + 9": {
                    "1": "destination_address1"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nvoid copy_and_modify_data_080008cc(int source_address,undefined new_value)\n\n{\n  *(undefined *)(source_address + 9) = *(undefined *)(source_address + 4);\n  *(byte_type *)(source_address + 10) = *(byte_type *)(source_address + 10) ^ 0x80;\n  *(undefined *)(source_address + 0xb) = new_value;\n  *(undefined *)(source_address + 0x49) = 3;\n  return;\n}\n\n",
            "current_name": "copy_and_modify_data_080008cc",
            "entrypoint": "0x080008cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "byte": "byte_type",
                "param_1": "source_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008e2": {
            "additional_data": {
                "FUN_080008e2": {
                    "1": "process_and_update_data",
                    "11": "process_data",
                    "2": "update_values",
                    "9": "combine_and_process_data"
                },
                "cVar5": {
                    "1": "updated_char",
                    "11": "shifted_value",
                    "2": "bit_value",
                    "3": "shifted_bit",
                    "4": "shifted_char"
                },
                "combine_values_08004640": {
                    "1": "combine_values"
                },
                "iVar1": {
                    "1": "combined_result",
                    "2": "combined_values",
                    "20": "combined_value",
                    "4": "combined_value1"
                },
                "iVar6": {
                    "1": "index_plus_data_offset",
                    "2": "byte_offset",
                    "3": "address",
                    "5": "byte_index",
                    "7": "offset"
                },
                "iVar6 + 9": {
                    "1": "bit_manipulation_address"
                },
                "inputData + 0xb": {
                    "1": "address_a"
                },
                "inputData + 0xc": {
                    "1": "address_b"
                },
                "inputData + 0xd": {
                    "1": "address_c"
                },
                "inputData + 0xe": {
                    "1": "address_d"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data_pointer",
                    "3": "input_buffer",
                    "4": "input_data",
                    "6": "data_ptr",
                    "9": "data"
                },
                "param_1 + 0x49": {
                    "1": "checksum_address"
                },
                "param_2": {
                    "1": "length",
                    "2": "input_buffer",
                    "3": "input"
                },
                "param_2 + ((uVar3 + iVar1) * 0x100000 >> 0x18) * 2": {
                    "1": "data_address"
                },
                "param_3": {
                    "1": "value3",
                    "12": "param3",
                    "3": "value_1",
                    "4": "param_a",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "param_2",
                    "12": "param4",
                    "3": "value_2",
                    "4": "param_b",
                    "6": "param_4"
                },
                "uVar2": {
                    "1": "value2",
                    "2": "num_elements",
                    "4": "combined_value_2",
                    "7": "combined_value2"
                },
                "uVar3": {
                    "1": "iteration_count",
                    "14": "index",
                    "2": "i",
                    "3": "loop_index",
                    "6": "counter"
                },
                "uVar4": {
                    "1": "bit_position",
                    "20": "bit_index",
                    "8": "bit_counter"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "process_data",
                    "2": "update_checksum_and_process_data"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nint process_data_080008e2(int data,int data_buffer,undefined4 param3,undefined4 param4)\n\n{\n  int combined_value;\n  uint combined_value2;\n  uint index;\n  uint bit_index;\n  char shifted_value;\n  int offset;\n  \n  combined_value = combine_values(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param3,param4,\n                       param4);\n  combined_value2 = combine_values(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  shifted_value = (char)((combined_value2 << 0x15) >> 0x18);\n  if ((combined_value2 & 7) != 0) {\n    shifted_value = shifted_value + '\\x01';\n  }\n  *(char *)(data + 0xb) = shifted_value;\n  *(undefined *)(data + 0x49) = 3;\n  bit_index = 0;\n  for (index = 0; (int)index < (int)combined_value2; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(data_buffer + ((index + combined_value) * 0x100000 >> 0x18) * 2) >>\n         (index + combined_value & 0xf) & 1U) == 0) {\n      offset = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) & ~(byte)(1 << bit_index);\n    }\n    else {\n      offset = (uint)*(byte *)(data + 0x49) + data;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) | (byte)(1 << bit_index);\n    }\n    bit_index = bit_index + 1 & 0xff;\n    if (7 < bit_index) {\n      *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n      bit_index = 0;\n    }\n  }\n  if ((combined_value2 & 7) != 0) {\n    *(char *)(data + 0x49) = *(char *)(data + 0x49) + '\\x01';\n  }\n  shifted_value = *(char *)(data + 0x49);\n  update_checksum_and_process_data_080008e2(data);\n  return (int)(char)(shifted_value + '\\x02');\n}\n\n",
            "current_name": "process_data_080008e2",
            "entrypoint": "0x080008e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "cVar5": "shifted_value",
                "combine_values_08004640": "combine_values",
                "iVar1": "combined_value",
                "iVar6": "offset",
                "param_1": "data",
                "param_2": "data_buffer",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "combined_value2",
                "uVar3": "index",
                "uVar4": "bit_index",
                "update_checksum_and_process_data_0800076c": "update_checksum_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "(char)((ushort)*(undefined2 *)(param_2 + uVar5 * 2) >> 8)": {
                    "1": "high_byte_conversion"
                },
                "*(byte *)(param_1 + 0xb)": {
                    "1": "shifted_byte"
                },
                "*(char *)(param_1 + (uint)bVar1 + 9)": {
                    "1": "high_byte"
                },
                "*(char *)(param_1 + 0x49) + '\\x02'": {
                    "1": "updated_checksum"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "checksum_ptr"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "first_byte"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "second_byte"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "third_byte"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "fourth_byte"
                },
                "*(undefined *)(param_1 + uVar6 + 9)": {
                    "1": "low_byte"
                },
                "*(undefined *)(param_2 + uVar5 * 2)": {
                    "1": "input_byte"
                },
                "FUN_08000998": {
                    "1": "extract_and_process_data",
                    "18": "process_data",
                    "3": "process_data_and_update_checksum",
                    "5": "combine_and_process_data"
                },
                "bVar1": {
                    "1": "new_byte",
                    "2": "temp_byte_1",
                    "3": "byte_var1",
                    "5": "counter",
                    "6": "byte_value"
                },
                "bVar3": {
                    "1": "result1",
                    "12": "combined_value1",
                    "2": "byte_var3",
                    "3": "combined_value",
                    "9": "combined_value_1"
                },
                "bVar4": {
                    "1": "byte_var3",
                    "12": "combined_value2",
                    "2": "byte_var4",
                    "3": "combined_val_2",
                    "9": "combined_value_2"
                },
                "cVar2": {
                    "1": "checksum",
                    "2": "char_val",
                    "4": "char_var",
                    "6": "temp_char",
                    "7": "char_value"
                },
                "param_1": {
                    "1": "input_param",
                    "10": "data_ptr",
                    "2": "input_data",
                    "5": "data",
                    "7": "data_buffer"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "data_array",
                    "5": "input",
                    "6": "input_data",
                    "9": "input_ptr"
                },
                "param_3": {
                    "1": "arg1",
                    "13": "param_3",
                    "2": "param_a",
                    "3": "param1",
                    "4": "value1",
                    "7": "param3"
                },
                "param_4": {
                    "1": "arg2",
                    "13": "param_4",
                    "2": "param_b",
                    "3": "param2",
                    "4": "value2",
                    "7": "param4"
                },
                "uVar5": {
                    "1": "loop_var1",
                    "10": "index",
                    "2": "counter",
                    "5": "loop_counter",
                    "6": "loop_index"
                },
                "uVar6": {
                    "1": "new_loop_counter",
                    "13": "next_index",
                    "2": "current_index"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "update_and_process",
                    "3": "update_checksum_and_process_data"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_value;\n  char char_value;\n  byte combined_value1;\n  byte combined_value2;\n  uint index;\n  uint next_index;\n  \n  combined_value1 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  combined_value2 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = combined_value2 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (index = (uint)combined_value1; index < (uint)combined_value1 + (uint)combined_value2; index = index + 1 & 0xff) {\n    byte_value = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte_value + 9) = (char)((ushort)*(undefined2 *)(input_ptr + index * 2) >> 8)\n    ;\n    next_index = byte_value + 1 & 0xff;\n    char_value = (char)next_index;\n    *(char *)(data_ptr + 0x49) = char_value;\n    *(undefined *)(data_ptr + next_index + 9) = *(undefined *)(input_ptr + index * 2);\n    *(char *)(data_ptr + 0x49) = char_value + '\\x01';\n  }\n  char_value = *(char *)(data_ptr + 0x49);\n  update_checksum_and_process_data_08000998(data_ptr);\n  return (int)(char)(char_value + '\\x02');\n}\n\n",
            "current_name": "process_data_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "bVar1": "byte_value",
                "bVar3": "combined_value1",
                "bVar4": "combined_value2",
                "cVar2": "char_value",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "uVar5": "index",
                "uVar6": "next_index",
                "update_checksum_and_process_data_0800076c": "update_checksum_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a00": {
            "additional_data": {
                "*(char *)(param_1 + 0xd)": {
                    "1": "char_value"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "byte_value"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "byte_1"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "byte_2"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "flag"
                },
                "*(ushort *)(param_2 + uVar2 * 2)": {
                    "1": "result"
                },
                "*(ushort *)(param_2 + uVar2 * 2) & ~(ushort)(1 << (uVar1 & 0xf))": {
                    "1": "unset_bitwise_result"
                },
                "1 << (uVar1 & 0xf)": {
                    "1": "bitwise_result"
                },
                "FUN_08000a00": {
                    "1": "update_values",
                    "2": "update_data_and_checksum",
                    "9": "update_data"
                },
                "combine_values_08004640": {
                    "1": "combine_values"
                },
                "param_1": {
                    "1": "input_address",
                    "11": "data_ptr",
                    "2": "data_offset",
                    "3": "data_array",
                    "7": "data_address"
                },
                "param_2": {
                    "1": "result_pointer",
                    "2": "memory_ptr",
                    "3": "output_ptr",
                    "4": "result_ptr"
                },
                "param_3": {
                    "1": "variable1",
                    "12": "value_1",
                    "2": "input_value1",
                    "3": "param3",
                    "4": "value1"
                },
                "param_4": {
                    "1": "variable2",
                    "12": "value_2",
                    "2": "param_4",
                    "3": "param4",
                    "4": "value2"
                },
                "uVar1": {
                    "30": "combined_value"
                },
                "uVar2": {
                    "1": "bit_offset",
                    "2": "index",
                    "24": "shifted_value",
                    "3": "shifted_index"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "update_checksum_and_process_data",
                    "3": "process_data"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nundefined4 update_data_08000a00(int data_ptr,int result_ptr,undefined4 value_1,undefined4 value_2)\n\n{\n  uint combined_value;\n  uint shifted_value;\n  \n  combined_value = combine_values(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),value_1,value_2,\n                       value_2);\n  shifted_value = (combined_value << 0x14) >> 0x18;\n  if (*(char *)(data_ptr + 0xd) == -1) {\n    *(ushort *)(result_ptr + shifted_value * 2) =\n         (ushort)(1 << (combined_value & 0xf)) | *(ushort *)(result_ptr + shifted_value * 2);\n  }\n  else {\n    *(ushort *)(result_ptr + shifted_value * 2) =\n         *(ushort *)(result_ptr + shifted_value * 2) & ~(ushort)(1 << (combined_value & 0xf));\n  }\n  *(undefined *)(data_ptr + 0x49) = 6;\n  process_data(data_ptr);\n  return 8;\n}\n\n",
            "current_name": "update_data_08000a00",
            "entrypoint": "0x08000a00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "combine_values_08004640": "combine_values",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "combined_value",
                "uVar2": "shifted_value",
                "update_checksum_and_process_data_0800076c": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "additional_data": {
                "FUN_08000a4e": {
                    "1": "update_value_and_checksum",
                    "10": "process_data",
                    "2": "update_values_and_process",
                    "3": "update_data_and_return_value",
                    "5": "update_values_and_checksum"
                },
                "bVar1": {
                    "1": "first_combined_value",
                    "11": "combined_value_1",
                    "5": "combined_value1",
                    "6": "combined_value",
                    "7": "combined_byte"
                },
                "combine_values_08004640": {
                    "1": "combine_bytes"
                },
                "param_1": {
                    "1": "input",
                    "15": "data_address",
                    "2": "data_offset",
                    "3": "input_data",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "output",
                    "2": "result_pointer",
                    "3": "result_ptr",
                    "8": "output_address",
                    "9": "result_address"
                },
                "uVar2": {
                    "1": "result",
                    "11": "combined_value_2",
                    "6": "combined_value2",
                    "7": "combined_value"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "process_data_and_update_checksum"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nundefined4 process_data_08000a4e(int data_address,int result_address)\n\n{\n  byte combined_value_1;\n  undefined2 combined_value_2;\n  \n  combined_value_1 = combine_bytes(*(undefined *)(data_address + 0xb),*(undefined *)(data_address + 0xc));\n  combined_value_2 = combine_bytes(*(undefined *)(data_address + 0xd),*(undefined *)(data_address + 0xe));\n  *(undefined2 *)(result_address + (uint)combined_value_1 * 2) = combined_value_2;\n  *(undefined *)(data_address + 0x49) = 6;\n  process_data_08000a4e_and_update_checksum(data_address);\n  return 8;\n}\n\n",
            "current_name": "process_data_08000a4e",
            "entrypoint": "0x08000a4e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a4e": "process_data_08000a4e",
                "bVar1": "combined_value_1",
                "combine_values_08004640": "combine_bytes",
                "param_1": "data_address",
                "param_2": "result_address",
                "uVar2": "combined_value_2",
                "update_checksum_and_process_data_0800076c": "process_data_and_update_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "additional_data": {
                "FUN_08000a7a": {
                    "1": "update_data_values",
                    "2": "update_data",
                    "4": "update_values",
                    "9": "process_data"
                },
                "iVar1": {
                    "1": "combined_value_a",
                    "12": "combined_value_1",
                    "14": "combined_value1",
                    "3": "combined_value"
                },
                "iVar2": {
                    "1": "combined_result_2",
                    "12": "combined_value_2",
                    "14": "combined_value2"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_address",
                    "6": "data",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "data_output_offset",
                    "2": "result_ptr",
                    "3": "output_address",
                    "6": "output",
                    "9": "output_ptr"
                },
                "param_3": {
                    "1": "param_ptr",
                    "16": "param_3",
                    "2": "param_a",
                    "7": "param3"
                },
                "param_4": {
                    "1": "input_2",
                    "16": "param_4",
                    "2": "value_2",
                    "7": "param4"
                },
                "uVar3": {
                    "1": "iteration_count",
                    "14": "loop_counter",
                    "3": "loop_index",
                    "4": "index",
                    "5": "counter"
                },
                "uVar4": {
                    "1": "loop_counter_2",
                    "19": "bit_counter",
                    "3": "bit_shift",
                    "5": "bit_offset"
                },
                "uVar5": {
                    "24": "bit_position",
                    "3": "bit_index",
                    "4": "bit_offset"
                },
                "uVar6": {
                    "1": "index",
                    "2": "array_index",
                    "3": "offset",
                    "4": "output_index",
                    "6": "byte_index"
                },
                "uVar7": {
                    "1": "u_var7",
                    "2": "data_offset",
                    "3": "offset",
                    "6": "byte_offset",
                    "7": "byte_index"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "process_data"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nundefined4 process_data_08000a7a(int data_ptr,int output_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int combined_value1;\n  int combined_value2;\n  uint loop_counter;\n  uint bit_counter;\n  uint bit_position;\n  uint byte_index;\n  uint byte_index;\n  \n  combined_value1 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  combined_value2 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  bit_counter = 0;\n  byte_index = 7;\n  for (loop_counter = 0; (int)loop_counter < combined_value2; loop_counter = loop_counter + 1 & 0xffff) {\n    byte_index = (loop_counter + combined_value1) * 0x100000 >> 0x18;\n    bit_position = loop_counter + combined_value1 & 0xf;\n    if (((int)(uint)*(byte *)(data_ptr + byte_index + 9) >> bit_counter & 1U) == 0) {\n      *(ushort *)(output_ptr + byte_index * 2) = *(ushort *)(output_ptr + byte_index * 2) & ~(ushort)(1 << bit_position);\n    }\n    else {\n      *(ushort *)(output_ptr + byte_index * 2) = (ushort)(1 << bit_position) | *(ushort *)(output_ptr + byte_index * 2);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      byte_index = byte_index + 1 & 0xff;\n      bit_counter = 0;\n    }\n  }\n  *(undefined *)(data_ptr + 0x49) = 6;\n  update_checksum(data_ptr);\n  return 8;\n}\n\n",
            "current_name": "process_data_08000a7a",
            "entrypoint": "0x08000a7a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a7a": "process_data_08000a7a",
                "iVar1": "combined_value1",
                "iVar2": "combined_value2",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "uVar3": "loop_counter",
                "uVar4": "bit_counter",
                "uVar5": "bit_position",
                "uVar6": "byte_index",
                "uVar7": "byte_index",
                "update_checksum_and_process_data_0800076c": "update_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000b04": {
            "additional_data": {
                "FUN_08000b04": {
                    "1": "decrypt_and_process_data",
                    "12": "process_data",
                    "2": "decode_and_process_data",
                    "4": "combine_and_process_data"
                },
                "bVar1": {
                    "1": "current_index",
                    "2": "offset",
                    "3": "first_byte",
                    "5": "byte_1"
                },
                "bVar2": {
                    "1": "count",
                    "2": "length",
                    "3": "value2",
                    "4": "num_elements",
                    "5": "byte2"
                },
                "cVar3": {
                    "1": "checksum_value",
                    "18": "checksum",
                    "3": "char_value",
                    "4": "char_1",
                    "5": "char1"
                },
                "combine_values_08004640": {
                    "1": "combine_values"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "data_buffer",
                    "3": "input_data",
                    "9": "data_ptr"
                },
                "param_1 + (uVar5 + 4) * 2 + 9": {
                    "1": "destination_index"
                },
                "param_2": {
                    "1": "result_pointer",
                    "2": "output_buffer",
                    "3": "output_data",
                    "4": "output_ptr",
                    "5": "result_ptr"
                },
                "param_2 + (bVar1 + uVar5) * 2": {
                    "1": "target_index"
                },
                "uVar4": {
                    "1": "undefined_val",
                    "30": "combined_value"
                },
                "uVar5": {
                    "1": "iteration",
                    "14": "index",
                    "2": "iterator",
                    "3": "iteration_counter",
                    "5": "loop_counter"
                },
                "uVar5 * 2 + param_1 + 0x10": {
                    "1": "source_index"
                },
                "uVar5 = uVar5 + 1 & 0xff": {
                    "1": "increment_index"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "update_checksum_and_process_data"
                }
            },
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "calling": [
                "FUN_08000b54"
            ],
            "code": "\nint process_data_08000b04(int data_ptr,int output_address)\n\n{\n  byte byte1;\n  byte byte2;\n  char checksum;\n  undefined2 combined_value;\n  uint index;\n  \n  byte1 = *(byte *)(data_ptr + 0xc);\n  byte2 = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = byte2;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (index = 0; index < byte2; index = index + 1 & 0xff) {\n    combined_value = combine_values(*(undefined *)(index * 2 + data_ptr + 0x10),\n                         *(undefined *)(data_ptr + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (byte1 + index) * 2) = combined_value;\n  }\n  checksum = *(char *)(data_ptr + 0x49);\n  update_checksum_and_process_data_08000b04(data_ptr);\n  return (int)(char)(checksum + '\\x02');\n}\n\n",
            "current_name": "process_data_08000b04",
            "entrypoint": "0x08000b04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "checksum",
                "combine_values_08004640": "combine_values",
                "param_1": "data_ptr",
                "param_2": "output_address",
                "uVar4": "combined_value",
                "uVar5": "index",
                "update_checksum_and_process_data_0800076c": "update_checksum_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000b54": {
            "additional_data": {
                "FUN_08000b54": {
                    "1": "process_param_data",
                    "26": "process_data",
                    "3": "process_and_validate_data"
                },
                "bVar1": {
                    "1": "byte_val",
                    "21": "result",
                    "3": "result_byte",
                    "5": "byte_value"
                },
                "check_values_080007f0": {
                    "1": "check_values"
                },
                "copy_and_modify_data_080008cc": {
                    "1": "copy_and_modify_data"
                },
                "iVar2": {
                    "1": "result_code",
                    "3": "result2",
                    "5": "value",
                    "7": "result",
                    "8": "check_result"
                },
                "iVar3": {
                    "1": "data_result",
                    "11": "return_value",
                    "2": "output_value",
                    "4": "status",
                    "7": "output"
                },
                "initialize_data_08004204": {
                    "1": "initialize_data"
                },
                "param_1": {
                    "1": "param_list",
                    "2": "array_ptr",
                    "20": "data",
                    "6": "data_array"
                },
                "param_2": {
                    "1": "input_param",
                    "13": "input",
                    "2": "param",
                    "6": "input_data"
                },
                "param_3": {
                    "1": "size",
                    "11": "value",
                    "4": "param",
                    "5": "input_value",
                    "7": "flag"
                },
                "process_data_080006b4": {
                    "1": "process_data_a"
                },
                "process_data_080008e2": {
                    "1": "process_data_b"
                },
                "process_data_08000998": {
                    "1": "process_data_c"
                },
                "process_data_08000a4e": {
                    "1": "process_data_d"
                },
                "process_data_08000a7a": {
                    "1": "process_data_e"
                },
                "process_data_08000b04": {
                    "1": "process_data_f"
                },
                "unaff_r5": {
                    "1": "result",
                    "2": "result_uint",
                    "3": "condition",
                    "6": "byte_value"
                },
                "update_checksum_and_process_data_0800076c": {
                    "1": "update_checksum_and_process_data"
                },
                "update_data_08000a00": {
                    "1": "update_data"
                }
            },
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "calling": [
                "FUN_08000c64"
            ],
            "code": "\nint process_data_08000b54(int **data,int *input,undefined4 value)\n\n{\n  byte result;\n  int check_result;\n  uint byte_value;\n  int return_value;\n  \n  data[0x13] = input;\n  *(char *)(data + 0x18) = (char)value;\n  if (*(byte *)((int)data + 5) < 4) {\n    result = (**(code **)(**data + 8))();\n    byte_value = (uint)result;\n  }\n  if (byte_value == 0) {\n    return_value = 0;\n  }\n  else if ((int)byte_value < 8) {\n    return_value = 0;\n  }\n  else {\n    return_value = process_data_08000b54_a(data);\n    *(char *)(data + 2) = (char)return_value;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      check_result = check_values(data);\n      if (check_result < 1) {\n        check_result = initialize_data();\n        data[0x17] = (int *)((uint)*(ushort *)((int)data + 0x56) + check_result);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          return_value = process_data_08000b54_b(data,input,value);\n          break;\n        case 3:\n        case 4:\n          return_value = process_data_08000b54_c(data,input,value);\n          break;\n        case 5:\n          return_value = update_data(data,input,value);\n          break;\n        case 6:\n          return_value = process_data_08000b54_d(data,input,value);\n          break;\n        case 0xf:\n          return_value = process_data_08000b54_e(data,input,value);\n          break;\n        case 0x10:\n          return_value = process_data_08000b54_f(data,input,value);\n        }\n      }\n      else {\n        if (check_result != 0xff) {\n          copy_and_modify_data(data,check_result);\n          update_checksum_and_process_data_08000b54(data);\n        }\n        *(char *)(data + 2) = (char)check_result;\n        return_value = (int)(char)check_result;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08000b54",
            "entrypoint": "0x08000b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "bVar1": "result",
                "check_values_080007f0": "check_values",
                "copy_and_modify_data_080008cc": "copy_and_modify_data",
                "iVar2": "check_result",
                "iVar3": "return_value",
                "initialize_data_08004204": "initialize_data",
                "param_1": "data",
                "param_2": "input",
                "param_3": "value",
                "process_data_080006b4": "process_data_a",
                "process_data_080008e2": "process_data_b",
                "process_data_08000998": "process_data_c",
                "process_data_08000a4e": "process_data_d",
                "process_data_08000a7a": "process_data_e",
                "process_data_08000b04": "process_data_f",
                "unaff_r5": "byte_value",
                "update_checksum_and_process_data_0800076c": "update_checksum_and_process_data",
                "update_data_08000a00": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "additional_data": {
                "&DAT_20000124": {
                    "1": "data_address"
                },
                "0": {
                    "2": "interrupt_parameter"
                },
                "0x4b00": {
                    "3": "data_size"
                },
                "DAT_20000124": {
                    "1": "data_buffer"
                },
                "FUN_08000c4c": {
                    "1": "initialize_data_processing",
                    "2": "initialize_interrupts",
                    "3": "execute_interrupt_and_configure_data",
                    "9": "execute_data_processing"
                },
                "configure_and_process_data_08000600": {
                    "1": "initialize_and_process_data",
                    "2": "process_data_configuration",
                    "20": "configure_and_process_data",
                    "6": "process_data"
                },
                "execute_interrupt_080005e4": {
                    "1": "invoke_interrupt_handler",
                    "19": "execute_interrupt",
                    "2": "call_interrupt",
                    "3": "trigger_interrupt"
                }
            },
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "calling": [
                "FUN_08004658"
            ],
            "code": "\nvoid execute_data_processing_08000c4c(void)\n\n{\n  execute_interrupt(0);\n  configure_and_process_data(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "current_name": "execute_data_processing_08000c4c",
            "entrypoint": "0x08000c4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c4c": "execute_data_processing_08000c4c",
                "configure_and_process_data_08000600": "configure_and_process_data",
                "execute_interrupt_080005e4": "execute_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c64": {
            "additional_data": {
                "&DAT_20000004": {
                    "2": "data_ptr2"
                },
                "&DAT_20000124": {
                    "2": "data_ptr1"
                },
                "DAT_20000004": {
                    "1": "output_data"
                },
                "DAT_20000124": {
                    "1": "data_1"
                },
                "FUN_08000c64": {
                    "1": "process_and_handle_data",
                    "2": "process_and_return",
                    "27": "process_data"
                },
                "in_r3": {
                    "1": "unused_parameter",
                    "2": "input_argument",
                    "4": "param",
                    "6": "parameter"
                },
                "process_data_08000b54": {
                    "1": "process_data_helper",
                    "3": "process_data"
                }
            },
            "called": [
                "FUN_08000b54"
            ],
            "calling": [
                "FUN_08004658"
            ],
            "code": "\nvoid process_data_08000c64(void)\n\n{\n  undefined4 input_value;\n  \n  process_data_08000c64(&DAT_20000124,&DAT_20000004,0x10,input_value,input_value);\n  return;\n}\n\n",
            "current_name": "process_data_08000c64",
            "entrypoint": "0x08000c64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "input_value",
                "process_data_08000b54": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "additional_data": {
                "FUN_08000c8c": {
                    "1": "initialize_and_perform_actions",
                    "2": "initialize_and_update_data",
                    "23": "initialize_system"
                },
                "get_data_080025e0": {
                    "8": "get_data"
                },
                "initialize_and_update_08002488": {
                    "1": "update_data",
                    "2": "initialize_and_update_data",
                    "5": "initialize_and_update"
                },
                "initialize_data_08000ee0": {
                    "1": "initialize_and_update_data",
                    "2": "initialize_data",
                    "4": "initialize_data2"
                },
                "initialize_data_08001f9c": {
                    "8": "initialize_data"
                },
                "local_14": {
                    "1": "param8",
                    "2": "value6",
                    "3": "value7",
                    "4": "size2"
                },
                "local_18": {
                    "1": "initialize_size",
                    "2": "value5",
                    "3": "value6",
                    "4": "length"
                },
                "local_1c": {
                    "1": "data_sub_option",
                    "2": "count6",
                    "3": "offset"
                },
                "local_20": {
                    "1": "target_flag",
                    "2": "value_2",
                    "3": "value5"
                },
                "local_24": {
                    "1": "value7",
                    "2": "limit"
                },
                "local_28": {
                    "1": "value_7",
                    "2": "limit",
                    "6": "value4"
                },
                "local_2c": {
                    "1": "count_c",
                    "2": "value2",
                    "3": "count3"
                },
                "local_30": {
                    "1": "constant3",
                    "2": "limit",
                    "6": "value3"
                },
                "local_34": {
                    "1": "num",
                    "2": "value",
                    "3": "size"
                },
                "local_38": {
                    "1": "data_value",
                    "2": "offset",
                    "3": "data_size",
                    "6": "value2"
                },
                "local_3c": {
                    "1": "value2",
                    "2": "value_2",
                    "3": "flag2",
                    "9": "count"
                },
                "local_50": {
                    "1": "bit_mask",
                    "2": "value_1",
                    "3": "memory_address",
                    "4": "value",
                    "8": "value1"
                },
                "local_54": {
                    "1": "action_status",
                    "2": "flag_value",
                    "20": "flag",
                    "3": "action_flag"
                },
                "perform_action_0800201c": {
                    "2": "perform_initial_action",
                    "6": "perform_action"
                },
                "set_flag_08000f2c": {
                    "8": "set_flag"
                },
                "uVar1": {
                    "1": "data_value"
                },
                "update_data_08000e60": {
                    "8": "update_data"
                }
            },
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "calling": [
                "FUN_080034ce"
            ],
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint data_value;\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 count;\n  undefined4 value2;\n  undefined4 count2;\n  undefined4 value3;\n  undefined4 count3;\n  undefined4 value4;\n  undefined4 limit;\n  undefined4 value5;\n  undefined4 offset;\n  undefined4 length;\n  undefined4 size2;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  value1 = 0x50000;\n  count = 2;\n  value2 = 0x400000;\n  count2 = 8;\n  value3 = 0x150;\n  count3 = 2;\n  value4 = 7;\n  perform_action(&flag);\n  initialize_data();\n  limit = 0xf;\n  value5 = 2;\n  offset = 0;\n  length = 0x1400;\n  size2 = 0x1000;\n  initialize_and_update(&limit,5);\n  data_value = get_data();\n  initialize_data2(data_value / 1000);\n  set_flag(4);\n  update_data(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_system_08000c8c",
            "entrypoint": "0x08000c8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "get_data_080025e0": "get_data",
                "initialize_and_update_08002488": "initialize_and_update",
                "initialize_data_08000ee0": "initialize_data2",
                "initialize_data_08001f9c": "initialize_data",
                "local_14": "size2",
                "local_18": "length",
                "local_1c": "offset",
                "local_20": "value5",
                "local_24": "limit",
                "local_28": "value4",
                "local_2c": "count3",
                "local_30": "value3",
                "local_34": "count2",
                "local_38": "value2",
                "local_3c": "count",
                "local_50": "value1",
                "local_54": "flag",
                "perform_action_0800201c": "perform_action",
                "set_flag_08000f2c": "set_flag",
                "uVar1": "data_value",
                "update_data_08000e60": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "additional_data": {
                "FUN_08000d8e": {
                    "1": "initialize_and_setup_system",
                    "30": "initialize_system"
                },
                "PTR_080034ce": {
                    "1": "system_initializer"
                },
                "initialize_system_080034ce": {
                    "1": "initialize_system_080034ce",
                    "21": "initialize_system"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_080034ce"
            ],
            "calling": [
                "FUN_08004648"
            ],
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  initialize_system_08000d8e();\n  return;\n}\n\n",
            "current_name": "initialize_system_08000d8e",
            "entrypoint": "0x08000d8e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e",
                "initialize_system_080034ce": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000d96": {
            "called": [],
            "calling": [
                "FUN_08000de4"
            ],
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08000d96",
            "entrypoint": "0x08000d96",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08000d98": {
            "additional_data": {
                "0xf": {
                    "1": "threshold"
                },
                "DAT_20000024": {
                    "1": "constant2"
                },
                "DAT_20000028": {
                    "2": "current_value"
                },
                "DAT_2000002c": {
                    "1": "data_1"
                },
                "FUN_08000d98": {
                    "2": "initialize_and_set_data",
                    "29": "initialize_and_update_data"
                },
                "iVar1": {
                    "1": "initialize_data_result",
                    "2": "data_init_result",
                    "3": "init_result",
                    "8": "result",
                    "9": "data_initialization_result"
                },
                "initialize_data": {
                    "1": "data_initializer"
                },
                "initialize_data_08000ee0": {
                    "1": "initialize_data_function",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "data_size",
                    "18": "input_value",
                    "2": "data_value",
                    "3": "value",
                    "4": "input_param"
                },
                "update_data": {
                    "1": "data_updater"
                },
                "update_data_08000e60": {
                    "1": "update_data_function",
                    "3": "update_data"
                }
            },
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "code": "\nundefined4 initialize_and_update_data_08000d98(uint input_value)\n\n{\n  int data_initialization_result;\n  \n  data_initialization_result = initialize_data(DAT_2000002c / (1000 / DAT_20000024));\n  if (data_initialization_result != 0) {\n    return 1;\n  }\n  if (0xf < input_value) {\n    return 1;\n  }\n  update_data(0xffffffff,input_value,0);\n  DAT_20000028 = input_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_data_08000d98",
            "entrypoint": "0x08000d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000d98": "initialize_and_update_data_08000d98",
                "iVar1": "data_initialization_result",
                "initialize_data": "data_initializer",
                "initialize_data_08000ee0": "initialize_data",
                "param_1": "input_value",
                "update_data": "data_updater",
                "update_data_08000e60": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000de4": {
            "additional_data": {
                "FUNC_08000d96": {
                    "1": "execute_operation",
                    "2": "execute_additional_function",
                    "3": "perform_action",
                    "8": "perform_additional_tasks"
                },
                "FUN_08000de4": {
                    "1": "initialize_and_update_data",
                    "12": "initialize_system",
                    "2": "initialize_and_update_system",
                    "5": "initialize_and_configure_system"
                },
                "_DAT_40023c00": {
                    "1": "system_status",
                    "6": "system_configuration"
                },
                "initialize_and_update_data_08000d98": {
                    "1": "initialize_and_set_data",
                    "2": "initialize_data",
                    "23": "initialize_and_update_data",
                    "3": "initialize_and_load_data"
                },
                "update_configuration_08000e3c": {
                    "1": "configure_device",
                    "2": "set_configuration",
                    "24": "update_configuration",
                    "3": "configure_system"
                }
            },
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "calling": [
                "FUN_080034ce"
            ],
            "code": "\n\n\nundefined4 initialize_system_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_configuration(3);\n  initialize_and_update_data(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_08000de4",
            "entrypoint": "0x08000de4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4",
                "initialize_and_update_data_08000d98": "initialize_and_update_data",
                "update_configuration_08000e3c": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e18": {
            "additional_data": {
                "DAT_20000024": {
                    "1": "data_1",
                    "10": "input",
                    "4": "value_to_add",
                    "9": "input_value"
                },
                "DAT_20000670": {
                    "16": "result",
                    "2": "total",
                    "5": "accumulated_value",
                    "6": "sum"
                },
                "FUN_08000e18": {
                    "1": "add_data_to_global_variable",
                    "2": "accumulate_values",
                    "3": "add_values",
                    "4": "addition"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003476"
            ],
            "code": "\nvoid addition_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "current_name": "addition_08000e18",
            "entrypoint": "0x08000e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e18": "addition_08000e18"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e30": {
            "additional_data": {
                "DAT_20000670": {
                    "1": "result",
                    "11": "data",
                    "2": "global_data",
                    "3": "global_variable"
                },
                "FUN_08000e30": {
                    "1": "get_dat_value",
                    "10": "get_data_value",
                    "13": "get_data",
                    "2": "get_global_data",
                    "3": "get_global_variable"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "current_name": "get_data_08000e30",
            "entrypoint": "0x08000e30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "additional_data": {
                "0x5fa0000": {
                    "1": "new_config_mask"
                },
                "0x7": {
                    "1": "bit_mask"
                },
                "0xf8ff": {
                    "1": "bit_mask_inverse"
                },
                "8": {
                    "1": "bit_shift"
                },
                "FUN_08000e3c": {
                    "1": "update_config_registers",
                    "2": "update_config_value",
                    "3": "update_register_value",
                    "5": "update_control_register",
                    "6": "update_data"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "configuration_value",
                    "3": "register_value",
                    "5": "control_register"
                },
                "param_1": {
                    "1": "configuration",
                    "17": "input_value",
                    "2": "config_data",
                    "4": "config_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "code": "\n\n\nvoid update_configuration_08000e3c(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_configuration_08000e3c",
            "entrypoint": "0x08000e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e3c": "update_configuration_08000e3c",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e60": {
            "additional_data": {
                "*(char *)((address & 0xf) + 0xe000ed14)": {
                    "1": "write_byte_to_memory_address"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "character_data2"
                },
                "*(char *)(address + 0xe000e400)": {
                    "1": "write_byte_to_memory_address"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "character_data1"
                },
                "1 << (uVar1 & 0xff)) - 1U & param_3": {
                    "1": "masked_original_value"
                },
                "FUN_08000e60": {
                    "1": "update_register_value",
                    "2": "write_data_to_memory",
                    "3": "update_character",
                    "7": "update_data"
                },
                "char *": {
                    "1": "char_ptr"
                },
                "param_1": {
                    "1": "register_index",
                    "2": "char_index",
                    "3": "data_offset",
                    "5": "character_index",
                    "9": "address"
                },
                "param_2": {
                    "1": "value1",
                    "2": "mask_value",
                    "3": "bit_mask1",
                    "4": "bitmask1",
                    "5": "bit_mask"
                },
                "param_2 & (1 << (uVar2 & 0xff)) - 1U": {
                    "1": "masked_mask_value"
                },
                "param_3": {
                    "1": "value2",
                    "2": "data2",
                    "3": "bit_mask2",
                    "4": "bitmask2",
                    "6": "data"
                },
                "uVar1": {
                    "1": "updated_bitmask",
                    "12": "shift_amount",
                    "2": "result"
                },
                "uVar1 & 0xff": {
                    "1": "adjusted_shift_amount_modulus"
                },
                "uVar1_condition": {
                    "1": "min_shift_amount"
                },
                "uVar1_condition_final": {
                    "1": "min_shift_amount_final"
                },
                "uVar1_condition_negative": {
                    "1": "offset_within_limit"
                },
                "uVar1_final": {
                    "1": "shift_amount_final"
                },
                "uVar1_modified": {
                    "1": "shift_amount_modified"
                },
                "uVar1_negative_check": {
                    "1": "is_negative_offset"
                },
                "uVar1_new_1": {
                    "1": "shift_adjustment"
                },
                "uVar1_new_2": {
                    "1": "shift_mask"
                },
                "uVar1_new_3": {
                    "1": "shifted_data"
                },
                "uVar1_original": {
                    "1": "shift_amount_before"
                },
                "uVar1_shift_condition": {
                    "1": "bit_mask_first_half"
                },
                "uVar1_shift_condition_final": {
                    "1": "bit_mask_first_half_final"
                },
                "uVar1_write_condition": {
                    "1": "bit_mask_second_half"
                },
                "uVar1_write_condition_final": {
                    "1": "bit_mask_second_half_final"
                },
                "uVar1_write_final": {
                    "1": "bit_mask_combined"
                },
                "uVar2": {
                    "1": "remaining_shifts",
                    "2": "adjusted_shift_amount"
                },
                "uVar2 & 0xff": {
                    "1": "masked_new_shift_amount"
                },
                "uVar2_condition": {
                    "1": "max_num_shifts"
                },
                "uVar2_modified": {
                    "1": "num_shifts_modified"
                },
                "uVar2_new_1": {
                    "1": "shifted_index"
                },
                "uVar2_original": {
                    "1": "num_shifts_before"
                },
                "uVar3": {
                    "1": "bit_mask"
                },
                "uVar4": {
                    "1": "result"
                },
                "uVar5": {
                    "1": "updated_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "code": "\n\n\nvoid update_data_08000e60(uint address,uint mask,uint data)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shift_amount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08000e60",
            "entrypoint": "0x08000e60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e60": "update_data_08000e60",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "additional_data": {
                "(int)param_1": {
                    "1": "index_int"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_pointer"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_array[array_index]",
                    "3": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit",
                    "2": "bit_value",
                    "3": "bit_mask"
                },
                "<original_variable_name_1>": {
                    "1": "array_pointer"
                },
                "<original_variable_name_2>": {
                    "1": "bit_value"
                },
                "FUN_08000ec4": {
                    "1": "initialize_bit",
                    "10": "set_bit",
                    "2": "set_bit_value",
                    "4": "set_bit_at_index",
                    "5": "set_bit_at_position",
                    "7": "set_bit_in_array"
                },
                "param_1": {
                    "1": "offset",
                    "5": "position",
                    "8": "index",
                    "9": "bit_index"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position",
                    "3": "bit_offset"
                },
                "param_1 >> 5": {
                    "1": "byte_index",
                    "3": "array_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "code": "\nvoid set_bit_08000ec4(uint bit_index)\n\n{\n  if (-1 < index_int) {\n    *(int *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_08000ec4",
            "entrypoint": "0x08000ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "index_int",
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "additional_data": {
                "DAT_e000ed23": {
                    "1": "status_register",
                    "2": "constant_value",
                    "3": "status_flag",
                    "4": "flag",
                    "7": "status"
                },
                "FUN_08000ee0": {
                    "1": "initialize_memory_layout",
                    "2": "initialize_system",
                    "3": "set_parameters",
                    "4": "initialize_parameters",
                    "5": "initialize_memory",
                    "9": "initialize_data"
                },
                "_DAT_e000e010": {
                    "1": "value_limit",
                    "10": "flag",
                    "2": "flag_value"
                },
                "_DAT_e000e014": {
                    "1": "data_address",
                    "2": "processed_value",
                    "3": "updated_value",
                    "4": "memory_address"
                },
                "_DAT_e000e018": {
                    "1": "initialize_value",
                    "14": "counter",
                    "2": "variable_1"
                },
                "param_1": {
                    "1": "system_status",
                    "12": "value",
                    "2": "size"
                },
                "param_1 - 1U": {
                    "1": "adjusted_input"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "code": "\n\n\nundefined4 initialize_data_08000ee0(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    result 0;\n  }\n  result 1;\n}\n\n",
            "current_name": "initialize_data_08000ee0",
            "entrypoint": "0x08000ee0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ee0": "initialize_data_08000ee0",
                "param_1": "value",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "additional_data": {
                "(int)param_1": {
                    "1": "signed_input"
                },
                "(int)param_1 < -1": {
                    "1": "is_negative"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "shifted_divided_input"
                },
                "(shifted_divided_input * 4) + -0x1fff1f00": {
                    "1": "address"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "bit_array",
                    "3": "array"
                },
                "0x1fff1f00": {
                    "1": "offset_constant"
                },
                "0x60": {
                    "1": "base_offset"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit",
                    "2": "bit_value",
                    "5": "bit_mask"
                },
                "1 << bit_position": {
                    "1": "bit_mask"
                },
                "<unnamed_variable>": {
                    "1": "shifted_index"
                },
                "FUN_08000f0c": {
                    "1": "set_bit_in_array_from_param",
                    "12": "set_bit_in_array",
                    "2": "set_bit_at_index",
                    "5": "set_bit_in_memory",
                    "8": "set_bit"
                },
                "int": {
                    "1": "int",
                    "2": "integer"
                },
                "param_1": {
                    "1": "num",
                    "13": "bit_index",
                    "2": "position",
                    "5": "bit_position",
                    "9": "index"
                },
                "param_1 & 0x1f": {
                    "2": "bit_position"
                },
                "param_1 > 5": {
                    "1": "shifted_input"
                },
                "param_1 >> 5": {
                    "1": "divided_index",
                    "2": "array_index"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid set_bit_in_array_08000f0c(uinteger bit_index)\n\n{\n  if (-1 < signed_input) {\n    *(integer *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_08000f0c",
            "entrypoint": "0x08000f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "signed_input",
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "int": "integer",
                "param_1": "bit_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "additional_data": {
                "FUNKY_FOO": {
                    "1": "update_register"
                },
                "FUN_08000f2c": {
                    "1": "set_flag_based_on_value",
                    "2": "set_permission_flag",
                    "3": "update_control_register",
                    "4": "update_flag",
                    "5": "set_flag"
                },
                "_DAT_e000e010": {
                    "1": "permission_registry",
                    "3": "status_register",
                    "5": "control_register",
                    "7": "flag_register"
                },
                "param_1": {
                    "1": "config_option",
                    "2": "input_param",
                    "3": "status",
                    "8": "flag_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000c8c"
            ],
            "code": "\n\n\nvoid set_flag_08000f2c(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "current_name": "set_flag_08000f2c",
            "entrypoint": "0x08000f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "called": [],
            "calling": [
                "FUN_08000f4e"
            ],
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08000f4c",
            "entrypoint": "0x08000f4c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08000f4e": {
            "additional_data": {
                "FUNC_08000f4c": {
                    "1": "configure_settings",
                    "2": "initialize_components",
                    "3": "execute_initialization",
                    "5": "perform_initialization"
                },
                "FUN_08000f4e": {
                    "1": "execute_process",
                    "10": "execute_initialization",
                    "2": "initialize_components",
                    "3": "execute_function",
                    "4": "initialize_application"
                }
            },
            "called": [
                "FUN_08000f4c"
            ],
            "calling": [
                "FUN_08003476"
            ],
            "code": "\nvoid execute_initialization_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "current_name": "execute_initialization_08000f4e",
            "entrypoint": "0x08000f4e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f4e": "execute_initialization_08000f4e"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f56": {
            "additional_data": {
                "*(undefined *)(param_1 + 4)": {
                    "1": "flag_value",
                    "12": "memory_flag",
                    "4": "flag"
                },
                "*(undefined *)(param_1 + 5)": {
                    "1": "first_byte",
                    "3": "status",
                    "6": "additional_flag"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "memory_counter",
                    "14": "counter",
                    "2": "reset_value"
                },
                "<original_variable_name_1>": {
                    "1": "memory_flag"
                },
                "<original_variable_name_2>": {
                    "1": "counter"
                },
                "<original_variable_name_3>": {
                    "1": "value"
                },
                "<unchanged_variable>": {
                    "1": "<unchanged_variable>"
                },
                "FUN_08000f56": {
                    "1": "update_memory_flag",
                    "10": "initialize_memory",
                    "2": "set_memory_flags",
                    "4": "initialize_data"
                },
                "PTR_FUN_080033c8": {
                    "1": "clear_memory_flag"
                },
                "address": {
                    "1": "addr"
                },
                "clear_memory_flag_080033c8": {
                    "1": "clear_memory_flags",
                    "3": "clear_flag",
                    "6": "clear_memory_flag"
                },
                "clear_memory_flag_080033c8()": {
                    "3": "clear_memory_flag"
                },
                "new_value": {
                    "1": "value"
                },
                "param_1": {
                    "1": "memory_location",
                    "17": "memory_address",
                    "2": "input_param"
                },
                "param_1 + 0x10": {
                    "1": "output_address",
                    "2": "counter_address"
                },
                "param_1 + 4": {
                    "1": "input_address",
                    "2": "flag_address"
                },
                "param_1+0x10": {
                    "1": "counter_address"
                },
                "param_1+4": {
                    "1": "flag_address"
                },
                "param_2": {
                    "1": "new_value"
                },
                "return 0": {
                    "1": "success"
                },
                "return 1": {
                    "1": "failure"
                }
            },
            "called": [
                "FUN_080033c8"
            ],
            "calling": [
                "FUN_080033d8"
            ],
            "code": "\nundefined4 initialize_memory_08000f56(int memory_address)\n\n{\n  if (memory_address != 0) {\n    *(undefined *)(memory_address + 4) = 2;\n    clear_memory_flag;\n    *(undefined4 *)(memory_address + 0x10) = 0;\n    *(undefined *)(memory_address + 4) = 0;\n    *(undefined *)(memory_address + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_memory_08000f56",
            "entrypoint": "0x08000f56",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f56": "initialize_memory_08000f56",
                "clear_memory_flag_080033c8": "clear_memory_flag",
                "clear_memory_flag_080033c8()": "clear_memory_flag",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f72": {
            "additional_data": {
                "*(param_1 + 1)": {
                    "1": "next_byte_value"
                },
                "*(undefined *)(param_1 + 1)": {
                    "1": "flag_pointer",
                    "2": "flag"
                },
                "**param_1": {
                    "1": "value"
                },
                "FUN_08000f72": {
                    "1": "update_bit_and_set_flag",
                    "2": "clear_bit",
                    "24": "clear_bit_and_set_flag"
                },
                "param_1": {
                    "1": "bit_array_ptr",
                    "12": "data",
                    "2": "pointer",
                    "3": "bit_pointer",
                    "5": "bit_array"
                },
                "param_1 + 1": {
                    "1": "next_byte_pointer"
                },
                "param_1+": {
                    "1": "pointer_to_input_array"
                },
                "param_1[0]": {
                    "1": "data_value"
                },
                "param_1[1]": {
                    "1": "flag"
                },
                "param_2": {
                    "12": "bit_index",
                    "19": "bit_position"
                },
                "var_1": {
                    "1": "bit_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_080033d8"
            ],
            "code": "\nundefined4 clear_bit_and_set_flag_08000f72(uint **data,uint bit_position)\n\n{\n  **data = **data & ~(1 << (bit_position & 0xff));\n  *(undefined *)(data + 1) = 1;\n  return 0;\n}\n\n",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "entrypoint": "0x08000f72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "data",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "additional_data": {
                "'\\x02'": {
                    "1": "expected_status"
                },
                "(*(undefined *)((int)param_1 + 0x35)): : (charAtParam + 0x35): ,\n  : *(undefined *)((int)param_1 + 0x35)": {
                    "1": "char_at_param"
                },
                "(int)param_1": {
                    "1": "parameter_list_address"
                },
                "(int)param_1 + 0x35": {
                    "1": "parameter_address_offset"
                },
                "(uint *)0x80": {
                    "1": "default_value"
                },
                "(undefined *)((int)param_1 + 0x35)": {
                    "1": "parameter_value_address"
                },
                "*(char *)((int)data + 0x35)": {
                    "1": "mode"
                },
                "*(char *)((int)dataPointer + 0x35)": {
                    "1": "flag"
                },
                "*(char *)((int)param + 0x35)": {
                    "1": "status"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "1": "char_val_at_param",
                    "2": "flag_value",
                    "3": "status",
                    "4": "flag"
                },
                "*(undefined *)((int)data + 0x35)": {
                    "1": "updated_condition"
                },
                "*(undefined *)((int)dataPointer + 0x35)": {
                    "1": "updated_flag"
                },
                "*(undefined *)((int)param + 0x35)": {
                    "1": "update_status"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "1": "byte_value",
                    "2": "status"
                },
                "**(paramArray)": {
                    "1": "primary_value"
                },
                "**data": {
                    "1": "value"
                },
                "**param": {
                    "1": "param_value"
                },
                "**param_1": {
                    "1": "parameter_value",
                    "2": "data_value",
                    "9": "value"
                },
                "**param_1 & 0xfffffffe": {
                    "1": "updated_value"
                },
                "*param_1": {
                    "1": "p_data"
                },
                "0x02": {
                    "1": "desired_flag_value"
                },
                "0x15": {
                    "1": "index"
                },
                "0x35": {
                    "1": "flag_offset"
                },
                "0x80": {
                    "1": "default_param_value"
                },
                "0xfffffffe": {
                    "1": "and_mask",
                    "2": "bit_mask"
                },
                "5": {
                    "1": "updated_flag"
                },
                "FUN_08000f8c": {
                    "1": "update_value_if_needed",
                    "2": "update_value",
                    "3": "update_param_value",
                    "4": "update_param"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param_ptr",
                    "4": "param_array",
                    "5": "parameter",
                    "6": "param"
                },
                "param_1[0x15]": {
                    "1": "parameter_list[21]",
                    "2": "parameter[21]",
                    "3": "status",
                    "5": "param[21]"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "code": "\nundefined4 update_param_08000f8c(unsigned_integer **param)\n\n{\n  if (*(char *)(parameter_list_address + 0x35) != '\\x02') {\n    param[21] = (unsigned_integer *)0x80;\n    return 1;\n  }\n  *(undefined *)(parameter_list_address + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "current_name": "update_param_08000f8c",
            "entrypoint": "0x08000f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "parameter_list_address",
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "param",
                "param_1[0x15]": "param[21]",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "additional_data": {
                "*param_1": {
                    "1": "pointer_value"
                },
                "FUN_08000fb4": {
                    "1": "update_register_values",
                    "14": "update_registers",
                    "2": "update_parameters",
                    "3": "update_data"
                },
                "_DAT_40013c00": {
                    "1": "register0"
                },
                "_DAT_40013c04": {
                    "1": "register2"
                },
                "_DAT_40013c08": {
                    "1": "register2"
                },
                "_DAT_40013c0c": {
                    "1": "control_register"
                },
                "_DAT_40023844": {
                    "1": "control_register"
                },
                "iVar6": {
                    "1": "first_index",
                    "10": "index1",
                    "2": "index",
                    "3": "array_index",
                    "4": "register_index"
                },
                "iVar8": {
                    "1": "register_index",
                    "2": "shift_amount",
                    "3": "offset",
                    "4": "bit_offset",
                    "5": "bit_shift"
                },
                "param_1": {
                    "1": "target_registers",
                    "2": "register_array1",
                    "6": "registers"
                },
                "param_1 == (uint *)0x40020000": {
                    "1": "is_param1_equal1"
                },
                "param_1 == (uint *)0x40020400": {
                    "1": "is_param1_equal2"
                },
                "param_1 == (uint *)0x40020800": {
                    "1": "is_param1_equal3"
                },
                "param_1 == (uint *)0x40020c00": {
                    "1": "is_param1_equal4"
                },
                "param_1 == (uint *)0x40021000": {
                    "1": "is_param1_equal5"
                },
                "param_1 == (uint *)0x40021400": {
                    "1": "is_param1_equal6"
                },
                "param_1 == (uint *)0x40021800": {
                    "1": "is_param1_equal7"
                },
                "param_1 == (uint *)0x40021c00": {
                    "1": "is_param1_equal8"
                },
                "param_1 == (uint *)0x40022000": {
                    "1": "is_param1_equal9"
                },
                "param_1 == (uint *)0x40022400": {
                    "1": "is_param1_equal10"
                },
                "param_1[0]": {
                    "1": "data_to_update[0]"
                },
                "param_1[1]": {
                    "1": "data_to_update[1]"
                },
                "param_1[2]": {
                    "1": "param1_array2"
                },
                "param_1[3]": {
                    "1": "temp7"
                },
                "param_2": {
                    "1": "update_info",
                    "2": "values",
                    "4": "input_data",
                    "5": "input_array"
                },
                "param_2[0]": {
                    "1": "update_info[0]"
                },
                "param_2[1]": {
                    "1": "config2"
                },
                "param_2[2]": {
                    "1": "update_info[2]"
                },
                "param_2[3]": {
                    "1": "value2"
                },
                "param_2[4]": {
                    "1": "update_info[4]"
                },
                "uVar1": {
                    "1": "bit_clear_mask",
                    "11": "temp1",
                    "2": "old_value",
                    "3": "mask",
                    "8": "temp_var1"
                },
                "uVar2": {
                    "1": "bit",
                    "11": "temp2",
                    "6": "bit_mask",
                    "8": "temp_var2"
                },
                "uVar3": {
                    "1": "counter",
                    "14": "index",
                    "2": "bit_index",
                    "3": "loop_index",
                    "4": "i"
                },
                "uVar4": {
                    "1": "temp4",
                    "10": "bit_mask",
                    "2": "temp_var4",
                    "3": "bit_check",
                    "6": "mask"
                },
                "uVar5": {
                    "1": "temp_value2",
                    "5": "value",
                    "6": "temp3",
                    "8": "temp_var5"
                },
                "uVar6": {
                    "1": "temp_var6"
                },
                "uVar7": {
                    "1": "input_bit_index",
                    "2": "temp4",
                    "5": "index2",
                    "6": "shift",
                    "7": "temp_var7"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "code": "\n\n\nvoid update_registers_08000fb4(uint *registers,uint *input_array)\n\n{\n  uint temp1;\n  uint temp2;\n  uint index;\n  uint bit_mask;\n  uint temp_var5;\n  int index1;\n  uint temp_var7;\n  int index3;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    temp2 = 1 << (index & 0xff);\n    bit_mask = temp2 & *input_array;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == bit_mask) {\n      if ((update_info[1] == 2) || (update_info[1] == 0x12)) {\n        index1 = (index >> 3) + 8;\n        index3 = (index & 7) << 2;\n        registers[index1] = registers[index1] & ~(0xf << index3) | param2_array4 << index3;\n      }\n      temp_var7 = index << 1;\n      temp1 = ~(3 << (temp_var7 & 0xff));\n      *registers = *registers & temp1 | (update_info[1] & 3) << (temp_var7 & 0xff);\n      temp_var5 = update_info[1];\n      if (((temp_var5 - 1 < 2) || (temp_var5 == 0x11)) || (temp_var5 == 0x12)) {\n        param1_array2 = param1_array2 & temp1 | update_info[3] << (temp_var7 & 0xff);\n        param1_array1 = param1_array1 & ~temp2 | ((update_info[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      param1_array3 = temp1 & param1_array3 | update_info[2] << (temp_var7 & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((update_info[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index3 = (index & 3) << 2;\n        if (registers == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registers == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registers == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registers == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registers == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registers == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registers == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registers == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registers == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registers == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index3) | index1 << index3;\n        temp1 = ~bit_mask;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((update_info[1] & 0x10000) != 0) {\n          temp2 = bit_mask | _DAT_40013c00;\n        }\n        temp_var5 = temp1 & _DAT_40013c04;\n        if ((update_info[1] & 0x20000) != 0) {\n          temp_var5 = bit_mask | _DAT_40013c04;\n        }\n        temp_var7 = temp1 & _DAT_40013c08;\n        if ((update_info[1] & 0x100000) != 0) {\n          temp_var7 = bit_mask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = temp_var5;\n        _DAT_40013c08 = temp_var7;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((update_info[1] & 0x200000) != 0) {\n          temp1 = bit_mask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "current_name": "update_registers_08000fb4",
            "entrypoint": "0x08000fb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "iVar6": "index1",
                "iVar8": "index3",
                "param_1": "registers",
                "param_1[1]": "param1_array1",
                "param_1[2]": "param1_array2",
                "param_1[3]": "param1_array3",
                "param_2": "input_array",
                "param_2[1]": "update_info[1]",
                "param_2[2]": "update_info[2]",
                "param_2[3]": "update_info[3]",
                "param_2[4]": "param2_array4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "index",
                "uVar4": "bit_mask",
                "uVar5": "temp_var5",
                "uVar7": "temp_var7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001198": {
            "additional_data": {
                "*(int *)(param_1 + 0x18)": {
                    "1": "address_value",
                    "2": "object_value"
                },
                "0x18": {
                    "1": "offset"
                },
                "FUN_08001198": {
                    "1": "set_data",
                    "12": "set_param_value",
                    "3": "set_parameter",
                    "4": "set_param"
                },
                "new_value": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "data_address",
                    "18": "object_address",
                    "5": "base_address"
                },
                "param_1 + 0x18": {
                    "1": "data_offset",
                    "4": "target_address"
                },
                "param_2": {
                    "1": "data_value",
                    "18": "value",
                    "2": "param_value",
                    "8": "new_value"
                },
                "param_2 << 0x10": {
                    "5": "shifted_value"
                },
                "param_3": {
                    "1": "shift_operation",
                    "23": "is_shifted",
                    "3": "shift_flag"
                },
                "param_3 == 0": {
                    "1": "is_not_shifted"
                }
            },
            "called": [],
            "calling": [
                "FUN_080034b6"
            ],
            "code": "\nvoid set_param_value_08001198(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x18) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08001198",
            "entrypoint": "0x08001198",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011a4": {
            "additional_data": {
                "FUN_080011a4": {
                    "1": "process_and_update_data",
                    "10": "update_and_process_data",
                    "2": "process_updated_data",
                    "3": "update_data_if_needed",
                    "5": "update_data_and_process"
                },
                "_DAT_40013c14": {
                    "1": "flag_storage",
                    "11": "current_data",
                    "2": "updated_data",
                    "3": "data_register",
                    "5": "data_flag"
                },
                "check_and_process_data_080047d0": {
                    "1": "handle_data_process",
                    "3": "check_and_process_data",
                    "5": "process_updated_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "bitmask",
                    "3": "updated_data",
                    "4": "flag",
                    "5": "new_data",
                    "9": "data"
                }
            },
            "called": [
                "FUN_080047d0"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_and_process_data_080011a4(uint data)\n\n{\n  if ((_DAT_40013c14 & data) != 0) {\n    _DAT_40013c14 = data;\n    process_data();\n  }\n  return;\n}\n\n",
            "current_name": "update_and_process_data_080011a4",
            "entrypoint": "0x080011a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080011a4": "update_and_process_data_080011a4",
                "check_and_process_data_080047d0": "process_data",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011c0": {
            "additional_data": {
                "(int)param_1": {
                    "1": "params_offset"
                },
                "(int)param_1 + 0x3d": {
                    "1": "character_position_two"
                },
                "(int)param_1 + 0x3e": {
                    "1": "character_address1"
                },
                "(uint *)(*param_1 + 0x10)": {
                    "1": "target_address"
                },
                "(uint *)(*parameters + 0x10)": {
                    "1": "target_address"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "calculation1"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "updated_value4"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "char_value_2"
                },
                "*(char *)((int)data + 0x3e)": {
                    "1": "char_value_1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "another_condition",
                    "2": "char2",
                    "5": "char_value2"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "peripheral_config.character_a",
                    "2": "char1",
                    "5": "char_value1"
                },
                "*(char *)((int)statusData + 0x3d)": {
                    "1": "symbol_alternate"
                },
                "*(char *)((int)statusData + 0x3e)": {
                    "1": "symbol"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "flag"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "status_value",
                    "2": "updated_value"
                },
                "*(uint *)(*statusData + 0x10)": {
                    "1": "status_value"
                },
                "*param_1": {
                    "1": "dereferenced_param_array",
                    "2": "ptr"
                },
                "*param_1 + 0x10": {
                    "1": "pointer_address"
                },
                "0x4000": {
                    "1": "constant"
                },
                "0xffU": {
                    "1": "mask1"
                },
                "1": {
                    "1": "mask2"
                },
                "FUN_080011c0": {
                    "1": "configure_peripheral",
                    "2": "update_flags_based_on_conditions",
                    "3": "update_flag_value",
                    "4": "set_flag_based_on_conditions",
                    "6": "update_status"
                },
                "char_1": {
                    "1": "character1"
                },
                "char_2": {
                    "1": "character2"
                },
                "data[0x11]": {
                    "1": "value_1"
                },
                "data[0x14]": {
                    "1": "condition_1"
                },
                "param_1": {
                    "1": "param",
                    "2": "parameter",
                    "3": "parameters",
                    "4": "data",
                    "5": "input_array"
                },
                "param_1 + 0x3d": {
                    "1": "parameters[61]"
                },
                "param_1 + 0x3e": {
                    "1": "parameters[62]"
                },
                "param_1[0x11]": {
                    "1": "config_data",
                    "2": "flag_value",
                    "9": "value"
                },
                "param_1[0x11] & 0xfe": {
                    "1": "updated_value1"
                },
                "param_1[0x11] & 0xffU | 1": {
                    "1": "updated_value2"
                },
                "param_1[0x14]": {
                    "1": "device_data[20]",
                    "2": "flag_type",
                    "4": "condition"
                },
                "param_1[4]": {
                    "1": "array_value3"
                },
                "parameters": {
                    "1": "parameters"
                },
                "parameters + 0x3d": {
                    "1": "character_position_two"
                },
                "parameters + 0x3e": {
                    "1": "character_position_one"
                },
                "parameters[0x11]": {
                    "1": "value"
                },
                "parameters[0x14]": {
                    "1": "flag"
                },
                "uint_1": {
                    "1": "result"
                },
                "uint_2": {
                    "1": "mask"
                },
                "uint_3": {
                    "1": "shifted"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 update_status_080011c0(int *input_array)\n\n{\n  if (*(char *)(params_offset + 0x3e) == '@') {\n    if (condition == 0) {\n      *(uint *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value & mask1 | 1;\n    }\n  }\n  else if (condition_2 == 0x4000) {\n    if (*(char *)(params_offset + 0x3d) == '!') {\n      *(uint *)(*input_array + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value & mask1 | 1;\n    }\n  }\n  else if (condition == 0) {\n    *(uint *)(*input_array + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition == 1) {\n    *(uint *)(*input_array + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_status_080011c0",
            "entrypoint": "0x080011c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "params_offset",
                "0xffU": "mask1",
                "FUN_080011c0": "update_status_080011c0",
                "param_1": "input_array",
                "param_1[0x11]": "value",
                "param_1[0x14]": "condition",
                "param_1[4]": "condition_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800124a": {
            "additional_data": {
                "& 0xff": {
                    "1": "mask"
                },
                "(uint *)(*paramArray + 0x10)": {
                    "1": "target_pointer"
                },
                "(uint *)(*param_1 + 0x10)": {
                    "1": "address_of_value_to_set"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "store_value_at_offset",
                    "2": "result",
                    "4": "target_address"
                },
                "*paramArray": {
                    "1": "target_address"
                },
                "*param_1": {
                    "1": "first_param",
                    "2": "param_pointer"
                },
                "0x10": {
                    "3": "offset"
                },
                "0xff": {
                    "1": "byte_mask",
                    "3": "mask"
                },
                "DAT_<<hexadecimal_offset>>": {
                    "1": "offset"
                },
                "FUN_0800124a": {
                    "1": "store_parameter_byte",
                    "2": "update_parameter_value",
                    "4": "set_byte_value"
                },
                "PTR_<<hexadecimal_offset>>": {
                    "1": "pointer"
                },
                "[0x11]": {
                    "1": "source_value"
                },
                "paramArray[0x11]": {
                    "1": "source_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "param_list",
                    "4": "parameter",
                    "6": "param_array",
                    "8": "input_array"
                },
                "param_1[0x11]": {
                    "1": "values[17]",
                    "2": "input_value",
                    "3": "value",
                    "4": "input_array[17]"
                },
                "param_1[0x11] & 0xff": {
                    "1": "byte_value"
                },
                "parameter[0x11]": {
                    "1": "parameter[17]"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 set_param_value_0800124a(int *input_array)\n\n{\n  *(uint *)(*input_array + 0x10) = input_array[17] & 0xff;\n  return 0;\n}\n\n",
            "current_name": "set_param_value_0800124a",
            "entrypoint": "0x0800124a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800124a": "set_param_value_0800124a",
                "[0x11]": "source_value",
                "param_1": "input_array",
                "param_1[0x11]": "input_array[17]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001256": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at"
                },
                "(*(char *)((int)param_1 + 0x3e)": {
                    "1": "next_char"
                },
                "(*(char *)((int)parameters + 0x3d)": {
                    "1": "is_double_quote_character"
                },
                "(*(char *)((int)parameters + 0x3e)": {
                    "1": "is_at_character"
                },
                "(int)param_1": {
                    "1": "parameters_int"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_index"
                },
                "(int)param_1 + 0x3a": {
                    "1": "quote_character_index"
                },
                "(int)param_1[0x14]": {
                    "1": "int_value"
                },
                "(int)parameters + 0x2a": {
                    "1": "short_offset"
                },
                "(puVar1[1] & 0x800)": {
                    "1": "bitwise_comparison"
                },
                "(uint *)((int)param_1[0x14] + 1)": {
                    "1": "incremented_value"
                },
                "(uint *)0x0": {
                    "1": "null_ptr"
                },
                "(uint *)0x12": {
                    "1": "twelve_ptr"
                },
                "(uint *)0x2": {
                    "1": "pointer_value_6"
                },
                "(uint *)0x4": {
                    "1": "pointer_value_3"
                },
                "(uint *)0x8": {
                    "1": "special_flag3"
                },
                "(uint *)0xc000": {
                    "1": "pointer_value"
                },
                "(uint *)0xffff0000": {
                    "1": "pointer_value_2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_1",
                    "2": "char_value",
                    "3": "char_value1",
                    "4": "char1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_2",
                    "2": "char_value_2",
                    "3": "char_value2",
                    "5": "char2"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "char_value"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "char_check2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_var",
                    "2": "param_short",
                    "7": "short_value"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)(param_1+0x2a)": {
                    "1": "ptr->short_value"
                },
                "**param_1": {
                    "1": "double_deref_ptr"
                },
                "**parameters": {
                    "1": "flag"
                },
                "*param_1": {
                    "1": "param1"
                },
                "0x0": {
                    "2": "null"
                },
                "0x100": {
                    "1": "flag2"
                },
                "0x1000": {
                    "1": "0x1000"
                },
                "0x12": {
                    "1": "constant7"
                },
                "0x14": {
                    "1": "20"
                },
                "0x2": {
                    "1": "constant8"
                },
                "0x200": {
                    "1": "bitwise_value_3"
                },
                "0x4": {
                    "1": "constant5"
                },
                "0x400": {
                    "1": "0x400"
                },
                "0x8": {
                    "1": "constant6"
                },
                "0x800": {
                    "1": "bitwise_value_5"
                },
                "0xb": {
                    "1": "11"
                },
                "0xc000": {
                    "1": "constant3"
                },
                "0xffff0000": {
                    "1": "ptr_value1"
                },
                "0xfffffbff": {
                    "1": "0x_fffffbff"
                },
                "FUN_08001256": {
                    "1": "update_flags_based_on_params",
                    "2": "set_flags",
                    "3": "process_flags",
                    "7": "update_flags"
                },
                "param_1": {
                    "1": "param",
                    "10": "params",
                    "14": "parameters"
                },
                "param_1+0x3d": {
                    "1": "ptr->char_a"
                },
                "param_1+0x3e": {
                    "1": "ptr->char_b"
                },
                "param_1[0x14]": {
                    "1": "flags",
                    "2": "param_14",
                    "3": "param14"
                },
                "param_1[0xb]": {
                    "1": "flag_value",
                    "3": "param_b"
                },
                "param_1[0xb] == (uint *)0x2": {
                    "1": "params11_equals2"
                },
                "param_1[0xc]": {
                    "1": "flags[12]",
                    "3": "param_c"
                },
                "param_1[4]": {
                    "1": "pointer_var3",
                    "2": "param_4",
                    "3": "param4"
                },
                "parameters[0x14]": {
                    "1": "pointer_array"
                },
                "parameters[4]": {
                    "1": "array_item"
                },
                "ptr[1]": {
                    "1": "ptr->value_y"
                },
                "puVar1": {
                    "1": "ptr_to_params11",
                    "2": "pointer_var",
                    "3": "temp_pointer",
                    "4": "value"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "ptr_to_params11_equals4"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "ptr_to_params11_equals8"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "ptr_to_params11_equals_ffff0000"
                },
                "puVar1[1]": {
                    "1": "pointer_var2"
                },
                "uint *puVar1": {
                    "1": "current_param"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 update_flags_08001256(uint **parameters)\n\n{\n  uint *value;\n  \n  value = param_b;\n  if ((*(char *)(parameters_int + 0x3d) == '\\\"') &&\n     ((param14 != (uint *)0x0 || (*(char *)(parameters_int + 0x3e) != '@')))) {\n    if ((param14 == (uint *)0x0) && (param4 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      param14 = (uint *)(int_value + 1);\n    }\n    else {\n      if (*(short *)(parameters_int + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)(parameters_int + 0x2a) == 1) {\n        if (value == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          value = *parameters;\n          if ((pointer_var2 & 0x800) == 0) {\n            *value = *value | 0x200;\n          }\n          else {\n            *value = *value & 0xfffffbff;\n          }\n        }\n        else if (((value == (uint *)0x4) || (value == (uint *)0x8)) ||\n                (param_c == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (param_b == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)(parameters_int + 0x2a) == 2) {\n        if (param_b == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        value = *parameters;\n        if ((pointer_var2 & 0x800) != 0) {\n          pointer_var2 = pointer_var2 | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        value = *parameters;\n        if ((pointer_var2 & 0x800) != 0) {\n          pointer_var2 = pointer_var2 | 0x1000;\n        }\n      }\n      param14 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_flags_08001256",
            "entrypoint": "0x08001256",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "parameters_int",
                "(int)param_1[0x14]": "int_value",
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "param_1[0x14]": "param14",
                "param_1[0xb]": "param_b",
                "param_1[0xc]": "param_c",
                "param_1[4]": "param4",
                "puVar1": "value",
                "puVar1[1]": "pointer_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001420": {
            "additional_data": {
                "(int)(pbVar1 + 1)": {
                    "1": "updated_array"
                },
                "(int)param_1 + 0x2a": {
                    "1": "offset_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "condition_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_value_at_index"
                },
                "*(short *)((int)pointerArray + 0x2a)": {
                    "1": "num_iterations"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "value_to_be_updated"
                },
                "*(uint *)(*param_1 + 0x10) + 1": {
                    "1": "updated_target_variable"
                },
                "*param_1": {
                    "1": "p_pointer"
                },
                "FUN_08001420": {
                    "1": "process_bytes",
                    "2": "update_and_decrement",
                    "3": "update_pointer_value",
                    "4": "update_value",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "payload",
                    "11": "data",
                    "2": "input_array",
                    "4": "pointer_array"
                },
                "param_1[9]": {
                    "1": "array_ptr",
                    "2": "pointer_array[9]"
                },
                "pbVar1": {
                    "1": "p_byte",
                    "10": "byte_ptr",
                    "16": "byte_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 update_data_08001420(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)pointer_array[9];\n    pointer_array[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08001420",
            "entrypoint": "0x08001420",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "param_1[9]": "pointer_array[9]",
                "pbVar1": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001440": {
            "additional_data": {
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "source_data"
                },
                "(int)(puVar1 + 1)": {
                    "1": "new_ptr_to_last_element"
                },
                "(int)param_1 + 0x2a": {
                    "1": "data_offset"
                },
                "(undefined *)((int)data + 0x2a)": {
                    "1": "ptr_to_count"
                },
                "(undefined *)param_1[9]": {
                    "1": "array_ptr"
                },
                "*(short *)((int)data + 0x2a)": {
                    "1": "count"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "character_data_size",
                    "2": "array_length",
                    "3": "counter",
                    "4": "count"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "modified_array_elem_value"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "pointer_value",
                    "2": "value_to_copy",
                    "3": "value"
                },
                "*param_1": {
                    "1": "array_value"
                },
                "*param_1 + 0x10": {
                    "1": "value_address"
                },
                "*puVar1": {
                    "1": "copied_value",
                    "3": "value_to_update",
                    "4": "value"
                },
                "FUN_08001440": {
                    "1": "update_array_value",
                    "2": "update_character",
                    "6": "update_value",
                    "8": "update_data"
                },
                "param_1": {
                    "1": "parameter",
                    "13": "array",
                    "2": "input_array",
                    "6": "data"
                },
                "param_1[9]": {
                    "1": "ptr_data"
                },
                "puVar1": {
                    "1": "array_item_ptr",
                    "2": "ptr",
                    "3": "char_ptr",
                    "4": "ptr_to_data"
                }
            },
            "called": [],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 update_data_08001440(int *array)\n\n{\n  undefined *pointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    pointer = (undefined *)character_buffer;\n    character_buffer = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_data_08001440",
            "entrypoint": "0x08001440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "array",
                "param_1[9]": "character_buffer",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001460": {
            "additional_data": {
                "(*(undefined *)(dataHolder + 0xf))[(int)param_1 + 0x3d]": {
                    "1": "foo"
                },
                "(*param_1)[1]": {
                    "1": "param1_element1"
                },
                "(*puVar2 & 1)": {
                    "1": "bit_check"
                },
                "(int)param_1 + 0x2a": {
                    "1": "address_0x2a"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_variable"
                },
                "(int)param_1 + 0x3e": {
                    "1": "address_0x3e"
                },
                "(param_1 + 10)": {
                    "1": "ptr_at_index_10"
                },
                "(short)param_3": {
                    "1": "short_length"
                },
                "*(char *)((int)dataHolder + 0x3d)": {
                    "1": "char1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "param1_char"
                },
                "*(char *)(dataHolder + 0xf)": {
                    "1": "char2"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "flag_value"
                },
                "*(short *)((int)dataHolder + 0x2a)": {
                    "1": "short1"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_variable"
                },
                "*(undefined *)((int)dataHolder + 0x3d)": {
                    "1": "undefined2"
                },
                "*(undefined *)((int)dataHolder + 0x3e)": {
                    "1": "undefined3"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_at_offset_0x3d"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "param1_undefined2"
                },
                "*(undefined *)(dataHolder + 0xf)": {
                    "1": "undefined1"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "param1f_undefined"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "short_data2"
                },
                "**param_1": {
                    "1": "data_value",
                    "2": "double_ptr_value"
                },
                "**param_1 & 0xfffff7ff": {
                    "1": "masked_value"
                },
                "*param_1": {
                    "1": "ptr_value"
                },
                "*puVar2": {
                    "3": "ptr_value"
                },
                "*puVar2 & 1": {
                    "1": "bit_check"
                },
                "FUN_08001460": {
                    "1": "update_data",
                    "2": "validate_parameters",
                    "4": "validate_input",
                    "5": "process_data"
                },
                "param_1": {
                    "1": "param_container",
                    "2": "input_data",
                    "4": "parameters",
                    "7": "data_ptr"
                },
                "param_1[0x10]": {
                    "1": "temp_data_pointer"
                },
                "param_1[0xb]": {
                    "1": "output_data_ptr"
                },
                "param_1[9]": {
                    "1": "input_pointer"
                },
                "param_2": {
                    "1": "ptr_to_param2",
                    "3": "input_data",
                    "4": "param2"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "count",
                    "3": "input2",
                    "4": "length",
                    "5": "size"
                },
                "param_4": {
                    "1": "data_pointer2",
                    "2": "buffer",
                    "3": "input3",
                    "4": "param4"
                },
                "puVar2": {
                    "1": "value_ptr",
                    "11": "ptr",
                    "3": "pointer",
                    "4": "temp_ptr"
                },
                "uVar1": {
                    "2": "status",
                    "23": "result",
                    "4": "return_value"
                },
                "| 0x700": {
                    "1": "bitwise_operator"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003880"
            ],
            "code": "\nundefined4 process_data_08001460(uint **data_ptr,uint *param2,int size,uint *param4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)data_ptr + 0x3d) == '(') {\n    if (param2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      ptr = *data_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x20;\n      result = 0;\n      temp_data_pointer = (uint *)0x0;\n      input_pointer = param2;\n      *(short *)((int)data_ptr + 0x2a) = short_length;\n      output_pointer = param4;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08001460",
            "entrypoint": "0x08001460",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "short_length",
                "FUN_08001460": "process_data_08001460",
                "param_1": "data_ptr",
                "param_1[0x10]": "temp_data_pointer",
                "param_1[0xb]": "output_pointer",
                "param_1[9]": "input_pointer",
                "param_2": "param2",
                "param_3": "size",
                "param_4": "param4",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014ec": {
            "additional_data": {
                "'\\x01'": {
                    "1": "flag_on"
                },
                "(*(undefined2 *)(param_1 + 10))": {
                    "1": "short_size_value"
                },
                "(*param_1)[1]": {
                    "1": "val_at_ptr_1"
                },
                "(*param_1)[1] = (*param_1)[1] | 0x700": {
                    "1": "set_flag"
                },
                "(*puVar2 & 1) == 0": {
                    "1": "is_bit_set"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "condition_char"
                },
                "(char *)(param_1 + 0xf)": {
                    "1": "flag_ptr"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_position"
                },
                "(int)param_1 + 0x3e": {
                    "1": "next_char_position"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value_ptr"
                },
                "(short)param_3": {
                    "1": "length"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "first_char_ptr"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "second_char_ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_0x3d"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char_value2",
                    "3": "flag"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_size",
                    "2": "short_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_at_0x3d_modified",
                    "2": "char1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_at_0x3e_modified",
                    "2": "char2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_value",
                    "2": "flag_value",
                    "3": "flag"
                },
                "*(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "undefined2_at_0x2a"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "short_value2"
                },
                "**param_1": {
                    "1": "dereferenced_param_list_value"
                },
                "**param_1 & 0xfffff7ff": {
                    "1": "updated_value"
                },
                "*param_1": {
                    "1": "param_list_value"
                },
                "*puVar2": {
                    "1": "ptr_value"
                },
                "*puVar2 & 1": {
                    "1": "is_bit_set"
                },
                "0": {
                    "1": "zero"
                },
                "0x20": {
                    "1": "new_char2"
                },
                "0x2a": {
                    "1": "new_char1"
                },
                "1": {
                    "1": "success"
                },
                "2": {
                    "1": "failure"
                },
                "FUN_080014ec": {
                    "1": "update_data",
                    "2": "parse_input",
                    "3": "process_params",
                    "5": "process_parameters"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "params",
                    "3": "param_list"
                },
                "param_1[0x10]": {
                    "1": "temporary_param",
                    "2": "ptr1"
                },
                "param_1[0xb]": {
                    "1": "output_param",
                    "2": "ptr3"
                },
                "param_1[9]": {
                    "1": "input_param",
                    "2": "ptr2"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "ptr"
                },
                "param_3": {
                    "1": "size_param",
                    "2": "input_length",
                    "3": "count",
                    "6": "length"
                },
                "param_4": {
                    "1": "source_param",
                    "2": "result",
                    "3": "output"
                },
                "puVar2": {
                    "1": "param",
                    "12": "ptr",
                    "2": "ptr_value"
                },
                "uVar1": {
                    "2": "error_code",
                    "20": "result",
                    "4": "status",
                    "5": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003880"
            ],
            "code": "\nundefined4 process_parameters_080014ec(uint **param_list,uint *value_ptr,int length,uint *output)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)param_list + 0x3d) == '(') {\n    if (value_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      ptr = *param_list;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)((int)param_list + 0x3d) = 0x2a;\n      *(undefined *)((int)param_list + 0x3e) = 0x20;\n      result = 0;\n      ptr1 = (uint *)0x0;\n      ptr2 = value_ptr;\n      *(short *)((int)param_list + 0x2a) = length;\n      ptr3 = output;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_parameters_080014ec",
            "entrypoint": "0x080014ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "length",
                "FUN_080014ec": "process_parameters_080014ec",
                "param_1": "param_list",
                "param_1[0x10]": "ptr1",
                "param_1[0xb]": "ptr3",
                "param_1[9]": "ptr2",
                "param_2": "value_ptr",
                "param_3": "length",
                "param_4": "output",
                "puVar2": "ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001578": {
            "additional_data": {
                "(*(char *)((int)param + 0x3d)": {
                    "1": "char_at_param_plus0x3d"
                },
                "(*param)[1]": {
                    "1": "param_at_index1"
                },
                "(*param_1)[1]": {
                    "1": "value2",
                    "2": "second_element_value"
                },
                "(*puVar1 & 1)": {
                    "1": "is_one_bit_set"
                },
                "(int)param + 0x3d": {
                    "1": "param_plus0x3d"
                },
                "*(char *)((int)dataPointer + 0x3d)": {
                    "1": "character_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "space_character",
                    "3": "character"
                },
                "*(undefined *)((int)dataPointer + 0x3d)": {
                    "1": "modified_character_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "character_ptr"
                },
                "**dataPointer": {
                    "1": "double_deref_data_pointer"
                },
                "**param": {
                    "1": "double_ptr"
                },
                "**param_1": {
                    "1": "value2"
                },
                "*dataPointer": {
                    "1": "first_value"
                },
                "*param": {
                    "1": "ptr_param"
                },
                "*param_1": {
                    "1": "value_pointer"
                },
                "*puVar1": {
                    "1": "ptr_value",
                    "2": "first_element_value"
                },
                "*puVar1 & 1": {
                    "1": "bitwise_result"
                },
                "0x28": {
                    "1": "open_parenthesis"
                },
                "0x300": {
                    "1": "bit8_and_bit9_mask"
                },
                "0x3d": {
                    "2": "offset"
                },
                "0x400": {
                    "1": "bit10_mask"
                },
                "1": {
                    "1": "bit1_mask"
                },
                "2": {
                    "1": "error_code_2"
                },
                "FUN_08001578": {
                    "1": "set_and_check_flags",
                    "2": "update_data",
                    "3": "update_parameters",
                    "4": "set_flags_and_values",
                    "8": "initialize_data"
                },
                "int": {
                    "1": "integer"
                },
                "param_1": {
                    "1": "permissions",
                    "2": "data_pointer",
                    "3": "param",
                    "6": "parameters",
                    "8": "data"
                },
                "puVar1": {
                    "1": "current_value",
                    "2": "temp_ptr",
                    "3": "pointer",
                    "5": "ptr"
                },
                "undefined": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "code": "\nvoid4 initialize_data_08001578(uinteger **data)\n\n{\n  uinteger *first_element;\n  \n  if (*(char *)((integer)data + 0x3d) != ' ') {\n    return 2;\n  }\n  *(void *)((integer)data + 0x3d) = 0x28;\n  first_element = *data;\n  if ((*first_element & 1) == 0) {\n    *first_element = *first_element | 1;\n  }\n  **data = **data | 0x400;\n  (*data)[1] = (*data)[1] | 0x300;\n  return 0;\n}\n\n",
            "current_name": "initialize_data_08001578",
            "entrypoint": "0x08001578",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "int": "integer",
                "param_1": "data",
                "puVar1": "first_element",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b6": {
            "called": [],
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080015b6",
            "entrypoint": "0x080015b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080015b8": {
            "called": [],
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080015b8",
            "entrypoint": "0x080015b8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080015ba": {
            "called": [],
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080015ba",
            "entrypoint": "0x080015ba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080015bc": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_var"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_var"
                },
                "*param_1": {
                    "1": "ptr_data"
                },
                "FUNC_080015ba": {
                    "1": "some_other_function"
                },
                "FUN_080015bc": {
                    "1": "update_data",
                    "14": "process_data",
                    "2": "parse_data"
                },
                "cVar1": {
                    "1": "char",
                    "14": "character",
                    "2": "current_char",
                    "9": "char_value"
                },
                "param_1": {
                    "1": "packet_buffer",
                    "14": "data",
                    "2": "parameter",
                    "4": "input_array"
                },
                "pbVar2": {
                    "1": "packet_data",
                    "11": "byte_ptr",
                    "18": "byte_pointer"
                }
            },
            "called": [
                "FUN_080015ba"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_data_080015bc(int *data)\n\n{\n  char character;\n  byte *byte_pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data[9];\n    data[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_080015bc",
            "entrypoint": "0x080015bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "cVar1": "character",
                "param_1": "data",
                "pbVar2": "byte_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800160c": {
            "called": [],
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800160c",
            "entrypoint": "0x0800160c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800160e": {
            "additional_data": {
                "(cVar1 == '*')": {
                    "1": "is_character_1_asterisk"
                },
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "converted_value"
                },
                "(int)(puVar2 + 1)": {
                    "2": "incremented_pointer"
                },
                "(int)param_1 + 0x2a": {
                    "1": "address_2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "address_3"
                },
                "*((int)param_1 + 0x3d)": {
                    "1": "char_pointer"
                },
                "*(char *)((int)dataPtr + 0x3d)": {
                    "1": "character_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "character_2"
                },
                "*(short *)((int)dataPtr + 0x2a)": {
                    "1": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value_at_offset",
                    "3": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "unsigned_int_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_variable"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "int_pointer_value"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "*param_array": {
                    "1": "pointer_value_2"
                },
                "*puVar2": {
                    "1": "pointer_value",
                    "2": "value"
                },
                "0xfffffbff": {
                    "1": "bitwise_mask"
                },
                "FUNC_0800160c": {
                    "1": "previous_function",
                    "3": "another_function",
                    "4": "perform_action"
                },
                "FUNC_0800160c()": {
                    "1": "some_function()"
                },
                "FUN_0800160e": {
                    "1": "update_character",
                    "2": "update_parameter",
                    "7": "update_data",
                    "9": "process_data"
                },
                "cVar1": {
                    "1": "character_1",
                    "2": "current_char",
                    "4": "flag",
                    "9": "character"
                },
                "param_1": {
                    "1": "input_arr",
                    "12": "data",
                    "2": "input_array",
                    "3": "parameter",
                    "4": "param_array"
                },
                "param_1[0xc]": {
                    "1": "array_element_2"
                },
                "param_1[9]": {
                    "1": "array_element_1"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "2": "pointer_variable",
                    "6": "ptr"
                },
                "puVar2 + 1": {
                    "1": "next_pointer"
                }
            },
            "called": [
                "FUN_0800160c"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_data_0800160e(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)pointer_to_integers;\n    pointer_to_integers = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      var12 = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800160e",
            "entrypoint": "0x0800160e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "cVar1": "char_value",
                "param_1": "data",
                "param_1[0xc]": "var12",
                "param_1[9]": "pointer_to_integers",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800165a": {
            "additional_data": {
                "FUN_0800165a": {
                    "1": "process_and_return_result",
                    "22": "process_data",
                    "4": "process_data_from_binary"
                },
                "param_1": {
                    "1": "binary_data",
                    "10": "data_ptr",
                    "13": "data",
                    "2": "input_data",
                    "3": "data_pointer"
                },
                "param_2": {
                    "1": "flags",
                    "2": "param1",
                    "4": "flag_1",
                    "5": "unused_param",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "flag2",
                    "4": "flag_2",
                    "5": "unused_param",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "flag2",
                    "13": "param_4",
                    "2": "param",
                    "6": "param4"
                },
                "process_data_08003880": {
                    "1": "process_data_helper"
                },
                "uVar1": {
                    "1": "selected_data",
                    "21": "selected_value",
                    "3": "data_value"
                },
                "uVar2": {
                    "1": "flag_value",
                    "10": "flag",
                    "2": "data_offset",
                    "4": "data_value",
                    "5": "flags",
                    "6": "data_flag"
                }
            },
            "called": [
                "FUN_08003880"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_data_0800165a(int *data,undefined4 param2,undefined4 param3,undefined4 param_4)\n\n{\n  undefined2 selected_value;\n  uint flag;\n  \n  flag = *(uint *)(*data + 0x18);\n  if ((flag & 0x80) == 0) {\n    selected_value = *(undefined2 *)(data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(data + 6);\n  }\n  process_data_0800165a_helper(data,(*(uint *)(*data + 0x18) & 4) == 0,selected_value,flag,param_4);\n  return 0;\n}\n\n",
            "current_name": "process_data_0800165a",
            "entrypoint": "0x0800165a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "process_data_08003880": "process_data_helper",
                "uVar1": "selected_value",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001684": {
            "additional_data": {
                "!": {
                    "2": "exclamation"
                },
                "!(char *)((int)param_1 + 0x3d)": {
                    "1": "exclamation_flag"
                },
                "(*(char *)((int)param_1 + 0x3d)": {
                    "1": "character"
                },
                "(*param_1)": {
                    "1": "param_values"
                },
                "(*param_1)[1]": {
                    "1": "flags",
                    "2": "value1"
                },
                "(*param_1)[5]": {
                    "1": "parameter1_index5",
                    "2": "param[0][5]"
                },
                "(int)param_1 + 0x3d": {
                    "1": "param_upper_byte"
                },
                "(int)param_1 + 0x3e": {
                    "1": "param_lower_byte"
                },
                "(int)parameters": {
                    "1": "param_address"
                },
                "(int)parameters + 0x3d": {
                    "1": "param_char_address"
                },
                "(int)parameters + 0x3e": {
                    "1": "next_char_address"
                },
                "(uint *)0x0": {
                    "1": "null_value"
                },
                "(uint *)0x21": {
                    "1": "value_twenty_one_ptr"
                },
                "(uint *)0x4": {
                    "1": "type_four"
                },
                "(uint *)0x8": {
                    "1": "value_eight_ptr"
                },
                "(uint *)0xffff0000": {
                    "1": "high_value_ptr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "flag_byte_1"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag_byte_2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "check_char",
                    "2": "condition"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "new_value"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "param_start[62]"
                },
                "**(param_1)": {
                    "1": "value"
                },
                "**param_1": {
                    "1": "data_value_3",
                    "2": "param[0][0]"
                },
                "*param_1": {
                    "1": "ptr_data"
                },
                "0": {
                    "1": "zero"
                },
                "0x0": {
                    "2": "zero"
                },
                "0x20": {
                    "1": "space_character",
                    "2": "space"
                },
                "0x4": {
                    "1": "value1"
                },
                "0x8": {
                    "1": "value2"
                },
                "0xffff0000": {
                    "1": "mask1"
                },
                "0xfffff8ff": {
                    "1": "mask2"
                },
                "0xfffffbff": {
                    "1": "mask3"
                },
                "FUNC_080015ba": {
                    "1": "execute_operation_b",
                    "3": "execute_function_b"
                },
                "FUN_08001684": {
                    "1": "update_parameters",
                    "2": "process_input",
                    "5": "process_parameters",
                    "9": "process_param"
                },
                "execute_function_080038d0": {
                    "1": "execute_function_b",
                    "3": "execute_function_a"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "parameters",
                    "2": "param_list",
                    "3": "param_array",
                    "4": "param"
                },
                "param_1[0xb]": {
                    "1": "condition_val",
                    "2": "param[11]"
                },
                "param_1[0xc]": {
                    "1": "counter_ptr",
                    "2": "param[12]"
                }
            },
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "calling": [
                "FUN_08001e68"
            ],
            "code": "\nundefined4 process_param_08001684(uint **parameters)\n\n{\n  if (((param_b == (uint *)0x4) || (param_b == (uint *)0x8)) &&\n     (*(char *)((int)parameters + 0x3d) == '(')) {\n    param_b = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    execute_function_a();\n  }\n  else if (*(char *)((int)parameters + 0x3d) == 'exclamation') {\n    param_b = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08001684",
            "entrypoint": "0x08001684",
            "imported": false,
            "improved": true,
            "renaming": {
                "!": "exclamation",
                "FUN_08001684": "process_param_08001684",
                "execute_function_080038d0": "execute_function_a",
                "param_1": "parameters",
                "param_1[0xb]": "param_b",
                "param_1[0xc]": "param[12]"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001718": {
            "called": [],
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001718",
            "entrypoint": "0x08001718",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800171a": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "param_value1"
                },
                "(*param_1)[1] & 0xfffff8ff": {
                    "1": "updated_value1"
                },
                "(*param_1)[1] & 0xfffffbff": {
                    "1": "updated_value2"
                },
                "(*param_1)[4]": {
                    "1": "param_f"
                },
                "(uint *)((int)param_1 + 0x2a)": {
                    "1": "short_pointer"
                },
                "(uint *)((int)param_1[0x14] + 1)": {
                    "1": "param_d"
                },
                "(uint *)((int)param_1[0x14] + 2)": {
                    "1": "pointer_var_e"
                },
                "(uint *)((int)puVar2 + 1)": {
                    "1": "param_e"
                },
                "(uint *)0x0": {
                    "1": "null_pointer"
                },
                "(uint *)0x11": {
                    "1": "pointer1"
                },
                "(uint *)0x4": {
                    "1": "pointer2"
                },
                "(uint *)0x8": {
                    "1": "pointer3"
                },
                "(uint *)0xffff0000": {
                    "1": "pointer4"
                },
                "(uint)((int)param_1[0x12] << 0x10) >> 0x18": {
                    "1": "param_f"
                },
                "(uint)*(byte *)puVar2": {
                    "1": "byte_value"
                },
                "(uint)param_1[0x12] & 0xff": {
                    "1": "param_f"
                },
                "(uint)param_1[9] + 1": {
                    "1": "updated_value5"
                },
                "*(byte *)puVar2": {
                    "1": "byte_val"
                },
                "*(char *)((int)param_1 + 0x2b)": {
                    "1": "char19"
                },
                "*(char *)((int)param_1 + 0x2c)": {
                    "1": "char18"
                },
                "*(char *)((int)param_1 + 0x2d)": {
                    "1": "char17"
                },
                "*(char *)((int)param_1 + 0x2e)": {
                    "1": "char16"
                },
                "*(char *)((int)param_1 + 0x30)": {
                    "1": "char15"
                },
                "*(char *)((int)param_1 + 0x31)": {
                    "1": "char14"
                },
                "*(char *)((int)param_1 + 0x32)": {
                    "1": "char13"
                },
                "*(char *)((int)param_1 + 0x33)": {
                    "1": "char12"
                },
                "*(char *)((int)param_1 + 0x34)": {
                    "1": "char11"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "1": "char10"
                },
                "*(char *)((int)param_1 + 0x36)": {
                    "1": "char9"
                },
                "*(char *)((int)param_1 + 0x37)": {
                    "1": "char8"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char7"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "char6"
                },
                "*(char *)((int)param_1 + 0x3b)": {
                    "1": "char5"
                },
                "*(char *)((int)param_1 + 0x3c)": {
                    "1": "char4"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char1",
                    "2": "char_value1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value",
                    "2": "char_value2"
                },
                "*(char *)((int)param_1 + 0x3f)": {
                    "1": "char3"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value2"
                },
                "*(short *)(param_1 + 10)": {
                    "1": "short_value1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_val_a"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_val_b"
                },
                "**param_1": {
                    "1": "value2"
                },
                "**param_1 | 0x100": {
                    "1": "updated_value4"
                },
                "**param_1 | 0x200": {
                    "1": "updated_value3"
                },
                "*data_ptr": {
                    "1": "value"
                },
                "*data_ptr[1]": {
                    "1": "flag"
                },
                "*param_1": {
                    "1": "value2"
                },
                "*param_1[0x12]": {
                    "1": "value3"
                },
                "FUNC_080015b6": {
                    "1": "do_something_else",
                    "4": "function2",
                    "5": "function_b"
                },
                "FUNC_08001718": {
                    "1": "handle_exclamation",
                    "4": "function1",
                    "5": "function_a"
                },
                "FUN_0800171a": {
                    "1": "process_function",
                    "12": "process_data",
                    "2": "process_parameters",
                    "3": "process_parameter",
                    "4": "process_input",
                    "5": "process_param"
                },
                "cVar1": {
                    "1": "char_var",
                    "10": "char_value",
                    "2": "character_var",
                    "3": "char1",
                    "6": "first_char"
                },
                "char *)((int)param_1 + 0x3d)": {
                    "1": "character_address"
                },
                "data_ptr[0x12]": {
                    "1": "temp_value"
                },
                "data_ptr[0x13]": {
                    "1": "status_flag"
                },
                "data_ptr[0x14]": {
                    "1": "status_flag2"
                },
                "data_ptr[0x2a]": {
                    "1": "short_value2"
                },
                "data_ptr[0x3d]": {
                    "1": "char1"
                },
                "data_ptr[0x3e]": {
                    "1": "char2"
                },
                "data_ptr[0xb]": {
                    "1": "ptr_to_value"
                },
                "data_ptr[0xc]": {
                    "1": "status"
                },
                "data_ptr[10]": {
                    "1": "short_value1"
                },
                "data_ptr[9]": {
                    "1": "byte_ptr"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "input_data",
                    "6": "parameters",
                    "9": "data"
                },
                "param_1 + 0x3d": {
                    "1": "char_ptr_var_a"
                },
                "param_1 + 0x3e": {
                    "1": "char_ptr_var_b"
                },
                "param_1 + 10": {
                    "1": "parameters[10]"
                },
                "param_1)": {
                    "1": "array"
                },
                "param_1[0x12]": {
                    "1": "parameter_array[0x12]"
                },
                "param_1[0x13]": {
                    "1": "pointer_list_13"
                },
                "param_1[0x14]": {
                    "1": "pointer_list_14"
                },
                "param_1[0xb]": {
                    "1": "pointer_list_b"
                },
                "param_1[0xc]": {
                    "1": "param_value3"
                },
                "param_1[9]": {
                    "1": "param_e"
                },
                "parse_input": {
                    "1": "parse_input"
                },
                "puVar2": {
                    "1": "pointer_variable",
                    "2": "temp_ptr",
                    "3": "ptr",
                    "4": "ptr_value",
                    "5": "pointer",
                    "7": "pointer_value"
                }
            },
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_data_0800171a(uint **array\n\n{\n  char char_value;\n  uint *pointer_value;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  pointer_value = param_b;\n  if ((*(short *)(data + 10) == 0) && (char_value == '!')) {\n    if ((pointer_value == (uint *)0x4) || ((pointer_value == (uint *)0x8 || (pointer_value == (uint *)0xffff0000)))) {\n      (*array[1] = (*array[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      param_c = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*array[1] = (*array[1] & 0xfffff8ff;\n      param_c = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char_value == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char_value == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*array[1] = (*array[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (value5 == (uint *)0x0) {\n        if (value6 == (uint *)0x1) {\n          (*array[4] = (uint)value7 & 0xff;\n          value5 = (uint *)((int)value5 + 2);\n        }\n        else {\n          (*array[4] = (uint)((int)value7 << 0x10) >> 0x18;\n          value5 = (uint *)((int)value5 + 1);\n        }\n      }\n      else if (value5 == (uint *)0x1) {\n        (*array[4] = (uint)value7 & 0xff;\n        value5 = (uint *)((int)value5 + 1);\n      }\n      else if (value5 == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          pointer_value = param_e;\n          param_e = (uint *)((int)pointer_value + 1);\n          (*array[4] = (uint)*(byte *)pointer_value;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_value = param_e;\n      param_e = (uint *)((int)pointer_value + 1);\n      (*array[4] = (uint)*(byte *)pointer_value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800171a",
            "entrypoint": "0x0800171a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "cVar1": "char_value",
                "param_1": "data",
                "param_1)": "array",
                "param_1[0x12]": "value7",
                "param_1[0x13]": "value6",
                "param_1[0x14]": "value5",
                "param_1[0xb]": "param_b",
                "param_1[0xc]": "param_c",
                "param_1[9]": "param_e",
                "puVar2": "pointer_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001864": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x3d)": {
                    "1": "param_char"
                },
                "(*(short *)((int)param_1 + 0x2a)": {
                    "1": "param_short"
                },
                "(*param_1)": {
                    "1": "pointer1"
                },
                "(*param_1)[1]": {
                    "1": "first_param_value",
                    "2": "value1"
                },
                "(*param_1)[4]": {
                    "1": "param_1_4",
                    "2": "value_3"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "first_char"
                },
                "(int)param_1 + 0x2a": {
                    "1": "remaining_chars_pointer"
                },
                "(int)param_1 + 0x2a) + -1": {
                    "1": "decremented_short_flag"
                },
                "(int)param_1 + 0x3d": {
                    "1": "flag_char"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_value2"
                },
                "(int)puVar1 + 1": {
                    "1": "incremented_ptr"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "remaining_chars"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "updated_ptr",
                    "2": "incremented_value"
                },
                "(uint *)0x0": {
                    "2": "null",
                    "3": "null_value"
                },
                "(uint *)0x11": {
                    "1": "seventeen",
                    "2": "value4"
                },
                "(uint *)0x4": {
                    "1": "ptr_value1",
                    "2": "value1"
                },
                "(uint *)0x8": {
                    "1": "constant2",
                    "2": "value2"
                },
                "(uint *)0xffff0000": {
                    "1": "special_value_3",
                    "2": "value3"
                },
                "(uint)*(byte *)puVar1": {
                    "1": "updated_value",
                    "2": "byte_value"
                },
                "*(byte *)puVar1": {
                    "1": "value_byte",
                    "3": "byte_value"
                },
                "*(byte *)puVar1)": {
                    "1": "byte_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "value1",
                    "2": "flag_char"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "character_2",
                    "3": "next_char"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "char1"
                },
                "*(char*)((int)param_1 + 0x3e)": {
                    "1": "char2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "value2",
                    "2": "condition_short",
                    "3": "short_value"
                },
                "*(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decrement_condition_short"
                },
                "*(short*)((int)param_1 + 0x2a)": {
                    "1": "short1"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "param[41]"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "param[42]",
                    "2": "undefined_value"
                },
                "*(undefined *)((int)param_1 + 0x3e) = 0": {
                    "1": "set_undefined_value2_to_zero"
                },
                "**param_1": {
                    "1": "param_1_deref",
                    "2": "value2"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "-1": {
                    "1": "neg_one"
                },
                "0x20": {
                    "1": "space"
                },
                ">'!'": {
                    "1": "special_char_condition"
                },
                ">'@'": {
                    "1": "special_char"
                },
                ">(*param_1)[1] & 0xfffff8ff": {
                    "1": "clear_bits_in_param_1_1"
                },
                ">(int)param_1 + 0x2a)": {
                    "1": "short_at_offset_2a"
                },
                ">(int)param_1 + 0x3d)": {
                    "1": "char_at_offset_3d"
                },
                ">(int)param_1 + 0x3e)": {
                    "1": "char_at_offset_3e"
                },
                ">(int)puVar1 + 1)": {
                    "1": "incremented_pu_var1"
                },
                ">(uint)*(byte *)puVar1": {
                    "1": "converted_pu_var1_to_uint"
                },
                ">>**param_1 | 0x200": {
                    "1": "set_bits_in_param_1"
                },
                "@": {
                    "1": "at"
                },
                "FUNC_080015b6": {
                    "1": "perform_action_b",
                    "2": "function2"
                },
                "FUNC_080015b6()": {
                    "1": "execute_function_b()"
                },
                "FUNC_08001718": {
                    "1": "handle_at_character",
                    "2": "function1"
                },
                "FUNC_08001718()": {
                    "1": "execute_function_a()"
                },
                "FUN_08001864": {
                    "1": "process_command",
                    "2": "parse_and_execute_command",
                    "3": "update_parameter",
                    "4": "update_param"
                },
                "param_1": {
                    "1": "command_data",
                    "2": "input_data",
                    "3": "param",
                    "4": "data",
                    "8": "parameters"
                },
                "param_1[0xb]": {
                    "1": "param1_element11"
                },
                "param_1[0xc]": {
                    "1": "param1_value3",
                    "2": "status"
                },
                "param_1[9]": {
                    "1": "pointer_value2"
                },
                "param_1[9] = (uint *)((int)puVar1 + 1)": {
                    "1": "update_param_value"
                },
                "puVar1": {
                    "1": "value_ptr",
                    "11": "value",
                    "2": "ptr_value",
                    "3": "pointer"
                },
                "puVar1 = param_1[9]": {
                    "1": "current_char"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "is_param_value4"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "is_param_value8"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "is_param_value_ffff0000"
                },
                "}": {
                    "1": ""
                }
            },
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 update_param_08001864(uint **parameters)\n\n{\n  uint *value;\n  \n  value = pointer2;\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        status = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == 'at') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        status = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value = char_pointer;\n      char_pointer = (uint *)((int)value + 1);\n      (*parameters)[4] = (uint)*(byte *)value;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "update_param_08001864",
            "entrypoint": "0x08001864",
            "imported": false,
            "improved": true,
            "renaming": {
                "@": "at",
                "FUN_08001864": "update_param_08001864",
                "param_1": "parameters",
                "param_1[0xb]": "pointer2",
                "param_1[0xc]": "status",
                "param_1[9]": "char_pointer",
                "puVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001902": {
            "called": [],
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001902",
            "entrypoint": "0x08001902",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001904": {
            "additional_data": {
                "(*param_1)[1]": {
                    "1": "second_uint_value",
                    "2": "value2",
                    "3": "param_value1"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_ptr"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_ptr3"
                },
                "(char)(*param_1)[4]": {
                    "1": "param_value4_as_char"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_value_ptr"
                },
                "(int)param_1 + 0x3d": {
                    "1": "offset"
                },
                "(int)puVar1 + 1": {
                    "1": "incremented_temp_ptr"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value_ptr"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "updated_ptr"
                },
                "(undefined *)((int)param_1 + 0x3d)": {
                    "1": "quote"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value_ptr"
                },
                "(ushort *)((int)param_1 + 0x2a)": {
                    "1": "length"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_param1",
                    "2": "param_char"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char2"
                },
                "*(char *)((int)string_array + 0x3d)": {
                    "1": "first_char"
                },
                "*(char *)puVar1": {
                    "1": "temp_char",
                    "2": "char_value"
                },
                "*(charPtr2)": {
                    "1": "char_val2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_param",
                    "2": "param_short2",
                    "3": "short_value"
                },
                "*(shortVal)": {
                    "1": "short_val2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "param_undefined"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "param_undefined2"
                },
                "*(undefined *)((int)string_array + 0x3d)": {
                    "1": "updated_char"
                },
                "*(undefined *)((int)string_array + 0x3e)": {
                    "1": "next_char"
                },
                "*(ushort *)((int)param_1 + 0x2a)": {
                    "1": "length",
                    "2": "ushort_value"
                },
                "*(ushort *)((int)string_array + 0x2a)": {
                    "1": "string_length"
                },
                "**(param_1)": {
                    "1": "val1"
                },
                "**param_1": {
                    "1": "first_word",
                    "2": "value1"
                },
                "*param_1": {
                    "1": "param_value_ptr"
                },
                "FUNC_080015b8": {
                    "1": "handle_other_char",
                    "2": "function_b"
                },
                "FUNC_08001902": {
                    "1": "handle_char_at",
                    "2": "function_a"
                },
                "FUN_08001904": {
                    "1": "update_data",
                    "2": "parse_input",
                    "3": "parse_string",
                    "7": "process_string",
                    "9": "process_param"
                },
                "param_1": {
                    "1": "parameters",
                    "2": "param",
                    "3": "parameter",
                    "4": "data",
                    "5": "input"
                },
                "param_1[0xc]": {
                    "1": "string_list[0xc]"
                },
                "param_1[9]": {
                    "1": "char_array"
                },
                "param_1[9][4]": {
                    "1": "param1_char"
                },
                "puVar1": {
                    "1": "variable1",
                    "14": "temp_ptr",
                    "2": "temp_var",
                    "3": "char_ptr"
                }
            },
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_param_08001904(uint **input)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)input + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)input + 0x2a) < 4) {\n      if (*(ushort *)((int)input + 0x2a) < 2) {\n        **input = **input & 0xfffffbff;\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        temp_ptr = ptr_array;\n        ptr_array = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*input)[4];\n        *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        string_list[0xc] = (uint *)0x0;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      temp_ptr = ptr_array;\n      ptr_array = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n      if (*(short *)((int)input + 0x2a) == 3) {\n        (*input)[1] = (*input)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_08001904",
            "entrypoint": "0x08001904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "input",
                "param_1[0xc]": "string_list[0xc]",
                "param_1[9]": "ptr_array",
                "puVar1": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080019a0": {
            "additional_data": {
                "(*(char *)((int)param_1 + 0x2a))": {
                    "1": "value_check_char"
                },
                "(*(short *)((int)param_1 + 0x2a)": {
                    "1": "action_type"
                },
                "(*(short *)((int)param_1 + 0x2a))": {
                    "1": "param1_field2"
                },
                "(*param_1)": {
                    "1": "param1_value"
                },
                "(*param_1)[1]": {
                    "1": "value_at_index1",
                    "2": "param1",
                    "3": "param[1]"
                },
                "(*param_1)[1] & 0xfffffbff": {
                    "1": "updated_value1"
                },
                "(*param_1)[1] & 0xfffffcff": {
                    "1": "value_3"
                },
                "(*param_1)[4]": {
                    "1": "param1_field4",
                    "2": "param[4]"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_at_param1_plus0x3e"
                },
                "(char)(*param_1)[4]": {
                    "1": "(char)param[4]",
                    "2": "char_value"
                },
                "(int)param_1 + 0x2a": {
                    "1": "param1_array_index"
                },
                "(int)param_1 + 0x2a)": {
                    "1": "temp_short"
                },
                "(int)param_1 + 0x3d": {
                    "1": "param1_plus0x3d"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_offset"
                },
                "(int)param_1[0xb]": {
                    "1": "array_size"
                },
                "(int)param_1[0xb] - 1U": {
                    "1": "comparison_result"
                },
                "(int)param_1[0xb] - 1U < 2": {
                    "2": "check_condition"
                },
                "(int)puVar1 + 1": {
                    "1": "temp_pointer_plus_one"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "next_ptr_address"
                },
                "(uint *)0x0": {
                    "1": "null_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "value2"
                },
                "*(char *)puVar1": {
                    "1": "param1_array_element",
                    "2": "char_value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "param[10]",
                    "2": "condition"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_field2"
                },
                "*(short *)((int)param_1 + 0x3d)": {
                    "1": "param[11]"
                },
                "*(uint *)((int)param_1 + 0x3d)": {
                    "1": "updated_value2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_char1"
                },
                "*(undefined *)((int)param_1 + 0x3d) = 0x20": {
                    "1": "set_address1_to_space"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_value_2"
                },
                "**(param_1)": {
                    "1": "access_value3"
                },
                "**param_1": {
                    "1": "pointer_value"
                },
                "**param_1 & 0xfffffbff": {
                    "1": "updated_ptr_value"
                },
                "*param_1": {
                    "1": "input_ptr"
                },
                "FUNC_080015b8": {
                    "1": "backup_data"
                },
                "FUNC_080015b8()": {
                    "1": "function_2"
                },
                "FUNC_08001902": {
                    "1": "revert_data"
                },
                "FUNC_08001902()": {
                    "1": "function_1"
                },
                "FUN_080019a0": {
                    "1": "update_data",
                    "11": "process_param",
                    "5": "process_data"
                },
                "PTR_080015b8": {
                    "1": "alternate_func"
                },
                "PTR_08001902": {
                    "1": "reverse_func"
                },
                "param_1": {
                    "1": "memory_access",
                    "2": "parameter_list",
                    "3": "parameter",
                    "5": "param_list",
                    "8": "param"
                },
                "param_1[0xb]": {
                    "1": "param1b"
                },
                "param_1[0xc]": {
                    "1": "param_12"
                },
                "param_1[9]": {
                    "1": "ptr_array",
                    "2": "counter",
                    "3": "param[9]"
                },
                "puVar1": {
                    "1": "ptr1",
                    "10": "temp_ptr",
                    "2": "next_param",
                    "3": "temp",
                    "4": "temp_pointer"
                }
            },
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_param_080019a0(uint **param)\n\n{\n  uint *temp_ptr;\n  \n  if (*(short *)((int)param + 0x2a) == 4) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    temp_ptr = param[9];\n    param[9] = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 3) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    temp_ptr = param[9];\n    param[9] = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 2) {\n    if (array_size - 1U < 2) {\n      **param = **param & 0xfffffbff;\n      **param = **param | 0x100;\n    }\n    else {\n      **param = **param | 0x200;\n    }\n    temp_ptr = param[9];\n    param[9] = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    temp_ptr = param[9];\n    param[9] = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    (*param)[1] = (*param)[1] & 0xfffffcff;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    param_c = (uint *)0x0;\n    if (*(char *)((int)param + 0x3e) == '@') {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    temp_ptr = param[9];\n    param[9] = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_param_080019a0",
            "entrypoint": "0x080019a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1[0xb]": "array_size",
                "FUN_080019a0": "process_param_080019a0",
                "param_1": "param",
                "param_1[0xb]": "param1b",
                "param_1[0xc]": "param_c",
                "param_1[9]": "param[9]",
                "puVar1": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001aac": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001aac",
            "entrypoint": "0x08001aac",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "(*(code *)param_1[0xe][0x14])()": {
                    "1": "execute_label1"
                },
                "*(byte *)((int)param_1 + 0x3d)": {
                    "1": "byte_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value2"
                },
                "FUK_08001aac": {
                    "1": "initialize_data"
                },
                "FUK_08003900": {
                    "1": "check_data"
                },
                "FUN_08001ab0": {
                    "1": "execute_main_action",
                    "12": "process_data",
                    "2": "process_param",
                    "3": "execute_function"
                },
                "LAB_08001f3c_1": {
                    "1": "label"
                },
                "check_and_initialize_data_08003900": {
                    "1": "check_and_initialize_data"
                },
                "execute_function_080038d0": {
                    "3": "execute_function"
                },
                "iVar1": {
                    "1": "update_result",
                    "11": "return_value",
                    "15": "result",
                    "3": "index"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "param_array",
                    "4": "input_data",
                    "7": "parameters",
                    "8": "data"
                },
                "puVar2": {
                    "1": "pointer_1",
                    "2": "char_ptr",
                    "3": "pointer_var2",
                    "5": "temp_ptr1"
                },
                "puVar3": {
                    "1": "ptr",
                    "2": "pointer_3",
                    "3": "ptr3",
                    "5": "temp_ptr2"
                },
                "update_param_08000f8c": {
                    "1": "update_parameter",
                    "2": "update_param"
                }
            },
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "code": "\nvoid process_data_08001ab0(uint **data)\n\n{\n  int result;\n  uint *temp_ptr1;\n  uint *temp_ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  temp_ptr2 = *data;\n  if ((temp_ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        temp_ptr1 = data[9];\n        data[9] = (uint *)((int)temp_ptr1 + 1);\n        *(char *)temp_ptr1 = (char)temp_ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        temp_ptr1 = data[9];\n        data[9] = (uint *)((int)temp_ptr1 + 1);\n        *(char *)temp_ptr1 = (char)temp_ptr2[4];\n      }\n      initialize_data(data);\n    }\n  }\n  else {\n    temp_ptr2[1] = temp_ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&label;\n      result = update_param(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          temp_ptr2 = data[9];\n          data[9] = (uint *)((int)temp_ptr2 + 1);\n          *(char *)temp_ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&label;\n      result = update_param(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    execute_function(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "LAB_08001f3c_1": "label",
                "check_and_initialize_data_08003900": "initialize_data",
                "execute_function_080038d0": "execute_function",
                "iVar1": "result",
                "param_1": "data",
                "puVar2": "temp_ptr1",
                "puVar3": "temp_ptr2",
                "update_param_08000f8c": "update_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "additional_data": {
                "FUN_08001bfc": {
                    "1": "process_param_data",
                    "2": "process_input",
                    "25": "process_data",
                    "3": "process_param"
                },
                "cVar1": {
                    "1": "first_character",
                    "10": "character",
                    "2": "char_var",
                    "4": "char1"
                },
                "param_1": {
                    "1": "param_list",
                    "14": "data",
                    "2": "params",
                    "3": "param",
                    "4": "input_data"
                },
                "puVar2": {
                    "1": "var2",
                    "2": "pointer_var_2",
                    "3": "pointer_1",
                    "4": "pointer1",
                    "8": "ptr1"
                },
                "puVar3": {
                    "1": "uint_ptr_2",
                    "2": "pointer_var_3",
                    "3": "pointer_var2",
                    "4": "pointer2",
                    "9": "ptr2"
                }
            },
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "calling": [
                "FUN_08001d00"
            ],
            "code": "\nundefined4 process_data_08001bfc(uint **data)\n\n{\n  char char_value;\n  uint *ptr1;\n  uint *ptr2;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((char_value == '(') || (char_value == '*')) || (char_value == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      execute_function_080038d0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (char_value == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_data_08001bfc_08001ab0();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_08001bfc",
            "entrypoint": "0x08001bfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001bfc": "process_data_08001bfc",
                "cVar1": "char_value",
                "param_1": "data",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001d00": {
            "additional_data": {
                "FUN_08001d00": {
                    "1": "process_command",
                    "11": "process_function",
                    "2": "process_parameters",
                    "4": "process_param",
                    "5": "process_param_data"
                },
                "iVar1": {
                    "1": "current_value",
                    "2": "data_value",
                    "3": "input_value",
                    "8": "param_value"
                },
                "param_1": {
                    "1": "command",
                    "2": "input_param",
                    "3": "input_array",
                    "4": "param",
                    "5": "input_data"
                },
                "process_data_080015bc": {
                    "1": "process_data_with_flag_and_data",
                    "3": "process_data"
                },
                "process_data_0800160e": {
                    "1": "process_data_without_param_or_data",
                    "3": "process_data"
                },
                "process_data_0800165a": {
                    "1": "process_data_alt",
                    "3": "process_data"
                },
                "process_data_0800171a": {
                    "5": "process_data"
                },
                "process_data_08001bfc": {
                    "1": "process_data_alt_alt",
                    "3": "process_data"
                },
                "process_param_08001904": {
                    "2": "process_parameter",
                    "3": "process_param"
                },
                "process_param_080019a0": {
                    "1": "process_param",
                    "2": "process_parameter"
                },
                "set_param_value_0800124a": {
                    "1": "set_parameter_value",
                    "4": "set_param_value"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "flag_value",
                    "4": "flag1",
                    "8": "flags"
                },
                "uVar3": {
                    "1": "flag_value",
                    "2": "status_value",
                    "4": "flag2",
                    "9": "status"
                },
                "uVar4": {
                    "1": "value_3",
                    "2": "value3",
                    "3": "data_value",
                    "4": "data"
                },
                "update_data_08001420": {
                    "1": "update_data_alt_alt",
                    "3": "update_data"
                },
                "update_data_08001440": {
                    "5": "update_data"
                },
                "update_flags_08001256": {
                    "5": "update_flags"
                },
                "update_param_08001864": {
                    "2": "update_parameter",
                    "3": "update_param"
                },
                "update_status_080011c0": {
                    "5": "update_status"
                }
            },
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "calling": [],
            "code": "\nvoid process_function_08001d00(int *input_data)\n\n{\n  int param_value;\n  uint flags;\n  uint status;\n  uint data;\n  \n  param_value = *input_data;\n  data = *(uint *)(param_value + 0x18);\n  flags = *(uint *)(param_value + 0x14);\n  status = *(uint *)(param_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((status & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((status & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((status & 0x200) != 0)) {\n          update_flags(input_data);\n        }\n      }\n      else {\n        set_param_value(input_data);\n      }\n    }\n    else {\n      update_status(input_data);\n    }\n    if ((data & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((status & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_param(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((status & 0x200) != 0)) {\n        process_parameter(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((status & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((status & 0x200) != 0)) {\n        update_param(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((status & 0x200) != 0)) {\n      process_data();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((status & 0x200) != 0)) {\n      process_data(input_data);\n      return;\n    }\n    if ((data & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((status & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((status & 0x200) != 0)) {\n        update_data(input_data);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((status & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((status & 0x200) != 0)) {\n        update_data(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_function_08001d00",
            "entrypoint": "0x08001d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001d00": "process_function_08001d00",
                "iVar1": "param_value",
                "param_1": "input_data",
                "process_data_080015bc": "process_data",
                "process_data_0800160e": "process_data",
                "process_data_0800165a": "process_data",
                "process_data_0800171a": "process_data",
                "process_data_08001bfc": "process_data",
                "process_param_08001904": "process_param",
                "process_param_080019a0": "process_parameter",
                "set_param_value_0800124a": "set_param_value",
                "uVar2": "flags",
                "uVar3": "status",
                "uVar4": "data",
                "update_data_08001420": "update_data",
                "update_data_08001440": "update_data",
                "update_flags_08001256": "update_flags",
                "update_param_08001864": "update_param",
                "update_status_080011c0": "update_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e68": {
            "additional_data": {
                "FUN_08001e68": {
                    "1": "process_function",
                    "16": "process_flags",
                    "4": "process_data"
                },
                "cVar1": {
                    "1": "character_value",
                    "14": "character",
                    "2": "character_var",
                    "4": "char1",
                    "5": "char_value"
                },
                "param_1": {
                    "1": "flag_data",
                    "2": "param",
                    "3": "input_data",
                    "7": "flags"
                },
                "process_data_08001ab0": {
                    "2": "process_data"
                },
                "process_param_08001684": {
                    "2": "process_parameter"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "10": "ptr",
                    "2": "data_ptr",
                    "4": "pointer"
                },
                "uVar3": {
                    "1": "flags",
                    "11": "flag1",
                    "2": "flag_value1",
                    "3": "value1",
                    "4": "flag_value"
                },
                "uVar4": {
                    "1": "value4",
                    "11": "flag2",
                    "2": "flag_value2",
                    "3": "value2",
                    "4": "flag_2"
                }
            },
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "calling": [],
            "code": "\nvoid process_flags_08001e68(uint **flags)\n\n{\n  char character;\n  uint *ptr;\n  uint flag1;\n  uint flag2;\n  \n  ptr = *flags;\n  flag1 = ptr[5];\n  flag2 = ptr[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 2);\n    (*flags)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    character = *(char *)((int)flags + 0x3d);\n    if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (flags[0xc] == (uint *)0x21)))))) {\n      process_parameter(flags);\n    }\n    else {\n      flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n      if (*(char *)((int)flags + 0x3e) == '\\x10') {\n        **flags = **flags | 0x200;\n      }\n      (*flags)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    flags[0x10] = (uint *)((uint)flags[0x10] | 8);\n    (*flags)[5] = 0xfffff7ff;\n  }\n  if (flags[0x10] != (uint *)0x0) {\n    process_data(flags);\n  }\n  return;\n}\n\n",
            "current_name": "process_flags_08001e68",
            "entrypoint": "0x08001e68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "cVar1": "character",
                "param_1": "flags",
                "process_data_08001ab0": "process_data",
                "process_param_08001684": "process_parameter",
                "puVar2": "ptr",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "additional_data": {
                "FUN_08001f9c": {
                    "1": "update_data",
                    "13": "initialize_data",
                    "2": "initialize_and_check",
                    "3": "initialize_flags",
                    "4": "initialize_system"
                },
                "_DAT_40007004": {
                    "1": "status_flags"
                },
                "_DAT_40023840": {
                    "1": "flag_register_1"
                },
                "_DAT_420e0040": {
                    "1": "status_variable"
                },
                "_DAT_420e0044": {
                    "1": "internal_flag"
                },
                "get_data_08000e30": {
                    "1": "retrieve_data",
                    "2": "get_data",
                    "3": "fetch_data"
                },
                "iVar1": {
                    "1": "previous_data",
                    "15": "initial_value",
                    "3": "start_value",
                    "4": "initial_data"
                },
                "iVar2": {
                    "1": "current_val",
                    "16": "current_value",
                    "2": "updated_value",
                    "4": "current_time",
                    "6": "current_data"
                }
            },
            "called": [
                "FUN_08000e30"
            ],
            "calling": [
                "FUN_08000c8c"
            ],
            "code": "\n\n\nundefined4 initialize_data_08001f9c(void)\n\n{\n  int initial_value;\n  int current_value;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initial_value = fetch_data();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initial_value = fetch_data();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_value = fetch_data();\n      } while ((uint)(current_value - initial_value) < 0x3e9);\n      return 3;\n    }\n    current_value = fetch_data();\n  } while ((uint)(current_value - initial_value) < 0x3e9);\n  return 3;\n}\n\n",
            "current_name": "initialize_data_08001f9c",
            "entrypoint": "0x08001f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f9c": "initialize_data_08001f9c",
                "get_data_08000e30": "fetch_data",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800201c": {
            "additional_data": {
                "FUN_0800201c": {
                    "1": "verify_and_control_data",
                    "2": "process_flags",
                    "3": "process_data",
                    "4": "perform_action"
                },
                "_DAT_40007000": {
                    "1": "other_variable"
                },
                "_DAT_40023800": {
                    "1": "register2",
                    "2": "register3"
                },
                "_DAT_40023804": {
                    "1": "misc_control",
                    "2": "register2"
                },
                "_DAT_40023808": {
                    "1": "register_a",
                    "3": "register1"
                },
                "_DAT_40023840": {
                    "1": "register_4",
                    "2": "register7"
                },
                "_DAT_40023870": {
                    "1": "reg7"
                },
                "_DAT_40023874": {
                    "1": "data_flag_2"
                },
                "_DAT_40023880": {
                    "1": "register4"
                },
                "_DAT_42470000": {
                    "1": "register4",
                    "2": "data_flag_1"
                },
                "_DAT_42470060": {
                    "1": "data_flag_3",
                    "2": "register10"
                },
                "_DAT_42470e80": {
                    "1": "flag2"
                },
                "bVar4": {
                    "1": "is_set",
                    "2": "is_bit_set",
                    "6": "flag",
                    "8": "is_flag_set"
                },
                "get_data_08000e30": {
                    "1": "get_time_data",
                    "3": "get_data"
                },
                "iVar1": {
                    "1": "start",
                    "15": "start_time",
                    "5": "start_value"
                },
                "iVar2": {
                    "1": "current",
                    "17": "current_time",
                    "9": "current_value"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "param",
                    "3": "flags",
                    "4": "parameters",
                    "6": "input_array"
                },
                "return": {
                    "1": "return"
                },
                "uVar3": {
                    "28": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_08000e30"
            ],
            "calling": [
                "FUN_08000c8c"
            ],
            "code": "\n\n\nundefined4 perform_action_0800201c(uint *input_array)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if (input_array == (uint *)0x0) {\n    return 1;\n  }\n  if ((*input_array & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (input_array[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (input_array[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (input_array[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (input_array[1] == 0) {\n        start_time = get_data();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_time = get_data();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_data();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_time = get_data();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input_array & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (input_array[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | input_array[4] << 3;\n    }\n    else if (input_array[3] == 0) {\n      _DAT_42470000 = 0;\n      start_time = get_data();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_time = get_data();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      start_time = get_data();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_time = get_data();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | input_array[4] << 3;\n    }\n  }\n  if ((*input_array & 8) != 0) {\n    if (input_array[5] == 0) {\n      _DAT_42470e80 = 0;\n      start_time = get_data();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_time = get_data();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      start_time = get_data();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_time = get_data();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*input_array & 4) != 0) {\n    is_flag_set = (_DAT_40023840 & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_data();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_data();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (input_array[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (input_array[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (input_array[2] == 0) {\n      start_time = get_data();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_time = get_data();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_data();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_time = get_data();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (input_array[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (input_array[6] == 2) {\n    _DAT_42470060 = 0;\n    start_time = get_data();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             input_array[7] | input_array[8] | input_array[9] << 6 | ((input_array[10] >> 1) - 1) * 0x10000 |\n             input_array[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        start_time = get_data();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_data();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_data();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    start_time = get_data();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_data();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_action_0800201c",
            "entrypoint": "0x0800201c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800201c": "perform_action_0800201c",
                "bVar4": "is_flag_set",
                "get_data_08000e30": "get_data",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "input_array",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080023b4": {
            "additional_data": {
                "CARRY4": {
                    "1": "has_overflow",
                    "2": "check_carry"
                },
                "FUN_080023b4": {
                    "1": "calculate_output_frequency",
                    "15": "calculate_frequency",
                    "4": "calculate_clock_frequency",
                    "7": "calculate_clock_speed"
                },
                "_080023b4": {
                    "1": "calculate_frequency"
                },
                "_DAT_40023804": {
                    "1": "input_speed",
                    "2": "data_register2",
                    "3": "register2",
                    "4": "register_value2",
                    "8": "register_value_2"
                },
                "_DAT_40023808": {
                    "1": "register_a",
                    "2": "data_register1",
                    "3": "data_register_1",
                    "4": "register_value1",
                    "8": "register_value_1"
                },
                "_FUN_080023b4": {
                    "1": "calculate_frequency"
                },
                "_calculate_result_080002d0": {
                    "1": "calculate_result"
                },
                "_uVar1": {
                    "1": "calculated_frequency"
                },
                "_uVar2": {
                    "1": "result"
                },
                "_uVar3": {
                    "1": "multiplier"
                },
                "_uVar4": {
                    "1": "shifted_result"
                },
                "calculate_carry": {
                    "1": "calculate_carry"
                },
                "calculate_frequency": {
                    "1": "calculate_result"
                },
                "calculate_result_080002d0": {
                    "1": "calculate_value",
                    "3": "perform_calculation",
                    "5": "calculate_result"
                },
                "in_r3": {
                    "1": "param",
                    "5": "input_param",
                    "7": "input_value",
                    "9": "input_parameter"
                },
                "uVar1": {
                    "1": "multiplier",
                    "16": "result",
                    "2": "temporary_variable",
                    "3": "frequency"
                }
            },
            "called": [
                "FUN_080002d0"
            ],
            "calling": [
                "FUN_08002488"
            ],
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 input_parameter;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)check_carry(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)check_carry(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "current_name": "calculate_frequency_080023b4",
            "entrypoint": "0x080023b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_carry",
                "FUN_080023b4": "calculate_frequency_080023b4",
                "_080023b4": "calculate_frequency",
                "calculate_result_080002d0": "calculate_result",
                "in_r3": "input_parameter",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002488": {
            "additional_data": {
                "&DAT_08005dfc": {
                    "1": "frequency_table"
                },
                "(&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c]": {
                    "1": "frequency_offset"
                },
                "*param_1": {
                    "1": "param_flags"
                },
                "5000": {
                    "1": "time_threshold"
                },
                "CONCAT31": {
                    "1": "set_config_size"
                },
                "CONCAT31(DAT_40023c00_1,(char)param_2)": {
                    "1": "updated_config"
                },
                "DAT_08005dfc": {
                    "1": "frequency_lookup_table"
                },
                "DAT_2000002c": {
                    "1": "result",
                    "2": "updated_frequency",
                    "3": "frequency_result",
                    "4": "calculated_frequency"
                },
                "DAT_40023800": {
                    "1": "device_status_check"
                },
                "DAT_40023c00_1": {
                    "1": "config_data1",
                    "4": "device_config_1"
                },
                "FUN_08002488": {
                    "1": "initialize_and_update_data",
                    "10": "initialize_and_update",
                    "2": "set_configuration",
                    "4": "initialize_device",
                    "8": "configure_device"
                },
                "_DAT_40023800": {
                    "1": "gpio_pin_settings",
                    "2": "device_status"
                },
                "_DAT_40023808": {
                    "1": "register_value",
                    "2": "device_status",
                    "5": "control_register"
                },
                "_DAT_40023c00": {
                    "1": "gpio_pin_limit",
                    "2": "device_register",
                    "5": "device_config"
                },
                "_DAT_40023c00_1": {
                    "1": "device_config_1"
                },
                "calculate_frequency_080023b4": {
                    "1": "calculate_actual_frequency",
                    "17": "calculate_frequency"
                },
                "calculate_frequency_080023b4()": {
                    "1": "calculate_frequency"
                },
                "get_data_08000e30": {
                    "1": "get_data",
                    "11": "get_elapsed_time",
                    "2": "get_time",
                    "4": "get_current_time"
                },
                "get_data_08000e30()": {
                    "1": "get_current_time"
                },
                "get_elapsed_time": {
                    "1": "get_elapsed_time"
                },
                "iVar1": {
                    "1": "start",
                    "2": "initial_value",
                    "23": "start_time"
                },
                "iVar2": {
                    "1": "end",
                    "2": "current_value",
                    "20": "current_time",
                    "4": "end_time"
                },
                "initialize_and_update_data_08000d98": {
                    "1": "update_data",
                    "13": "initialize_and_update_data",
                    "2": "initialize_and_update"
                },
                "initialize_and_update_data_08000d98(0xf)": {
                    "1": "initialize_and_update_data"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "config_flags",
                    "5": "config_params",
                    "7": "config"
                },
                "param_2": {
                    "1": "num_flags",
                    "2": "num_channels",
                    "3": "num_params",
                    "4": "config_size",
                    "6": "frequency"
                },
                "uVar3": {
                    "1": "calculated_freq",
                    "22": "frequency",
                    "5": "calculated_frequency"
                }
            },
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "calling": [
                "FUN_08000c8c"
            ],
            "code": "\n\n\nundefined4 initialize_and_update_08002488(uint *config,uint frequency)\n\n{\n  int start_time;\n  int current_time;\n  uint frequency;\n  \n  if (config == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < frequency) {\n    _DAT_40023c00 = set_config_size(DAT_40023c00_1,(char)frequency);\n    if (frequency != (frequency & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    if ((*config & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | config[2];\n  }\n  if ((*config & 1) != 0) {\n    frequency = config[1];\n    if (frequency == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (frequency - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = frequency | _DAT_40023808 & 0xfffffffc;\n    start_time = get_current_time;\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == config[1] * 4) break;\n      current_time = get_current_time;\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (frequency < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = set_config_size(DAT_40023c00_1,(char)frequency);\n    if (frequency != (frequency & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config[3];\n  }\n  if ((*config & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config[4] << 3;\n  }\n  frequency = calculate_frequency;\n  DAT_2000002c = frequency >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_and_update_08002488_data;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_08002488",
            "entrypoint": "0x08002488",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT31": "set_config_size",
                "FUN_08002488": "initialize_and_update_08002488",
                "calculate_frequency_080023b4": "calculate_frequency",
                "calculate_frequency_080023b4()": "calculate_frequency",
                "get_data_08000e30": "get_elapsed_time",
                "get_data_08000e30()": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "initialize_and_update_data_08000d98": "initialize_and_update_data",
                "initialize_and_update_data_08000d98(0xf)": "initialize_and_update_data",
                "param_1": "config",
                "param_2": "frequency",
                "uVar3": "frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e0": {
            "additional_data": {
                "DAT_2000002c": {
                    "1": "result",
                    "2": "data_offset",
                    "4": "global_variable",
                    "9": "data"
                },
                "FUN_080025e0": {
                    "1": "get_dat_value",
                    "10": "get_data",
                    "3": "get_data_offset",
                    "4": "get_global_variable",
                    "8": "get_data_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "current_name": "get_data_080025e0",
            "entrypoint": "0x080025e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025ec": {
            "additional_data": {
                "&DAT_08005e0c": {
                    "1": "shift_amount",
                    "3": "shift_table",
                    "5": "shift_array"
                },
                "DAT_08005e0c": {
                    "1": "offset",
                    "2": "shift_amount",
                    "5": "shift_table",
                    "6": "shift_array"
                },
                "FUN_080025ec": {
                    "1": "shifted_result",
                    "2": "calculate_shifted_data",
                    "3": "extracted_data_shifted",
                    "6": "shifted_data_value",
                    "9": "get_shifted_data"
                },
                "_DAT_08005e0c": {
                    "1": "shift_values"
                },
                "_DAT_40023808": {
                    "1": "original_value",
                    "2": "input_data",
                    "4": "shift_amount",
                    "5": "shift_value",
                    "6": "input_value"
                },
                "get_data_080025e0": {
                    "1": "get_data_value",
                    "2": "retrieve_data",
                    "7": "get_data"
                },
                "uVar1": {
                    "2": "extracted_data",
                    "21": "data",
                    "5": "data_value"
                }
            },
            "called": [
                "FUN_080025e0"
            ],
            "calling": [
                "FUN_080029c8"
            ],
            "code": "\n\n\nuint get_shifted_data_080025ec(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_080025ec",
            "entrypoint": "0x080025ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025ec": "get_shifted_data_080025ec",
                "get_data_080025e0": "get_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800260c": {
            "additional_data": {
                "&DAT_08005e0c": {
                    "1": "shift_table",
                    "3": "shift_array"
                },
                "DAT_08005e0c": {
                    "1": "data_shift_values",
                    "2": "shift_table",
                    "3": "shift_amount",
                    "7": "shift_values"
                },
                "FUN_0800260c": {
                    "1": "extracted_data_shifted_value",
                    "2": "extracted_data_shifted",
                    "3": "extracted_data_shift",
                    "5": "shift_data",
                    "8": "get_shifted_data"
                },
                "_DAT_40023808": {
                    "1": "data_offset",
                    "3": "shift_amount",
                    "4": "shift_value",
                    "7": "input_value"
                },
                "get_data_080025e0": {
                    "2": "retrieve_data",
                    "3": "get_extracted_data",
                    "7": "get_data"
                },
                "name_1": {
                    "1": "shift_amount"
                },
                "uVar1": {
                    "21": "data",
                    "4": "data_value"
                }
            },
            "called": [
                "FUN_080025e0"
            ],
            "calling": [
                "FUN_080029c8"
            ],
            "code": "\n\n\nuint get_shifted_data_0800260c(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "current_name": "get_shifted_data_0800260c",
            "entrypoint": "0x0800260c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800260c": "get_shifted_data_0800260c",
                "get_data_080025e0": "get_data",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800262c": {
            "additional_data": {
                "(int)param_1 + 0x1d": {
                    "1": "flag_variable"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flags1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "flag2"
                },
                "*(undefined *)((int)data_ptr + 0x1d)": {
                    "1": "data_ptr_offset_0x1d"
                },
                "*(undefined *)((int)param_1 + 0x1d)": {
                    "1": "status_value",
                    "2": "callback_flag"
                },
                "DAT_1": {
                    "1": "constant"
                },
                "DAT_1d": {
                    "1": "boolean_true"
                },
                "DAT_40013c14": {
                    "1": "flag_value"
                },
                "FUNC_0800268c": {
                    "1": "execute_callback2",
                    "2": "perform_additional_action",
                    "3": "perform_action"
                },
                "FUN_0800262c": {
                    "1": "update_permissions",
                    "11": "execute_and_update_flags",
                    "2": "update_flags_and_state",
                    "5": "execute_callbacks"
                },
                "PTR_0800262c": {
                    "1": "parameter"
                },
                "PTR_08002630": {
                    "1": "pointer_offset"
                },
                "PTR_08002634": {
                    "1": "pointer_offset2"
                },
                "PTR_08002638": {
                    "1": "pointer_offset3"
                },
                "PTR_0800263c": {
                    "1": "pointer_offset4"
                },
                "PTR_08002640": {
                    "1": "pointer_offset5"
                },
                "PTR_08002644": {
                    "1": "flag_mask2"
                },
                "PTR_08002648": {
                    "1": "set_flag1"
                },
                "PTR_0800264c": {
                    "1": "set_flag2"
                },
                "PTR_08003594": {
                    "1": "execute_callback"
                },
                "PTR_0800368c": {
                    "1": "additional_action_function_pointer"
                },
                "PTR_FUNC_0800268c": {
                    "1": "func_0800268c"
                },
                "PTR_FUN_08003594": {
                    "1": "execute_callback_08003594"
                },
                "_DAT_40013c14": {
                    "1": "status_register",
                    "2": "flag_value",
                    "3": "global_variable"
                },
                "execute_callback_08003594": {
                    "1": "execute_callback_one",
                    "15": "execute_callback",
                    "2": "execute_callback_function",
                    "5": "perform_callback"
                },
                "param_1": {
                    "1": "input_pointer",
                    "4": "data_ptr",
                    "8": "callback_data"
                },
                "undefined": {
                    "1": "status"
                }
            },
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "calling": [],
            "code": "\n\n\nvoid execute_and_update_flags_0800262c(int *callback_data)\n\n{\n  if (((*(uint *)(*callback_data + 0xc) & 0x100) != 0) && ((*(uint *)(*callback_data + 8) & 0x1000) != 0)) {\n    execute_callback();\n    *(uint *)(*callback_data + 0xc) = *(uint *)(*callback_data + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*callback_data + 0xc) & 0x200) != 0) && ((*(uint *)(*callback_data + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(callback_data);\n    *(uint *)(*callback_data + 0xc) = *(uint *)(*callback_data + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(status *)((int)callback_data + 0x1d) = 1;\n  return;\n}\n\n",
            "current_name": "execute_and_update_flags_0800262c",
            "entrypoint": "0x0800262c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800262c": "execute_and_update_flags_0800262c",
                "execute_callback_08003594": "execute_callback",
                "param_1": "callback_data",
                "undefined": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800268c": {
            "called": [],
            "calling": [
                "FUN_0800262c"
            ],
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800268c",
            "entrypoint": "0x0800268c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800268e": {
            "additional_data": {
                "(puVar1[8] & 0x1111)": {
                    "1": "flag_check1"
                },
                "(puVar1[8] & 0x444)": {
                    "1": "flag_check2"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "data_status",
                    "3": "flag"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "counter"
                },
                "*puVar1": {
                    "1": "pointer_value"
                },
                "0x1111": {
                    "1": "flag_a_mask"
                },
                "0x39": {
                    "1": "flag_offset"
                },
                "0x444": {
                    "1": "flag_b_mask"
                },
                "0xfffffffe": {
                    "1": "flag_mask"
                },
                "DAT_0x39": {
                    "1": "flag"
                },
                "FUN_0800268e": {
                    "1": "update_function",
                    "16": "update_flags",
                    "2": "update_and_reset_flags",
                    "6": "update_flags_and_reset"
                },
                "PTR_0800340c": {
                    "1": "update_flags_helper"
                },
                "PTR_0x39": {
                    "1": "flag_ptr"
                },
                "param_1": {
                    "1": "parameter1",
                    "2": "data",
                    "3": "input",
                    "8": "parameters"
                },
                "param_1 + 0x39": {
                    "1": "status_variable"
                },
                "param_1 + 0xe": {
                    "1": "flag_variable"
                },
                "puVar1": {
                    "1": "input_pointer",
                    "2": "current_ptr",
                    "3": "pointer_var1",
                    "5": "ptr",
                    "9": "pointer"
                },
                "puVar1[8]": {
                    "2": "flag_array"
                },
                "puVar1[8] & 0x1111": {
                    "1": "check_condition_1"
                },
                "puVar1[8] & 0x444": {
                    "1": "check_condition_2"
                },
                "update_flags_0800340c": {
                    "1": "update_flags0800340c",
                    "4": "update_flags_helper",
                    "8": "update_flags"
                }
            },
            "called": [
                "FUN_0800340c"
            ],
            "calling": [
                "FUN_08003414"
            ],
            "code": "\nvoid update_flags_0800268e(uint **parameters)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)parameters + 0x39) = 2;\n  pointer = *parameters;\n  if ((flag_array & 0x1111) == 0) {\n    if ((flag_array & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  update_flags_0800268e(parameters);\n  *(undefined *)((int)parameters + 0x39) = 0;\n  *(undefined *)(parameters + 0xe) = 0;\n  return;\n}\n\n",
            "current_name": "update_flags_0800268e",
            "entrypoint": "0x0800268e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800268e": "update_flags_0800268e",
                "param_1": "parameters",
                "puVar1": "pointer",
                "puVar1[8]": "flag_array",
                "update_flags_0800340c": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080026c8": {
            "called": [],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080026c8",
            "entrypoint": "0x080026c8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080026ca": {
            "called": [],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080026ca",
            "entrypoint": "0x080026ca",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080026cc": {
            "called": [],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080026cc",
            "entrypoint": "0x080026cc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080026ce": {
            "additional_data": {
                "*(uint *)(*parameters + 0x18)": {
                    "1": "condition_3"
                },
                "*(uint *)(*parameters + 0x1c)": {
                    "1": "condition_4"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "condition_1"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "condition_2"
                },
                "*(undefined *)(parameters + 6)": {
                    "1": "status"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "result_1"
                },
                "FUNC_080026c8": {
                    "1": "perform_alternative_action",
                    "2": "else_action"
                },
                "FUNC_080026c8(param_1)": {
                    "1": "perform_fallback_action(flags)"
                },
                "FUNC_080026ca": {
                    "1": "process_success",
                    "13": "perform_action",
                    "2": "function_a",
                    "3": "perform_operation"
                },
                "FUNC_080026ca(param_1)": {
                    "1": "perform_action(input_array)"
                },
                "FUNC_080026cc": {
                    "1": "another_action",
                    "2": "perform_another_action"
                },
                "FUNC_080026cc(param_1)": {
                    "1": "execute_func_080026cc(flags)"
                },
                "FUNC_0800293c": {
                    "1": "process_another_action",
                    "2": "perform_action4"
                },
                "FUNC_0800293c(param_1)": {
                    "1": "execute_func_0800293c(flags)"
                },
                "FUNC_0800293e": {
                    "1": "perform_task_a",
                    "2": "perform_action2",
                    "3": "perform_action"
                },
                "FUNC_0800293e(param_1)": {
                    "1": "execute_func_0800293e(flags)"
                },
                "FUNC_0800376e": {
                    "1": "execute_callback"
                },
                "FUN_080026ce": {
                    "1": "execute_conditional_operations",
                    "10": "process_conditions",
                    "2": "process_flags"
                },
                "execute_callback_0800376e": {
                    "1": "perform_callback",
                    "24": "execute_callback"
                },
                "execute_callback_0800376e(param_1)": {
                    "1": "execute_callback(flags)"
                },
                "execute_function_if_condition_met_08003754": {
                    "1": "execute_condition_functions",
                    "3": "execute_condition_met",
                    "4": "execute_function_if_condition_met",
                    "5": "execute_if_condition_met",
                    "8": "execute_condition_function"
                },
                "execute_function_if_condition_met_08003754(param_1)": {
                    "1": "execute_condition_function(flags)"
                },
                "iVar1": {
                    "1": "status_value",
                    "16": "value",
                    "2": "current_value",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "params",
                    "4": "input_array",
                    "6": "input"
                }
            },
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "calling": [
                "FUN_0800377c"
            ],
            "code": "\nvoid process_conditions_080026ce(int *input)\n\n{\n  int value;\n  \n  value = *input;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 6) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      execute_condition_function();\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 6) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      execute_condition_met(status);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 6) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      execute_condition_met(status);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(input + 6) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      execute_condition_met(status);\n      FUNC_080026ca(input);\n    }\n    else {\n      FUNC_080026c8(input);\n    }\n    *(undefined *)(input + 6) = 0;\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    execute_callback(param);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(input);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(input);\n  }\n  value = *input;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(input);\n  }\n  return;\n}\n\n",
            "current_name": "process_conditions_080026ce",
            "entrypoint": "0x080026ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080026ce": "process_conditions_080026ce",
                "execute_callback_0800376e": "execute_callback",
                "execute_callback_0800376e(param_1)": "execute_callback(param)",
                "execute_function_if_condition_met_08003754": "execute_condition_function",
                "execute_function_if_condition_met_08003754(param_1)": "execute_condition_met(status)",
                "iVar1": "value",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002848": {
            "additional_data": {
                "(param_1 + 0x20)": {
                    "1": "parameter_address"
                },
                "(param_2 & 0xff)": {
                    "1": "masked_bit_position"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "data_value"
                },
                "FUN_08002848": {
                    "1": "update_parameter_value",
                    "4": "update_bitwise_value",
                    "5": "update_bit_value",
                    "9": "update_bit"
                },
                "param_1": {
                    "1": "target",
                    "19": "base_address",
                    "2": "data_ptr",
                    "3": "object_address",
                    "4": "data"
                },
                "param_1 + 0x20": {
                    "1": "data_address"
                },
                "param_2": {
                    "1": "position",
                    "25": "bit_position",
                    "5": "bit_index"
                },
                "param_3": {
                    "1": "bitwise_input",
                    "11": "bit_value",
                    "17": "new_value",
                    "2": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002864"
            ],
            "code": "\nvoid update_bits_08002848(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bits_08002848",
            "entrypoint": "0x08002848",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002848": "update_bits_08002848",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002864": {
            "additional_data": {
                "(int)param_1 + 0x39": {
                    "1": "status_flag"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "result",
                    "2": "flag"
                },
                "*puVar2": {
                    "1": "bits_value"
                },
                "0x1111": {
                    "1": "mask1"
                },
                "0x40010000": {
                    "1": "specific_pointer1",
                    "2": "special_value1"
                },
                "0x40010400": {
                    "1": "specific_pointer2",
                    "2": "special_value2"
                },
                "0x444": {
                    "1": "mask2"
                },
                "DAT_08004b28": {
                    "1": "special_value_1"
                },
                "DAT_08004b2c": {
                    "1": "special_value_2"
                },
                "FUN_08002864": {
                    "1": "update_flags_and_values",
                    "13": "update_and_check_bits",
                    "2": "update_and_check",
                    "4": "update_bits"
                },
                "bVar1": {
                    "1": "is40010000_or40010400",
                    "2": "is_match",
                    "3": "is_special",
                    "4": "is_special_value",
                    "5": "is_special_address"
                },
                "int": {
                    "1": "param_1_int"
                },
                "isAddressValid": {
                    "1": "is_address_valid"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "bits_ptr",
                    "6": "bit_array",
                    "9": "bits_array"
                },
                "param_2": {
                    "1": "bit",
                    "11": "bit_value",
                    "4": "bit_mask",
                    "6": "value"
                },
                "ptrToBitArray": {
                    "1": "ptr_to_bit_array"
                },
                "ptr_1": {
                    "1": "bit_array"
                },
                "puVar2": {
                    "1": "bit_array_pointer",
                    "2": "ptr",
                    "3": "current_pointer",
                    "4": "current_address"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "updateAndCheckBits": {
                    "1": "update_and_check_bits"
                },
                "update_bits_08002848": {
                    "4": "update_bits"
                }
            },
            "called": [
                "FUN_08002848"
            ],
            "calling": [
                "FUN_08003414"
            ],
            "code": "\nundefined4 update_and_check_bits_08002864(unsigned_integer **bits_array,undefined4 bit_value)\n\n{\n  bool is_special_address;\n  unsigned_integer *current_bits;\n  \n  update_bits(*bits_array,bit_value,0);\n  current_bits = *bits_array;\n  if (current_bits == (unsigned_integer *)0x40010000) {\n    is_special_address = true;\n  }\n  else if (current_bits == (unsigned_integer *)0x40010400) {\n    is_special_address = true;\n  }\n  else {\n    is_special_address = false;\n  }\n  if (((is_special_address) && ((current_bits[8] & 0x1111) == 0)) && ((current_bits[8] & 0x444) == 0)) {\n    current_bits[0x11] = current_bits[0x11] & 0xffff7fff;\n  }\n  current_bits = *bits_array;\n  if (((current_bits[8] & 0x1111) == 0) && ((current_bits[8] & 0x444) == 0)) {\n    *current_bits = *current_bits & 0xfffffffe;\n  }\n  *(undefined *)((param_1_int)bits_array + 0x39) = 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_check_bits_08002864",
            "entrypoint": "0x08002864",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002864": "update_and_check_bits_08002864",
                "bVar1": "is_special_address",
                "int": "param_1_int",
                "param_1": "bits_array",
                "param_2": "bit_value",
                "puVar2": "current_bits",
                "uint": "unsigned_integer",
                "update_bits_08002848": "update_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028d4": {
            "additional_data": {
                "(param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "current_value",
                    "2": "data",
                    "3": "register_value"
                },
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": {
                    "1": "masked_field_value"
                },
                "*(uint *)(param_1 + 0x20) | param_3 << (param_2 & 0xff)": {
                    "1": "updated_field_value"
                },
                "0x20": {
                    "1": "header_size"
                },
                "4": {
                    "1": "bit_mask"
                },
                "4 << (param_2 & 0xff)": {
                    "1": "bitmask",
                    "3": "bit_mask"
                },
                "FUN_080028d4": {
                    "1": "update_bitwise_shift",
                    "2": "set_bit_value",
                    "3": "update_value",
                    "4": "update_register"
                },
                "new_variable_name_1": {
                    "1": "original_value"
                },
                "new_variable_name_2": {
                    "1": "mask"
                },
                "new_variable_name_3": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "19": "base_address",
                    "2": "data_address"
                },
                "param_1 + 0x20": {
                    "1": "address_to_update",
                    "2": "register_address"
                },
                "param_2": {
                    "1": "bit_mask",
                    "15": "bit_position",
                    "4": "bit_index",
                    "8": "bit_offset"
                },
                "param_2 & 0xff": {
                    "2": "bit_offset"
                },
                "param_3": {
                    "1": "value_to_set",
                    "11": "new_value",
                    "9": "bit_value"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "shifted_value"
                },
                "uint": {
                    "1": ""
                },
                "~(4 << (param_2 & 0xff))": {
                    "1": "clear_mask"
                }
            },
            "called": [],
            "calling": [
                "FUN_080028f0"
            ],
            "code": "\nvoid update_register_080028d4(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_register_080028d4",
            "entrypoint": "0x080028d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028d4": "update_register_080028d4",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028f0": {
            "additional_data": {
                "*param_1": {
                    "1": "register_data_ptr",
                    "3": "register_value"
                },
                "*puVar1": {
                    "1": "register_bits",
                    "3": "register_value"
                },
                "0x11": {
                    "1": "constant_flag",
                    "2": "bit_mask"
                },
                "0x1111": {
                    "1": "flag1"
                },
                "0x444": {
                    "1": "flag2"
                },
                "0xffff7fff": {
                    "1": "mask1"
                },
                "0xfffffffe": {
                    "1": "mask2"
                },
                "DAT_08004f20": {
                    "1": "bit_mask"
                },
                "FUN_080028f0": {
                    "1": "update_register_and_check",
                    "11": "update_register_flags",
                    "2": "update_registers",
                    "9": "update_register"
                },
                "PTR_080028d4": {
                    "1": "update_register"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "pointer",
                    "3": "register_array",
                    "4": "register_data",
                    "7": "registers",
                    "9": "register_ptr"
                },
                "param_1[8]": {
                    "1": "register[8]"
                },
                "param_2": {
                    "1": "register_value",
                    "18": "value",
                    "2": "param",
                    "3": "flag_value",
                    "4": "flag"
                },
                "puVar1": {
                    "1": "registerptr",
                    "10": "register",
                    "2": "pointer_value",
                    "4": "register_pointer",
                    "7": "register_ptr"
                },
                "puVar1[0x11]": {
                    "1": "flag_a",
                    "2": "specific_flag"
                },
                "puVar1[8]": {
                    "1": "register[8]",
                    "2": "register_flags"
                },
                "update_register_080028d4": {
                    "1": "update_register_helper"
                }
            },
            "called": [
                "FUN_080028d4"
            ],
            "calling": [
                "FUN_08003414"
            ],
            "code": "\nundefined4 update_register_flags_080028f0(uint **register_ptr,undefined4 value)\n\n{\n  uint *register;\n  \n  update_register_helper(*register_ptr,value,0);\n  register = *register_ptr;\n  if (((register_flags & 0x1111) == 0) && ((register_flags & 0x444) == 0)) {\n    specific_flag = specific_flag & 0xffff7fff;\n  }\n  register = *register_ptr;\n  if (((register_flags & 0x1111) == 0) && ((register_flags & 0x444) == 0)) {\n    *register = *register & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_register_flags_080028f0",
            "entrypoint": "0x080028f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028f0": "update_register_flags_080028f0",
                "param_1": "register_ptr",
                "param_2": "value",
                "puVar1": "register",
                "puVar1[0x11]": "specific_flag",
                "puVar1[8]": "register_flags",
                "update_register_080028d4": "update_register_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800293c": {
            "called": [],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800293c",
            "entrypoint": "0x0800293c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800293e": {
            "called": [],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800293e",
            "entrypoint": "0x0800293e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002940": {
            "additional_data": {
                "(int)param_1": {
                    "1": "param1_cast"
                },
                "(int)param_1 + 0x3a": {
                    "1": "char_pointer"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "field2",
                    "3": "flag2",
                    "6": "value2"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flags_value1",
                    "3": "flag1",
                    "6": "value1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "bit_mask",
                    "4": "flag"
                },
                "*param_1": {
                    "1": "flag_array",
                    "2": "flags"
                },
                "0x14": {
                    "1": "20",
                    "2": "mask2",
                    "3": "flag2_offset"
                },
                "0x20": {
                    "1": "status_value"
                },
                "0x3a": {
                    "1": "space_value"
                },
                "0xc": {
                    "1": "offset",
                    "2": "mask1",
                    "3": "flag1_offset"
                },
                "0xfffffedf": {
                    "1": "clear_mask_1",
                    "2": "flag1_mask"
                },
                "0xfffffffe": {
                    "1": "flag2_clear_mask",
                    "2": "flag2_mask"
                },
                "FUN_08002940": {
                    "1": "update_memory_values",
                    "13": "clear_flags",
                    "2": "update_flags_and_values"
                },
                "int": {
                    "2": "integer"
                },
                "param_1": {
                    "1": "param",
                    "2": "memory_pointer",
                    "3": "parameters",
                    "4": "input_array",
                    "6": "flags"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined": {
                    "1": "unknown"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ffc"
            ],
            "code": "\nvoid clear_flags_08002940(integer *flags)\n\n{\n  *(unsigned_int *)(*flags + 0xc) = *(unsigned_int *)(*flags + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*flags + 0x14) = *(unsigned_int *)(*flags + 0x14) & 0xfffffffe;\n  *(uninitialized *)((int)clear_flags_08002940_ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "current_name": "clear_flags_08002940",
            "entrypoint": "0x08002940",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "(int)clear_flags_ptr",
                "FUN_08002940": "clear_flags_08002940",
                "int": "integer",
                "param_1": "flags",
                "uint": "unsigned_int",
                "undefined": "uninitialized"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800295c": {
            "additional_data": {
                "(byte *)param_1[8]": {
                    "1": "byte_ptr_2"
                },
                "(int)(pbVar2 + 1)": {
                    "1": "updated_index"
                },
                "(int)param_1 + 0x26": {
                    "1": "offset_plus_0x26"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "modified_value3"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "struct_ptr->field1"
                },
                "*(ushort *)param_1[8]": {
                    "1": "ushort_ptr"
                },
                "*(ushort *)param_1[8] & 0x1ff": {
                    "1": "modified_value2"
                },
                "*data": {
                    "1": "struct_ptr"
                },
                "FUN_0800295c": {
                    "1": "extract_and_update_value",
                    "10": "process_data",
                    "2": "decode_and_modify",
                    "3": "parse_data"
                },
                "data[2]": {
                    "1": "header_value"
                },
                "data[4]": {
                    "1": "offset"
                },
                "param_1": {
                    "1": "decoded_data",
                    "3": "input_array",
                    "4": "input_data",
                    "5": "data_array",
                    "9": "data"
                },
                "param_1[2]": {
                    "1": "value_at_offset_0x8"
                },
                "param_1[4]": {
                    "1": "value_at_offset_0x10"
                },
                "param_1[8]": {
                    "1": "current_index"
                },
                "pbVar2": {
                    "1": "byte_data",
                    "14": "byte_ptr",
                    "2": "data_pointer",
                    "9": "byte_pointer"
                },
                "sVar1": {
                    "1": "remaining_steps",
                    "2": "decremented_value",
                    "3": "counter",
                    "5": "count",
                    "8": "remaining_iterations"
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ffc"
            ],
            "code": "\nundefined4 process_data_0800295c(int *data)\n\n{\n  short remaining_iterations;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (value_at_offset_0x8 == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)offset_ptr & 0x1ff;\n    if (value_at_offset_0x10 == 0) {\n      offset_ptr = offset_ptr + 2;\n    }\n    else {\n      offset_ptr = offset_ptr + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)offset_ptr;\n    offset_ptr = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  remaining_iterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800295c",
            "entrypoint": "0x0800295c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "param_1[2]": "value_at_offset_0x8",
                "param_1[4]": "value_at_offset_0x10",
                "param_1[8]": "offset_ptr",
                "pbVar2": "byte_ptr",
                "sVar1": "remaining_iterations"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080029c8": {
            "additional_data": {
                "FUN_080029c8": {
                    "1": "update_parameters",
                    "2": "update_data",
                    "3": "calculate_shifted_data",
                    "4": "calculate_value",
                    "5": "calculate_shifted_value"
                },
                "get_shifted_data_080025ec": {
                    "1": "get_data1",
                    "2": "get_shifted_data1"
                },
                "get_shifted_data_0800260c": {
                    "1": "get_data2",
                    "2": "get_shifted_data2"
                },
                "iVar1": {
                    "1": "data_1",
                    "15": "shifted_data1",
                    "4": "value1",
                    "5": "shifted_value1"
                },
                "iVar10": {
                    "1": "param_1_5",
                    "2": "data10",
                    "3": "base_address"
                },
                "iVar2": {
                    "1": "shifted_data_2",
                    "15": "shifted_data2",
                    "4": "value2",
                    "5": "shifted_value2"
                },
                "iVar3": {
                    "1": "data_3",
                    "15": "shifted_data3",
                    "4": "value3",
                    "5": "shifted_value3"
                },
                "iVar4": {
                    "1": "shifted_data_4",
                    "15": "shifted_data4",
                    "4": "value4",
                    "5": "data4"
                },
                "iVar5": {
                    "1": "shifted_data_5",
                    "15": "shifted_data5",
                    "4": "value5",
                    "5": "data5"
                },
                "iVar6": {
                    "1": "param_value1",
                    "2": "param1_1",
                    "3": "shifted_data6",
                    "4": "param1_value1",
                    "5": "data6"
                },
                "iVar7": {
                    "1": "data_7",
                    "2": "shifted_value7",
                    "3": "shifted_data7",
                    "4": "value7",
                    "5": "data7"
                },
                "iVar8": {
                    "1": "param_value3",
                    "2": "shifted_value8",
                    "3": "shifted_data8",
                    "4": "param1_value3",
                    "5": "data8"
                },
                "iVar9": {
                    "1": "data5",
                    "2": "shifted_value9",
                    "3": "shifted_data9",
                    "4": "value9",
                    "5": "data9"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "4": "input_array",
                    "9": "parameters"
                }
            },
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "calling": [
                "FUN_08002d72"
            ],
            "code": "\nvoid calculate_shifted_value_080029c8(int *parameters)\n\n{\n  int shifted_data1;\n  int shifted_data2;\n  int shifted_data3;\n  int shifted_data4;\n  int shifted_data5;\n  int data6;\n  int data7;\n  int data8;\n  int data9;\n  int base_address;\n  \n  *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffcfff | parameters[3];\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffff69f3 | parameters[2] | parameters[4] | parameters[5] | parameters[7];\n  *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xfffffcff | parameters[6];\n  if (parameters[7] == 0x8000) {\n    base_address = *parameters;\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      shifted_data1 = get_shifted_data1();\n      data6 = parameters[1];\n      shifted_data2 = get_shifted_data1();\n      data7 = parameters[1];\n      shifted_data3 = get_shifted_data1();\n      data8 = parameters[1];\n      shifted_data4 = get_shifted_data1();\n      data9 = parameters[1];\n      shifted_data5 = get_shifted_data1();\n      *(uint *)(base_address + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(shifted_data4 * 0x19) / (uint)(data9 << 1) +\n                          (int)(((ulonglong)(uint)(shifted_data5 * 0x19) /\n                                (ulonglong)(uint)(parameters[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(shifted_data2 * 0x19) / (uint)(data7 << 1) +\n             (int)(((ulonglong)(uint)(shifted_data3 * 0x19) / (ulonglong)(uint)(data8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(shifted_data1 * 0x19) / (ulonglong)(uint)(data6 << 1)) / 100) * 0x10;\n      return;\n    }\n    shifted_data1 = get_shifted_data2();\n    data6 = parameters[1];\n    shifted_data2 = get_shifted_data2();\n    data7 = parameters[1];\n    shifted_data3 = get_shifted_data2();\n    data8 = parameters[1];\n    shifted_data4 = get_shifted_data2();\n    data9 = parameters[1];\n    shifted_data5 = get_shifted_data2();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shifted_data4 * 0x19) / (uint)(data9 << 1) +\n                        (int)(((ulonglong)(uint)(shifted_data5 * 0x19) / (ulonglong)(uint)(parameters[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(shifted_data2 * 0x19) / (uint)(data7 << 1) +\n           (int)(((ulonglong)(uint)(shifted_data3 * 0x19) / (ulonglong)(uint)(data8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(shifted_data1 * 0x19) / (ulonglong)(uint)(data6 << 1)) / 100) * 0x10;\n    return;\n  }\n  base_address = *parameters;\n  if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n    shifted_data1 = get_shifted_data1();\n    data6 = parameters[1];\n    shifted_data2 = get_shifted_data1();\n    data7 = parameters[1];\n    shifted_data3 = get_shifted_data1();\n    data8 = parameters[1];\n    shifted_data4 = get_shifted_data1();\n    data9 = parameters[1];\n    shifted_data5 = get_shifted_data1();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shifted_data4 * 0x19) / (uint)(data9 << 2) +\n                        (int)(((ulonglong)(uint)(shifted_data5 * 0x19) / (ulonglong)(uint)(parameters[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shifted_data2 * 0x19) / (uint)(data7 << 2) +\n           (int)(((ulonglong)(uint)(shifted_data3 * 0x19) / (ulonglong)(uint)(data8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shifted_data1 * 0x19) / (ulonglong)(uint)(data6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shifted_data1 = get_shifted_data2();\n  data6 = parameters[1];\n  shifted_data2 = get_shifted_data2();\n  data7 = parameters[1];\n  shifted_data3 = get_shifted_data2();\n  data8 = parameters[1];\n  shifted_data4 = get_shifted_data2();\n  data9 = parameters[1];\n  shifted_data5 = get_shifted_data2();\n  *(uint *)(base_address + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(shifted_data4 * 0x19) / (uint)(data9 << 2) +\n                      (int)(((ulonglong)(uint)(shifted_data5 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(shifted_data2 * 0x19) / (uint)(data7 << 2) +\n         (int)(((ulonglong)(uint)(shifted_data3 * 0x19) / (ulonglong)(uint)(data8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(shifted_data1 * 0x19) / (ulonglong)(uint)(data6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "current_name": "calculate_shifted_value_080029c8",
            "entrypoint": "0x080029c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080029c8": "calculate_shifted_value_080029c8",
                "get_shifted_data_080025ec": "get_shifted_data1",
                "get_shifted_data_0800260c": "get_shifted_data2",
                "iVar1": "shifted_data1",
                "iVar10": "base_address",
                "iVar2": "shifted_data2",
                "iVar3": "shifted_data3",
                "iVar4": "shifted_data4",
                "iVar5": "shifted_data5",
                "iVar6": "data6",
                "iVar7": "data7",
                "iVar8": "data8",
                "iVar9": "data9",
                "param_1": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "additional_data": {
                "(*param_1)[3]": {
                    "1": "param_list[3]",
                    "2": "input_array[3]"
                },
                "(*param_1)[5]": {
                    "1": "bit_array_ptr[5]",
                    "2": "input_array[5]"
                },
                "(int)param_1 + 0x39": {
                    "1": "ptr_array_offset39"
                },
                "(int)param_1 + 0x3a": {
                    "1": "pointer_offset2"
                },
                "*param_1": {
                    "1": "array"
                },
                "0": {
                    "1": "zero_condition"
                },
                "0x39": {
                    "1": "offset_1"
                },
                "0x3a": {
                    "1": "offset_2"
                },
                "0xffffffff": {
                    "1": "limit_condition"
                },
                "FUN_08002d0c": {
                    "1": "check_validity",
                    "2": "validate_parameters",
                    "3": "check_and_modify_data",
                    "4": "check_conditions",
                    "5": "check_parameters"
                },
                "_old_(*param_1)[3]": {
                    "1": "data[3]"
                },
                "_old_(*param_1)[5]": {
                    "1": "data[5]"
                },
                "dataPtr[3]": {
                    "1": "third_element"
                },
                "dataPtr[56]": {
                    "1": "0x20"
                },
                "dataPtr[57]": {
                    "1": "0x20"
                },
                "dataPtr[5]": {
                    "1": "fifth_element"
                },
                "data_ptr_ptr": {
                    "1": "data_ptr_ptr"
                },
                "difference": {
                    "1": "difference"
                },
                "flag_1": {
                    "1": "flag_1"
                },
                "flag_2": {
                    "1": "flag_2"
                },
                "get_data_08000e30": {
                    "1": "get_current_data",
                    "2": "get_data_difference",
                    "4": "get_data"
                },
                "iVar1": {
                    "1": "data_offset",
                    "12": "data_difference",
                    "2": "difference",
                    "8": "data_diff"
                },
                "param_1": {
                    "1": "bit_array_ptr",
                    "2": "ptr_array",
                    "3": "param_list",
                    "4": "input_array",
                    "5": "data_ptr"
                },
                "param_1 + 0xe": {
                    "1": "ptr_array_offset_e"
                },
                "param_2": {
                    "1": "bit_mask",
                    "2": "condition_1",
                    "3": "value",
                    "7": "flag"
                },
                "param_3": {
                    "1": "is_data_valid",
                    "2": "value2",
                    "5": "expected_result",
                    "6": "condition"
                },
                "param_4": {
                    "1": "compare_value",
                    "2": "value3",
                    "3": "data_offset",
                    "4": "reference_value"
                },
                "param_5": {
                    "1": "max_diff",
                    "12": "max_difference",
                    "4": "max_offset",
                    "6": "limit"
                },
                "value_1": {
                    "1": "value_1"
                },
                "value_2": {
                    "1": "value_2"
                }
            },
            "called": [
                "FUN_08000e30"
            ],
            "calling": [
                "FUN_08002dd0"
            ],
            "code": "\nundefined4 check_parameters_08002d0c(uint **data_ptr,uint flag,uint condition,int reference_value,uint max_difference)\n\n{\n  int data_difference;\n  \n  do {\n    if (((flag & ~**data_ptr) == 0) != condition) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (data_difference = get_data(), (uint)(data_difference - reference_value) <= max_difference))));\n  (*data_ptr)[3] = (*data_ptr)[3] & 0xfffffe5f;\n  (*data_ptr)[5] = (*data_ptr)[5] & 0xfffffffe;\n  *(undefined *)((int)data_ptr + 0x39) = 0x20;\n  *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n  *(undefined *)(data_ptr + 0xe) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_parameters_08002d0c",
            "entrypoint": "0x08002d0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d0c": "check_parameters_08002d0c",
                "get_data_08000e30": "get_data",
                "iVar1": "data_difference",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "reference_value",
                "param_5": "max_difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d70": {
            "called": [],
            "calling": [
                "FUN_08002d72"
            ],
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d70",
            "entrypoint": "0x08002d70",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d72": {
            "additional_data": {
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "is_empty",
                    "2": "data_flag",
                    "3": "is_flag_set"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "flags_d",
                    "14": "value2",
                    "2": "value_2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "value_at_param114",
                    "14": "value3",
                    "2": "value_3"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flags_c",
                    "14": "value1",
                    "2": "value_1"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "set_to_0x24",
                    "2": "flag_value",
                    "5": "flag"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "middleware_flag3",
                    "2": "flag2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "is_processed",
                    "2": "data_flag",
                    "4": "flag"
                },
                "*(void *)((int)param_1 + 0x3a)": {
                    "1": "temp_variable"
                },
                "*param_1": {
                    "1": "data_structure_pointer"
                },
                "0x0": {
                    "1": "null"
                },
                "0x10": {
                    "1": "value2"
                },
                "0x14": {
                    "1": "value3"
                },
                "0x20": {
                    "1": "flag_value"
                },
                "0x2000": {
                    "1": "constant2"
                },
                "0x24": {
                    "1": "constant1"
                },
                "0x39": {
                    "1": "flag"
                },
                "0x3a": {
                    "1": "variable3"
                },
                "0xc": {
                    "1": "value1"
                },
                "0xe": {
                    "1": "variable1"
                },
                "0xf": {
                    "1": "variable2"
                },
                "0xffffb7ff": {
                    "1": "clear_bit_11",
                    "2": "mask2"
                },
                "0xffffdfff": {
                    "1": "clear_bit_13",
                    "2": "mask1"
                },
                "0xffffffd5": {
                    "1": "clear_bit_28",
                    "2": "mask3"
                },
                "FUNC_08002d70": {
                    "1": "perform_initialization",
                    "2": "some_function",
                    "3": "do_something",
                    "4": "perform_action"
                },
                "FUNC_08002d70()": {
                    "1": "perform_additional_initialization"
                },
                "FUN_08002d72": {
                    "1": "initialize_middleware",
                    "2": "initialize_data_struct",
                    "3": "initialize_param",
                    "7": "initialize_data"
                },
                "calculate_shifted_value_080029c8": {
                    "1": "shift_values",
                    "21": "calculate_shifted_value"
                },
                "calculate_shifted_value_080029c8(param_1)": {
                    "1": "calculate_shifted_value(data)",
                    "3": "calculate_shifted_value"
                },
                "param_1": {
                    "1": "data_struct_ptr",
                    "2": "data_structure_ptr",
                    "4": "param",
                    "5": "data_structure",
                    "6": "data"
                },
                "param_1 + 0x39": {
                    "1": "device.flag1"
                },
                "param_1 + 0xc": {
                    "1": "device.reg1"
                },
                "param_1 + 0xe": {
                    "1": "device.status"
                },
                "param_1[0xe]": {
                    "1": "data_structure.flag"
                },
                "param_1[0xf]": {
                    "1": "device.counter",
                    "2": "flag2",
                    "4": "counter"
                }
            },
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "calling": [
                "FUN_08003978"
            ],
            "code": "\nundefined4 initialize_data_08002d72(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculate_shifted_value;\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_data_08002d72",
            "entrypoint": "0x08002d72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d72": "initialize_data_08002d72",
                "calculate_shifted_value_080029c8": "calculate_shifted_value",
                "calculate_shifted_value_080029c8(param_1)": "calculate_shifted_value",
                "param_1": "data",
                "param_1[0xf]": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "additional_data": {
                "FUN_08002dd0": {
                    "1": "process_function",
                    "28": "process_data"
                },
                "check_parameters_08002d0c": {
                    "3": "check_parameters"
                },
                "get_data_08000e30": {
                    "3": "get_data"
                },
                "iVar1": {
                    "1": "error_code",
                    "2": "error",
                    "22": "result",
                    "5": "check_result"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "data_buffer",
                    "3": "input_array",
                    "8": "data",
                    "9": "data_ptr"
                },
                "param_2": {
                    "1": "input_ptr",
                    "2": "input_data",
                    "3": "data_array"
                },
                "param_3": {
                    "1": "ushort_size",
                    "2": "size",
                    "3": "input_size",
                    "4": "length",
                    "5": "data_length"
                },
                "param_4": {
                    "1": "additional_param",
                    "2": "data_value",
                    "3": "result",
                    "6": "param",
                    "9": "param_4"
                },
                "uVar2": {
                    "2": "result",
                    "20": "return_value",
                    "7": "status"
                }
            },
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "calling": [
                "FUN_08003d18"
            ],
            "code": "\nundefined4 process_data_08002dd0(int *data_ptr,ushort *ushort_ptr,int data_length,undefined4 param_4)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (ushort_ptr == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      return_value = get_data();\n      *(short *)(data_ptr + 9) = (short)data_length;\n      *(short *)((int)data_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_parameters(data_ptr,0x80,0,return_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *ushort_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            ushort_ptr = ushort_ptr + 1;\n          }\n          else {\n            ushort_ptr = (ushort *)((int)ushort_ptr + 1);\n          }\n        }\n        else {\n          result = check_parameters(data_ptr,0x80,0,return_value,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)ushort_ptr;\n          ushort_ptr = (ushort *)((int)ushort_ptr + 1);\n        }\n      }\n      result = check_parameters(data_ptr,0x40,0,return_value,param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08002dd0",
            "entrypoint": "0x08002dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "check_parameters_08002d0c": "check_parameters",
                "get_data_08000e30": "get_data",
                "iVar1": "result",
                "param_1": "data_ptr",
                "param_2": "ushort_ptr",
                "param_3": "data_length",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "&(data[0x26])": {
                    "1": "data_pointer"
                },
                "&(data[0x39])": {
                    "1": "flag"
                },
                "&(data[0xc])": {
                    "1": "pointer"
                },
                "&(data[0xe])": {
                    "1": "flag2"
                },
                "(char *)((int)param_1 + 0x39)": {
                    "1": "param_array_char"
                },
                "(char *)(param_1 + 0xe)": {
                    "1": "param_array_char2"
                },
                "(int)param_1 + 0x26": {
                    "1": "data_value3"
                },
                "(int)param_1 + 0x39": {
                    "1": "char_value"
                },
                "(param_1 + 0xe)": {
                    "1": "param_array_offset3"
                },
                "(short *)((int)param_1 + 0x26)": {
                    "1": "param_array_short2"
                },
                "(short *)(param_1 + 9)": {
                    "1": "param_array_short"
                },
                "(short)param_3": {
                    "1": "value2_short"
                },
                "(undefined *)((int)param_1 + 0x39)": {
                    "1": "param_array_undefined"
                },
                "(undefined *)(param_1 + 0xe)": {
                    "1": "param_array_undefined2"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "character"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_var1",
                    "2": "char_value",
                    "3": "flag"
                },
                "*(char *)(data + 0xe)": {
                    "1": "flag"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag_value",
                    "2": "flag_check",
                    "4": "flag"
                },
                "*(short *)((int)data + 0x26)": {
                    "1": "data[38]"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "data_array[0x26]",
                    "2": "result3"
                },
                "*(short *)(data + 9)": {
                    "1": "data[9]"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "data_short_at_offset_9",
                    "2": "data[9]"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "data_ptr[12]"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_uint_at_deref_add_c",
                    "2": "pointer_value"
                },
                "*(uint *)(*param_1 + 0xc) | 0x80": {
                    "1": "new_u_int_value"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "data[57]"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "updated_flag"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "data[14]"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_after",
                    "2": "undefined_ptr"
                },
                "*data": {
                    "1": "ptr"
                },
                "*data + 0xc": {
                    "1": "ptr_value"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "*param_1 + 0xc": {
                    "1": "pointer_value2"
                },
                "0x21": {
                    "1": "new_value"
                },
                "FUN_08002eb2": {
                    "1": "update_info",
                    "3": "validate_input",
                    "5": "process_data",
                    "9": "update_data"
                },
                "char_1": {
                    "1": "character"
                },
                "data": {
                    "1": "data"
                },
                "data + 0x26": {
                    "1": "result4"
                },
                "data + 0x39": {
                    "1": "flag2"
                },
                "data + 9": {
                    "1": "result2"
                },
                "data[0xf]": {
                    "1": "result3"
                },
                "data[8]": {
                    "1": "result1"
                },
                "param_1": {
                    "1": "info",
                    "16": "data",
                    "7": "input_array"
                },
                "param_1 + 0xe": {
                    "1": "param_array_offset2"
                },
                "param_1 + 9": {
                    "1": "data_value2"
                },
                "param_1[0xe]": {
                    "1": "data[14]"
                },
                "param_1[0xf]": {
                    "1": "output_4",
                    "2": "result4",
                    "3": "input_array[0xf]"
                },
                "param_1[8]": {
                    "1": "data_entry1",
                    "2": "result1",
                    "3": "input_array[8]",
                    "4": "data[8]"
                },
                "param_1[9]": {
                    "1": "data[9]"
                },
                "param_2": {
                    "1": "size_of_param2",
                    "23": "value1",
                    "4": "value_1"
                },
                "param_2 == 0": {
                    "1": "is_value1_zero"
                },
                "param_3": {
                    "1": "size_of_param3",
                    "23": "value2",
                    "4": "value_2"
                },
                "param_3 == 0": {
                    "1": "is_value2_zero"
                },
                "short_1": {
                    "1": "short_value"
                },
                "undefined1": {
                    "1": "undefined_value"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "code": "\nundefined4 update_data_08002eb2(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[8] = value1;\n    *(short *)(data + 9) = value2_short;\n    *(short *)((int)data + 0x26) = value2_short;\n    data[15] = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "update_data_08002eb2",
            "entrypoint": "0x08002eb2",
            "imported": false,
            "improved": true,
            "renaming": {
                "(short)param_3": "value2_short",
                "FUN_08002eb2": "update_data_08002eb2",
                "param_1": "data",
                "param_1[0xf]": "data[15]",
                "param_1[8]": "data[8]",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002efa": {
            "additional_data": {
                "' '": {
                    "1": "space"
                },
                "'\\x01'": {
                    "1": "char_one"
                },
                "(char *)((int)param_1 + 0x3a)": {
                    "1": "data_check"
                },
                "(int)": {
                    "1": "(int)"
                },
                "(int)param_1 + 0x2e": {
                    "1": "data_value2_offset"
                },
                "(int)param_1 + 0x3a": {
                    "1": "data_offset"
                },
                "(short *)(param_1 + 0xb)": {
                    "1": "data_value2"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "char_at_index_58",
                    "2": "char_at_index40",
                    "3": "character"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "flag_char",
                    "2": "char_at_index14",
                    "6": "flag"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_at_0x2e",
                    "2": "short_at_index46",
                    "3": "short_value2"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "data_element11",
                    "2": "short_at_index11",
                    "3": "data_value2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uint_at_address_in_input_array_plus_20",
                    "2": "uint_at_pointer18"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_pointer2",
                    "2": "uint_at_pointer12"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "data_ptr[58]",
                    "2": "updated_character"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "data[14]",
                    "2": "updated_flag"
                },
                "*param_1": {
                    "1": "input_array[0]"
                },
                "0": {
                    "1": "success"
                },
                "0x22": {
                    "1": "double_quote"
                },
                "0x2e": {
                    "1": "short_value"
                },
                "0x3a": {
                    "1": "index58"
                },
                "0xb": {
                    "1": "index2"
                },
                "0xe": {
                    "1": "byte_value"
                },
                "0xf": {
                    "1": "index3"
                },
                "1": {
                    "1": "zero_value"
                },
                "10": {
                    "1": "index1"
                },
                "2": {
                    "1": "invalid_value"
                },
                "<int>param_1 + 0x3a": {
                    "1": "input_array[58]"
                },
                "FUN_08002efa": {
                    "1": "update_parameters",
                    "2": "validate_parameters",
                    "5": "initialize_data",
                    "7": "validate_input",
                    "8": "update_data"
                },
                "char *param_1 + 0x3a": {
                    "1": "data_ptr[0x3a]"
                },
                "char *param_1 + 0xe": {
                    "1": "data_ptr[0xe]"
                },
                "dataPtr + 0x14": {
                    "1": "data_ptr[0x14]"
                },
                "dataPtr + 0xc": {
                    "1": "data_ptr[0xc]"
                },
                "int *param_1": {
                    "1": "data_ptr"
                },
                "param_1": {
                    "1": "settings",
                    "2": "input_data",
                    "3": "data_pointer",
                    "9": "input_array"
                },
                "param_1 + 0x2e": {
                    "1": "input_array[46]"
                },
                "param_1 + 0x3a": {
                    "1": "input_array[58]"
                },
                "param_1 + 0xb": {
                    "1": "input_array[11]"
                },
                "param_1 + 0xe": {
                    "1": "pointer_value"
                },
                "param_1[0xf]": {
                    "1": "data_index_0xf",
                    "2": "data_value4",
                    "3": "input_array[15]",
                    "4": "input_array[0xf]"
                },
                "param_1[10]": {
                    "1": "data[10]",
                    "5": "data_value1",
                    "6": "input_array[10]"
                },
                "param_2": {
                    "1": "length",
                    "22": "value1",
                    "6": "value_1"
                },
                "param_2 == 0": {
                    "1": "is_value1_zero"
                },
                "param_3": {
                    "1": "val_2",
                    "22": "value2",
                    "6": "value_2"
                },
                "param_3 == 0": {
                    "1": "is_value2_zero"
                },
                "parameters": {
                    "1": "parameters"
                },
                "short *param_1 + 0x2e": {
                    "1": "data_ptr[0x2e]"
                },
                "short *param_1 + 0xb": {
                    "1": "data_ptr[0xb]"
                },
                "undefined": {
                    "1": "undefined"
                },
                "value1": {
                    "1": "value1"
                },
                "value2": {
                    "1": "value2"
                },
                "x": {
                    "1": "value3"
                },
                "y": {
                    "1": "value4"
                },
                "|": {
                    "1": "bitwise_or"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "code": "\nundefined4 update_data_08002efa(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0value33a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0value3e) != '\\value301') {\n    input_array[10] = value1;\n    *(short *)(data + 0value3b) = (short)value2;\n    *(short *)((int)data + 0value32e) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)data + 0value33a) = 0value322;\n    *(undefined *)(data + 0value3e) = 0;\n    *(uint *)(*data + 0value314) = *(uint *)(*data + 0value314) | 1;\n    *(uint *)(*data + 0value3c) = *(uint *)(*data + 0value3c) | 0value3120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "current_name": "update_data_08002efa",
            "entrypoint": "0x08002efa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002efa": "update_data_08002efa",
                "param_1": "data",
                "param_1[0xf]": "input_array[0xf]",
                "param_1[10]": "input_array[10]",
                "param_2": "value1",
                "param_3": "value2",
                "x": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "additional_data": {
                "(int)param_1": {
                    "1": "data_pointer_offset"
                },
                "(int)param_1 + 0x39": {
                    "1": "flag_offset"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_to_update",
                    "2": "flag_value",
                    "4": "data_value"
                },
                "*(uint *)(*param_1 + 0xc) & 0xffffffbf": {
                    "1": "updated_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "new_byte_value",
                    "3": "flag_value",
                    "4": "flag"
                },
                "*param_1": {
                    "1": "parameter_value"
                },
                "*param_1 + 0xc": {
                    "1": "data_offset"
                },
                "0x20": {
                    "1": "new_value"
                },
                "0x39": {
                    "1": "constant"
                },
                "0xc": {
                    "1": "offset"
                },
                "0xffffffbf": {
                    "1": "flag_mask"
                },
                "C": {
                    "1": "flag_offset"
                },
                "FUN_08002f4c": {
                    "1": "update_flags",
                    "16": "update_data",
                    "2": "update_and_clear_flags"
                },
                "int": {
                    "1": "int",
                    "2": "integer"
                },
                "param_1": {
                    "1": "data_config",
                    "14": "data_ptr",
                    "4": "data_pointer"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "update_data_08003f48": {
                    "1": "update_additional_data",
                    "10": "update_data",
                    "2": "update_data_helper"
                }
            },
            "called": [
                "FUN_08003f48"
            ],
            "calling": [
                "FUN_08002ffc"
            ],
            "code": "\nundefined4 update_data_08002f4c(integer *data_ptr)\n\n{\n  *(unsigned_int *)(*data_ptr + 0xc) = *(unsigned_int *)(*data_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)(data_pointer_offset + 0x39) = 0x20;\n  update_data_08002f4c();\n  return 0;\n}\n\n",
            "current_name": "update_data_08002f4c",
            "entrypoint": "0x08002f4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "(int)param_1": "data_pointer_offset",
                "FUN_08002f4c": "update_data_08002f4c",
                "int": "integer",
                "param_1": "data_ptr",
                "uint": "unsigned_int",
                "update_data_08003f48": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f66": {
            "additional_data": {
                "(byte)*(undefined4 *)(*param_1 + 4)": {
                    "1": "byte_value_from_param1_plus4"
                },
                "(byte)*(undefined4 *)(*param_1 + 4) & 0x7f": {
                    "1": "masked_byte_value"
                },
                "(char)*(undefined4 *)(*param_1 + 4)": {
                    "1": "char_value_from_param1_plus4"
                },
                "(int)(puVar3 + 1)": {
                    "1": "array_index_incremented"
                },
                "(int)param_1 + 0x2e": {
                    "1": "address_value"
                },
                "(ushort)((uint)(*(int *)(*param_1 + 4) << 0x17) >> 0x17)": {
                    "1": "ushort_value_calculated"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "array_char"
                },
                "*(int *)(*param_1 + 4)": {
                    "1": "int_value_from_param1_plus4"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_value"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uint_value_from_param1_plus14"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uint_value_from_param1_plus_c"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "undefined_value"
                },
                "*(undefined4 *)(*param_1 + 4)": {
                    "1": "undefined4_value"
                },
                "*(ushort *)param_1[10]": {
                    "1": "ushort_value"
                },
                "*puVar3": {
                    "1": "char_value"
                },
                "FUN_08002f66": {
                    "1": "parse_and_execute_command",
                    "10": "process_data",
                    "2": "process_binary_data",
                    "3": "process_string",
                    "5": "parse_string"
                },
                "execute_function_08003f24": {
                    "1": "execute_cleanup"
                },
                "param_1": {
                    "1": "command_params",
                    "11": "data",
                    "2": "input_data",
                    "3": "parameter",
                    "4": "input"
                },
                "param_1[10]": {
                    "1": "array_index10"
                },
                "param_1[2]": {
                    "1": "array_index2"
                },
                "param_1[4]": {
                    "1": "array_index4"
                },
                "pbVar1": {
                    "1": "dest_byte",
                    "11": "byte_pointer",
                    "12": "byte_ptr",
                    "4": "output_byte"
                },
                "puVar3": {
                    "1": "dest",
                    "10": "undefined_ptr",
                    "2": "byte_ptr2"
                },
                "sVar2": {
                    "1": "iteration_count",
                    "11": "counter",
                    "2": "remaining_count",
                    "3": "short_var",
                    "6": "count"
                }
            },
            "called": [
                "FUN_08003f24"
            ],
            "calling": [
                "FUN_08002ffc"
            ],
            "code": "\nundefined4 process_data_08002f66(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (array_index2 == 0x1000) {\n    if (array_index4 == 0) {\n      *(ushort *)array_index10 = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      array_index10 = array_index10 + 2;\n    }\n    else {\n      *(ushort *)array_index10 = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      array_index10 = array_index10 + 1;\n    }\n  }\n  else if (array_index4 == 0) {\n    undefined_ptr = (undefined *)array_index10;\n    array_index10 = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)array_index10;\n    array_index10 = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_additional_function();\n  return 0;\n}\n\n",
            "current_name": "process_data_08002f66",
            "entrypoint": "0x08002f66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "execute_function_08003f24": "execute_additional_function",
                "param_1": "data",
                "param_1[10]": "array_index10",
                "param_1[2]": "array_index2",
                "param_1[4]": "array_index4",
                "pbVar1": "byte_ptr",
                "puVar3": "undefined_ptr",
                "sVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "additional_data": {
                "FID_08003f94": {
                    "1": "cleanup"
                },
                "FUNC_08003f94": {
                    "1": "function_1",
                    "4": "cleanup"
                },
                "FUNC_08003f94(param_1)": {
                    "1": "perform_cleanup"
                },
                "FUN_08002ffc": {
                    "1": "process_data_and_update_flags",
                    "23": "process_data",
                    "3": "process_input",
                    "4": "process_flags"
                },
                "LAB_0800311c_1": {
                    "1": "label1",
                    "3": "label"
                },
                "clear_flags_08002940": {
                    "10": "clear_flags"
                },
                "func_08000f8c": {
                    "1": "update_param_08000f8c"
                },
                "iVar1": {
                    "21": "result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "param",
                    "14": "data",
                    "2": "input_data",
                    "4": "data_ptr"
                },
                "param_1[0xd]": {
                    "1": "data_array"
                },
                "param_1[0xd][0x14]": {
                    "1": "data_array[0x14]"
                },
                "param_1[0xf]": {
                    "1": "flag_ptr"
                },
                "process_data_0800295c": {
                    "1": "process_data_case_2",
                    "3": "process_data_2",
                    "4": "process_data_case2"
                },
                "process_data_08002f66": {
                    "1": "process_data_case_1",
                    "2": "process_data_3",
                    "4": "process_data_case1"
                },
                "puVar3": {
                    "1": "ptr_data_ptr",
                    "10": "ptr",
                    "2": "ptr_data",
                    "4": "data_ptr",
                    "7": "pointer"
                },
                "uVar2": {
                    "1": "flag_value",
                    "2": "flags",
                    "3": "flag2",
                    "4": "value_2",
                    "6": "value2"
                },
                "uVar4": {
                    "1": "data_flag",
                    "2": "flag2",
                    "3": "value_4",
                    "8": "flag"
                },
                "uVar5": {
                    "1": "value_2",
                    "2": "var5",
                    "3": "value_5",
                    "4": "value1"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "update_data_08002f4c": {
                    "1": "update_condition",
                    "9": "update_data"
                },
                "update_param_08000f8c": {
                    "1": "update_parameter",
                    "8": "update_param"
                }
            },
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "calling": [],
            "code": "\nvoid process_data_08002ffc(unsigned_int **data)\n\n{\n  int result;\n  unsigned_int value2;\n  unsigned_int *ptr;\n  unsigned_int flag;\n  unsigned_int value1;\n  \n  ptr = *data;\n  value1 = *ptr;\n  value2 = ptr[3];\n  if ((((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    process_data_08002ffc_case1(data);\n    return;\n  }\n  if (((value1 & 0xf) == 0) || ((flag = ptr[5] & 1, flag == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      process_data_08002ffc_case2(data);\n      return;\n    }\n    if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      update_data(data);\n    }\n  }\n  else {\n    if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      flag_ptr = (unsigned_int *)((unsigned_int)flag_ptr | 1);\n    }\n    if (((value1 & 4) != 0) && (flag != 0)) {\n      flag_ptr = (unsigned_int *)((unsigned_int)flag_ptr | 2);\n    }\n    if (((value1 & 2) != 0) && (flag != 0)) {\n      flag_ptr = (unsigned_int *)((unsigned_int)flag_ptr | 4);\n    }\n    if (((value1 & 8) != 0) && (flag != 0)) {\n      flag_ptr = (unsigned_int *)((unsigned_int)flag_ptr | 8);\n    }\n    if (flag_ptr != (unsigned_int *)0x0) {\n      if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        process_data_08002ffc_case1(data);\n      }\n      if ((((unsigned_int)flag_ptr & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08003f94(data);\n        flag_ptr = (unsigned_int *)0x0;\n        return;\n      }\n      clear_flags(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (param_ptr == (unsigned_int *)0x0) {\n        FUNC_08003f94(data);\n        return;\n      }\n      data_array[0x14] = (unsigned_int)&label;\n      result = update_param(param_ptr);\n      if (result != 0) {\n        (*(code *)data_array[0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08002ffc",
            "entrypoint": "0x08002ffc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "LAB_0800311c_1": "label",
                "clear_flags_08002940": "clear_flags",
                "iVar1": "result",
                "param_1": "data",
                "param_1[0xd]": "param_ptr",
                "param_1[0xd][0x14]": "data_array[0x14]",
                "param_1[0xf]": "flag_ptr",
                "process_data_0800295c": "process_data_case2",
                "process_data_08002f66": "process_data_case1",
                "puVar3": "ptr",
                "uVar2": "value2",
                "uVar4": "flag",
                "uVar5": "value1",
                "uint": "unsigned_int",
                "update_data_08002f4c": "update_data",
                "update_param_08000f8c": "update_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800312c": {
            "additional_data": {
                "*": {
                    "1": "(pointer)"
                },
                "* (byte *)(param_1 + 0x39)": {
                    "1": "byte_from_offset39"
                },
                "* (byte *)(param_1 + 0x3a)": {
                    "1": "byte_from_offset3a"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "1": "flag2",
                    "11": "byte2",
                    "2": "value2",
                    "3": "second_byte"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "byte_value1",
                    "11": "byte1",
                    "2": "value1",
                    "3": "first_byte"
                },
                "0x39": {
                    "2": "offset2"
                },
                "0x3a": {
                    "2": "offset1"
                },
                "FUN_0800312c": {
                    "1": "combine_flags",
                    "29": "combine_bytes"
                },
                "PTR_0039": {
                    "1": "byte_ptr2"
                },
                "PTR_003a": {
                    "1": "byte_ptr1"
                },
                "byte": {
                    "1": "result"
                },
                "param_1": {
                    "1": "value",
                    "14": "input",
                    "3": "offset",
                    "7": "address"
                },
                "param_1 + 0x39": {
                    "1": "byte2_address"
                },
                "param_1 + 0x3a": {
                    "1": "byte1_address"
                },
                "x": {
                    "1": "byte1"
                },
                "y": {
                    "1": "byte2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "code": "\nresult combine_bytes_0800312c(int input)\n\n{\n  return *(result *)(input + 0byte13a) | *(result *)(input + 0byte139);\n}\n\n",
            "current_name": "combine_bytes_0800312c",
            "entrypoint": "0x0800312c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "byte": "result",
                "param_1": "input",
                "x": "byte1",
                "y": "byte2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003138": {
            "additional_data": {
                "(param_1 & 0xf)": {
                    "2": "bit_position"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_input2"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "memory_value",
                    "2": "target_address"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4) >> (param_1 & 0xf) & 1": {
                    "1": "bit_value",
                    "2": "extracted_bit"
                },
                "*(uint *)(param_2 + shiftedInput2 * 4)": {
                    "1": "extracted_value"
                },
                "1": {
                    "1": "bit_value"
                },
                "DAT_5678": {
                    "1": "bit_mask"
                },
                "FUN_08003138": {
                    "1": "extract_bit_from_param",
                    "2": "bitwise_extraction",
                    "3": "extract_bit",
                    "4": "extract_bit_from_uint",
                    "9": "get_bit_value"
                },
                "PTR_1234": {
                    "1": "array_ptr"
                },
                "extractedValue >> bitMask": {
                    "1": "shifted_value"
                },
                "param_1": {
                    "1": "address_value",
                    "2": "input",
                    "4": "data",
                    "7": "value",
                    "8": "index"
                },
                "param_1 & 0xf": {
                    "1": "bit_position",
                    "4": "bit_offset",
                    "5": "bit_mask"
                },
                "param_1 << 0x18": {
                    "1": "shifted_input"
                },
                "param_2": {
                    "1": "base_pointer",
                    "2": "array_base",
                    "4": "array_address",
                    "6": "base_address"
                },
                "param_3": {
                    "1": "bit_shift",
                    "3": "bit_offset"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "param_5": {
                    "1": "bit_shift"
                },
                "param_6": {
                    "2": "bit_value"
                },
                "shiftedValue & 1": {
                    "1": "bit_value"
                },
                "uint": {
                    "1": "uint32_t"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "code": "\nuint32_t get_bit_value_08003138(uint32_t index,int base_address)\n\n{\n  return *(uint32_t *)(base_address + ((index << 0x18) >> 0x1c) * 4) >> (index & 0xf) & 1;\n}\n\n",
            "current_name": "get_bit_value_08003138",
            "entrypoint": "0x08003138",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "index",
                "param_2": "base_address",
                "uint": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800314e": {
            "additional_data": {
                "(param_1 & 0xf)": {
                    "1": "bit_offset"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "element_to_modify"
                },
                "1 << (param_1 & 0xf)": {
                    "1": "bit_mask"
                },
                "FUN_0800314e": {
                    "1": "set_bit_flag",
                    "12": "set_bit_in_array",
                    "2": "update_data",
                    "4": "update_bit_value"
                },
                "param_1": {
                    "1": "array_index",
                    "11": "bit_position",
                    "2": "input",
                    "3": "value",
                    "5": "input_value",
                    "6": "bit_index"
                },
                "param_2": {
                    "1": "array_start",
                    "2": "array_pointer",
                    "3": "data",
                    "7": "array",
                    "9": "array_address"
                },
                "uVar1": {
                    "1": "array_index",
                    "2": "bit_index",
                    "3": "byte_index",
                    "5": "index",
                    "6": "shifted_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nvoid set_bit_in_array_0800314e(uint bit_position,int array_address)\n\n{\n  uint shifted_index;\n  \n  shifted_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + shifted_index * 4) = *(uint *)(array_address + shifted_index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_0800314e",
            "entrypoint": "0x0800314e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "shifted_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800316c": {
            "additional_data": {
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "data"
                },
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": {
                    "1": "updated_value"
                },
                "FUN_0800316c": {
                    "1": "update_value_at_offset",
                    "14": "update_bit",
                    "2": "update_bit_in_array",
                    "5": "update_bit_value"
                },
                "param_1": {
                    "1": "input",
                    "15": "bit_position",
                    "2": "position",
                    "5": "value",
                    "8": "bit_index"
                },
                "param_1 & 0xf": {
                    "1": "bit_offset"
                },
                "param_2": {
                    "1": "array_offset",
                    "11": "array",
                    "14": "array_address"
                },
                "uVar1": {
                    "1": "shifted_pos",
                    "2": "byte_index",
                    "3": "array_index",
                    "8": "index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nvoid update_bit_0800316c(uint bit_position,int array_address)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + index * 4) = *(uint *)(array_address + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "current_name": "update_bit_0800316c",
            "entrypoint": "0x0800316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800318c": {
            "additional_data": {
                "0": {
                    "1": "value_0",
                    "2": "base_address",
                    "4": "0x40020000"
                },
                "0x40020000": {
                    "1": "base_address"
                },
                "0x40020400": {
                    "1": "0x40020400"
                },
                "0x40020800": {
                    "1": "value2"
                },
                "0x40020c00": {
                    "1": "0x40020c00"
                },
                "0x40021000": {
                    "1": "0x40021000"
                },
                "0x40021400": {
                    "1": "value5"
                },
                "0x40021800": {
                    "1": "0x40021800"
                },
                "0x40021c00": {
                    "1": "value7"
                },
                "0x40022000": {
                    "1": "0x40022000"
                },
                "0x40022400": {
                    "1": "value9"
                },
                "0x40022800": {
                    "1": "value10"
                },
                "1": {
                    "1": "address_one",
                    "2": "memory_address_1",
                    "5": "0x40020400"
                },
                "10": {
                    "1": "address_10",
                    "2": "address10",
                    "5": "0x40022800"
                },
                "2": {
                    "1": "address_two",
                    "2": "address2",
                    "5": "0x40020800"
                },
                "3": {
                    "1": "value_3",
                    "2": "memory_address_3",
                    "5": "0x40020c00"
                },
                "4": {
                    "1": "address_offset_4",
                    "2": "address4",
                    "5": "0x40021000"
                },
                "5": {
                    "1": "address_5",
                    "2": "memory_address_5",
                    "5": "0x40021400"
                },
                "6": {
                    "1": "offset_6",
                    "2": "address6",
                    "5": "0x40021800"
                },
                "7": {
                    "1": "value_7",
                    "2": "address7",
                    "5": "0x40021c00"
                },
                "8": {
                    "1": "address_offset_8",
                    "2": "memory_address_8",
                    "5": "0x40022000"
                },
                "9": {
                    "1": "address_nine",
                    "2": "address9",
                    "5": "0x40022400"
                },
                "FUN_0800318c": {
                    "1": "map_value_to_address",
                    "2": "map_param_to_address",
                    "23": "get_memory_address"
                },
                "case 0": {
                    "1": "0"
                },
                "case 1": {
                    "1": "0x40020400"
                },
                "case 10": {
                    "1": "0x40022800"
                },
                "case 2": {
                    "1": "0x40020800"
                },
                "case 3": {
                    "1": "0x40020c00"
                },
                "case 4": {
                    "1": "0x40021000"
                },
                "case 5": {
                    "1": "0x40021400"
                },
                "case 6": {
                    "1": "0x40021800"
                },
                "case 7": {
                    "1": "0x40021c00"
                },
                "case 8": {
                    "1": "0x40022000"
                },
                "case 9": {
                    "1": "0x40022400"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "param",
                    "4": "input_value",
                    "8": "input",
                    "9": "index"
                },
                "return": {
                    "1": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_080041bc"
            ],
            "code": "\nundefined4 get_memory_address_0800318c(undefined4 index)\n\n{\n  switch(index) {\n  case 0:\n    address 0x40020000;\n  case 1:\n    address 0x40020400;\n  case 2:\n    address 0x40020800;\n  case 3:\n    address 0x40020c00;\n  case 4:\n    address 0x40021000;\n  case 5:\n    address 0x40021400;\n  case 6:\n    address 0x40021800;\n  case 7:\n    address 0x40021c00;\n  case 8:\n    address 0x40022000;\n  case 9:\n    address 0x40022400;\n  case 10:\n    address 0x40022800;\n  default:\n    address 0;\n  }\n}\n\n",
            "current_name": "get_memory_address_0800318c",
            "entrypoint": "0x0800318c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "index",
                "return": "address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080031fc": {
            "additional_data": {
                "FUN_080031fc": {
                    "1": "set_memory_address_flag",
                    "2": "set_flag_and_return_value",
                    "4": "set_memory_address"
                },
                "_DAT_40023830": {
                    "1": "flag_value",
                    "2": "memory_address"
                },
                "param_1": {
                    "1": "param",
                    "2": "address_index",
                    "3": "memory_index",
                    "4": "flag_index",
                    "6": "flag"
                },
                "uVar1": {
                    "1": "result",
                    "2": "new_value",
                    "3": "new_address",
                    "5": "base_address",
                    "7": "address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "code": "\n\n\nundefined4 set_memory_address_080031fc(undefined4 flag)\n\n{\n  undefined4 address;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    address = 0x40022800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "current_name": "set_memory_address_080031fc",
            "entrypoint": "0x080031fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080031fc": "set_memory_address_080031fc",
                "param_1": "flag",
                "uVar1": "address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003380": {
            "additional_data": {
                "FUN_08003380": {
                    "1": "check_flag_value",
                    "11": "check_value",
                    "2": "verify_value",
                    "4": "check_value_index",
                    "6": "check_value_and_return"
                },
                "iVar1": {
                    "1": "index_offset",
                    "2": "index_result",
                    "20": "value_index",
                    "6": "index"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_value",
                    "26": "value"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "array",
                    "9": "index"
                },
                "param_3": {
                    "1": "data_1",
                    "2": "value_3",
                    "8": "index"
                },
                "param_4": {
                    "1": "max_limit",
                    "2": "array_end",
                    "4": "size",
                    "5": "param_4",
                    "6": "param"
                }
            },
            "called": [
                "FUN_0800354a"
            ],
            "calling": [
                "FUN_080033d8"
            ],
            "code": "\nundefined4 check_value_08003380(undefined4 value,undefined4 index,undefined4 index,undefined4 param)\n\n{\n  int value_index;\n  \n  value_index = get_value_index_0800354a(value,&DAT_08005a18,index,param,param);\n  if ((uint)(value_index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "current_name": "check_value_08003380",
            "entrypoint": "0x08003380",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "iVar1": "value_index",
                "param_1": "value",
                "param_2": "index",
                "param_3": "index",
                "param_4": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800339c": {
            "additional_data": {
                "2": {
                    "1": "value_z"
                },
                "3": {
                    "1": "value_x"
                },
                "4": {
                    "1": "value_y"
                },
                "FUN_0800339c": {
                    "1": "get_modified_value",
                    "2": "decode_value",
                    "4": "get_shifted_value"
                },
                "iVar1": {
                    "1": "result",
                    "10": "index",
                    "19": "value_index"
                },
                "param_1": {
                    "1": "value_1",
                    "11": "value",
                    "2": "input_param_1",
                    "3": "input_1",
                    "4": "value1",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "ignored_param",
                    "2": "input_2",
                    "3": "value2",
                    "5": "index"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "input_3",
                    "3": "value3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "parameter_b",
                    "2": "size",
                    "3": "value4",
                    "6": "param_4"
                },
                "uVar2": {
                    "1": "result_shifted",
                    "2": "shifted_index",
                    "25": "shifted_value"
                }
            },
            "called": [
                "FUN_0800354a"
            ],
            "calling": [
                "FUN_08003414"
            ],
            "code": "\nundefined4 get_value_index_0800339c(undefined4 value,undefined4 index,undefined4 param_3,undefined4 param_4)\n\n{\n  int value_index;\n  uint shifted_value;\n  \n  value_index = get_value_index_0800339c_0800354a(value,&DAT_08005a3c,param_3,param_4,param_4);\n  shifted_value = (uint)(value_index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "current_name": "get_value_index_0800339c",
            "entrypoint": "0x0800339c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800339c": "get_value_index_0800339c",
                "iVar1": "value_index",
                "param_1": "value",
                "param_2": "index",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033c8": {
            "additional_data": {
                "DAT_40023840": {
                    "1": "memory_flag"
                },
                "FUN_080033c8": {
                    "1": "clear_top_bit_of_global_variable",
                    "2": "clear_flags",
                    "3": "clear_bit_in_register",
                    "4": "clear_bit_in_memory",
                    "5": "clear_memory_flag"
                },
                "_DAT_40023840": {
                    "1": "flag_value",
                    "2": "flags",
                    "3": "register_value",
                    "4": "memory_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000f56"
            ],
            "code": "\n\n\nvoid clear_memory_flag_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "current_name": "clear_memory_flag_080033c8",
            "entrypoint": "0x080033c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033c8": "clear_memory_flag_080033c8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080033d8": {
            "additional_data": {
                "FUN_080033d8": {
                    "1": "initialize_memory_if_value_valid",
                    "16": "process_data",
                    "2": "initialize_and_clear_memory"
                },
                "check_value_08003380": {
                    "9": "check_value"
                },
                "clear_bit_and_set_flag_08000f72": {
                    "9": "clear_bit_and_set_flag"
                },
                "find_value_or_zero_080034f4": {
                    "9": "find_value_or_zero"
                },
                "iVar1": {
                    "1": "value_check",
                    "3": "check_result"
                },
                "initialize_memory_08000f56": {
                    "9": "initialize_memory"
                },
                "local_1c": {
                    "1": "memory_array",
                    "2": "result_array",
                    "4": "values_array",
                    "5": "found_values",
                    "6": "value_array",
                    "9": "values"
                },
                "param_1": {
                    "1": "input_parameter",
                    "11": "input_data",
                    "2": "value",
                    "3": "input_param",
                    "8": "input_value"
                }
            },
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nvoid process_data_080033d8(undefined4 input_data)\n\n{\n  int check_result;\n  int values [5];\n  \n  values[0] = find_value_or_zero(input_data,&DAT_08005a18);\n  if ((values[0] != 0) && ((check_result = check_value(input_data), check_result == 0 || (check_result == 0x10)))) {\n    clear_bit_and_set_flag(values,check_result);\n    initialize_memory(values);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080033d8",
            "entrypoint": "0x080033d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "check_value_08003380": "check_value",
                "clear_bit_and_set_flag_08000f72": "clear_bit_and_set_flag",
                "find_value_or_zero_080034f4": "find_value_or_zero",
                "iVar1": "check_result",
                "initialize_memory_08000f56": "initialize_memory",
                "local_1c": "values",
                "param_1": "input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800340c": {
            "additional_data": {
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_XXXXXX": {
                    "1": "dat_xxxxxx"
                },
                "FUN_0800340c": {
                    "26": "update_flags",
                    "5": "update_flags_based_on_param"
                },
                "PTR_XXXXXX": {
                    "1": "ptr_xxxxxx"
                },
                "return": {
                    "1": ""
                },
                "update_flags_based_on_param_080035fc": {
                    "1": "update_flags",
                    "14": "update_flags_based_on_parameter",
                    "9": "update_flags_based_on_param"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_080035fc"
            ],
            "calling": [
                "FUN_0800268e"
            ],
            "code": "\nvoid update_flags_0800340c(void)\n\n{\n  update_flags_0800340c_based_on_parameter();\n  return;\n}\n\n",
            "current_name": "update_flags_0800340c",
            "entrypoint": "0x0800340c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800340c": "update_flags_0800340c",
                "update_flags_based_on_param_080035fc": "update_flags_based_on_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003414": {
            "additional_data": {
                "DAT_08005a3c": {
                    "1": "constant_data"
                },
                "FUN_08003414": {
                    "1": "update_and_check_bits",
                    "2": "update_flags_based_on_value",
                    "3": "process_value",
                    "5": "process_values"
                },
                "find_value_or_zero_080034f4": {
                    "14": "find_value_or_zero"
                },
                "get_value_index_0800339c": {
                    "1": "get_index",
                    "13": "get_value_index"
                },
                "get_value_index_0800354a": {
                    "1": "get_value_index2",
                    "2": "get_value_index_with_mask",
                    "3": "get_value_index_with_flags"
                },
                "iVar1": {
                    "1": "index_value",
                    "12": "value_index"
                },
                "local_4c": {
                    "1": "flag_values",
                    "6": "values",
                    "8": "values_array",
                    "9": "value_array"
                },
                "param_1": {
                    "1": "data",
                    "12": "input_value",
                    "2": "parameter",
                    "3": "input_data",
                    "4": "value",
                    "5": "input_param"
                },
                "uVar2": {
                    "1": "flag_value",
                    "2": "value_flags"
                },
                "update_and_check_bits_08002864": {
                    "1": "update_and_validate_bits",
                    "12": "update_and_check_bits"
                },
                "update_flags_0800268e": {
                    "14": "update_flags"
                },
                "update_register_flags_080028f0": {
                    "14": "update_register_flags"
                }
            },
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nvoid process_values_08003414(undefined4 input_value)\n\n{\n  int value_index;\n  uint value_flags;\n  int value_array [16];\n  \n  value_array[0] = find_value_or_zero(input_value,&DAT_08005a3c);\n  if ((value_array[0] != 0) &&\n     ((((value_index = get_value_index(input_value), value_index == 0 || (value_index == 4)) || (value_index == 8)) ||\n      ((value_index == 0xc || (value_index == 0x18)))))) {\n    value_flags = get_indexed_value(input_value,&DAT_08005a3c);\n    if ((value_flags & 0x100000) == 0) {\n      update_and_check_bits(value_array,value_index);\n    }\n    else {\n      update_register_flags(value_array,value_index);\n    }\n    update_flags(value_array);\n  }\n  return;\n}\n\n",
            "current_name": "process_values_08003414",
            "entrypoint": "0x08003414",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003414": "process_values_08003414",
                "find_value_or_zero_080034f4": "find_value_or_zero",
                "get_value_index_0800339c": "get_value_index",
                "get_value_index_0800354a": "get_indexed_value",
                "iVar1": "value_index",
                "local_4c": "value_array",
                "param_1": "input_value",
                "uVar2": "value_flags",
                "update_and_check_bits_08002864": "update_and_check_bits",
                "update_flags_0800268e": "update_flags",
                "update_register_flags_080028f0": "update_register_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800346c": {
            "additional_data": {
                "FUN_0800346c": {
                    "1": "fetch_data",
                    "2": "get_and_process_data",
                    "28": "initialize_data"
                },
                "get_data_08000e30": {
                    "1": "initialize_data",
                    "17": "fetch_data",
                    "2": "get_data",
                    "8": "retrieve_data"
                }
            },
            "called": [
                "FUN_08000e30"
            ],
            "calling": [
                "FUN_08004204"
            ],
            "code": "\nvoid initialize_data_0800346c(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "current_name": "initialize_data_0800346c",
            "entrypoint": "0x0800346c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_08000e30": "fetch_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003474": {
            "called": [],
            "calling": [
                "FUN_08003476"
            ],
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003474",
            "entrypoint": "0x08003474",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003476": {
            "additional_data": {
                "FUNC_08003474": {
                    "1": "finalize_system",
                    "3": "perform_operation",
                    "4": "execute_func",
                    "7": "execute_function"
                },
                "FUN_08003476": {
                    "1": "perform_initialization",
                    "2": "execute_code",
                    "4": "execute_program",
                    "9": "initialize_and_execute"
                },
                "addition_08000e18": {
                    "1": "perform_additional_steps",
                    "2": "perform_additional_tasks",
                    "24": "perform_addition"
                },
                "execute_initialization_08000f4e": {
                    "1": "initialize_resources",
                    "19": "initialize_execution",
                    "2": "run_initialization",
                    "9": "execute_initialization"
                }
            },
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_execute_08003476(void)\n\n{\n  perform_addition();\n  initialize_execution();\n  FUNC_08003474();\n  return;\n}\n\n",
            "current_name": "initialize_and_execute_08003476",
            "entrypoint": "0x08003476",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003476": "initialize_and_execute_08003476",
                "addition_08000e18": "perform_addition",
                "execute_initialization_08000f4e": "initialize_execution"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003486": {
            "additional_data": {
                "FUN_08003486": {
                    "1": "set_memory_address_and_update_registers",
                    "2": "update_register_bits",
                    "4": "update_memory_address",
                    "7": "update_memory",
                    "8": "update_registers"
                },
                "local_18": {
                    "1": "local_var3",
                    "2": "constant_value",
                    "8": "constant",
                    "9": "constant_2"
                },
                "local_1c": {
                    "1": "register_param_3",
                    "2": "value_4",
                    "3": "local_param_3",
                    "4": "param_3_copy"
                },
                "local_20": {
                    "1": "secondary_param",
                    "2": "register_value",
                    "3": "local_param_2",
                    "4": "param_2_copy"
                },
                "local_24": {
                    "1": "bitmask_value",
                    "12": "bit_mask",
                    "18": "bitmask"
                },
                "param_1": {
                    "1": "input_address",
                    "2": "memory_address",
                    "4": "input_param",
                    "7": "input_value",
                    "8": "address"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "value1",
                    "3": "param2",
                    "4": "param_2",
                    "8": "value_1"
                },
                "param_3": {
                    "1": "param_val_2",
                    "2": "value2",
                    "3": "param3",
                    "4": "param_3",
                    "8": "value_2"
                },
                "uVar1": {
                    "1": "address_value",
                    "25": "memory_address"
                }
            },
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nvoid update_registers_08003486(uint address,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined4 memory_address;\n  uint bitmask;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 constant_2;\n  \n  memory_address = set_memory_address_080031fc((address << 0x18) >> 0x1c);\n  bitmask = 1 << (address & 0xf) & 0xffff;\n  constant_2 = 2;\n  param_2_copy = value_1;\n  param_3_copy = value_2;\n  update_registers_08003486_08000fb4(memory_address,&bitmask);\n  return;\n}\n\n",
            "current_name": "update_registers_08003486",
            "entrypoint": "0x08003486",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003486": "update_registers_08003486",
                "local_18": "constant_2",
                "local_1c": "param_3_copy",
                "local_20": "param_2_copy",
                "local_24": "bitmask",
                "param_1": "address",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080034b6": {
            "additional_data": {
                "0": {
                    "1": "invalid_value"
                },
                "1": {
                    "1": "valid_value"
                },
                "FUN_080034b6": {
                    "1": "set_param_value_by_condition",
                    "15": "set_param_value",
                    "2": "set_param_value_based_on_flag",
                    "7": "set_param_value_based_on_condition"
                },
                "param_1": {
                    "1": "param",
                    "2": "param_value1",
                    "3": "value1",
                    "4": "param_value_1",
                    "5": "param_value",
                    "6": "param1"
                },
                "param_2": {
                    "1": "param",
                    "2": "param_2",
                    "3": "value2",
                    "4": "param_value_2",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param_check",
                    "13": "condition",
                    "2": "is_param_zero",
                    "3": "is_zero",
                    "5": "flag"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "param",
                    "3": "value_to_set",
                    "5": "param4",
                    "6": "default_value"
                },
                "set_param_value_08001198": {
                    "1": "set_param_value",
                    "2": "set_param_value_helper"
                }
            },
            "called": [
                "FUN_08001198"
            ],
            "calling": [
                "FUN_080041bc"
            ],
            "code": "\nvoid set_param_value_080034b6(undefined4 param1,undefined2 param2,int condition,undefined4 default_value)\n\n{\n  if (condition == 0) {\n    set_param_value_080034b6_helper(param1,param2,0,default_value,default_value);\n    return;\n  }\n  set_param_value_080034b6_helper(param1,param2,1,default_value,default_value);\n  return;\n}\n\n",
            "current_name": "set_param_value_080034b6",
            "entrypoint": "0x080034b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080034b6": "set_param_value_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "default_value",
                "set_param_value_08001198": "set_param_value_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080034ce": {
            "additional_data": {
                "FUN_080034ce": {
                    "24": "initialize_system",
                    "7": "initialize_systems"
                },
                "initialize_system_08000c8c": {
                    "1": "initialize_subsystem_2",
                    "12": "initialize_system_2",
                    "2": "initialize_system_part2",
                    "4": "initialize_system_step2",
                    "5": "initialize_subsystem2"
                },
                "initialize_system_08000de4": {
                    "1": "initialize_subsystem_1",
                    "12": "initialize_system_1",
                    "2": "initialize_system_part1",
                    "4": "initialize_system_step1",
                    "5": "initialize_subsystem1"
                }
            },
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "calling": [
                "FUN_08000d8e"
            ],
            "code": "\nvoid initialize_system_080034ce(void)\n\n{\n  initialize_system_080034ce_1();\n  initialize_system_080034ce_2();\n  return;\n}\n\n",
            "current_name": "initialize_system_080034ce",
            "entrypoint": "0x080034ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "initialize_system_08000c8c": "initialize_system_2",
                "initialize_system_08000de4": "initialize_system_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080034da": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 2)": {
                    "1": "desired_value",
                    "5": "found_value",
                    "8": "result"
                },
                "*param_2": {
                    "13": "current_value",
                    "2": "current_element"
                },
                "FUN_080034da": {
                    "1": "find_param_value",
                    "15": "find_value_in_array",
                    "3": "find_value",
                    "9": "find_value_index"
                },
                "break": {
                    "1": "found_value"
                },
                "param_1": {
                    "1": "desired_value",
                    "10": "value",
                    "11": "target_value",
                    "2": "target",
                    "7": "value_to_find"
                },
                "param_2": {
                    "1": "value_list",
                    "19": "array",
                    "2": "value_array",
                    "6": "array_ptr"
                },
                "param_2 + 6": {
                    "1": "next_array_element",
                    "4": "next_value",
                    "6": "next_element"
                }
            },
            "called": [
                "FUN_080034da"
            ],
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "code": "\nundefined4 find_value_in_array_080034da(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) found_value;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "current_name": "find_value_in_array_080034da",
            "entrypoint": "0x080034da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "break": "found_value",
                "param_1": "target_value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080034f4": {
            "additional_data": {
                "FUN_080034f4": {
                    "1": "get_value_from_array",
                    "10": "find_value_or_zero",
                    "2": "check_and_find_value",
                    "8": "find_value_or_default"
                },
                "param_1": {
                    "10": "value",
                    "19": "input_value",
                    "2": "value_to_find"
                },
                "uVar1": {
                    "1": "array_value",
                    "20": "found_value",
                    "8": "result"
                }
            },
            "called": [
                "FUN_080034da"
            ],
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "code": "\nundefined4 find_value_or_zero_080034f4(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_array_080034da();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "current_name": "find_value_or_zero_080034f4",
            "entrypoint": "0x080034f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080034f4": "find_value_or_zero_080034f4",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003506": {
            "additional_data": {
                "(int)*param_2": {
                    "1": "result"
                },
                "*(int *)(param_2 + 2)": {
                    "1": "array_element"
                },
                "*(param_2 + 2)": {
                    "1": "array_value"
                },
                "*param_2": {
                    "1": "result",
                    "4": "found_value",
                    "5": "current_value"
                },
                "*param_2 + 2": {
                    "1": "next_parameter_value"
                },
                "FUN_08003506": {
                    "1": "find_value_in_sequence",
                    "12": "find_value_in_array",
                    "2": "find_value",
                    "9": "find_value_index"
                },
                "F_UNPACK_DATA": {
                    "1": "unpack_data"
                },
                "param_1": {
                    "1": "target_id",
                    "15": "value",
                    "6": "value_to_find",
                    "8": "target_value"
                },
                "param_2": {
                    "1": "list_of_values",
                    "18": "array",
                    "2": "data_array",
                    "3": "array_ptr"
                },
                "param_2 + 2": {
                    "1": "current_value"
                },
                "param_2 + 6": {
                    "1": "next_parameter_array"
                },
                "param_2+2": {
                    "1": "array_index"
                },
                "ptr_2": {
                    "1": "current_element"
                },
                "return": {
                    "1": "found_value"
                }
            },
            "called": [
                "FUN_08003506"
            ],
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "code": "\nint find_value_in_array_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      found_value -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  found_value (int)*array;\n}\n\n",
            "current_name": "find_value_in_array_08003506",
            "entrypoint": "0x08003506",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "value",
                "param_2": "array",
                "return": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800351e": {
            "additional_data": {
                "FUN_0800351e": {
                    "1": "find_value_or_handle_error",
                    "12": "find_value_or_default",
                    "2": "find_value_or_error",
                    "8": "find_value_or_fail"
                },
                "param_1": {
                    "13": "value",
                    "2": "value_to_check",
                    "7": "input_value"
                },
                "uVar1": {
                    "1": "search_result",
                    "10": "result",
                    "18": "found_value"
                }
            },
            "called": [
                "FUN_08003506"
            ],
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "code": "\nundefined4 find_value_or_default_0800351e(int value)\n\n{\n  undefined4 found_value;\n  \n  if (value != 0) {\n    found_value = find_value_in_array_08003506();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "find_value_or_default_0800351e",
            "entrypoint": "0x0800351e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800351e": "find_value_or_default_0800351e",
                "param_1": "value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800352e": {
            "additional_data": {
                "(undefined4 *)(param_2 + 4)": {
                    "1": "next_value"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "found_value",
                    "5": "result"
                },
                "*PTR_4": {
                    "1": "next_value"
                },
                "*param_2": {
                    "1": "array_value",
                    "8": "current_value"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "FUN_0800352e": {
                    "1": "find_param_value",
                    "17": "find_value_index",
                    "3": "find_value",
                    "8": "find_value_in_array"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "PTR_4": {
                    "1": "next_array_element"
                },
                "PTR_8": {
                    "1": "result_pointer"
                },
                "PTR_c": {
                    "1": "result"
                },
                "break": {
                    "1": "exit_loop"
                },
                "param_1": {
                    "1": "target_integer",
                    "13": "value",
                    "3": "search_value",
                    "6": "target_value",
                    "8": "value_to_find"
                },
                "param_2": {
                    "1": "array_of_integers",
                    "18": "array",
                    "3": "array_ptr"
                },
                "param_2 + 6": {
                    "1": "next_value"
                },
                "param_2+6": {
                    "1": "next_element"
                },
                "param_2[0]": {
                    "1": "current_value"
                },
                "param_2[4]": {
                    "1": "result"
                },
                "return": {
                    "1": "index"
                }
            },
            "called": [
                "FUN_0800352e"
            ],
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      index 0xffffffff;\n    }\n    if (*array == value) exit_loop;\n    array = array + 6;\n  }\n  index *(undefined4 *)(array + 4);\n}\n\n",
            "current_name": "find_value_index_0800352e",
            "entrypoint": "0x0800352e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "break": "exit_loop",
                "param_1": "value",
                "param_2": "array",
                "return": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800354a": {
            "additional_data": {
                "FUN_0800354a": {
                    "1": "find_value_index_or_default",
                    "15": "get_value_index",
                    "2": "find_value_index_or_minus_one"
                },
                "param_1": {
                    "1": "value_to_check",
                    "10": "input_value",
                    "17": "value",
                    "2": "index"
                },
                "uVar1": {
                    "1": "found_index",
                    "13": "value_index",
                    "15": "index",
                    "2": "index_value"
                }
            },
            "called": [
                "FUN_0800352e"
            ],
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "code": "\nundefined4 get_value_index_0800354a(int value)\n\n{\n  undefined4 index;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  index = find_value_index_0800352e();\n  return index;\n}\n\n",
            "current_name": "get_value_index_0800354a",
            "entrypoint": "0x0800354a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800354a": "get_value_index_0800354a",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800355e": {
            "additional_data": {
                "*param_2": {
                    "1": "array_element",
                    "10": "current_value"
                },
                "FUN_0800355e": {
                    "1": "check_match",
                    "2": "check_value_in_array",
                    "4": "find_value",
                    "7": "find_value_index",
                    "8": "find_value_in_array"
                },
                "break": {
                    "1": "found_value"
                },
                "param_1": {
                    "1": "target",
                    "14": "value",
                    "2": "value_to_check",
                    "3": "target_value",
                    "5": "value_to_find"
                },
                "param_2": {
                    "1": "ptr_array",
                    "15": "array",
                    "4": "values_array",
                    "8": "array_of_values"
                },
                "param_2 + 6": {
                    "1": "next_element",
                    "3": "next_value"
                },
                "param_2[0]": {
                    "1": "array_element"
                },
                "param_2[5]": {
                    "1": "next_array_element"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004110"
            ],
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) found_value;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "current_name": "find_value_in_array_0800355e",
            "entrypoint": "0x0800355e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "break": "found_value",
                "param_1": "value",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003582": {
            "additional_data": {
                "FUN_08003582": {
                    "1": "compare_and_return_non_zero",
                    "2": "find_common_value",
                    "3": "compare_and_return_zero",
                    "4": "compare_and_return",
                    "6": "compare_and_return_smaller"
                },
                "param_1": {
                    "1": "first_parameter",
                    "13": "value1",
                    "2": "number1",
                    "3": "input1",
                    "6": "value_1"
                },
                "param_2": {
                    "1": "input_2",
                    "13": "value2",
                    "2": "number2",
                    "3": "input2",
                    "6": "value_2"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003978"
            ],
            "code": "\nint compare_and_return_smaller_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "current_name": "compare_and_return_smaller_08003582",
            "entrypoint": "0x08003582",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003582": "compare_and_return_smaller_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003594": {
            "additional_data": {
                "0x0": {
                    "1": "null"
                },
                "DAT_20000188": {
                    "1": "callback_ptr",
                    "12": "callback_function",
                    "3": "callback_pointer"
                },
                "DAT_200001ac": {
                    "1": "parameter",
                    "11": "callback_data",
                    "2": "callback_function_param",
                    "5": "callback_argument",
                    "6": "callback_parameter"
                },
                "FUN_08003594": {
                    "13": "execute_callback_function",
                    "16": "execute_callback",
                    "2": "execute_callback_if_not_null"
                },
                "callbackFunction": {
                    "3": "callback_function"
                },
                "callback_function": {
                    "1": "callback"
                },
                "code": {
                    "6": "callback_function"
                },
                "code *": {
                    "1": "callback_function"
                },
                "executeCallback": {
                    "1": "execute_callback"
                },
                "executeCallbackFunction": {
                    "1": "execute_callback_function"
                },
                "executeCallbackFunction -> DAT_20000188": {
                    "1": "callback_function"
                },
                "executeCallbackFunction -> DAT_200001ac": {
                    "1": "callback_parameter"
                },
                "executeCallbackIfNotNull": {
                    "2": "execute_callback_if_not_null"
                },
                "execute_callback": {
                    "1": "execute_callback"
                },
                "execute_callback_function": {
                    "1": "execute_callback"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800262c"
            ],
            "code": "\nvoid execute_callback_08003594(void)\n\n{\n  if (DAT_20000188 != (callback_function *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_08003594",
            "entrypoint": "0x08003594",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003594": "execute_callback_08003594",
                "code": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035bc": {
            "additional_data": {
                "FUN_080035bc": {
                    "1": "initialize_data",
                    "12": "initialize_registers",
                    "3": "initialize_hardware",
                    "6": "initialize_memory",
                    "7": "initialize_system"
                },
                "_DAT_40023800": {
                    "1": "status_register",
                    "2": "register3",
                    "7": "register_value",
                    "8": "control_register"
                },
                "_DAT_40023804": {
                    "1": "memory_segment_register",
                    "11": "base_address",
                    "2": "register2"
                },
                "_DAT_40023808": {
                    "1": "memory_value1",
                    "2": "register1",
                    "3": "status_register",
                    "4": "counter"
                },
                "_DAT_4002380c": {
                    "1": "buffer",
                    "2": "register4",
                    "7": "status_register"
                },
                "_DAT_e000ed08": {
                    "1": "memory_register",
                    "2": "interrupt_enable_register",
                    "3": "interrupt_control",
                    "5": "system_control_register",
                    "7": "interrupt_control_register"
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_registers_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_registers_080035bc",
            "entrypoint": "0x080035bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035bc": "initialize_registers_080035bc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fc": {
            "additional_data": {
                "*param_1": {
                    "1": "parameter_value"
                },
                "FUN_080035fc": {
                    "1": "update_register_values",
                    "2": "update_register_value",
                    "3": "update_flags_based_on_value",
                    "5": "update_flags_based_on_param"
                },
                "_DAT_40023840": {
                    "1": "flag_b",
                    "2": "register1",
                    "3": "register_a",
                    "4": "register2",
                    "5": "flag2",
                    "7": "register_b"
                },
                "_DAT_40023844": {
                    "1": "flag_a",
                    "2": "register2",
                    "3": "register_b",
                    "4": "register1",
                    "5": "flag1",
                    "7": "register_a"
                },
                "original_variable_name_1": {
                    "1": "flag1"
                },
                "original_variable_name_2": {
                    "1": "flag2"
                },
                "original_variable_name_n": {
                    "1": "flag_n"
                },
                "param_1": {
                    "1": "flags",
                    "2": "setting_value",
                    "4": "param",
                    "9": "value"
                },
                "settingValue": {
                    "1": "setting_value"
                },
                "updateSettings": {
                    "1": "update_settings"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800340c"
            ],
            "code": "\n\n\nvoid update_flags_based_on_param_080035fc(int *value)\n\n{\n  if (*value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "current_name": "update_flags_based_on_param_080035fc",
            "entrypoint": "0x080035fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035fc": "update_flags_based_on_param_080035fc",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003750": {
            "additional_data": {
                "DAT_": {
                    "1": ""
                },
                "FUN_08003750": {
                    "1": "subtract_four_from_param",
                    "2": "subtract4",
                    "26": "subtract_four"
                },
                "PTR_": {
                    "1": ""
                },
                "local_var_1": {
                    "1": "result"
                },
                "local_var_2": {
                    "1": "temp"
                },
                "param_1": {
                    "1": "num_minus_four",
                    "2": "result",
                    "4": "input_value",
                    "5": "num",
                    "6": "input"
                },
                "param_10": {
                    "1": "n/a"
                },
                "param_100": {
                    "1": "n/a"
                },
                "param_101": {
                    "1": "n/a"
                },
                "param_102": {
                    "1": "n/a"
                },
                "param_103": {
                    "1": "n/a"
                },
                "param_104": {
                    "1": "n/a"
                },
                "param_105": {
                    "1": "n/a"
                },
                "param_106": {
                    "1": "n/a"
                },
                "param_107": {
                    "1": "n/a"
                },
                "param_108": {
                    "1": "n/a"
                },
                "param_109": {
                    "1": "n/a"
                },
                "param_11": {
                    "1": "n/a"
                },
                "param_110": {
                    "1": "n/a"
                },
                "param_111": {
                    "1": "n/a"
                },
                "param_112": {
                    "1": "n/a"
                },
                "param_113": {
                    "1": "n/a"
                },
                "param_114": {
                    "1": "n/a"
                },
                "param_115": {
                    "1": "n/a"
                },
                "param_116": {
                    "1": "n/a"
                },
                "param_117": {
                    "1": "n/a"
                },
                "param_118": {
                    "1": "n/a"
                },
                "param_119": {
                    "1": "n/a"
                },
                "param_12": {
                    "1": "n/a"
                },
                "param_120": {
                    "1": "n/a"
                },
                "param_121": {
                    "1": "n/a"
                },
                "param_122": {
                    "1": "n/a"
                },
                "param_123": {
                    "1": "n/a"
                },
                "param_124": {
                    "1": "n/a"
                },
                "param_125": {
                    "1": "n/a"
                },
                "param_126": {
                    "1": "n/a"
                },
                "param_127": {
                    "1": "n/a"
                },
                "param_128": {
                    "1": "n/a"
                },
                "param_129": {
                    "1": "n/a"
                },
                "param_13": {
                    "1": "n/a"
                },
                "param_130": {
                    "1": "n/a"
                },
                "param_131": {
                    "1": "n/a"
                },
                "param_132": {
                    "1": "n/a"
                },
                "param_133": {
                    "1": "n/a"
                },
                "param_14": {
                    "1": "n/a"
                },
                "param_15": {
                    "1": "n/a"
                },
                "param_16": {
                    "1": "n/a"
                },
                "param_17": {
                    "1": "n/a"
                },
                "param_18": {
                    "1": "n/a"
                },
                "param_19": {
                    "1": "n/a"
                },
                "param_1_n": {
                    "1": "new_param_name"
                },
                "param_1_new": {
                    "1": "subtracted"
                },
                "param_2": {
                    "1": "new_param_name_n"
                },
                "param_20": {
                    "1": "n/a"
                },
                "param_21": {
                    "1": "n/a"
                },
                "param_22": {
                    "1": "n/a"
                },
                "param_23": {
                    "1": "n/a"
                },
                "param_24": {
                    "1": "n/a"
                },
                "param_25": {
                    "1": "n/a"
                },
                "param_26": {
                    "1": "n/a"
                },
                "param_27": {
                    "1": "n/a"
                },
                "param_28": {
                    "1": "n/a"
                },
                "param_29": {
                    "1": "n/a"
                },
                "param_3": {
                    "1": "n/a"
                },
                "param_30": {
                    "1": "n/a"
                },
                "param_31": {
                    "1": "n/a"
                },
                "param_32": {
                    "1": "n/a"
                },
                "param_33": {
                    "1": "n/a"
                },
                "param_34": {
                    "1": "n/a"
                },
                "param_35": {
                    "1": "n/a"
                },
                "param_36": {
                    "1": "n/a"
                },
                "param_37": {
                    "1": "n/a"
                },
                "param_38": {
                    "1": "n/a"
                },
                "param_39": {
                    "1": "n/a"
                },
                "param_4": {
                    "1": "n/a"
                },
                "param_40": {
                    "1": "n/a"
                },
                "param_41": {
                    "1": "n/a"
                },
                "param_42": {
                    "1": "n/a"
                },
                "param_43": {
                    "1": "n/a"
                },
                "param_44": {
                    "1": "n/a"
                },
                "param_45": {
                    "1": "n/a"
                },
                "param_46": {
                    "1": "n/a"
                },
                "param_47": {
                    "1": "n/a"
                },
                "param_48": {
                    "1": "n/a"
                },
                "param_49": {
                    "1": "n/a"
                },
                "param_5": {
                    "1": "n/a"
                },
                "param_50": {
                    "1": "n/a"
                },
                "param_51": {
                    "1": "n/a"
                },
                "param_52": {
                    "1": "n/a"
                },
                "param_53": {
                    "1": "n/a"
                },
                "param_54": {
                    "1": "n/a"
                },
                "param_55": {
                    "1": "n/a"
                },
                "param_56": {
                    "1": "n/a"
                },
                "param_57": {
                    "1": "n/a"
                },
                "param_58": {
                    "1": "n/a"
                },
                "param_59": {
                    "1": "n/a"
                },
                "param_6": {
                    "1": "n/a"
                },
                "param_60": {
                    "1": "n/a"
                },
                "param_61": {
                    "1": "n/a"
                },
                "param_62": {
                    "1": "n/a"
                },
                "param_63": {
                    "1": "n/a"
                },
                "param_64": {
                    "1": "n/a"
                },
                "param_65": {
                    "1": "n/a"
                },
                "param_66": {
                    "1": "n/a"
                },
                "param_67": {
                    "1": "n/a"
                },
                "param_68": {
                    "1": "n/a"
                },
                "param_69": {
                    "1": "n/a"
                },
                "param_7": {
                    "1": "n/a"
                },
                "param_70": {
                    "1": "n/a"
                },
                "param_71": {
                    "1": "n/a"
                },
                "param_72": {
                    "1": "n/a"
                },
                "param_73": {
                    "1": "n/a"
                },
                "param_74": {
                    "1": "n/a"
                },
                "param_75": {
                    "1": "n/a"
                },
                "param_76": {
                    "1": "n/a"
                },
                "param_77": {
                    "1": "n/a"
                },
                "param_78": {
                    "1": "n/a"
                },
                "param_79": {
                    "1": "n/a"
                },
                "param_8": {
                    "1": "n/a"
                },
                "param_80": {
                    "1": "n/a"
                },
                "param_81": {
                    "1": "n/a"
                },
                "param_82": {
                    "1": "n/a"
                },
                "param_83": {
                    "1": "n/a"
                },
                "param_84": {
                    "1": "n/a"
                },
                "param_85": {
                    "1": "n/a"
                },
                "param_86": {
                    "1": "n/a"
                },
                "param_87": {
                    "1": "n/a"
                },
                "param_88": {
                    "1": "n/a"
                },
                "param_89": {
                    "1": "n/a"
                },
                "param_9": {
                    "1": "n/a"
                },
                "param_90": {
                    "1": "n/a"
                },
                "param_91": {
                    "1": "n/a"
                },
                "param_92": {
                    "1": "n/a"
                },
                "param_93": {
                    "1": "n/a"
                },
                "param_94": {
                    "1": "n/a"
                },
                "param_95": {
                    "1": "n/a"
                },
                "param_96": {
                    "1": "n/a"
                },
                "param_97": {
                    "1": "n/a"
                },
                "param_98": {
                    "1": "n/a"
                },
                "param_99": {
                    "1": "n/a"
                },
                "param_n": {
                    "1": "new_param_name"
                },
                "return": {
                    "3": "result"
                },
                "return_value": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "code": "\nint subtract_four_08003750(int input)\n\n{\n  result input + -4;\n}\n\n",
            "current_name": "subtract_four_08003750",
            "entrypoint": "0x08003750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003754": {
            "additional_data": {
                "'\\x01'": {
                    "1": "check_flag"
                },
                "(*(char *)(param_1 + 0x18)": {
                    "1": "flag"
                },
                "(*(code **)(iVar1 + 0x48)": {
                    "1": "function_ptr"
                },
                "(char *)(param_1 + 0x18)": {
                    "1": "status_flag"
                },
                "(code *)0x0": {
                    "1": "null_pointer"
                },
                "(code **)iVar1": {
                    "1": "function_pointer"
                },
                "*(char *)(param_1 + 0x18)": {
                    "1": "flag_set",
                    "2": "condition_check"
                },
                "*(char *)(parameter + 0x18)": {
                    "1": "character_value"
                },
                "*(code **)(iVar1 + 0x48)": {
                    "1": "callback",
                    "2": "callback_function"
                },
                "**(code **)(iVar1 + 0x48)": {
                    "1": "function_pointer"
                },
                "0x0": {
                    "2": "null"
                },
                "0x18": {
                    "1": "char_offset"
                },
                "0x48": {
                    "1": "action_offset",
                    "3": "callback_offset"
                },
                "DAT_08003750": {
                    "1": "constant_1"
                },
                "FUN_08003754": {
                    "1": "execute_subroutine",
                    "2": "execute_if_condition_met",
                    "3": "execute_callback_function",
                    "4": "execute_callback",
                    "6": "execute_function_if_condition_met"
                },
                "PTR_08003750": {
                    "1": "constant_2"
                },
                "code": {
                    "1": "callback_function",
                    "4": "function_pointer"
                },
                "iVar1": {
                    "1": "result_variable",
                    "12": "result",
                    "2": "callback_result",
                    "4": "callback_function"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "callback_parameter",
                    "3": "callback_data",
                    "4": "input_value",
                    "5": "callback_param"
                },
                "param_1 + 0x18": {
                    "1": "condition_flag_address"
                },
                "subtract_four_08003750": {
                    "1": "get_callback_data",
                    "3": "get_callback_function",
                    "5": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08003750"
            ],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid execute_function_if_condition_met_08003754(int callback_param)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if ((*(function_pointer **)(result + 0x48) != (function_pointer *)0x0) && (*(char *)(callback_param + 0x18) == '\\x01')) {\n    (**(function_pointer **)(result + 0x48))(result,0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_condition_met_08003754",
            "entrypoint": "0x08003754",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003754": "execute_function_if_condition_met_08003754",
                "code": "function_pointer",
                "iVar1": "result",
                "param_1": "callback_param",
                "subtract_four_08003750": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800376e": {
            "additional_data": {
                "(code *)": {
                    "1": "function"
                },
                "(code *)0x0": {
                    "1": "empty_code_pointer"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "*(*(result + 0x44))": {
                    "1": "function_to_execute"
                },
                "**(code **)(iVar1 + 0x44)": {
                    "1": "callback_function"
                },
                "**(code **)(result + 0x44)": {
                    "1": "function_to_call"
                },
                "0x44": {
                    "1": "offset",
                    "2": "callback_offset",
                    "4": "function_offset"
                },
                "FUN_0800376e": {
                    "1": "execute_subtract_and_call_function",
                    "2": "execute_subtraction_function",
                    "8": "execute_callback"
                },
                "code": {
                    "1": "callback_function"
                },
                "iVar1": {
                    "1": "pointer_value",
                    "2": "callback_address",
                    "20": "result",
                    "3": "subtraction_result"
                },
                "subtract_four_08003750": {
                    "1": "get_subtracted_value",
                    "2": "get_function_ptr",
                    "3": "get_callback_function",
                    "6": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08003750"
            ],
            "calling": [
                "FUN_080026ce"
            ],
            "code": "\nvoid execute_callback_0800376e(void)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (*(function_pointer **)(result + 0x44) != (function_pointer *)0x0) {\n    (**(function_pointer **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_0800376e",
            "entrypoint": "0x0800376e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800376e": "execute_callback_0800376e",
                "code": "function_pointer",
                "iVar1": "result",
                "subtract_four_08003750": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800377c": {
            "additional_data": {
                "DAT_200001b0": {
                    "1": "condition_check1",
                    "10": "condition_1",
                    "4": "condition_flag_1",
                    "5": "condition1"
                },
                "DAT_200001d4": {
                    "1": "condition_2_variable",
                    "10": "condition_2",
                    "4": "condition_flag_2",
                    "5": "condition2"
                },
                "FUN_0800377c": {
                    "1": "process_conditions_if_not_zero",
                    "2": "check_and_process_conditions",
                    "23": "process_conditions"
                },
                "process_conditions_080026ce": {
                    "1": "execute_condition",
                    "6": "process_conditions"
                },
                "return": {
                    "1": ""
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_080026ce"
            ],
            "calling": [],
            "code": "\nvoid process_conditions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_conditions_0800377c();\n  }\n  if (DAT_200001d4 != 0) {\n    process_conditions_0800377c();\n  }\n  return;\n}\n\n",
            "current_name": "process_conditions_0800377c",
            "entrypoint": "0x0800377c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800377c": "process_conditions_0800377c",
                "process_conditions_080026ce": "process_conditions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800387c": {
            "additional_data": {
                "DAT_": {
                    "1": "n/a"
                },
                "FUN_0800387c": {
                    "1": "add_four",
                    "28": "subtract_four"
                },
                "PTR_": {
                    "1": "n/a"
                },
                "param_1": {
                    "1": "modified_value",
                    "2": "input_number",
                    "3": "output",
                    "4": "input",
                    "5": "num",
                    "8": "result"
                },
                "param_10": {
                    "1": "param_ten"
                },
                "param_11": {
                    "1": "param_eleven"
                },
                "param_12": {
                    "1": "param_twelve"
                },
                "param_13": {
                    "1": "param_thirteen"
                },
                "param_14": {
                    "1": "param_fourteen"
                },
                "param_15": {
                    "1": "param_fifteen"
                },
                "param_16": {
                    "1": "param_sixteen"
                },
                "param_17": {
                    "1": "param_seventeen"
                },
                "param_18": {
                    "1": "param_eighteen"
                },
                "param_19": {
                    "1": "param_nineteen"
                },
                "param_2": {
                    "1": "n/a"
                },
                "param_20": {
                    "1": "param_twenty"
                },
                "param_21": {
                    "1": "param_twenty_one"
                },
                "param_22": {
                    "1": "param_twenty_two"
                },
                "param_23": {
                    "1": "param_twenty_three"
                },
                "param_24": {
                    "1": "param_twenty_four"
                },
                "param_25": {
                    "1": "param_twenty_five"
                },
                "param_26": {
                    "1": "param_twenty_six"
                },
                "param_27": {
                    "1": "param_twenty_seven"
                },
                "param_28": {
                    "1": "param_twenty_eight"
                },
                "param_29": {
                    "1": "param_twenty_nine"
                },
                "param_3": {
                    "1": "updated_param"
                },
                "param_30": {
                    "1": "param_thirty"
                },
                "param_4": {
                    "1": "extra_param"
                },
                "param_5": {
                    "1": "another_param"
                },
                "param_6": {
                    "1": "param_six"
                },
                "param_7": {
                    "1": "param_seven"
                },
                "param_8": {
                    "1": "param_eight"
                },
                "param_9": {
                    "1": "param_nine"
                },
                "return": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "code": "\nint subtract_four_0800387c(int result)\n\n{\n  result result + -4;\n}\n\n",
            "current_name": "subtract_four_0800387c",
            "entrypoint": "0x0800387c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "result",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003880": {
            "additional_data": {
                "(*code_pointer)()": {
                    "1": "function_pointer"
                },
                "(code *)0x0": {
                    "1": "null_code_ptr"
                },
                "(int *)(param_1 + 0xc)": {
                    "1": "param_1_ptr"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "code_pointer"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "input_value"
                },
                "*(undefined *)(iVar1 + 0x5e)": {
                    "1": "var2"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "var1"
                },
                "*(undefined *)(iVar1 + 0x88),8)": {
                    "1": "params"
                },
                "**(code **)(iVar1 + 100)": {
                    "1": "func"
                },
                "0xc": {
                    "1": "offset"
                },
                "FUN_08003880": {
                    "1": "process_data_if_param_3_matches",
                    "14": "process_data",
                    "2": "process_data_and_parameters",
                    "3": "process_params",
                    "4": "process_parameters"
                },
                "code": {
                    "1": "func_pointer",
                    "2": "callback"
                },
                "code **(iVar1 + 100)": {
                    "1": "code_ptr"
                },
                "iVar1": {
                    "1": "temp_variable",
                    "28": "result"
                },
                "iVar1 + 0x68": {
                    "1": "result_offset"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_1",
                    "3": "input_ptr",
                    "4": "input_param",
                    "5": "input_data"
                },
                "param_1 + 0x68": {
                    "1": "result_offset"
                },
                "param_2": {
                    "1": "is_zero",
                    "2": "input_2",
                    "22": "flag",
                    "3": "flag_param"
                },
                "param_3": {
                    "1": "data_val",
                    "2": "compare_value",
                    "5": "comparison_value",
                    "7": "value"
                },
                "param_4": {
                    "1": "code_parameter",
                    "2": "unknown_param",
                    "3": "data",
                    "7": "param"
                },
                "process_data_08001460": {
                    "1": "process_data_func",
                    "17": "process_data",
                    "2": "process_data_block",
                    "5": "process_data_helper"
                },
                "process_parameters_080014ec": {
                    "1": "process_parameters_extended",
                    "16": "process_parameters",
                    "3": "process_parameters_helper",
                    "5": "process_params"
                },
                "subtract_four_0800387c": {
                    "1": "subtract_four_func",
                    "2": "calculate_result",
                    "20": "subtract_four",
                    "3": "get_result"
                },
                "subtract_four_0800387c()": {
                    "1": "subtract_four"
                }
            },
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "calling": [
                "FUN_0800165a"
            ],
            "code": "\nvoid process_data_08003880(int input_data,int flag,int value,undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four;\n  if (value == *(int *)(input_data + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(callback **)(result + 100) != (callback *)0x0) {\n        (**(callback **)(result + 100))();\n      }\n      process_data_08003880(input_data,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    process_parameters(input_data,result + 0x68,0x20,8,param);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08003880",
            "entrypoint": "0x08003880",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003880": "process_data_08003880",
                "code": "callback",
                "iVar1": "result",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param",
                "process_data_08001460": "process_data",
                "process_parameters_080014ec": "process_parameters",
                "subtract_four_0800387c": "subtract_four",
                "subtract_four_0800387c()": "subtract_four"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080038d0": {
            "additional_data": {
                "'\\x01'": {
                    "1": "true_character"
                },
                "(char *)(iVar1 + 0x2c)": {
                    "1": "condition_b"
                },
                "(char *)(iVar1 + 0x5e)": {
                    "1": "char1"
                },
                "(code *)(iVar1 + 0x60)": {
                    "1": "function_pointer"
                },
                "(code *)0x0": {
                    "1": "null_function_pointer"
                },
                "(code **)(iVar1 + 0x60)": {
                    "1": "function_pointer"
                },
                "(iVar1 + 0x68)": {
                    "1": "function_argument"
                },
                "(result + 0x68)": {
                    "1": "parameter"
                },
                "*(*(result + 0x5e))": {
                    "1": "flag"
                },
                "*(*(result + 0x60))": {
                    "1": "function"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "flag_2"
                },
                "*(char *)(iVar1 + 0x5e)": {
                    "1": "is_condition_met"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "2": "function_pointer"
                },
                "*(result + 0x2c)": {
                    "1": "character"
                },
                "**(code **)(iVar1 + 0x60)": {
                    "1": "execute_function"
                },
                "0x2c": {
                    "1": "character"
                },
                "0x5e": {
                    "1": "flag"
                },
                "0x60": {
                    "1": "function_ptr_offset"
                },
                "<original_function_name>": {
                    "1": "initialize_data_and_call_function"
                },
                "DAT_08001578": {
                    "1": "data_08001578"
                },
                "FUN_080038d0": {
                    "1": "execute_subroutine",
                    "10": "execute_function",
                    "3": "execute_function_and_initialize_data"
                },
                "char_1": {
                    "1": "status_char"
                },
                "char_2": {
                    "1": "space_check_char"
                },
                "code": {
                    "1": "function"
                },
                "code_1": {
                    "1": "function_ptr"
                },
                "iVar1": {
                    "1": "callback_handle",
                    "2": "return_value",
                    "23": "result"
                },
                "iVar1 + 0x68": {
                    "1": "function_parameter"
                },
                "initialize_data_08001578": {
                    "27": "initialize_data"
                },
                "param_1": {
                    "1": "command",
                    "2": "input_data",
                    "3": "input_parameter",
                    "6": "input_param",
                    "8": "param"
                },
                "subtract_four_0800387c": {
                    "1": "get_subtracted_value",
                    "2": "get_function_ptr",
                    "4": "get_function_info",
                    "9": "get_function_pointer"
                }
            },
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "code": "\nvoid execute_function_080038d0(undefined4 param)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(function **)(result + 0x60) != (function *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(param);\n  return;\n}\n\n",
            "current_name": "execute_function_080038d0",
            "entrypoint": "0x080038d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080038d0": "execute_function_080038d0",
                "code": "function",
                "iVar1": "result",
                "initialize_data_08001578": "initialize_data",
                "param_1": "param",
                "subtract_four_0800387c": "get_function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003900": {
            "additional_data": {
                "FUN_08003900": {
                    "1": "initialize_data_if_condition_false",
                    "16": "check_and_initialize_data",
                    "3": "initialize_or_skip_data"
                },
                "iVar1": {
                    "1": "result_subtract_four",
                    "29": "result"
                },
                "initialize_data_08001578": {
                    "20": "initialize_data"
                },
                "param_1": {
                    "1": "data_param",
                    "2": "data",
                    "3": "input_parameter",
                    "4": "argument",
                    "8": "param",
                    "9": "input_param"
                },
                "subtract_four_0800387c": {
                    "1": "get_result_of_subtraction",
                    "2": "calculate_offset",
                    "5": "get_offset",
                    "9": "subtract_four"
                }
            },
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid check_and_initialize_data_08003900(undefined4 input_param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initialize_data(input_param);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_initialize_data_08003900",
            "entrypoint": "0x08003900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003900": "check_and_initialize_data_08003900",
                "iVar1": "result",
                "initialize_data_08001578": "initialize_data",
                "param_1": "input_param",
                "subtract_four_0800387c": "subtract_four"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003978": {
            "additional_data": {
                "&DAT_200002b4": {
                    "1": "array1"
                },
                "DAT_08005c10": {
                    "1": "peripheral_data2"
                },
                "DAT_08005ca0": {
                    "1": "uart_pin_list_1"
                },
                "DAT_200002b4": {
                    "1": "data"
                },
                "DAT_40023820": {
                    "1": "reg_3"
                },
                "DAT_40023824": {
                    "1": "reg_1"
                },
                "DAT_40023840": {
                    "1": "reg_4"
                },
                "DAT_40023844": {
                    "1": "reg_2"
                },
                "FUN_08003978": {
                    "1": "configure_uart_pin",
                    "19": "configure_uart_pins",
                    "2": "initialize_uart_peripheral",
                    "3": "configure_uart",
                    "6": "initialize_uart_pins"
                },
                "_DAT_40023820": {
                    "1": "usart_cr1_reg"
                },
                "_DAT_40023824": {
                    "1": "uart_pin_register1"
                },
                "_DAT_40023840": {
                    "1": "gpio_pin_config"
                },
                "_DAT_40023844": {
                    "1": "uart_pin_register2"
                },
                "compare_and_return_smaller_08003582": {
                    "1": "compare_uart_pins"
                },
                "get_value_index_0800354a": {
                    "1": "find_value_index",
                    "7": "get_value_index"
                },
                "iVar1": {
                    "1": "uart1_pin_value",
                    "2": "peripheral1",
                    "3": "uart_pin1",
                    "4": "uart_pin_value1",
                    "5": "uart_pin_value",
                    "8": "uart_peripheral1"
                },
                "iVar2": {
                    "1": "uart_peripheral",
                    "2": "peripheral_value",
                    "3": "uart_pin2",
                    "4": "uart_pin2_value",
                    "5": "uart_pin_value2",
                    "8": "uart_peripheral2"
                },
                "initialize_data_08002d72": {
                    "9": "initialize_data"
                },
                "local_1c": {
                    "1": "update_rate",
                    "2": "bit_mask4",
                    "5": "shifted_value2"
                },
                "local_20": {
                    "1": "update_mode",
                    "2": "memory_address2",
                    "3": "register_value",
                    "7": "constant_value"
                },
                "local_24": {
                    "1": "shift_amount",
                    "2": "bit_mask3",
                    "3": "shifted_value1",
                    "8": "shifted_value"
                },
                "local_28": {
                    "1": "bit_field_value",
                    "2": "register_value1",
                    "3": "shifted_value",
                    "8": "register_value"
                },
                "local_2c": {
                    "1": "bit_shifted_value",
                    "2": "bit_mask",
                    "3": "pin_mask1",
                    "4": "bit_mask1",
                    "8": "uart_pin_mask"
                },
                "param_1": {
                    "1": "pin_values",
                    "15": "uart_pins",
                    "2": "pins",
                    "3": "uart_config",
                    "5": "pin_config"
                },
                "param_1 + 1": {
                    "1": "array2"
                },
                "param_1[0x11]": {
                    "1": "index"
                },
                "param_1[0x12]": {
                    "1": "value1"
                },
                "param_1[0x13]": {
                    "1": "value2"
                },
                "param_1[0x14]": {
                    "1": "value3"
                },
                "param_1[0x15]": {
                    "1": "value4"
                },
                "process_data_08004fdc": {
                    "1": "log_error_message",
                    "3": "print_error_message"
                },
                "set_memory_address_080031fc": {
                    "1": "configure_memory_address",
                    "7": "set_memory_address"
                },
                "uVar3": {
                    "1": "memory_addr",
                    "16": "memory_address",
                    "2": "address",
                    "9": "memory_address1"
                },
                "uVar4": {
                    "1": "index",
                    "2": "value_index1",
                    "28": "value_index"
                },
                "update_registers_08000fb4": {
                    "2": "update_uart_registers",
                    "7": "update_registers"
                }
            },
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "code": "\n\n\nvoid configure_uart_pins_08003978(int *uart_pins)\n\n{\n  int uart_peripheral1;\n  int uart_peripheral2;\n  undefined4 memory_address;\n  uint value_index;\n  uint uart_pin_mask;\n  uint register_value;\n  uint shifted_value;\n  undefined4 constant_value;\n  uint shifted_value2;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_peripheral1 = find_value_or_zero_080034f4((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n    uart_peripheral2 = find_value_or_zero_080034f4((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n    if ((uart_peripheral2 == 0) || (uart_peripheral1 == 0)) {\n      print_error_message(\"ERROR: at least one UART pin has no peripheral\\n\",uart_peripheral2);\n    }\n    else {\n      uart_peripheral1 = compare_uart_value(uart_peripheral1);\n      *uart_pins = uart_peripheral1;\n      if (uart_peripheral1 == 0) {\n        print_error_message(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_peripheral1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)(uart_pins + 0x17) = 0x25;\n        }\n        else if (uart_peripheral1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)(uart_pins + 0x17) = 0x26;\n        }\n        else if (uart_peripheral1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)(uart_pins + 0x17) = 0x27;\n        }\n        else if (uart_peripheral1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uart_pins + 0x11) = 3;\n          *(undefined *)(uart_pins + 0x17) = 0x34;\n        }\n        else if (uart_peripheral1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uart_pins + 0x11) = 4;\n          *(undefined *)(uart_pins + 0x17) = 0x35;\n        }\n        else if (uart_peripheral1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uart_pins + 0x11) = 5;\n          *(undefined *)(uart_pins + 0x17) = 0x47;\n        }\n        else if (uart_peripheral1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uart_pins + 0x11) = 6;\n          *(undefined *)(uart_pins + 0x17) = 0x52;\n        }\n        else if (uart_peripheral1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uart_pins + 0x11) = 7;\n          *(undefined *)(uart_pins + 0x17) = 0x53;\n        }\n        memory_address = set_memory_address((uint)((int)*(short *)((int)uart_pins + 0x5a) << 0x18) >> 0x1c);\n        value_index = get_value_index((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n        uart_pin_mask = 1 << (*(ushort *)((int)uart_pins + 0x5a) & 0xf) & 0xffff;\n        register_value = (value_index >> 3 & 1) << 4 | value_index & 7;\n        shifted_value = (value_index << 0x1a) >> 0x1e;\n        shifted_value2 = (value_index << 0x11) >> 0x19;\n        constant_value = 3;\n        update_registers(memory_address,&uart_pin_mask);\n        memory_address = set_memory_address((uint)((int)*(short *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        value_index = get_value_index((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n        uart_pin_mask = 1 << (*(ushort *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        register_value = (value_index >> 3 & 1) << 4 | value_index & 7;\n        shifted_value = (value_index << 0x1a) >> 0x1e;\n        update_registers(memory_address,&uart_pin_mask);\n        (&DAT_200002b4)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = value1;\n        uart_pins[3] = value2;\n        uart_pins[4] = value3;\n        uart_pins[5] = value4;\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        initialize_data(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "configure_uart_pins_08003978",
            "entrypoint": "0x08003978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "compare_and_return_smaller_08003582": "compare_uart_value",
                "get_value_index_0800354a": "get_value_index",
                "iVar1": "uart_peripheral1",
                "iVar2": "uart_peripheral2",
                "initialize_data_08002d72": "initialize_data",
                "local_1c": "shifted_value2",
                "local_20": "constant_value",
                "local_24": "shifted_value",
                "local_28": "register_value",
                "local_2c": "uart_pin_mask",
                "param_1": "uart_pins",
                "param_1[0x12]": "value1",
                "param_1[0x13]": "value2",
                "param_1[0x14]": "value3",
                "param_1[0x15]": "value4",
                "process_data_08004fdc": "print_error_message",
                "set_memory_address_080031fc": "set_memory_address",
                "uVar3": "memory_address",
                "uVar4": "value_index",
                "update_registers_08000fb4": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "additional_data": {
                "DAT_20000088": {
                    "1": "buffer_size"
                },
                "DAT_2000008a": {
                    "1": "configured_value"
                },
                "FUN_08003cc8": {
                    "1": "initialize_uart_settings",
                    "18": "initialize_uart",
                    "2": "configure_uart_pins",
                    "8": "initialize_uart_configuration"
                },
                "configure_uart_pins_08003978": {
                    "7": "configure_uart_pins"
                },
                "find_value_or_default_0800351e": {
                    "2": "find_value_or_default"
                },
                "find_value_or_zero_080034f4": {
                    "2": "find_value_or_zero"
                },
                "iVar1": {
                    "1": "found_value",
                    "13": "value",
                    "2": "result",
                    "7": "value1"
                },
                "uVar2": {
                    "1": "value_found_2",
                    "16": "default_value",
                    "2": "value",
                    "7": "value2"
                }
            },
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "calling": [
                "FUN_08003d18"
            ],
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int value;\n  undefined4 default_value;\n  \n  value = find_value_or_zero(0x38,&DAT_08005ca0);\n  if (value != 0) {\n    default_value = find_value_or_zero(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_or_default(default_value,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    configure_uart_pins(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_08003cc8",
            "entrypoint": "0x08003cc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "configure_uart_pins_08003978": "configure_uart_pins",
                "find_value_or_default_0800351e": "find_value_or_default",
                "find_value_or_zero_080034f4": "find_value_or_zero",
                "iVar1": "value",
                "uVar2": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d18": {
            "additional_data": {
                "&DAT_08005ca0": {
                    "1": "data_array"
                },
                "&DAT_200002b4": {
                    "1": "array_data",
                    "2": "data_ptr"
                },
                "DAT_08005ca0": {
                    "1": "array_data",
                    "4": "data_array"
                },
                "DAT_20000074": {
                    "1": "length",
                    "3": "uart_value"
                },
                "DAT_200002b4": {
                    "1": "result_array"
                },
                "FUN_08003d18": {
                    "1": "process_and_compare_data",
                    "13": "process_data",
                    "2": "process_and_send_data",
                    "3": "process_and_verify_data",
                    "4": "process_and_check_data",
                    "5": "process_and_validate_data"
                },
                "find_value_or_zero_080034f4": {
                    "1": "find_value",
                    "6": "find_value_or_zero"
                },
                "get_data_08000e30": {
                    "1": "retrieve_data",
                    "2": "get_initial_data",
                    "6": "get_data"
                },
                "iVar1": {
                    "1": "data_address",
                    "10": "data1",
                    "9": "data_1"
                },
                "iVar2": {
                    "1": "data_value_2",
                    "2": "search_result",
                    "8": "found_value",
                    "9": "data_2"
                },
                "initialize_uart_08003cc8": {
                    "1": "initialize_uart_function",
                    "11": "initialize_uart"
                },
                "param_1": {
                    "1": "data_address",
                    "10": "input_param",
                    "2": "data_param",
                    "3": "input_data",
                    "4": "input_value"
                },
                "param_2": {
                    "1": "data_value",
                    "2": "initial_value",
                    "3": "value",
                    "4": "output_param"
                },
                "process_data_08002dd0": {
                    "1": "process_individual_data",
                    "6": "process_data"
                },
                "uVar3": {
                    "1": "loop_index",
                    "12": "index",
                    "4": "loop_counter",
                    "9": "counter"
                }
            },
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "calling": [
                "FUN_080040ec"
            ],
            "code": "\nuint process_data_08003d18(undefined4 input_param,uint output_param)\n\n{\n  int data1;\n  int data_2;\n  uint index;\n  \n  data1 = get_data();\n  data_2 = find_value_or_zero(0x38,&DAT_08005ca0);\n  if (data_2 == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (data_2 = find_value_or_zero(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != data_2))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (initialize_uart(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    data_2 = process_data_08003d18((&DAT_200002b4)[index],input_param,output_param & 0xffff,1000);\n    if (data_2 == 0) {\n      return output_param;\n    }\n    data_2 = get_data();\n  } while ((uint)(data_2 - data1) < 1000);\n  return 0;\n}\n\n",
            "current_name": "process_data_08003d18",
            "entrypoint": "0x08003d18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d18": "process_data_08003d18",
                "find_value_or_zero_080034f4": "find_value_or_zero",
                "get_data_08000e30": "get_data",
                "iVar1": "data1",
                "iVar2": "data_2",
                "initialize_uart_08003cc8": "initialize_uart",
                "param_1": "input_param",
                "param_2": "output_param",
                "process_data_08002dd0": "process_data",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "additional_data": {
                "&DAT_200002b4": {
                    "1": "data_ptr"
                },
                "(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "byte_value"
                },
                "(uVar1 & 0x22) == 0x22": {
                    "1": "bitmask_check"
                },
                "*(&DAT_200002b4)[*(byte *)(input_value + 0x44)]": {
                    "1": "byte_value"
                },
                "*(byte *)(flag + 0x44)": {
                    "1": "index"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "offset_value",
                    "6": "byte_value"
                },
                "0x22": {
                    "1": "comparison_value"
                },
                "0x44": {
                    "2": "offset"
                },
                "DAT_200002b4": {
                    "2": "byte_array",
                    "3": "data_array"
                },
                "FUN_08003dd0": {
                    "1": "is_byte_pattern_matched",
                    "2": "check_flag",
                    "3": "is_flag_set",
                    "9": "check_combination"
                },
                "byte": {
                    "2": "index"
                },
                "combine_bytes_0800312c": {
                    "6": "combine_bytes"
                },
                "param_1": {
                    "1": "param",
                    "2": "flag_value",
                    "21": "input_value",
                    "3": "flag"
                },
                "uVar1": {
                    "1": "combined_result",
                    "2": "combined_bytes_result",
                    "24": "combined_bytes",
                    "4": "combined_value"
                }
            },
            "called": [
                "FUN_0800312c"
            ],
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "code": "\nbool check_combination_08003dd0(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200002b4)[*(index *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "current_name": "check_combination_08003dd0",
            "entrypoint": "0x08003dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003dd0": "check_combination_08003dd0",
                "byte": "index",
                "combine_bytes_0800312c": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003df4": {
            "additional_data": {
                "&DAT_200002b4": {
                    "1": "data_buffer",
                    "6": "byte_array"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "user_input_byte"
                },
                "(byte *)(param_1 + 0x44)": {
                    "1": "byte_index"
                },
                "(uVar1 & 0x21) == 0x21": {
                    "1": "is_bit_set"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "selected_index",
                    "2": "byte_index",
                    "4": "byte_value"
                },
                "0x21": {
                    "1": "desired_value"
                },
                "0x44": {
                    "2": "offset"
                },
                "DAT_200002b4": {
                    "1": "byte_array"
                },
                "FUN_08003df4": {
                    "1": "check_bytes_combine",
                    "2": "check_combination_validity",
                    "3": "check_flag_combination",
                    "7": "is_combination_valid"
                },
                "byte": {
                    "1": "index"
                },
                "combine_bytes_0800312c": {
                    "13": "combine_bytes"
                },
                "param_1": {
                    "1": "combination",
                    "15": "input_value",
                    "2": "input_param",
                    "4": "flag_value"
                },
                "uVar1": {
                    "1": "byte_combination",
                    "20": "combined_bytes",
                    "5": "combined_value"
                }
            },
            "called": [
                "FUN_0800312c"
            ],
            "calling": [
                "FUN_080042e8"
            ],
            "code": "\nbool is_combination_valid_08003df4(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200002b4)[*(index *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "current_name": "is_combination_valid_08003df4",
            "entrypoint": "0x08003df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003df4": "is_combination_valid_08003df4",
                "byte": "index",
                "combine_bytes_0800312c": "combine_bytes",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e18": {
            "additional_data": {
                "(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "data_array"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "input_value"
                },
                "1": {
                    "1": "data_length"
                },
                "FUN_08003e18": {
                    "1": "copy_combination_data",
                    "12": "extract_data",
                    "2": "process_combination",
                    "4": "extract_and_update_data"
                },
                "check_combination_08003dd0": {
                    "3": "check_combination"
                },
                "iVar1": {
                    "1": "result",
                    "17": "combination_check_result",
                    "2": "check_result",
                    "7": "combination_result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_ptr",
                    "4": "input",
                    "7": "input_data",
                    "9": "input_value"
                },
                "param_2": {
                    "1": "output_param",
                    "11": "output_data",
                    "2": "output_buffer",
                    "3": "output_value",
                    "5": "output_ptr",
                    "6": "output"
                },
                "param_3": {
                    "1": "size_of_array",
                    "2": "length",
                    "4": "param3",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "temp2",
                    "2": "value2",
                    "4": "param4",
                    "8": "param_4"
                },
                "update_data_08002efa": {
                    "3": "update_data"
                }
            },
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "calling": [
                "FUN_080042ac"
            ],
            "code": "\nundefined4 extract_data_08003e18(int input_value,undefined *output_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int combination_check_result;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  combination_check_result = check_combination();\n  if (combination_check_result == 0) {\n    *output_data = *(undefined *)(input_value + 0x45);\n    update_data((&DAT_200002b4)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200002b4,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_data_08003e18",
            "entrypoint": "0x08003e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e18": "extract_data_08003e18",
                "check_combination_08003dd0": "check_combination",
                "iVar1": "combination_check_result",
                "param_1": "input_value",
                "param_2": "output_data",
                "update_data_08002efa": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e54": {
            "additional_data": {
                "FUN_08003e54": {
                    "1": "update_data",
                    "25": "update_combination",
                    "3": "update_combination_data"
                },
                "iVar1": {
                    "1": "combination_valid",
                    "16": "result",
                    "3": "check_result",
                    "6": "combination_check_result"
                },
                "param_1": {
                    "1": "param",
                    "11": "combination",
                    "2": "input_value",
                    "3": "input_data",
                    "5": "combination_ptr",
                    "6": "input"
                },
                "param_2": {
                    "1": "data_item",
                    "12": "value",
                    "16": "new_value"
                },
                "param_3": {
                    "1": "value2",
                    "12": "unused",
                    "3": "unused1",
                    "6": "unused_param"
                },
                "param_4": {
                    "1": "other_param",
                    "2": "update_param",
                    "3": "unused2",
                    "4": "additional_data"
                },
                "set_bit_08000ec4": {
                    "5": "set_bit"
                },
                "uVar2": {
                    "1": "byte_index",
                    "19": "index",
                    "4": "byte_value",
                    "7": "combination_index"
                },
                "update_data_08000e60": {
                    "5": "update_data"
                },
                "update_data_08002efa": {
                    "1": "update_data",
                    "2": "update_other_data"
                }
            },
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "calling": [
                "FUN_08004388"
            ],
            "code": "\nvoid update_combination_08003e54(int combination,undefined4 new_value,undefined4 unused,undefined4 additional_data)\n\n{\n  int result;\n  uint index;\n  \n  if (combination != 0) {\n    result = check_combination_08003dd0();\n    if (result == 0) {\n      index = (uint)*(byte *)(combination + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = new_value;\n      *(int *)(&DAT_2000023c + index * 4) = combination;\n      update_data((int)*(char *)(combination + 0x5c),0,1,index,additional_data);\n      set_bit((int)*(char *)(combination + 0x5c));\n      update_other_data((&DAT_200002b4)[*(byte *)(combination + 0x44)],combination + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_combination_08003e54",
            "entrypoint": "0x08003e54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e54": "update_combination_08003e54",
                "iVar1": "result",
                "param_1": "combination",
                "param_2": "new_value",
                "param_3": "unused",
                "param_4": "additional_data",
                "set_bit_08000ec4": "set_bit",
                "uVar2": "index",
                "update_data_08000e60": "update_data",
                "update_data_08002efa": "update_other_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003eac": {
            "additional_data": {
                "&DAT_20000264": {
                    "1": "data_pointer_array"
                },
                "&DAT_2000028c": {
                    "1": "pointer_array"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "array_byte"
                },
                "*(char *)(param_1 + 0x5c)": {
                    "1": "character_value"
                },
                "*(int *)(&DAT_2000028c + (uint)bVar1 * 4)": {
                    "1": "data_address_pointer"
                },
                "*(int *)(param_1 + 0x68)": {
                    "1": "base_address"
                },
                "*(undefined4 *)(&DAT_20000264 + (uint)bVar1 * 4)": {
                    "1": "data_pointer"
                },
                "*(ushort *)(param_1 + 0x6e)": {
                    "1": "relative_offset"
                },
                "FUN_08003eac": {
                    "1": "update_param_data",
                    "14": "update_data",
                    "2": "update_data_and_set_bit",
                    "3": "update_data_entry",
                    "5": "update_and_set_data"
                },
                "bVar1": {
                    "1": "data_offset",
                    "10": "byte_value",
                    "14": "index",
                    "2": "byte_val"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "data_offset",
                    "14": "data_ptr",
                    "2": "data",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "data_value",
                    "19": "new_value",
                    "4": "new_data"
                },
                "set_bit_08000ec4": {
                    "1": "set_bit_flag",
                    "13": "set_bit",
                    "3": "set_data_bit"
                },
                "update_data_08000e60": {
                    "1": "update_data_field",
                    "2": "update_data_1",
                    "9": "update_data"
                },
                "update_data_08002eb2": {
                    "1": "update_data",
                    "2": "update_data_entry",
                    "3": "update_data_2",
                    "4": "update_data_with_offset"
                },
                "ushort": {
                    "1": "short_value"
                }
            },
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "calling": [
                "FUN_080042e8"
            ],
            "code": "\nvoid update_data_08003eac(int data_ptr,undefined4 new_value)\n\n{\n  byte index;\n  \n  if (data_ptr != 0) {\n    index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)index * 4) = new_value;\n    *(int *)(&DAT_2000028c + (uint)index * 4) = data_ptr;\n    update_data_08003eac((int)*(character *)(data_ptr + 0x5c),0,2);\n    set_bit((int)*(character *)(data_ptr + 0x5c));\n    update_data_08003eac_with_offset((&DAT_200002b4)[*(byte *)(data_ptr + 0x44)],\n                 *(int *)(data_ptr + 0x68) + (uint)*(short_value *)(data_ptr + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08003eac",
            "entrypoint": "0x08003eac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "bVar1": "index",
                "char": "character",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "set_bit_08000ec4": "set_bit",
                "update_data_08000e60": "update_data",
                "update_data_08002eb2": "update_data_with_offset",
                "ushort": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f00": {
            "additional_data": {
                "&DAT_200002b4": {
                    "1": "array"
                },
                "10": {
                    "1": "default_value"
                },
                "9": {
                    "1": "max_index"
                },
                "DAT_200002b4": {
                    "1": "array"
                },
                "FUN_08003f00": {
                    "1": "find_number_index",
                    "12": "find_index",
                    "2": "find_number",
                    "4": "find_value_index",
                    "5": "find_number_in_array"
                },
                "param_1": {
                    "1": "num",
                    "12": "value",
                    "2": "element",
                    "3": "input_num",
                    "4": "number"
                },
                "uVar1": {
                    "2": "found_index",
                    "23": "index",
                    "3": "matching_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "code": "\nuint find_index_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "current_name": "find_index_08003f00",
            "entrypoint": "0x08003f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f24": {
            "additional_data": {
                "&DAT_20000214": {
                    "3": "function_table"
                },
                "&DAT_2000023c": {
                    "3": "argument_table"
                },
                "(*(undefined4 *)(&DAT_2000023c + uVar1 * 4))": {
                    "1": "parameter"
                },
                "(*(undefined4 *)(*VAR_2000023c + index * 4))": {
                    "1": "function_arg"
                },
                "(**(code **)(*VAR_20000214 + index * 4))": {
                    "1": "function_ptr"
                },
                "(code **)(&DAT_20000214 + uVar1 * 4)": {
                    "1": "function_pointer"
                },
                "*(...)": {
                    "1": "function_argument"
                },
                "*(undefined4 *)(&DAT_2000023c + uVar1 * 4)": {
                    "1": "function_parameter",
                    "4": "parameter"
                },
                "**(code **)(&DAT_20000214 + uVar1 * 4)": {
                    "1": "function_address"
                },
                "**(code **)(...)": {
                    "1": "function_pointer"
                },
                "DAT_20000214": {
                    "1": "function_pointers_array",
                    "2": "function_ptrs",
                    "4": "function_array",
                    "5": "function_table"
                },
                "DAT_2000023c": {
                    "1": "parameters",
                    "2": "arguments",
                    "3": "parameter_array"
                },
                "FUN_08003f24": {
                    "1": "execute_action",
                    "17": "execute_function",
                    "3": "execute_function_at_index",
                    "4": "execute_selected_function",
                    "5": "execute_function_based_on_index"
                },
                "code": {
                    "1": "function_pointer"
                },
                "code **": {
                    "3": "function_pointer"
                },
                "find_index_08003f00": {
                    "1": "find_function_index",
                    "27": "find_index"
                },
                "uVar1": {
                    "2": "function_index",
                    "29": "index"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_08003f00"
            ],
            "calling": [
                "FUN_08002f66"
            ],
            "code": "\nvoid execute_function_08003f24(void)\n\n{\n  uint index;\n  \n  index = find_index();\n  if (index < 10) {\n    (**(function_ptr **)(&DAT_20000214 + index * 4))(*(undefined4 *)(&DAT_2000023c + index * 4));\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_08003f24",
            "entrypoint": "0x08003f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f24": "execute_function_08003f24",
                "code": "function_ptr",
                "find_index_08003f00": "find_index",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f48": {
            "additional_data": {
                "&DAT_20000264": {
                    "1": "code_ptr_array"
                },
                "&DAT_2000028c": {
                    "1": "data_ptr"
                },
                "(&DAT_200002b4)[byteValue]": {
                    "1": "data_pointer"
                },
                "(*(byte *)(iVar3 + 0x44))": {
                    "1": "byte_value"
                },
                "(code **)(&DAT_20000264 + uVar1 * 4)": {
                    "1": "code_func_ptr"
                },
                "(uint)*(ushort *)(iVar3 + 0x6e)": {
                    "1": "multiplier"
                },
                "*(byte *)": {
                    "1": "byte_value"
                },
                "*(byte *)(iVar3 + 0x44)": {
                    "1": "data_byte",
                    "2": "byte_value"
                },
                "*(code **)": {
                    "1": "function_pointer"
                },
                "*(int *)": {
                    "1": "int_value"
                },
                "*(int *)(&DAT_2000028c + uVar1 * 4)": {
                    "1": "data_ptr"
                },
                "*(int *)(iVar3 + 0x68)": {
                    "1": "data_int"
                },
                "*(int *)(iVar3 + 0x68) + (uint)*(ushort *)(iVar3 + 0x6e)": {
                    "1": "value_b"
                },
                "*(ushort *)": {
                    "1": "ushort_value"
                },
                "*(ushort *)(iVar3 + 0x6e)": {
                    "1": "data_short",
                    "2": "ushort_value"
                },
                "**(code **)(&DAT_20000264 + uVar1 * 4)": {
                    "1": "execute_function"
                },
                "*@(int)": {
                    "1": "value"
                },
                "DAT_20000264": {
                    "1": "function_pointer",
                    "3": "code_array",
                    "4": "function_array"
                },
                "DAT_2000028c": {
                    "1": "data_offset",
                    "7": "data_array"
                },
                "DAT_200002b4": {
                    "1": "data_pointer",
                    "2": "byte_array",
                    "3": "byte_data"
                },
                "FUN_08003f48": {
                    "1": "execute_data_update",
                    "16": "update_data",
                    "3": "update_data_if_valid",
                    "8": "process_data"
                },
                "PTR_08003f00": {
                    "1": "<unchanged>"
                },
                "byte": {
                    "1": "byte_value"
                },
                "find_index_08003f00": {
                    "23": "find_index",
                    "3": "find_valid_index"
                },
                "iVar2": {
                    "1": "result_code",
                    "30": "result"
                },
                "iVar3": {
                    "1": "data_address",
                    "2": "data_ptr",
                    "24": "data"
                },
                "uVar1": {
                    "1": "valid_index",
                    "29": "index"
                },
                "update_data_08002eb2": {
                    "1": "update_data_function",
                    "21": "update_data"
                },
                "ushort": {
                    "1": "short_value"
                }
            },
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "calling": [
                "FUN_08002f4c"
            ],
            "code": "\nvoid update_data_08003f48(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = find_index();\n  data = *(int *)(&DAT_2000028c + index * 4);\n  if ((index < 10) && (result = (**(code **)(&DAT_20000264 + index * 4))(data), result != -1)) {\n    update_data_08003f48((&DAT_200002b4)[*(byte_value *)(data + 0x44)],\n                 *(int *)(data + 0x68) + (uint)*(short_value *)(data + 0x6e),1);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08003f48",
            "entrypoint": "0x08003f48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f48": "update_data_08003f48",
                "byte": "byte_value",
                "find_index_08003f00": "find_index",
                "iVar2": "result",
                "iVar3": "data",
                "uVar1": "index",
                "update_data_08002eb2": "update_data",
                "ushort": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f94": {
            "called": [],
            "calling": [
                "FUN_08002ffc"
            ],
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003f94",
            "entrypoint": "0x08003f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004094": {
            "additional_data": {
                "&DAT_200002dc": {
                    "1": "current_alloc_ptr"
                },
                "&DAT_20000674": {
                    "1": "error_code"
                },
                "&DAT_20000678": {
                    "1": "initial_ptr",
                    "2": "initial_memory"
                },
                "&stack0x00000000": {
                    "1": "end_of_stack"
                },
                "D": {
                    "1": "end_of_stack"
                },
                "DAT_200002dc": {
                    "1": "current_address",
                    "2": "current_memory",
                    "8": "current_pointer"
                },
                "DAT_20000674": {
                    "1": "error_flag",
                    "13": "error_code"
                },
                "DAT_20000678": {
                    "1": "default_memory_ptr",
                    "3": "initial_pointer"
                },
                "FUN_08004094": {
                    "1": "reserve_memory",
                    "28": "allocate_memory"
                },
                "param_1": {
                    "1": "block_size",
                    "29": "size"
                },
                "puVar1": {
                    "1": "memory_ptr",
                    "23": "allocated_memory"
                },
                "stack0x00000000": {
                    "1": "end_of_stack",
                    "2": "stack_pointer"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800500c"
            ],
            "code": "\nundefined * allocate_memory_08004094(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocated_memory = DAT_200002dc;\n  if (DAT_200002dc + size <= end_of_memory) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocated_memory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "current_name": "allocate_memory_08004094",
            "entrypoint": "0x08004094",
            "imported": false,
            "improved": true,
            "renaming": {
                "&stack0x00000000": "end_of_memory",
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_bottom"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040d0": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "0xffffffff": {
                    "1": "default_value"
                },
                "DAT_xxxxxxx": {
                    "1": "dat_data"
                },
                "FUN_080040d0": {
                    "1": "initialize_function",
                    "12": "get_error_code",
                    "2": "initialize_value",
                    "3": "initialize_return_value",
                    "6": "get_default_value"
                },
                "PTR_xxxxxxx": {
                    "1": "ptr_data"
                },
                "return": {
                    "1": "return_value"
                },
                "undefined4": {
                    "1": "error_code",
                    "2": "unsigned_int",
                    "4": "int"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nint get_error_code_080040d0(void)\n\n{\n  status 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_080040d0",
            "entrypoint": "0x080040d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0",
                "return": "status",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040d6": {
            "additional_data": {
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "page_address"
                },
                "0x2000": {
                    "1": "page_value",
                    "2": "initial_value"
                },
                "FUN_080040d6": {
                    "1": "set_memory_attribute",
                    "2": "set_memory_flag",
                    "4": "set_memory_size",
                    "7": "set_memory_page_size",
                    "8": "initialize_memory"
                },
                "local_1": {
                    "1": "size"
                },
                "param_1": {
                    "1": "flags",
                    "2": "result",
                    "3": "memory_address",
                    "4": "param",
                    "9": "param1"
                },
                "param_2": {
                    "1": "buffer_address",
                    "2": "data_address",
                    "3": "memory_ptr",
                    "4": "buffer",
                    "8": "memory_address"
                },
                "param_2 + 4": {
                    "1": "buffer_size"
                }
            },
            "called": [],
            "calling": [
                "FUN_080056d4"
            ],
            "code": "\nundefined4 initialize_memory_080040d6(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_080040d6",
            "entrypoint": "0x080040d6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e0": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_080040e0": {
                    "1": "initialize_value",
                    "12": "initialize",
                    "2": "get_return_value",
                    "3": "get_result"
                },
                "PTR_12345678": {
                    "1": "results"
                },
                "PTR_FUN_080040e0": {
                    "1": "result"
                },
                "original_variable_name_1": {
                    "1": "result"
                },
                "return": {
                    "1": "return_value",
                    "4": "result"
                },
                "return value": {
                    "1": "result"
                },
                "return_1": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "2": "bool",
                    "5": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_080056f8"
            ],
            "code": "\nint initialize_080040e0(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_080040e0",
            "entrypoint": "0x080040e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e0": "initialize_080040e0",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e4": {
            "additional_data": {
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<no_variables>": {
                    "1": "<no_changes>"
                },
                "<original_function_name>": {
                    "1": "<more_descriptive_function_name>"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_080040e4": {
                    "1": "initialize_value",
                    "12": "initialize",
                    "2": "get_default_value",
                    "3": "initialize_program",
                    "7": "initialize_application"
                },
                "return": {
                    "2": "result"
                },
                "return 0;": {
                    "1": "return_status;"
                },
                "return value": {
                    "2": "result"
                },
                "undefined4": {
                    "1": "int",
                    "13": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_08005718"
            ],
            "code": "\nvoid initialize_080040e4(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_080040e4",
            "entrypoint": "0x080040e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e4": "initialize_080040e4",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e8": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "FUN_080040e8": {
                    "1": "get_zero",
                    "2": "get_zero_value",
                    "6": "initialize_application",
                    "7": "get_default_value",
                    "9": "initialize"
                },
                "return": {
                    "1": "result"
                },
                "undefined4": {
                    "1": "uint32_t",
                    "11": "void",
                    "2": "int"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800573c"
            ],
            "code": "\nvoid initialize_080040e8(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_080040e8",
            "entrypoint": "0x080040e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e8": "initialize_080040e8",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040ec": {
            "additional_data": {
                "FUN_080040ec": {
                    "1": "process_data_wrapper",
                    "21": "process_data",
                    "4": "process_and_return"
                },
                "param_1": {
                    "1": "param",
                    "11": "unused_param",
                    "2": "input_param",
                    "5": "unused"
                },
                "param_2": {
                    "1": "input1",
                    "2": "input_param",
                    "3": "data_1",
                    "4": "data_param"
                },
                "param_3": {
                    "1": "input_param_1",
                    "2": "input_param2",
                    "3": "input_param_2"
                },
                "param_4": {
                    "1": "data_param_4",
                    "2": "unused_param",
                    "3": "unused"
                },
                "param_5": {
                    "1": "unused_param"
                },
                "process_data_08003d18": {
                    "1": "process_data_helper"
                }
            },
            "called": [
                "FUN_08003d18"
            ],
            "calling": [
                "FUN_0800562a"
            ],
            "code": "\nvoid process_data_080040ec(undefined4 unused_param,undefined4 data_param,undefined4 data_2,undefined4 unused)\n\n{\n  process_data_080040ec_helper(data_param,data_2,data_2,unused,unused);\n  return;\n}\n\n",
            "current_name": "process_data_080040ec",
            "entrypoint": "0x080040ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040ec": "process_data_080040ec",
                "param_1": "unused_param",
                "param_2": "data_param",
                "param_3": "data_2",
                "param_4": "unused",
                "process_data_08003d18": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040f8": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "loop_count",
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "temp"
                },
                "<original_variable_name_3>": {
                    "1": "flag"
                },
                "DAT_": {
                    "1": "dat"
                },
                "FUN_080040f8": {
                    "1": "loop_forever",
                    "25": "infinite_loop",
                    "3": "run_infinite_loop"
                },
                "PTR_": {
                    "1": "unchanged"
                },
                "do": {
                    "1": "loop"
                },
                "original_variable_name_1": {
                    "1": "counter"
                },
                "original_variable_name_2": {
                    "1": "condition"
                },
                "true": {
                    "1": "condition",
                    "2": "true"
                }
            },
            "called": [
                "FUN_080040f8"
            ],
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "code": "\nvoid infinite_loop_080040f8(void)\n\n{\n  start {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "infinite_loop_080040f8",
            "entrypoint": "0x080040f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8",
                "do": "start"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040fc": {
            "additional_data": {
                "": {
                    "3": ""
                },
                "DAT_20000674": {
                    "1": "status",
                    "11": "data_value",
                    "4": "initial_value"
                },
                "FUNC_PARAM_1": {
                    "1": "param1"
                },
                "FUN_080040fc": {
                    "1": "initialize_variable",
                    "17": "initialize_data",
                    "4": "initialize_value",
                    "5": "set_initial_value"
                },
                "return": {
                    "1": "status"
                },
                "return_value": {
                    "1": "status"
                },
                "undefined4": {
                    "2": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_080055d0"
            ],
            "code": "\nvoid initialize_data_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  status 0xffffffff;\n}\n\n",
            "current_name": "initialize_data_080040fc",
            "entrypoint": "0x080040fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800410c": {
            "additional_data": {
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "FUN_0800410c": {
                    "1": "is_true",
                    "2": "initialize_value",
                    "5": "get_return_value",
                    "6": "get_one",
                    "8": "initialize"
                },
                "PTR_FUN_0800410c": {
                    "1": "ptr_get_num_of_records"
                },
                "PTR_param1": {
                    "1": "param1"
                },
                "PTR_param2": {
                    "1": "param2"
                },
                "return": {
                    "2": "status",
                    "9": "result"
                },
                "return_value": {
                    "1": "status"
                },
                "undefined4": {
                    "1": "void",
                    "2": "uint32_t",
                    "4": "int"
                },
                "val": {
                    "1": "return_value"
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "code": "\nint initialize_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_0800410c",
            "entrypoint": "0x0800410c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800410c": "initialize_0800410c",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004110": {
            "additional_data": {
                "DAT_08005a18": {
                    "1": "array1"
                },
                "DAT_08005a3c": {
                    "1": "array2"
                },
                "DAT_08005d3c": {
                    "1": "data_array"
                },
                "DAT_200002e0": {
                    "1": "bit_array"
                },
                "DAT_2000030c": {
                    "1": "bit_array2"
                },
                "FUN_08004110": {
                    "1": "process",
                    "13": "process_data",
                    "3": "process_function",
                    "5": "process_param",
                    "6": "process_parameter"
                },
                "find_value_in_array_0800355e": {
                    "1": "find_value",
                    "5": "find_value_in_array"
                },
                "get_bit_value_08003138": {
                    "6": "get_bit_value"
                },
                "iVar1": {
                    "1": "is_value_found",
                    "2": "result",
                    "25": "bit_value"
                },
                "iVar3": {
                    "1": "data_index",
                    "4": "value_index",
                    "5": "index",
                    "9": "array_index"
                },
                "param_1": {
                    "1": "parameter",
                    "15": "index",
                    "2": "data_index",
                    "6": "input_value"
                },
                "param_2": {
                    "1": "register_value",
                    "15": "mode",
                    "2": "operation_type",
                    "3": "register_mode"
                },
                "param_3": {
                    "1": "param",
                    "2": "parameter",
                    "3": "param_array",
                    "6": "value"
                },
                "param_4": {
                    "1": "input_data",
                    "2": "buffer",
                    "3": "data_ptr",
                    "6": "array"
                },
                "process_data_080033d8": {
                    "6": "process_data"
                },
                "process_values_08003414": {
                    "6": "process_values"
                },
                "puVar2": {
                    "1": "value_ptr",
                    "13": "array_ptr",
                    "2": "ptr",
                    "3": "data_ptr",
                    "5": "array_pointer"
                },
                "set_bit_in_array_0800314e": {
                    "8": "set_bit_in_array"
                },
                "update_bit_0800316c": {
                    "8": "update_bit"
                },
                "update_registers_08003486": {
                    "8": "update_registers"
                }
            },
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "calling": [
                "FUN_08000600"
            ],
            "code": "\nvoid process_data_08004110(uint index,undefined4 mode,undefined4 value,undefined *data)\n\n{\n  int bit_value;\n  undefined *array_ptr;\n  int value;\n  \n  if (index < 0x60) {\n    value = (int)*(short *)(&DAT_08005d3c + index * 2);\n    array_ptr = &DAT_08005d3c;\n  }\n  else {\n    value = -1;\n    array_ptr = data;\n  }\n  if (value != -1) {\n    bit_value = get_bit_value(value,&DAT_200002e0,value,array_ptr,data);\n    if (bit_value != 0) {\n      bit_value = find_value_in_array(value,&DAT_08005a18);\n      if (bit_value == 0) {\n        bit_value = find_value_in_array(value,&DAT_08005a3c);\n        if (bit_value != 0) {\n          process_values(value);\n        }\n      }\n      else {\n        process_data_08004110(value);\n      }\n      update_bit(value,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      update_registers(value,0);\n      break;\n    case 1:\n      update_registers(value,1,0);\n      break;\n    case 2:\n      update_registers(value,0,1);\n      break;\n    case 3:\n      update_registers(value,0,2);\n    }\n    set_bit_in_array(value,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08004110",
            "entrypoint": "0x08004110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "find_value_in_array_0800355e": "find_value_in_array",
                "get_bit_value_08003138": "get_bit_value",
                "iVar1": "bit_value",
                "iVar3": "value",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "value",
                "param_4": "data",
                "process_data_080033d8": "process_data",
                "process_values_08003414": "process_values",
                "puVar2": "array_ptr",
                "set_bit_in_array_0800314e": "set_bit_in_array",
                "update_bit_0800316c": "update_bit",
                "update_registers_08003486": "update_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041bc": {
            "additional_data": {
                "FUN_080041bc": {
                    "1": "set_param_value",
                    "10": "process_data",
                    "2": "update_parameter_value",
                    "3": "process_param_value",
                    "4": "update_param_value"
                },
                "get_bit_value_08003138": {
                    "2": "get_bit_value"
                },
                "get_memory_address_0800318c": {
                    "1": "get_memory_address"
                },
                "iVar1": {
                    "28": "bit_value",
                    "3": "bit_result"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "param_index",
                    "24": "index"
                },
                "param_2": {
                    "1": "param_2",
                    "11": "value",
                    "2": "bit_mask",
                    "7": "value1"
                },
                "param_3": {
                    "1": "length",
                    "2": "param",
                    "3": "address",
                    "7": "value2"
                },
                "param_4": {
                    "1": "data_param",
                    "17": "data",
                    "2": "data_pointer",
                    "4": "data_ptr"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "2": "array_ptr",
                    "3": "data_pointer",
                    "9": "pointer"
                },
                "set_param_value_080034b6": {
                    "2": "set_param_value"
                },
                "uVar2": {
                    "2": "address",
                    "26": "memory_address",
                    "3": "mem_address"
                },
                "uVar4": {
                    "1": "array_value",
                    "3": "data_value",
                    "6": "short_value",
                    "7": "bit_mask"
                }
            },
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "code": "\nvoid process_data_080041bc(uint index,undefined4 value,undefined4 value2,undefined *data)\n\n{\n  int bit_value;\n  undefined4 memory_address;\n  undefined *pointer;\n  uint value;\n  \n  if (index < 0x60) {\n    value = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    value = 0xffffffff;\n    pointer = data;\n  }\n  if ((value != 0xffffffff) &&\n     (bit_value = get_bit_value(value,&DAT_2000030c,value2,pointer,data), bit_value != 0)) {\n    memory_address = get_mem_address((value << 0x18) >> 0x1c);\n    set_param_value(memory_address,1 << (value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080041bc",
            "entrypoint": "0x080041bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "get_bit_value_08003138": "get_bit_value",
                "get_memory_address_0800318c": "get_mem_address",
                "iVar1": "bit_value",
                "param_1": "index",
                "param_2": "value",
                "param_3": "value2",
                "param_4": "data",
                "puVar3": "pointer",
                "set_param_value_080034b6": "set_param_value",
                "uVar2": "memory_address",
                "uVar4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004204": {
            "additional_data": {
                "FUN_08004204": {
                    "1": "initialize_global_data",
                    "2": "initialize_and_return_data",
                    "21": "initialize_data",
                    "4": "initialize"
                },
                "PTR_0800346c": {
                    "1": "data"
                },
                "initialize_data_0800346c": {
                    "1": "initialize_local_data",
                    "17": "initialize_data",
                    "4": "initialize_data_helper"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [
                "FUN_0800346c"
            ],
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "code": "\nvoid initialize_data_08004204(void)\n\n{\n  initialize_data_08004204();\n  return;\n}\n\n",
            "current_name": "initialize_data_08004204",
            "entrypoint": "0x08004204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004204": "initialize_data_08004204",
                "initialize_data_0800346c": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004240": {
            "additional_data": {
                "& 0x3f": {
                    "1": "constant2"
                },
                "(param_1 + 0x138)": {
                    "1": "first_value"
                },
                "(param_1 + 0x13a)": {
                    "1": "second_value"
                },
                "*(short *)(base_address + 0x138)": {
                    "1": "offset1"
                },
                "*(short *)(base_address + 0x13a)": {
                    "1": "offset2"
                },
                "*(short *)(param_1 + 0x138)": {
                    "1": "value_a",
                    "2": "offset_1",
                    "3": "value1",
                    "7": "first_value"
                },
                "*(short *)(param_1 + 0x13a)": {
                    "1": "subtraction_value",
                    "2": "offset_2",
                    "3": "value_2",
                    "7": "second_value"
                },
                "0x138": {
                    "1": "offset_138",
                    "3": "offset1"
                },
                "0x13a": {
                    "1": "offset_13a",
                    "3": "offset2"
                },
                "0x40": {
                    "2": "constant1"
                },
                "<unnamed_variable1>": {
                    "1": "first_value"
                },
                "<unnamed_variable2>": {
                    "1": "second_value"
                },
                "FUN_08004240": {
                    "1": "calculate_shift",
                    "15": "calculate_offset",
                    "3": "calculate_shift_amount",
                    "4": "calculate_result",
                    "6": "calculate_checksum"
                },
                "PTR_param_1_138": {
                    "1": "pointer_to_checksum"
                },
                "PTR_param_1_13a": {
                    "1": "pointer_to_offset"
                },
                "param_1": {
                    "1": "data_offset",
                    "10": "base_address",
                    "2": "address",
                    "3": "offset"
                },
                "result": {
                    "1": "checksum"
                },
                "short": {
                    "1": "value"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004338"
            ],
            "code": "\nuvalue calculate_offset_08004240(int input_value)\n\n{\n  return (*(value *)(input_value + 0x138) + 0x40) - *(value *)(input_value + 0x13a) & 0x3f;\n}\n\n",
            "current_name": "calculate_offset_08004240",
            "entrypoint": "0x08004240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "input_value",
                "short": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042ac": {
            "additional_data": {
                "FUN_080042ac": {
                    "1": "update_data_and_index",
                    "12": "update_data",
                    "3": "process_data",
                    "6": "extract_and_store_data",
                    "7": "extract_and_update_data"
                },
                "iVar1": {
                    "1": "data_extraction_result",
                    "12": "extraction_result",
                    "3": "error_code",
                    "6": "extract_result",
                    "8": "result"
                },
                "local_9": {
                    "25": "extracted_data",
                    "6": "extracted_value"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input_param",
                    "3": "data_pointer",
                    "4": "input",
                    "6": "data_ptr",
                    "8": "input_data"
                },
                "uVar2": {
                    "1": "computed_value",
                    "14": "new_index",
                    "2": "incremented_value",
                    "6": "new_value",
                    "8": "updated_value"
                }
            },
            "called": [
                "FUN_08003e18"
            ],
            "calling": [],
            "code": "\nvoid update_data_080042ac(int input_data)\n\n{\n  int extraction_result;\n  ushort new_index;\n  undefined extracted_data;\n  \n  extraction_result = extract_data_08003e18(input_data,&extracted_data);\n  if ((extraction_result == 0) &&\n     (new_index = *(short *)(input_data + 100) + 1U & 0x3f, new_index != *(ushort *)(input_data + 0x66))) {\n    *(undefined *)(*(int *)(input_data + 0x60) + (uint)*(ushort *)(input_data + 100)) = extracted_data;\n    *(ushort *)(input_data + 100) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_080042ac",
            "entrypoint": "0x080042ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "iVar1": "extraction_result",
                "local_9": "extracted_data",
                "param_1": "input_data",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042e8": {
            "additional_data": {
                "FUN_080042e8": {
                    "1": "update_parameter",
                    "2": "initialize_data",
                    "5": "update_and_validate_combination",
                    "8": "update_data",
                    "9": "update_combination"
                },
                "LAB_0800420c_1": {
                    "1": "new_data"
                },
                "bVar1": {
                    "1": "temp_byte_1",
                    "13": "byte_value",
                    "2": "new_byte"
                },
                "bVar2": {
                    "1": "trimmed_byte_value",
                    "2": "adjusted_byte_value",
                    "5": "masked_byte",
                    "6": "masked_value"
                },
                "iVar3": {
                    "1": "combination_value",
                    "2": "combination_index",
                    "7": "incremented_value",
                    "9": "combination_count"
                },
                "is_combination_valid_08003df4": {
                    "2": "is_combination_valid"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "3": "base_address",
                    "4": "data_ptr",
                    "6": "combination"
                },
                "param_2": {
                    "1": "new_data",
                    "16": "new_value",
                    "2": "new_element",
                    "7": "value"
                },
                "update_data_08003eac": {
                    "1": "update_data_with_label"
                }
            },
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "calling": [],
            "code": "\nundefined4 update_combination_080042e8(int combination,undefined new_value)\n\n{\n  byte byte_value;\n  byte masked_value;\n  int combination_count;\n  \n  *(undefined *)(combination + 0x10) = 1;\n  combination_count = *(ushort *)(combination + 0x140) + 1;\n  byte_value = (byte)combination_count;\n  masked_value = byte_value & 0x7f;\n  if (combination_count == 0) {\n    masked_value = -(-byte_value & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(combination + 0x142) == (ushort)masked_value);\n  *(undefined *)(*(int *)(combination + 0x13c) + (uint)*(ushort *)(combination + 0x140)) = new_value;\n  *(ushort *)(combination + 0x140) = (ushort)masked_value;\n  combination_count = is_combination_valid(combination + 0xd4);\n  if (combination_count == 0) {\n    update_data(combination + 0xd4,&new_data);\n  }\n  return 1;\n}\n\n",
            "current_name": "update_combination_080042e8",
            "entrypoint": "0x080042e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042e8": "update_combination_080042e8",
                "LAB_0800420c_1": "new_data",
                "bVar1": "byte_value",
                "bVar2": "masked_value",
                "iVar3": "combination_count",
                "is_combination_valid_08003df4": "is_combination_valid",
                "param_1": "combination",
                "param_2": "new_value",
                "update_data_08003eac": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004338": {
            "called": [
                "FUN_08004240"
            ],
            "calling": [
                "FUN_08004658"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004338",
            "entrypoint": "0x08004338",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004364": {
            "additional_data": {
                "*(int *)(param_1 + 0x134)": {
                    "1": "data_offset"
                },
                "*(int *)(param_1 + 0x13c)": {
                    "1": "parameter4_address"
                },
                "*(undefined2 *)(param_1 + 0x138)": {
                    "1": "parameter2_value",
                    "2": "value1"
                },
                "*(undefined2 *)(param_1 + 0x13a)": {
                    "1": "flag2",
                    "2": "value2"
                },
                "*(undefined2 *)(param_1 + 0x140)": {
                    "1": "flag3",
                    "2": "value3"
                },
                "*(undefined2 *)(param_1 + 0x142)": {
                    "1": "updated_field6",
                    "2": "value4"
                },
                "0": {
                    "1": "new_value2"
                },
                "0x11": {
                    "1": "constant_value",
                    "2": "value1"
                },
                "0x134": {
                    "1": "offset_data1",
                    "5": "offset1"
                },
                "0x138": {
                    "1": "variable1",
                    "4": "offset2"
                },
                "0x13a": {
                    "1": "value2",
                    "4": "offset3"
                },
                "0x13c": {
                    "1": "offset_data4",
                    "4": "offset4"
                },
                "0x140": {
                    "1": "offset_data5",
                    "4": "offset5"
                },
                "0x142": {
                    "1": "offset_data6",
                    "4": "offset6"
                },
                "0x51": {
                    "1": "constant2",
                    "2": "value2"
                },
                "<original_variable_name_1>": {
                    "2": "offset1"
                },
                "<original_variable_name_2>": {
                    "2": "offset2"
                },
                "<original_variable_name_3>": {
                    "2": "offset3"
                },
                "<original_variable_name_4>": {
                    "1": "offset4"
                },
                "<param_1 + 0x134>": {
                    "1": "<data_offset1>"
                },
                "<param_1 + 0x138>": {
                    "1": "<data_offset2>"
                },
                "<param_1 + 0x13a>": {
                    "1": "<data_offset3>"
                },
                "<param_1 + 0x13c>": {
                    "1": "<data_offset4>"
                },
                "<param_1 + 0x140>": {
                    "1": "<data_offset5>"
                },
                "<param_1 + 0x142>": {
                    "1": "<data_offset6>"
                },
                "<param_1>": {
                    "1": "<data_address>"
                },
                "FUN_08004364": {
                    "1": "set_values",
                    "2": "update_data",
                    "3": "initialize_function",
                    "6": "initialize_parameters",
                    "8": "initialize_data"
                },
                "param_1": {
                    "1": "data_address",
                    "18": "base_address",
                    "2": "data_structure_address"
                },
                "param_1 + 0x11": {
                    "1": "data_address",
                    "3": "offset1"
                },
                "param_1 + 0x134": {
                    "1": "start_address",
                    "2": "data_offset1"
                },
                "param_1 + 0x138": {
                    "1": "data_offset2",
                    "3": "value1"
                },
                "param_1 + 0x13a": {
                    "1": "p_data_flag2",
                    "3": "value2"
                },
                "param_1 + 0x13c": {
                    "1": "data_offset2"
                },
                "param_1 + 0x140": {
                    "1": "param1_offset5",
                    "3": "value3"
                },
                "param_1 + 0x142": {
                    "1": "output_f",
                    "3": "value4"
                },
                "param_1 + 0x51": {
                    "1": "value_d",
                    "3": "offset2"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800447c"
            ],
            "code": "\nvoid initialize_data_08004364(int base_address)\n\n{\n  *(int *)(base_address + 0x134) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x138) = 0;\n  *(undefined2 *)(base_address + 0x13a) = 0;\n  *(int *)(base_address + 0x13c) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x140) = 0;\n  *(undefined2 *)(base_address + 0x142) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08004364",
            "entrypoint": "0x08004364",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004388": {
            "additional_data": {
                "FUN_08004388": {
                    "1": "configure_serial_interface",
                    "2": "initialize_serial",
                    "3": "configure_uart_pins",
                    "5": "configure_serial",
                    "6": "configure_hardware_serial",
                    "8": "configure_serial_port"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "assertion_failed_jump",
                    "3": "jumptable",
                    "9": "jump_table"
                },
                "assertion_failed_08004808": {
                    "1": "handle_assertion_failure"
                },
                "bVar1": {
                    "1": "bit_mode",
                    "2": "config_bits",
                    "3": "config_bit",
                    "5": "config_mask"
                },
                "configure_uart_pins_08003978": {
                    "1": "initialize_uart_pins",
                    "2": "configure_uart_pins"
                },
                "extraout_r1": {
                    "1": "extra_output1",
                    "2": "extra_output",
                    "3": "result",
                    "6": "error_code"
                },
                "iVar2": {
                    "1": "uart_index",
                    "2": "uart_mode",
                    "3": "pin_config",
                    "7": "config_value"
                },
                "param_1": {
                    "1": "serial_interface",
                    "11": "serial_port",
                    "2": "serial_object",
                    "3": "serial_port_address",
                    "5": "port_address"
                },
                "param_2": {
                    "1": "value",
                    "28": "baud_rate"
                },
                "param_3": {
                    "1": "param_byte",
                    "10": "config_byte",
                    "2": "configuration",
                    "3": "config_bits"
                },
                "uRam0000012e": {
                    "1": "new_uram_variable"
                },
                "update_combination_08003e54": {
                    "3": "update_combination"
                }
            },
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "calling": [
                "FUN_08000600"
            ],
            "code": "\nvoid configure_serial_port_08004388(int serial_port,undefined4 baud_rate,byte config_byte)\n\n{\n  uint error_code;\n  byte config_mask;\n  int config_value;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x144) = config_byte;\n  config_mask = config_byte & 7;\n  if (config_mask == 4) {\n    config_value = 7;\n  }\n  else if (config_mask == 6) {\n    config_value = 8;\n  }\n  else if (config_mask == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config_byte & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config_byte & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config_byte & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    configure_uart_pins(serial_port + 0xd4);\n    update_combination(serial_port + 0xd4,0x80042ad);\n    return;\n  }\n  jump_table = (code *)0x8004432;\n  handle_assertion_failure(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (error_code < 0x60) {\n    new_uram_variable = *(undefined2 *)(&DAT_08005d3c + error_code * 2);\n  }\n  else {\n    new_uram_variable = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "configure_serial_port_08004388",
            "entrypoint": "0x08004388",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004388": "configure_serial_port_08004388",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "assertion_failed_08004808": "handle_assertion_failure",
                "bVar1": "config_mask",
                "configure_uart_pins_08003978": "configure_uart_pins",
                "extraout_r1": "error_code",
                "iVar2": "config_value",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config_byte",
                "uRam0000012e": "new_uram_variable",
                "update_combination_08003e54": "update_combination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004444": {
            "additional_data": {
                "FUN_08004444": {
                    "1": "initialize_value_for_jump_table",
                    "2": "update_parameter_value",
                    "6": "set_return_value"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable_function",
                    "13": "jump_table"
                },
                "param_1": {
                    "1": "value",
                    "2": "output_address",
                    "4": "address",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "function_selector",
                    "2": "offset",
                    "4": "value",
                    "6": "input_value",
                    "9": "index"
                },
                "uVar1": {
                    "1": "status_value",
                    "2": "updated_value",
                    "4": "value",
                    "5": "result",
                    "9": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800447c"
            ],
            "code": "\nvoid set_return_value_08004444(int base_address,uint index)\n\n{\n  undefined2 return_value;\n  code *jump_table;\n  \n  if (index < 0x60) {\n    return_value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    return_value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 0x12e) = return_value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "set_return_value_08004444",
            "entrypoint": "0x08004444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004444": "set_return_value_08004444",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004460": {
            "additional_data": {
                "FUN_08004460": {
                    "1": "assign_default_value",
                    "3": "update_parameter_value",
                    "5": "set_parameter_value",
                    "8": "set_param_value"
                },
                "param_1": {
                    "1": "function_parameter1",
                    "12": "base_address",
                    "2": "param_address",
                    "3": "target_address",
                    "4": "object_address"
                },
                "param_2": {
                    "1": "value",
                    "13": "index",
                    "2": "value_index",
                    "8": "offset"
                },
                "uVar1": {
                    "1": "parameter_value",
                    "12": "value",
                    "3": "result",
                    "6": "new_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800447c"
            ],
            "code": "\nvoid set_param_value_08004460(int base_address,uint index)\n\n{\n  undefined2 value;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08004460",
            "entrypoint": "0x08004460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004460": "set_param_value_08004460",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800447c": {
            "additional_data": {
                "&DAT_08005c10": {
                    "1": "data1"
                },
                "&DAT_08005ca0": {
                    "1": "data2"
                },
                "&DAT_20000338": {
                    "1": "special_data"
                },
                "&PTR_FUN_080042e8_1_08005ed4": {
                    "1": "function_pointer"
                },
                "*param_1": {
                    "1": "return_data"
                },
                "FUN_0800447c": {
                    "1": "initialize_data_and_set_values",
                    "3": "initialize_data",
                    "5": "initialize_params",
                    "8": "initialize_parameters",
                    "9": "initialize_param_values"
                },
                "PTR_FUN_080042e8_1_08005ed4": {
                    "1": "function_pointer"
                },
                "find_value_or_default_0800351e": {
                    "1": "find_default_value",
                    "14": "find_value_or_default"
                },
                "initialize_data_08004364": {
                    "25": "initialize_data"
                },
                "param_1": {
                    "1": "configuration",
                    "2": "data_array",
                    "3": "output_array",
                    "4": "params",
                    "7": "param_array",
                    "8": "parameters"
                },
                "param_2": {
                    "1": "input_data",
                    "11": "value",
                    "3": "value1",
                    "5": "value_1"
                },
                "param_3": {
                    "1": "param",
                    "10": "param_3",
                    "2": "param_value",
                    "3": "value2",
                    "5": "value_2"
                },
                "param_4": {
                    "1": "param",
                    "10": "param_4",
                    "2": "default_value",
                    "3": "value3",
                    "5": "value_3"
                },
                "set_param_value_08004460": {
                    "6": "set_parameter_value",
                    "9": "set_param_value"
                },
                "set_return_value_08004444": {
                    "15": "set_return_value"
                },
                "uVar1": {
                    "1": "default_value_found",
                    "12": "default_value",
                    "16": "found_value",
                    "2": "value"
                }
            },
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "calling": [
                "FUN_080044d8"
            ],
            "code": "\nundefined4 *\ninitialize_param_values_0800447c(undefined4 *parameters,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 found_value;\n  \n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_FUN_080042e8_1_08005ed4;\n  if (parameters == &DAT_20000338) {\n    set_return_value(&DAT_20000338,0x4c,param_3,&DAT_20000338,param_4);\n    set_param_value(&DAT_20000338,0x4d);\n  }\n  else {\n    found_value = find_value_or_default(value,&DAT_08005c10);\n    *(undefined2 *)((int)parameters + 0x12e) = found_value;\n    found_value = find_value_or_default(value,&DAT_08005ca0);\n    *(undefined2 *)(parameters + 0x4b) = found_value;\n  }\n  initialize_data(parameters);\n  return parameters;\n}\n\n",
            "current_name": "initialize_param_values_0800447c",
            "entrypoint": "0x0800447c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800447c": "initialize_param_values_0800447c",
                "find_value_or_default_0800351e": "find_value_or_default",
                "initialize_data_08004364": "initialize_data",
                "param_1": "parameters",
                "param_2": "value",
                "set_param_value_08004460": "set_param_value",
                "set_return_value_08004444": "set_return_value",
                "uVar1": "found_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080044d8": {
            "additional_data": {
                "0x40004800": {
                    "1": "starting_address"
                },
                "0xffff": {
                    "1": "special_value"
                },
                "DAT_20000338": {
                    "1": "data_1"
                },
                "FUN_080044d8": {
                    "1": "initialize_if_param1",
                    "2": "initialize_if_param1_is_one",
                    "3": "initialize_param_if_valid",
                    "4": "initialize_if_param1_is_1"
                },
                "initialize_param_values_0800447c": {
                    "2": "init_param_values",
                    "3": "initialize_param_values"
                },
                "param_1": {
                    "1": "status_check",
                    "2": "is_initialized",
                    "3": "is_param1_one",
                    "4": "status"
                },
                "param_2": {
                    "1": "value_of_param2",
                    "2": "value_check",
                    "3": "param2_value",
                    "8": "value"
                },
                "param_3": {
                    "1": "param_value3",
                    "2": "param_value_1",
                    "3": "value1",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "fourth_param",
                    "2": "param_value_2",
                    "3": "param4",
                    "5": "param_4"
                }
            },
            "called": [
                "FUN_0800447c"
            ],
            "calling": [],
            "code": "\nvoid initialize_param_values_080044d8(int condition,int value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_param_values_080044d8(&DAT_20000338,0x40004800,param_3,0xffff,param_4);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_param_values_080044d8",
            "entrypoint": "0x080044d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080044d8": "initialize_param_values_080044d8",
                "initialize_param_values_0800447c": "initialize_param_values",
                "param_1": "condition",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004544": {
            "additional_data": {
                "DAT_08005f28": {
                    "1": "data_pointer"
                },
                "FUN_08004544": {
                    "1": "set_function_data",
                    "2": "set_data",
                    "20": "initialize_data",
                    "3": "initialize_data_structure"
                },
                "param_1": {
                    "1": "memory_pointers",
                    "10": "data_pointer",
                    "2": "output_data",
                    "3": "output",
                    "5": "output_pointer"
                },
                "param_2": {
                    "1": "input1",
                    "2": "input_1",
                    "25": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "2": "input_2",
                    "25": "value2"
                },
                "param_4": {
                    "1": "value_3",
                    "2": "input_3",
                    "25": "value3"
                },
                "param_5": {
                    "1": "input4",
                    "2": "input_4",
                    "25": "value4"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004560"
            ],
            "code": "\nvoid initialize_data_08004544(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08005f28;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "current_name": "initialize_data_08004544",
            "entrypoint": "0x08004544",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004560": {
            "additional_data": {
                "DAT_20000480": {
                    "1": "data",
                    "2": "data_array"
                },
                "FUN_08004560": {
                    "1": "initialize_data_if_special_values",
                    "2": "initialize_data_if_conditions_met",
                    "4": "initialize_if_condition",
                    "9": "initialize_data_if_condition_met"
                },
                "initialize_data_08004544": {
                    "1": "initialize_data_for_address_20000480",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "value1",
                    "9": "condition_1"
                },
                "param_2": {
                    "1": "parameter_2",
                    "2": "value2",
                    "9": "condition_2"
                }
            },
            "called": [
                "FUN_08004544"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_if_condition_met_08004560(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_if_condition_met_08004560",
            "entrypoint": "0x08004560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004560": "initialize_data_if_condition_met_08004560",
                "initialize_data_08004544": "initialize_data",
                "param_1": "condition_1",
                "param_2": "condition_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004640": {
            "additional_data": {
                "FUN_08004640": {
                    "1": "combine_bits",
                    "17": "combine_values",
                    "2": "merge_values",
                    "6": "combine_params"
                },
                "param_1": {
                    "1": "value",
                    "16": "value1",
                    "2": "input1",
                    "8": "input_value"
                },
                "param_2": {
                    "1": "param",
                    "16": "value2",
                    "2": "base_value",
                    "4": "bitmask"
                },
                "param_3": {
                    "1": "shifted_value"
                },
                "param_n": {
                    "1": "new_parameter_name"
                },
                "return": {
                    "1": "combined_value"
                },
                "return_value": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "code": "\nuint combine_values_08004640(int value1,uint value2)\n\n{\n  combined_value value2 | value1 << 8;\n}\n\n",
            "current_name": "combine_values_08004640",
            "entrypoint": "0x08004640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2",
                "return": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004646": {
            "called": [],
            "calling": [
                "FUN_08004658"
            ],
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004646",
            "entrypoint": "0x08004646",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004648": {
            "additional_data": {
                "FUN_08004648": {
                    "1": "initialize_and_update_system_config",
                    "11": "initialize_and_update_system",
                    "2": "initialize_system_and_update_configuration",
                    "3": "configure_and_initialize_system",
                    "9": "initialize_system"
                },
                "initialize_system_08000d8": {
                    "1": "initialize_system"
                },
                "initialize_system_08000d8e": {
                    "28": "initialize_system"
                },
                "update_configuration_08000e3c": {
                    "2": "configure_system",
                    "25": "update_configuration"
                }
            },
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "calling": [
                "FUN_08004884"
            ],
            "code": "\nvoid initialize_and_update_system_08004648(void)\n\n{\n  update_configuration(3);\n  initialize_system();\n  return;\n}\n\n",
            "current_name": "initialize_and_update_system_08004648",
            "entrypoint": "0x08004648",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004648": "initialize_and_update_system_08004648",
                "initialize_system_08000d8": "initialize_system",
                "initialize_system_08000d8e": "initialize_system",
                "update_configuration_08000e3c": "update_configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004658": {
            "additional_data": {
                "FUC_08004338": {
                    "1": "cleanup_after_processing"
                },
                "FUC_08004646": {
                    "1": "initialize_data_processing"
                },
                "FUC_08004658": {
                    "1": "execute_data_processing_loop"
                },
                "FUNC_08004338": {
                    "1": "handle_data_processing",
                    "19": "cleanup",
                    "2": "finalize_processing"
                },
                "FUNC_08004646": {
                    "2": "initialize_data_processing",
                    "22": "initialize",
                    "4": "initialize_system"
                },
                "FUN_08004658": {
                    "20": "execute_data_processing_loop",
                    "4": "process_data_loop",
                    "5": "process_data"
                },
                "execute_data_processing_08000c4c": {
                    "1": "execute_data_processing_step",
                    "29": "execute_data_processing"
                },
                "process_data_08000c64": {
                    "1": "process_data_helper",
                    "27": "process_data",
                    "3": "process_data_iteration"
                }
            },
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_data_processing_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  execute_data_processing();\n  do {\n    process_data();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "current_name": "execute_data_processing_loop_08004658",
            "entrypoint": "0x08004658",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004658": "execute_data_processing_loop_08004658",
                "execute_data_processing_08000c4c": "execute_data_processing",
                "process_data_08000c64": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004678": {
            "additional_data": {
                "FUN_08004678": {
                    "1": "count_binary_shifts",
                    "18": "count_set_bits",
                    "5": "count_bits_set",
                    "6": "count_bits"
                },
                "cVar1": {
                    "1": "shift_count",
                    "2": "count",
                    "27": "bit_count"
                },
                "param_1": {
                    "1": "input_num",
                    "17": "number",
                    "2": "input_number",
                    "9": "num"
                }
            },
            "called": [],
            "calling": [
                "FUN_080047d0"
            ],
            "code": "\nchar count_set_bits_08004678(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "current_name": "count_set_bits_08004678",
            "entrypoint": "0x08004678",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "cVar1": "bit_count",
                "param_1": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046b4": {
            "additional_data": {
                "&DAT_20000000": {
                    "1": "pointer3"
                },
                "&LAB_0800468c_1": {
                    "1": "pointer2"
                },
                "FUN_080046b4": {
                    "1": "initialize_memory",
                    "20": "initialize_data",
                    "4": "initialize_parameters"
                },
                "LAB_0800468c_1": {
                    "1": "label",
                    "2": "label0800468c"
                },
                "condition1": {
                    "1": "condition1"
                },
                "condition2": {
                    "1": "condition2"
                },
                "constantValue": {
                    "1": "constant_value"
                },
                "flagValue": {
                    "2": "flag_value"
                },
                "initializeConstants": {
                    "1": "initialize_constants"
                },
                "initializeData": {
                    "1": "new_data",
                    "3": "initialize_data"
                },
                "initializeDataStructures": {
                    "1": "initialize_data_structures"
                },
                "inputCondition": {
                    "1": "input_condition"
                },
                "inputOne": {
                    "1": "input_one"
                },
                "inputTwo": {
                    "1": "input_two"
                },
                "inputValue": {
                    "2": "input_value"
                },
                "label0800468c": {
                    "1": "label0800468c"
                },
                "newVar1": {
                    "1": "initial_value"
                },
                "newVar2": {
                    "1": "step_value"
                },
                "paramFour": {
                    "1": "param_four"
                },
                "paramThree": {
                    "1": "param_three"
                },
                "paramValue": {
                    "1": "param_value"
                },
                "param_1": {
                    "1": "flag_value",
                    "2": "param1",
                    "3": "condition1",
                    "4": "status",
                    "5": "condition"
                },
                "param_2": {
                    "1": "flag_value",
                    "11": "value",
                    "2": "input_value",
                    "3": "condition2",
                    "5": "flag"
                },
                "param_3": {
                    "1": "unused_param_1",
                    "2": "param1",
                    "4": "param3",
                    "8": "unused_param1"
                },
                "param_4": {
                    "1": "param_four",
                    "2": "param2",
                    "3": "unused2",
                    "4": "param4",
                    "8": "unused_param2"
                },
                "shiftLeftBy32": {
                    "2": "shift_left_by32"
                },
                "shiftLeftBy32_080047fe": {
                    "1": "shift_data_left"
                },
                "shift_left_by32_080047fe": {
                    "1": "shift_bits_left",
                    "10": "shift_left_by32",
                    "2": "perform_shift",
                    "3": "shift_data_left",
                    "4": "shift_data_left_by32"
                }
            },
            "called": [
                "FUN_080047fe"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_080046b4(int condition,int value,undefined4 unused_param1,undefined4 unused_param2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shift_left_by32(0,pointer2,&DAT_20000000,&DAT_20000488,unused_param2);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_080046b4",
            "entrypoint": "0x080046b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_0800468c_1": "pointer2",
                "FUN_080046b4": "initialize_data_080046b4",
                "LAB_0800468c_1": "label0800468c",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "shift_left_by32_080047fe": "shift_left_by32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047c0": {
            "additional_data": {
                "&DAT_20000494": {
                    "1": "data_array"
                },
                "DAT_20000494": {
                    "1": "data_flag"
                },
                "FUN_080047c0": {
                    "1": "execute_or_fallback",
                    "17": "process_data",
                    "2": "update_or_invoke_function",
                    "3": "execute_function"
                },
                "count_set_bits_08004678": {
                    "21": "count_set_bits"
                },
                "iVar1": {
                    "1": "index",
                    "2": "count",
                    "23": "bit_count",
                    "4": "bits_count"
                },
                "param_1": {
                    "1": "param",
                    "11": "data",
                    "2": "input_param",
                    "3": "input_data",
                    "5": "data_ptr"
                },
                "update_data_08005760": {
                    "21": "update_data"
                }
            },
            "called": [
                "FUN_08005760"
            ],
            "calling": [
                "FUN_080047d0"
            ],
            "code": "\nvoid process_data_080047c0(int data)\n\n{\n  int bit_count;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  update_data();\n  bit_count = count_set_bits();\n  if ((&DAT_20000494)[bit_count * 5] != 0) {\n    process_data_080047c0();\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080047c0",
            "entrypoint": "0x080047c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047c0": "process_data_080047c0",
                "count_set_bits_08004678": "count_set_bits",
                "iVar1": "bit_count",
                "param_1": "data",
                "update_data_08005760": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047d0": {
            "additional_data": {
                "&DAT_20000494": {
                    "1": "data_pointer",
                    "2": "data_array"
                },
                "FUN_080047d0": {
                    "1": "process_data_if_bit_is_set",
                    "2": "process_bitwise_data",
                    "3": "process_if_set_bits",
                    "5": "process_set_bits",
                    "9": "check_and_process_data"
                },
                "count_set_bits_08004678": {
                    "1": "get_count_set_bits",
                    "13": "count_set_bits",
                    "4": "get_bit_count"
                },
                "iVar1": {
                    "1": "bits_set_count",
                    "18": "bit_count",
                    "2": "num_bits",
                    "5": "num_set_bits"
                },
                "process_data_080047c0": {
                    "1": "process_bitwise_data",
                    "15": "process_data"
                }
            },
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "calling": [
                "FUN_080011a4"
            ],
            "code": "\nvoid check_and_process_data_080047d0(void)\n\n{\n  int bit_count;\n  \n  bit_count = count_set_bits();\n  if ((&DAT_20000494)[bit_count * 5] != 0) {\n    process_data();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_data_080047d0",
            "entrypoint": "0x080047d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047d0": "check_and_process_data_080047d0",
                "count_set_bits_08004678": "count_set_bits",
                "iVar1": "bit_count",
                "process_data_080047c0": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080047fe": {
            "additional_data": {
                "FUN_080047fe": {
                    "1": "shift_values_left_by32",
                    "2": "shift_left_by_32bits",
                    "24": "shift_left_by32",
                    "3": "shift_left_by_32"
                },
                "param_1": {
                    "1": "source_value",
                    "2": "shift_amount",
                    "4": "input_1",
                    "5": "input_value",
                    "6": "input1"
                },
                "param_2": {
                    "1": "input_param_2",
                    "2": "value",
                    "4": "input_2",
                    "6": "input2",
                    "9": "shift_amount"
                }
            },
            "called": [
                "FUN_08004844"
            ],
            "calling": [
                "FUN_080046b4"
            ],
            "code": "\nvoid shift_left_by32_080047fe(undefined4 input1,undefined4 shift_amount)\n\n{\n  shift_left_by32_080047fe_08004844(shift_amount,input1);\n  return;\n}\n\n",
            "current_name": "shift_left_by32_080047fe",
            "entrypoint": "0x080047fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080047fe": "shift_left_by32_080047fe",
                "param_1": "input1",
                "param_2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004808": {
            "additional_data": {
                "FUN_08004808": {
                    "1": "assertion_failed_handler",
                    "13": "assertion_failed",
                    "2": "handle_assertion_failure",
                    "3": "assertion_failure",
                    "5": "process_assertion"
                },
                "param_1": {
                    "1": "failed_assertion_message",
                    "19": "file",
                    "2": "assertion",
                    "6": "file_name"
                },
                "param_2": {
                    "1": "line_num",
                    "16": "line",
                    "2": "file",
                    "3": "file_name",
                    "8": "line_number"
                },
                "param_3": {
                    "1": "assertion_line",
                    "12": "assertion",
                    "2": "condition",
                    "3": "line_number",
                    "4": "assertion_message",
                    "9": "message"
                },
                "param_4": {
                    "1": "suffix",
                    "11": "additional_info",
                    "2": "function_name",
                    "4": "extra_info",
                    "6": "function"
                },
                "pcVar2": {
                    "1": "prefix",
                    "2": "delimiter",
                    "3": "additional_info",
                    "4": "suffix",
                    "6": "message"
                },
                "process_and_update_data_080051ac": {
                    "2": "process_and_update_data"
                },
                "process_data_08004860": {
                    "1": "print_assertion_message"
                },
                "uVar1": {
                    "1": "ptr_to_var",
                    "2": "data_offset",
                    "3": "data",
                    "4": "file_ptr"
                },
                "uVar3": {
                    "1": "update_result",
                    "18": "result",
                    "3": "updated_data",
                    "6": "processed_data"
                },
                "uVar4": {
                    "1": "formatting_args",
                    "2": "extra_data",
                    "3": "additional_info",
                    "5": "additional_info_copy"
                }
            },
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "calling": [
                "FUN_08004388"
            ],
            "code": "\nvoid assertion_failed_08004808(undefined4 file,undefined4 line,char *assertion,undefined4 additional_info)\n\n{\n  undefined4 file_ptr;\n  char *message;\n  undefined8 result;\n  undefined4 additional_info_copy;\n  \n  file_ptr = *(undefined4 *)(DAT_200000a0 + 0xc);\n  additional_info_copy = additional_info;\n  if (assertion == (char *)0x0) goto LAB_0800482c;\n  message = \", function: \";\n  do {\n    print_assertion_message(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",additional_info,file,line\n                 ,message,assertion,additional_info_copy);\n    result = process_and_update_data();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    file_ptr = (undefined4)result;\nLAB_0800482c:\n    assertion = \"\";\n    message = assertion;\n  } while( true );\n}\n\n",
            "current_name": "assertion_failed_08004808",
            "entrypoint": "0x08004808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "additional_info",
                "pcVar2": "message",
                "process_and_update_data_080051ac": "process_and_update_data",
                "process_data_08004860": "print_assertion_message",
                "uVar1": "file_ptr",
                "uVar3": "result",
                "uVar4": "additional_info_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004844": {
            "additional_data": {
                "FUN_08004844": {
                    "1": "shift_left_with_padding",
                    "2": "shift_parameter_left",
                    "3": "shift_left64_bits"
                },
                "param_1": {
                    "1": "num_bits_to_shift",
                    "2": "value",
                    "3": "param",
                    "5": "flags"
                },
                "param_2": {
                    "1": "shift_amount",
                    "12": "value",
                    "2": "arg2",
                    "3": "input_value"
                },
                "ulonglong": {
                    "1": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_080047fe"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shift_left_by32_08004844(undefined4 flags,uint value)\n\n{\n  return (result)value << 0x20;\n}\n\n",
            "current_name": "shift_left_by32_08004844",
            "entrypoint": "0x08004844",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004844": "shift_left_by32_08004844",
                "param_1": "flags",
                "param_2": "value",
                "ulonglong": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004860": {
            "additional_data": {
                "FUN_08004860": {
                    "1": "process_and_modify_data",
                    "2": "process_and_send_data",
                    "22": "process_data",
                    "3": "process_and_update_data"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_value1",
                    "3": "data_1",
                    "4": "input1",
                    "5": "input_param"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "input_2",
                    "3": "input_param_2",
                    "4": "input2",
                    "5": "output_param"
                },
                "param_3": {
                    "1": "temp_param_1",
                    "2": "stack_param1",
                    "3": "output1",
                    "5": "temp_param1"
                },
                "param_4": {
                    "1": "stack_variable_2",
                    "2": "data_4",
                    "3": "output2",
                    "5": "temp_param2"
                },
                "uStack_4": {
                    "1": "local_variable_4",
                    "2": "stack_var2",
                    "3": "temp_var2"
                },
                "uStack_8": {
                    "1": "temp1",
                    "2": "output1_copy"
                }
            },
            "called": [
                "FUN_08004a84"
            ],
            "calling": [
                "FUN_08004808"
            ],
            "code": "\nvoid process_data_08004860(undefined4 input_param,undefined4 output_param,undefined4 temp_param1,undefined4 temp_param2)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  \n  temp_var1 = temp_param1;\n  temp_var2 = temp_param2;\n  process_data_08004860_08004a84(DAT_200000a0,input_param,output_param,&temp_var1,input_param,&temp_var1);\n  return;\n}\n\n",
            "current_name": "process_data_08004860",
            "entrypoint": "0x08004860",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "temp_param1",
                "param_4": "temp_param2",
                "uStack_4": "temp_var2",
                "uStack_8": "temp_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004884": {
            "additional_data": {
                "&DAT_08006008": {
                    "1": "function_queue"
                },
                "(*(code *)(&DAT_08006008)[iVar1])()": {
                    "1": "execute_function_at(index)"
                },
                "FUC_080059f8": {
                    "1": "cleanup_functions"
                },
                "FUNC_080059f8": {
                    "1": "final_cleanup"
                },
                "FUN_08004884": {
                    "1": "execute_function_queue",
                    "26": "execute_functions"
                },
                "iVar1": {
                    "1": "loop_index",
                    "2": "loop_counter",
                    "24": "index",
                    "3": "counter"
                }
            },
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_functions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_08004884",
            "entrypoint": "0x08004884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080048cc": {
            "additional_data": {
                "*param_1": {
                    "1": "current"
                },
                "FUN_080048cc": {
                    "1": "fill_memory_with",
                    "11": "memset",
                    "3": "fill_memory_with_byte",
                    "7": "fill_memory"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "dest",
                    "20": "destination",
                    "4": "memory"
                },
                "param_2": {
                    "1": "byte",
                    "2": "initial_value",
                    "28": "value"
                },
                "param_3": {
                    "1": "block_size",
                    "10": "length",
                    "13": "size",
                    "3": "count"
                },
                "puVar1": {
                    "1": "end_of_memory",
                    "12": "end_address",
                    "4": "end"
                }
            },
            "called": [],
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "code": "\nvoid memset_080048cc(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "current_name": "memset_080048cc",
            "entrypoint": "0x080048cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080048cc": "memset_080048cc",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080048dc": {
            "additional_data": {
                "DAT_200005c8": {
                    "1": "global_var"
                },
                "FUNC_0800557c": {
                    "1": "some_function1",
                    "2": "initialize"
                },
                "FUNC_0800557e": {
                    "1": "process_array"
                },
                "FUN_080048dc": {
                    "1": "rearrange_data",
                    "3": "update_data_structure",
                    "4": "process_data",
                    "5": "reverse_linked_list",
                    "6": "update_linked_list"
                },
                "bVar6": {
                    "1": "is_last_element",
                    "2": "is_first_node",
                    "5": "is_last_node",
                    "6": "is_equal"
                },
                "current_array_element": {
                    "1": "current_array_element"
                },
                "extraout_r1": {
                    "1": "new_node_ptr",
                    "2": "extra_ptr",
                    "3": "extra_output"
                },
                "initialize_function": {
                    "1": "initialize_function"
                },
                "is_equal": {
                    "1": "is_equal"
                },
                "next_array_element": {
                    "1": "next_array_element"
                },
                "num_elements": {
                    "1": "num_elements"
                },
                "output_array": {
                    "1": "output_array"
                },
                "param_1": {
                    "1": "out_list",
                    "2": "result_ptr",
                    "3": "array",
                    "5": "output",
                    "9": "result"
                },
                "param_2": {
                    "1": "length",
                    "11": "size",
                    "2": "list_size",
                    "3": "num_elements"
                },
                "param_3": {
                    "1": "value1",
                    "11": "param3",
                    "2": "input1",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "arg2",
                    "11": "param4",
                    "2": "arg4",
                    "9": "param_4"
                },
                "piVar1": {
                    "1": "ppi_var1",
                    "2": "temp",
                    "3": "temp_var1",
                    "4": "current",
                    "7": "temp_ptr"
                },
                "ppiVar1": {
                    "1": "first_pointer"
                },
                "ppiVar2": {
                    "1": "head",
                    "2": "previous",
                    "3": "temp2",
                    "5": "current_node"
                },
                "ppiVar3": {
                    "1": "previous_pointer",
                    "2": "head",
                    "3": "prev_node"
                },
                "ppiVar3[1]": {
                    "1": "current_value"
                },
                "ppiVar4": {
                    "1": "temp_element",
                    "2": "next_node"
                },
                "ppiVar4[1]": {
                    "1": "search_node_next_ptr"
                },
                "ppiVar5": {
                    "1": "new_size",
                    "11": "new_node",
                    "2": "curr_ptr"
                },
                "ppiVar5[1]": {
                    "1": "temp_node_next_ptr"
                },
                "previous_array_element": {
                    "1": "previous_array_element"
                },
                "temp_array_element": {
                    "1": "temp_array_element"
                }
            },
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "code": "\nvoid update_linked_list_080048dc(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *temp_ptr;\n  int **extra_output;\n  int **current_node;\n  int **prev_node;\n  int **prev_node;\n  int **new_node;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  prev_node = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    temp_node_next_ptr = (int *)0x0;\n    current_node = extra_output;\n    DAT_200005c8 = new_node;\n  }\n  else {\n    prev_node = DAT_200005c8;\n    if (new_node < DAT_200005c8) {\n      current_node = (int **)*new_node;\n      prev_node = (int **)((int)new_node + (int)current_node);\n      is_equal = DAT_200005c8 == prev_node;\n      if (is_equal) {\n        prev_node = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      temp_node_next_ptr = (int *)DAT_200005c8;\n      DAT_200005c8 = new_node;\n      if (is_equal) {\n        prev_node = (int **)((int)prev_node + (int)current_node);\n        *new_node = (int *)prev_node;\n      }\n    }\n    else {\n      do {\n        prev_node = prev_node;\n        prev_node = (int **)search_node_next_ptr;\n        if (prev_node == (int **)0x0) break;\n      } while (prev_node <= new_node);\n      current_node = (int **)*prev_node;\n      if ((int **)((int)prev_node + (int)current_node) == new_node) {\n        current_node = (int **)((int)current_node + (int)*new_node);\n        *prev_node = (int *)current_node;\n        if (prev_node == (int **)((int)prev_node + (int)current_node)) {\n          temp_ptr = *prev_node;\n          prev_node = (int **)previous_node_next_ptr;\n          search_node_next_ptr = (int *)prev_node;\n          current_node = (int **)((int)current_node + (int)temp_ptr);\n          *prev_node = (int *)current_node;\n        }\n      }\n      else if (new_node < (int **)((int)prev_node + (int)current_node)) {\n        *result = 0xc;\n      }\n      else {\n        current_node = (int **)((int)new_node + (int)*new_node);\n        is_equal = prev_node == current_node;\n        if (is_equal) {\n          current_node = (int **)*prev_node;\n          prev_node = (int **)previous_node_next_ptr;\n        }\n        temp_node_next_ptr = (int *)prev_node;\n        if (is_equal) {\n          current_node = (int **)((int)current_node + (int)*new_node);\n          *new_node = (int *)current_node;\n        }\n        search_node_next_ptr = (int *)new_node;\n      }\n    }\n  }\n  FUNC_0800557e(result,current_node,prev_node,param4);\n  return;\n}\n\n",
            "current_name": "update_linked_list_080048dc",
            "entrypoint": "0x080048dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "bVar6": "is_equal",
                "extraout_r1": "extra_output",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp_ptr",
                "ppiVar2": "current_node",
                "ppiVar3": "prev_node",
                "ppiVar3[1]": "previous_node_next_ptr",
                "ppiVar4": "prev_node",
                "ppiVar4[1]": "search_node_next_ptr",
                "ppiVar5": "new_node",
                "ppiVar5[1]": "temp_node_next_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004978": {
            "additional_data": {
                "DAT_200005c8": {
                    "1": "first_block_ptr",
                    "3": "head"
                },
                "DAT_200005cc": {
                    "1": "memory_allocated"
                },
                "FUNC_0800557c": {
                    "1": "unknown_function_1"
                },
                "FUNC_0800557e": {
                    "1": "free_block"
                },
                "FUN_08004978": {
                    "1": "allocate_memory",
                    "2": "allocate_and_update_memory",
                    "25": "allocate_and_assign_memory"
                },
                "allocate_and_assign_memory_0800500c": {
                    "1": "allocate_assign",
                    "2": "allocate_memory"
                },
                "iVar2": {
                    "1": "remaining_bytes",
                    "2": "temp_size",
                    "5": "block_size",
                    "6": "difference"
                },
                "param_1": {
                    "1": "memory_buffer",
                    "11": "result",
                    "2": "out_buffer",
                    "3": "output",
                    "4": "output_buffer",
                    "6": "output_ptr"
                },
                "param_2": {
                    "1": "input_uint",
                    "21": "size",
                    "6": "input_size"
                },
                "puVar1": {
                    "1": "current_uint_pointer",
                    "18": "current_block",
                    "2": "current_ptr",
                    "3": "current_pointer"
                },
                "puVar3": {
                    "1": "previous_pointer",
                    "12": "next_block",
                    "2": "current_block_next"
                },
                "puVar5": {
                    "1": "prev_block_next_ptr",
                    "12": "previous_block",
                    "2": "previous_pointer",
                    "3": "previous_node"
                },
                "uVar4": {
                    "1": "size_difference",
                    "12": "difference",
                    "2": "block_size",
                    "5": "block_difference"
                },
                "uVar6": {
                    "1": "rounded_uint",
                    "10": "aligned_size",
                    "12": "allocated_size",
                    "2": "total_size",
                    "3": "new_block_size"
                }
            },
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "code": "\nuint allocate_and_assign_memory_08004978(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *next_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    previous_block = DAT_200005c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      difference = *next_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *next_block = difference;\n          *(uint *)((int)next_block + difference) = allocated_size;\n          previous_block = (uint *)((int)next_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = allocate_memory(result);\n    }\n    current_block = (uint *)allocate_memory(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (offset = allocate_memory(result,(int)previous_block - (int)current_block), offset != -1)))) {\n      *previous_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_block + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_block + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_0800557e(result);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_assign_memory_08004978",
            "entrypoint": "0x08004978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004978": "allocate_and_assign_memory_08004978",
                "allocate_and_assign_memory_0800500c": "allocate_memory",
                "iVar2": "offset",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "puVar3": "next_block",
                "puVar5": "previous_block",
                "uVar4": "difference",
                "uVar6": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a34": {
            "additional_data": {
                "DAT_08005fa0": {
                    "1": "data_ptr_3",
                    "3": "data_3"
                },
                "DAT_08005fc0": {
                    "1": "dat_a",
                    "3": "data_1"
                },
                "DAT_08005fe0": {
                    "1": "dat_b",
                    "3": "data_2"
                },
                "FUN_08004a34": {
                    "1": "process_function",
                    "12": "process_input",
                    "2": "process_bytes",
                    "3": "process_and_store_data",
                    "9": "process_data"
                },
                "data_pointer": {
                    "1": "input_data_pointer"
                },
                "iVar1": {
                    "1": "offset",
                    "2": "temp_var_1",
                    "3": "result",
                    "6": "temp_var1",
                    "9": "index"
                },
                "initialize_memory_080053a0": {
                    "9": "initialize_memory"
                },
                "param_1": {
                    "1": "data_address",
                    "2": "input1",
                    "3": "input_param",
                    "4": "data",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "byte_param",
                    "2": "arg2",
                    "4": "byte_data",
                    "6": "input_byte",
                    "8": "byte_value"
                },
                "param_3": {
                    "1": "input_data",
                    "2": "input3",
                    "5": "data_ptr",
                    "7": "data_array"
                },
                "pbVar2": {
                    "1": "data_element",
                    "2": "ptr_2",
                    "5": "ptr1",
                    "6": "temp_var2"
                },
                "pbVar3": {
                    "1": "temp_pointer",
                    "2": "temp_byte_ptr_2",
                    "6": "ptr2"
                },
                "process_data_080050d0": {
                    "1": "process_data_first",
                    "6": "process_data_1"
                },
                "process_data_080052cc": {
                    "1": "process_data2",
                    "6": "process_data_2"
                },
                "uVar4": {
                    "1": "temp_var4",
                    "17": "result",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "calling": [
                "FUN_08004a60"
            ],
            "code": "\nuint process_input_08004a34(int input_data,byte byte_value,byte **data_array)\n\n{\n  int index;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_array[2] + -1;\n  data_array[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_array[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_array;\n    *data_array = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (data_array == (byte **)&DAT_08005fc0) {\n    data_array = *(byte ***)(input_data + 4);\n  }\n  else if (data_array == (byte **)&DAT_08005fe0) {\n    data_array = *(byte ***)(input_data + 8);\n  }\n  else if (data_array == (byte **)&DAT_08005fa0) {\n    data_array = *(byte ***)(input_data + 0xc);\n  }\n  data_array[2] = data_array[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_array + 3);\n  index = (int)temp_var3 << 0x1c;\n  if (((index < 0) && (temp_var3 = data_array[4], temp_var3 != (byte *)0x0)) ||\n     (index = process_data_1(input_data,data_array,index,temp_var3,temp_var2), index == 0)) {\n    index = (int)*data_array - (int)data_array[4];\n    result = (uint)byte_value;\n    if ((index < (int)data_array[5]) || (index = process_data_2(input_data,data_array), index == 0)) {\n      data_array[2] = data_array[2] + -1;\n      temp_var2 = *data_array;\n      *data_array = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(index + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      index = process_data_2(input_data,data_array);\n      if (index == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_input_08004a34",
            "entrypoint": "0x08004a34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "iVar1": "index",
                "initialize_memory_080053a0": "initialize_memory",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "data_array",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "process_data_080050d0": "process_data_1",
                "process_data_080052cc": "process_data_2",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a60": {
            "additional_data": {
                "FUN_08004a60": {
                    "1": "process_and_count_inputs",
                    "10": "process_input",
                    "2": "process_and_return_result",
                    "3": "process_and_increment",
                    "8": "process_and_count_input"
                },
                "iVar1": {
                    "1": "output_value",
                    "2": "processed_count",
                    "27": "result"
                },
                "iVar3": {
                    "1": "buffer_count",
                    "2": "current_size",
                    "4": "remaining_length",
                    "5": "current_length",
                    "7": "current_index"
                },
                "param_1": {
                    "1": "param1",
                    "2": "first_param",
                    "3": "input_1",
                    "4": "input1",
                    "9": "arg1"
                },
                "param_2": {
                    "1": "param",
                    "2": "second_param",
                    "3": "input_2",
                    "4": "input_param_2",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "data_pointer",
                    "13": "input_data",
                    "2": "input_buffer",
                    "4": "data",
                    "7": "input_array"
                },
                "param_4": {
                    "1": "num_elements",
                    "2": "array_size",
                    "3": "input_size",
                    "5": "data_length",
                    "6": "length"
                },
                "puVar2": {
                    "1": "buffer_end",
                    "2": "end",
                    "3": "end_pointer",
                    "5": "end_of_data",
                    "9": "end_ptr"
                }
            },
            "called": [
                "FUN_08004a34"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nint process_input_08004a60(undefined4 arg1,undefined4 arg2,undefined *input_data,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = input_data + length;\n  current_index = length;\n  do {\n    if (input_data == end_ptr) {\n      return 0;\n    }\n    result = process_input_08004a60_08004a34(arg1,*input_data,arg2,length,current_index);\n    length = result + 1;\n    input_data = input_data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "current_name": "process_input_08004a60",
            "entrypoint": "0x08004a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a60": "process_input_08004a60",
                "iVar1": "result",
                "iVar3": "current_index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input_data",
                "param_4": "length",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a84": {
            "additional_data": {
                "FUN_08004a84": {
                    "1": "process_input_data",
                    "16": "process_data",
                    "2": "process_binary_data",
                    "4": "process_input"
                },
                "bVar3": {
                    "1": "is_valid",
                    "2": "is_true",
                    "3": "found_digit",
                    "5": "is_numeric",
                    "7": "is_number"
                },
                "find_byte_sequence_08000230": {
                    "2": "find_byte_sequence"
                },
                "iVar1": {
                    "1": "result_code",
                    "27": "result",
                    "3": "return_value"
                },
                "iVar6": {
                    "1": "i_var",
                    "2": "temp_variable",
                    "3": "value",
                    "5": "temp_var",
                    "6": "index"
                },
                "initialize_memory_080053a0": {
                    "2": "initialize_memory"
                },
                "local_30": {
                    "1": "constant3",
                    "2": "zero_flag"
                },
                "local_45": {
                    "1": "zero_flag",
                    "2": "constant3",
                    "3": "hash_flag"
                },
                "local_6e": {
                    "1": "temp_var4",
                    "2": "flag2",
                    "3": "constant2",
                    "7": "plus_flag"
                },
                "local_6f": {
                    "1": "local_byte1",
                    "2": "space_char",
                    "3": "constant1",
                    "7": "space_flag"
                },
                "local_70": {
                    "1": "flag_byte",
                    "2": "local_byte1",
                    "3": "local_byte",
                    "4": "character",
                    "5": "conversion_specifier"
                },
                "local_74": {
                    "1": "result",
                    "2": "local_var5",
                    "4": "total",
                    "6": "total_size"
                },
                "local_7c": {
                    "1": "number_arg",
                    "10": "width",
                    "2": "number"
                },
                "local_80": {
                    "1": "value",
                    "2": "temp1",
                    "3": "unused"
                },
                "local_84": {
                    "1": "local_var3",
                    "13": "precision",
                    "2": "length",
                    "3": "decimal_places"
                },
                "local_88": {
                    "1": "local_flags",
                    "2": "local_var1",
                    "20": "flags"
                },
                "local_8c": {
                    "1": "counter_ptr",
                    "2": "output_array_ptr",
                    "5": "output_ptr"
                },
                "local_9": {
                    "1": "helper_variable_for_unreachable_block"
                },
                "param_1": {
                    "1": "data_address",
                    "10": "input",
                    "2": "input_param",
                    "3": "input_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "header",
                    "2": "config_ptr",
                    "5": "config"
                },
                "param_3": {
                    "1": "pattern",
                    "2": "input_data",
                    "4": "byte_array",
                    "7": "data"
                },
                "param_4": {
                    "1": "counter",
                    "2": "result",
                    "3": "int_array",
                    "4": "output"
                },
                "pbVar4": {
                    "1": "current_char_ptr",
                    "2": "current_byte_ptr",
                    "3": "byte_ptr1",
                    "5": "current_byte",
                    "7": "current_char"
                },
                "pbVar5": {
                    "1": "prev_char",
                    "2": "ptr2",
                    "4": "byte_ptr2",
                    "5": "next_byte",
                    "7": "next_char"
                },
                "piVar2": {
                    "1": "cur_param",
                    "2": "counter_ptr",
                    "3": "ptr_var",
                    "7": "ptr"
                },
                "process_data_08004d9c": {
                    "1": "process_data"
                },
                "process_data_080050d0": {
                    "2": "process_data"
                },
                "process_input_08004a60": {
                    "2": "process_input"
                },
                "unaff_r9": {
                    "1": "unaff_var9",
                    "2": "unaffected_r9",
                    "3": "total_result",
                    "5": "unaff_r9"
                }
            },
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_data_08004a84(int input,undefined4 *config,byte *data,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool is_number;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int index;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 padding;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 constant4;\n  \n  output_ptr = output;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (config == &DAT_08005fc0) {\n    config = *(undefined4 **)(input + 4);\n  }\n  else if (config == (undefined4 *)&DAT_08005fe0) {\n    config = *(undefined4 **)(input + 8);\n  }\n  else if (config == (undefined4 *)&DAT_08005fa0) {\n    config = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(config + 3) << 0x1c)) || (config[4] == 0)) &&\n     (index = process_data_08004a84(input,config), index != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = data;\nLAB_08004ac6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  index = (int)next_char - (int)data;\n  if (index != 0) {\n    result = process_input(input,config,data,index);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(config + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + index;\n  }\n  if (*next_char == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  padding = 0;\n  hash_flag = 0;\n  constant4 = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    index = find_byte_sequence(\"#-0+ \",*current_char);\n    data = current_char + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ffa094U & 0xff) | flags;\n    current_char = data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = output_ptr + 1;\n    index = *output_ptr;\n    output_ptr = ptr;\n    if (index < 0) {\n      width = -index;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_number = false;\n    index = width;\n    data = current_char;\n    while( true ) {\n      if (9 < *data - 0x30) break;\n      index = index * 10 + (*data - 0x30);\n      is_number = true;\n      data = data + 1;\n    }\n    if (!is_number) goto LAB_08004bae;\n  }\n  width = index;\nLAB_08004bae:\n  if (*data == 0x2e) {\n    if (data[1] == 0x2a) {\n      precision = *output_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      data = data + 2;\n      output_ptr = output_ptr + 1;\n    }\n    else {\n      is_number = false;\n      precision = 0;\n      index = 0;\n      while( true ) {\n        data = data + 1;\n        if (9 < *data - 0x30) break;\n        index = index * 10 + (*data - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision = index;\n      }\n    }\n  }\n  index = find_byte_sequence(&DAT_08005f72,*data,3);\n  if (index != 0) {\n    flags = flags | 0x40 << (index + 0xf7ffa08eU & 0xff);\n    data = data + 1;\n  }\n  conversion_specifier = *data;\n  data = data + 1;\n  index = find_byte_sequence(\"efgEFG\",conversion_specifier,6);\n  if (index == 0) {\n    unaff_r9 = process_data_08004a84_extended(input,&flags,config,0x8004a61,&output_ptr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_char = data;\n  goto LAB_08004ac6;\n}\n\n",
            "current_name": "process_data_08004a84",
            "entrypoint": "0x08004a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "bVar3": "is_number",
                "find_byte_sequence_08000230": "find_byte_sequence",
                "iVar1": "result",
                "iVar6": "index",
                "initialize_memory_080053a0": "initialize_memory",
                "local_30": "constant4",
                "local_45": "hash_flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "conversion_specifier",
                "local_74": "total_length",
                "local_7c": "width",
                "local_80": "padding",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "output_ptr",
                "param_1": "input",
                "param_2": "config",
                "param_3": "data",
                "param_4": "output",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "piVar2": "ptr",
                "process_data_08004d9c": "process_data_extended",
                "process_data_080050d0": "process_data",
                "process_input_08004a60": "process_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "additional_data": {
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "FUN_08004cb0": {
                    "1": "decode_and_verify_data",
                    "16": "process_data",
                    "2": "parse_data"
                },
                "bVar5": {
                    "1": "is_set",
                    "2": "check_flag",
                    "3": "condition",
                    "5": "is_flag_set",
                    "6": "is_condition_true"
                },
                "iVar1": {
                    "1": "result",
                    "13": "index",
                    "2": "counter1",
                    "3": "loop_counter_1",
                    "4": "index1"
                },
                "iVar2": {
                    "1": "index",
                    "11": "result",
                    "2": "loop_counter_2",
                    "4": "index2",
                    "5": "return_value"
                },
                "param_1": {
                    "1": "input_param",
                    "12": "input",
                    "3": "data_ptr",
                    "4": "input_value",
                    "6": "input_data"
                },
                "param_2": {
                    "1": "ptr_array",
                    "11": "data",
                    "2": "data_arr",
                    "7": "data_array"
                },
                "param_3": {
                    "1": "result_size",
                    "10": "output",
                    "2": "output_value",
                    "3": "output_size",
                    "4": "result"
                },
                "param_4": {
                    "1": "input_param",
                    "2": "arg",
                    "3": "param4",
                    "6": "param",
                    "7": "param_4"
                },
                "param_5": {
                    "11": "callback_function",
                    "15": "callback",
                    "5": "callback_func"
                },
                "uVar3": {
                    "1": "maximum_length",
                    "3": "max_size",
                    "9": "max_value"
                },
                "uVar4": {
                    "1": "current_value",
                    "11": "counter",
                    "2": "counter2",
                    "9": "count"
                }
            },
            "called": [],
            "calling": [
                "FUN_08004d9c"
            ],
            "code": "\nundefined4\nprocess_data_08004cb0(undefined4 input,uint *data,uint *output,undefined4 param_4,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_length;\n  uint counter;\n  bool is_condition_true;\n  \n  max_length = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_length = data[2];\n  }\n  *output = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param_4,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)data + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_length + 0x43) = 0x30;\n    *(undefined *)((int)data + max_length + 0x44) = *(undefined *)((int)data + 0x45);\n    max_length = max_length + 2;\n  }\n  index = (*callback)(input,param_4,(int)data + 0x43,max_length);\n  if (index != -1) {\n    max_length = data[3];\n    is_condition_true = (*data & 6) == 4;\n    if (is_condition_true) {\n      max_length = max_length - *output;\n    }\n    if (is_condition_true) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    else {\n      max_length = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_length = max_length + (data[2] - data[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (max_length == counter) {\n        return 0;\n      }\n      index = (*callback)(input,param_4,(int)data + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_08004cb0",
            "entrypoint": "0x08004cb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "bVar5": "is_condition_true",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_5": "callback",
                "uVar3": "max_length",
                "uVar4": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "additional_data": {
                "(*param_4)": {
                    "1": "callback_function_ptr"
                },
                "FUN_08004d9c": {
                    "1": "process_and_validate_data",
                    "2": "convert_and_process_data",
                    "3": "reverse_and_process_data",
                    "4": "decode_and_process_data",
                    "7": "process_data"
                },
                "bVar1": {
                    "13": "byte_value",
                    "4": "first_byte",
                    "5": "byte_var",
                    "9": "byte_val"
                },
                "find_byte_sequence_08000230": {
                    "1": "find_byte_sequence"
                },
                "iVar2": {
                    "1": "int_var",
                    "17": "index",
                    "2": "index_var",
                    "5": "result"
                },
                "iVar4": {
                    "1": "inner_loop_var",
                    "2": "int_var2",
                    "3": "temp_var",
                    "7": "result"
                },
                "local_24": {
                    "1": "length_arr",
                    "2": "local_variables",
                    "4": "local_arr",
                    "8": "local_array"
                },
                "param_1": {
                    "1": "input1",
                    "5": "input_param",
                    "9": "param1"
                },
                "param_2": {
                    "1": "decoded_data",
                    "11": "data",
                    "2": "input_data",
                    "3": "data_ptr"
                },
                "param_3": {
                    "1": "param",
                    "3": "param_3",
                    "5": "arg3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "conversion_function",
                    "11": "callback",
                    "2": "process_function",
                    "3": "callback_function",
                    "4": "process_func"
                },
                "param_5": {
                    "1": "counter_ptr",
                    "2": "counter",
                    "3": "output",
                    "6": "param5"
                },
                "pcVar11": {
                    "1": "output_str",
                    "2": "result_ptr",
                    "3": "char_ptr",
                    "4": "output"
                },
                "pcVar12": {
                    "1": "start",
                    "2": "char_ptr_3"
                },
                "pcVar5": {
                    "1": "char_var1",
                    "2": "char_pointer",
                    "5": "char_ptr",
                    "8": "hex_chars",
                    "9": "hex_digits"
                },
                "ppcVar8": {
                    "1": "str_ptr_ptr",
                    "6": "char_ptr_ptr"
                },
                "ppuVar7": {
                    "1": "temp_ptr_ptr",
                    "2": "ptr_to_ptr_ptr",
                    "3": "ptr_ptr"
                },
                "process_data_08004cb0": {
                    "1": "process_data"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "10": "ptr",
                    "2": "pointer",
                    "3": "data_ptr",
                    "6": "ptr_var"
                },
                "uVar10": {
                    "1": "unsigned_value2",
                    "3": "temp_value2",
                    "4": "length",
                    "5": "temp",
                    "6": "temp_value"
                },
                "uVar6": {
                    "1": "uint_val",
                    "12": "base",
                    "2": "temp_val",
                    "5": "value"
                },
                "uVar9": {
                    "1": "unsigned_value",
                    "11": "value",
                    "2": "num",
                    "6": "result"
                }
            },
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nuint process_data_08004d9c(undefined4 param1,uint *data,undefined4 param3,code *callback,uint **param5)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *hex_digits;\n  uint base;\n  uint **ptr_ptr;\n  char **char_ptr_ptr;\n  uint value;\n  uint temp_value;\n  char *output;\n  char *char_ptr3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  char_ptr3 = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08004f56;\n          if (byte_value != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *data;\n          ptr = *param5;\n          *param5 = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08004dcc;\n          value = *data;\n          ptr = *param5;\n          if ((value & 0x80) == 0) {\n            *param5 = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *param5 = ptr + 1;\nLAB_08004dec:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp_value = data[1];\n        data[2] = temp_value;\n        output = char_ptr3;\n        if ((int)temp_value < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data + 0x42) = *hex_digits;\n          output = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (temp_value != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp_value = value / base;\n              output = output + -1;\n              *output = hex_digits[value - base * temp_value];\n              value = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        data[4] = (int)char_ptr3 - (int)output;\n        char_ptr3 = output;\n        goto LAB_08004ec2;\n      }\n      ptr = *param5;\n      *param5 = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      char_ptr3 = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08004e52:\n            value = *data;\n            ptr = *param5;\n            if ((value & 0x80) == 0) {\n              *param5 = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *param5 = ptr + 1;\nLAB_08004e60:\n              value = *ptr;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data + 0x45) = 0x78;\n            hex_digits = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08004e52;\n          if (byte_value == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto LAB_08004e2c;\n      }\n      char_ptr_ptr = (char **)*param5;\n      *param5 = (uint *)(char_ptr_ptr + 1);\n      char_ptr3 = *char_ptr_ptr;\n      index = find_byte_sequence(char_ptr3,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)char_ptr3;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *data;\n  ptr_ptr = (uint **)*param5;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *param5 = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *param5 = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_08004f42:\n    *ptr = base;\n  }\nLAB_08004f56:\n  data[4] = 0;\nLAB_08004ec2:\n  index = process_data_08004d9c(param1,data,local_array,param3,callback);\n  if ((index == -1) || (index = (*callback)(param1,param3,char_ptr3,data[4]), index == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        result = (*callback)(param1,param3,(int)data + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "current_name": "process_data_08004d9c",
            "entrypoint": "0x08004d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d9c": "process_data_08004d9c",
                "bVar1": "byte_value",
                "find_byte_sequence_08000230": "find_byte_sequence",
                "iVar2": "index",
                "iVar4": "result",
                "local_24": "local_array",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "param5",
                "pcVar11": "output",
                "pcVar12": "char_ptr3",
                "pcVar5": "hex_digits",
                "ppcVar8": "char_ptr_ptr",
                "ppuVar7": "ptr_ptr",
                "process_data_08004cb0": "process_data",
                "puVar3": "ptr",
                "uVar10": "temp_value",
                "uVar6": "base",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "additional_data": {
                "FUN_08004fdc": {
                    "1": "initialize_process",
                    "10": "process_and_initialize_data",
                    "14": "process_data",
                    "2": "process_function",
                    "4": "initialize_and_process_data"
                },
                "iVar1": {
                    "1": "memory_address",
                    "13": "data_ptr",
                    "2": "data_var",
                    "3": "data_offset",
                    "5": "data_address"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "data_ptr",
                    "3": "input1",
                    "4": "arg1",
                    "5": "data_param",
                    "7": "input_param"
                },
                "param_2": {
                    "1": "data_parameter2",
                    "12": "param_2",
                    "2": "second_param",
                    "3": "input_param_2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "parameter3",
                    "12": "param_3",
                    "2": "third_param",
                    "3": "input3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "input_variable_4",
                    "12": "param_4",
                    "2": "fourth_param",
                    "3": "input4",
                    "4": "arg4"
                },
                "uStack_4": {
                    "1": "fourth_var",
                    "3": "param_4_copy"
                },
                "uStack_8": {
                    "1": "third_var",
                    "3": "stack_var2"
                },
                "uStack_c": {
                    "1": "stack_param",
                    "2": "stack_param1",
                    "3": "stack_var1",
                    "4": "stack_c"
                },
                "uVar2": {
                    "1": "data_variable2",
                    "2": "input_ptr",
                    "3": "temp_var",
                    "4": "input_var",
                    "5": "param_1_copy"
                }
            },
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "calling": [
                "FUN_08003978"
            ],
            "code": "\nvoid process_data_08004fdc(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 param_1_copy;\n  undefined4 stack_c;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  data_ptr = DAT_200000a0;\n  param_1_copy = input_param;\n  stack_c = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_080053a0(DAT_200000a0);\n  }\n  process_data_08004fdc_08004a84(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&stack_c,param_1_copy,&stack_c);\n  return;\n}\n\n",
            "current_name": "process_data_08004fdc",
            "entrypoint": "0x08004fdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "iVar1": "data_ptr",
                "param_1": "input_param",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy",
                "uStack_c": "stack_c",
                "uVar2": "param_1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800500c": {
            "additional_data": {
                "FUN_0800500c": {
                    "1": "allocate_and_store_memory",
                    "12": "allocate_and_assign_memory",
                    "2": "allocate_and_set_memory",
                    "9": "initialize_memory"
                },
                "allocate_memory_08004094": {
                    "2": "allocate_memory"
                },
                "iVar1": {
                    "1": "allocation_status",
                    "20": "allocation_result",
                    "3": "allocated_memory",
                    "4": "memory_allocation_result"
                },
                "param_1": {
                    "1": "memory_address",
                    "3": "output_pointer",
                    "6": "result_pointer",
                    "7": "result_ptr",
                    "9": "result"
                },
                "param_2": {
                    "1": "size_in_bytes",
                    "21": "size",
                    "5": "memory_size"
                }
            },
            "called": [
                "FUN_08004094"
            ],
            "calling": [
                "FUN_08004978"
            ],
            "code": "\nvoid allocate_and_assign_memory_0800500c(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000674 = 0;\n  allocation_result = allocate_memory(size);\n  if ((allocation_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_and_assign_memory_0800500c",
            "entrypoint": "0x0800500c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800500c": "allocate_and_assign_memory_0800500c",
                "allocate_memory_08004094": "allocate_memory",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080050d0": {
            "additional_data": {
                "&DAT_08005fc0": {
                    "1": "constant1"
                },
                "(short)uVar3 & 0x80": {
                    "1": "check_value2"
                },
                "(undefined4 *)&DAT_08005fa0": {
                    "1": "constant3"
                },
                "(undefined4 *)&DAT_08005fe0": {
                    "1": "constant2"
                },
                "(undefined4 *)param_2[0xd] != (undefined4 *)0x0": {
                    "1": "is_not_null"
                },
                "(undefined4 *)param_2[0xd] != param_2 + 0x11": {
                    "1": "is_not_linked"
                },
                "*(ushort *)(param_2 + 3) & 0x280": {
                    "1": "check_value"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "*param_2": {
                    "1": "input_value"
                },
                "FUNC_080053a0": {
                    "1": "do_something"
                },
                "FUN_080050d0": {
                    "1": "update_parameters",
                    "20": "process_data",
                    "4": "update_data"
                },
                "iVar1": {
                    "1": "data_source",
                    "2": "data_offset",
                    "3": "data",
                    "5": "data_ptr",
                    "7": "data_address",
                    "9": "data_pointer"
                },
                "initialize_memory_080054fc": {
                    "11": "initialize_memory"
                },
                "param_1": {
                    "1": "output_result",
                    "13": "output_param",
                    "5": "output_data",
                    "7": "output"
                },
                "param_2": {
                    "1": "input1",
                    "13": "input_param",
                    "7": "input_data"
                },
                "param_2[4]": {
                    "1": "value1"
                },
                "param_2[5]": {
                    "1": "value2"
                },
                "uVar2": {
                    "1": "unsigned_var",
                    "28": "result"
                },
                "uVar3": {
                    "1": "input_data_value",
                    "17": "flags",
                    "2": "value",
                    "4": "flag"
                },
                "update_linked_list_080048dc": {
                    "10": "update_linked_list"
                }
            },
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "code": "\nuint process_data_080050d0(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data_pointer;\n  uint result;\n  ushort flags;\n  \n  data_pointer = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_080053a0(DAT_200000a0);\n  }\n  if (input_param == &DAT_08005fc0) {\n    input_param = *(undefined4 **)(data_pointer + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fe0) {\n    input_param = *(undefined4 **)(data_pointer + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fa0) {\n    input_param = *(undefined4 **)(data_pointer + 0xc);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          update_linked_list(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = value1;\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((value1 == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    initialize_memory(output_param,input_param);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = value2;\n    }\n    input_param[2] = result;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -value2;\n  }\n  if (value1 == 0) {\n    flags = *(ushort *)(input_param + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input_param + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "current_name": "process_data_080050d0",
            "entrypoint": "0x080050d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "iVar1": "data_pointer",
                "initialize_memory_080054fc": "initialize_memory",
                "param_1": "output_param",
                "param_2": "input_param",
                "param_2[4]": "value1",
                "param_2[5]": "value2",
                "uVar2": "result",
                "uVar3": "flags",
                "update_linked_list_080048dc": "update_linked_list"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080051ac": {
            "additional_data": {
                "FUN_080051ac": {
                    "1": "process_and_check_data",
                    "13": "process_and_update_data",
                    "3": "process_and_handle_data",
                    "9": "process_data"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_pointer",
                    "10": "jump_table",
                    "2": "jmp_table"
                },
                "bVar11": {
                    "1": "boolean_variable",
                    "12": "is_zero",
                    "2": "is_condition_met"
                },
                "iVar2": {
                    "1": "int_var",
                    "2": "offset",
                    "3": "count",
                    "5": "temp_var"
                },
                "iVar7": {
                    "1": "var1",
                    "2": "offset",
                    "3": "temp_var2"
                },
                "iVar9": {
                    "1": "i_var9",
                    "2": "initial_value",
                    "3": "loop_counter"
                },
                "pcVar8": {
                    "1": "callback_function",
                    "2": "data_processing_function",
                    "3": "var8",
                    "4": "callback_func",
                    "7": "function_pointer"
                },
                "piVar3": {
                    "1": "pointer_var3",
                    "2": "ptr3",
                    "8": "data_pointer"
                },
                "piVar4": {
                    "1": "pointer_to_variable4",
                    "2": "linked_list_pointer",
                    "3": "linked_list_ptr"
                },
                "puVar1": {
                    "1": "data_value",
                    "2": "data_value_ptr",
                    "3": "value_ptr",
                    "5": "value_pointer",
                    "7": "data_pointer"
                },
                "uVar10": {
                    "1": "uint_var",
                    "2": "original_value",
                    "4": "temp_value"
                },
                "uVar12": {
                    "1": "var7",
                    "2": "return_value",
                    "6": "loop_result",
                    "9": "result"
                },
                "uVar5": {
                    "1": "ushort_to_uint",
                    "2": "u_var5",
                    "7": "data_value"
                },
                "uVar6": {
                    "1": "var2",
                    "2": "flag_value",
                    "3": "data_flag",
                    "4": "flag",
                    "7": "flags"
                }
            },
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "code": "\nvoid process_and_update_data_080051ac(void)\n\n{\n  uint *data_pointer;\n  int temp_var;\n  int *data_ptr;\n  int *linked_list_ptr;\n  uint data_value;\n  ushort flags;\n  int temp_var2;\n  code *function_pointer;\n  int loop_counter;\n  uint temp_value;\n  code *jump_table;\n  bool is_zero;\n  undefined8 result;\n  \n  process_data_080055d0(6);\n  jump_table = (code *)0x80051bb;\n  result = infinite_loop_080040f8(1);\n  data_ptr = (int *)((ulonglong)result >> 0x20);\n  data_pointer = (uint *)result;\n  flags = *(ushort *)(data_ptr + 3);\n  data_value = (uint)flags;\n  if ((int)(data_value << 0x1c) < 0) {\n    temp_var = data_ptr[4];\n    if (temp_var != 0) {\n      temp_var2 = data_value << 0x1e;\n      is_zero = temp_var2 == 0;\n      loop_counter = *data_ptr;\n      if (is_zero) {\n        temp_var2 = data_ptr[5];\n      }\n      *data_ptr = temp_var;\n      if (!is_zero) {\n        temp_var2 = 0;\n      }\n      data_ptr[2] = temp_var2;\n      for (loop_counter = loop_counter - temp_var; 0 < loop_counter; loop_counter = loop_counter - temp_var2) {\n        temp_var2 = (*(code *)data_ptr[10])(data_pointer,data_ptr[8],temp_var,loop_counter);\n        if (temp_var2 < 1) {\n          flags = *(ushort *)(data_ptr + 3);\n          goto LAB_080052b2;\n        }\n        temp_var = temp_var + temp_var2;\n      }\n    }\n  }\n  else if (((0 < data_ptr[1]) || (0 < data_ptr[0x10])) &&\n          (function_pointer = (code *)data_ptr[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *data_pointer;\n    *data_pointer = 0;\n    if ((flags & 0x1000) == 0) {\n      temp_var = (*function_pointer)(data_pointer,data_ptr[8],data_value & 0x1000,1);\n      if ((temp_var == -1) && (data_value = *data_pointer, data_value != 0)) {\n        if ((data_value != 0x1d) && (data_value != 0x16)) {\n          *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data_pointer = temp_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      temp_var = data_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_ptr + 3) << 0x1d) < 0) &&\n       (temp_var = temp_var - data_ptr[1], data_ptr[0xd] != 0)) {\n      temp_var = temp_var - data_ptr[0x10];\n    }\n    temp_var = (*(code *)data_ptr[0xb])(data_pointer,data_ptr[8],temp_var,0);\n    flags = *(ushort *)(data_ptr + 3);\n    if ((temp_var == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((0x20400001U >> (*data_pointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(data_ptr + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    data_ptr[1] = 0;\n    *data_ptr = data_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((temp_var != -1 || (*data_pointer == 0)))) {\n      data_ptr[0x15] = temp_var;\n    }\n    linked_list_ptr = (int *)data_ptr[0xd];\n    *data_pointer = temp_value;\n    if (linked_list_ptr != (int *)0x0) {\n      if (linked_list_ptr != data_ptr + 0x11) {\n        update_linked_list_080048dc(data_pointer);\n      }\n      data_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_and_update_data_080051ac",
            "entrypoint": "0x080051ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080051ac": "process_and_update_data_080051ac",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_zero",
                "iVar2": "temp_var",
                "iVar7": "temp_var2",
                "iVar9": "loop_counter",
                "pcVar8": "function_pointer",
                "piVar3": "data_ptr",
                "piVar4": "linked_list_ptr",
                "puVar1": "data_pointer",
                "uVar10": "temp_value",
                "uVar12": "result",
                "uVar5": "data_value",
                "uVar6": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052cc": {
            "additional_data": {
                "FUN_080052cc": {
                    "1": "execute_operation",
                    "12": "process_data"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "unrecovered",
                    "14": "jump_table",
                    "2": "jumptable",
                    "3": "jmp_table"
                },
                "bVar10": {
                    "1": "bool_flag",
                    "2": "flag2"
                },
                "bVar11": {
                    "1": "bool_condition"
                },
                "iVar2": {
                    "1": "offset",
                    "2": "param2_value",
                    "3": "index",
                    "4": "length",
                    "5": "temp_var1"
                },
                "iVar6": {
                    "1": "temp_variable",
                    "2": "loop_var1",
                    "3": "offset"
                },
                "iVar8": {
                    "1": "temp_value_5",
                    "2": "counter",
                    "3": "temp_var4",
                    "4": "loop_var1"
                },
                "param_1": {
                    "1": "input_parameters",
                    "2": "input_params",
                    "3": "data_array",
                    "4": "input_data",
                    "6": "input_array"
                },
                "param_1[0]": {
                    "1": "input_zero"
                },
                "param_1[1]": {
                    "1": "input_index1"
                },
                "param_1[2]": {
                    "1": "input_index2"
                },
                "param_1[3]": {
                    "1": "input_index3"
                },
                "param_1[6]": {
                    "1": "input_index6"
                },
                "param_2": {
                    "1": "operation_params",
                    "2": "params",
                    "3": "param_array",
                    "4": "param_pointer"
                },
                "param_2 + 3": {
                    "1": "param_offset3"
                },
                "param_2[0x10]": {
                    "1": "param_index2"
                },
                "param_2[0x15]": {
                    "1": "param_index5"
                },
                "param_2[0xb]": {
                    "1": "param_index3"
                },
                "param_2[0xd]": {
                    "1": "param_index6"
                },
                "param_2[1]": {
                    "1": "param_index1"
                },
                "param_2[4]": {
                    "1": "param_index4"
                },
                "pcVar7": {
                    "1": "function_pointer_var",
                    "12": "function_pointer",
                    "2": "callback_func",
                    "3": "func_pointer",
                    "7": "function_ptr"
                },
                "piVar3": {
                    "1": "linked_array",
                    "2": "linked_list",
                    "3": "ptr",
                    "4": "temp_pointer"
                },
                "uVar1": {
                    "10": "result",
                    "20": "return_value"
                },
                "uVar10": {
                    "1": "temp10",
                    "2": "bool_var",
                    "4": "bool_value"
                },
                "uVar4": {
                    "1": "temp3",
                    "2": "ushort_var",
                    "3": "temp_var3",
                    "4": "value"
                },
                "uVar5": {
                    "1": "flag_value",
                    "10": "flag",
                    "3": "temp_var4"
                },
                "uVar9": {
                    "1": "backup_value",
                    "2": "temp",
                    "3": "temp_var5",
                    "5": "temp_value"
                },
                "unaff_r4": {
                    "1": "temp_var6",
                    "2": "unaffected_register4",
                    "3": "unaffected_register_4"
                },
                "unaff_r5": {
                    "1": "unused_register5",
                    "2": "unaff_var2",
                    "3": "unaffected_register_5"
                }
            },
            "called": [
                "FUN_080053a0"
            ],
            "calling": [
                "FUN_08004a34"
            ],
            "code": "\nundefined4 process_data_080052cc(uint *input_array,int *param_pointer)\n\n{\n  undefined4 return_value;\n  int count;\n  int *temp_pointer;\n  uint value;\n  ushort flag;\n  int temp_var;\n  undefined4 unaffected_register_4;\n  undefined4 unaffected_register_5;\n  code *function_pointer;\n  int loop_var1;\n  uint temp_value;\n  code *jump_table;\n  bool bool_var;\n  \n  if (param_index4 != 0) {\n    if ((input_array != (uint *)0x0) && (input_index6 == 0)) {\n      initialize_memory_080053a0();\n    }\n    if (param_pointer == &DAT_08005fc0) {\n      param_pointer = (int *)input_index1;\n    }\n    else if (param_pointer == (int *)&DAT_08005fe0) {\n      param_pointer = (int *)input_index2;\n    }\n    else if (param_pointer == (int *)&DAT_08005fa0) {\n      param_pointer = (int *)input_index3;\n    }\n    if (*(short *)(param_pointer + 3) != 0) {\n      flag = *(ushort *)(param_pointer + 3);\n      value = (uint)flag;\n      if ((int)(value << 0x1c) < 0) {\n        count = param_index4;\n        if (count != 0) {\n          temp_var = value << 0x1e;\n          bool_var = temp_var == 0;\n          loop_var1 = *param_pointer;\n          if (bool_var) {\n            temp_var = param_pointer[5];\n          }\n          *param_pointer = count;\n          if (!bool_var) {\n            temp_var = 0;\n          }\n          param_pointer[2] = temp_var;\n          for (loop_var1 = loop_var1 - count; 0 < loop_var1; loop_var1 = loop_var1 - temp_var) {\n            temp_var = (*(code *)param_pointer[10])(input_array,param_pointer[8],count,loop_var1,unaffected_register_4,unaffected_register_5);\n            if (temp_var < 1) {\n              flag = *(ushort *)(param_pointer + 3);\n              goto LAB_080052b2;\n            }\n            count = count + temp_var;\n          }\n        }\n      }\n      else if (((0 < param_index1) || (0 < param_index2)) &&\n              (function_pointer = (code *)param_index3, function_pointer != (code *)0x0)) {\n        temp_value = *input_array;\n        *input_array = 0;\n        if ((flag & 0x1000) == 0) {\n          count = (*function_pointer)(input_array,param_pointer[8],value & 0x1000,1);\n          if ((count == -1) && (value = *input_array, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(param_pointer + 3) = *(ushort *)(param_pointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*jump_table)();\n              return return_value;\n            }\n            *input_array = temp_value;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          count = param_index5;\n        }\n        if (((int)((uint)*(ushort *)(param_pointer + 3) << 0x1d) < 0) &&\n           (count = count - param_index1, param_index6 != 0)) {\n          count = count - param_index2;\n        }\n        count = (*(code *)param_index3)(input_array,param_pointer[8],count,0);\n        flag = *(ushort *)(param_pointer + 3);\n        if ((count == -1) &&\n           ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_pointer + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)(0xffffffff);\n          return return_value;\n        }\n        param_index1 = 0;\n        *param_pointer = param_index4;\n        if (((int)((uint)flag << 0x13) < 0) && ((count != -1 || (*input_array == 0)))) {\n          param_index5 = count;\n        }\n        temp_pointer = (int *)param_index6;\n        *input_array = temp_value;\n        if (temp_pointer != (int *)0x0) {\n          if (temp_pointer != param_pointer + 0x11) {\n            update_linked_list_080048dc(input_array);\n          }\n          param_index6 = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)();\n          return return_value;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*jump_table)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_080052cc",
            "entrypoint": "0x080052cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "bool_var",
                "iVar2": "count",
                "iVar6": "temp_var",
                "iVar8": "loop_var1",
                "param_1": "input_array",
                "param_1[1]": "input_index1",
                "param_1[2]": "input_index2",
                "param_1[3]": "input_index3",
                "param_1[6]": "input_index6",
                "param_2": "param_pointer",
                "param_2[0x10]": "param_index2",
                "param_2[0x15]": "param_index5",
                "param_2[0xb]": "param_index3",
                "param_2[0xd]": "param_index6",
                "param_2[1]": "param_index1",
                "param_2[4]": "param_index4",
                "pcVar7": "function_pointer",
                "piVar3": "temp_pointer",
                "uVar1": "return_value",
                "uVar4": "value",
                "uVar5": "flag",
                "uVar9": "temp_value",
                "unaff_r4": "unaffected_register_4",
                "unaff_r5": "unaffected_register_5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800532c": {
            "additional_data": {
                "&LAB_08005686_1": {
                    "1": "error_handling_function"
                },
                "FUN_0800532c": {
                    "1": "initialize_param_struct",
                    "10": "initialize_data",
                    "2": "initialize_params",
                    "4": "initialize_data_struct",
                    "5": "initialize_data_structure"
                },
                "LAB_08005686_1": {
                    "1": "function_label",
                    "2": "label1",
                    "3": "label",
                    "5": "some_label"
                },
                "data_structure": {
                    "1": "ds"
                },
                "memset_080048cc": {
                    "1": "clear_array",
                    "2": "memset",
                    "3": "initialize_memory",
                    "4": "clear_memory"
                },
                "param_1": {
                    "1": "output",
                    "2": "parameters",
                    "3": "params",
                    "4": "data_struct",
                    "6": "data_structure",
                    "7": "data"
                },
                "param_1[0x19]": {
                    "1": "array[25]"
                },
                "param_1[0xb]": {
                    "1": "array[11]"
                },
                "param_1[0xc]": {
                    "1": "array[12]"
                },
                "param_1[10]": {
                    "1": "data_10"
                },
                "param_1[1]": {
                    "1": "data_1"
                },
                "param_1[2]": {
                    "1": "data_2"
                },
                "param_1[4]": {
                    "1": "data_4"
                },
                "param_1[5]": {
                    "1": "data_5"
                },
                "param_1[6]": {
                    "1": "data_6"
                },
                "param_1[8]": {
                    "1": "array[8]"
                },
                "param_1[9]": {
                    "1": "data_9"
                },
                "param_2": {
                    "1": "param_value_1",
                    "22": "value1",
                    "5": "value_1"
                },
                "param_3": {
                    "1": "initial_value2",
                    "22": "value2",
                    "5": "value_2"
                },
                "some_label": {
                    "1": "label"
                },
                "value_1": {
                    "1": "val1"
                },
                "value_2": {
                    "1": "val2"
                }
            },
            "called": [
                "FUN_080048cc"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nvoid initialize_data_0800532c(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data_1 = 0;\n  data_2 = 0;\n  *(undefined2 *)(data + 3) = value1;\n  array[25] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data_4 = 0;\n  data_5 = 0;\n  data_6 = 0;\n  clear_memory(data + 0x17,0,8);\n  data_9 = 0x8005609;\n  data_10 = 0x800562b;\n  data_11 = 0x8005663;\n  self_pointer = data;\n  array[12] = label_1;\n  return;\n}\n\n",
            "current_name": "initialize_data_0800532c",
            "entrypoint": "0x0800532c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08005686_1": "label_1",
                "FUN_0800532c": "initialize_data_0800532c",
                "LAB_08005686_1": "some_label",
                "memset_080048cc": "clear_memory",
                "param_1": "data",
                "param_1[0x19]": "array[25]",
                "param_1[0xb]": "data_11",
                "param_1[0xc]": "array[12]",
                "param_1[10]": "data_10",
                "param_1[1]": "data_1",
                "param_1[2]": "data_2",
                "param_1[4]": "data_4",
                "param_1[5]": "data_5",
                "param_1[6]": "data_6",
                "param_1[8]": "self_pointer",
                "param_1[9]": "data_9",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005374": {
            "additional_data": {
                "FUN_08005374": {
                    "1": "allocate_and_assign_memory",
                    "19": "allocate_and_initialize_memory",
                    "3": "initialize_data_structure",
                    "4": "initialize_memory"
                },
                "PTR_0": {
                    "1": "null"
                },
                "allocate_and_assign_memory_08004978": {
                    "1": "allocate_memory_block"
                },
                "iVar2": {
                    "1": "block_size",
                    "10": "offset",
                    "2": "total_memory_size",
                    "3": "memory_offset",
                    "4": "total_size"
                },
                "memset_080048cc": {
                    "1": "set_memory_to_zero",
                    "2": "initialize_memory"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "data",
                    "3": "input_data",
                    "7": "initial_value"
                },
                "param_2": {
                    "1": "buffer_size",
                    "2": "array_size",
                    "7": "count",
                    "8": "num_elements",
                    "9": "size"
                },
                "puVar1": {
                    "1": "new_memory_block",
                    "12": "allocated_memory",
                    "2": "ptr",
                    "3": "memory_ptr"
                }
            },
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "calling": [
                "FUN_08005400"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08005374(undefined4 initial_value,int size)\n\n{\n  undefined4 *allocated_memory;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_block(initial_value,offset + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = size;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory(allocated_memory + 3,0,offset + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08005374",
            "entrypoint": "0x08005374",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_memory_08005374",
                "allocate_and_assign_memory_08004978": "allocate_memory_block",
                "iVar2": "offset",
                "memset_080048cc": "initialize_memory",
                "param_1": "initial_value",
                "param_2": "size",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053a0": {
            "additional_data": {
                "&DAT_200000a4": {
                    "1": "default_parameters"
                },
                "&LAB_08005320_1": {
                    "1": "jump_location"
                },
                "FUN_080053a0": {
                    "1": "initialize_data_if_null",
                    "11": "initialize_memory",
                    "2": "initialize_memory_function",
                    "4": "initialize_data",
                    "9": "initialize_function"
                },
                "initialize_data_0800532c": {
                    "1": "set_initial_data",
                    "15": "initialize_data",
                    "2": "initialize_data0800532c"
                },
                "initialize_memory_08005400": {
                    "1": "get_initialized_value",
                    "6": "allocate_memory",
                    "9": "initialize_memory"
                },
                "param_1": {
                    "1": "array_ptr",
                    "2": "function_params",
                    "3": "param",
                    "5": "input_array",
                    "7": "parameters"
                },
                "puVar2": {
                    "1": "initialize_value",
                    "10": "pointer",
                    "2": "pointer_variable",
                    "3": "temp_ptr"
                },
                "uVar1": {
                    "1": "initialized_memory",
                    "11": "result",
                    "2": "memory",
                    "3": "return_value",
                    "7": "initialized_value"
                }
            },
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "code": "\nvoid initialize_memory_080053a0(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer = &DAT_200000a4;\n    parameters[10] = default_label;\n    if (parameters == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000a4) {\n      parameters[6] = pointer;\n    }\n    result = initialize_memory_080053a0();\n    parameters[1] = result;\n    result = initialize_memory_080053a0(parameters);\n    parameters[2] = result;\n    result = initialize_memory_080053a0(parameters);\n    parameters[3] = result;\n    initialize_data(parameters[1],4,0);\n    initialize_data(parameters[2],9,1);\n    initialize_data(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_080053a0",
            "entrypoint": "0x080053a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08005320_1": "default_label",
                "FUN_080053a0": "initialize_memory_080053a0",
                "initialize_data_0800532c": "initialize_data",
                "initialize_memory_08005400": "initialize_memory",
                "param_1": "parameters",
                "puVar2": "pointer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005400": {
            "additional_data": {
                "&DAT_200000a4": {
                    "1": "data_address"
                },
                "&DAT_200000ec": {
                    "1": "data_address"
                },
                "*param_1": {
                    "2": "error_code"
                },
                "DAT_200000a4": {
                    "1": "some_data",
                    "2": "data"
                },
                "DAT_200000bc": {
                    "1": "memory_initialized",
                    "2": "data_flag",
                    "3": "is_initialized"
                },
                "DAT_200000ec": {
                    "1": "pointer_data"
                },
                "FUNC_080053a0": {
                    "1": "function_a",
                    "2": "initialize_data"
                },
                "FUN_08005400": {
                    "15": "initialize_memory",
                    "3": "initialize_data_structure",
                    "4": "initialize_data_structures",
                    "7": "initialize_data"
                },
                "allocate_and_initialize_memory_08005374": {
                    "1": "allocate_and_init_mem",
                    "2": "allocate_and_init_memory",
                    "7": "allocate_and_initialize_memory"
                },
                "memset_080048cc": {
                    "1": "initialize_memory_set",
                    "2": "memset_function",
                    "3": "clear_memory",
                    "4": "initialize_memory"
                },
                "param_1": {
                    "1": "result_pointer",
                    "13": "error_code",
                    "2": "result"
                },
                "param_2": {
                    "1": "input1",
                    "20": "param2",
                    "3": "arg2",
                    "4": "param_2"
                },
                "param_3": {
                    "1": "input_param2",
                    "20": "param3",
                    "3": "arg3",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "input_val3",
                    "20": "param4",
                    "3": "arg4",
                    "4": "param_4"
                },
                "piVar1": {
                    "1": "result",
                    "2": "ptr1",
                    "3": "current_pointer"
                },
                "piVar2": {
                    "1": "current_ptr_2",
                    "2": "sub_array",
                    "3": "current_pointer2"
                },
                "ppiVar3": {
                    "1": "nested_ptr_arr",
                    "2": "data_list",
                    "3": "data_structure_pointer"
                },
                "short": {
                    "1": "short_type"
                }
            },
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nint * initialize_memory_08005400(undefined4 *error_code,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *current_ptr;\n  int *current_pointer2;\n  int **data_structure_pointer;\n  \n  if (DAT_200000bc == 0) {\n    initialize_memory_080053a0(&DAT_200000a4);\n  }\n  data_structure_pointer = (int **)&DAT_200000ec;\n  do {\n    current_pointer2 = data_structure_pointer[2];\n    current_ptr = data_structure_pointer[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short_value *)(current_pointer2 + 3) == 0) {\n        *(undefined2 *)((int)current_pointer2 + 0xe) = 0xffff;\n        *(undefined2 *)(current_pointer2 + 3) = 1;\n        current_pointer2[0x19] = 0;\n        *current_pointer2 = 0;\n        current_pointer2[2] = 0;\n        current_pointer2[1] = 0;\n        current_pointer2[4] = 0;\n        current_pointer2[5] = 0;\n        current_pointer2[6] = 0;\n        initialize_memory_08005400(current_pointer2 + 0x17,0,8,1,param4);\n        current_pointer2[0xd] = 0;\n        current_pointer2[0xe] = 0;\n        current_pointer2[0x12] = 0;\n        current_pointer2[0x13] = 0;\n        return current_pointer2;\n      }\n      current_pointer2 = current_pointer2 + 0x1a;\n    }\n    if (*data_structure_pointer == (int *)0x0) {\n      current_ptr = (int *)allocate_and_initialize_memory_08005400(error_code,4);\n      *data_structure_pointer = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_structure_pointer = (int **)*data_structure_pointer;\n  } while( true );\n}\n\n",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        memset_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n",
            "current_name": "initialize_memory_08005400",
            "entrypoint": "0x08005400",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005400": "initialize_memory_08005400",
                "allocate_and_initialize_memory_08005374": "allocate_and_initialize_memory",
                "memset_080048cc": "initialize_memory",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "current_ptr",
                "piVar2": "current_pointer2",
                "ppiVar3": "data_structure_pointer",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054b4": {
            "additional_data": {
                "FUN_080054b4": {
                    "1": "initialize_memory_and_check_flag",
                    "16": "initialize_and_check_memory",
                    "2": "initialize_flags",
                    "3": "initialize_memory_check"
                },
                "auStack_4c": {
                    "1": "aux_stack",
                    "2": "stack_var",
                    "3": "stack_variable",
                    "5": "temporary_buffer",
                    "7": "stack_buffer"
                },
                "iVar1": {
                    "1": "result_status",
                    "15": "result",
                    "2": "error_code",
                    "3": "init_result"
                },
                "initialize_memory_080056d4": {
                    "1": "initialize_memory"
                },
                "local_48": {
                    "1": "flag_check",
                    "2": "local_flags",
                    "4": "local_var",
                    "9": "local_variable"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "input_param",
                    "3": "param",
                    "4": "param_1",
                    "5": "arg1",
                    "6": "param1"
                },
                "param_2": {
                    "1": "input_param_1",
                    "2": "memory_info",
                    "5": "param2"
                },
                "param_3": {
                    "1": "output",
                    "10": "output_param",
                    "2": "result_ptr",
                    "3": "param3",
                    "4": "result"
                },
                "param_4": {
                    "1": "output_param_2",
                    "2": "status_ptr",
                    "3": "status_param",
                    "4": "flag",
                    "5": "flag_param"
                },
                "uVar2": {
                    "1": "result",
                    "2": "flag_value",
                    "7": "status",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_080056d4"
            ],
            "calling": [
                "FUN_080054fc"
            ],
            "code": "\nundefined4 initialize_and_check_memory_080054b4(undefined4 param1,int param2,undefined4 *output_param,uint *flag_param)\n\n{\n  int result;\n  undefined4 return_value;\n  undefined stack_buffer [4];\n  uint local_variable;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = initialize_memory(param1,(int)*(short *)(param2 + 0xe),stack_buffer), result < 0)) {\n    *flag_param = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      return_value = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *flag_param = (uint)((local_variable & 0xf000) == 0x2000);\n  }\n  return_value = 0x400;\nLAB_080054f4:\n  *output_param = return_value;\n  return 0;\n}\n\n",
            "current_name": "initialize_and_check_memory_080054b4",
            "entrypoint": "0x080054b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080054b4": "initialize_and_check_memory_080054b4",
                "auStack_4c": "stack_buffer",
                "iVar1": "result",
                "initialize_memory_080056d4": "initialize_memory",
                "local_48": "local_variable",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "output_param",
                "param_4": "flag_param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080054fc": {
            "additional_data": {
                "&LAB_08005320_1": {
                    "1": "error_label"
                },
                "(int)(short)*(ushort *)(param_2 + 3) << 0x16": {
                    "1": "short_shifted_value"
                },
                "(int)*(short *)((int)param_2 + 0xe)": {
                    "1": "short_value"
                },
                "(int)param_2 + 0x47": {
                    "1": "default_memory_store"
                },
                "*(undefined **)(param_1 + 0x28)": {
                    "1": "assigned_memory"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "memory_flags"
                },
                "*(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfffc | 1": {
                    "1": "update_parameter_value"
                },
                "*(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x80": {
                    "1": "set_parameter_value"
                },
                "*param_2": {
                    "1": "allocated_memory_address"
                },
                "*param_2 = (int)param_2 + 0x47": {
                    "1": "assign_address_to_allocated_memory"
                },
                "*param_2 = iVar2": {
                    "1": "assign_allocated_memory"
                },
                "*param_2[3]": {
                    "1": "parameter_value"
                },
                "*param_2[3] << 0x1e": {
                    "1": "parameter_shifted_value"
                },
                "FUN_080054fc": {
                    "1": "initialize_memory_and_check",
                    "19": "initialize_memory",
                    "2": "initialize_and_check_memory",
                    "3": "initialize_and_assign_memory"
                },
                "allocate_and_assign_memory_08004978": {
                    "1": "allocate_and_assign_memory"
                },
                "iVar2": {
                    "1": "allocated_address",
                    "19": "allocated_memory",
                    "2": "allocation_result",
                    "3": "memory_allocation_result"
                },
                "initialize_and_check_080056f8": {
                    "1": "initialize_and_check"
                },
                "initialize_and_check_memory_080054b4": {
                    "1": "initialize_and_check_memory"
                },
                "local_14": {
                    "1": "temp_pointer",
                    "2": "local_param2",
                    "3": "local_memory_block"
                },
                "local_14 != (int *)0x0": {
                    "1": "local_parameters_not_null"
                },
                "local_18": {
                    "1": "allocated_size",
                    "2": "local_param1",
                    "3": "local_memory_address"
                },
                "param_1": {
                    "1": "first_param",
                    "2": "param1",
                    "6": "memory_address",
                    "8": "base_address"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "param2",
                    "3": "memory_info",
                    "7": "memory_block"
                },
                "param_2[4]": {
                    "1": "allocated_memory_store"
                },
                "param_2[4] = (int)param_2 + 0x47": {
                    "1": "assign_address_to_stored_allocated_memory"
                },
                "param_2[5]": {
                    "1": "allocated_memory_size_store"
                },
                "param_2[5] = 1": {
                    "1": "assign_one_to_stored_local_memory_address"
                },
                "uVar1": {
                    "1": "initialized_flag",
                    "11": "initialized_value",
                    "2": "check_result",
                    "3": "memory_status",
                    "5": "result"
                },
                "uVar1 | *(ushort *)(param_2 + 3)": {
                    "1": "combined_parameter_value"
                }
            },
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "calling": [
                "FUN_080050d0"
            ],
            "code": "\nvoid initialize_memory_080054fc(int base_address,int *memory_block)\n\n{\n  ushort initialized_value;\n  int allocated_memory;\n  int size;\n  int *local_memory_block;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    size = base_address;\n    local_memory_block = memory_block;\n    initialized_value = initialize_and_check_memory(base_address,memory_block,&size,&local_memory_block);\n    allocated_memory = allocate_and_assign_memory(base_address,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(base_address + 0x28) = error_label;\n      *memory_block = allocated_memory;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      allocated_memory_size_store = size;\n      allocated_memory_store = allocated_memory;\n      if ((local_memory_block != (int *)0x0) &&\n         (allocated_memory = initialize_and_check(base_address,(int)*(short *)((int)memory_block + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = initialized_value | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  allocated_memory_store = (int)memory_block + 0x47;\n  allocated_memory_size_store = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_080054fc",
            "entrypoint": "0x080054fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "&LAB_08005320_1": "error_label",
                "FUN_080054fc": "initialize_memory_080054fc",
                "allocate_and_assign_memory_08004978": "allocate_and_assign_memory",
                "iVar2": "allocated_memory",
                "initialize_and_check_080056f8": "initialize_and_check",
                "initialize_and_check_memory_080054b4": "initialize_and_check_memory",
                "local_14": "local_memory_block",
                "local_18": "size",
                "param_1": "base_address",
                "param_2": "memory_block",
                "param_2[4]": "allocated_memory_store",
                "param_2[5]": "allocated_memory_size_store",
                "uVar1": "initialized_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800557c": {
            "called": [],
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800557c",
            "entrypoint": "0x0800557c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800557e": {
            "called": [],
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800557e",
            "entrypoint": "0x0800557e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080055d0": {
            "additional_data": {
                "DAT_200000a0": {
                    "1": "data"
                },
                "DAT_20000674": {
                    "1": "error"
                },
                "FUN_080055d0": {
                    "1": "process_request",
                    "11": "process_data",
                    "2": "initialize_function",
                    "3": "initialize_data",
                    "4": "execute_function"
                },
                "iVar3": {
                    "1": "current_value",
                    "10": "index",
                    "2": "data_value",
                    "3": "function_pointer"
                },
                "iVar7": {
                    "1": "callback_address"
                },
                "in_lr": {
                    "1": "register_value",
                    "2": "lr"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_data",
                    "3": "input_param",
                    "7": "input_value",
                    "9": "input"
                },
                "pcVar4": {
                    "1": "callback_ptr",
                    "14": "function_ptr",
                    "2": "callback",
                    "3": "code_ptr",
                    "4": "function",
                    "5": "function_pointer"
                },
                "piVar1": {
                    "1": "ptr_data",
                    "13": "data_ptr",
                    "4": "data_pointer",
                    "5": "data_array"
                },
                "puVar5": {
                    "1": "data_array_pointer",
                    "2": "pointer_var",
                    "3": "data_array_ptr",
                    "4": "data_ptr_ptr",
                    "6": "data_ptr"
                },
                "uVar2": {
                    "1": "result_code",
                    "17": "result",
                    "2": "status",
                    "3": "thunk_result"
                },
                "unaff_r4": {
                    "1": "unaffected_var_4",
                    "2": "param_4"
                },
                "unaff_r5": {
                    "1": "unused_var2",
                    "2": "param_5"
                }
            },
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "calling": [
                "FUN_080051ac"
            ],
            "code": "\nint process_data_080055d0(uint input)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int index;\n  code *function_ptr;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 lr;\n  undefined4 *data_ptr;\n  \n  data_ptr = DAT_200000a0;\n  data_ptr = &DAT_200000a0;\n  if (0x1f < input) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  index = DAT_200000a0[0x11];\n  if ((index != 0) && (function_ptr = *(code **)(index + input * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + input * 4) = 0;\n      (*function_ptr)(input);\n    }\n    return 0;\n  }\n  result = thunk_initialize_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  index = initialize_data_080040fc(result,input,input,0,data_ptr,param_4,param_5,lr);\n  if ((index == -1) && (DAT_20000674 != 0)) {\n    *data_ptr = DAT_20000674;\n  }\n  return index;\n}\n\n",
            "current_name": "process_data_080055d0",
            "entrypoint": "0x080055d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055d0": "process_data_080055d0",
                "iVar3": "index",
                "in_lr": "lr",
                "param_1": "input",
                "pcVar4": "function_ptr",
                "piVar1": "data_ptr",
                "puVar5": "data_ptr",
                "uVar2": "result",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005608": {
            "additional_data": {
                "FUN_08005608": {
                    "1": "update_param",
                    "12": "update_value",
                    "2": "update_parameter",
                    "3": "update_values",
                    "8": "update_data"
                },
                "bVar3": {
                    "1": "is_initialized",
                    "23": "is_positive",
                    "6": "is_valid"
                },
                "iVar1": {
                    "1": "check_result",
                    "30": "result"
                },
                "initialize_and_check_0800573c": {
                    "2": "initialize_and_check"
                },
                "param_1": {
                    "1": "value1",
                    "2": "input_param",
                    "3": "param1",
                    "6": "param"
                },
                "param_2": {
                    "1": "value2",
                    "2": "buffer",
                    "3": "param2",
                    "6": "arg2",
                    "8": "data"
                },
                "uVar2": {
                    "1": "modified_value",
                    "11": "new_value",
                    "16": "updated_value",
                    "2": "new_data"
                }
            },
            "called": [
                "FUN_0800573c"
            ],
            "calling": [],
            "code": "\nvoid update_value_08005608(undefined4 arg1,int data)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = initialize_and_check(arg1,(int)*(short *)(data + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(data + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_08005608",
            "entrypoint": "0x08005608",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005608": "update_value_08005608",
                "bVar3": "is_positive",
                "iVar1": "result",
                "initialize_and_check_0800573c": "initialize_and_check",
                "param_1": "arg1",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800562a": {
            "additional_data": {
                "FUN_0800562a": {
                    "1": "process_function",
                    "2": "process_data_and_check_error",
                    "21": "process_data",
                    "6": "process_and_check_data"
                },
                "iVar1": {
                    "1": "error_code",
                    "2": "status",
                    "25": "result",
                    "3": "return_value"
                },
                "in_lr": {
                    "1": "constant3",
                    "2": "param5",
                    "3": "unused_var3"
                },
                "initialize_and_check_error_08005718": {
                    "2": "initialize_and_check_error"
                },
                "param_1": {
                    "1": "output_value",
                    "17": "output",
                    "2": "output_buffer",
                    "5": "result"
                },
                "param_2": {
                    "1": "input_array",
                    "11": "data",
                    "2": "input_pointer",
                    "9": "input"
                },
                "param_3": {
                    "1": "value1",
                    "12": "param1",
                    "13": "param_a",
                    "2": "param3"
                },
                "param_4": {
                    "1": "var2",
                    "12": "param2",
                    "13": "param_b",
                    "2": "param4"
                },
                "process_data_080040ec": {
                    "1": "process_data"
                },
                "unaff_r4": {
                    "1": "unused_reg4",
                    "3": "unused_var1"
                },
                "unaff_r5": {
                    "1": "constant2",
                    "3": "unused2"
                }
            },
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "calling": [],
            "code": "\nvoid process_data_0800562a(int *output,int data,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_error(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_data_0800562a((int)*(short *)(data + 0xe),param_a,param_b,param_b,param_b,unused_var1,\n                       unused_var2,unused_var3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0800562a",
            "entrypoint": "0x0800562a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "iVar1": "result",
                "in_lr": "unused_var3",
                "initialize_and_check_error_08005718": "initialize_and_check_error",
                "param_1": "output",
                "param_2": "data",
                "param_3": "param_a",
                "param_4": "param_b",
                "process_data_080040ec": "process_data",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005662": {
            "additional_data": {
                "FUN_08005662": {
                    "1": "initialize_check_error_and_update_flags",
                    "2": "initialize_and_set_flags",
                    "4": "initialize_and_update_flags",
                    "5": "initialize_and_update_status",
                    "8": "initialize_and_check_error"
                },
                "FUTURE_IMPROVED_NAME": {
                    "1": "check_and_initialize"
                },
                "bVar3": {
                    "1": "error_occurred",
                    "2": "error",
                    "25": "is_error",
                    "3": "error_flag"
                },
                "iVar1": {
                    "1": "error_status",
                    "22": "result",
                    "7": "error_code"
                },
                "param_1": {
                    "1": "param_a",
                    "2": "input_param",
                    "4": "arg1",
                    "5": "param1",
                    "7": "param"
                },
                "param_2": {
                    "1": "context",
                    "2": "data_ptr",
                    "3": "buffer",
                    "4": "arg2",
                    "5": "param2"
                },
                "uVar2": {
                    "1": "updated_flag",
                    "2": "new_value",
                    "6": "flags",
                    "7": "modified_value"
                }
            },
            "called": [
                "FUN_08005718"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_check_error_08005662(undefined4 param,int param2)\n\n{\n  int result;\n  ushort modified_value;\n  bool is_error;\n  \n  result = initialize_and_check_error_08005662_08005718(param,(int)*(short *)(param2 + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    modified_value = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    modified_value = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(param2 + 0xc) = modified_value;\n  }\n  if (!is_error) {\n    *(ushort *)(param2 + 0xc) = modified_value;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_error_08005662",
            "entrypoint": "0x08005662",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005662": "initialize_and_check_error_08005662",
                "bVar3": "is_error",
                "iVar1": "result",
                "param_1": "param",
                "param_2": "param2",
                "uVar2": "modified_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080056d4": {
            "additional_data": {
                "FUN_080056d4": {
                    "1": "initialize_memory_and_assign_result",
                    "15": "initialize_memory",
                    "2": "initialize_memory_and_assign",
                    "6": "initialize_and_check_memory"
                },
                "iVar1": {
                    "1": "result_code",
                    "12": "result",
                    "2": "memory_result",
                    "4": "return_value",
                    "5": "init_result"
                },
                "param_1": {
                    "1": "output",
                    "12": "result",
                    "2": "output_value",
                    "3": "result_pointer",
                    "4": "output_ptr",
                    "5": "output_pointer"
                },
                "param_2": {
                    "1": "init_value1",
                    "11": "arg1",
                    "2": "input_value1",
                    "3": "size",
                    "4": "input1"
                },
                "param_3": {
                    "1": "init_value2",
                    "11": "arg2",
                    "2": "input_2",
                    "3": "size_2",
                    "4": "input2"
                },
                "param_4": {
                    "1": "value2",
                    "11": "arg3",
                    "2": "input_value3",
                    "4": "input3"
                }
            },
            "called": [
                "FUN_080040d6"
            ],
            "calling": [
                "FUN_080054b4"
            ],
            "code": "\nvoid initialize_memory_080056d4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_memory_080056d4_080040d6(arg1,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_080056d4",
            "entrypoint": "0x080056d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080056d4": "initialize_memory_080056d4",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080056f8": {
            "additional_data": {
                "FUN_080056f8": {
                    "1": "initialize_and_assign_result",
                    "10": "initialize_and_check",
                    "2": "initialize_and_assign",
                    "3": "initialize_and_check_result",
                    "4": "initialize_and_store_result"
                },
                "iVar1": {
                    "1": "initialization_status",
                    "10": "result",
                    "5": "initialization_result"
                },
                "param_1": {
                    "1": "output_parameter",
                    "10": "result",
                    "2": "result_pointer",
                    "3": "output_value",
                    "5": "result_ptr",
                    "6": "output"
                },
                "param_2": {
                    "1": "value",
                    "10": "input_value",
                    "3": "input_param",
                    "9": "input"
                }
            },
            "called": [
                "FUN_080040e0"
            ],
            "calling": [
                "FUN_080054fc"
            ],
            "code": "\nvoid initialize_and_check_080056f8(int *result,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_080040e0(input_value);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_080056f8",
            "entrypoint": "0x080056f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080056f8": "initialize_and_check_080056f8",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005718": {
            "additional_data": {
                "FUN_08005718": {
                    "1": "initialize_and_assign_result",
                    "2": "initialize_and_assign",
                    "3": "initialize_and_assign_error_code",
                    "4": "initialize_and_assign_error",
                    "5": "initialize_and_check_error"
                },
                "iVar1": {
                    "1": "result_of_initialization",
                    "14": "init_result",
                    "7": "result"
                },
                "initialize_080040e4": {
                    "1": "initialize"
                },
                "param_1": {
                    "1": "result_pointer",
                    "12": "result",
                    "2": "output_value",
                    "3": "output",
                    "4": "result_ptr"
                },
                "param_2": {
                    "1": "param",
                    "13": "arg1",
                    "2": "arg2",
                    "4": "param_a"
                },
                "param_3": {
                    "1": "var2",
                    "13": "arg2",
                    "2": "arg3",
                    "4": "param_b"
                },
                "param_4": {
                    "1": "input_arg_3",
                    "13": "arg3",
                    "2": "value3",
                    "4": "param_c"
                }
            },
            "called": [
                "FUN_080040e4"
            ],
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "code": "\nvoid initialize_and_check_error_08005718(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000674 = 0;\n  init_result = initialize(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_error_08005718",
            "entrypoint": "0x08005718",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005718": "initialize_and_check_error_08005718",
                "iVar1": "init_result",
                "initialize_080040e4": "initialize",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800573c": {
            "additional_data": {
                "FUN_0800573c": {
                    "1": "initialize_and_assign_result",
                    "4": "initialize_and_check_result",
                    "5": "initialize_and_check_error",
                    "8": "initialize_and_check"
                },
                "iVar1": {
                    "1": "return_value",
                    "19": "init_result",
                    "2": "initialize_result",
                    "5": "result"
                },
                "param_1": {
                    "1": "updated_param",
                    "19": "result",
                    "3": "result_ptr",
                    "5": "output"
                },
                "param_2": {
                    "1": "arg2",
                    "16": "arg1",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "value2",
                    "16": "arg2",
                    "3": "input_2"
                },
                "param_4": {
                    "1": "arg_3",
                    "16": "arg3",
                    "3": "param_4"
                }
            },
            "called": [
                "FUN_080040e8"
            ],
            "calling": [
                "FUN_08005608"
            ],
            "code": "\nvoid initialize_and_check_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000674 = 0;\n  init_result = initialize_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_0800573c",
            "entrypoint": "0x0800573c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800573c": "initialize_and_check_0800573c",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005760": {
            "additional_data": {
                "DAT_200005d0": {
                    "1": "data_variable_12",
                    "2": "data12"
                },
                "DAT_200005d4": {
                    "1": "data_variable_11",
                    "2": "data11"
                },
                "DAT_200005d8": {
                    "1": "data_variable_10",
                    "2": "data_10"
                },
                "DAT_200005dc": {
                    "1": "data_variable_9",
                    "2": "data_9"
                },
                "DAT_200005e0": {
                    "1": "data_variable_8",
                    "2": "data8"
                },
                "DAT_200005e4": {
                    "1": "data_variable_7",
                    "2": "data7"
                },
                "DAT_200005e8": {
                    "1": "data_variable_6",
                    "2": "data_6"
                },
                "DAT_200005ec": {
                    "1": "data_variable_5",
                    "2": "data_5"
                },
                "DAT_200005f0": {
                    "1": "data_variable_4",
                    "2": "data_4"
                },
                "DAT_200005f4": {
                    "1": "data_variable_3",
                    "2": "data3"
                },
                "DAT_200005f8": {
                    "1": "data_variable_2",
                    "2": "data2"
                },
                "DAT_200005fc": {
                    "1": "data_variable_1",
                    "2": "data_1"
                },
                "FUN_08005760": {
                    "1": "process_data_and_update",
                    "12": "update_data",
                    "2": "update_and_process_data",
                    "3": "update_data_and_process",
                    "6": "process_and_update_data"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "data_processing_function",
                    "17": "jump_table",
                    "2": "update_data_jumptable"
                },
                "process_and_update_data_080051ac": {
                    "1": "update_data",
                    "10": "process_and_update_data",
                    "2": "process_data"
                }
            },
            "called": [
                "FUN_080051ac"
            ],
            "calling": [
                "FUN_080047c0"
            ],
            "code": "\nvoid update_data_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = update_data_08005760;\n  process_and_update_data_08005760();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "update_data_08005760",
            "entrypoint": "0x08005760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005760": "update_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "process_and_update_data_080051ac": "process_and_update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f8": {
            "called": [],
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080059f8",
            "entrypoint": "0x080059f8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a04": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a04",
            "entrypoint": "0x08005a04",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "calling": [],
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  execute_data_processing_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x08000d3c",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "additional_data": {
                "": {
                    "2": ""
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "DAT_": {
                    "1": ""
                },
                "PTR_": {
                    "1": ""
                },
                "PTR_1234": {
                    "1": "status_ptr"
                },
                "initialize": {
                    "1": "initialize"
                },
                "return": {
                    "1": "return_value"
                },
                "return value": {
                    "1": "success"
                },
                "thunk_FUN_0800410c": {
                    "1": "get_constant_value",
                    "2": "initialize_program",
                    "3": "get_status",
                    "5": "get_one"
                },
                "undefined4": {
                    "1": "bool",
                    "2": "void",
                    "3": "status",
                    "4": "int"
                }
            },
            "called": [
                "FUN_0800410c"
            ],
            "calling": [
                "FUN_080055d0"
            ],
            "code": "\nint initialize_thunk_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_thunk_0800410c",
            "entrypoint": "0x08005604",
            "imported": false,
            "improved": true,
            "renaming": {
                "return": "result",
                "thunk_FUN_0800410c": "initialize_thunk_0800410c",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 678462
}