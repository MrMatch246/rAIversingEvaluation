{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "extract_bits_and_update_080006b4",
                "param_1": "input_data",
                "bVar1": "is_overflowed",
                "uVar2": "current_byte_value",
                "iVar3": "bits_stored_so_far",
                "bVar4": "current_bit_value"
            },
            "code": "int extract_bits_and_update_080006b4(int **input_data){\n  bool is_overflowed;\n  undefined current_byte_value;\n  int bits_stored_so_far;\n  byte current_bit_value;\n  if (1 < *(byte *)((int)input_data + 6))) {\n    extract_and_update_bit_080041bc(*(byte *)((int)input_data + 6),0);\n  }\n  *(undefined *)((int)input_data + 0x49) = 0;\n  if (*(byte *)((int)input_data + 5) < 4) {\n    is_overflowed = false;\n    while (bits_stored_so_far = (**(code **)(**input_data + 8))(), bits_stored_so_far != 0) {\n      current_bit_value = *(byte *)((int)input_data + 0x49);\n      current_byte_value = (**(code **)(**input_data + 0xc))();\n      *(undefined *)((int)input_data + current_bit_value + 9) = current_byte_value;\n      current_bit_value = *(char *)((int)input_data + 0x49) + 1;\n      *(byte *)((int)input_data + 0x49) = current_bit_value;\n      if (0x3f < current_bit_value) {\n        is_overflowed = true;\n      }\n    }\n  }\n  else {\n    is_overflowed = false;\n  }\n  *(short *)(input_data + 0x14) = *(short *)(input_data + 0x14) + 1;\n  if (is_overflowed) {\n    *(short *)(input_data + 0x15) = *(short *)(input_data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)input_data + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "extract_bits_and_update_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_080034da(int value, short *array) {\n  while (true) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) {\n      break;\n    }\n    array = array + 6;\n  }\n  return *(int *)(array + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_flags_based_on_value_080035fc",
                "param_1": "value_ptr",
                "DAT_08003718": "VALUE_1",
                "DAT_0800371c": "VALUE_3",
                "DAT_08003720": "VALUE_4",
                "DAT_08003724": "VALUE_5",
                "DAT_08003728": "VALUE_6",
                "DAT_0800372c": "VALUE_7",
                "DAT_08003730": "VALUE_8",
                "DAT_08003734": "VALUE_9",
                "DAT_08003738": "VALUE_10",
                "DAT_0800373c": "VALUE_11",
                "DAT_08003740": "VALUE_12",
                "DAT_08003744": "VALUE_13",
                "DAT_08003748": "VALUE_14",
                "DAT_0800374c": "flag_data"
            },
            "code": "void set_flags_based_on_value_080035fc(int *value_ptr)\n{\n    uint *flag_ptr = (uint *)(DAT_0800374c + 0x40);\n    uint *other_flag_ptr = (uint *)(DAT_0800374c + 0x44);\n    \n    if (*value_ptr == DAT_08003718) {\n        *flag_ptr &= 0xfffffffe;\n    }\n    if (*value_ptr == VALUE_2) {\n        *flag_ptr &= 0xfffffffd;\n    }\n    if (*value_ptr == DAT_0800371c) {\n        *flag_ptr &= 0xfffffffb;\n    }\n    if (*value_ptr == DAT_08003720) {\n        *flag_ptr &= 0xfffffff7;\n    }\n    if (*value_ptr == DAT_08003724) {\n        *flag_ptr &= 0xffffffef;\n    }\n    if (*value_ptr == DAT_08003728) {\n        *flag_ptr &= 0xffffffdf;\n    }\n    if (*value_ptr == DAT_0800372c) {\n        *other_flag_ptr &= 0xfffffffd;\n    }\n    if (*value_ptr == DAT_08003730) {\n        *other_flag_ptr &= 0xfffeffff;\n    }\n    if (*value_ptr == DAT_08003734) {\n        *other_flag_ptr &= 0xfffdffff;\n    }\n    if (*value_ptr == DAT_08003738) {\n        *other_flag_ptr &= 0xfffbffff;\n    }\n    if (*value_ptr == DAT_0800373c) {\n        *flag_ptr &= 0xffffffbf;\n    }\n    if (*value_ptr == DAT_08003740) {\n        *flag_ptr &= 0xffffff7f;\n    }\n    if (*value_ptr == DAT_08003744) {\n        *flag_ptr &= 0xfffffeff;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_value_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_sum_34_odd_08003dd0",
                "param_1": "input",
                "uVar1": "sum",
                "PTR_DAT_08003df0": "data_pointer",
                "byte": "byte_value",
                "get_sum_of_39_and_3a_offsets_0800312c": "get_sum_of_offsets_34_and_3a_0800312c"
            },
            "code": "bool is_sum_34_odd_08003dd0(int input) {\n    uint32_t offset = *(uint32_t *)(PTR_DAT_08003df0 + (uint32_t)*(uint8_t *)(input + 0x44) * 4);\n    uint32_t sum = get_sum_of_offsets_34_and_3a_0800312c(offset);\n    return (sum % 2) == 1;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "is_sum_34_odd_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "set_values_and_flags_08000c8c",
                "local_54": "value1",
                "local_50": "value2",
                "local_3c": "value3",
                "local_38": "value4",
                "local_34": "value5",
                "local_30": "value6",
                "local_2c": "value7",
                "local_28": "value8",
                "local_24": "flag1",
                "local_20": "value9",
                "local_1c": "value10",
                "local_18": "value11",
                "DAT_08000d30": "data_block",
                "DAT_08000d34": "data_block_flags",
                "DAT_08000d38": "data_block_param"
            },
            "code": "void set_values_and_flags_08000c8c(void)\n{\n  uint value1;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  undefined4 value8;\n  undefined4 value9;\n  undefined4 value10;\n  \n  *(uint *)(DAT_08000d30 + 0x40) |= 0x10000000;\n  *DAT_08000d34 |= 0xc000;\n  \n  value1 = 1;\n  value2 = 0x50000;\n  value3 = 2;\n  value4 = 0x400000;\n  value5 = 8;\n  value6 = 0x150;\n  value7 = 2;\n  value8 = 7;\n  FUNC_0800201c(&value1);\n  set_and_check_values_08002488(&value9,5);\n  flag1 = 0xf;\n  value9 = 2;\n  value10 = 0x1400;\n  value11 = 0x1000;\n  check_param_and_set_values_08000ee0((uint)((ulonglong)*DAT_08000d38 * (ulonglong)get_value_from_pointer_080025e0() >> 0x26));\n  set_flag_08000f2c(4);\n  decode_bits_08000e60(0xffffffff,0,0);\n  return;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_values_and_flags_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_value_at_index_08000a4e",
                "param_1": "data",
                "param_2": "index",
                "bVar1": "combined_value",
                "uVar2": "value_to_insert"
            },
            "code": "uint8_t get_value_at_index_08000a4e(uint8_t *data, uint8_t index) {\n  uint8_t combined_value = combine_values(data[11], data[12]);\n  uint16_t value_to_insert = combine_values(data[13], data[14]);\n  *(uint16_t *)(data + combined_value * 2) = value_to_insert;\n  *(uint8_t *)(data + 73) = 6;\n  update_crc_and_extract_bits(data);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "execute_function_with_interrupts_08004658",
                "do_nothing_08004646": "do_nothing",
                "execute_interrupt_and_function_calls_08000c4c": "execute_interrupt_and_function_calls",
                "extract_data_from_buffer_08000c64": "extract_data_from_buffer",
                "DAT_08004674": "data_available",
                "calculate_value_if_not_zero_08004338": "calculate_value_if_not_zero"
            },
            "code": "void execute_function_with_interrupts_08004658(void)\n{\n  do_nothing();\n  execute_interrupt_and_function_calls();\n  do {\n    do {\n      extract_data_from_buffer();\n    } while (DAT_08004674() == 0);\n    calculate_value_if_not_zero();\n  } while( true );\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_function_with_interrupts_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_value_if_not_minus_one_080034f4",
                "param_1": "value",
                "uVar1": "result",
                "find_value_in_array_080034da": "find_value_in_array"
            },
            "code": "int find_value_if_not_minus_one_080034f4(int value) {\n  int result = 0;\n  if (value != -1) {\n    result = find_value_in_array();\n  }\n  return result;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_value_if_not_minus_one_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_in_array_0800355e",
                "param_1": "target",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_short_in_array_0800355e(int target, short* array)\n{\n    if (target == -1) {\n        return 0;\n    }\n    while (*array != -1) {\n        if (target == *array) {\n            return 1;\n        }\n        array += 6;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "process_data_0800573c",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr",
                "iVar2": "return_val"
            },
            "code": "void process_data_0800573c(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *data_ptr;\n  int return_val;\n  data_ptr = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  return_val = return_zero_080040e8(input1, input2, input3, input3, input3);\n  if ((return_val == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "process_data_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "data_pointer",
                "param_2": "data_value",
                "param_3": "bit_position",
                "param_4": "is_valid",
                "iVar1": "is_odd_sum",
                "uVar2": "data_index"
            },
            "code": "void update_data_08003e54(int data_pointer, int data_value, int bit_position, bool is_valid) {\n  if (data_pointer != 0) {\n    int is_odd_sum = is_sum_of_34_odd();\n    if (is_odd_sum == 0) {\n      uint8_t data_index = *(uint8_t*)(data_pointer + 0x44);\n      *(int*)(DATA_PTR_08003ea4 + data_index * 4) = data_pointer;\n      *(int*)(DATA_PTR_08003ea0 + data_index * 4) = data_value;\n      decode_bits((int)*(char*)(data_pointer + 0x5c), 0, 1, data_index, is_valid);\n      set_bit_at_index((int)*(char*)(data_pointer + 0x5c));\n      check_data_validity(*(int*)(DATA_PTR_08003ea8 + data_index * 4), data_pointer + 0x45, is_valid);\n    }\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "update_data_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_int",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "var_4"
            },
            "code": "void process_data_08004fdc(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int ptr_int = *(int *)PTR_PTR_DAT_08005008;\n  undefined4 var_1 = data_1;\n  undefined4 var_2 = data_2;\n  undefined4 var_3 = data_3;\n  undefined4 var_4 = data_4;\n  if ((ptr_int != 0) && (*(int *)(ptr_int + 0x18) == 0)) {\n    initialize_data_080053a0(ptr_int);\n  }\n  FUNC_08004a84(ptr_int, *(undefined4 *)(ptr_int + 8), data_1, &var_2, var_1, &var_2);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_080053a0(iVar1);\n  }\n  FUNC_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "set_memory_permissions_080056d4",
                "param_1": "error_code",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "permission_address",
                "iVar2": "result"
            },
            "code": "void set_memory_permissions_080056d4(int *error_code, int start_address, int size, int permissions, int protection) {\n    undefined *permission_address = PTR_DAT_080056f4;\n    *(undefined4 *)PTR_DAT_080056f4 = 0;\n    int result = set_memory_permissions_080056d4_080040d6(start_address, size, size, permissions, protection);\n    if (result == -1 && (*(int *)permission_address != 0)) {\n        *error_code = *(int *)permission_address;\n    }\n    return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c() {\n  return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "clear_bit_at_index_if_not_minus_one_080033d8",
                "param_1": "index",
                "local_1c": "local_array",
                "find_value_if_not_minus_one_080034f4": "find_value_if_not_minus_one",
                "PTR_DAT_08003408": "PTR_DAT",
                "get_value_index_08003380": "get_value_index",
                "clear_bit_08000f72": "clear_bit",
                "set_zero_and_clear_bit_at_31_of_uint32_08000f56": "set_zero_and_clear_bit_at_31_of_uint32"
            },
            "code": "void clear_bit_at_index_if_not_minus_one_080033d8(int index){\n    int value = find_value_if_not_minus_one(param_1, PTR_DAT_08003408_08003408);\n    if (value != 0) {\n        int value_index = get_value_index(param_1);\n        if (value_index == 0 || value_index == 0x10) {\n            clear_bit(local_array, value_index);\n            set_zero_and_clear_bit_at_31_of_uint32(local_array);\n        }\n    }\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "clear_bit_at_index_if_not_minus_one_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = get_value_shifted_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = get_value_shifted_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = get_value_shifted_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = get_value_shifted_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = get_value_shifted_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = get_shifted_value_from_pointer_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_shifted_value_from_pointer_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = get_shifted_value_from_pointer_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = get_shifted_value_from_pointer_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = get_shifted_value_from_pointer_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = get_value_shifted_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = get_value_shifted_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = get_value_shifted_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = get_value_shifted_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = get_value_shifted_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = get_shifted_value_from_pointer_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = get_shifted_value_from_pointer_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = get_shifted_value_from_pointer_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = get_shifted_value_from_pointer_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = get_shifted_value_from_pointer_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "set_and_check_values_08002488",
                "param_1": "input_values",
                "param_2": "num_values",
                "puVar1": "dat_080025d0",
                "iVar2": "var_1",
                "iVar3": "var_2",
                "uVar4": "var_3"
            },
            "code": "uint32_t set_and_check_values_08002488(uint32_t *input_values, uint32_t num_values)\n{\n  uint32_t *dat_080025d0 = DAT_080025d0;\n  uint32_t *dat_080025d4 = DAT_080025d4;\n  uint32_t max_num_values = (*dat_080025d0 & 0xf);\n\n  if (input_values == NULL) {\n    return 1;\n  }\n\n  if (max_num_values < num_values) {\n    *(char *)dat_080025d0 = (char)num_values;\n    if (num_values != (*dat_080025d0 & 0xf)) {\n      return 1;\n    }\n  }\n\n  if ((*input_values & 2) != 0) {\n    if ((*input_values & 4) != 0) {\n      dat_080025d4[2] |= 0x1c00;\n    }\n    if ((*input_values & 8) != 0) {\n      dat_080025d4[2] |= 0xe000;\n    }\n    dat_080025d4[2] = (dat_080025d4[2] & 0xfffffff0) | input_values[2];\n  }\n\n  if ((*input_values & 1) != 0) {\n    uint32_t uVar4 = input_values[1];\n    if (uVar4 == 1) {\n      if ((*dat_080025d4 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (uVar4 - 2 < 2) {\n      if ((*dat_080025d4 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((*dat_080025d4 & 2) == 0) {\n      return 1;\n    }\n    dat_080025d4[2] = uVar4 | (dat_080025d4[2] & 0xfffffffc);\n    int iVar2 = get_value_from_pointer_08000e30();\n    while (true) {\n      if ((dat_080025d4[2] & 0xc) == input_values[1] * 4) break;\n      int iVar3 = get_value_from_pointer_08000e30();\n      if (5000 < (uint32_t)(iVar3 - iVar2)) {\n        return 3;\n      }\n    }\n  }\n\n  if (num_values < max_num_values) {\n    *(char *)dat_080025d0 = (char)num_values;\n    if (num_values != (*dat_080025d0 & 0xf)) {\n      return 1;\n    }\n  }\n\n  if ((*input_values & 4) != 0) {\n    dat_080025d4[2] = (dat_080025d4[2] & 0xffffe3ff) | input_values[3];\n  }\n\n  if ((*input_values & 8) != 0) {\n    dat_080025d4[2] = (dat_080025d4[2] & 0xffff1fff) | (input_values[4] << 3);\n  }\n\n  uint32_t calculated_params = calculate_params_080023b4();\n  *(uint32_t *)PTR_DAT_080025dc = calculated_params >> PTR_DAT_080025d8[(dat_080025d4[2] << 0x18) >> 0x1c];\n  check_and_set_values_08000d98(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_and_check_values_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_params_08004544",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void set_params_08004544(undefined4 *param_array, undefined param_2, undefined param_3, undefined param_4, undefined param_5) {\n  *param_array = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(param_array + 1) = param_2;\n  *(undefined *)((int)param_array + 5) = param_3;\n  *(undefined *)((int)param_array + 6) = param_4;\n  *(undefined *)((int)param_array + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "set_params_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "update_short_value_if_not_zero_08003cc8",
                "sVar1": "current_short_value",
                "puVar2": "data_pointer",
                "uVar3": "new_short_value",
                "iVar4": "index",
                "uVar5": "value"
            },
            "code": "void update_short_value_if_not_zero_08003cc8(void)\n{\n  short current_short_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  int index = find_value_if_not_minus_one(current_short_value, PTR_DAT_08003d0c);\n  if (index != 0) {\n    undefined4 value = find_value_if_not_minus_one(current_short_value, PTR_DAT_08003d0c);\n    undefined2 new_short_value = find_short_value_if_not_zero(value, PTR_DAT_08003d10);\n    undefined *data_pointer = PTR_DAT_08003d14;\n    *(undefined2 *)(PTR_DAT_08003d14 + 0x5a) = new_short_value;\n    *(short *)(data_pointer + 0x58) = current_short_value;\n    *(undefined4 *)(data_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(data_pointer + 0x54) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    FUNC_08003978(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "update_short_value_if_not_zero_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data_array",
                "param_2": "update_array",
                "puVar1": "data_ptr",
                "puVar2": "update_ptr",
                "uVar3": "bit_mask",
                "uVar4": "bit_val",
                "uVar5": "bit_pos",
                "uVar6": "data_val",
                "uVar7": "update_val",
                "iVar8": "data_idx",
                "iVar10": "update_idx"
            },
            "code": "void update_data_08000fb4(uint *data_array,uint *update_array)\n{\n  uint *data_ptr;\n  uint *update_ptr;\n  uint bit_mask;\n  uint bit_val;\n  uint bit_pos;\n  uint data_val;\n  uint update_val;\n  int data_idx;\n  int update_idx;\n  for (bit_pos = 0; bit_pos < 0x10; bit_pos++) {\n    bit_mask = 1 << (bit_pos & 0xff);\n    bit_val = bit_mask & *update_array;\n    if (bit_mask == bit_val) {\n      if ((update_array[1] == 2) || (update_array[1] == 0x12)) {\n        data_idx = (bit_pos >> 3) + 8;\n        update_idx = (bit_pos & 7) << 2;\n        data_array[data_idx] = data_array[data_idx] & ~(0xf << update_idx) | update_array[4] << update_idx;\n      }\n      data_val = ~(3 << (bit_pos << 1 & 0xff));\n      *data_array = *data_array & data_val | (update_array[1] & 3) << (bit_pos << 1 & 0xff);\n      update_val = update_array[1];\n      if (((update_val - 1 < 2) || (update_val == 0x11)) || (update_val == 0x12)) {\n        data_array[2] = data_array[2] & data_val | update_array[3] << (bit_pos << 1 & 0xff);\n        data_array[1] = data_array[1] & ~bit_mask | ((update_array[1] << 0x1b) >> 0x1f) << (bit_pos & 0xff);\n      }\n      data_array[3] = data_val & data_array[3] | update_array[2] << (bit_pos << 1 & 0xff);\n      if ((update_array[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        update_idx = (bit_pos & 3) << 2;\n        if (data_array == PTR_DAT_08001190) {\n          data_idx = 0;\n        }\n        else if (data_array == PTR_DAT_08001194) {\n          data_idx = 1;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x100) {\n          data_idx = 2;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x200) {\n          data_idx = 3;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x300) {\n          data_idx = 4;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x400) {\n          data_idx = 5;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x500) {\n          data_idx = 6;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x600) {\n          data_idx = 7;\n        }\n        else if (data_array == PTR_DAT_08001194 + 0x700) {\n          data_idx = 8;\n        }\n        else {\n          data_idx = 10;\n        }\n        *(uint *)(PTR_DAT_08001184 + ((bit_pos >> 2) + 2) * 4) =\n             *(uint *)(PTR_DAT_08001184 + ((bit_pos >> 2) + 2) * 4) & ~(0xf << update_idx) | data_idx << update_idx;\n        data_ptr = PTR_DAT_08001188;\n        data_val = ~bit_val;\n        update_val = *PTR_DAT_08001188 & data_val;\n        if ((update_array[1] & 0x10000) != 0) {\n          update_val = bit_val | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = update_val;\n        update_ptr = PTR_DAT_08001188;\n        update_val = data_val & data_ptr[1];\n        if ((update_array[1] & 0x20000) != 0) {\n          update_val = bit_val | data_ptr[1];\n        }\n        PTR_DAT_08001188[1] = update_val;\n        data_ptr = PTR_DAT_08001188;\n        update_val = data_val & update_ptr[2];\n        if ((update_array[1] & 0x100000) != 0) {\n          update_val = bit_val | update_ptr[2];\n        }\n        PTR_DAT_08001188[2] = update_val;\n        data_val = data_val & data_ptr[3];\n        if ((update_array[1] & 0x200000) != 0) {\n          data_val = bit_val | data_ptr[3];\n        }\n        PTR_DAT_08001188[3] = data_val;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_input",
                "puVar3": "ptr_input_9"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  input[0][1] &= 0xfffff8ff;\n  **input |= 1;\n  **input &= 0xfffffbff;\n  uint32_t *ptr_input = *input;\n  if ((ptr_input[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input + 0x2a) != 0) {\n    if ((ptr_input[5] & 4) != 0) {\n      uint32_t *ptr_input_9 = input[9];\n      input[9] = (uint32_t *)((int)ptr_input_9 + 1);\n      *(char *)ptr_input_9 = (char)ptr_input[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) - 1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr_input = input[9];\n      input[9] = (uint32_t *)((int)ptr_input + 1);\n      *(char *)ptr_input = (char)(*input)[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) - 1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_execute_command;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      execute_command();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing();\n    }\n  }\n  else {\n    process_input_08001bfc();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "clean_up_08002d72",
                "param_1": "data",
                "do_nothing_08002d70": "do_nothing",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int clean_up_08002d72(int *data)\n{\n    if (data != NULL) {\n        if (*(char *)((int)data + 0x39) == '\\0') {\n            *(undefined *)(data + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)data + 0x39) = '$';\n        *(uint *)(*data + 0xc) &= 0xffffdfff;\n        FUNC_080029c8(data);\n        *(uint *)(*data + 0x10) &= 0xffffb7ff;\n        *(uint *)(*data + 0x14) &= 0xffffffd5;\n        *(uint *)(*data + 0xc) |= 0x2000;\n        data[0xf] = 0;\n        *(undefined *)((int)data + 0x39) = ' ';\n        *(undefined *)((int)data + 0x3a) = ' ';\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "clean_up_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_values_080007f0",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "bVar1": "found",
                "bVar2": "byte_value",
                "cVar3": "char_value1",
                "cVar4": "char_value2",
                "iVar5": "int_value1",
                "uVar6": "uint_value1",
                "iVar7": "int_value2"
            },
            "code": "int check_values_080007f0(int parameter_1, int parameter_2, uint parameter_3, int parameter_4)\n{\n  bool found = false;\n  byte byte_value;\n  char char_value1;\n  char char_value2;\n  int int_value1;\n  uint uint_value1;\n  int int_value2;\n  \n  uint_value1 = 0;\n  do {\n    if (7 < uint_value1) {\n      found = false;\nLAB_0800080a:\n      if (!found) {\n        parameter_1 += 0x54;\n        *(short *)parameter_1 += 1;\n        return 1;\n      }\n      int_value2 = *(byte *)(parameter_1 + 10) - 1;\n      switch(*(byte *)(parameter_1 + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        char_value1 = combine_values(*(undefined *)(parameter_1 + 0xb),*(undefined *)(parameter_1 + 0xc),parameter_3,\n                             int_value2,parameter_4);\n        char_value2 = combine_values(*(undefined *)(parameter_1 + 0xd),*(undefined *)(parameter_1 + 0xe));\n        if (*(byte *)(parameter_1 + 0x60) < (byte)(char_value2 + char_value1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        int_value2 = combine_values(*(undefined *)(parameter_1 + 0xb),*(undefined *)(parameter_1 + 0xc),parameter_3,\n                             int_value2,parameter_4);\n        if ((uint)*(byte *)(parameter_1 + 0x60) < (uint)(int_value2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        byte_value = combine_values(*(undefined *)(parameter_1 + 0xb),*(undefined *)(parameter_1 + 0xc),parameter_3,\n                             int_value2,parameter_4);\n        if (*(byte *)(parameter_1 + 0x60) < byte_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    parameter_3 = (uint)*(byte *)(parameter_1 + 10);\n    if ((byte)PTR_DAT_080008c8[uint_value1] == parameter_3) {\n      found = true;\n      goto LAB_0800080a;\n    }\n    uint_value1 = uint_value1 + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  int_value2 = combine_values(*(undefined *)(parameter_1 + 0xb),*(undefined *)(parameter_1 + 0xc),parameter_3,int_value2,\n                       parameter_4);\n  int_value1 = combine_values(*(undefined *)(parameter_1 + 0xd),*(undefined *)(parameter_1 + 0xe));\n  if ((uint)*(byte *)(parameter_1 + 0x60) <\n      (((uint)(int_value2 << 0xc) >> 0x10) + ((uint)(int_value1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_values_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_input_0800562a",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "input_param1",
                "param_4": "input_param2",
                "sVar1": "input_value",
                "zero_return_function_08005718": "zero_return_function",
                "puVar2": "PTR_DAT_080056b0",
                "iVar3": "process_input_result"
            },
            "code": "void process_input_0800562a(int *output, int input_address, int input_param1, int input_param2) {\n  \n  int input_value = *(short *)(input_address + 0xe);\n  if ((int)((uint)*(ushort *)(input_address + 0xc) << 0x17) < 0) {\n    zero_return_function(output, input_value, 0, 2);\n  }\n  *(ushort *)(input_address + 0xc) = *(ushort *)(input_address + 0xc) & 0xefff;\n  int process_input_0800562a_result = process_input_0800562a_wrapper(input_value, input_param1, input_param2, input_param2, input_param2, unaff_r4, unaff_r5, in_lr);\n  if ((process_input_0800562a_result == -1) && (*(int *)PTR_DAT_080056b0 != 0)) {\n    *output = *(int *)PTR_DAT_080056b0;\n  }\n  return;\n}",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_if_param_is_one_080044d8",
                "param_1": "is_param_one",
                "param_2": "is_param_two",
                "param_3": "parameter_three",
                "param_4": "parameter_four",
                "initialize_parameters_0800447c": "initialize_parameters",
                "PTR_DAT_080044f8": "PTR_DAT",
                "DAT_080044f4": "DAT"
            },
            "code": "void initialize_if_param_is_one_080044d8(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    if (param_1 != 1)\n    {\n        return;\n    }\n    if (param_2 == 0xffff)\n    {\n        initialize_parameters(PTR_DAT_080044f4_080044f8_080044f8, DAT_080044f4_080044f4, param_3, 0xffff, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_is_one_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_offset_08003df4",
                "param_1": "offset_index",
                "uVar1": "sum_of_offsets",
                "get_sum_of_39_and_3a_offsets_0800312c": "get_sum_of_offsets",
                "PTR_DAT_08003e14": "ptr_dat_08003e14",
                "byte": "byte_val",
                "*(undefined4 *)": "*(uint32_t *)",
                "DAT_0800312c": "dat_0800312c"
            },
            "code": "bool is_valid_offset_08003df4(int offset_index) {\n    uint32_t offset = *(uint32_t *)(PTR_DAT_08003e14 + (uint32_t)*(uint8_t *)(offset_index + 0x44) * 4);\n    uint32_t sum_of_offsets = get_sum_of_offsets(offset);\n    return (sum_of_offsets & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_offset_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "initialize_piVar_from_PTR_PTR_DAT_08005400",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "current_piVar",
                "piVar2": "next_piVar",
                "iVar3": "current_block_index",
                "ppiVar4": "current_ppiVar",
                "PTR_PTR_DAT_08005474": "PTR_PTR_DAT_current_block_index",
                "set_memory_to_value_080048cc": "set_memory_to_value_080048cc"
            },
            "code": "int * initialize_piVar_from_PTR_PTR_DAT_08005400(undefined4 *error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int *current_piVar;\n  int *next_piVar;\n  int current_block_index;\n  int **current_ppiVar;\n  \n  current_block_index = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(current_block_index + 0x18) == 0) {\n    initialize_current_block(current_block_index);\n  }\n  current_ppiVar = (int **)(current_block_index + 0x48);\n  do {\n    next_piVar = current_ppiVar[2];\n    current_piVar = current_ppiVar[1];\n    while (current_piVar = (int *)((int)current_piVar + -1), -1 < (int)current_piVar) {\n      if (*(short *)(next_piVar + 3) == 0) {\n        *(undefined2 *)((int)next_piVar + 0xe) = 0xffff;\n        *(undefined2 *)(next_piVar + 3) = 1;\n        next_piVar[0x19] = 0;\n        *next_piVar = 0;\n        next_piVar[2] = 0;\n        next_piVar[1] = 0;\n        next_piVar[4] = 0;\n        next_piVar[5] = 0;\n        next_piVar[6] = 0;\n        set_memory_to_value_080048cc(next_piVar + 0x17,0,8,1,param_4);\n        next_piVar[0xd] = 0;\n        next_piVar[0xe] = 0;\n        next_piVar[0x12] = 0;\n        next_piVar[0x13] = 0;\n        return next_piVar;\n      }\n      next_piVar = next_piVar + 0x1a;\n    }\n    if (*current_ppiVar == (int *)0x0) {\n      current_piVar = (int *)allocate_and_initialize_memory_block_08005374(error_code,4);\n      *current_ppiVar = current_piVar;\n      if (current_piVar == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    current_ppiVar = (int **)*current_ppiVar;\n  } while( true );\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_piVar_from_PTR_PTR_DAT_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        set_memory_to_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_non_zero_08003582(int value1, int value2) {\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_return_non_zero_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "process_input_and_execute_08005760",
                "PTR_DAT_080057fc": "ptr_array[0]",
                "PTR_DAT_08005800": "ptr_array[1]",
                "PTR_DAT_08005804": "ptr_array[2]",
                "PTR_DAT_08005808": "ptr_array[3]",
                "PTR_DAT_0800580c": "ptr_array[4]",
                "PTR_DAT_08005810": "ptr_array[5]",
                "PTR_DAT_08005814": "ptr_array[6]",
                "PTR_DAT_08005818": "ptr_array[7]",
                "PTR_DAT_0800581c": "ptr_array[8]",
                "PTR_DAT_08005820": "ptr_array[9]",
                "PTR_DAT_08005824": "ptr_array[10]",
                "PTR_DAT_08005828": "ptr_array[11]"
            },
            "code": "void process_input_and_execute_08005760()\n{\n    code *jumptable = process_input_and_execute_08005760;\n    int* ptr_array[] = {PTR_DAT_080057fc, PTR_DAT_08005800, PTR_DAT_08005804, PTR_DAT_08005808, PTR_DAT_0800580c, PTR_DAT_08005810, PTR_DAT_08005814, PTR_DAT_08005818, PTR_DAT_0800581c, PTR_DAT_08005820, PTR_DAT_08005824, PTR_DAT_08005828};\n    for (int i = 0; i < 12; i++) {\n        if (*ptr_array[i] < 0) {\n            *ptr_array[i] = 1;\n        }\n    }\n    (*jumptable)();\n    return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "process_input_and_execute_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "param_1": "number",
                "cVar1": "bits_set"
            },
            "code": "char count_bits_set_08004678(uint number) {\n  char bits_set = 0;\n  while (number != 1) {\n    bits_set++;\n    number >>= 1;\n  }\n  return bits_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_input_and_set_flags_08003900",
                "param_1": "input",
                "iVar1": "input_subtracted",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "set_flags_08001578": "set_flags"
            },
            "code": "void check_input_and_set_flags_08003900(int input){\\n  int input_subtracted = subtract_four_from_input();\\n  if (*(char *)(input_subtracted + 0x5f) == \"\\0\") {\\n    set_flags(input);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flags_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index",
                "DAT_08000f28": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08000f0c(uint bit_index) {\n  if (bit_index >= 0) {\n    int array_index = (bit_index >> 5) + 0x60;\n    int* array_ptr = (int*)(DAT_08000f28 + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "extract_bits_and_update_crc_08000998",
                "param_1": "buffer_address",
                "param_2": "data_address",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "value3",
                "cVar2": "value5",
                "bVar3": "value1",
                "bVar4": "value2",
                "uVar5": "i",
                "uVar6": "value4"
            },
            "code": "int extract_bits_and_update_crc_08000998(int buffer_address, int data_address, int param_3, int param_4) {\n  byte value1 = combine_values(*(undefined *)(buffer_address + 0xb), *(undefined *)(buffer_address + 0xc), param_3, param_4, param_4);\n  byte value2 = combine_values(*(undefined *)(buffer_address + 0xd), *(undefined *)(buffer_address + 0xe));\n  *(byte *)(buffer_address + 0xb) = value2 << 1;\n  *(undefined *)(buffer_address + 0x49) = 3;\n  for (uint i = (uint)value1; i < (uint)value1 + (uint)value2; i = i + 1 & 0xff) {\n    byte value3 = *(byte *)(buffer_address + 0x49);\n    *(char *)(buffer_address + (uint)value3 + 9) = (char)((ushort)*(undefined2 *)(data_address + i * 2) >> 8);\n    uint value4 = value3 + 1 & 0xff;\n    char value5 = (char)value4;\n    *(char *)(buffer_address + 0x49) = value5;\n    *(undefined *)(buffer_address + value4 + 9) = *(undefined *)(data_address + i * 2);\n    *(char *)(buffer_address + 0x49) = value5 + '\\x01';\n  }\n  char value6 = *(char *)(buffer_address + 0x49);\n  update_crc_and_extract_bits(buffer_address);\n  return (int)(char)(value6 + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "extract_bits_and_update_crc_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_size",
                "puVar1": "ptr",
                "uVar2": "thunk_result",
                "piVar3": "error_code_ptr",
                "iVar4": "result",
                "pcVar5": "func_to_call",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "ptr_to_ptr",
                "PTR_PTR_DAT_080055dc": "PTR_PTR_DAT_080055dc",
                "PTR_DAT_08005600": "PTR_DAT_08005600",
                "get_one_thunk_0800410c": "get_one_thunk_0800410c",
                "set_value_to_22_080040fc": "set_value_to_22_080040fc"
            },
            "code": "int process_input_080055d0(uint input_size) {\n  int *error_code_ptr = *(int **)PTR_PTR_DAT_080055dc;\n  if (input_size > 31) {\n    *error_code_ptr = 22;\n    return -1;\n  }\n  int *function_ptr = error_code_ptr[17];\n  if ((function_ptr != 0) && (*(code **)(function_ptr + input_size * 4) != (code *)0)) {\n    code *func_to_call = *(code **)(function_ptr + input_size * 4);\n    if (func_to_call != (code *)1) {\n      if (func_to_call == (code *)-1) {\n        *error_code_ptr = 22;\n        return 1;\n      }\n      *(undefined4 *)(function_ptr + input_size * 4) = 0;\n      (*func_to_call)(input_size);\n    }\n    return 0;\n  }\n  undefined *ptr_to_ptr = PTR_PTR_DAT_080055dc;\n  undefined4 thunk_result = get_one_thunk_0800410c(error_code_ptr);\n  undefined *ptr_to_data = PTR_DAT_08005600;\n  *(undefined4 *)PTR_DAT_08005600 = 0;\n  int result = set_value_to_22_080040fc(thunk_result,input_size,input_size,0,ptr_to_ptr,unaff_r4,unaff_r5,in_lr);\n  if ((result == -1) && (*(int *)ptr_to_data != 0)) {\n    *error_code_ptr = *(int *)ptr_to_data;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "process_value_080056f8",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void process_value_080056f8(int *result, undefined4 value){\n                            undefined *data_ptr = PTR_DAT_08005714;\n                            *(undefined4 *)PTR_DAT_08005714 = 0;\n                            int return_value = get_return_value(value);\n                            if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n                                *result = *(int *)data_ptr;\n                            }\n                            return;\n                        }",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "process_value_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "set_permissions_080054b4",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "permission_value",
                "param_4": "result",
                "iVar1": "error_code",
                "uVar2": "permission",
                "auStack_4c": "temp_result",
                "local_48": "page_size_mask"
            },
            "code": "int set_permissions_080054b4(uint32_t base_address, int16_t size, uint32_t *permission_value, uint32_t *result){\n  int error_code;\n  uint32_t temp_result;\n  uint32_t page_size_mask = 0xf000;\n  if ((*(int16_t *)(size + 0xe) < 0) ||\n     (error_code = set_memory_permissions_080056d4(base_address,(int)*(int16_t *)(size + 0xe),&temp_result), error_code < 0)) {\n    *result = 0;\n    if ((int)((uint)*(uint16_t *)(size + 0xc) << 0x18) < 0) {\n      *permission_value = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *result = (uint32_t)((page_size_mask & 0xf000) == 0x2000);\n  }\n  *permission_value = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "set_permissions_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input_data",
                "cVar1": "current_char",
                "puVar2": "ptr_b"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input_data)\n{\n    char current_char = *(char *)((int)input_data + 0x3d);\n    uint32_t *ptr_b = input_data[0xb];\n    \n    if ((*(short *)(input_data + 10) == 0) && (current_char == '!')) {\n        if ((ptr_b == (uint32_t *)0x4) || ((ptr_b == (uint32_t *)0x8 || (ptr_b == (uint32_t *)0xffff0000)))) {\n            (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n            **input_data = **input_data | 0x200;\n            input_data[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            if (*(char *)((int)input_data + 0x3e) == '@') {\n                *(undefined *)((int)input_data + 0x3e) = 0;\n                do_nothing_08001718();\n            }\n            else {\n                *(undefined *)((int)input_data + 0x3e) = 0;\n                do_nothing_080015b6();\n            }\n        }\n        else {\n            (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n            input_data[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            do_nothing_080015b6();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input_data + 0x2a) == 0) {\n            (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input_data + 0x3e) == '@') {\n            if (input_data[0x14] == (uint32_t *)0x0) {\n                if (input_data[0x13] == (uint32_t *)0x1) {\n                    (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n                    input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 2);\n                }\n                else {\n                    (*input_data)[4] = (uint32_t)((int)input_data[0x12] << 0x10) >> 0x18;\n                    input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n                }\n            }\n            else if (input_data[0x14] == (uint32_t *)0x1) {\n                (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n                input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n            }\n            else if (input_data[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input_data + 0x3d) == '\"') {\n                    **input_data = **input_data | 0x100;\n                }\n                else if (*(char *)((int)input_data + 0x3d) == '!') {\n                    uint32_t *ptr_9 = input_data[9];\n                    input_data[9] = (uint32_t *)((int)ptr_9 + 1);\n                    (*input_data)[4] = (uint32_t)*(uint8_t *)ptr_9;\n                    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint32_t *ptr_9 = input_data[9];\n            input_data[9] = (uint32_t *)((int)ptr_9 + 1);\n            (*input_data)[4] = (uint32_t)*(uint8_t *)ptr_9;\n            *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "<original_function_name>": "FUN_08004560",
                "param_1": "flag",
                "param_2": "value",
                "PTR_DAT_08004588": "PARAMS_PTR",
                "set_params_08004544": "set_params",
                "FUN_08004560": "set_params_if_flag_set_08004560"
            },
            "code": "void set_params_if_flag_set_08004560(int flag, int value){\n                      if ((flag == 1) && (value == 0xffff)) {\n                        set_params(PTR_DAT_08004588,0,0,0,0);\n                        return;\n                      }\n                      return;\n                    }",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "set_params_if_flag_set_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "combine_and_extract_bits_08000a7a",
                "param_1": "data",
                "param_2": "output",
                "param_3": "crc",
                "param_4": "length",
                "iVar1": "combined_value",
                "iVar2": "num_bits_to_extract",
                "uVar3": "i",
                "uVar4": "bit_index",
                "uVar5": "output_bit_index",
                "uVar6": "output_byte_index",
                "uVar7": "byte_index"
            },
            "code": "uint8_t combine_and_extract_bits_08000a7a(uint8_t* data, uint16_t* output)\n{\n  uint8_t combined_value = combine_values(data[0x0b], data[0x0c], data[0x02], data[0x03], data[0x03]);\n  uint8_t num_bits_to_extract = combine_values(data[0x0d], data[0x0e]);\n  uint8_t bit_index = 0;\n  uint8_t byte_index = 7;\n  for (uint8_t i = 0; i < num_bits_to_extract; i++) {\n    uint8_t bit_value = (data[byte_index + 9] >> bit_index) & 0x01;\n    uint8_t output_byte_index = ((i + combined_value) * 0x100000) >> 0x18;\n    uint8_t output_bit_index = (i + combined_value) & 0x0f;\n    if (bit_value == 0) {\n      output[output_byte_index] &= ~(1 << output_bit_index);\n    }\n    else {\n      output[output_byte_index] |= (1 << output_bit_index);\n    }\n    bit_index = (bit_index + 1) % 8;\n    if (bit_index == 0) {\n      byte_index++;\n    }\n  }\n  data[0x49] = 6;\n  update_crc_and_extract_bits(data);\n  return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_extract_bits_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "extract_data_from_binary_08004cb0",
                "param_1": "param_1",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "param_4",
                "param_5": "callback",
                "iVar1": "current_offset",
                "uVar2": "max_size",
                "uVar3": "data_type",
                "bVar4": "is_data_type_4",
                "extra_data_size": "extra_data_size",
                "PTR_DAT_0804a044": "data_remaining",
                "PTR_DAT_0804a040": "i",
                "PTR_DAT_0804a03c": "result"
            },
            "code": "undefPTR_DAT_0804a040ned4 extract_data_from_binary_08004cb0(undefPTR_DAT_0804a040ned4 param_1, uPTR_DAT_0804a040nt *data, uPTR_DAT_0804a040nt *data_sPTR_DAT_0804a040ze, undefPTR_DAT_0804a040ned4 param_4, code *callback)\n{\n  PTR_DAT_0804a040nt current_offset = 0;\n  uPTR_DAT_0804a040nt max_sPTR_DAT_0804a040ze = data[4];\n  PTR_DAT_0804a040f ((PTR_DAT_0804a040nt)data[4] < (PTR_DAT_0804a040nt)data[2]) {\n    max_sPTR_DAT_0804a040ze = data[2];\n  }\n  *data_sPTR_DAT_0804a040ze = max_sPTR_DAT_0804a040ze;\n  PTR_DAT_0804a040f (*(char *)((PTR_DAT_0804a040nt)data + 0x43) != '\\0') {\n    *data_sPTR_DAT_0804a040ze = max_sPTR_DAT_0804a040ze + 1;\n  }\n  PTR_DAT_0804a040f ((PTR_DAT_0804a040nt)(*data << 0x1a) < 0) {\n    *data_sPTR_DAT_0804a040ze = *data_sPTR_DAT_0804a040ze + 2;\n  }\n  uPTR_DAT_0804a040nt data_type = *data & 6;\n  PTR_DAT_0804a040f (data_type == 0) {\n    for (; (PTR_DAT_0804a040nt)data_type < (PTR_DAT_0804a040nt)(data[3] - *data_sPTR_DAT_0804a040ze); data_type++) {\n      PTR_DAT_0804a040nt PTR_DAT_0804a03c = (*callback)(param_1, param_4, (PTR_DAT_0804a040nt)data + 0x19, 1);\n      PTR_DAT_0804a040f (PTR_DAT_0804a03c == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uPTR_DAT_0804a040nt extra_data_sPTR_DAT_0804a040ze = (uPTR_DAT_0804a040nt)*(byte *)((PTR_DAT_0804a040nt)data + 0x43);\n  PTR_DAT_0804a040f (extra_data_sPTR_DAT_0804a040ze != 0) {\n    extra_data_sPTR_DAT_0804a040ze = 1;\n  }\n  PTR_DAT_0804a040f ((PTR_DAT_0804a040nt)(*data << 0x1a) < 0) {\n    *(undefPTR_DAT_0804a040ned *)((PTR_DAT_0804a040nt)data + extra_data_sPTR_DAT_0804a040ze + 0x43) = 0x30;\n    *(undefPTR_DAT_0804a040ned *)((PTR_DAT_0804a040nt)data + extra_data_sPTR_DAT_0804a040ze + 0x44) = *(undefPTR_DAT_0804a040ned *)((PTR_DAT_0804a040nt)data + 0x45);\n    extra_data_sPTR_DAT_0804a040ze += 2;\n  }\n  PTR_DAT_0804a040nt PTR_DAT_0804a03c = (*callback)(param_1, param_4, (PTR_DAT_0804a040nt)data + 0x43, extra_data_sPTR_DAT_0804a040ze);\n  PTR_DAT_0804a040f (PTR_DAT_0804a03c != -1) {\n    uPTR_DAT_0804a040nt PTR_DAT_0804a044 = data[3];\n    bool PTR_DAT_0804a040s_data_type_4 = (*data & 6) == 4;\n    PTR_DAT_0804a040f (PTR_DAT_0804a040s_data_type_4) {\n      PTR_DAT_0804a044 = PTR_DAT_0804a044 - *data_sPTR_DAT_0804a040ze;\n    }\n    PTR_DAT_0804a040f (PTR_DAT_0804a040s_data_type_4) {\n      PTR_DAT_0804a044 = PTR_DAT_0804a044 & ~((PTR_DAT_0804a040nt)PTR_DAT_0804a044 >> 0x1f);\n    }\n    else {\n      PTR_DAT_0804a044 = 0;\n    }\n    PTR_DAT_0804a040f ((PTR_DAT_0804a040nt)data[4] < (PTR_DAT_0804a040nt)data[2]) {\n      PTR_DAT_0804a044 = PTR_DAT_0804a044 + (data[2] - data[4]);\n    }\n    uPTR_DAT_0804a040nt PTR_DAT_0804a040 = 0;\n    whPTR_DAT_0804a040le (true) {\n      PTR_DAT_0804a040f (PTR_DAT_0804a044 == PTR_DAT_0804a040) {\n        return 0;\n      }\n      PTR_DAT_0804a040nt PTR_DAT_0804a03c = (*callback)(param_1, param_4, (PTR_DAT_0804a040nt)data + 0x1a, 1);\n      PTR_DAT_0804a040f (PTR_DAT_0804a03c == -1) {\n        break;\n      }\n      PTR_DAT_0804a040++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_pointer_is_not_null_08003594",
                "PTR_DAT_080035a4": "function_pointer_ptr",
                "PTR_DAT_080035a8": "function_argument_ptr",
                "code": "code_pointer",
                "undefined4": "argument_value"
            },
            "code": "void execute_code_if_pointer_is_not_null_08003594(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080035a4;\n  if (function_pointer != NULL) {\n    function_pointer(*(int*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_pointer_is_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clear_bit_flags_08002940",
                "*param_1": "*memory_location",
                "*(uint *)(*param_1 + 0xc)": "*flag1",
                "*(uint *)(*param_1 + 0x14)": "*flag2",
                "*(undefined *)((int)param_1 + 0x3a)": "*(char *)((int)memory_location + 0x3a)"
            },
            "code": "void clear_bit_flags_08002940(int *memory_location)\n{\n    uint *flag1 = (uint *)(*memory_location + 0xc);\n    uint *flag2 = (uint *)(*memory_location + 0x14);\n    *flag1 &= 0xfffffedf;\n    *flag2 &= 0xfffffffe;\n    *(char *)((int)memory_location + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_bit_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_value_from_pointer_wrapper_08004204",
                "get_value_from_pointer_08000e30_wrapper_0800346c": "get_value_from_pointer"
            },
            "code": "void get_value_from_pointer_wrapper_08004204(void)\n{\n  get_value_from_pointer_08000e30_wrapper_0800346c();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_wrapper_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "update_and_return_nothing_08003476",
                "update_pointer_value_08000e18": "update_pointer_value",
                "do_nothing_and_return_08000f4e": "do_nothing_and_return",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void update_and_return_nothing_08003476(void)\n{\n  update_pointer_value();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "update_and_return_nothing_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "update_value_at_address_based_on_index_08004444",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void update_value_at_address_based_on_index_08004444(int address, uint index) {\n  undefined2 value;\n  code *jump_table;\n  if (index < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_0800445c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(address + 0x12e) = value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "update_value_at_address_based_on_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_value_from_pointer_08000e30_wrapper_0800346c"
            },
            "code": "void get_value_from_pointer_08000e30_wrapper_0800346c(void)\n{\n  get_value_from_pointer_08000e30();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30_wrapper_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "param",
                "uVar1": "init_value",
                "iVar2": "ptr_value",
                "bVar3": "is_same_ptr"
            },
            "code": "void initialize_data_080053a0(int param)\n{\n    undefined4 init_value;\n    int ptr_value;\n    bool is_same_ptr;\n    \n    if (*(int *)(param + 0x18) == 0) {\n        *(undefined4 *)(param + 0x48) = 0;\n        *(undefined4 *)(param + 0x4c) = 0;\n        *(undefined4 *)(param + 0x50) = 0;\n        ptr_value = *(int *)PTR_PTR_DAT_080053f8;\n        *(undefined **)(param + 0x28) = PTR_LAB_08005320_1_080053fc;\n        is_same_ptr = param == ptr_value;\n        if (is_same_ptr) {\n            ptr_value = 1;\n        }\n        if (is_same_ptr) {\n            *(int *)(param + 0x18) = ptr_value;\n        }\n        init_value = initialize_pointer(PTR_PTR_DAT_08005400);\n        *(undefined4 *)(param + 4) = init_value;\n        init_value = initialize_pointer(PTR_PTR_DAT_08005400, param);\n        *(undefined4 *)(param + 8) = init_value;\n        init_value = initialize_pointer(PTR_PTR_DAT_08005400, param);\n        *(undefined4 *)(param + 0xc) = init_value;\n        initialize_data_080053a0_0800532c(*(undefined4 *)(param + 4), 4, 0);\n        initialize_data_080053a0_0800532c(*(undefined4 *)(param + 8), 9, 1);\n        initialize_data_080053a0_0800532c(*(undefined4 *)(param + 0xc), 0x12, 2);\n        *(undefined4 *)(param + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = get_value_from_pointer_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = get_value_from_pointer_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = get_value_from_pointer_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = get_value_from_pointer_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = get_value_from_pointer_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = get_value_from_pointer_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = get_value_from_pointer_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = get_value_from_pointer_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "ptr_data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*(uint *)": "*(uint32_t *)",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_080028d4(uint32_t* PTR_data, uint8_t bit_position, uint32_t bit_value) {\n    uint32_t* PTR_word = PTR_data + 0x20;\n    uint32_t bit_mask = ~(4 << (bit_position & 0xff));\n    *PTR_word = (*PTR_word & bit_mask) | (bit_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_input_wrapper_080040ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "code": "void process_input_wrapper_080040ec(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  process_input_08003d18(arg2, arg3, arg3, arg4, arg4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "process_input_08001460",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t process_input_08001460(uint32_t **input_ptr, uint32_t *input_data, int input_len, uint32_t *output_ptr) {\n  uint32_t result;\n  uint32_t *ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "process_input_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_input_08003880",
                "param_1": "input_address",
                "param_2": "input_value",
                "param_3": "input_length",
                "param_4": "input_param",
                "iVar1": "subtracted_value"
            },
            "code": "void process_input_08003880(int input_address, int input_value, int input_length, undefined4 input_param)\n{\n  int subtracted_value = subtract_four_from_input();\n  if (input_length == *(int *)(input_address + 0xc)) {\n    if (input_value == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5e) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      process_input_08003880_08001460(input_address,subtracted_value + 0x68,*(undefined *)(subtracted_value + 0x88),8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5e) = 1;\n    check_valid_input(input_address,subtracted_value + 0x68,0x20,8,input_param);\n  }\n  return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_data_flag_08002f4c",
                "param_1": "data_ptr",
                "*(uint *)(*param_1 + 0xc)": "*data",
                "*(undefined *)((int)param_1 + 0x39)": "*flag",
                "process_data_08003f48": "process_data"
            },
            "code": "int set_data_flag_08002f4c(int *data_ptr) {\n    uint32_t *data = (uint32_t *)(*data_ptr + 0xc);\n    *data &= 0xffffffbf;\n    char *flag = (char *)((int)data_ptr + 0x39);\n    *flag = 0x20;\n    process_data();\n    return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_data_flag_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_080035bc",
                "DAT_080035f0": "flags_ptr",
                "DAT_080035f4": "flags_ptr_1",
                "DAT_080035f8": "undefined_ptr"
            },
            "code": "void set_flags_080035bc(void)\n{\n  uint *DAT_080035f0;\n  DAT_080035f0 = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  DAT_080035f0[2] = 0;\n  *DAT_080035f0 &= 0xfef6ffff;\n  DAT_080035f0[1] = DAT_080035f4;\n  *DAT_080035f0 &= 0xfffbffff;\n  DAT_080035f0[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_value_shifted_080025ec",
                "uVar1": "value",
                "PTR_DAT_08002604": "ptr_dat_08002604",
                "PTR_DAT_08002608": "ptr_dat_08002608",
                "DAT_08002604": "ptr_dat_08002604",
                "get_value_from_pointer_080025e0": "get_value_from_pointer_080025e0"
            },
            "code": "uint get_value_shifted_080025ec(uint *PTR_DAT_08002604, uint *PTR_DAT_08002608) {\n  uint value = get_value_from_pointer_080025e0();\n  uint shift = (*(int *)(PTR_DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08002608[shift];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_value_shifted_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "execute_interrupt_and_function_calls_08000c4c",
                "execute_interrupt_call_080005e4": "execute_interrupt_call",
                "execute_function_08000600": "execute_function",
                "PTR_DAT_08000c60": "PTR_FUNCTION_DATA"
            },
            "code": "void execute_interrupt_and_function_calls_08000c4c(void)\n{\n  execute_interrupt_call(0);\n  execute_function(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "execute_interrupt_and_function_calls_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "data",
                "param_4": "data_length",
                "iVar1": "index",
                "puVar2": "end_of_data",
                "iVar3": "index"
            },
            "code": "int process_data_08004a60(int param_1, int param_2, char* data, int data_length)\n{\n  int index = 0;\n  char* end_of_data = data + data_length;\n  while (data != end_of_data)\n  {\n    if (index == 0)\n    {\n      index = process_data_08004a60_08004a34_08004a34(param_1, *data, param_2, data_length, index);\n    }\n    else\n    {\n      index = process_data_08004a60_08004a34_08004a34(param_1, *data, param_2, data_length, index) + 1;\n    }\n    data++;\n  }\n  return index;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "allocate_and_set_permissions_080050d0_080050d0",
                "param_1": "out_error_code",
                "param_2": "permissions",
                "uVar1": "permission_bits",
                "uVar2": "permission_flags",
                "iVar3": "ptr_to_permissions"
            },
            "code": "uint allocate_and_set_permissions_080050d0_080050d0(undefined4 *out_error_code, undefined4 *permissions) {\n  uint permission_bits;\n  ushort permission_flags;\n  int ptr_to_permissions;\n  ptr_to_permissions = *(int *)PTR_PTR_DAT_0800519c;\n  if ((ptr_to_permissions != 0) && (*(int *)(ptr_to_permissions + 0x18) == 0)) {\n    initialize_data_080053a0(ptr_to_permissions);\n  }\n  if (permissions == (undefined4 *)PTR_DAT_080051a0) {\n    permissions = *(undefined4 **)(ptr_to_permissions + 4);\n  }\n  else if (permissions == (undefined4 *)PTR_DAT_080051a4) {\n    permissions = *(undefined4 **)(ptr_to_permissions + 8);\n  }\n  else if (permissions == (undefined4 *)PTR_DAT_080051a8) {\n    permissions = *(undefined4 **)(ptr_to_permissions + 0xc);\n  }\n  permission_flags = *(ushort *)(permissions + 3);\n  permission_bits = (uint)permission_flags;\n  if (-1 < (int)(permission_bits << 0x1c)) {\n    if (-1 < (int)(permission_bits << 0x1b)) {\n      *out_error_code = 9;\n      goto LAB_08005100;\n    }\n    if ((undefined4 *)permissions[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)permissions[0xd] != permissions + 0x11) {\n        insert_node_080048dc(out_error_code);\n      }\n      permissions[0xd] = 0;\n    }\n    *(ushort *)(permissions + 3) = *(ushort *)(permissions + 3) & 0xffdb;\n    permissions[1] = 0;\n    *permissions = permissions[4];\n  }\n  *(ushort *)(permissions + 3) = *(ushort *)(permissions + 3) | 8;\n  if ((permissions[4] == 0) && ((*(ushort *)(permissions + 3) & 0x280) != 0x200)) {\n    allocate_and_set_permissions_080054fc(out_error_code, permissions);\n  }\n  permission_flags = *(ushort *)(permissions + 3);\n  permission_bits = permission_flags & 1;\n  if ((permission_flags & 1) == 0) {\n    if (-1 < (int)((uint)permission_flags << 0x1e)) {\n      permission_bits = permissions[5];\n    }\n    permissions[2] = permission_bits;\n  }\n  else {\n    permissions[2] = 0;\n    permissions[6] = -permissions[5];\n  }\n  if (permissions[4] == 0) {\n    permission_flags = *(ushort *)(permissions + 3);\n    permission_bits = (int)(short)permission_flags & 0x80;\n    if (permission_bits != 0) {\n      *(ushort *)(permissions + 3) = permission_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    permission_bits = 0;\n  }\n  return permission_bits;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "allocate_and_set_permissions_080050d0_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_node_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_set_permissions_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "mem_block_ptr",
                "param_2": "size",
                "puVar1": "pointer",
                "uVar2": "offset",
                "puVar3": "free_list_head",
                "iVar4": "padding_size",
                "uVar5": "block_size",
                "puVar6": "previous_free_block",
                "puVar7": "free_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *mem_block_ptr, uint size)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *mem_block_ptr = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *free_list_head = *(uint **)FREE_LIST_HEAD_PTR;\n    uint *previous_free_block = *(uint **)FREE_LIST_HEAD_PTR;\n    while (free_list_head != (uint *)0x0) {\n      uint block_size = *free_list_head - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_free_block == free_list_head) {\n            aligned_size = previous_free_block[1];\n          }\n          else {\n            aligned_size = free_list_head[1];\n          }\n          if (previous_free_block == free_list_head) {\n            *(uint **)FREE_LIST_HEAD_PTR = aligned_size;\n            free_list_head = previous_free_block;\n          }\n          else {\n            previous_free_block[1] = aligned_size;\n          }\n        }\n        else {\n          *free_list_head = block_size;\n          *(uint *)((int)free_list_head + block_size) = aligned_size;\n          free_list_head = (uint *)((int)free_list_head + block_size);\n        }\n        goto ALLOCATION_COMPLETE;\n      }\n      previous_free_block = free_list_head;\n      free_list_head = (uint *)free_list_head[1];\n    }\n    if (*(int *)MEMORY_START_PTR == 0) {\n      undefined4 offset = get_offset_0800500c(mem_block_ptr);\n      *(undefined4 *)FREE_LIST_HEAD_PTR = offset;\n    }\n    free_list_head = (uint *)get_offset_0800500c(mem_block_ptr, aligned_size);\n    if ((free_list_head != (uint *)0xffffffff) &&\n       ((previous_free_block = (uint *)((int)free_list_head + 3U & 0xfffffffc), free_list_head == previous_free_block ||\n        (block_size = get_offset_0800500c(mem_block_ptr,(int)previous_free_block - (int)free_list_head), block_size != -1)))) {\n      *previous_free_block = aligned_size;\nALLOCATION_COMPLETE:\n      do_nothing_0800557e(mem_block_ptr);\n      uint block_end = (int)previous_free_block + 0xbU & 0xfffffff8;\n      int padding_size = block_end - ((int)previous_free_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)previous_free_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *mem_block_ptr = 0xc;\n    do_nothing_0800557e(mem_block_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_params_08002d0c",
                "param_1": "ptr_param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "value_from_pointer"
            },
            "code": "uint32_t check_params_08002d0c(uint32_t **ptr_param_1, uint32_t param_2, bool param_3, int32_t param_4, uint32_t param_5)\n{\n    int32_t value_from_pointer;\n    while (true)\n    {\n        if (((param_2 & ~(**ptr_param_1)) == 0) != param_3)\n        {\n            return 0;\n        }\n        if ((param_5 == 0xffffffff) || ((param_5 != 0) && ((value_from_pointer = get_value_from_pointer_08000e30()) - param_4 <= param_5)))\n        {\n            break;\n        }\n        (*ptr_param_1)[3] &= 0xfffffe5f;\n        (*ptr_param_1)[5] &= 0xfffffffe;\n        *((uint8_t *)ptr_param_1 + 0x39) = 0x20;\n        *((uint8_t *)ptr_param_1 + 0x3a) = 0x20;\n        *((uint8_t *)ptr_param_1 + 0xe) = 0;\n        return 3;\n    }\n    (*ptr_param_1)[3] &= ~(1 << 5);\n    (*ptr_param_1)[5] &= ~(1 << 0);\n    *((uint8_t *)ptr_param_1 + 0x39) = ' ';\n    *((uint8_t *)ptr_param_1 + 0x3a) = ' ';\n    *((uint8_t *)ptr_param_1 + 0xe) = 0;\n    return 3;\n}\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_params_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "modify_string_and_call_function_08001904",
                "param_1": "string_ptr",
                "puVar1": "destination_ptr",
                "PTR_DAT_08002a2a": "string_length",
                "PTR_DAT_08002a3d": "string_start_char",
                "PTR_DAT_08002a1c": "current_ptr"
            },
            "code": "uint32_t modify_string_and_call_function_08001904(uint32_t **string_ptr) {\n  uint32_t *PTR_DAT_08002a1c = *string_ptr;\n  uint32_t PTR_DAT_08002a2a = *(uint16_t *)(*string_ptr + 0x2a);\n  char PTR_DAT_08002a3d = *(char *)(*string_ptr + 0x3d);\n  if (PTR_DAT_08002a3d == '\"') {\n    if (PTR_DAT_08002a2a < 4) {\n      if (PTR_DAT_08002a2a < 2) {\n        PTR_DAT_08002a1c[0] = PTR_DAT_08002a1c[0] & 0xfffffbff;\n        PTR_DAT_08002a1c[1] = PTR_DAT_08002a1c[1] & 0xfffff8ff;\n        uint8_t *destination_ptr = (uint8_t *)(string_ptr[9]);\n        string_ptr[9] = (uint32_t *)(destination_ptr + 1);\n        *destination_ptr = (uint8_t)PTR_DAT_08002a1c[4];\n        *(uint16_t *)(*string_ptr + 0x2a) = *(uint16_t *)(*string_ptr + 0x2a) + -1;\n        *(char *)(*string_ptr + 0x3d) = 0x20;\n        string_ptr[0xc] = (uint32_t *)0x0;\n        if (*(char *)(*string_ptr + 0x3e) == '@') {\n          *(char *)(*string_ptr + 0x3e) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *(char *)(*string_ptr + 0x3e) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      uint8_t *destination_ptr = (uint8_t *)(string_ptr[9]);\n      string_ptr[9] = (uint32_t *)(destination_ptr + 1);\n      *destination_ptr = (uint8_t)PTR_DAT_08002a1c[4];\n      *(uint16_t *)(*string_ptr + 0x2a) = *(uint16_t *)(*string_ptr + 0x2a) + -1;\n      if (*(uint16_t *)(*string_ptr + 0x2a) == 3) {\n        PTR_DAT_08002a1c[1] = PTR_DAT_08002a1c[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "modify_string_and_call_function_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "extract_data_from_buffer_08000c64",
                "in_r3": "input1",
                "PTR_DAT_08000c78": "ptr_data_1",
                "PTR_DAT_08000c74": "ptr_data_2"
            },
            "code": "void extract_data_from_buffer_08000c64(void)\n{\n  undefined4 input1;\n  undefined4 input2;\n  int buffer_size = 0x10;\n  extract_data_from_buffer_08000c64_08000b54(PTR_DAT_08000c78, PTR_DAT_08000c74, buffer_size, input1, input2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "extract_data_from_buffer_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data_arr",
                "puVar3": "data",
                "uVar5": "data_flag_1",
                "uVar2": "data_flag_2",
                "process_data_08002f66": "process_data_08002f66",
                "read_and_modify_memory_0800295c": "read_and_modify_memory",
                "set_data_flag_08002f4c": "set_data_flag",
                "do_nothing_08003f94": "do_nothing",
                "clear_bit_flags_08002940": "clear_bit_flags",
                "PTR_LAB_0800311c_1_08003118": "new_function",
                "check_flag_08000f8c": "check_flag"
            },
            "code": "void process_data_08002ffc(uint **data_arr)\n{\n  uint *data = *data_arr;\n  uint data_flag_1 = *data;\n  uint data_flag_2 = data[3];\n  if ((((data_flag_1 & 0xf) == 0) && ((data_flag_1 & 0x20) != 0)) && ((data_flag_2 & 0x20) != 0)) {\n    process_data_08002ffc_08002f66(data_arr);\n    return;\n  }\n  if (((data_flag_1 & 0xf) == 0) || ((data[5] & 1) == 0 && ((data_flag_2 & 0x120) == 0)))) {\n    if (((data_flag_1 & 0x80) != 0) && ((data_flag_2 & 0x80) != 0)) {\n      read_and_modify_memory(data_arr);\n      return;\n    }\n    if (((data_flag_1 & 0x40) != 0) && ((data_flag_2 & 0x40) != 0)) {\n      set_data_flag(data_arr);\n    }\n  }\n  else {\n    if (((data_flag_1 & 1) != 0) && ((data_flag_2 & 0x100) != 0)) {\n      data_arr[0xf] = (uint *)((uint)data_arr[0xf] | 1);\n    }\n    if (((data_flag_1 & 4) != 0) && ((data[5] & 1) == 0)) {\n      data_arr[0xf] = (uint *)((uint)data_arr[0xf] | 2);\n    }\n    if (((data_flag_1 & 2) != 0) && ((data[5] & 1) == 0)) {\n      data_arr[0xf] = (uint *)((uint)data_arr[0xf] | 4);\n    }\n    if (((data_flag_1 & 8) != 0) && ((data[5] & 1) == 0)) {\n      data_arr[0xf] = (uint *)((uint)data_arr[0xf] | 8);\n    }\n    if (data_arr[0xf] != (uint *)0x0) {\n      if (((data_flag_1 & 0x20) != 0) && ((data_flag_2 & 0x20) != 0)) {\n        process_data_08002ffc_08002f66(data_arr);\n      }\n      if ((((uint)data_arr[0xf] & 8) == 0) && (((*data_arr)[5] & 0x40) == 0)) {\n        do_nothing(data_arr);\n        data_arr[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_bit_flags(data_arr);\n      uint *data = *data_arr;\n      if ((data[5] & 0x40) == 0) {\n        do_nothing(data_arr);\n        return;\n      }\n      data[5] = data[5] & 0xffffffbf;\n      if (data_arr[0xd] == (uint *)0x0) {\n        do_nothing(data_arr);\n        return;\n      }\n      data_arr[0xd][0x14] = (uint *)PTR_LAB_0800311c_1_08003118;\n      int flag = check_flag(data_arr[0xd]);\n      if (flag != 0) {\n        (*(code *)data_arr[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input_value",
                "return": "result"
            },
            "code": "int subtract_four_from_input_0800387c(int input_value) {\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_short_value_if_not_zero_0800351e",
                "param_1": "input_value",
                "uVar1": "short_value",
                "find_short_value_08003506": "find_short_value"
            },
            "code": "int find_short_value_if_not_zero_0800351e(int input_value)\n{\n  int short_value = -1;\n  if (input_value != 0) {\n    short_value = find_short_value();\n  }\n  return short_value;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_short_value_if_not_zero_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "dest_uchar",
                "puVar3": "dest_char",
                "sVar2": "sVar",
                "data_ptr": "data_char_ptr"
            },
            "code": "int process_data_08002f66(int *data) {\n  char *data_ptr = (char *)(data + 0x3a);\n  if (*data_ptr != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(unsigned short *)data[10] = (unsigned short)((*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] += 2;\n    }\n    else {\n      *(unsigned short *)data[10] = (unsigned short)*(unsigned int *)(*data + 4) & 0xff;\n      data[10]++;\n    }\n  }\n  else if (data[4] == 0) {\n    char *dest = (char *)data[10];\n    data[10]++;\n    *dest = (char)*(unsigned int *)(*data + 4);\n  }\n  else {\n    unsigned char *dest = (unsigned char *)data[10];\n    data[10]++;\n    *dest = (unsigned char)*(unsigned int *)(*data + 4) & 0x7f;\n  }\n  short sVar = *(short *)(data + 0x2e) - 1;\n  *(short *)(data + 0x2e) = sVar;\n  if (sVar != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n  *data_ptr = ' ';\n  execute_function_if_value_found_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "update_value_at_address_if_nonzero_080034b6",
                "param_1": "address",
                "param_2": "value",
                "param_3": "is_nonzero",
                "param_4": "param_1",
                "update_value_at_address_08001198": "update_value_at_address"
            },
            "code": "void update_value_at_address_if_nonzero_080034b6(void* address, uint16_t value, uint8_t is_nonzero, void* param_1, void* param_2) {\n  if (is_nonzero) {\n    update_value_at_address_08001198(address, value, 1, param_1, param_2);\n  } else {\n    update_value_at_address_08001198(address, value, 0, param_1, param_2);\n  }\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "update_value_at_address_if_nonzero_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "bVar1": "current_pos",
                "PTR_DAT_08003ef4": "data_array_ptr",
                "PTR_DAT_08003ef8": "data_index_ptr",
                "decode_bits_08000e60": "decode_bits",
                "set_bit_at_index_08000ec4": "set_bit_at_index",
                "check_data_validity_08002eb2": "check_data_validity",
                "PTR_DAT_08003efc": "data_validity_ptr"
            },
            "code": "void update_data_08003eac(int data_ptr, undefined4 data_value) {\n  if (data_ptr != 0) {\n    byte current_pos = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_08003ef4 + (uint)current_pos * 4) = data_value;\n    *(int *)(PTR_DAT_08003ef8 + (uint)current_pos * 4) = data_ptr;\n    decode_bits((int)*(char *)(data_ptr + 0x5c), 0, 2);\n    set_bit_at_index((int)*(char *)(data_ptr + 0x5c));\n    check_data_validity(*(undefined4 *)(PTR_DAT_08003efc + (uint)*(byte *)(data_ptr + 0x44) * 4), *(int *)(data_ptr + 0x68) + (uint)*(ushort *)(data_ptr + 0x6e), 1);\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "is_input_valid_and_sum_odd_08003e18",
                "param_1": "input_length",
                "param_2": "input_string",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "is_sum_odd",
                "PTR_DAT_08003e50": "PTR_DAT_08003e50",
                "input_char": "input_char",
                "lookup_index": "lookup_index",
                "lookup_result": "lookup_result"
            },
            "code": "int is_input_valid_and_sum_odd_08003e18(int input_length, char *input_string, int param_3, int param_4)\n{\n    int is_sum_odd = is_sum_34_odd_08003dd0();\n    if (input_length == 0) {\n        return 0xffffffff;\n    }\n    if (is_sum_odd == 0) {\n        char input_char = *(char *)(input_length + 0x45);\n        int lookup_index = *(byte *)(input_length + 0x44);\n        int lookup_result = *(int *)(PTR_DAT_08003e50 + lookup_index * 4);\n        check_input_validity_08002efa(lookup_result, input_length + 0x45, 1, PTR_DAT_08003e50, param_4);\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "is_input_valid_and_sum_odd_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_value_to_22_080040fc",
                "PTR_DAT_08004108": "ptr_data"
            },
            "code": "int set_value_to_22_080040fc()\n{\n    int* PTR_DAT_08004108 = (int*) PTR_DAT_08004108;\n    *PTR_DAT_08004108 = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_value_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_input_08002dd0",
                "param_1": "input_ptr",
                "param_2": "param_ptr",
                "param_3": "param_len",
                "param_4": "param_4",
                "uVar1": "value_from_pointer",
                "iVar2": "result"
            },
            "code": "int process_input_08002dd0(int *input_ptr, ushort *param_ptr, int param_len, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n\n  if (*(char *)((int)input_ptr + 0x39) == ' ') {\n    if (param_ptr == (ushort *)0x0 || param_len == 0 || *(char *)(input_ptr + 0xe) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xe) = 1;\n      input_ptr[0xf] = 0;\n      *(undefined *)((int)input_ptr + 0x39) = 0x21;\n      uVar1 = get_value_from_pointer_08000e30();\n      *(short *)(input_ptr + 9) = (short)param_len;\n      *(short *)((int)input_ptr + 0x26) = (short)param_len;\n      while (*(short *)((int)input_ptr + 0x26) != 0) {\n        *(short *)((int)input_ptr + 0x26) = *(short *)((int)input_ptr + 0x26) + -1;\n        if (input_ptr[2] == 0x1000) {\n          result = check_params(input_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = *param_ptr & 0x1ff;\n          if (input_ptr[4] == 0) {\n            param_ptr = param_ptr + 1;\n          }\n          else {\n            param_ptr = (ushort *)((int)param_ptr + 1);\n          }\n        }\n        else {\n          result = check_params(input_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = (uint)*(byte *)param_ptr;\n          param_ptr = (ushort *)((int)param_ptr + 1);\n        }\n      }\n      result = check_params(input_ptr, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_ptr + 0x39) = 0x20;\n        *(undefined *)(input_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_input_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "call_function_with_arguments_and_return_0_08004860",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "argument_3",
                "uStack_4": "argument_4"
            },
            "code": "void call_function_with_arguments_and_return_0_08004860(int arg1, int arg2, int arg3, int arg4)\n{\n  int argument_3 = arg3;\n  int argument_4 = arg4;\n  function_with_arguments(*(int *)PTR_PTR_DAT_08004880, arg1, arg2, &argument_3, arg1, &argument_3);\n  return 0;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "call_function_with_arguments_and_return_0_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "convert_base_08004622",
                "param_1": "data",
                "param_2": "length",
                "param_3": "base",
                "param_4": "conversion_type",
                "convert_base_080045c8": "perform_base_conversion"
            },
            "code": "void convert_base_08004622(uint32_t *data, uint32_t length, uint32_t base, uint32_t conversion_type)\n{\n  if (base != 0) {\n    perform_base_conversion(data, length, base & 0xff);\n    return;\n  }\n  (**(code **)*data)(data, length & 0xff, 0, *(code **)*data, conversion_type);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "convert_base_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "set_flags_based_on_value_08003414",
                "param_1": "values",
                "iVar1": "value_index",
                "uVar2": "index_of_value",
                "local_4c": "values"
            },
            "code": "void set_flags_based_on_value_08003414(int values[]) {\n    int value_index = get_value_index(values[0]);\n    if (values[0] != 0 && (value_index == 0 || value_index == 4 || value_index == 8 || value_index == 0xc || value_index == 0x18)) {\n        uint index_of_value = get_index_of_value(values[0]);\n        if ((index_of_value & 0x100000) == 0) {\n            set_bit_in_uint_array_and_update_flags(values, value_index);\n        }\n        else {\n            set_bit_and_check(values, value_index);\n        }\n        set_flags_based_on_value_08003414(values);\n    }\n}\n",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_value_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "zero_return_function_08005718",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_to_dat",
                "iVar2": "return_value"
            },
            "code": "void zero_return_function_08005718(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr_to_dat = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  int return_value = return_zero_080040e4(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)ptr_to_dat != 0)) {\n    *result = *(int *)ptr_to_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "zero_return_function_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "set_control_register_080011c0",
                "param_1": "control_register_ptr",
                "*(char *)((int)param_1 + 0x3e)": "*third_byte_ptr",
                "param_1[0x14]": "control_register_ptr[0x14]",
                "*(uint *)(*param_1 + 0x10)": "*data_ptr",
                "param_1[0x11]": "control_register_ptr[0x11]",
                "*(char *)((int)param_1 + 0x3d)": "*second_byte_ptr",
                "param_1[4]": "control_register_ptr[4]"
            },
            "code": "uint32_t set_control_register_080011c0(uint32_t *control_register_ptr) {\n    char *third_byte_ptr = (char *)(control_register_ptr + 0x3);\n    uint32_t *data_ptr = (uint32_t *)*control_register_ptr;\n    uint32_t value_to_set;\n    \n    if (*third_byte_ptr == '@') {\n        if (control_register_ptr[0x14] == 0) {\n            value_to_set = control_register_ptr[0x11] & 0xfe;\n        }\n        else {\n            value_to_set = control_register_ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (control_register_ptr[4] == 0x4000) {\n        char *second_byte_ptr = (char *)(control_register_ptr + 0x2);\n        if (*second_byte_ptr == '!') {\n            value_to_set = control_register_ptr[0x11] & 0xfe;\n        }\n        else {\n            value_to_set = control_register_ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (control_register_ptr[0x14] == 0) {\n        value_to_set = (control_register_ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (control_register_ptr[0x14] == 1) {\n        value_to_set = (control_register_ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    \n    *data_ptr = value_to_set;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_control_register_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "extract_data_from_buffer_08000b54",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "buffer_size",
                "bVar1": "status",
                "iVar2": "check_result",
                "unaff_r5": "buffer_status",
                "iVar3": "extracted_data"
            },
            "code": "int extract_data_from_buffer_08000b54(int **buffer, int *data, int buffer_size){\n    byte status = 0;\n    int extracted_data = 0;\n    uint buffer_status;\n\n    buffer[19] = data;\n    *(char *)(buffer + 24) = (char)buffer_size;\n\n    if (*(byte *)((int)buffer + 5) < 4) {\n        status = (**(code **)(**buffer + 8))();\n        buffer_status = (uint)status;\n    }\n\n    if (buffer_status == 0 || (int)buffer_status < 8) {\n        extracted_data = 0;\n    }\n    else {\n        extracted_data = extract_bits_and_update(buffer);\n        *(char *)(buffer + 2) = (char)extracted_data;\n\n        if (*(char *)((int)buffer + 9) == *(char *)(buffer + 1)) {\n            int check_result = check_values(buffer);\n\n            if (check_result < 1) {\n                int value = get_value_from_pointer_wrapper();\n                buffer[23] = (int *)((uint)*(ushort *)((int)buffer + 86) + value);\n                *(undefined *)(buffer + 2) = 0;\n\n                switch(*(undefined *)((int)buffer + 10)) {\n                    case 1:\n                    case 2:\n                        extracted_data = combine_and_extract_bits(buffer, data, buffer_size);\n                        break;\n                    case 3:\n                    case 4:\n                        extracted_data = extract_bits_and_update_crc(buffer, data, buffer_size);\n                        break;\n                    case 5:\n                        extracted_data = update_value_at_index(buffer, data, buffer_size);\n                        break;\n                    case 6:\n                        extracted_data = get_value_at_index(buffer, data, buffer_size);\n                        break;\n                    case 15:\n                        extracted_data = combine_and_extract_bits(buffer, data, buffer_size);\n                        break;\n                    case 16:\n                        extracted_data = extract_data_from_buffer_08000b54(buffer, data, buffer_size);\n                }\n            }\n            else {\n                if (check_result != 0xff) {\n                    copy_byte_from_buffer_to_buffer_plus_9(buffer, check_result);\n                    update_crc_and_extract_bits(buffer);\n                }\n                *(char *)(buffer + 2) = (char)check_result;\n                extracted_data = (int)(char)check_result;\n            }\n        }\n        else {\n            extracted_data = 0;\n        }\n    }\n    return extracted_data;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "extract_data_from_buffer_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_input_subtraction_0800376e",
                "iVar1": "input_subtract_result",
                "subtract_four_from_input_08003750": "subtract_four_from_input",
                "(code *)0x0": "NULL",
                "(code **)": ""
            },
            "code": "void execute_input_subtraction_0800376e(void)\n{\n  int input_subtract_result = subtract_four_from_input();\n  if (*(code **)(input_subtract_result + 0x44) != (code *)0x0) {\n    (**(code **)(input_subtract_result + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_input_subtraction_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_values_08000d98",
                "param_1": "time_ms",
                "iVar1": "check_result",
                "PTR_DAT_08000ddc": "ptr_dat_08000ddc",
                "PTR_DAT_08000dd8": "ptr_dat_08000dd8",
                "check_param_and_set_values_08000ee0": "check_param_and_set_values",
                "decode_bits_08000e60": "decode_bits",
                "PTR_DAT_08000de0": "ptr_dat_08000de0"
            },
            "code": "int check_and_set_values_08000d98(uint time_ms) {\n    uint divisor = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n    int check_result = check_param_and_set_values_08000ee0(divisor);\n    if (check_result != 0) {\n        return 1;\n    }\n    if (time_ms > 0xf) {\n        return 1;\n    }\n    decode_bits_08000e60(0xffffffff, time_ms, 0);\n    *(uint *)PTR_DAT_08000de0 = time_ms;\n    return 0;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_values_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "index",
                "iVar2": "data_validity",
                "iVar3": "data_pointer",
                "PTR_DAT_08003f88": "data_pointer_array",
                "PTR_DAT_08003f8c": "function_pointer_array",
                "PTR_DAT_08003f90": "data_array"
            },
            "code": "void process_data_08003f48(void)\n{\n  uint index = find_index_of_value();\n  int data_pointer = *(int *)(PTR_DAT_08003f88 + index * 4);\n  if ((index < 10) && (data_pointer != -1)) {\n    uint byte_value = *(byte *)(data_pointer + 0x44);\n    uint short_value = *(ushort *)(data_pointer + 0x6e);\n    uint data_validity = *(int *)(data_pointer + 0x68) + byte_value;\n    check_data_validity(*(undefined4 *)(PTR_DAT_08003f90 + byte_value * 4), data_validity, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "process_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "set_flags_based_on_value_0800340c"
            },
            "code": "void set_flags_based_on_value_0800340c(void)\n{\n  set_flags_based_on_value_0800340c_080035fc();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_value_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_index_of_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "undefined4": "uint32_t",
                "0xffffffff": "UINT32_MAX"
            },
            "code": "uint32_t find_index_of_value_in_array_0800352e(int value, short *array)\n{\n    while (true)\n    {\n        if (*array == -1)\n        {\n            return UINT32_MAX;\n        }\n        if (*array == value)\n        {\n            break;\n        }\n        array = array + 6;\n    }\n    return *(uint32_t *)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": false,
            "current_name": "find_index_of_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input_array",
                "iVar1": "flag_value",
                "puVar2": "previous_input",
                "puVar3": "current_input",
                "do_nothing_08001aac": "execute_nothing",
                "check_input_and_set_flags_08003900": "check_input_and_set_flags",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB_08001f3c_1_08001bf4",
                "check_flag_08000f8c": "check_flag",
                "DAT_08001bf8": "DAT_08001bf8",
                "current_char": "current_char",
                "previous_char": "previous_char"
            },
            "code": "void process_input_08001ab0(uint **input_array)\n{\n  int flag_value;\n  uint *current_input;\n  uint *previous_input;\n  char current_char;\n  char previous_char;\n  \n  current_char = *((char *)input_array + 0x3d);\n  if (current_char - 0x29 < 2) {\n    input_array[0xc] = (uint *)0x0;\n    *((char *)input_array + 0x3d) = 0x28;\n  }\n  else {\n    if ((current_char != '`') && (((*input_array)[1] & 0x800) == 0)) {\n      *((char *)input_array + 0x3d) = 0x20;\n    }\n    input_array[0xc] = (uint *)0x0;\n    *((char *)input_array + 0x3e) = 0;\n  }\n  **input_array = **input_array & 0xfffff7ff;\n  current_input = *input_array;\n  if ((current_input[1] & 0x800) == 0) {\n    if (current_char == '`') {\n      *((char *)input_array + 0x3d) = 0x20;\n      input_array[0x10] = (uint *)0x0;\n      if ((current_input[5] & 0x40) != 0) {\n        previous_input = input_array[9];\n        input_array[9] = (uint *)((int)previous_input + 1);\n        *((char *)previous_input) = (char)current_input[4];\n      }\n      **input_array = **input_array & 0xfffffffe;\n      execute_nothing(input_array);\n    }\n    else {\n      if ((current_input[5] & 0x40) != 0) {\n        previous_input = input_array[9];\n        input_array[9] = (uint *)((int)previous_input + 1);\n        *((char *)previous_input) = (char)current_input[4];\n      }\n      check_input_and_set_flags(input_array);\n    }\n  }\n  else {\n    current_input[1] = current_input[1] & 0xfffff7ff;\n    previous_char = *((char *)input_array[0xd] + 0x35);\n    if (previous_char == '\\x01') {\n      input_array[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flag_value = check_flag_08000f8c(input_array[0xe]);\n      if (flag_value != 0) {\n        if (((*input_array)[5] & 0x40) != 0) {\n          previous_input = input_array[9];\n          input_array[9] = (uint *)((int)previous_input + 1);\n          *((char *)previous_input) = (char)(*input_array)[4];\n        }\n        **input_array = **input_array & 0xfffffffe;\n        *((char *)input_array + 0x3d) = 0x20;\n        (*(code *)input_array[0xe][0x14])();\n      }\n    }\n    else {\n      input_array[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      flag_value = check_flag_08000f8c(input_array[0xd]);\n      if (flag_value != 0) {\n        **input_array = **input_array & 0xfffffffe;\n        *((char *)input_array + 0x3d) = 0x20;\n        (*(code *)input_array[0xd][0x14])();\n      }\n    }\n  }\n  previous_char = *((char *)input_array + 0x3d);\n  if ((previous_char == '(') && (((uint)input_array[0x10] & 4) != 0)) {\n    input_array[0xb] = DAT_08001bf8;\n    input_array[0xc] = (uint *)0x0;\n    *((char *)input_array + 0x3d) = 0x20;\n    *((char *)input_array + 0x3e) = 0;\n    execute_command(input_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "set_flag_and_check_values_08001f9c",
                "iVar1": "start_value",
                "iVar2": "current_value",
                "DAT_0800200c": "ptr_0800200c",
                "DAT_08002010": "ptr_08002010",
                "get_value_from_pointer_08000e30": "get_value_from_ptr_08000e30",
                "DAT_08002014": "ptr_08002014",
                "DAT_08002018": "ptr_08002018"
            },
            "code": "uint32_t set_flag_and_check_values_08001f9c(void)\n{\n  uint32_t start_value = get_value_from_pointer_08000e30();\n  uint32_t current_value;\n  uint32_t end_value = start_value + 0x3e9;\n  *(uint32_t *)(DAT_0800200c + 0x40) |= 0x10000000;\n  *DAT_08002010 = 1;\n  while (1)\n  {\n    if ((*(uint32_t *)(DAT_08002014 + 4) & 0x10000) != 0)\n    {\n      *DAT_08002018 = 1;\n      current_value = get_value_from_pointer_08000e30();\n      if ((current_value - start_value) >= 0x3e9)\n      {\n        return 3;\n      }\n    }\n    else\n    {\n      current_value = get_value_from_pointer_08000e30();\n      if ((current_value - start_value) >= 0x3e9)\n      {\n        return 3;\n      }\n    }\n    if ((*(uint32_t *)(DAT_08002014 + 4) & 0x20000) != 0)\n    {\n      return 0;\n    }\n  }\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_values_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "initialize_parameters_and_values_08000d8e",
                "initialize_params_and_values_080034ce": "initialize_params_and_values_080034ce"
            },
            "code": "void initialize_parameters_and_values_08000d8e(void)\n{\n    initialize_params_and_values_080034ce();\n    return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "initialize_parameters_and_values_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "convert_base_08004638",
                "convert_base_08004622": "convert_base_helper"
            },
            "code": "void convert_base_08004638() {\n  convert_base_08004638_helper();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "convert_base_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_byte_from_param1_to_param1_plus_9_080008cc",
                "param_1": "source_address",
                "param_2": "new_value",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(source_address + 9)",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(source_address + 4)",
                "*(byte *)(param_1 + 10)": "*(byte *)(source_address + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(source_address + 0xb)",
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(source_address + 0x49)"
            },
            "code": "void copy_byte_from_param1_to_param1_plus_9_080008cc(int param_1, undefined new_value){\n    *(undefined *)(param_1 + 9) = *(undefined *)(param_1 + 4);\n    *(byte *)(param_1 + 10) = *(byte *)(param_1 + 10) ^ 0x80;\n    *(undefined *)(param_1 + 0xb) = new_value;\n    *(undefined *)(param_1 + 0x49) = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_byte_from_param1_to_param1_plus_9_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = allocate_and_set_permissions_080050d0_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_data_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_byte_sequence_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_byte_sequence_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_byte_sequence_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "process_data_and_update_counter_08005608",
                "param_1": "data",
                "param_2": "counter_address",
                "iVar1": "data_length",
                "uVar2": "updated_counter_value",
                "bVar3": "is_data_valid"
            },
            "code": "void process_data_and_update_counter_08005608(undefined4 data, int counter_address)\n{\n  int data_length = process_data(data, (int)*(short *)(counter_address + 0xe));\n  bool is_data_valid = data_length >= 0;\n  uint updated_counter_value;\n  if (is_data_valid) {\n    updated_counter_value = *(int *)(counter_address + 0x54) + data_length;\n  }\n  else {\n    updated_counter_value = *(ushort *)(counter_address + 0xc) & 0xffffefff;\n  }\n  if (is_data_valid) {\n    *(uint *)(counter_address + 0x54) = updated_counter_value;\n  }\n  if (!is_data_valid) {\n    *(short *)(counter_address + 0xc) = (short)updated_counter_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "process_data_and_update_counter_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "check_input_validity_08002efa",
                "param_1": "param_array",
                "param_2": "array_length",
                "param_3": "element_value",
                "*(char *)((int)param_1 + 0x3a)": "param_array[58]",
                "*(char *)(param_1 + 0xe)": "param_array[14]",
                "*(short *)(param_1 + 0xb)": "param_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "param_array[14]",
                "param_1[10]": "param_array[10]",
                "param_1[0xf]": "param_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "param_array[58]",
                "*(undefined *)(param_1 + 0xe)": "param_array[14]",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*param_array + 0x14)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*param_array + 0xc)"
            },
            "code": "int check_input_validity_08002efa(int *param_array, int array_length, int element_value)\n{\n    if (param_array[10] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (element_value == 0)\n    {\n        return 1;\n    }\n    if (param_array[14] != '\\x01')\n    {\n        param_array[10] = array_length;\n        param_array[11] = (short)element_value;\n        param_array[14] = (short)element_value;\n        param_array[15] = 0;\n        param_array[58] = 0x22;\n        param_array[14] = 0;\n        *(uint *)(*param_array + 0x14) |= 1;\n        *(uint *)(*param_array + 0xc) |= 0x120;\n        return 0;\n    }\n    return 2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "check_input_validity_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_input_and_process_if_needed_0800377c",
                "*PTR_DAT_08003794": "ptr_dat_08003794",
                "process_input_080026ce": "process_input",
                "*(int *)PTR_DAT_08003794": "input_1",
                "*(int *)(PTR_DAT_08003794 + 0x24)": "input_2"
            },
            "code": "void check_input_and_process_if_needed_0800377c(void)\n{\n    int* *PTR_DAT_08003794 = (int*) PTR_DAT_08003794;\n    int *(int *)PTR_DAT_08003794 = **PTR_DAT_08003794;\n    int *(int *)(PTR_DAT_08003794 + 0x24) = *(*PTR_DAT_08003794 + 0x24);\n    \n    if (*(int *)PTR_DAT_08003794 != 0) {\n        process_input_080026ce();\n    }\n    if (*(int *)(PTR_DAT_08003794 + 0x24) != 0) {\n        process_input_080026ce();\n    }\n    return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_input_and_process_if_needed_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "set_flags_based_on_value_0800268e",
                "param_1": "param_array",
                "puVar1": "param"
            },
            "code": "void set_flags_based_on_value_0800268e(uint **param_array){\n  uint *param = *param_array;\n  *(undefined *)((int)param_array + 0x39) = 2;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  set_flags_based_on_value_0800268e_0800340c(param_array);\n  *(undefined *)((int)param_array + 0x39) = 0;\n  *(undefined *)(param_array + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_value_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "combine_and_extract_bits_080008e2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "combined_value",
                "uVar2": "input_5",
                "cVar5": "extracted_bits",
                "iVar6": "ptr_1/ptr_2",
                "uVar3": "i",
                "uVar4": "bit_counter"
            },
            "code": "int combine_and_extract_bits_080008e2(int input_1, int input_2, undefined4 input_3, undefined4 input_4)\n{\n  int combined_value = combine_values(*(undefined *)(input_1 + 0xb), *(undefined *)(input_1 + 0xc), input_3, input_4, input_4);\n  uint input_5 = combine_values(*(undefined *)(input_1 + 0xd), *(undefined *)(input_1 + 0xe));\n  char extracted_bits = (char)((input_5 << 0x15) >> 0x18);\n  if ((input_5 & 7) != 0) {\n    extracted_bits++;\n  }\n  *(char *)(input_1 + 0xb) = extracted_bits;\n  *(undefined *)(input_1 + 0x49) = 3;\n  uint bit_counter = 0;\n  for (uint i = 0; i < input_5; i++) {\n    if (((int)(uint)*(ushort *)(input_2 + ((i + combined_value) * 0x100000 >> 0x18) * 2) >> (i + combined_value & 0xf) & 1U) == 0) {\n      int ptr_1 = (uint)*(byte *)(input_1 + 0x49) + input_1;\n      *(byte *)(ptr_1 + 9) = *(byte *)(ptr_1 + 9) & ~(byte)(1 << bit_counter);\n    }\n    else {\n      int ptr_2 = (uint)*(byte *)(input_1 + 0x49) + input_1;\n      *(byte *)(ptr_2 + 9) = *(byte *)(ptr_2 + 9) | (byte)(1 << bit_counter);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      *(char *)(input_1 + 0x49)++;\n      bit_counter = 0;\n    }\n  }\n  if ((input_5 & 7) != 0) {\n    *(char *)(input_1 + 0x49)++;\n  }\n  extracted_bits = *(char *)(input_1 + 0x49);\n  update_crc_and_extract_bits(input_1);\n  return (int)(char)(extracted_bits + 2);\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_extract_bits_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "PTR_input",
                "param_2": "input_len",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output_ptr",
                "cVar1": "digit",
                "local_15": "reversed_output"
            },
            "code": "undefined4 convert_base_080045c8(int *PTR_input, uint input_len, uint base)\n{\n    char digit;\n    undefined4 result;\n    uint quotient;\n    uint remainder;\n    char reversed_output[9];\n    reversed_output[0] = '\\0';\n    if ((int)base < 2) {\n        base = 10;\n    }\n    char *output_ptr = reversed_output + 1;\n    do {\n        quotient = input_len / base;\n        remainder = (input_len & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n        output_ptr--;\n        digit = (char)remainder;\n        if (remainder < 10) {\n            digit += '0';\n        }\n        else {\n            digit += '7';\n        }\n        *output_ptr = digit;\n        input_len = quotient;\n    } while (quotient != 0);\n    if (output_ptr == (char *)0x0) {\n        result = 0;\n    }\n    else {\n        uint output_len = find_end_of_string_08000218(output_ptr);\n        result = (**(code **)(*PTR_input + 4))(PTR_input,output_ptr,output_len);\n    }\n    return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "process_input_08003d18",
                "param_1": "input_value",
                "param_2": "parameter_value",
                "sVar1": "short_value_1",
                "iVar2": "pointer_value_1",
                "iVar3": "find_result",
                "uVar4": "loop_index",
                "PTR_DAT_08003dc0": "pointer_data_1",
                "PTR_DAT_08003dc4": "pointer_data_2",
                "PTR_DAT_08003dc8": "pointer_data_3",
                "PTR_DAT_08003dcc": "pointer_data_4",
                "get_value_from_pointer_08000e30": "get_value_from_pointer",
                "find_value_if_not_minus_one_080034f4": "find_value_if_not_minus_one",
                "update_short_value_if_not_zero_08003cc8": "update_short_value_if_not_zero",
                "process_input_08002dd0": "process_input_2"
            },
            "code": "uint process_input_08003d18(uint input_value, uint parameter_value)\n{\n    int pointer_value_1 = get_value_from_pointer();\n    short short_value_1 = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n    int find_result = find_value_if_not_minus_one((int)short_value_1, PTR_DAT_08003dc4);\n    if (find_result == 0) {\n        return 0;\n    }\n    uint loop_index = 0;\n    while ((loop_index < 10 && ((*(int *)(PTR_DAT_08003dc8 + loop_index * 4) == 0 || (find_result = find_value_if_not_minus_one((int)short_value_1, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + loop_index * 4) != find_result))))) {\n        loop_index = loop_index + 1 & 0xff;\n    }\n    if (9 < loop_index) {\n        if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (update_short_value_if_not_zero(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n            return 0;\n        }\n        loop_index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n    }\n    do {\n        int process_result = process_input_08003d18_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + loop_index * 4), input_value, parameter_value & 0xffff, 1000);\n        if (process_result == 0) {\n            return parameter_value;\n        }\n        int pointer_value_2 = get_value_from_pointer();\n    } while ((uint)(pointer_value_2 - pointer_value_1) < 1000);\n    return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "process_input_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2) {\n    return value2 | (value1 << 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "initialize_params_and_values_080034ce"
            },
            "code": "void initialize_params_and_values_080034ce(void)\n{\n  // Improved code for initialize_params_and_values_080034ce\n}\n\nvoid set_values_and_flags_08000c8c(void)\n{\n  // Improved code for set_values_and_flags_08000c8c\n}\n\nvoid initialize_params_and_values_080034ce(void)\n{\n  initialize_params_and_values_080034ce();\n  set_values_and_flags_08000c8c();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "initialize_params_and_values_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "calculate_result_from_params_080047fe",
                "param_1": "param_1",
                "param_2": "param_2",
                "calculate_result_08004844": "calculate_result"
            },
            "code": "void calculate_result_from_params_080047fe(int param_1, int param_2)\n{\n  calculate_result(param_2, param_1);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "calculate_result_from_params_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "set_flags_08001256",
                "param_1": "param",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t set_flags_08001256(uint32_t **param_1)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = param_1[0xb];\n  if ((*(char *)((int)param_1 + 0x3d) == '\"') && ((param_1[0x14] != NULL || (*(char *)((int)param_1 + 0x3e) != '@')))) {\n    if ((param_1[0x14] == NULL) && (param_1[4] == (uint32_t *)0xc000)) {\n      **param_1 = **param_1 | 0x100;\n      param_1[0x14] = (uint32_t *)((int)param_1[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)param_1 + 0x2a) == 0) {\n        **param_1 = **param_1 | 0x200;\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **param_1 = **param_1 & 0xfffffbff;\n          flag_ptr = *param_1;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (param_1[0xc] == (uint32_t *)0x12)) {\n          **param_1 = **param_1 & 0xfffffbff;\n          **param_1 = **param_1 | 0x200;\n        }\n        else if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param_1 + 0x2a) == 2) {\n        if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 = **param_1 | 0x400;\n        }\n        else {\n          **param_1 = **param_1 & 0xfffffbff;\n          **param_1 = **param_1 | 0x800;\n        }\n        flag_ptr = *param_1;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **param_1 = **param_1 | 0x400;\n        flag_ptr = *param_1;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      param_1[0x14] = NULL;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_pointer_array_start",
                "iVar4": "function_pointer_array_length",
                "iVar5": "i",
                "puVar2": "second_function_pointer_array_start",
                "puVar3": "second_function_pointer_array_end"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_pointer_array_start = PTR_DAT_080048bc;\n  undefined *function_pointer_array_end = PTR_DAT_080048c0;\n  undefined *second_function_pointer_array_start = PTR_DAT_080048c4;\n  undefined *second_function_pointer_array_end = PTR_DAT_080048c8;\n  int function_pointer_array_length = (int)function_pointer_array_end - (int)function_pointer_array_start;\n  int second_function_pointer_array_length = (int)second_function_pointer_array_end - (int)second_function_pointer_array_start;\n\n  for (int i = 0; i < function_pointer_array_length >> 2; i++) {\n    (**(code **)(function_pointer_array_start + i * 4))();\n  }\n\n  do_nothing_080059f8();\n\n  for (int i = 0; i < second_function_pointer_array_length >> 2; i++) {\n    (**(code **)(second_function_pointer_array_start + i * 4))();\n  }\n\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "initialize_parameters_08004648",
                "set_param_bits_08000e3c": "set_parameter_bits",
                "initialize_parameters_and_values_08000d8e": "initialize_parameters_and_values"
            },
            "code": "void initialize_parameters_08004648(void)\n{\n  set_parameter_bits(3);\n  initialize_parameters_08004648_and_values();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "execute_function_08000600",
                "param_1": "function_ptr",
                "param_2": "arg",
                "cVar1": "function_type",
                "iVar2": "result",
                "PTR_DAT_08000668": "function_data_ptr"
            },
            "code": "void execute_function_08000600(int **function_ptr, int arg, int num_args) {\n  char function_type = *(char *)((int)function_ptr + 5);\n  if (function_type == '\\x02' || function_type == '\\x03' || function_type == '\\x01') {\n    *function_ptr = (int *)PTR_DAT_08000668;\n  }\n  else {\n    *function_ptr = (int *)PTR_DAT_08000668;\n  }\n  set_flags_and_execute(*function_ptr, arg, num_args);\n  if (num_args > 1) {\n    update_bit_array(num_args, 1);\n    extract_and_update_bit((undefined *)((int)function_ptr + 6), 0);\n  }\n  do {\n    int result = (**(code **)(**function_ptr + 0xc))();\n  } while (result >= -1);\n  *(undefined *)((int)function_ptr + 0x49) = 0;\n  *(undefined *)((int)function_ptr + 0x4a) = 0;\n  *(undefined2 *)(function_ptr + 0x15) = 0;\n  *(undefined2 *)((int)function_ptr + 0x52) = 0;\n  *(undefined2 *)(function_ptr + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "execute_function_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "call_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_080045be(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_08000728",
                "param_1": "data_offset",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint calculate_crc16_08000728(uint data_offset, uint data_length) {\n    uint crc = 0xffff;\n    for (uint i = 0; i < data_length; i++) {\n        crc ^= *(byte *)(data_offset + i + 9);\n        for (uint j = 1; j < 9; j++) {\n            uint lsb = crc & 1;\n            crc >>= 1;\n            if (lsb != 0) {\n                crc ^= 0xa001;\n            }\n        }\n    }\n    return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_index_of_value_0800354a",
                "param_1": "value_to_find",
                "uVar1": "index_of_value",
                "find_index_of_value_in_array_0800352e": "find_index_of_value_in_array"
            },
            "code": "int get_index_of_value_0800354a(int value_to_find) {\n  int index_of_value = -1;\n  if (value_to_find == -1) {\n    return -1;\n  }\n  index_of_value = find_index_of_value_in_array();\n  return index_of_value;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "get_index_of_value_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_uint_at_offset_0800124a",
                "param_1": "base_ptr",
                "*param_1": "value_ptr",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(base_ptr + offset)",
                "param_1[0x11]": "base_ptr[0x11]",
                "0xff": "0xff",
                "undefined4": "int",
                "return 0;": "return 0;",
                "int *": "int *",
                "uint": "unsigned int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_uint_at_offset_0800124a(int *base_ptr)\n{\n    int offset = 0x10;\n    int value = base_ptr[0x11] & 0xff;\n    *(unsigned int *)(base_ptr + offset) = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_uint_at_offset_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "get_offset_08004094",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "new_offset"
            },
            "code": "int get_offset_08004094(int offset) {\n  int current_offset = *(int *)PTR_DAT_080040c4;\n  undefined *new_offset = (undefined *)(offset + current_offset);\n  if (new_offset <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_080040c4 = new_offset;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "get_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_at_31_of_uint32_080033c8",
                "DAT_080033d4": "original_ptr"
            },
            "code": "void clear_bit_at_31_of_uint32_080033c8(void)\n{\n  uint32_t* ptr = (uint32_t*)(DAT_080033d4 + 0x40);\n  *ptr = *ptr & 0xdfffffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_at_31_of_uint32_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_bit_080031fc",
                "param_1": "bit_position",
                "uVar1": "return_value",
                "DAT_08003350": "register_base_address",
                "DAT_08003354": "bit_0_value",
                "DAT_08003358": "bit_1_value",
                "DAT_0800335c": "bit_2_value",
                "DAT_08003360": "bit_3_value",
                "DAT_08003364": "bit_4_value",
                "DAT_08003368": "bit_5_value",
                "DAT_0800336c": "bit_6_value",
                "DAT_08003370": "bit_7_value",
                "DAT_08003374": "bit_8_value",
                "DAT_08003378": "bit_9_value",
                "DAT_0800337c": "bit_10_value"
            },
            "code": "uint32_t set_bit_080031fc(uint32_t bit_position)\n{\n  uint32_t* register_address = (uint32_t*)(DAT_08003350 + 0x30);\n  uint32_t bit_mask = 1 << bit_position;\n  *register_address |= bit_mask;\n  switch(bit_position)\n  {\n    case 0:\n      return DAT_08003354;\n    case 1:\n      return DAT_08003358;\n    case 2:\n      return DAT_0800335c;\n    case 3:\n      return DAT_08003360;\n    case 4:\n      return DAT_08003364;\n    case 5:\n      return DAT_08003368;\n    case 6:\n      return DAT_0800336c;\n    case 7:\n      return DAT_08003370;\n    case 8:\n      return DAT_08003374;\n    case 9:\n      return DAT_08003378;\n    case 10:\n      return DAT_0800337c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_bit_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "initialize_if_param_one_is_true_08000690",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "initialize_data_08000682": "initialize_data"
            },
            "code": "void initialize_if_param_one_is_true_08000690(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param)\n{\n    if (first_param != 1) {\n        return;\n    }\n    if (second_param == 0xffff) {\n        initialize_data(PTR_DAT_080006b0, 1, 0, 0, fourth_param);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_one_is_true_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "allocate_and_set_permissions_080054fc",
                "param_1": "process_id",
                "param_2": "block_info",
                "uVar1": "permissions",
                "iVar2": "block_address",
                "local_18": "block_size",
                "local_14": "local_block_info"
            },
            "code": "void allocate_and_set_permissions_080054fc(int process_id, int *block_info) {\n    ushort permissions;\n    int block_size;\n    int *local_block_info;\n    \n    if ((int)((uint)*(ushort *)(block_info + 3) << 0x1e) >= 0) {\n        local_block_info = block_info;\n        permissions = set_permissions(process_id, block_info, &block_size, &local_block_info);\n        int block_address = allocate_memory_block(process_id, block_size);\n        if (block_address != 0) {\n            *(undefined **)(process_id + 0x28) = PTR_LAB_08005320_1_08005578;\n            *block_info = block_address;\n            *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) | 0x80;\n            block_info[5] = block_size;\n            block_info[4] = block_address;\n            if (local_block_info != NULL && process_value(process_id, (int)*(short *)((int)block_info + 0xe)) != 0) {\n                *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(block_info + 3) = permissions | *(ushort *)(block_info + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(block_info + 3) << 0x16 >= 0) {\n            *(ushort *)(block_info + 3) = *(ushort *)(block_info + 3) & 0xfffc | 2;\n        }\n    }\n    *block_info = (int)block_info + 0x47;\n    block_info[4] = (int)block_info + 0x47;\n    block_info[5] = 1;\n    return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "allocate_and_set_permissions_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "decode_data_08001420",
                "param_1": "data_array",
                "pbVar1": "data_pointer",
                "decoded_data": "decoded_data",
                "data_length": "data_length"
            },
            "code": "int decode_data_08001420(int *data_array)\n{\n    short data_length = *(short *)((int)data_array + 0x2a);\n    if (data_length != 0) {\n        byte *data_pointer = (byte *)data_array[9];\n        data_array[9] = (int)(data_pointer + 1);\n        uint decoded_data = (uint)*data_pointer;\n        *(uint *)(*data_array + 0x10) = decoded_data;\n        *(short *)((int)data_array + 0x2a) = data_length - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "decode_data_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_params_and_values_08000de4",
                "puVar1": "params"
            },
            "code": "int set_params_and_values_08000de4(void)\n{\n    uint *params = DAT_08000e14;\n    *params |= 0x200;\n    *params |= 0x400;\n    *params |= 0x100;\n    set_param_bits_08000e3c(3);\n    check_and_set_values_08000d98(0xf);\n    do_nothing_08000d96();\n    return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_params_and_values_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_input_080026ce",
                "param_1": "input",
                "iVar1": "input_ptr",
                "PTR_DAT_08003754": "execute_callback_if_flag_set_08003754",
                "PTR_FUN_080026ca": "do_nothing_080026ca",
                "PTR_FUN_080026c8": "do_nothing_080026c8",
                "PTR_FUN_0800376e": "execute_input_subtraction_0800376e",
                "PTR_FUN_0800293e": "do_nothing_0800293e",
                "PTR_FUN_080026cc": "do_nothing_080026cc",
                "PTR_FUN_0800293c": "do_nothing_0800293c",
                "flag_1": "flag_1",
                "flag_2": "flag_2"
            },
            "code": "void process_input_080026ce(int *input)\n{\n  int input_ptr = *input;\n  uint32_t flag_1 = *(uint32_t *)(input_ptr + 0xc);\n  uint32_t flag_2 = *(uint32_t *)(input_ptr + 0x10);\n  \n  if ((flag_2 & 2) && (flag_1 & 2)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xfffffffd;\n    input[6] = 1;\n    if ((*(uint32_t *)(*input + 0x18) & 3) == 0) {\n      PTR_DAT_08003754();\n      PTR_FUN_080026ca(input);\n    }\n    else {\n      PTR_FUN_080026c8();\n    }\n    input[6] = 0;\n  }\n  if ((flag_2 & 4) && (flag_1 & 4)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xfffffffb;\n    input[6] = 2;\n    if ((*(uint32_t *)(*input + 0x18) & 0x300) == 0) {\n      PTR_DAT_08003754(input);\n      PTR_FUN_080026ca(input);\n    }\n    else {\n      PTR_FUN_080026c8(input);\n    }\n    input[6] = 0;\n  }\n  if ((flag_2 & 8) && (flag_1 & 8)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xfffffff7;\n    input[6] = 4;\n    if ((*(uint32_t *)(*input + 0x1c) & 3) == 0) {\n      PTR_DAT_08003754(input);\n      PTR_FUN_080026ca(input);\n    }\n    else {\n      PTR_FUN_080026c8(input);\n    }\n    input[6] = 0;\n  }\n  if ((flag_2 & 0x10) && (flag_1 & 0x10)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xffffffef;\n    input[6] = 8;\n    if ((*(uint32_t *)(*input + 0x1c) & 0x300) == 0) {\n      PTR_DAT_08003754(input);\n      PTR_FUN_080026ca(input);\n    }\n    else {\n      PTR_FUN_080026c8(input);\n    }\n    input[6] = 0;\n  }\n  if ((flag_2 & 1) && (flag_1 & 1)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xfffffffe;\n    PTR_FUN_0800376e(input);\n  }\n  if ((flag_2 & 0x80) && (flag_1 & 0x80)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xffffff7f;\n    PTR_FUN_0800293e(input);\n  }\n  if ((flag_2 & 0x40) && (flag_1 & 0x40)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xffffffbf;\n    PTR_FUN_080026cc(input);\n  }\n  if ((flag_2 & 0x20) && (flag_1 & 0x20)) {\n    *(uint32_t *)(input_ptr + 0x10) = 0xffffffdf;\n    PTR_FUN_0800293c(input);\n  }\n}\n",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_input_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "input_string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000218(char* input_string) {\n    char current_char;\n    char* current_position = input_string;\n    do {\n        current_position++;\n        current_char = *current_position;\n    } while (current_char != '\\0');\n    return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "get_value_index_0800339c",
                "param_1": "value",
                "param_2": "data",
                "param_3": "size",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "code": "int get_value_index_0800339c(uint32_t value, uint32_t *data, uint32_t size, uint32_t start_index, uint32_t end_index) {\n  int index = get_index_of_value_0800354a(value, data, size, start_index, end_index);\n  uint32_t shifted_index = (uint32_t)(index << 12) >> 27;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index == 4) {\n    return 12;\n  }\n  if (shifted_index == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "get_value_index_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "decode_bits_08000e60",
                "param_1": "bit_index",
                "param_2": "source_bits",
                "param_3": "destination_bits",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "DAT_08000ebc": "PTR_08000ebc",
                "DAT_08000ec0": "PTR_08000ec0"
            },
            "code": "void decode_bits_08000e60(uint bit_index, uint source_bits, uint destination_bits)\n{\n  uint shift_amount = (*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint masked_bits = (source_bits & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & destination_bits;\n  if ((int)bit_index < 0) {\n    *(char *)(DAT_08000ec0 + (bit_index & 0xf)) = (char)(masked_bits << 4);\n  }\n  else {\n    *(char *)(bit_index + 0xe000e400) = (char)(masked_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "decode_bits_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_input_0800165a",
                "param_1": "input_buffer",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "param_4": "param_4",
                "uVar1": "data",
                "uVar2": "input_flags"
            },
            "code": "int process_input_0800165a(int* input_buffer, int flag_1, int flag_2, int flag_3, int param_4) {\n  int input_flags = *(int*)(*input_buffer + 0x18);\n  int data;\n  if ((input_flags & 0x80) == 0) {\n    data = *(int*)(input_buffer + 3);\n  }\n  else {\n    data = *(int*)(input_buffer + 6);\n  }\n  process_input_0800165a_08003880(input_buffer, (input_flags & 4) == 0, data, input_flags, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "extract_data_from_buffer_08000b04",
                "param_1": "buffer_address",
                "param_2": "extracted_data_address",
                "bVar1": "data_length",
                "bVar2": "data_offset",
                "cVar3": "crc_and_bits",
                "uVar4": "combined_data",
                "uVar5": "i"
            },
            "code": "int extract_data_from_buffer_08000b04(int buffer_address, int extracted_data_address)\n{\n    byte data_length = *(byte *)(buffer_address + 0xc);\n    byte data_offset = *(byte *)(buffer_address + 0xe);\n    *(undefined *)(buffer_address + 0xd) = 0;\n    *(byte *)(buffer_address + 0xe) = data_offset;\n    *(undefined *)(buffer_address + 0x49) = 6;\n    for (uint i = 0; i < data_offset; i++) {\n        undefined2 combined_data = combine_values(*(undefined *)(i * 2 + buffer_address + 0x10),\n                                                 *(undefined *)(buffer_address + (i + 4) * 2 + 9));\n        *(undefined2 *)(extracted_data_address + (data_length + i) * 2) = combined_data;\n    }\n    char crc_and_bits = *(char *)(buffer_address + 0x49);\n    update_crc_and_extract_bits(buffer_address);\n    return (int)(char)(crc_and_bits + '\\x02');\n}\n",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "extract_data_from_buffer_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "execute_if_pointer_not_null_0800262c",
                "param_1": "ptr_param_1",
                "DAT_08002688": "new_dat",
                "execute_code_if_pointer_is_not_null_08003594": "execute_code_if_pointer_not_null",
                "do_nothing_0800268c": "do_nothing"
            },
            "code": "void execute_if_pointer_not_null_0800262c()\n{\n    int* ptr_param_1 = param_1;\n\n    if (((*(uint *)(*ptr_param_1 + 0xc) & 0x100) != 0) && ((*(uint *)(*ptr_param_1 + 8) & 0x1000) != 0)) {\n        execute_code_if_pointer_is_not_null_08003594();\n        *(uint *)(*ptr_param_1 + 0xc) = *(uint *)(*ptr_param_1 + 0xc) & 0xff | 0xfffffe7f;\n    }\n\n    if (((*(uint *)(*ptr_param_1 + 0xc) & 0x200) != 0) && ((*(uint *)(*ptr_param_1 + 8) & 0x2000) != 0)) {\n        do_nothing_0800268c(ptr_param_1);\n        *(uint *)(*ptr_param_1 + 0xc) = *(uint *)(*ptr_param_1 + 0xc) & 0xff | 0xfffffd7f;\n    }\n\n    *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n    *(undefined *)((int)ptr_param_1 + 0x1d) = 1;\n    return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_pointer_not_null_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_and_execute_08004388",
                "param_1": "input_param",
                "param_2": "flag_param",
                "param_3": "flag_byte",
                "bVar1": "flag_bits",
                "iVar2": "flag_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_flags_and_execute_08004388(int input_param, int flag_param, byte flag_byte) {\n  uint extraout_r1;\n  byte flag_bits = flag_byte & 7;\n  int flag_value;\n  code *jump_table;\n\n  *(int *)(input_param + 0x11c) = flag_param;\n  *(byte *)(input_param + 0x144) = flag_byte;\n\n  switch (flag_bits) {\n    case 4:\n      flag_value = 7;\n      break;\n    case 6:\n      flag_value = 8;\n      break;\n    case 2:\n      flag_value = 6;\n      break;\n    default:\n      flag_value = 0;\n      break;\n  }\n\n  if ((flag_byte & 0x30) == 0x30) {\n    *(int *)(input_param + 0x128) = 0x600;\n    flag_value++;\n  }\n  else if ((flag_byte & 0x20) == 0) {\n    *(int *)(input_param + 0x128) = 0;\n  }\n  else {\n    *(int *)(input_param + 0x128) = 0x400;\n    flag_value++;\n  }\n\n  if ((flag_byte & 8) == 0) {\n    *(int *)(input_param + 0x124) = 0;\n  }\n  else {\n    *(int *)(input_param + 0x124) = 0x2000;\n  }\n\n  if (flag_value == 8) {\n    *(int *)(input_param + 0x120) = 0;\n  }\n  else if (flag_value == 9) {\n    *(int *)(input_param + 0x120) = 0x1000;\n  }\n  else {\n    flag_value = 0;\n  }\n\n  if (flag_value != 0) {\n    execute_func_08003978(input_param + 0xd4);\n    update_data_08003e54(input_param + 0xd4,uRam08004434);\n    return;\n  }\n\n  jump_table = (code *)0x8004432;\n  process_input_and_execute_08004808(uRam08004440,299,uRam0800443c);\n\n  if (extraout_r1 < 0x60) {\n    uRam0000012e = *(undefined2 *)(PTR_DAT_0800445c + extraout_r1 * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n\n  /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n  /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_and_execute_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_input_and_execute_080051ac",
                "puVar1": "input_ptr",
                "iVar2": "loop_count",
                "piVar3": "ptr_3",
                "piVar4": "ptr_4",
                "uVar5": "u_var_5",
                "uVar6": "u_var_6",
                "iVar7": "i_var_7",
                "pcVar8": "code_ptr_8",
                "iVar9": "i_var_9",
                "uVar10": "u_var_10",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable_00",
                "bVar11": "bool_var_11",
                "uVar12": "u_var_12"
            },
            "code": "void process_input_and_execute_080051ac(int input)\n{\n  uint *input_ptr;\n  int loop_count;\n  int *ptr_3;\n  int *ptr_4;\n  uint uVar5;\n  ushort uVar6;\n  int iVar7;\n  code *code_ptr_8;\n  int iVar9;\n  uint uVar10;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar11;\n  undefined8 uVar12;\n  process_input_080055d0(input);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x80051bb;\n  uVar12 = infinite_loop_080040f8(1);\n  ptr_3 = (int *)((ulonglong)uVar12 >> 0x20);\n  input_ptr = (uint *)uVar12;\n  uVar6 = *(ushort *)(ptr_3 + 3);\n  uVar5 = (uint)uVar6;\n  if ((int)(uVar5 << 0x1c) < 0) {\n    loop_count = ptr_3[4];\n    if (loop_count != 0) {\n      iVar7 = uVar5 << 0x1e;\n      bVar11 = iVar7 == 0;\n      iVar9 = *ptr_3;\n      if (bVar11) {\n        iVar7 = ptr_3[5];\n      }\n      *ptr_3 = loop_count;\n      if (!bVar11) {\n        iVar7 = 0;\n      }\n      ptr_3[2] = iVar7;\n      for (iVar9 = iVar9 - loop_count; 0 < iVar9; iVar9 = iVar9 - iVar7) {\n        iVar7 = (*(code *)ptr_3[10])(input_ptr,ptr_3[8],loop_count,iVar9);\n        if (iVar7 < 1) {\n          uVar6 = *(ushort *)(ptr_3 + 3);\n          goto LAB_080052b2;\n        }\n        loop_count = loop_count + iVar7;\n      }\n    }\n  }\n  else if (((0 < ptr_3[1]) || (0 < ptr_3[0x10])) &&\n          (code_ptr_8 = (code *)ptr_3[0xb], code_ptr_8 != (code *)0x0)) {\n    uVar10 = *input_ptr;\n    *input_ptr = 0;\n    if ((uVar6 & 0x1000) == 0) {\n      iVar7 = (*code_ptr_8)(input_ptr,ptr_3[8],uVar5 & 0x1000,1);\n      if ((iVar7 == -1) && (uVar5 = *input_ptr, uVar5 != 0)) {\n        if ((uVar5 != 0x1d) && (uVar5 != 0x16)) {\n          *(ushort *)(ptr_3 + 3) = *(ushort *)(ptr_3 + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *input_ptr = uVar10;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      iVar7 = ptr_3[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr_3 + 3) << 0x1d) < 0) &&\n       (iVar7 = iVar7 - ptr_3[1], ptr_3[0xd] != 0)) {\n      iVar7 = iVar7 - ptr_3[0x10];\n    }\n    iVar7 = (*(code *)ptr_3[0xb])(input_ptr,ptr_3[8],iVar7,0);\n    uVar6 = *(ushort *)(ptr_3 + 3);\n    if ((iVar7 == -1) &&\n       ((0x1d < *input_ptr || (-1 < (int)((DAT_080052c8 >> (*input_ptr & 0xff)) << 0x1f))))) {\n      *(ushort *)(ptr_3 + 3) = uVar6 | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    ptr_3[1] = 0;\n    *ptr_3 = ptr_3[4];\n    if (((int)((uint)uVar6 << 0x13) < 0) && ((iVar7 != -1 || (*input_ptr == 0)))) {\n      ptr_3[0x15] = iVar7;\n    }\n    ptr_4 = (int *)ptr_3[0xd];\n    *input_ptr = uVar10;\n    if (ptr_4 != (int *)0x0) {\n      if (ptr_4 != ptr_3 + 0x11) {\n        insert_node_080048dc(input_ptr);\n      }\n      ptr_3[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_input_and_execute_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "j",
                "piVar3": "jump_table",
                "uVar4": "num_blocks",
                "uVar5": "flags",
                "iVar6": "k",
                "unaff_r4": "tmp",
                "unaff_r5": "original_data",
                "pcVar7": "code_ptr",
                "iVar8": "i",
                "uVar9": "tmp2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr",
                "bVar10": "is_zero",
                "insert_node_080048dc": "insert_node"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data, int *params) {\n  uint32_t result;\n  int i, j, k, num_blocks, block_size, offset;\n  uint16_t flags;\n  uint32_t tmp, original_data, *current_data_ptr;\n  bool is_compressed;\n  int *jump_table;\n  \n  if (params[4] == 0) {\n    return 0;\n  }\n  \n  if (data == NULL || data[6] != 0) {\n    return 0;\n  }\n  \n  if (params == PTR_DAT_08005314) {\n    params = (int *)data[1];\n  }\n  else if (params == PTR_DAT_08005318) {\n    params = (int *)data[2];\n  }\n  else if (params == PTR_DAT_0800531c) {\n    params = (int *)data[3];\n  }\n  \n  if (*(uint16_t *)(params + 6) != 0) {\n    flags = *(uint16_t *)(params + 6);\n    is_compressed = ((flags & 0x8000) != 0);\n    num_blocks = flags & 0x7FFF;\n    block_size = params[4];\n    offset = params[7];\n    jump_table = (int *)params[13];\n    original_data = *data;\n    *data = 0;\n    current_data_ptr = data;\n    \n    if (is_compressed) {\n      tmp = params[21];\n    }\n    else {\n      tmp = params[11];\n    }\n    \n    for (i = 0; i < num_blocks; i++) {\n      j = 0;\n      while (j < block_size) {\n        k = (*(code *)params[16])(data, params[8], block_size, offset + j, tmp, is_compressed);\n        if (k < 1) {\n          *(uint16_t *)(params + 6) = flags | 0x40;\n          goto LAB_080052b2;\n        }\n        j += k;\n      }\n      offset += block_size;\n    }\n    \n    *(uint16_t *)(params + 6) = flags & 0xBFFF;\n    params[1] = 0;\n    *params = params[4];\n    if ((flags & 0x2000) != 0 && jump_table != NULL) {\n      j = params[1] - block_size;\n      if (params[0xD] != 0) {\n        j -= params[0x10];\n      }\n      j = (*(code *)params[12])(data, params[8], j, 0);\n      if (j == -1) {\n        if (*data > 0 && *data != 0x1D && *data != 0x16) {\n          *data = original_data;\n          goto LAB_080051d6;\n        }\n      }\n      else {\n        if (flags & 0x1000) {\n          params[0x15] = j;\n        }\n      }\n      params[1] = 0;\n      *params = params[4];\n      params[0xD] = 0;\n      if (jump_table != params + 0x11) {\n        insert_node_080048dc(data);\n      }\n      goto LAB_08005252;\n    }\n  }\n  \n  result = 0;\n  \nLAB_080051d6:\n  result = (*(code *)PTR_FUN_080052a0)(0);\n  return result;\n  \nLAB_080052b2:\n  result = (*(code *)PTR_FUN_080052a0)(0xFFFFFFFF);\n  return result;\n  \nLAB_08005252:\n  result = (*(code *)PTR_FUN_080052a0)();\n  return result;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_node_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "check_data_validity_08002eb2",
                "param_1": "data_array",
                "param_2": "data_size",
                "param_3": "data_value",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)data_array + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(data_array + 0xe)",
                "param_1[8]": "data_array[8]",
                "*(short *)(param_1 + 9)": "*(short *)(data_array + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)data_array + 0x26)",
                "param_1[0xf]": "data_array[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)data_array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(data_array + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data_array + 0xc)"
            },
            "code": "int check_data_validity_08002eb2(int *data_array, int data_size, int data_value) {\n    if (*(char *)((int)data_array + 0x39) != ' ') {\n        return 2;\n    }\n    if (data_size == 0) {\n        return 1;\n    }\n    if (data_value == 0) {\n        return 1;\n    }\n    if (*(char *)(data_array + 0xe) != '\\x01') {\n        data_array[8] = data_size;\n        *(short *)(data_array + 9) = (short)data_value;\n        *(short *)((int)data_array + 0x26) = (short)data_value;\n        data_array[0xf] = 0;\n        *(undefined *)((int)data_array + 0x39) = 0x21;\n        *(undefined *)(data_array + 0xe) = 0;\n        *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "check_data_validity_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_data_and_clear_bss_08000d3c",
                "iVar1": "data_index",
                "puVar2": "bss_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08000d84": "bss_start",
                "PTR_DAT_08000d7c": "data_start",
                "PTR_DAT_08000d80": "data_end",
                "DAT_08000d78": "data_source"
            },
            "code": "void copy_data_and_clear_bss_08000d3c(void)\n{\n  int data_index;\n  undefined4 *bss_ptr;\n  code *jump_table;\n  for (data_index = 0; data_index < (PTR_DAT_08000d80 - PTR_DAT_08000d7c); data_index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + data_index) = *(undefined4 *)(DAT_08000d78 + data_index);\n  }\n  for (bss_ptr = (undefined4 *)PTR_DAT_08000d84; bss_ptr < PTR_DAT_08000d88; bss_ptr++) {\n    *bss_ptr = 0;\n  }\n  set_flags();\n  execute_functions();\n  jump_table = (code *)0x8000d72;\n  execute_function_with_interrupts();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_bss_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = find_value_if_not_minus_one_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = find_value_if_not_minus_one_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      process_data_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = compare_and_return_non_zero_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        process_data_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = get_index_of_value_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        update_data_08000fb4(uVar10,&local_2c);\n        uVar10 = set_bit_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = get_index_of_value_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        update_data_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        clean_up_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "mask"
            },
            "code": "void update_bit_0800316c(uint bit_position, int* bit_array){\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* target = bit_array + index;\n    uint mask = ~(1 << (bit_position & 0xf));\n    *target = *target & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_080040d0"
            },
            "code": "int32_t return_error_080040d0(void)\n{\n  return -1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "return_error_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permissions_080040d6",
                "param_1": "address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)"
            },
            "code": "int set_memory_permissions_080040d6(int address, int permissions) {\n    *(int *)(address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_data_08004a34_08004a34",
                "param_1": "input_param",
                "param_2": "input_byte",
                "param_3": "input_array",
                "iVar1": "index_var",
                "pbVar2": "array_pointer_1",
                "pbVar3": "array_pointer_2",
                "uVar4": "output_var"
            },
            "code": "uint process_data_08004a34_08004a34(int input_param, byte input_byte, byte **input_array)\n{\n  int index_var;\n  byte *array_pointer_1;\n  byte *array_pointer_2;\n  uint output_var;\n  \n  array_pointer_1 = input_array[2] + -1;\n  input_array[2] = array_pointer_1;\n  if ((-1 < (int)array_pointer_1) || (((int)input_array[6] <= (int)array_pointer_1 && (array_pointer_1 = (byte *)(uint)input_byte, array_pointer_1 != (byte *)0xa))))\n  {\n    array_pointer_1 = *input_array;\n    *input_array = array_pointer_1 + 1;\n    *array_pointer_1 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_data_080053a0();\n  }\n  if (input_array == (byte **)PTR_DAT_080050c4) {\n    input_array = *(byte ***)(input_param + 4);\n  }\n  else if (input_array == (byte **)PTR_DAT_080050c8) {\n    input_array = *(byte ***)(input_param + 8);\n  }\n  else if (input_array == (byte **)PTR_DAT_080050cc) {\n    input_array = *(byte ***)(input_param + 0xc);\n  }\n  input_array[2] = input_array[6];\n  array_pointer_2 = (byte *)(uint)*(ushort *)(input_array + 3);\n  index_var = (int)array_pointer_2 << 0x1c;\n  if (((index_var < 0) && (array_pointer_2 = input_array[4], array_pointer_2 != (byte *)0x0)) || (index_var = allocate_and_set_permissions_080050d0_080050d0(input_param, input_array, index_var, array_pointer_2, array_pointer_1), index_var == 0)) {\n    index_var = (int)*input_array - (int)input_array[4];\n    output_var = (uint)input_byte;\n    if ((index_var < (int)input_array[5]) || (index_var = process_data_080052cc(input_param, input_array), index_var == 0)) {\n      input_array[2] = input_array[2] + -1;\n      array_pointer_1 = *input_array;\n      *input_array = array_pointer_1 + 1;\n      *array_pointer_1 = input_byte;\n      if ((byte *)(index_var + 1) != input_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f)) {\n          return output_var;\n        }\n        if (output_var != 10) {\n          return output_var;\n        }\n      }\n      index_var = process_data_080052cc(input_param, input_array);\n      if (index_var == 0) {\n        return output_var;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_data_08004a34_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_params_080002d0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "return_value"
            },
            "code": "undefined8 get_params_080002d0(int first_param, int second_param, int third_param, int fourth_param)\n{\n  undefined8 return_value;\n  \n  if ((fourth_param == 0) && (third_param == 0)) {\n    if (second_param != 0 || first_param != 0) {\n      second_param = -1;\n      first_param = -1;\n    }\n    return_value = CONCAT44(second_param, first_param);\n  }\n  else {\n    return_value = FUNC_08000300();\n  }\n  \n  return return_value;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_params_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_of_value_08003f00",
                "param_1": "value_to_find",
                "uVar1": "index_of_value"
            },
            "code": "uint find_index_of_value_08003f00(int value_to_find) {\n  uint index_of_value;\n  if (value_to_find == 0) {\n    index_of_value = 10;\n  }\n  else {\n    index_of_value = 0;\n    while (true) {\n      if (index_of_value > 9) {\n        return index_of_value;\n      }\n      if (value_to_find == *(int *)(PTR_DAT_08003f20 + index_of_value * 4)) {\n        break;\n      }\n      index_of_value = (index_of_value + 1) & 0xff;\n    }\n  }\n  return index_of_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_of_value_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "zero_out_short_at_offset_0x2a_08001440",
                "param_1": "array",
                "puVar1": "char_ptr"
            },
            "code": "int zero_out_short_at_offset_0x2a_08001440(int *array) {\n  short *short_ptr = (short *)((int)array + 0x2a);\n  if (*short_ptr != 0) {\n    unsigned char *char_ptr = (unsigned char *)array[9];\n    array[9] = (int)(char_ptr + 1);\n    *char_ptr = (unsigned char)*(int *)(*array + 0x10);\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "zero_out_short_at_offset_0x2a_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "sequence",
                "param_3": "length",
                "bVar1": "byte_value",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "byte_ptr_1",
                "puVar7": "uint_ptr",
                "pbVar8": "byte_ptr_2",
                "uVar9": "alignment_offset",
                "uVar10": "length_32_aligned",
                "uVar11": "data_32",
                "uVar12": "data_32_1",
                "bVar13": "bit_0_1",
                "bVar14": "bit_8_1",
                "bVar15": "bit_16_1",
                "bVar16": "bit_24_1"
            },
            "code": "byte* find_byte_sequence_08000230(uint* data, uint sequence, uint length) {\n    sequence = sequence & 0xff;\n    if ((int)length < 0x10) {\n        while (length > 0) {\n            if (*data == sequence) {\n                return (byte*)data;\n            }\n            ++data;\n            --length;\n        }\n    }\n    else {\n        uint alignment_offset = (uint)data & 7;\n        uint sequence_32 = sequence | (sequence << 8) | (sequence << 16) | (sequence << 24);\n        uint length_32_aligned = length & 0xfffffff8;\n        while (true) {\n            if (alignment_offset == 0) {\n                do {\n                    uint data_32 = *data ^ sequence_32;\n                    uint data_32_1 = *(data + 1) ^ sequence_32;\n                    if (data_32 | data_32_1) {\n                        if ((data_32 & 0xff) == 0) {\n                            data += 4;\n                            length_32_aligned -= 4;\n                            continue;\n                        }\n                        else if ((data_32 & 0xff00) == 0) {\n                            data += 3;\n                            length_32_aligned -= 3;\n                            continue;\n                        }\n                        else if ((data_32 & 0xff0000) == 0) {\n                            data += 2;\n                            length_32_aligned -= 2;\n                            continue;\n                        }\n                        else {\n                            data += 1;\n                            length_32_aligned -= 1;\n                            continue;\n                        }\n                    }\n                    else {\n                        return (byte*)data + 1;\n                    }\n                } while (length_32_aligned > 0);\n                length = length & 7;\n            }\n            while (length > 0) {\n                if (*data == sequence) {\n                    return (byte*)data;\n                }\n                ++data;\n                --length;\n            }\n        }\n    }\n    return nullptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "execute_command_08001684",
                "param_1": "command_array",
                "param_1[0xb]": "command_type",
                "param_1[0xc]": "command_subtype",
                "(int)param_1 + 0x3d": "command_char",
                "DAT_08001714": "PTR_DAT_08001714"
            },
            "code": "uint32_t execute_command_08001684(uint32_t **command_array)\\n\\\n{\\n\\\n    uint32_t *command_type = command_array[0xb];\\n\\\n    char *command_char = (char *)((int)command_array + 0x3d);\\n\\\n    if (((*command_type == (uint32_t *)0x4) || (*command_type == (uint32_t *)0x8)) && (*command_char == \"(\")) {\\n\\\n        command_array[0xb] = DAT_08001714;\\n\\\n        (*command_array)[1] &= 0xfffff8ff;\\n\\\n        (*command_array)[5] = 0xfffffbff;\\n\\\n        **command_array &= 0xfffffbff;\\n\\\n        command_array[0xc] = (uint32_t *)0x0;\\n\\\n        *command_char = 0x20;\\n\\\n        *(command_char + 1) = 0;\\n\\\n        execute_command_08001684_080038d0();\\n\\\n    }\\n\\\n    else if (*command_char == \"!\") {\\n\\\n        command_array[0xb] = DAT_08001714;\\n\\\n        command_array[0xc] = (uint32_t *)0x21;\\n\\\n        *command_char = 0x20;\\n\\\n        *(command_char + 1) = 0;\\n\\\n        (*command_array)[1] &= 0xfffff8ff;\\n\\\n        (*command_array)[5] = 0xfffffbff;\\n\\\n        **command_array &= 0xfffffbff;\\n\\\n        do_nothing_080015ba();\\n\\\n    }\\n\\\n    else {\\n\\\n        (*command_array)[5] = 0xfffffbff;\\n\\\n    }\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "execute_command_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "check_flag_08000f8c",
                "param_1": "flag_ptr"
            },
            "code": "uint32_t check_flag_08000f8c(uint32_t **flag_ptr) {\n    if (*(char *)((int)flag_ptr + 0x35) != '\\x02') {\n        flag_ptr[0x15] = (uint32_t *)0x80;\n        return 1;\n    }\n    *(undefined *)((int)flag_ptr + 0x35) = 5;\n    **flag_ptr = **flag_ptr & 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_flag_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_if_already_executed_080001ac",
                "param_1": "input_string",
                "*PTR_DAT_080001c4": "pointer_to_execution_flag",
                "DAT_080001c8": "execution_status",
                "PTR_FUN_080001cc": "function_pointer"
            },
            "code": "char* check_if_already_executed_080001ac(char* input_string) {\\n    if (*PTR_DAT_080001c4 == \"\\0\") {\\n        if (DAT_080001c8 != 0) {\\n            input_string = PTR_FUN_080001cc;\\n        }\\n        *PTR_DAT_080001c4 = 1;\\n    }\\n    return input_string;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_if_already_executed_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "set_memory_to_value_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end"
            },
            "code": "void set_memory_to_value_080048cc(unsigned char *memory, unsigned char value, int size) {\n  unsigned char *end = memory + size;\n  for (; memory != end; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": false,
            "current_name": "set_memory_to_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "return_zero_080040e4",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_080040e4(void) {\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "return_zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_value_08003506",
                "param_1": "target_value",
                "param_2": "short_array"
            },
            "code": "int find_short_value_08003506(int target_value, short *short_array)\n{\n  while( true ) {\n    if (*(int *)(short_array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(short_array + 2) == target_value) break;\n    short_array = short_array + 6;\n  }\n  return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_value_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_080025e0() {\n    int *PTR_DAT_080025e8 = PTR_DAT_080025e8;\n    return *PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "return_zero_080040e8"
            },
            "code": "int return_zero_080040e8(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "return_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "update_value_at_index_08000a00",
                "param_1": "data",
                "param_2": "array",
                "param_3": "index",
                "param_4": "value",
                "uVar1": "combined_value",
                "uVar2": "shifted_value",
                "PTR_08004640": "combine_values",
                "PTR_0800076c": "update_crc_and_extract_bits"
            },
            "code": "uint32_t update_value_at_index_08000a00(uint8_t* data, uint16_t* array, uint8_t index, uint32_t value) {\n    uint32_t combined_value = PTR_08004640(*(data + index + 1), *(data + index + 2), value, value, value);\n    uint8_t shifted_value = combined_value & 0x0F;\n    uint8_t* data_ptr = data + index + 3;\n    uint16_t* array_ptr = array + (combined_value >> 0x14);\n    if (*data_ptr == 0xFF) {\n        *array_ptr |= (uint16_t)(1 << shifted_value);\n    }\n    else {\n        *array_ptr &= ~(uint16_t)(1 << shifted_value);\n    }\n    *(data + 0x49) = 6;\n    PTR_0800076c(data);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "update_value_at_index_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "process_data_and_execute_080047c0",
                "param_1": "data",
                "iVar1": "bit_count",
                "process_input_and_execute_08005760": "process_input_and_execute",
                "count_bits_set_08004678": "count_bits_set"
            },
            "code": "void process_data_and_execute_080047c0(int data)\n{\n  int bit_count;\n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  process_input_and_execute();\n  bit_count = count_bits_set();\n  if (*(int *)(PTR_DAT_080047ec + bit_count * 0x14 + 0xc) != 0) {\n    process_data_and_execute_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "process_data_and_execute_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_memory_block_08005374",
                "param_1": "memory_address",
                "param_2": "block_size",
                "puVar1": "memory_block_address",
                "iVar2": "memory_block_size"
            },
            "code": "undefined4 * allocate_and_initialize_memory_block_08005374(undefined4 memory_address, int block_size)\n{\n  undefined4 *memory_block_address;\n  int memory_block_size = (block_size - 1) * 0x68;\n  memory_block_address = (undefined4 *)allocate_memory_block_08004978(memory_address, memory_block_size + 0x74);\n  if (memory_block_address != (undefined4 *)0x0) {\n    *memory_block_address = 0;\n    memory_block_address[1] = block_size;\n    memory_block_address[2] = memory_block_address + 3;\n    set_memory_to_value_080048cc(memory_block_address + 3, 0, memory_block_size);\n  }\n  return memory_block_address;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_byte_sequence_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = extract_data_from_binary_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08003750(int input_num){\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "check_valid_input_080014ec",
                "param_1": "ptr_input",
                "param_2": "input_array",
                "param_3": "array_size",
                "param_4": "ptr_output",
                "uVar1": "result",
                "puVar2": "ptr_first_element"
            },
            "code": "int check_valid_input_080014ec(uint **ptr_input, uint *input_array, int array_size, uint *ptr_output){\n    int result;\n    uint *ptr_first_element = *ptr_input;\n    if (*(char *)((int)ptr_input + 0x3d) == '(') {\n        if (input_array == NULL || array_size == 0 || *(char *)(ptr_input + 0xf) == '\\x01') {\n            result = 1;\n        }\n        else {\n            *(undefined *)(ptr_input + 0xf) = 1;\n            if ((*ptr_first_element & 1) == 0) {\n                *ptr_first_element |= 1;\n            }\n            **ptr_input &= 0xfffff7ff;\n            *(undefined *)((int)ptr_input + 0x3d) = 0x2a;\n            *(undefined *)((int)ptr_input + 0x3e) = 0x20;\n            ptr_input[16] = NULL;\n            ptr_input[9] = input_array;\n            *(short *)((int)ptr_input + 0x2a) = (short)array_size;\n            ptr_input[11] = ptr_output;\n            *(undefined2 *)(ptr_input + 10) = *(undefined2 *)((int)ptr_input + 0x2a);\n            *(undefined *)(ptr_input + 0xf) = 0;\n            (*ptr_input)[1] |= 0x700;\n            result = 0;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "check_valid_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_node_080048dc",
                "param_1": "result",
                "param_2": "node_size",
                "param_3": "unk1",
                "param_4": "unk2",
                "puVar1": "head_ptr",
                "piVar2": "tmp_ptr",
                "extraout_r1": "prev_node_ptr",
                "ppiVar3": "prev_node_ptr",
                "ppiVar4": "next_node_ptr",
                "ppiVar5": "prev_prev_node_ptr",
                "ppiVar6": "head_ptr",
                "ppiVar7": "node_ptr",
                "bVar8": "is_equal"
            },
            "code": "void insert_node_080048dc(int *result, int node_size, int unk1, int unk2)\n{\n  bool is_equal;\n  int **prev_node_ptr;\n  int **node_ptr;\n  int **next_node_ptr;\n  int **prev_prev_node_ptr;\n  int **head_ptr;\n  if (node_size == 0) {\n    return;\n  }\n  node_ptr = (int **)(node_size + -4);\n  if (*(int *)(node_size + -4) < 0) {\n    node_ptr = (int **)((int)node_ptr + *(int *)(node_size + -4));\n  }\n  do_nothing_0800557c();\n  head_ptr = *(int ***)PTR_DAT_08004974;\n  if (head_ptr == (int **)0x0) {\n    node_ptr[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08004974 = node_ptr;\n    prev_node_ptr = (int **)extraout_r1;\n    next_node_ptr = (int **)PTR_DAT_08004974;\n  }\n  else if (node_ptr < head_ptr) {\n    prev_node_ptr = (int **)*node_ptr;\n    next_node_ptr = (int **)((int)node_ptr + (int)prev_node_ptr);\n    is_equal = head_ptr == next_node_ptr;\n    if (is_equal) {\n      next_node_ptr = (int **)*head_ptr;\n      head_ptr = (int **)head_ptr[1];\n    }\n    node_ptr[1] = (int *)head_ptr;\n    if (is_equal) {\n      next_node_ptr = (int **)((int)next_node_ptr + (int)prev_node_ptr);\n      *node_ptr = (int *)next_node_ptr;\n    }\n    *(int ***)PTR_DAT_08004974 = node_ptr;\n  }\n  else {\n    do {\n      prev_prev_node_ptr = head_ptr;\n      next_node_ptr = (int **)prev_prev_node_ptr[1];\n      if (next_node_ptr == (int **)0x0) break;\n      head_ptr = next_node_ptr;\n    } while (next_node_ptr <= node_ptr);\n    prev_node_ptr = (int **)*prev_prev_node_ptr;\n    if ((int **)((int)prev_prev_node_ptr + (int)prev_node_ptr) == node_ptr) {\n      node_ptr = (int **)((int)node_ptr + (int)*prev_node_ptr);\n      *prev_prev_node_ptr = (int *)node_ptr;\n      if (next_node_ptr == (int **)((int)prev_prev_node_ptr + (int)node_ptr)) {\n        piVar2 = *next_node_ptr;\n        next_node_ptr = (int **)next_node_ptr[1];\n        prev_prev_node_ptr[1] = (int *)next_node_ptr;\n        node_ptr = (int **)((int)node_ptr + (int)piVar2);\n        *prev_prev_node_ptr = (int *)node_ptr;\n      }\n    }\n    else if (node_ptr < (int **)((int)prev_prev_node_ptr + (int)prev_node_ptr)) {\n      *result = 0xc;\n    }\n    else {\n      node_ptr = (int **)((int)node_ptr + (int)*node_ptr);\n      is_equal = next_node_ptr == node_ptr;\n      if (is_equal) {\n        node_ptr = (int **)*next_node_ptr;\n        next_node_ptr = (int **)next_node_ptr[1];\n      }\n      prev_node_ptr = (int **)next_node_ptr;\n      if (is_equal) {\n        node_ptr = (int **)((int)node_ptr + (int)*prev_node_ptr);\n        *node_ptr = (int *)node_ptr;\n      }\n      prev_prev_node_ptr[1] = (int *)node_ptr;\n    }\n  }\n  do_nothing_0800557e(result,prev_node_ptr,next_node_ptr,unk2);\n  return;\n}\n",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "insert_node_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_if_flag_set_08003754",
                "param_1": "input",
                "iVar1": "subtracted_input"
            },
            "code": "void execute_callback_if_flag_set_08003754(int input){\n  int subtracted_input = subtract_four_from_input_08003750();\n  if ((*(code **)(subtracted_input + 0x48) != (code *)0x0) && (*(char *)(input + 0x18) == '\\x01')) {\n    (**(code **)(subtracted_input + 0x48))(subtracted_input,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_flags_08001578",
                "param_1": "flags_ptr",
                "puVar1": "flags",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t set_flags_08001578(uint32_t **param_1)\n{\n  uint32_t *flags = *param_1;\n  if (*(char *)((int)param_1 + 0x3d) != ' ') {\n    return 2;\n  }\n  *(char *)((int)param_1 + 0x3d) = '(';\n  if ((*flags & 1) == 0) {\n    *flags |= 1;\n  }\n  **param_1 |= 0x400;\n  (*param_1)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": false,
            "current_name": "set_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "flag",
                "param_2": "value",
                "DAT_0800485c": "some_data",
                "CONCAT44": "combine_values"
            },
            "code": "long long calculate_result_08004844(uint32_t flag, uint32_t value)\n{\n    if (DAT_0800485c != 0) {\n        return combine_values(flag, 2);\n    }\n    return (unsigned long long)value << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_at_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10",
                "DAT_080031f8": "data_1"
            },
            "code": "undefined4 get_data_at_index_0800318c(int index)\n{\n    switch(index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_at_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_and_execute_data_080047d0",
                "iVar1": "num_bits_set",
                "count_bits_set_08004678": "count_bits_set",
                "PTR_DAT_080047ec": "data_pointer",
                "process_data_and_execute_080047c0": "execute_data"
            },
            "code": "void check_and_execute_data_080047d0(void)\n{\n  int num_bits_set = count_bits_set();\n  if (*(int *)(PTR_DAT_080047ec + num_bits_set * 0x14 + 0xc) != 0)\n  {\n    execute_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_and_execute_data_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "code": "void infinite_loop_080040f8(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "infinite_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "get_offset_0800500c",
                "param_1": "result",
                "param_2": "input_value",
                "puVar1": "pointer_to_value",
                "iVar2": "offset"
            },
            "code": "void get_offset_0800500c(int *result, undefined4 input_value)\n{\n  undefined *pointer_to_value = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  int offset = get_offset_0800500c_08004094(input_value);\n  if ((offset == -1) && (*(int *)pointer_to_value != 0)) {\n    *result = *(int *)pointer_to_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "get_offset_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_params_080023b4",
                "in_r3": "input_parameter_1",
                "uVar1": "mask",
                "uVar2": "param2",
                "DAT_0800247c": "PTR_DAT_0800247c",
                "DAT_08002480": "DAT_CONST_08002480",
                "DAT_08002484": "DAT_CONST_08002484",
                "get_params_080002d0": "get_params",
                "CARRY4": "carry4"
            },
            "code": "uint calculate_params_080023b4(void)\n{\n  uint mask = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (mask == 4) {\n    return DAT_08002484;\n  }\n  if (mask != 8) {\n    return DAT_08002480;\n  }\n  uint param1 = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  uint param2 = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n  uint param3 = (((uint)(param2 * 0x20 < param2) * -0x3f - (uint)(param2 * 0x7c0 < param2 * 0x1f)) * 8 + (uint)CARRY4(param2 * 0x3d08,param2)) * 0x400 | param2 * 0x3d09 >> 0x16;\n  uint freq = (uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e;\n  uint param4 = get_params_080002d0(param2 * 16000000, param3, param1, 0, in_r3);\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) != 0) {\n    param4 = get_params_080002d0(param2 * 8000000, param3 * 2, param1, 0, in_r3);\n  }\n  return param4 / ((freq + 1) * 2);\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_params_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_data_if_flag_set_080011a4",
                "param_1": "flag",
                "*(uint *)(DAT_080011bc + 0x14)": "data_ptr",
                "check_and_execute_data_080047d0": "check_and_execute_data"
            },
            "code": "void update_data_if_flag_set_080011a4(uint flag){\n  uint* *(uint *)(DAT_080011bc + 0x14) = (uint*)(DAT_080011bc + 0x14);\n  if((**(uint *)(DAT_080011bc + 0x14) & flag) != 0){\n    **(uint *)(DAT_080011bc + 0x14) = flag;\n    check_and_execute_data_080047d0();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_data_if_flag_set_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "process_input_08001e68_08001e68",
                "param_1": "input_data",
                "puVar2": "pointer_1",
                "uVar3": "value_1",
                "uVar4": "value_2",
                "cVar1": "character",
                "execute_command_08001684": "execute_command_08001684",
                "process_input_08001ab0": "process_input_08001ab0",
                "DAT_08001f38": "FLAG_1",
                "0x100": "0x100",
                "0x10200": "FLAG_2",
                "0x10400": "FLAG_3",
                "0x10800": "FLAG_4"
            },
            "code": "void process_input_08001e68_08001e68(uint **input_data)\n{\n    char character;\n    uint *pointer_1 = *input_data;\n    uint value_1 = pointer_1[5];\n    uint value_2 = pointer_1[1];\n\n    if (((value_1 & DAT_08001f38) != 0) && ((value_2 & 0x100) != 0)) {\n        input_data[0x10] = (uint *)((uint)input_data[0x10] | 1);\n        pointer_1[5] = 0xfffffeff;\n    }\n\n    if (((value_1 & FLAG_2) != 0) && ((value_2 & 0x100) != 0)) {\n        input_data[0x10] = (uint *)((uint)input_data[0x10] | 2);\n        (*input_data)[5] = 0xfffffdff;\n    }\n\n    if (((value_1 & FLAG_3) != 0) && ((value_2 & 0x100) != 0)) {\n        character = *(char *)((int)input_data + 0x3d);\n        if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((character == '!' || (character == ')')) || ((character == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n            execute_command_08001684(input_data);\n        }\n        else {\n            input_data[0x10] = (uint *)((uint)input_data[0x10] | 4);\n            if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n                **input_data = **input_data | 0x200;\n            }\n            (*input_data)[5] = 0xfffffbff;\n        }\n    }\n\n    if (((value_1 & FLAG_4) != 0) && ((value_2 & 0x100) != 0)) {\n        input_data[0x10] = (uint *)((uint)input_data[0x10] | 8);\n        (*input_data)[5] = 0xfffff7ff;\n    }\n\n    if (input_data[0x10] != (uint *)0x0) {\n        process_input_08001ab0(input_data);\n    }\n    return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001e68_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "ptr1"
            },
            "code": "undefined4 process_data_080019a0(uint **data)\n{\n  uint *ptr1;\n  short data_index = *(short *)((int)data + 0x2a);\n  if (data_index == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    ptr1 = data[9];\n    data[9] = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = data_index - 1;\n  }\n  else if (data_index == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    ptr1 = data[9];\n    data[9] = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = data_index - 1;\n  }\n  else if (data_index == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    ptr1 = data[9];\n    data[9] = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = data_index - 1;\n    ptr1 = data[9];\n    data[9] = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = data_index - 1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing1();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing2();\n    }\n  }\n  else {\n    ptr1 = data[9];\n    data[9] = (uint *)((int)ptr1 + 1);\n    *(char *)ptr1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = data_index - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_value_found_08003f24",
                "uVar1": "value_index",
                "find_index_of_value_08003f00": "find_index_of_value",
                "PTR_DAT_08003f40": "FUNCTION_PTRS_START",
                "PTR_DAT_08003f44": "FUNCTION_ARGS_START",
                "code": "function_ptr",
                "undefined4": "function_arg"
            },
            "code": "void execute_function_if_value_found_08003f24(void)\n{\n  uint value_index = find_index_of_value();\n  if (value_index < 10) {\n    void (*function_ptr)(int) = *(void (**)(int))(PTR_DAT_08003f40 + value_index * 4);\n    int function_arg = *(int *)(PTR_DAT_08003f44 + value_index * 4);\n    function_ptr(function_arg);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_value_found_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "calculate_result_080046b4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_ptr",
                "PTR_DAT_08004754": "PTR_DATA",
                "PTR_LAB_0800468c_1_0800475c": "PTR_LABEL_1",
                "PTR_DAT_08004758": "PTR_DATA_2"
            },
            "code": "void calculate_result_080046b4(int input1, int input2, undefined4 param3, undefined4 param4) {\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08004754;\n  if (input1 != 1) {\n    return;\n  }\n  if (input2 == 0xffff) {\n    *PTR_DAT_08004754 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    calculate_result_080046b4_from_params(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, data_ptr, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "data_ptr"
            },
            "code": "int process_data_0800160e(int *data)\n{\n    char current_char;\n    undefined *data_ptr;\n\n    current_char = *(char *)((int)data + 0x3d);\n    if (*(short *)((int)data + 0x2a) != 0) {\n        data_ptr = (undefined *)data[9];\n        data[9] = (int)(data_ptr + 1);\n        *data_ptr = (char)*(undefined4 *)(*data + 0x10);\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n            data[0xc] = 0x22;\n            *(undefined *)((int)data + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_pointer_value_08000e18",
                "PTR_DAT_08000e28": "pointer_data_1",
                "PTR_DAT_08000e2c": "pointer_data_2"
            },
            "code": "void update_pointer_value_08000e18(void)\n{\n  uint8_t* byte_ptr = (uint8_t*)PTR_DAT_08000e2c;\n  uint32_t* int_ptr = (uint32_t*)PTR_DAT_08000e28;\n  uint32_t int_value = *int_ptr;\n  uint8_t byte_value = *byte_ptr;\n  uint32_t sum = int_value + byte_value;\n  *int_ptr = sum;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "update_pointer_value_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "set_bit_at_position_and_update_data_08003486",
                "param_1": "bit_position",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "bit_set",
                "local_24": "bit_mask",
                "local_20": "local_3",
                "local_1c": "local_4",
                "local_18": "local_2"
            },
            "code": "void set_bit_at_position_and_update_data_08003486(uint bit_position, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t bit_mask = 1 << (bit_position & 0xf) & 0xffff;\n    uint32_t bit_set = set_bit_080031fc((bit_position << 0x18) >> 0x1c);\n    uint32_t local_2 = 2;\n    uint32_t local_3 = param_2;\n    uint32_t local_4 = param_3;\n    update_data_08000fb4(bit_set, &bit_mask);\n    return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_and_update_data_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "process_data_08005662",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "is_error",
                "index": "index"
            },
            "code": "void process_data_08005662(undefined4 data, int data_info) {\n    int result;\n    ushort flags;\n    bool is_error;\n    int index = *(short *)(data_info + 0xe);\n  \n    result = zero_return_function(data, index);\n    is_error = result == -1;\n  \n    if (is_error) {\n        flags = *(ushort *)(data_info + 0xc) & 0xefff;\n    }\n    else {\n        *(int *)(data_info + 0x54) = result;\n        flags = *(ushort *)(data_info + 0xc) | 0x1000;\n    }\n    *(ushort *)(data_info + 0xc) = flags;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "validate_input_and_update_080042ac",
                "param_1": "input_address",
                "iVar1": "is_valid",
                "uVar2": "updated_index",
                "local_9": "input_value"
            },
            "code": "void validate_input_and_update_080042ac(int input_address)\n{\n    int is_valid;\n    ushort updated_index;\n    undefined input_value;\n    is_valid = is_input_valid_and_sum_odd_08003e18(input_address, &input_value);\n    if ((is_valid == 0) && (updated_index = *(short *)(input_address + 100) + 1U & 0x3f, updated_index != *(ushort *)(input_address + 0x66))) {\n        *(undefined *)(*(int *)(input_address + 0x60) + (uint)*(ushort *)(input_address + 100)) = input_value;\n        *(ushort *)(input_address + 100) = updated_index;\n    }\n    return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_and_update_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "PTR_DAT_08002a2c": "counter_ptr",
                "PTR_DAT_08002a30": "state_ptr"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *PTR_DAT_08002a2c;\n  uint32_t *PTR_DAT_08002a30;\n\n  flag_ptr = input[11];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    PTR_DAT_08002a2c = input[9];\n    PTR_DAT_08002a30 = *input;\n    if (*(int16_t *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        PTR_DAT_08002a30[1] = PTR_DAT_08002a30[1] & 0xfffff8ff;\n        *PTR_DAT_08002a30 = *PTR_DAT_08002a30 | 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        PTR_DAT_08002a30[1] = PTR_DAT_08002a30[1] & 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      flag_ptr = input[9];\n      input[9] = (uint32_t *)((int)flag_ptr + 1);\n      PTR_DAT_08002a30[4] = (uint32_t)*(char *)flag_ptr;\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flag_value",
                "DAT_08000f48": "flag_ptr"
            },
            "code": "void set_flag_08000f2c(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_at_index_08000ec4",
                "param_1": "index",
                "DAT_08000edc": "data_array"
            },
            "code": "void set_bit_at_index_08000ec4(uint index) {\n  if (index >= 0) {\n    int* data_ptr = (int *)(DAT_08000edc + (index >> 5) * 4);\n    int bit_mask = 1 << (index & 0x1f);\n    *data_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "calculate_value_if_not_zero_08004338",
                "DAT_0800435c": "data_not_zero",
                "PTR_DAT_08004360": "value_pointer",
                "calculate_value_at_offset_08004240": "calculate_value_at_offset"
            },
            "code": "void calculate_value_if_not_zero_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    calculate_value_at_offset(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_software_interrupt_080005e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_software_interrupt_080005e0(void)\n{\n  software_interrupt(SYSTEM_CALL_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "execute_interrupt_call_080005e4",
                "param_1": "register_value",
                "param_2": "unused_parameter",
                "param_3": "unused_parameter",
                "param_4": "interrupt_value",
                "uVar1": "interrupt_status"
            },
            "code": "int execute_interrupt_call_080005e4(int param_1, int param_4)\n{\n    int interrupt_status;\n    if (*(int *)PTR_DAT_080005fc != 0) {\n        return 0;\n    }\n    interrupt_status = trigger_software_interrupt_080005e0(1, param_1, 0, 0, param_4);\n    return interrupt_status;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "execute_interrupt_call_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "update_crc_and_extract_bits_0800076c",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "bit_count",
                "param_4": "bit_offset",
                "uVar1": "calculated_crc",
                "iVar2": "result",
                "uVar3": "current_crc"
            },
            "code": "void update_crc_and_extract_bits_0800076c(int **data_ptr, uint data_length, int bit_count, int bit_offset)\n{\n  uint current_crc = (uint)*(byte *)((int)data_ptr + 0x49);\n  uint calculated_crc = calculate_crc16(data_ptr, current_crc, bit_count, bit_offset, bit_offset);\n  *(char *)((int)data_ptr + current_crc + 9) = (char)((ushort)calculated_crc >> 8);\n  current_crc = current_crc + 1 & 0xff;\n  *(char *)((int)data_ptr + current_crc + 9) = (char)calculated_crc;\n  *(char *)((int)data_ptr + 0x49) = (char)current_crc + '\\x01';\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    extract_and_update_bit(*(byte *)((int)data_ptr + 6),1);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    (**(code **)(**data_ptr + 4))(*data_ptr,(int)data_ptr + 9,*(undefined *)((int)data_ptr + 0x49));\n  }\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    extract_and_update_bit(*(byte *)((int)data_ptr + 6),0);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    do {\n      int result = (**(code **)(**data_ptr + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  int value = get_value_from_pointer_wrapper();\n  data_ptr[0x17] = (int *)(value + (uint)*(ushort *)((int)data_ptr + 0x56));\n  *(short *)((int)data_ptr + 0x52) = *(short *)((int)data_ptr + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "update_crc_and_extract_bits_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "get_value_at_index_08004460",
                "param_1": "array_index",
                "param_2": "index",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08004460(int array_index, uint16_t index){\n\tuint16_t value;\n\tif (index < 0x60) {\n\t\tvalue = *(uint16_t *)(PTR_DAT_08004478 + index * 2);\n\t}\n\telse {\n\t\tvalue = 0xffff;\n\t}\n\t*(uint16_t *)(array_index + 300) = value;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "update_value_at_address_08001198",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift_amount",
                "*(int *)(param_1 + 0x18)": "value_at_address"
            },
            "code": "void update_value_at_address_08001198(int address, int value, int shift_amount)\n{\n  if (shift_amount == 0) {\n    *(int *)(address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "update_value_at_address_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "extract_bit_08003138",
                "param_1": "value",
                "param_2": "bit_position",
                "PTR_": "ptr",
                "DAT_": "DAT_08003138"
            },
            "code": "uint extract_bit_08003138(uint value, int bit_position)\n{\n    uint* PTR_ = (uint*)(DAT_ + ((value << 0x18) >> 0x1c) * 4);\n    uint masked_value = *PTR_ >> (value & 0xf) & 1;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "extract_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_in_uint_array_08002848",
                "param_1": "uint_array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "PTR_": "uint_array_ptr",
                "DAT_": "mask, value_to_set"
            },
            "code": "void set_bit_in_uint_array_08002848(uint_array, bit_index, bit_value) {\n  uint* PTR_ = (uint*)uint_array;\n  uint mask = ~(1 << (bit_index & 0xff));\n  PTR_[0x20] = PTR_[0x20] & mask;\n  uint value_to_set = bit_value << (bit_index & 0xff);\n  PTR_[0x20] = PTR_[0x20] | value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "get_sum_of_39_and_3a_offsets_0800312c",
                "param_1": "ptr_param"
            },
            "code": "byte get_sum_of_39_and_3a_offsets_0800312c(byte *ptr_param){\n  byte sum = *(ptr_param + 0x3a) | *(ptr_param + 0x39);\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": false,
            "current_name": "get_sum_of_39_and_3a_offsets_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "set_bit_and_check_080028f0",
                "param_1": "bits_array",
                "param_2": "index",
                "puVar1": "bits_ptr"
            },
            "code": "uint set_bit_and_check_080028f0(uint **bits_array, uint index)\n{\n  uint *bits_ptr = *bits_array;\n  set_bit(bits_ptr, index, 0);\n  if (((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\n    bits_ptr[17] = bits_ptr[17] & 0xffff7fff;\n  }\n  bits_ptr = *bits_array;\n  if (((bits_ptr[8] & 0x1111) == 0) && ((bits_ptr[8] & 0x444) == 0)) {\n    *bits_ptr = *bits_ptr & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_data"
            },
            "code": "get_value_from_pointer_08000e30() {\n  return *(undefined4 *)PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "<original_function_name>": "FUN_08000f56",
                "param_1": "ptr_param",
                "*(undefined *)(param_1 + 4)": "*(unsigned char *)(ptr_param + 4)",
                "*(undefined4 *)(param_1 + 0x10)": "*(int *)(ptr_param + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(unsigned char *)(ptr_param + 5)",
                "FUN_08000f56": "set_zero_and_clear_bit_at_31_of_uint32_08000f56"
            },
            "code": "int set_zero_and_clear_bit_at_31_of_uint32_08000f56(int ptr_param){\n                      if (ptr_param != 0) {\n                        *(unsigned char *)(ptr_param + 4) = 2;\n                        clear_bit_at_31_of_uint32_080033c8();\n                        *(int *)(ptr_param + 0x10) = 0;\n                        *(unsigned char *)(ptr_param + 4) = 0;\n                        *(unsigned char *)(ptr_param + 5) = 0;\n                        return 0;\n                      }\n                      return 1;\n                    }",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_zero_and_clear_bit_at_31_of_uint32_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "read_and_modify_memory_0800295c",
                "param_1": "memory_data",
                "pbVar2": "memory_value",
                "sVar1": "remaining_iterations",
                "memory_data[8]": "current_position",
                "*(char *)((int)param_1 + 0x39)": "character",
                "param_1[2]": "memory_data[2]",
                "*(uint *)(*param_1 + 4)": "memory_address",
                "*(ushort *)param_1[8]": "memory_value",
                "param_1[4]": "memory_data[4]",
                "param_1[8]": "current_position",
                "*(uint *)(*param_1 + 0xc)": "memory_flag",
                "*(short *)((int)param_1 + 0x26)": "remaining_iterations"
            },
            "code": "int read_and_modify_memory_0800295c(int *memory_data){\n  int current_position = memory_data[8];\n  char character = *(char *)(memory_data + 0x39);\n  if (character != '!') {\n    return 2;\n  }\n  if (memory_data[2] == 0x1000) {\n    uint *memory_address = (uint *)(*memory_data + 4);\n    ushort *memory_value = (ushort *)current_position;\n    *memory_address = *memory_value & 0x1ff;\n    if (memory_data[4] == 0) {\n      memory_data[8] = current_position + 2;\n    }\n    else {\n      memory_data[8] = current_position + 1;\n    }\n  }\n  else {\n    uint *memory_address = (uint *)(*memory_data + 4);\n    byte *memory_value = (byte *)current_position;\n    *memory_address = (uint)*memory_value;\n    memory_data[8] = (int)(memory_value + 1);\n  }\n  short remaining_iterations = *(short *)(memory_data + 0x26) - 1;\n  *(short *)(memory_data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    uint *memory_flag = (uint *)(*memory_data + 0xc);\n    *memory_flag = *memory_flag & 0xffffff7f;\n    *memory_flag = *memory_flag | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "read_and_modify_memory_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "get_value_index_08003380",
                "param_1": "value",
                "param_2": "data",
                "param_3": "len",
                "param_4": "start_index",
                "iVar1": "value_index"
            },
            "code": "int get_value_index_08003380(uint32_t value, uint32_t* data, uint32_t len, uint32_t start_index, uint32_t end_index)\n{\n  int value_index = get_index_of_value_0800354a(value, data, len, start_index, end_index);\n  if ((value_index << 12U) >> 27U != 2) {\n    return 0;\n  }\n  return 16;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "get_value_index_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_bit_array_08004110",
                "param_1": "index",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "param_4": "bit_array",
                "iVar1": "bit_extracted",
                "puVar2": "array_ptr",
                "iVar3": "value",
                "PTR_DAT_080041a8": "bit_array",
                "PTR_DAT_080041ac": "array_ptr",
                "PTR_DAT_080041b0": "array_ptr + 4",
                "PTR_DAT_080041b4": "array_ptr + 4",
                "PTR_DAT_080041b8": "array_ptr + 8"
            },
            "code": "void update_bit_array_08004110(uint index, uint bit_position, uint bit_value, uint* PTR_DAT_080041a8){\n  int value = -1;\n  uint* PTR_DAT_080041ac = PTR_DAT_080041a8;\n  if (index < 0x60) {\n    value = (int)*(short *)(PTR_DAT_080041ac + index * 2);\n    PTR_DAT_080041ac = PTR_DAT_080041a8;\n  }\n  if (value != -1) {\n    int bit_extracted = extract_bit(value, PTR_DAT_080041ac, bit_value, PTR_DAT_080041a8);\n    if (bit_extracted != 0) {\n      int short_array_index = find_short_in_array(value, PTR_DAT_080041ac);\n      if (short_array_index == 0) {\n        short_array_index = find_short_in_array(value, PTR_DAT_080041b0);\n        if (short_array_index != 0) {\n          set_flags_based_on_value(value);\n        }\n      }\n      else {\n        clear_bit_at_index_if_not_minus_one(value);\n      }\n      update_bit(value, PTR_DAT_080041ac);\n    }\n    switch(bit_position) {\n    case 0:\n      set_bit_at_position_and_update_data(value, 0);\n      break;\n    case 1:\n      set_bit_at_position_and_update_data(value, 1, 0);\n      break;\n    case 2:\n      set_bit_at_position_and_update_data(value, 0, 1);\n      break;\n    case 3:\n      set_bit_at_position_and_update_data(value, 0, 2);\n    }\n    update_bit_in_array(value, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "update_bit_array_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_param_and_set_values_08000ee0",
                "param_1": "input_param",
                "puVar1": "data_ptr"
            },
            "code": "int check_param_and_set_values_08000ee0(int input_param) {\n  int *data_ptr;\n  data_ptr = PTR_DAT_08000f04;\n  if (input_param - 1U < 0x1000000) {\n    data_ptr[1] = input_param - 1U;\n    *(unsigned char *)(PTR_DAT_08000f08 + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_param_and_set_values_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data_ptr",
                "pbVar2": "data_byte_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_data_080015bc(int *data_ptr) {\n    char current_char = *(char *)((int)data_ptr + 0x3d);\n    if (*(short *)((int)data_ptr + 0x2a) != 0) {\n        byte *data_byte_ptr = (byte *)data_ptr[9];\n        data_ptr[9] = (int)(data_byte_ptr + 1);\n        *(uint *)(*data_ptr + 0x10) = (uint)*data_byte_ptr;\n        *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n        if ((*(short *)((int)data_ptr + 0x2a) == 0) && (current_char == ')')) {\n            *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xfffffbff;\n            data_ptr[0xc] = 0x21;\n            *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n            do_nothing();\n        }\n        return 0;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing_08000f4c();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "data_address",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "data_type",
                "*(undefined *)(param_1 + 4)": "*(char *)(data_address + 4)",
                "*(char *)(param_1 + 5)": "*(char *)(data_address + 5)",
                "*(undefined *)(param_1 + 6)": "*(char *)(data_address + 6)",
                "*(undefined2 *)(param_1 + 0x56)": "*(short *)(data_address + 0x56)"
            },
            "code": "void set_data_0800066c(int data_address, char data, int data_length, char data_type) {\n  *(char *)(data_address + 4) = data;\n  if (data_length > 3) {\n    data_length = 0;\n  }\n  *(char *)(data_address + 5) = (char)data_length;\n  *(char *)(data_address + 6) = data_type;\n  *(short *)(data_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "set_flag_and_update_data_080042e8",
                "param_1": "flag_position",
                "param_2": "flag_value",
                "iVar3": "incremented_value",
                "bVar1": "incremented_byte",
                "bVar2": "masked_byte",
                "is_valid_offset_08003df4": "is_valid_offset",
                "update_data_08003eac": "update_data"
            },
            "code": "int set_flag_and_update_data_080042e8(int flag_position, char flag_value) {\n  *(undefined *)(flag_position + 0x10) = 1;\n  int incremented_value = *(ushort *)(flag_position + 0x140) + 1;\n  byte incremented_byte = (byte)incremented_value;\n  byte masked_byte = incremented_byte & 0x7f;\n  if (incremented_value == 0) {\n    masked_byte = -(-incremented_byte & 0x7f);\n  }\n  while (*(ushort *)(flag_position + 0x142) == (ushort)masked_byte);\n  *(undefined *)(*(int *)(flag_position + 0x13c) + (uint)*(ushort *)(flag_position + 0x140)) = flag_value;\n  *(ushort *)(flag_position + 0x140) = (ushort)masked_byte;\n  int is_valid_offset = is_valid_offset_08003df4(flag_position + 0xd4);\n  if (is_valid_offset == 0) {\n    update_data_08003eac(flag_position + 0xd4,PTR_LAB_0800420c_1_08004334);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "set_flag_and_update_data_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_command_080038d0",
                "param_1": "input_value",
                "iVar1": "subtracted_value",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "*(code **)(iVar1 + 0x60)": "function_ptr",
                "*(char *)(iVar1 + 0x5e)": "second_char",
                "*(char *)(iVar1 + 0x2c)": "third_char",
                "set_flags_08001578": "set_flags"
            },
            "code": "void execute_command_080038d0(int input_value)\n{\n  int subtracted_value = subtract_four_from_input();\n  code* function_ptr = *(code**)(subtracted_value + 0x60);\n  char second_char = *(char*)(subtracted_value + 0x5e);\n  char third_char = *(char*)(subtracted_value + 0x2c);\n  if ((function_ptr != NULL) && (second_char == 0x01) && (third_char != ' ')) {\n    (*function_ptr)(subtracted_value + 0x68);\n  }\n  set_flags(input_value);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_command_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c"
            },
            "code": "int return_one_0800410c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_shifted_value_from_pointer_0800260c",
                "uVar1": "value",
                "PTR_DAT_08002628": "shift_amount",
                "DAT_08002624": "data_pointer"
            },
            "code": "unsigned int get_shifted_value_from_pointer_0800260c() {\n    unsigned int value = get_value_from_pointer();\n    unsigned int PTR_DAT_08002628 = (*(int *)(DAT_08002624 + 8) << 16) >> 29;\n    unsigned int shifted_value = value >> PTR_DAT_08002628;\n    return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_value_at_offset_08004240",
                "param_1": "offset",
                "*(short *)(param_1 + 0x138)": "value_at_offset",
                "*(short *)(param_1 + 0x13a)": "value_at_offset_2",
                "calculated_value": "calculated_value"
            },
            "code": "ushort calculate_value_at_offset_08004240(int offset)\n{\n    ushort value_at_offset = (*(ushort *)(offset + 0x138) + 0x40);\n    ushort value_at_offset_2 = *(ushort *)(offset + 0x13a);\n    ushort calculated_value = (value_at_offset - value_at_offset_2) & 0x3f;\n    return calculated_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "extract_and_update_bit_080041bc",
                "param_1": "index",
                "param_2": "data",
                "param_3": "bit_position",
                "param_4": "ptr_to_data",
                "iVar1": "extraction_result",
                "uVar2": "value_index",
                "puVar3": "ptr_to_data_array",
                "uVar4": "extracted_value",
                "PTR_DAT_080041fc": "DAT_080041fc",
                "PTR_DAT_08004200": "PTR_DAT_08004200",
                "get_data_at_index_0800318c": "get_data_at_index_0800318c",
                "update_value_at_address_if_nonzero_080034b6": "update_value_at_address_if_nonzero_080034b6",
                "extract_bit_08003138": "extract_bit_08003138"
            },
            "code": "void extract_and_update_bit_080041bc(uint index, uint16_t data, uint8_t bit_position, void* ptr_to_data)\n{\n  int extraction_result;\n  uint extracted_value;\n  uint16_t* ptr_to_data_array;\n  uint32_t data_index = (index << 0x18) >> 0x1c;\n  uint16_t bit_mask = 1 << (index & 0xf) & 0xffff;\n\n  if (index < 0x60) {\n    ptr_to_data_array = (uint16_t*)(&PTR_DAT_080041fc);\n    extracted_value = ptr_to_data_array[index];\n  }\n  else {\n    extracted_value = 0xffffffff;\n    ptr_to_data_array = (uint16_t*)ptr_to_data;\n  }\n\n  if ((extracted_value != 0xffffffff) &&\n     (extraction_result = extract_bit_08003138(extracted_value, PTR_DAT_08004200, bit_position, ptr_to_data_array, ptr_to_data), extraction_result != 0)) {\n    uint32_t value_index = get_data_at_index_0800318c(data_index);\n    update_value_at_address_if_nonzero_080034b6(value_index, bit_mask, data);\n  }\n  return;\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "extract_and_update_bit_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x134)": "start_ptr",
                "*(int *)(param_1 + 0x13c)": "end_ptr",
                "*(undefined2 *)(param_1 + 0x138)": "short1",
                "*(undefined2 *)(param_1 + 0x13a)": "short2",
                "*(undefined2 *)(param_1 + 0x140)": "short3",
                "*(undefined2 *)(param_1 + 0x142)": "short4"
            },
            "code": "void initialize_struct_08004364(int struct_ptr) {\n    int* start_ptr = struct_ptr + 0x134;\n    int* end_ptr = struct_ptr + 0x13c;\n    *(start_ptr) = struct_ptr + 0x11;\n    *(end_ptr) = struct_ptr + 0x51;\n    *(short*)(struct_ptr + 0x138) = 0;\n    *(short*)(struct_ptr + 0x13a) = 0;\n    *(short*)(struct_ptr + 0x140) = 0;\n    *(short*)(struct_ptr + 0x142) = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "initialize_data_08000682",
                "param_1": "input_parameter"
            },
            "code": " \n\nvoid initialize_data_08000682() {\n  set_data();\n}\n",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "initialize_data_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_param_bits_08000e3c",
                "param_1": "param",
                "PTR_DAT_08000e5c": "ptr",
                "DAT_08000e5c": "ptr_base",
                "mask": "mask",
                "*PTR_DAT_08000e5c": "*ptr",
                "param_bits": "param_bits"
            },
            "code": "void set_param_bits_08000e3c(uint8_t param) {\n    uint32_t* PTR_DAT_08000e5c = (uint32_t*)(DAT_08000e5c + 0xc);\n    uint32_t mask = (*PTR_DAT_08000e5c & 0xf8ff) | 0x5fa0000;\n    uint32_t param_bits = (param & 7) << 8;\n    *PTR_DAT_08000e5c = mask | param_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_param_bits_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "set_bit_in_uint_array_and_update_flags_08002864",
                "param_1": "uint_array_ptr",
                "param_2": "bit_index",
                "puVar2": "uint_array",
                "bVar1": "is_dat_080028d0"
            },
            "code": "uint set_bit_in_uint_array_and_update_flags_08002864(uint **uint_array_ptr, uint bit_index){\n  bool is_dat_080028d0 = false;\n  uint *uint_array = *uint_array_ptr;\n  set_bit_in_uint_array_08002848(uint_array, bit_index, 0);\n  if (uint_array == DAT_080028d0 || uint_array == DAT_080028d0 + 0x100) {\n    is_dat_080028d0 = true;\n  }\n  if (is_dat_080028d0 && (uint_array[8] & 0x1111) == 0 && (uint_array[8] & 0x444) == 0) {\n    uint_array[0x11] &= 0xffff7fff;\n  }\n  if ((uint_array[8] & 0x1111) == 0 && (uint_array[8] & 0x444) == 0) {\n    *uint_array &= 0xfffffffe;\n  }\n  *(undefined *)((int)uint_array_ptr + 0x39) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_and_update_flags_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "PTR_LAB_08005686_1_08005370"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 value1, undefined2 value2)\n{\n    // Initialize the first three elements of the data array to 0\n    data[0] = 0;\n    data[1] = 0;\n    data[2] = 0;\n    // Assign the second and third parameters to the fourth and sixth elements of the data array, respectively\n    *(undefined2 *)(data + 3) = value1;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    // Initialize the seventh to ninth elements of the data array to 0\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    // Set the tenth to sixteenth elements of the data array to 0\n    set_memory_to_value_080048cc(data + 0x17, 0, 8);\n    // Assign the values of two pointers and a constant to the seventeenth to nineteenth elements of the data array\n    data[9] = DAT_08005364;\n    data[10] = PTR_process_input_0800562a_1_08005368;\n    data[0xb] = PTR_process_data_08005662_1_0800536c;\n    // Assign the address of the data array to the eighth element of the data array\n    data[8] = data;\n    // Assign the address of a label to the thirteenth element of the data array\n    data[0xc] = PTR_LAB_08005686_1_08005370;\n    return;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "update_bit_in_array_0800314e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "array_index"
            },
            "code": "void update_bit_in_array_0800314e(uint bit_position, int* array) {\n    uint array_index = (bit_position << 0x18) >> 0x1c;\n    *(uint *)(array + array_index * 4) = *(uint *)(array + array_index * 4) | 1 << (bit_position & 0xf);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_in_array_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_parameters_0800447c",
                "param_1": "parameters",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "PTR_PTR_FUN_080042e8_1_080044c8": "PTR_PTR_FUNCTION",
                "PTR_DAT_080044cc": "PTR_DATA_1",
                "update_value_at_address_based_on_index_08004444": "update_value_at_address_based_on_index",
                "get_value_at_index_08004460": "get_value_at_index",
                "find_short_value_if_not_zero_0800351e": "find_short_value_if_not_zero",
                "PTR_DAT_080044d0": "PTR_DATA_2",
                "PTR_DAT_080044d4": "PTR_DATA_3",
                "initialize_struct_08004364": "initialize_struct"
            },
            "code": "undefined4 initialize_parameters_0800447c(undefined4 *parameters, undefined4 value_1, undefined4 value_2, undefined4 value_3)\n{\n    parameters[1] = 0;\n    parameters[2] = 1000;\n    *parameters = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (parameters == (undefined4 *)PTR_DAT_080044cc) {\n        update_value_at_address_based_on_index(parameters, 0x4c, value_2, PTR_DAT_080044cc, value_3);\n        get_value_at_index(parameters, 0x4d);\n    }\n    else {\n        undefined2 short_value_1 = find_short_value_if_not_zero(value_1, PTR_DAT_080044d0);\n        *(undefined2 *)((int)parameters + 0x12e) = short_value_1;\n        undefined2 short_value_2 = find_short_value_if_not_zero(value_1, PTR_DAT_080044d4);\n        *(undefined2 *)(parameters + 0x4b) = short_value_2;\n    }\n    initialize_struct(parameters);\n    return parameters;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "process_input_and_execute_08004808",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "str",
                "param_4": "val3",
                "uVar1": "var1",
                "puVar2": "str1",
                "uVar3": "result",
                "uVar4": "var2"
            },
            "code": "void process_input_and_execute_08004808(uint32_t val1, uint32_t val2, char* str, uint32_t val3) {\n  uint32_t var1 = *(uint32_t *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  char* str1 = PTR_s___function__08004838;\n  uint32_t var2 = val3;\n  if (str == NULL) {\n    goto LAB_0800482c;\n  }\n  do {\n    call_function_with_arguments_and_return_0(var1,PTR_s_assertion___s__failed__file___s__0800483c,val3,val1,val2,str1,str,var2);\n    uint64_t result = process_input_and_execute_08004808_080051ac();\n    val2 = (uint32_t)(result >> 0x20);\n    var1 = (uint32_t)result;\n  } while(true);\n}\n",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_input_and_execute_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "**param_1": "**bit_array",
                "*(undefined *)(param_1 + 1)": "*(uint8_t *)(bit_array + 1)",
                "uint": "uint32_t",
                "undefined4": "uint32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t clear_bit_08000f72(uint32_t **bit_array, uint32_t bit_index) {\n    uint32_t mask = ~(1 << (bit_index & 0xff));\n    **bit_array = **bit_array & mask;\n    *(uint8_t *)(bit_array + 1) = 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_input_or_data_08001d00",
                "param_1": "input_data",
                "iVar1": "input_data_ptr",
                "uVar2": "flags_reg",
                "uVar3": "input_flags",
                "uVar4": "control_reg"
            },
            "code": "void process_input_or_data_08001d00(int *input_data)\n{\n    int input_data_ptr = *input_data;\n    uint control_reg = *(uint *)(input_data_ptr + 0x18);\n    uint flags_reg = *(uint *)(input_data_ptr + 0x14);\n    uint input_flags = *(uint *)(input_data_ptr + 4);\n    char input_char = *(char *)((int)input_data + 0x3e);\n\n    if (input_char == '\\x10' || input_char == '@') {\n        if ((flags_reg & 0x10001) == 0 || (input_flags & 0x200) == 0) {\n            if ((control_reg & flags_reg) == 0 || (input_flags & 0x200) == 0) {\n                if ((DAT_08001e4c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n                    set_flags(input_data);\n                }\n            }\n            else {\n                set_uint_at_offset(input_data);\n            }\n        }\n        else {\n            set_control_register(input_data);\n        }\n        if ((DAT_08001e54 & control_reg) == 0) {\n            if ((DAT_08001e64 & flags_reg) != 0 && (input_flags & 0x400) != 0 && (DAT_08001e5c & flags_reg) == 0) {\n                modify_string_and_call_function(input_data);\n                return;\n            }\n            if ((DAT_08001e5c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n                process_data(input_data);\n                return;\n            }\n        }\n        else {\n            if ((DAT_08001e58 & flags_reg) != 0 && (input_flags & 0x400) != 0 && (DAT_08001e5c & flags_reg) == 0) {\n                process_input(input_data);\n                return;\n            }\n            if ((DAT_08001e5c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n                process_input(input_data);\n                return;\n            }\n        }\n    }\n    else {\n        if ((DAT_08001e4c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n            process_input();\n            return;\n        }\n        if ((DAT_08001e50 & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n            process_input(input_data);\n            return;\n        }\n        if ((DAT_08001e54 & control_reg) == 0) {\n            if ((DAT_08001e64 & flags_reg) != 0 && (input_flags & 0x400) != 0 && (DAT_08001e5c & flags_reg) == 0) {\n                process_data(input_data);\n                return;\n            }\n            if ((DAT_08001e5c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n                zero_out_short_at_offset_0x2a(input_data);\n            }\n        }\n        else {\n            if ((DAT_08001e58 & flags_reg) != 0 && (input_flags & 0x400) != 0 && (DAT_08001e5c & flags_reg) == 0) {\n                process_data(input_data);\n                return;\n            }\n            if ((DAT_08001e5c & flags_reg) != 0 && (input_flags & 0x200) != 0) {\n                decode_data(input_data);\n                return;\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_input_or_data_08001d00"
        }
    },
    "used_tokens": 176723,
    "layers": [
        [
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_0800355e",
            "thunk_FUN_0800410c",
            "FUN_08004544",
            "FUN_08000fb4",
            "FUN_08002d72",
            "FUN_08003582",
            "FUN_08004678",
            "FUN_08000f0c",
            "FUN_0800171a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004444",
            "FUN_080028d4",
            "FUN_08001460",
            "FUN_080035bc",
            "FUN_08001904",
            "FUN_0800387c",
            "FUN_080040fc",
            "FUN_08004860",
            "FUN_080011c0",
            "FUN_0800352e",
            "FUN_080008cc",
            "FUN_08002efa",
            "FUN_08004640",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08001420",
            "FUN_08000218",
            "FUN_08000e60",
            "FUN_08002eb2",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080040f8",
            "FUN_080019a0",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_080005e0",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_08000e30",
            "FUN_0800295c",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08000e3c",
            "FUN_0800314e",
            "FUN_08000f72"
        ],
        [
            "FUN_08003dd0",
            "FUN_080034f4",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08004560",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08005718",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_080047fe",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003754",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08003f24",
            "FUN_08003486",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08002f4c",
            "FUN_08004978",
            "FUN_08002f66",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002ffc",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ]
    ],
    "locked_functions": []
}