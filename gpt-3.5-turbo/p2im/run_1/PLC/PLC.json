{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_occurrence_08000230",
            "code": "\nbyte * find_occurrence_08000230(uint *data,uint target_byte,uint data_length)\n\n{\n  byte current_byte;\n  char check_byte_1;\n  char check_byte_2;\n  char check_byte_3;\n  char check_byte_4;\n  byte *next_byte;\n  uint *data_ptr;\n  byte *result;\n  uint offset;\n  uint data_length_aligned;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool check_result_1;\n  bool check_result_2;\n  bool check_result_3;\n  bool check_result_4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_length = data_length - 1;\n      data = data_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target_byte | target_byte << 8;\n        offset = offset | offset << 0x10;\n        data_length_aligned = data_length & 0xfffffff8;\n        do {\n          data_ptr = data + 2;\n          data_length_aligned = data_length_aligned - 8;\n          xor_result_1 = *data ^ offset;\n          xor_result_2 = data[1] ^ offset;\n          check_byte_1 = -((char)xor_result_1 == '\\0');\n          check_byte_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          check_byte_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          check_byte_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(check_byte_4,CONCAT12(check_byte_3,CONCAT11(check_byte_2,check_byte_1)));\n          check_result_1 = (char)xor_result_2 != '\\0';\n          check_result_2 = (char)(xor_result_2 >> 8) != '\\0';\n          check_result_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          check_result_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(check_result_4 * check_byte_4 - !check_result_4,\n                            CONCAT12(check_result_3 * check_byte_3 - !check_result_3,\n                                     CONCAT11(check_result_2 * check_byte_2 - !check_result_2,check_result_1 * check_byte_1 - !check_result_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              check_result_1 = (xor_result_1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (check_result_1) {\n                check_result_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (check_result_1) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = data_ptr;\n        } while (data_length_aligned != 0);\n        data_length = data_length & 7;\n        goto joined_r0x08000290;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == target_byte) break;\n      offset = (uint)data_ptr & 7;\n      data = data_ptr;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)data_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_occurrence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "check_byte_1",
                "cVar3": "check_byte_2",
                "cVar4": "check_byte_3",
                "cVar5": "check_byte_4",
                "pbVar6": "next_byte",
                "puVar7": "data_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "data_length_aligned",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "check_result_1",
                "bVar14": "check_result_2",
                "bVar15": "check_result_3",
                "bVar16": "check_result_4"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "get_result_080002d0",
            "code": "\nundefined8 get_result_080002d0(int input1,int input2,int condition1,int condition2)\n\n{\n  undefined8 result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = divide_with_remainder_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "get_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition1",
                "param_4": "condition2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divideWithRemainder_08000300(uint dividend,uint dividendLower,uint divisor,uint divisorLower,uint *quotientAndRemainder)\n\n{\n  ulonglong result;\n  uint temp;\n  uint quotientUpper;\n  uint quotientLower;\n  uint remainderUpper;\n  uint remainderLower;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int bitShift;\n  bool carryFlag;\n  \n  if (divisorLower == 0) {\n    if (dividendLower < divisor) {\n      bitShift = LZCOUNT(divisor);\n      if (bitShift != 0) {\n        divisor = divisor << bitShift;\n        dividendLower = dividend >> (0x20U - bitShift & 0xff) | dividendLower << bitShift;\n        dividend = dividend << bitShift;\n      }\n      temp2 = divisor >> 0x10;\n      remainderLower = dividendLower / temp2;\n      remainderUpper = dividend >> 0x10 | (dividendLower - temp2 * remainderLower) * 0x10000;\n      quotientLower = remainderLower * (divisor & 0xffff);\n      quotientUpper = remainderLower;\n      if (remainderUpper <= quotientLower && quotientLower - remainderUpper != 0) {\n        carryFlag = CARRY4(remainderUpper,divisor);\n        remainderUpper = remainderUpper + divisor;\n        quotientUpper = remainderLower - 1;\n        if ((carryFlag == false) && (remainderUpper <= quotientLower && quotientLower - remainderUpper != 0)) {\n          quotientUpper = remainderLower - 2;\n          remainderUpper = remainderUpper + divisor;\n        }\n      }\n      remainderLower = (remainderUpper - quotientLower) / temp2;\n      remainderUpper = dividend & 0xffff | ((remainderUpper - quotientLower) - temp2 * remainderLower) * 0x10000;\n      temp2 = remainderLower * (divisor & 0xffff);\n      quotientLower = remainderLower;\n      if (remainderUpper <= temp2 && temp2 - remainderUpper != 0) {\n        carryFlag = CARRY4(remainderUpper,divisor);\n        remainderUpper = remainderUpper + divisor;\n        quotientLower = remainderLower - 1;\n        if ((carryFlag == false) && (remainderUpper <= temp2 && temp2 - remainderUpper != 0)) {\n          quotientLower = remainderLower - 2;\n          remainderUpper = remainderUpper + divisor;\n        }\n      }\n      remainderUpper = remainderUpper - temp2;\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      quotientUpper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      bitShift = LZCOUNT(divisor);\n      if (bitShift == 0) {\n        dividendLower = dividendLower - divisor;\n        remainderUpper = divisor >> 0x10;\n        temp3 = divisor & 0xffff;\n        quotientUpper = 1;\n      }\n      else {\n        divisor = divisor << bitShift;\n        remainderUpper = divisor >> 0x10;\n        quotientLower = dividendLower >> (0x20U - bitShift & 0xff);\n        temp1 = dividend >> (0x20U - bitShift & 0xff) | dividendLower << bitShift;\n        quotientUpper = quotientLower / remainderUpper;\n        temp3 = divisor & 0xffff;\n        temp2 = temp1 >> 0x10 | (quotientLower - remainderUpper * quotientUpper) * 0x10000;\n        remainderLower = quotientUpper * temp3;\n        dividend = dividend << bitShift;\n        quotientLower = quotientUpper;\n        if (temp2 <= remainderLower && remainderLower - temp2 != 0) {\n          carryFlag = CARRY4(temp2,divisor);\n          temp2 = temp2 + divisor;\n          quotientLower = quotientUpper - 1;\n          if ((carryFlag == false) && (temp2 <= remainderLower && remainderLower - temp2 != 0)) {\n            quotientLower = quotientUpper - 2;\n            temp2 = temp2 + divisor;\n          }\n        }\n        temp = (temp2 - remainderLower) / remainderUpper;\n        dividendLower = temp1 & 0xffff | ((temp2 - remainderLower) - remainderUpper * temp) * 0x10000;\n        remainderLower = temp * temp3;\n        quotientUpper = temp;\n        if (dividendLower <= remainderLower && remainderLower - dividendLower != 0) {\n          carryFlag = CARRY4(dividendLower,divisor);\n          dividendLower = dividendLower + divisor;\n          quotientUpper = temp - 1;\n          if ((carryFlag == false) && (dividendLower <= remainderLower && remainderLower - dividendLower != 0)) {\n            quotientUpper = temp - 2;\n            dividendLower = dividendLower + divisor;\n          }\n        }\n        dividendLower = dividendLower - remainderLower;\n        quotientUpper = quotientUpper | quotientLower << 0x10;\n      }\n      temp1 = dividendLower / remainderUpper;\n      temp2 = dividend >> 0x10 | (dividendLower - remainderUpper * temp1) * 0x10000;\n      quotientLower = temp3 * temp1;\n      remainderLower = temp1;\n      if (temp2 <= quotientLower && quotientLower - temp2 != 0) {\n        carryFlag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        remainderLower = temp1 - 1;\n        if ((carryFlag == false) && (temp2 <= quotientLower && quotientLower - temp2 != 0)) {\n          remainderLower = temp1 - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp1 = (temp2 - quotientLower) / remainderUpper;\n      remainderUpper = dividend & 0xffff | ((temp2 - quotientLower) - remainderUpper * temp1) * 0x10000;\n      temp3 = temp3 * temp1;\n      quotientLower = temp1;\n      if (remainderUpper <= temp3 && temp3 - remainderUpper != 0) {\n        carryFlag = CARRY4(remainderUpper,divisor);\n        remainderUpper = remainderUpper + divisor;\n        quotientLower = temp1 - 1;\n        if ((carryFlag == false) && (remainderUpper <= temp3 && temp3 - remainderUpper != 0)) {\n          quotientLower = temp1 - 2;\n          remainderUpper = remainderUpper + divisor;\n        }\n      }\n      remainderUpper = remainderUpper - temp3;\n      quotientLower = quotientLower | remainderLower << 0x10;\n    }\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = remainderUpper >> bitShift;\n      quotientAndRemainder[1] = 0;\n      return CONCAT44(quotientUpper,quotientLower);\n    }\n  }\n  else if (dividendLower < divisorLower) {\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = dividendLower;\n      return 0;\n    }\n    quotientLower = 0;\n    quotientUpper = 0;\n  }\n  else {\n    bitShift = LZCOUNT(divisorLower);\n    if (bitShift != 0) {\n      temp2 = 0x20 - bitShift;\n      quotientUpper = divisor >> (temp2 & 0xff) | divisorLower << bitShift;\n      temp3 = quotientUpper >> 0x10;\n      quotientLower = dividendLower >> (temp2 & 0xff);\n      temp = dividend >> (temp2 & 0xff) | dividendLower << bitShift;\n      temp1 = quotientLower / temp3;\n      remainderLower = temp >> 0x10 | (quotientLower - temp3 * temp1) * 0x10000;\n      remainderUpper = temp1 * (quotientUpper & 0xffff);\n      dividend = dividend << bitShift;\n      quotientLower = temp1;\n      if (remainderLower <= remainderUpper && remainderUpper - remainderLower != 0) {\n        carryFlag = CARRY4(remainderLower,quotientUpper);\n        remainderLower = remainderLower + quotientUpper;\n        quotientLower = temp1 - 1;\n        if ((carryFlag == false) && (remainderLower <= remainderUpper && remainderUpper - remainderLower != 0)) {\n          quotientLower = temp1 - 2;\n          remainderLower = remainderLower + quotientUpper;\n        }\n      }\n      temp1 = (remainderLower - remainderUpper) / temp3;\n      remainderLower = temp & 0xffff | ((remainderLower - remainderUpper) - temp3 * temp1) * 0x10000;\n      temp3 = temp1 * (quotientUpper & 0xffff);\n      remainderUpper = temp1;\n      if (remainderLower <= temp3 && temp3 - remainderLower != 0) {\n        carryFlag = CARRY4(remainderLower,quotientUpper);\n        remainderLower = remainderLower + quotientUpper;\n        remainderUpper = temp1 - 1;\n        if ((carryFlag == false) && (remainderLower <= temp3 && temp3 - remainderLower != 0)) {\n          remainderUpper = temp1 - 2;\n          remainderLower = remainderLower + quotientUpper;\n        }\n      }\n      remainderUpper = remainderUpper | quotientLower << 0x10;\n      result = (ulonglong)remainderUpper * (ulonglong)(divisor << bitShift);\n      if (CONCAT44(remainderLower - temp3,dividend) < result) {\n        result = result - CONCAT44(quotientUpper,divisor << bitShift);\n        remainderUpper = remainderUpper - 1;\n      }\n      if (quotientAndRemainder != (uint *)0x0) {\n        quotientLower = ((remainderLower - temp3) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotientAndRemainder = quotientLower << (temp2 & 0xff) | dividend - (uint)result >> bitShift;\n        quotientAndRemainder[1] = quotientLower >> bitShift;\n      }\n      return (ulonglong)remainderUpper;\n    }\n    if ((divisorLower < dividendLower) || (divisor <= dividend)) {\n      carryFlag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividendLower = (dividendLower - divisorLower) - (uint)carryFlag;\n      quotientLower = 1;\n    }\n    else {\n      quotientLower = 0;\n    }\n    quotientUpper = 0;\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = dividendLower;\n      return (ulonglong)quotientLower;\n    }\n  }\n  return CONCAT44(quotientUpper,quotientLower);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividendLower",
                "param_3": "divisor",
                "param_4": "divisorLower",
                "param_5": "quotientAndRemainder",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "quotientUpper",
                "uVar4": "quotientLower",
                "uVar5": "remainderUpper",
                "uVar6": "remainderLower",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "temp3",
                "iVar10": "bitShift",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_system_interrupt_080005e0",
            "code": "\nvoid execute_system_interrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_system_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_system_interrupt_080005e4",
            "code": "\nundefined4 execute_system_interrupt_080005e4(undefined4 input,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 execute_flags)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = execute_system_interrupt_080005e4_080005e0(1,input,0,0,execute_flags);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_system_interrupt_080005e4",
                "param_1": "input",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "execute_flags",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_and_update_08000600",
            "code": "\nvoid initialize_and_update_08000600(int **input_ptr,undefined4 input_value)\n\n{\n  char char_value;\n  int function_result;\n  \n  char_value = *(char *)((int)input_ptr + 5);\n  if (char_value == '\\x02') {\n    *input_ptr = &DAT_20000338;\n  }\n  else if (char_value == '\\x03') {\n    *input_ptr = &DAT_20000338;\n  }\n  else if (char_value == '\\x01') {\n    *input_ptr = &DAT_20000338;\n  }\n  else {\n    *input_ptr = &DAT_20000338;\n  }\n  initialize_hardware_serial(*input_ptr,input_value,6);\n  if (1 < *(byte *)((int)input_ptr + 6)) {\n    update_conditions_and_memory(*(byte *)((int)input_ptr + 6),1);\n    update_param_based_on_condition(*(undefined *)((int)input_ptr + 6),0);\n  }\n  do {\n    function_result = (**(code **)(**input_ptr + 0xc))();\n  } while (-1 < function_result);\n  *(undefined *)((int)input_ptr + 0x49) = 0;\n  *(undefined *)((int)input_ptr + 0x4a) = 0;\n  *(undefined2 *)(input_ptr + 0x15) = 0;\n  *(undefined2 *)((int)input_ptr + 0x52) = 0;\n  *(undefined2 *)(input_ptr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_and_update_08000600",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "cVar1": "char_value",
                "iVar2": "function_result",
                "initialize_hardware_serial_08004388": "initialize_hardware_serial",
                "update_conditions_and_memory_08004110": "update_conditions_and_memory",
                "update_param_based_on_condition_080041bc": "update_param_based_on_condition"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataAddress,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(dataAddress + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(dataAddress + 5) = (char)value2;\n  *(undefined *)(dataAddress + 6) = value3;\n  *(undefined2 *)(dataAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_param)\n\n{\n  initialize_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_param",
                "initialize_data_0800066c": "initialize_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "initialize_default_values_08000690",
            "code": "\nvoid initialize_default_values_08000690(int is_first_param,int is_second_param,undefined4 param_3,undefined4 param_4)\n\n{\n  if (is_first_param != 1) {\n    return;\n  }\n  if (is_second_param == 0xffff) {\n    initialize_and_return_08000682(&DAT_20000124,1,0,0,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "initialize_default_values_08000690",
                "param_1": "is_first_param",
                "param_2": "is_second_param"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "update_and_check_param_080006b4",
            "code": "\nint updateAndCheckParam_080006b4(int **param)\n\n{\n  bool isOverflow;\n  undefined result;\n  int returnValue;\n  byte paramIndex;\n  \n  if (1 < *(byte *)((int)param + 6)) {\n    updateParamConditionally(*(byte *)((int)param + 6),0);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  if (*(byte *)((int)param + 5) < 4) {\n    isOverflow = false;\n    while (returnValue = (**(code **)(**param + 8))(), returnValue != 0) {\n      paramIndex = *(byte *)((int)param + 0x49);\n      result = (**(code **)(**param + 0xc))();\n      *(undefined *)((int)param + paramIndex + 9) = result;\n      paramIndex = *(char *)((int)param + 0x49) + 1;\n      *(byte *)((int)param + 0x49) = paramIndex;\n      if (0x3f < paramIndex) {\n        isOverflow = true;\n      }\n    }\n  }\n  else {\n    isOverflow = false;\n  }\n  *(short *)(param + 0x14) = *(short *)(param + 0x14) + 1;\n  if (isOverflow) {\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)param + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "update_and_check_param_080006b4",
                "param_1": "param",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "iVar3": "returnValue",
                "bVar4": "paramIndex",
                "update_param_based_on_condition_080041bc": "updateParamConditionally"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "checksum_08000728",
            "code": "\nuint checksum_08000728(int data_start,int data_length)\n\n{\n  byte bit;\n  uint checksum_08000728_result;\n  uint bit_value;\n  uint index;\n  \n  checksum_08000728_result = 0xffff;\n  for (index = 0; (int)index < data_length; index = index + 1 & 0xff) {\n    checksum_08000728_result = checksum_08000728_result ^ *(byte *)(data_start + index + 9);\n    for (bit = 1; bit < 9; bit = bit + 1) {\n      bit_value = checksum_08000728_result & 1;\n      checksum_08000728_result = checksum_08000728_result >> 1;\n      if (bit_value != 0) {\n        checksum_08000728_result = checksum_08000728_result ^ 0xa001;\n      }\n    }\n  }\n  return (checksum_08000728_result & 0xff) << 8 | checksum_08000728_result >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "checksum_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "bVar1": "bit",
                "uVar2": "checksum_result",
                "uVar3": "bit_value",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_and_params_0800076c",
            "code": "\nvoid updateChecksumAndParams_0800076c(int **paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksumValue;\n  int returnValue;\n  uint offsetValue;\n  \n  offsetValue = (uint)*(byte *)((int)paramArray + 0x49);\n  checksumValue = checksum_08000728(paramArray,offsetValue,param3,param4,param4);\n  *(char *)((int)paramArray + offsetValue + 9) = (char)((ushort)checksumValue >> 8);\n  offsetValue = offsetValue + 1 & 0xff;\n  *(char *)((int)paramArray + offsetValue + 9) = (char)checksumValue;\n  *(char *)((int)paramArray + 0x49) = (char)offsetValue + '\\x01';\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    update_param_based_on_condition_080041bc(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    update_param_based_on_condition_080041bc(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      returnValue = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < returnValue);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  returnValue = initialize_global_data_08004204();\n  paramArray[0x17] = (int *)(returnValue + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_and_params_0800076c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "checksumValue",
                "iVar2": "returnValue",
                "uVar3": "offsetValue"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_and_combine_values_080007f0",
            "code": "\nundefined4 check_and_combine_values_080007f0(int address,undefined4 value,uint param3,undefined4 param4)\n\n{\n  bool foundMatch;\n  byte combinedValue;\n  char firstCombinedValue;\n  char secondCombinedValue;\n  int shiftedFirstValue;\n  uint currentIndex;\n  int shiftedSecondValue;\n  \n  currentIndex = 0;\n  do {\n    if (7 < currentIndex) {\n      foundMatch = false;\nLAB_0800080a:\n      if (!foundMatch) {\n        *(short *)(address + 0x54) = *(short *)(address + 0x54) + 1;\n        return 1;\n      }\n      shiftedSecondValue = *(byte *)(address + 10) - 1;\n      switch(*(byte *)(address + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        firstCombinedValue = combine_and_shift_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param3,\n                             shiftedSecondValue,param4);\n        secondCombinedValue = combine_and_shift_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n        if (*(byte *)(address + 0x60) < (byte)(secondCombinedValue + firstCombinedValue)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        shiftedSecondValue = combine_and_shift_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param3,\n                             shiftedSecondValue,param4);\n        if ((uint)*(byte *)(address + 0x60) < (uint)(shiftedSecondValue << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combinedValue = combine_and_shift_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param3,\n                             shiftedSecondValue,param4);\n        if (*(byte *)(address + 0x60) < combinedValue) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    param3 = (uint)*(byte *)(address + 10);\n    if ((byte)(&DAT_08005a10)[currentIndex] == param3) {\n      foundMatch = true;\n      goto LAB_0800080a;\n    }\n    currentIndex = currentIndex + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  shiftedSecondValue = combine_and_shift_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param3,shiftedSecondValue,\n                       param4);\n  shiftedFirstValue = combine_and_shift_08004640(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n  if ((uint)*(byte *)(address + 0x60) <\n      (((uint)(shiftedSecondValue << 0xc) >> 0x10) + ((uint)(shiftedFirstValue << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_and_combine_values_080007f0",
                "param_1": "address",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "foundMatch",
                "bVar2": "combinedValue",
                "cVar3": "firstCombinedValue",
                "cVar4": "secondCombinedValue",
                "iVar5": "shiftedFirstValue",
                "uVar6": "currentIndex",
                "iVar7": "shiftedSecondValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_080008cc",
            "code": "\nvoid copy_and_modify_080008cc(int original_address,undefined new_value)\n\n{\n  *(undefined *)(original_address + 9) = *(undefined *)(original_address + 4);\n  *(byte *)(original_address + 10) = *(byte *)(original_address + 10) ^ 0x80;\n  *(undefined *)(original_address + 0xb) = new_value;\n  *(undefined *)(original_address + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_080008cc",
                "param_1": "original_address",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "combine_and_shift_080008e2",
            "code": "\nint combineAndShift_080008e2(int inputArray,int lookupArray,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue;\n  uint shiftedValue;\n  uint index;\n  uint bitIndex;\n  char shiftedByte;\n  int offset;\n  \n  combinedValue = combine_and_shift_08004640(*(undefined *)(inputArray + 0xb),*(undefined *)(inputArray + 0xc),param3,param4,\n                       param4);\n  shiftedValue = combine_and_shift_08004640(*(undefined *)(inputArray + 0xd),*(undefined *)(inputArray + 0xe));\n  shiftedByte = (char)((shiftedValue << 0x15) >> 0x18);\n  if ((shiftedValue & 7) != 0) {\n    shiftedByte = shiftedByte + '\\x01';\n  }\n  *(char *)(inputArray + 0xb) = shiftedByte;\n  *(undefined *)(inputArray + 0x49) = 3;\n  bitIndex = 0;\n  for (index = 0; (int)index < (int)shiftedValue; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(lookupArray + ((index + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (index + combinedValue & 0xf) & 1U) == 0) {\n      offset = (uint)*(byte *)(inputArray + 0x49) + inputArray;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      offset = (uint)*(byte *)(inputArray + 0x49) + inputArray;\n      *(byte *)(offset + 9) = *(byte *)(offset + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(inputArray + 0x49) = *(char *)(inputArray + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((shiftedValue & 7) != 0) {\n    *(char *)(inputArray + 0x49) = *(char *)(inputArray + 0x49) + '\\x01';\n  }\n  shiftedByte = *(char *)(inputArray + 0x49);\n  updateChecksum(inputArray);\n  return (int)(char)(shiftedByte + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "combine_and_shift_080008e2",
                "param_1": "inputArray",
                "param_2": "lookupArray",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue",
                "uVar2": "shiftedValue",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "cVar5": "shiftedByte",
                "iVar6": "offset",
                "update_checksum_and_params_0800076c": "updateChecksum"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "combine_and_shift_08000998",
            "code": "\nint combineAndShift_08000998(int dataPtr,int bufferPtr,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVar1;\n  char charVar2;\n  byte byteVar3;\n  byte byteVar4;\n  uint index;\n  uint nextIndex;\n  \n  byteVar3 = combine_and_shift_08004640(*(undefined *)(dataPtr + 0xb),*(undefined *)(dataPtr + 0xc),param3,param4,\n                       param4);\n  byteVar4 = combine_and_shift_08004640(*(undefined *)(dataPtr + 0xd),*(undefined *)(dataPtr + 0xe));\n  *(byte *)(dataPtr + 0xb) = byteVar4 << 1;\n  *(undefined *)(dataPtr + 0x49) = 3;\n  for (index = (uint)byteVar3; index < (uint)byteVar3 + (uint)byteVar4; index = index + 1 & 0xff) {\n    byteVar1 = *(byte *)(dataPtr + 0x49);\n    *(char *)(dataPtr + (uint)byteVar1 + 9) = (char)((ushort)*(undefined2 *)(bufferPtr + index * 2) >> 8)\n    ;\n    nextIndex = byteVar1 + 1 & 0xff;\n    charVar2 = (char)nextIndex;\n    *(char *)(dataPtr + 0x49) = charVar2;\n    *(undefined *)(dataPtr + nextIndex + 9) = *(undefined *)(bufferPtr + index * 2);\n    *(char *)(dataPtr + 0x49) = charVar2 + '\\x01';\n  }\n  charVar2 = *(char *)(dataPtr + 0x49);\n  update_checksum_and_params_0800076c(dataPtr);\n  return (int)(char)(charVar2 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "combine_and_shift_08000998",
                "param_1": "dataPtr",
                "param_2": "bufferPtr",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "bVar3": "byteVar3",
                "bVar4": "byteVar4",
                "uVar5": "index",
                "uVar6": "nextIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_shifted_bits_08000a00",
            "code": "\nundefined4 updateShiftedBits_08000a00(int inputAddress,int outputAddress,undefined4 param3,undefined4 param4)\n\n{\n  uint combinedValue;\n  uint shiftedIndex;\n  \n  combinedValue = combine_and_shift_08004640(*(undefined *)(inputAddress + 0xb),*(undefined *)(inputAddress + 0xc),param3,param4,\n                       param4);\n  shiftedIndex = (combinedValue << 0x14) >> 0x18;\n  if (*(char *)(inputAddress + 0xd) == -1) {\n    *(ushort *)(outputAddress + shiftedIndex * 2) =\n         (ushort)(1 << (combinedValue & 0xf)) | *(ushort *)(outputAddress + shiftedIndex * 2);\n  }\n  else {\n    *(ushort *)(outputAddress + shiftedIndex * 2) =\n         *(ushort *)(outputAddress + shiftedIndex * 2) & ~(ushort)(1 << (combinedValue & 0xf));\n  }\n  *(undefined *)(inputAddress + 0x49) = 6;\n  update_checksum_and_params_0800076c(inputAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_shifted_bits_08000a00",
                "param_1": "inputAddress",
                "param_2": "outputAddress",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "combine_shift_and_update_08000a4e",
            "code": "\nundefined4 combineShiftAndUpdate_08000a4e(int dataPointer,int outputPointer)\n\n{\n  byte combinedResult;\n  undefined2 shiftedResult;\n  \n  combinedResult = combine_and_shift_08004640(*(undefined *)(dataPointer + 0xb),*(undefined *)(dataPointer + 0xc));\n  shiftedResult = combine_and_shift_08004640(*(undefined *)(dataPointer + 0xd),*(undefined *)(dataPointer + 0xe));\n  *(undefined2 *)(outputPointer + (uint)combinedResult * 2) = shiftedResult;\n  *(undefined *)(dataPointer + 0x49) = 6;\n  update_checksum_and_params_0800076c(dataPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "combine_shift_and_update_08000a4e",
                "param_1": "dataPointer",
                "param_2": "outputPointer",
                "bVar1": "combinedResult",
                "uVar2": "shiftedResult"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "rearrange_bits_and_store_08000a7a",
            "code": "\nundefined4 rearrangeBitsAndStore_08000a7a(int inputArray,int outputArray,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  int result2;\n  uint counter;\n  uint bitCounter;\n  uint bitPosition;\n  uint indexMultiplier;\n  uint bytePosition;\n  \n  result1 = combine_and_shift_08004640(*(undefined *)(inputArray + 0xb),*(undefined *)(inputArray + 0xc),param3,param4,\n                       param4);\n  result2 = combine_and_shift_08004640(*(undefined *)(inputArray + 0xd),*(undefined *)(inputArray + 0xe));\n  bitCounter = 0;\n  bytePosition = 7;\n  for (counter = 0; (int)counter < result2; counter = counter + 1 & 0xffff) {\n    indexMultiplier = (counter + result1) * 0x100000 >> 0x18;\n    bitPosition = counter + result1 & 0xf;\n    if (((int)(uint)*(byte *)(inputArray + bytePosition + 9) >> bitCounter & 1U) == 0) {\n      *(ushort *)(outputArray + indexMultiplier * 2) = *(ushort *)(outputArray + indexMultiplier * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(outputArray + indexMultiplier * 2) = (ushort)(1 << bitPosition) | *(ushort *)(outputArray + indexMultiplier * 2);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      bytePosition = bytePosition + 1 & 0xff;\n      bitCounter = 0;\n    }\n  }\n  *(undefined *)(inputArray + 0x49) = 6;\n  update_checksum_and_params_0800076c(inputArray);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "rearrange_bits_and_store_08000a7a",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "counter",
                "uVar4": "bitCounter",
                "uVar5": "bitPosition",
                "uVar6": "indexMultiplier",
                "uVar7": "bytePosition"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "combine_and_shift_data_08000b04",
            "code": "\nint combine_and_shift_data_08000b04(int data_ptr,int result_ptr)\n\n{\n  byte byte_val_1;\n  byte byte_val_2;\n  char char_val;\n  undefined2 combined_val;\n  uint index;\n  \n  byte_val_1 = *(byte *)(data_ptr + 0xc);\n  byte_val_2 = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = byte_val_2;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (index = 0; index < byte_val_2; index = index + 1 & 0xff) {\n    combined_val = combine_and_shift_08004640(*(undefined *)(index * 2 + data_ptr + 0x10),\n                         *(undefined *)(data_ptr + (index + 4) * 2 + 9));\n    *(undefined2 *)(result_ptr + (byte_val_1 + index) * 2) = combined_val;\n  }\n  char_val = *(char *)(data_ptr + 0x49);\n  update_checksum_and_params_0800076c(data_ptr);\n  return (int)(char)(char_val + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "combine_and_shift_data_08000b04",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "byte_val_1",
                "bVar2": "byte_val_2",
                "cVar3": "char_val",
                "uVar4": "combined_val",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "update_and_check_param_08000b54",
            "code": "\nint update_and_check_param_08000b54(int **params,int *param,undefined4 value)\n\n{\n  byte byteVal;\n  int result;\n  uint flag;\n  int returnValue;\n  \n  params[0x13] = param;\n  *(char *)(params + 0x18) = (char)value;\n  if (*(byte *)((int)params + 5) < 4) {\n    byteVal = (**(code **)(**params + 8))();\n    flag = (uint)byteVal;\n  }\n  if (flag == 0) {\n    returnValue = 0;\n  }\n  else if ((int)flag < 8) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = update_and_check_param_08000b54_080006b4(params);\n    *(char *)(params + 2) = (char)returnValue;\n    if (*(char *)((int)params + 9) == *(char *)(params + 1)) {\n      result = check_and_combine_values_080007f0(params);\n      if (result < 1) {\n        result = initialize_global_data_08004204();\n        params[0x17] = (int *)((uint)*(ushort *)((int)params + 0x56) + result);\n        *(undefined *)(params + 2) = 0;\n        switch(*(undefined *)((int)params + 10)) {\n        case 1:\n        case 2:\n          returnValue = combine_and_shift_080008e2(params,param,value);\n          break;\n        case 3:\n        case 4:\n          returnValue = combine_and_shift_08000998(params,param,value);\n          break;\n        case 5:\n          returnValue = update_shifted_bits_08000a00(params,param,value);\n          break;\n        case 6:\n          returnValue = combine_shift_and_update_08000a4e(params,param,value);\n          break;\n        case 0xf:\n          returnValue = rearrange_bits_and_store_08000a7a(params,param,value);\n          break;\n        case 0x10:\n          returnValue = combine_and_shift_data_08000b04(params,param,value);\n        }\n      }\n      else {\n        if (result != 0xff) {\n          copy_and_modify_080008cc(params,result);\n          update_checksum_and_params_0800076c(params);\n        }\n        *(char *)(params + 2) = (char)result;\n        returnValue = (int)(char)result;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "update_and_check_param_08000b54",
                "param_1": "params",
                "param_2": "param",
                "param_3": "value",
                "bVar1": "byteVal",
                "iVar2": "result",
                "unaff_r5": "flag",
                "iVar3": "returnValue"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_system_08000c4c",
            "code": "\nvoid initializeSystem_08000c4c(void)\n\n{\n  systemInterrupt(0);\n  initializeAndUpdate(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_system_08000c4c",
                "execute_system_interrupt_080005e4": "systemInterrupt",
                "initialize_and_update_08000600": "initializeAndUpdate"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "update_parameter_and_check_08000c64",
            "code": "\nvoid updateParameterAndCheck_08000c64(void)\n\n{\n  undefined4 param;\n  \n  update_and_check_param_08000b54(&DAT_20000124,&DAT_20000004,0x10,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "update_parameter_and_check_08000c64",
                "in_r3": "param"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag;\n  undefined4 value;\n  undefined4 index;\n  undefined4 data;\n  undefined4 size;\n  undefined4 offset;\n  undefined4 count;\n  undefined4 config;\n  undefined4 permission;\n  undefined4 mode;\n  undefined4 count;\n  undefined4 length;\n  undefined4 size;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  value = 0x50000;\n  index = 2;\n  data = 0x400000;\n  size = 8;\n  offset = 0x150;\n  count = 2;\n  config = 7;\n  perform_data_operations_0800201c(&flag);\n  initialize_system_08001f9c();\n  permission = 0xf;\n  mode = 2;\n  count = 0;\n  length = 0x1400;\n  size = 0x1000;\n  initialize_and_configure_08002488(&permission,5);\n  uVar1 = get_data_from_memory_080025e0();\n  set_parameters_08000ee0(uVar1 / 1000);\n  set_permission_flag_08000f2c(4);\n  update_character_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "flag",
                "local_50": "value",
                "local_3c": "index",
                "local_38": "data",
                "local_34": "size",
                "local_30": "offset",
                "local_2c": "count",
                "local_28": "config",
                "local_24": "permission",
                "local_20": "mode",
                "local_1c": "count",
                "local_18": "length",
                "local_14": "size"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_080035bc();\n  execute_functions_within_range_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  main_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_application_and_system_08000d8e",
            "code": "\nvoid initialize_application_and_system_08000d8e(void)\n\n{\n  initialize_application_and_system_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_application_and_system_08000d8e",
                "initialize_application_and_system_080034ce": "initialize_application_and_system"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_character_08000d98",
            "code": "\nundefined4 initializeCharacter_08000d98(uint characterCode)\n\n{\n  int result;\n  \n  result = setCharacterParameters(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < characterCode) {\n    return 1;\n  }\n  updateCharacter(0xffffffff,characterCode,0);\n  DAT_20000028 = characterCode;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_character_08000d98",
                "param_1": "characterCode",
                "iVar1": "result",
                "set_parameters_08000ee0": "setCharacterParameters",
                "update_character_08000e60": "updateCharacter"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_application_08000de4",
            "code": "\n\n\nundefined4 initialize_application_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  set_configuration_value(3);\n  create_character(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_application_08000de4",
                "update_configuration_value_08000e3c": "set_configuration_value",
                "initialize_character_08000d98": "create_character"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_08000e18",
            "code": "\nvoid updateSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_global_data_08000e30",
            "code": "\nundefined4 get_global_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_global_data_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_configuration_value_08000e3c",
            "code": "\n\n\nvoid updateConfigurationValue_08000e3c(uint configValue)\n\n{\n  _DAT_e000ed0c = (configValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_configuration_value_08000e3c",
                "param_1": "configValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_character_08000e60",
            "code": "\n\n\nvoid updateCharacter_08000e60(uint characterIndex,uint bitmask1,uint bitmask2)\n\n{\n  uint shiftedBits;\n  uint remainingBits;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftedBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (bitmask1 & (1 << (remainingBits & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & bitmask2;\n  if ((int)characterIndex < 0) {\n    *(char *)((characterIndex & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(characterIndex + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_character_08000e60",
                "param_1": "characterIndex",
                "param_2": "bitmask1",
                "param_3": "bitmask2",
                "uVar1": "shiftedBits",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_value_08000ec4",
            "code": "\nvoid setBitValue_08000ec4(uint inputParam)\n\n{\n  if (-1 < convertedInput) {\n    *(int *)((inputParam >> 5) * 4 + -0x1fff1f00) = 1 << (inputParam & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_value_08000ec4",
                "param_1": "inputParam",
                "(int)param_1": "convertedInput"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "set_parameters_08000ee0",
            "code": "\n\n\nundefined4 set_parameters_08000ee0(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "set_parameters_08000ee0",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_array_08000f0c",
            "code": "\nvoid setBitInArray_08000f0c(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "set_permission_flag_08000f2c",
            "code": "\n\n\nvoid setPermissionFlag_08000f2c(int permissionLevel)\n\n{\n  if (permissionLevel != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "set_permission_flag_08000f2c",
                "param_1": "permissionLevel"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "initialize_app_08000f4e",
            "code": "\nvoid initializeApp_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "initialize_app_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_memory_08000f56",
            "code": "\nundefined4 initializeMemory_08000f56(int memoryAddress)\n\n{\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 4) = 2;\n    clearMemory;\n    *(undefined4 *)(memoryAddress + 0x10) = 0;\n    *(undefined *)(memoryAddress + 4) = 0;\n    *(undefined *)(memoryAddress + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_memory_08000f56",
                "param_1": "memoryAddress",
                "clear_memory_080033c8()": "clearMemory"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "update_bit_value_08000f72",
            "code": "\nundefined4 updateBitValue_08000f72(uint **inputArray,uint bitPosition)\n\n{\n  **inputArray = **inputArray & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(inputArray + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "update_bit_value_08000f72",
                "param_1": "inputArray",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_value_08000f8c",
            "code": "\nundefined4 updateParamValue_08000f8c(uint **paramList)\n\n{\n  if (*(char *)((int)paramList + 0x35) != '\\x02') {\n    paramList[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramList + 0x35) = 5;\n  **paramList = **paramList & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_value_08000f8c",
                "param_1": "paramList",
                "param_1[0x15]": "paramList[0x15]"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registerValues,uint *inputValues)\n\n{\n  uint value1;\n  uint value2;\n  uint index;\n  uint mask;\n  uint value3;\n  int index1;\n  uint shiftedIndex;\n  int index2;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    value2 = 1 << (index & 0xff);\n    mask = value2 & *inputValues;\n    value1 = _DAT_40013c0c;\n    if (value2 == mask) {\n      if ((inputValues[1] == 2) || (inputValues[1] == 0x12)) {\n        index1 = (index >> 3) + 8;\n        index2 = (index & 7) << 2;\n        registerValues[index1] = registerValues[index1] & ~(0xf << index2) | inputValues[4] << index2;\n      }\n      shiftedIndex = index << 1;\n      value1 = ~(3 << (shiftedIndex & 0xff));\n      *registerValues = *registerValues & value1 | (inputValues[1] & 3) << (shiftedIndex & 0xff);\n      value3 = inputValues[1];\n      if (((value3 - 1 < 2) || (value3 == 0x11)) || (value3 == 0x12)) {\n        registerValues[2] = registerValues[2] & value1 | inputValues[3] << (shiftedIndex & 0xff);\n        registerValues[1] = registerValues[1] & ~value2 | ((inputValues[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      registerValues[3] = value1 & registerValues[3] | inputValues[2] << (shiftedIndex & 0xff);\n      value1 = _DAT_40013c0c;\n      if ((inputValues[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (index & 3) << 2;\n        if (registerValues == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registerValues == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registerValues == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registerValues == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registerValues == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registerValues == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registerValues == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registerValues == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registerValues == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registerValues == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        value1 = ~mask;\n        value2 = _DAT_40013c00 & value1;\n        if ((inputValues[1] & 0x10000) != 0) {\n          value2 = mask | _DAT_40013c00;\n        }\n        value3 = value1 & _DAT_40013c04;\n        if ((inputValues[1] & 0x20000) != 0) {\n          value3 = mask | _DAT_40013c04;\n        }\n        shiftedIndex = value1 & _DAT_40013c08;\n        if ((inputValues[1] & 0x100000) != 0) {\n          shiftedIndex = mask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = value2;\n        _DAT_40013c04 = value3;\n        _DAT_40013c08 = shiftedIndex;\n        value1 = value1 & _DAT_40013c0c;\n        if ((inputValues[1] & 0x200000) != 0) {\n          value1 = mask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = value1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registerValues",
                "param_2": "inputValues",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "index",
                "uVar4": "mask",
                "uVar5": "value3",
                "iVar6": "index1",
                "uVar7": "shiftedIndex",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "update_param_08001198",
            "code": "\nvoid updateParam_08001198(int baseAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(baseAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "update_param_08001198",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "process_condition_and_execute_080011a4",
            "code": "\n\n\nvoid process_condition_and_execute_080011a4(uint input_value)\n\n{\n  if ((_DAT_40013c14 & input_value) != 0) {\n    _DAT_40013c14 = input_value;\n    process_data_based_on_bit_count();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "process_condition_and_execute_080011a4",
                "param_1": "input_value",
                "process_data_based_on_bit_count_080047d0": "process_data_based_on_bit_count"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "set_flag_based_on_conditions_080011c0",
            "code": "\nundefined4 setFlagBasedOnConditions_080011c0(int *flags)\n\n{\n  if (*(char *)((int)flags + 0x3e) == '@') {\n    if (flags[0x14] == 0) {\n      *(uint *)(*flags + 0x10) = flags[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*flags + 0x10) = flags[0x11] & 0xffU | 1;\n    }\n  }\n  else if (flags[4] == 0x4000) {\n    if (*(char *)((int)flags + 0x3d) == '!') {\n      *(uint *)(*flags + 0x10) = flags[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*flags + 0x10) = flags[0x11] & 0xffU | 1;\n    }\n  }\n  else if (flags[0x14] == 0) {\n    *(uint *)(*flags + 0x10) = (uint)(flags[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flags[0x14] == 1) {\n    *(uint *)(*flags + 0x10) = (uint)(flags[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "set_flag_based_on_conditions_080011c0",
                "param_1": "flags",
                "param_1[0x14]": "flags[0x14]",
                "param_1[0x11]": "flags[0x11]",
                "param_1[4]": "flags[4]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "extract_and_assign_byte_0800124a",
            "code": "\nundefined4 extractAndAssignByte_0800124a(int *inputPtr)\n\n{\n  *(uint *)(*inputPtr + 0x10) = inputPtr[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "extract_and_assign_byte_0800124a",
                "param_1": "inputPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flags_08001256",
            "code": "\nundefined4 processFlags_08001256(uint **parameters)\n\n{\n  uint *tempVar1;\n  \n  tempVar1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (tempVar1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          tempVar1 = *parameters;\n          if ((tempVar1[1] & 0x800) == 0) {\n            *tempVar1 = *tempVar1 | 0x200;\n          }\n          else {\n            *tempVar1 = *tempVar1 & 0xfffffbff;\n          }\n        }\n        else if (((tempVar1 == (uint *)0x4) || (tempVar1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flags_08001256",
                "param_1": "parameters",
                "puVar1": "tempVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 updateData_08001420(int *data)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_element_08001440",
            "code": "\nundefined4 updateArrayElement_08001440(int *array)\n\n{\n  undefined *arrayElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    arrayElement = (undefined *)array[9];\n    array[9] = (int)(arrayElement + 1);\n    *arrayElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_element_08001440",
                "param_1": "array",
                "puVar1": "arrayElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "initialize_params_08001460",
            "code": "\nundefined4 initializeParams_08001460(uint **paramArray,uint *paramPtr,int count,uint *arr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)paramArray + 0x3d) == '(') {\n    if (paramPtr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramArray + 0xf) = 1;\n      ptr = *paramArray;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **paramArray = **paramArray & 0xfffff7ff;\n      *(undefined *)((int)paramArray + 0x3d) = 0x29;\n      *(undefined *)((int)paramArray + 0x3e) = 0x20;\n      result = 0;\n      paramArrayElem1 = (uint *)0x0;\n      paramArrayElem2 = paramPtr;\n      *(short *)((int)paramArray + 0x2a) = (short)count;\n      paramArrayElem3 = arr;\n      *(undefined2 *)(paramArray + 10) = *(undefined2 *)((int)paramArray + 0x2a);\n      *(undefined *)(paramArray + 0xf) = 0;\n      (*paramArray)[1] = (*paramArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "initialize_params_08001460",
                "param_1": "paramArray",
                "param_2": "paramPtr",
                "param_3": "count",
                "param_4": "arr",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "paramArrayElem1",
                "param_1[9]": "paramArrayElem2",
                "param_1[0xb]": "paramArrayElem3"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "check_and_update_values_080014ec",
            "code": "\nundefined4 check_and_update_values_080014ec(uint **pointer_to_data,uint *data_param,int size_param,uint *update_param)\n\n{\n  undefined4 status;\n  uint *pointer_to_value;\n  \n  if (*(char *)((int)pointer_to_data + 0x3d) == '(') {\n    if (data_param == (uint *)0x0) {\n      status = 1;\n    }\n    else if (size_param == 0) {\n      status = 1;\n    }\n    else if (*(char *)(pointer_to_data + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(pointer_to_data + 0xf) = 1;\n      pointer_to_value = *pointer_to_data;\n      if ((*pointer_to_value & 1) == 0) {\n        *pointer_to_value = *pointer_to_value | 1;\n      }\n      **pointer_to_data = **pointer_to_data & 0xfffff7ff;\n      *(undefined *)((int)pointer_to_data + 0x3d) = 0x2a;\n      *(undefined *)((int)pointer_to_data + 0x3e) = 0x20;\n      status = 0;\n      pointer_to_data[0x10] = (uint *)0x0;\n      pointer_to_data[9] = data_param;\n      *(short *)((int)pointer_to_data + 0x2a) = (short)size_param;\n      pointer_to_data[0xb] = update_param;\n      *(undefined2 *)(pointer_to_data + 10) = *(undefined2 *)((int)pointer_to_data + 0x2a);\n      *(undefined *)(pointer_to_data + 0xf) = 0;\n      (*pointer_to_data)[1] = (*pointer_to_data)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "check_and_update_values_080014ec",
                "param_1": "pointer_to_data",
                "param_2": "data_param",
                "param_3": "size_param",
                "param_4": "update_param",
                "uVar1": "status",
                "puVar2": "pointer_to_value"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "enable_feature_08001578",
            "code": "\nundefined4 enableFeature_08001578(uint **featurePtr)\n\n{\n  uint *valuePtr;\n  \n  if (*(char *)((int)featurePtr + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)featurePtr + 0x3d) = 0x28;\n  valuePtr = *featurePtr;\n  if ((*valuePtr & 1) == 0) {\n    *valuePtr = *valuePtr | 1;\n  }\n  **featurePtr = **featurePtr | 0x400;\n  (*featurePtr)[1] = (*featurePtr)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "enable_feature_08001578",
                "param_1": "featurePtr",
                "puVar1": "valuePtr"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 process_data_080015bc(int *data_array)\n\n{\n  char char_value;\n  byte *byte_ptr;\n  \n  char_value = *(char *)((int)data_array + 0x3d);\n  if (*(short *)((int)data_array + 0x2a) != 0) {\n    byte_ptr = (byte *)byte_array;\n    byte_array = (int)(byte_ptr + 1);\n    *(uint *)(*data_array + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    if ((*(short *)((int)data_array + 0x2a) == 0) && (char_value == ')')) {\n      *(uint *)(*data_array + 4) = *(uint *)(*data_array + 4) & 0xfffffbff;\n      int_value = 0x21;\n      *(undefined *)((int)data_array + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data_array",
                "cVar1": "char_value",
                "pbVar2": "byte_ptr",
                "param_1[9]": "byte_array",
                "param_1[0xc]": "int_value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "update_data_0800160e",
            "code": "\nundefined4 updateData_0800160e(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray;\n    ptrArray = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      value = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "update_data_0800160e",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[9]": "ptrArray",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "handle_params_0800165a",
            "code": "\nundefined4 handle_params_0800165a(int *data,undefined4 var1,undefined4 var2,undefined4 var3)\n\n{\n  undefined2 param_value;\n  uint param_flags;\n  \n  param_flags = *(uint *)(*data + 0x18);\n  if ((param_flags & 0x80) == 0) {\n    param_value = *(undefined2 *)(data + 3);\n  }\n  else {\n    param_value = *(undefined2 *)(data + 6);\n  }\n  handle_params_0800165a_08003880(data,(*(uint *)(*data + 0x18) & 4) == 0,param_value,param_flags,var3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "handle_params_0800165a",
                "param_1": "data",
                "param_2": "var1",
                "param_3": "var2",
                "param_4": "var3",
                "uVar1": "param_value",
                "uVar2": "param_flags"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "process_param_08001684",
            "code": "\nundefined4 process_param_08001684(uint **param)\n\n{\n  if (((param[11] == (uint *)0x4) || (param[11] == (uint *)0x8)) &&\n     (*(char *)((int)param + 0x3d) == '(')) {\n    param[11] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    execute_feature_function();\n  }\n  else if (*(char *)((int)param + 0x3d) == '!') {\n    param[11] = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "process_param_08001684",
                "param_1": "param",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]",
                "execute_feature_function_080038d0": "execute_feature_function"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "parse_input_0800171a",
            "code": "\nundefined4 parse_input_0800171a(uint **input_data)\n\n{\n  char character_1;\n  uint *pointer;\n  \n  character_1 = *(char *)((int)input_data + 0x3d);\n  pointer = pointer_value_3;\n  if ((*(short *)(input_data + 10) == 0) && (character_1 == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      pointer_value_2 = (uint *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      pointer_value_2 = (uint *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((character_1 == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (character_1 == '\\\"')))) {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      if (pointer_value_4 == (uint *)0x0) {\n        if (pointer_value_5 == (uint *)0x1) {\n          (*input_data)[4] = (uint)pointer_value_6 & 0xff;\n          pointer_value_4 = (uint *)((int)pointer_value_4 + 2);\n        }\n        else {\n          (*input_data)[4] = (uint)((int)pointer_value_6 << 0x10) >> 0x18;\n          pointer_value_4 = (uint *)((int)pointer_value_4 + 1);\n        }\n      }\n      else if (pointer_value_4 == (uint *)0x1) {\n        (*input_data)[4] = (uint)pointer_value_6 & 0xff;\n        pointer_value_4 = (uint *)((int)pointer_value_4 + 1);\n      }\n      else if (pointer_value_4 == (uint *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\\\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          pointer = pointer_value_7;\n          pointer_value_7 = (uint *)((int)pointer + 1);\n          (*input_data)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = pointer_value_7;\n      pointer_value_7 = (uint *)((int)pointer + 1);\n      (*input_data)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "parse_input_0800171a",
                "param_1": "input_data",
                "cVar1": "character_1",
                "puVar2": "pointer",
                "param_1[0xc]": "pointer_value_2",
                "param_1[0xb]": "pointer_value_3",
                "param_1[0x14]": "pointer_value_4",
                "param_1[0x13]": "pointer_value_5",
                "param_1[0x12]": "pointer_value_6",
                "param_1[9]": "pointer_value_7"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_param_08001864",
            "code": "\nundefined4 processParam_08001864(uint **parameters)\n\n{\n  uint *tempVar1;\n  \n  tempVar1 = parameters[0xb];\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((tempVar1 == (uint *)0x4) || (tempVar1 == (uint *)0x8)) || (tempVar1 == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        parameters[0xc] = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        parameters[0xc] = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      tempVar1 = parameters[9];\n      parameters[9] = (uint *)((int)tempVar1 + 1);\n      (*parameters)[4] = (uint)*(byte *)tempVar1;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_param_08001864",
                "param_1": "parameters",
                "puVar1": "tempVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_quoted_string_08001904",
            "code": "\nundefined4 processQuotedString_08001904(uint **stringPtr)\n\n{\n  uint *charPtr;\n  \n  if (*(char *)((int)stringPtr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)stringPtr + 0x2a) < 4) {\n      if (*(ushort *)((int)stringPtr + 0x2a) < 2) {\n        **stringPtr = **stringPtr & 0xfffffbff;\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffff8ff;\n        charPtr = stringPtr[9];\n        stringPtr[9] = (uint *)((int)charPtr + 1);\n        *(char *)charPtr = (char)(*stringPtr)[4];\n        *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n        *(undefined *)((int)stringPtr + 0x3d) = 0x20;\n        stringPtr[0xc] = (uint *)0x0;\n        if (*(char *)((int)stringPtr + 0x3e) == '@') {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      charPtr = stringPtr[9];\n      stringPtr[9] = (uint *)((int)charPtr + 1);\n      *(char *)charPtr = (char)(*stringPtr)[4];\n      *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n      if (*(short *)((int)stringPtr + 0x2a) == 3) {\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_quoted_string_08001904",
                "param_1": "stringPtr",
                "puVar1": "charPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_param_080019a0",
            "code": "\nundefined4 processParam_080019a0(uint **paramList)\n\n{\n  uint *ptrVar1;\n  \n  if (*(short *)((int)paramList + 0x2a) == 4) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    ptrVar1 = paramList[9];\n    paramList[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 3) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    **paramList = **paramList & 0xfffffbff;\n    ptrVar1 = paramList[9];\n    paramList[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 2) {\n    if ((int)paramList[0xb] - 1U < 2) {\n      **paramList = **paramList & 0xfffffbff;\n      **paramList = **paramList | 0x100;\n    }\n    else {\n      **paramList = **paramList | 0x200;\n    }\n    ptrVar1 = paramList[9];\n    paramList[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    ptrVar1 = paramList[9];\n    paramList[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    (*paramList)[1] = (*paramList)[1] & 0xfffffcff;\n    *(undefined *)((int)paramList + 0x3d) = 0x20;\n    paramList[0xc] = (uint *)0x0;\n    if (*(char *)((int)paramList + 0x3e) == '@') {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    ptrVar1 = paramList[9];\n    paramList[9] = (uint *)((int)ptrVar1 + 1);\n    *(char *)ptrVar1 = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_param_080019a0",
                "param_1": "paramList",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_params_08001ab0",
            "code": "\nvoid processParams_08001ab0(uint **params)\n\n{\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  \n  if (*(byte *)((int)params + 0x3d) - 0x29 < 2) {\n    params[0xc] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)params + 0x3d) != '`') && (((*params)[1] & 0x800) == 0)) {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n    }\n    params[0xc] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3e) = 0;\n  }\n  **params = **params & 0xfffff7ff;\n  ptr3 = *params;\n  if ((ptr3[1] & 0x800) == 0) {\n    if (*(char *)((int)params + 0x3d) == '`') {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n      params[0x10] = (uint *)0x0;\n      if ((ptr3[5] & 0x40) != 0) {\n        ptr2 = params[9];\n        params[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)ptr3[4];\n      }\n      **params = **params & 0xfffffffe;\n      FUNC_08001aac(params);\n    }\n    else {\n      if ((ptr3[5] & 0x40) != 0) {\n        ptr2 = params[9];\n        params[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)ptr3[4];\n      }\n      check_and_enable_feature_08003900(params);\n    }\n  }\n  else {\n    ptr3[1] = ptr3[1] & 0xfffff7ff;\n    if (*(char *)((int)params[0xd] + 0x35) == '\\x01') {\n      params[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_value_08000f8c(params[0xe]);\n      if (result != 0) {\n        if (((*params)[5] & 0x40) != 0) {\n          ptr3 = params[9];\n          params[9] = (uint *)((int)ptr3 + 1);\n          *(char *)ptr3 = (char)(*params)[4];\n        }\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[0xe][0x14])();\n      }\n    }\n    else {\n      params[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_value_08000f8c(params[0xd]);\n      if (result != 0) {\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)params + 0x3d) == '(') && (((uint)params[0x10] & 4) != 0)) {\n    params[0xb] = (uint *)0xffff0000;\n    params[0xc] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    execute_feature_function_080038d0(params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_params_08001ab0",
                "param_1": "params",
                "iVar1": "result",
                "puVar2": "ptr2",
                "puVar3": "ptr3"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_parameters_08001bfc",
            "code": "\nundefined4 process_parameters_08001bfc(uint **parameters)\n\n{\n  char parameter_char;\n  uint *parameter_ptr;\n  uint *temp_ptr;\n  \n  parameter_char = *(char *)((int)parameters + 0x3d);\n  (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n  **parameters = **parameters | 1;\n  **parameters = **parameters & 0xfffffbff;\n  parameter_ptr = *parameters;\n  if ((parameter_ptr[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameters + 0x3d) == '\\\"') || (*(char *)((int)parameters + 0x3d) == '*')) {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    if ((parameter_ptr[5] & 4) != 0) {\n      temp_ptr = parameters[9];\n      parameters[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)parameter_ptr[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    if (((*parameters)[5] & 0x40) != 0) {\n      parameter_ptr = parameters[9];\n      parameters[9] = (uint *)((int)parameter_ptr + 1);\n      *(char *)parameter_ptr = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n  }\n  if (parameters[0x10] == (uint *)0x0) {\n    if (((parameter_char == '(') || (parameter_char == '*')) || (parameter_char == ')')) {\n      parameters[0xb] = (uint *)0xffff0000;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      execute_feature_function_080038d0();\n    }\n    else if ((parameters[0xc] == (uint *)0x22) || (parameter_char == '\\\"')) {\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_params_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_parameters_08001bfc",
                "param_1": "parameters",
                "cVar1": "parameter_char",
                "puVar2": "parameter_ptr",
                "puVar3": "temp_ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_input_08001d00",
            "code": "\nvoid process_input_08001d00(int *input_data)\n\n{\n  int ptr_data;\n  uint flags;\n  uint conditions;\n  uint additional_flags;\n  \n  ptr_data = *input_data;\n  additional_flags = *(uint *)(ptr_data + 0x18);\n  flags = *(uint *)(ptr_data + 0x14);\n  conditions = *(uint *)(ptr_data + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((conditions & 0x200) == 0)) {\n      if (((flags & 0x10008) == 0) || ((conditions & 0x200) == 0)) {\n        if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n          process_flags_08001256(input_data);\n        }\n      }\n      else {\n        extract_and_assign_byte_0800124a(input_data);\n      }\n    }\n    else {\n      set_flag_based_on_conditions_080011c0(input_data);\n    }\n    if ((additional_flags & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_quoted_string_08001904(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        process_param_080019a0(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        parse_input_0800171a(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        process_param_08001864(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags & 0x10002) != 0) && ((conditions & 0x200) != 0)) {\n      handle_params_0800165a();\n      return;\n    }\n    if (((flags & 0x10010) != 0) && ((conditions & 0x200) != 0)) {\n      process_parameters_08001bfc(input_data);\n      return;\n    }\n    if ((additional_flags & 0x100004) == 0) {\n      if ((((flags & 0x10040) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        update_data_0800160e(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_array_element_08001440(input_data);\n      }\n    }\n    else {\n      if ((((flags & 0x10080) != 0) && ((conditions & 0x400) != 0)) && ((flags & 0x10004) == 0)) {\n        process_data_080015bc(input_data);\n        return;\n      }\n      if (((flags & 0x10004) != 0) && ((conditions & 0x200) != 0)) {\n        update_data_08001420(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input_data",
                "iVar1": "ptr_data",
                "uVar2": "flags",
                "uVar3": "conditions",
                "uVar4": "additional_flags"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_params_08001e68",
            "code": "\nvoid process_params_08001e68(uint **input_params)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *input_params;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 2);\n    (*input_params)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)input_params + 0x3d);\n    if (((*(char *)((int)input_params + 0x3e) == ' ') && (*(short *)((int)input_params + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (input_params[0xc] == (uint *)0x21)))))) {\n      process_param_08001684(input_params);\n    }\n    else {\n      input_params[0x10] = (uint *)((uint)input_params[0x10] | 4);\n      if (*(char *)((int)input_params + 0x3e) == '\\x10') {\n        **input_params = **input_params | 0x200;\n      }\n      (*input_params)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 8);\n    (*input_params)[5] = 0xfffff7ff;\n  }\n  if (input_params[0x10] != (uint *)0x0) {\n    process_params_08001e68_08001ab0(input_params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_params_08001e68",
                "param_1": "input_params",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "initialize_system_08001f9c",
            "code": "\n\n\nundefined4 initializeSystem_08001f9c(void)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initialValue = get_global_data_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initialValue = get_global_data_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentValue = get_global_data_08000e30();\n      } while ((uint)(currentValue - initialValue) < 0x3e9);\n      return 3;\n    }\n    currentValue = get_global_data_08000e30();\n  } while ((uint)(currentValue - initialValue) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "initialize_system_08001f9c",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "perform_data_operations_0800201c",
            "code": "\n\n\nundefined4 performDataOperations_0800201c(uint *data)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isConditionTrue;\n  \n  if (data == (uint *)0x0) {\n    return 1;\n  }\n  if ((*data & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (data[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (data[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (data[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (data[1] == 0) {\n        startTime = get_global_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = get_global_data_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_global_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = get_global_data_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*data & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (data[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | data[4] << 3;\n    }\n    else if (data[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = get_global_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = get_global_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | data[4] << 3;\n    }\n  }\n  if ((*data & 8) != 0) {\n    if (data[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = get_global_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = get_global_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*data & 4) != 0) {\n    isConditionTrue = (_DAT_40023840 & 0x10000000) == 0;\n    if (isConditionTrue) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (data[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (data[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (data[2] == 0) {\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = get_global_data_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_global_data_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = get_global_data_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionTrue) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (data[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (data[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = get_global_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             data[7] | data[8] | data[9] << 6 | ((data[10] >> 1) - 1) * 0x10000 |\n             data[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = get_global_data_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_global_data_08000e30();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_global_data_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = get_global_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_global_data_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "perform_data_operations_0800201c",
                "param_1": "data",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isConditionTrue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_result_080023b4",
            "code": "\n\n\nuint calculateResult_080023b4(void)\n\n{\n  undefined4 inputValue;\n  uint calculatedValue;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    calculatedValue = (_DAT_40023804 << 0x11) >> 0x17;\n    calculatedValue = get_result_080002d0(calculatedValue * 16000000,\n                         (((uint)(calculatedValue * 0x20 < calculatedValue) * -0x3f -\n                          (uint)(calculatedValue * 0x7c0 < calculatedValue * 0x1f)) * 8 +\n                         (uint)CARRY4(calculatedValue * 0x3d08,calculatedValue)) * 0x400 | calculatedValue * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,inputValue);\n  }\n  else {\n    calculatedValue = (_DAT_40023804 << 0x11) >> 0x17;\n    calculatedValue = get_result_080002d0(calculatedValue * 8000000,\n                         (((uint)(calculatedValue * 0x20 < calculatedValue) * -0x3f -\n                          (uint)(calculatedValue * 0x7c0 < calculatedValue * 0x1f)) * 8 +\n                         (uint)CARRY4(calculatedValue * 0x3d08,calculatedValue)) * 0x200,_DAT_40023804 & 0x3f,0,inputValue);\n  }\n  return calculatedValue / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_result_080023b4",
                "in_r3": "inputValue",
                "uVar1": "calculatedValue"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_and_configure_08002488",
            "code": "\n\n\nundefined4 initialize_and_configure_08002488(uint *config_data,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint result;\n  \n  if (config_data == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < config_size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_data & 2) != 0) {\n    if ((*config_data & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config_data & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | config_data[2];\n  }\n  if ((*config_data & 1) != 0) {\n    result = config_data[1];\n    if (result == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (result - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = result | _DAT_40023808 & 0xfffffffc;\n    start_time = get_current_time();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == config_data[1] * 4) break;\n      current_time = get_current_time();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (config_size < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_data & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config_data[3];\n  }\n  if ((*config_data & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config_data[4] << 3;\n  }\n  result = perform_calculation();\n  DAT_2000002c = result >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_character(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_and_configure_08002488",
                "param_1": "config_data",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "get_global_data_08000e30": "get_current_time",
                "calculate_result_080023b4": "perform_calculation",
                "initialize_character_08000d98": "initialize_character"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_from_memory_080025e0",
            "code": "\nundefined4 get_data_from_memory_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_from_memory_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "retrieve_data_080025ec",
            "code": "\n\n\nuint retrieve_data_080025ec(void)\n\n{\n  uint data;\n  \n  data = get_data_from_memory();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "retrieve_data_080025ec",
                "uVar1": "data",
                "get_data_from_memory_080025e0": "get_data_from_memory"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_data_0800260c",
            "code": "\n\n\nuint get_shifted_data_0800260c(void)\n\n{\n  uint data;\n  \n  data = fetch_data_from_memory();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_data_0800260c",
                "uVar1": "data",
                "get_data_from_memory_080025e0": "fetch_data_from_memory"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "check_and_execute_callbacks_0800262c",
            "code": "\n\n\nvoid checkAndExecuteCallbacks_0800262c(int *callbackData)\n\n{\n  if (((*(uint *)(*callbackData + 0xc) & 0x100) != 0) && ((*(uint *)(*callbackData + 8) & 0x1000) != 0)) {\n    executeSpecialCallbacks();\n    *(uint *)(*callbackData + 0xc) = *(uint *)(*callbackData + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*callbackData + 0xc) & 0x200) != 0) && ((*(uint *)(*callbackData + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(callbackData);\n    *(uint *)(*callbackData + 0xc) = *(uint *)(*callbackData + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)callbackData + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "check_and_execute_callbacks_0800262c",
                "param_1": "callbackData",
                "execute_callback_08003594": "executeSpecialCallbacks"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "initialize_flags_and_set_state_0800268e",
            "code": "\nvoid initialize_flags_and_set_state_0800268e(uint **input_data)\n\n{\n  uint *data_ptr;\n  \n  *(undefined *)((int)input_data + 0x39) = 2;\n  data_ptr = *input_data;\n  if ((flags & 0x1111) == 0) {\n    if ((flags & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  initialize_flags_0800340c(input_data);\n  *(undefined *)((int)input_data + 0x39) = 0;\n  *(undefined *)(input_data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "initialize_flags_and_set_state_0800268e",
                "param_1": "input_data",
                "puVar1": "data_ptr",
                "puVar1[8]": "flags"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid process_flags_080026ce(int *flags)\n\n{\n  int current_value;\n  \n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 2) != 0) && ((*(uint *)(current_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 6) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback_if_active();\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 4) != 0) && ((*(uint *)(current_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 6) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_if_active(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 8) != 0) && ((*(uint *)(current_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 6) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_if_active(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 0x10) != 0) && ((*(uint *)(current_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 6) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_if_active(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 1) != 0) && ((*(uint *)(current_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xfffffffe;\n    execute_callback(flags);\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 0x80) != 0) && ((*(uint *)(current_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(flags);\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 0x40) != 0) && ((*(uint *)(current_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(flags);\n  }\n  current_value = *flags;\n  if (((*(uint *)(current_value + 0x10) & 0x20) != 0) && ((*(uint *)(current_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flags",
                "iVar1": "current_value",
                "execute_callback_if_active_08003754": "execute_callback_if_active",
                "execute_callback_0800376e": "execute_callback"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bitwise_value_08002848",
            "code": "\nvoid updateBitwiseValue_08002848(int targetAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(targetAddress + 0x20) = *(uint *)(targetAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(targetAddress + 0x20) = *(uint *)(targetAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bitwise_value_08002848",
                "param_1": "targetAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_bitwise_value_and_check_conditions_08002864",
            "code": "\nundefined4 updateBitwiseValueAndCheckConditions_08002864(uint **ptrToUintPointer,undefined4 param2)\n\n{\n  bool isSpecialValue;\n  uint *ptrToUint;\n  \n  update_bitwise_value_08002848(*ptrToUintPointer,param2,0);\n  ptrToUint = *ptrToUintPointer;\n  if (ptrToUint == (uint *)0x40010000) {\n    isSpecialValue = true;\n  }\n  else if (ptrToUint == (uint *)0x40010400) {\n    isSpecialValue = true;\n  }\n  else {\n    isSpecialValue = false;\n  }\n  if (((isSpecialValue) && ((ptrToUint[8] & 0x1111) == 0)) && ((ptrToUint[8] & 0x444) == 0)) {\n    ptrToUint[0x11] = ptrToUint[0x11] & 0xffff7fff;\n  }\n  ptrToUint = *ptrToUintPointer;\n  if (((ptrToUint[8] & 0x1111) == 0) && ((ptrToUint[8] & 0x444) == 0)) {\n    *ptrToUint = *ptrToUint & 0xfffffffe;\n  }\n  *(undefined *)((int)ptrToUintPointer + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_bitwise_value_and_check_conditions_08002864",
                "param_1": "ptrToUintPointer",
                "param_2": "param2",
                "bVar1": "isSpecialValue",
                "puVar2": "ptrToUint"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitwise_value_080028d4",
            "code": "\nvoid updateBitwiseValue_080028d4(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitwise_value_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_bitwise_and_clear_flags_080028f0",
            "code": "\nundefined4 update_bitwise_and_clear_flags_080028f0(uint **bitwise_flags,undefined4 value_to_update)\n\n{\n  uint *bitwise_flags_ptr;\n  \n  update_bitwise_value_080028d4(*bitwise_flags,value_to_update,0);\n  bitwise_flags_ptr = *bitwise_flags;\n  if (((bitwise_flags_ptr[8] & 0x1111) == 0) && ((bitwise_flags_ptr[8] & 0x444) == 0)) {\n    bitwise_flags_ptr[0x11] = bitwise_flags_ptr[0x11] & 0xffff7fff;\n  }\n  bitwise_flags_ptr = *bitwise_flags;\n  if (((bitwise_flags_ptr[8] & 0x1111) == 0) && ((bitwise_flags_ptr[8] & 0x444) == 0)) {\n    *bitwise_flags_ptr = *bitwise_flags_ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_bitwise_and_clear_flags_080028f0",
                "param_1": "bitwise_flags",
                "param_2": "value_to_update",
                "puVar1": "bitwise_flags_ptr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "set_flags_and_values_08002940",
            "code": "\nvoid setFlagsAndValues_08002940(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xfffffedf;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputArray + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "set_flags_and_values_08002940",
                "param_1": "inputArray"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 processData_0800295c(int *data)\n\n{\n  short newValue;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  newValue = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = newValue;\n  if (newValue == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "newValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_new_value_080029c8",
            "code": "\nvoid calculateNewValue_080029c8(int *inputParams)\n\n{\n  int data1;\n  int data2;\n  int data3;\n  int data4;\n  int data5;\n  int data6;\n  int data7;\n  int data8;\n  int data9;\n  int baseAddress;\n  \n  *(uint *)(*inputParams + 0x10) = *(uint *)(*inputParams + 0x10) & 0xffffcfff | inputParams[3];\n  *(uint *)(*inputParams + 0xc) =\n       *(uint *)(*inputParams + 0xc) & 0xffff69f3 | inputParams[2] | inputParams[4] | inputParams[5] | inputParams[7];\n  *(uint *)(*inputParams + 0x14) = *(uint *)(*inputParams + 0x14) & 0xfffffcff | inputParams[6];\n  if (inputParams[7] == 0x8000) {\n    baseAddress = *inputParams;\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      data1 = retrieve_data_080025ec();\n      data6 = inputParams[1];\n      data2 = retrieve_data_080025ec();\n      data7 = inputParams[1];\n      data3 = retrieve_data_080025ec();\n      data8 = inputParams[1];\n      data4 = retrieve_data_080025ec();\n      data9 = inputParams[1];\n      data5 = retrieve_data_080025ec();\n      *(uint *)(baseAddress + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(data4 * 0x19) / (uint)(data9 << 1) +\n                          (int)(((ulonglong)(uint)(data5 * 0x19) /\n                                (ulonglong)(uint)(inputParams[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(data2 * 0x19) / (uint)(data7 << 1) +\n             (int)(((ulonglong)(uint)(data3 * 0x19) / (ulonglong)(uint)(data8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(data6 << 1)) / 100) * 0x10;\n      return;\n    }\n    data1 = get_shifted_data_0800260c();\n    data6 = inputParams[1];\n    data2 = get_shifted_data_0800260c();\n    data7 = inputParams[1];\n    data3 = get_shifted_data_0800260c();\n    data8 = inputParams[1];\n    data4 = get_shifted_data_0800260c();\n    data9 = inputParams[1];\n    data5 = get_shifted_data_0800260c();\n    *(uint *)(baseAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(data4 * 0x19) / (uint)(data9 << 1) +\n                        (int)(((ulonglong)(uint)(data5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(data2 * 0x19) / (uint)(data7 << 1) +\n           (int)(((ulonglong)(uint)(data3 * 0x19) / (ulonglong)(uint)(data8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(data6 << 1)) / 100) * 0x10;\n    return;\n  }\n  baseAddress = *inputParams;\n  if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n    data1 = retrieve_data_080025ec();\n    data6 = inputParams[1];\n    data2 = retrieve_data_080025ec();\n    data7 = inputParams[1];\n    data3 = retrieve_data_080025ec();\n    data8 = inputParams[1];\n    data4 = retrieve_data_080025ec();\n    data9 = inputParams[1];\n    data5 = retrieve_data_080025ec();\n    *(uint *)(baseAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(data4 * 0x19) / (uint)(data9 << 2) +\n                        (int)(((ulonglong)(uint)(data5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(data2 * 0x19) / (uint)(data7 << 2) +\n           (int)(((ulonglong)(uint)(data3 * 0x19) / (ulonglong)(uint)(data8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(data6 << 2)) / 100) * 0x10;\n    return;\n  }\n  data1 = get_shifted_data_0800260c();\n  data6 = inputParams[1];\n  data2 = get_shifted_data_0800260c();\n  data7 = inputParams[1];\n  data3 = get_shifted_data_0800260c();\n  data8 = inputParams[1];\n  data4 = get_shifted_data_0800260c();\n  data9 = inputParams[1];\n  data5 = get_shifted_data_0800260c();\n  *(uint *)(baseAddress + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(data4 * 0x19) / (uint)(data9 << 2) +\n                      (int)(((ulonglong)(uint)(data5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(data2 * 0x19) / (uint)(data7 << 2) +\n         (int)(((ulonglong)(uint)(data3 * 0x19) / (ulonglong)(uint)(data8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(data1 * 0x19) / (ulonglong)(uint)(data6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_new_value_080029c8",
                "param_1": "inputParams",
                "iVar1": "data1",
                "iVar2": "data2",
                "iVar3": "data3",
                "iVar4": "data4",
                "iVar5": "data5",
                "iVar6": "data6",
                "iVar7": "data7",
                "iVar8": "data8",
                "iVar9": "data9",
                "iVar10": "baseAddress"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_and_modify_values_08002d0c",
            "code": "\nundefined4 checkAndModifyValues_08002d0c(uint **dataPointer,uint value1,uint condition1,int value2,uint condition2)\n\n{\n  int globalDataDifference;\n  \n  do {\n    if (((value1 & ~**dataPointer) == 0) != condition1) {\n      return 0;\n    }\n  } while ((condition2 == 0xffffffff) ||\n          ((condition2 != 0 && (globalDataDifference = get_global_data_08000e30(), (uint)(globalDataDifference - value2) <= condition2))));\n  (*dataPointer)[3] = (*dataPointer)[3] & 0xfffffe5f;\n  (*dataPointer)[5] = (*dataPointer)[5] & 0xfffffffe;\n  *(undefined *)((int)dataPointer + 0x39) = 0x20;\n  *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n  *(undefined *)(dataPointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_and_modify_values_08002d0c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "condition1",
                "param_4": "value2",
                "param_5": "condition2",
                "iVar1": "globalDataDifference"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_parameters_08002d72",
            "code": "\nundefined4 initializeParameters_08002d72(int *parameters)\n\n{\n  if (parameters != (int *)0x0) {\n    if (*(char *)((int)parameters + 0x39) == '\\0') {\n      *(undefined *)(parameters + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)parameters + 0x39) = 0x24;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) & 0xffffdfff;\n    calculateNewValue(parameters);\n    *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffb7ff;\n    *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xffffffd5;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) | 0x2000;\n    flag = 0;\n    *(undefined *)((int)parameters + 0x39) = 0x20;\n    *(undefined *)((int)parameters + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_parameters_08002d72",
                "param_1": "parameters",
                "calculate_new_value_080029c8": "calculateNewValue",
                "param_1[0xf]": "flag"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *dataPtr,ushort *paramPtr,int paramSize,undefined4 paramValue)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (paramPtr == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (paramSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      returnValue = get_global_data_08000e30();\n      *(short *)(dataPtr + 9) = (short)paramSize;\n      *(short *)((int)dataPtr + 0x26) = (short)paramSize;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          result = check_and_modify_values_08002d0c(dataPtr,0x80,0,returnValue,paramValue);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *paramPtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            paramPtr = paramPtr + 1;\n          }\n          else {\n            paramPtr = (ushort *)((int)paramPtr + 1);\n          }\n        }\n        else {\n          result = check_and_modify_values_08002d0c(dataPtr,0x80,0,returnValue,paramValue);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)paramPtr;\n          paramPtr = (ushort *)((int)paramPtr + 1);\n        }\n      }\n      result = check_and_modify_values_08002d0c(dataPtr,0x40,0,returnValue,paramValue);\n      if (result == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "paramSize",
                "param_4": "paramValue",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_input_08002eb2",
            "code": "\nundefined4 validate_input_08002eb2(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    result_1 = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    result_4 = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "result_1",
                "param_1[0xf]": "result_4"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "handle_parameters_08002efa",
            "code": "\nundefined4 handleParameters_08002efa(int *inputArray,int value1,int value2)\n\n{\n  if (*(char *)((int)inputArray + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[10] = value1;\n    *(short *)(inputArray + 0xb) = (short)value2;\n    *(short *)((int)inputArray + 0x2e) = (short)value2;\n    inputArray[0xf] = 0;\n    *(undefined *)((int)inputArray + 0x3a) = 0x22;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) | 1;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "handle_parameters_08002efa",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "inputArray[10]",
                "param_1[0xf]": "inputArray[0xf]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "clear_bit_and_set_flag_08002f4c",
            "code": "\nundefined4 clearBitAndSetFlag_08002f4c(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputArray + 0x39) = 0x20;\n  processElement();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "clear_bit_and_set_flag_08002f4c",
                "param_1": "inputArray",
                "process_element_08003f48": "processElement"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "parse_and_process_data_08002f66",
            "code": "\nundefined4 parseAndProcessData_08002f66(int *data)\n\n{\n  byte *bytePointer;\n  short count;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_function_if_element_found_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "parse_and_process_data_08002f66",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "count",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_flags_08002ffc",
            "code": "\nvoid process_data_flags_08002ffc(uint **data_ptr)\n\n{\n  int update_result;\n  uint flag_3;\n  uint *data;\n  uint flag_5;\n  uint flag_1;\n  \n  data = *data_ptr;\n  flag_1 = *data;\n  flag_3 = data[3];\n  if ((((flag_1 & 0xf) == 0) && ((flag_1 & 0x20) != 0)) && ((flag_3 & 0x20) != 0)) {\n    parse_and_process_data_08002f66(data_ptr);\n    return;\n  }\n  if (((flag_1 & 0xf) == 0) || ((flag_5 = data[5] & 1, flag_5 == 0 && ((flag_3 & 0x120) == 0)))) {\n    if (((flag_1 & 0x80) != 0) && ((flag_3 & 0x80) != 0)) {\n      process_data_0800295c(data_ptr);\n      return;\n    }\n    if (((flag_1 & 0x40) != 0) && ((flag_3 & 0x40) != 0)) {\n      clear_bit_and_set_flag_08002f4c(data_ptr);\n    }\n  }\n  else {\n    if (((flag_1 & 1) != 0) && ((flag_3 & 0x100) != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 1);\n    }\n    if (((flag_1 & 4) != 0) && (flag_5 != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 2);\n    }\n    if (((flag_1 & 2) != 0) && (flag_5 != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 4);\n    }\n    if (((flag_1 & 8) != 0) && (flag_5 != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 8);\n    }\n    if (data_ptr[0xf] != (uint *)0x0) {\n      if (((flag_1 & 0x20) != 0) && ((flag_3 & 0x20) != 0)) {\n        parse_and_process_data_08002f66(data_ptr);\n      }\n      if ((((uint)data_ptr[0xf] & 8) == 0) && (((*data_ptr)[5] & 0x40) == 0)) {\n        FUNC_08003f94(data_ptr);\n        data_ptr[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags_and_values_08002940(data_ptr);\n      data = *data_ptr;\n      if ((data[5] & 0x40) == 0) {\n        FUNC_08003f94(data_ptr);\n        return;\n      }\n      data[5] = data[5] & 0xffffffbf;\n      if (data_ptr[0xd] == (uint *)0x0) {\n        FUNC_08003f94(data_ptr);\n        return;\n      }\n      data_ptr[0xd][0x14] = (uint)&LAB_0800311c_1;\n      update_result = update_param_value_08000f8c(data_ptr[0xd]);\n      if (update_result != 0) {\n        (*(code *)data_ptr[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_flags_08002ffc",
                "param_1": "data_ptr",
                "iVar1": "update_result",
                "uVar2": "flag_3",
                "puVar3": "data",
                "uVar4": "flag_5",
                "uVar5": "flag_1"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint get_bit_value_08003138(uint value,int base_address)\n\n{\n  return *(uint *)(base_address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "value",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid setBitInArray_0800314e(uint inputValue,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) | 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "inputValue",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_0800316c",
            "code": "\nvoid updateBit_0800316c(uint value,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_address_080031fc",
            "code": "\n\n\nundefined4 setMemoryAddress_080031fc(undefined4 addressIndex)\n\n{\n  undefined4 newAddress;\n  \n  switch(addressIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    newAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    newAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    newAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    newAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    newAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    newAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    newAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    newAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    newAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    newAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    newAddress = 0x40022800;\n    break;\n  default:\n    newAddress = 0;\n  }\n  return newAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_address_080031fc",
                "param_1": "addressIndex",
                "uVar1": "newAddress"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_and_get_value_08003380",
            "code": "\nundefined4 check_and_get_value_08003380(undefined4 value,undefined4 data,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  \n  result = find_value_or_default_0800354a(value,&DAT_08005a18,param1,param2,param2);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_and_get_value_08003380",
                "param_1": "value",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "find_value_in_data_0800339c",
            "code": "\nundefined4 find_value_in_data_0800339c(undefined4 input_value,undefined4 data_start,undefined4 default_value,undefined4 param_4)\n\n{\n  int found_index;\n  uint shifted_value;\n  \n  found_index = find_value_or_default_0800354a(input_value,&DAT_08005a3c,default_value,param_4,param_4);\n  shifted_value = (uint)(found_index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "find_value_in_data_0800339c",
                "param_1": "input_value",
                "param_2": "data_start",
                "param_3": "default_value",
                "iVar1": "found_index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_080033c8",
            "code": "\n\n\nvoid clearMemory_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_parameter_080033d8",
            "code": "\nvoid processParameter_080033d8(undefined4 inputParam)\n\n{\n  int result;\n  int valueIndices [5];\n  \n  valueIndices[0] = find_value_index_or_0_080034f4(inputParam,&DAT_08005a18);\n  if ((valueIndices[0] != 0) && ((result = check_and_get_value_08003380(inputParam), result == 0 || (result == 0x10)))) {\n    update_bit_value_08000f72(valueIndices,result);\n    initialize_memory_08000f56(valueIndices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_parameter_080033d8",
                "param_1": "inputParam",
                "iVar1": "result",
                "local_1c": "valueIndices"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_flags_0800340c",
            "code": "\nvoid initialize_flags_0800340c(void)\n\n{\n  set_flags_based_on_parameter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_flags_0800340c",
                "set_flags_based_on_param_080035fc": "set_flags_based_on_parameter"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "update_conditions_08003414",
            "code": "\nvoid update_conditions_08003414(undefined4 value)\n\n{\n  int found_value;\n  uint value_flags;\n  int indexes [16];\n  \n  indexes[0] = find_value_index_or_0_080034f4(value,&DAT_08005a3c);\n  if ((indexes[0] != 0) &&\n     ((((found_value = find_value_in_data_0800339c(value), found_value == 0 || (found_value == 4)) || (found_value == 8)) ||\n      ((found_value == 0xc || (found_value == 0x18)))))) {\n    value_flags = find_value_or_default_0800354a(value,&DAT_08005a3c);\n    if ((value_flags & 0x100000) == 0) {\n      update_bitwise_value_and_check_conditions_08002864(indexes,found_value);\n    }\n    else {\n      update_bitwise_and_clear_flags_080028f0(indexes,found_value);\n    }\n    initialize_flags_and_set_state_0800268e(indexes);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "update_conditions_08003414",
                "param_1": "value",
                "iVar1": "found_value",
                "uVar2": "value_flags",
                "local_4c": "indexes"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_global_data_0800346c",
            "code": "\nvoid initializeGlobalData_0800346c(void)\n\n{\n  get_global_data_08000e30();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_global_data_0800346c"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_app_and_update_sum_08003476",
            "code": "\nvoid initialize_app_and_update_sum_08003476(void)\n\n{\n  update_sum();\n  initialize_app();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_app_and_update_sum_08003476",
                "update_sum_08000e18": "update_sum",
                "initialize_app_08000f4e": "initialize_app"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "update_memory_and_registers_08003486",
            "code": "\nvoid updateMemoryAndRegisters_08003486(uint address,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 memoryAddress;\n  uint bitMask;\n  undefined4 updatedValue1;\n  undefined4 updatedValue2;\n  undefined4 constantTwo;\n  \n  memoryAddress = set_memory_address_080031fc((address << 0x18) >> 0x1c);\n  bitMask = 1 << (address & 0xf) & 0xffff;\n  constantTwo = 2;\n  updatedValue1 = value1;\n  updatedValue2 = value2;\n  update_registers_08000fb4(memoryAddress,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "update_memory_and_registers_08003486",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryAddress",
                "local_24": "bitMask",
                "local_20": "updatedValue1",
                "local_1c": "updatedValue2",
                "local_18": "constantTwo"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "update_param_with_condition_080034b6",
            "code": "\nvoid updateParamWithCondition_080034b6(undefined4 param1,undefined2 param2,int condition,undefined4 param4)\n\n{\n  if (condition == 0) {\n    update_param_08001198(param1,param2,0,param4,param4);\n    return;\n  }\n  update_param_08001198(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "update_param_with_condition_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "param4"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_application_and_system_080034ce",
            "code": "\nvoid initialize_application_and_system_080034ce(void)\n\n{\n  initialize_application();\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_application_and_system_080034ce",
                "initialize_application_08000de4": "initialize_application",
                "initialize_system_08000c8c": "initialize_system"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int target_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return *(undefined4 *)(array_ptr + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_value_index_or_0_080034f4",
            "code": "\nundefined4 find_value_index_or_0_080034f4(int input_value)\n\n{\n  undefined4 value_index_or_0;\n  \n  if (input_value != -1) {\n    value_index_or_0 = find_value_index_080034da();\n    return value_index_or_0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_value_index_or_0_080034f4",
                "param_1": "input_value",
                "uVar1": "value_index_or_0"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint find_value_in_array_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_or_default_0800351e",
            "code": "\nundefined4 find_value_or_default_0800351e(int value)\n\n{\n  undefined4 result;\n  \n  if (value != 0) {\n    result = find_value_in_array_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_or_default_0800351e",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_value_or_default_0800354a",
            "code": "\nundefined4 find_value_or_default_0800354a(int value)\n\n{\n  undefined4 value_index;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  value_index = find_value_index_0800352e();\n  return value_index;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_value_or_default_0800354a",
                "param_1": "value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value_to_find,short *array)\n\n{\n  if (value_to_find == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value_to_find == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "return_non_zero_08003582",
            "code": "\nint returnNonZero_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_system_080035bc",
            "code": "\n\n\nvoid initializeSystem_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_system_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "set_flags_based_on_param_080035fc",
            "code": "\n\n\nvoid setFlagsBasedOnParam_080035fc(int *param)\n\n{\n  if (*param == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*param == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*param == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*param == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*param == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*param == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*param == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*param == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*param == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*param == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*param == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*param == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*param == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*param == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "set_flags_based_on_param_080035fc",
                "param_1": "param"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "decrement_by_four_08003750",
            "code": "\nint decrementByFour_08003750(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "decrement_by_four_08003750",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_if_active_08003754",
            "code": "\nvoid executeCallbackIfActive_08003754(int callbackParam)\n\n{\n  int decrementResult;\n  \n  decrementResult = decrement_by_four_08003750();\n  if ((*(code **)(decrementResult + 0x48) != (code *)0x0) && (*(char *)(callbackParam + 0x18) == '\\x01')) {\n    (**(code **)(decrementResult + 0x48))(decrementResult,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_if_active_08003754",
                "param_1": "callbackParam",
                "iVar1": "decrementResult"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_callback_0800376e",
            "code": "\nvoid executeCallback_0800376e(void)\n\n{\n  int result;\n  \n  result = getCallbackOffset();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_callback_0800376e",
                "iVar1": "result",
                "decrement_by_four_08003750": "getCallbackOffset"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "check_and_process_flags_0800377c",
            "code": "\nvoid check_and_process_flags_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_flags();\n  }\n  if (DAT_200001d4 != 0) {\n    process_flags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "check_and_process_flags_0800377c",
                "process_flags_080026ce": "process_flags"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "handle_params_08003880",
            "code": "\nvoid handleParams_08003880(int inputAddress,int flag,int condition,undefined4 codeParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (condition == *(int *)(inputAddress + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      initializeParams(inputAddress,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    checkAndUpdateValues(inputAddress,result + 0x68,0x20,8,codeParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "handle_params_08003880",
                "param_1": "inputAddress",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "codeParam",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "initialize_params_08001460": "initializeParams",
                "check_and_update_values_080014ec": "checkAndUpdateValues"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_feature_function_080038d0",
            "code": "\nvoid executeFeatureFunction_080038d0(undefined4 param)\n\n{\n  int result;\n  \n  result = getFunctionInstance();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  enableFeature(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_feature_function_080038d0",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_0800387c": "getFunctionInstance",
                "enable_feature_08001578": "enableFeature"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_enable_feature_08003900",
            "code": "\nvoid checkAndEnableFeature_08003900(undefined4 featureId)\n\n{\n  int result;\n  \n  result = subtract_four_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    enable_feature_08001578(featureId);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_enable_feature_08003900",
                "param_1": "featureId",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "initialize_uart_peripheral_08003978",
            "code": "\n\n\nvoid initializeUARTPeripheral_08003978(int *peripheralData)\n\n{\n  int uartPinIndex;\n  int peripheralPinIndex;\n  undefined4 memoryAddress;\n  uint peripheralValue;\n  uint pinFlag;\n  uint registerValue;\n  uint shiftedValue;\n  undefined4 registerIndex;\n  uint registerMask;\n  \n  if (peripheralData != (int *)0x0) {\n    uartPinIndex = find_value_index_or_0_080034f4((int)*(short *)(peripheralData + 0x16),&DAT_08005ca0);\n    peripheralPinIndex = find_value_index_or_0_080034f4((int)*(short *)((int)peripheralData + 0x5a),&DAT_08005c10);\n    if ((peripheralPinIndex == 0) || (uartPinIndex == 0)) {\n      process_and_initialize_data_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",peripheralPinIndex);\n    }\n    else {\n      uartPinIndex = return_non_zero_08003582(uartPinIndex);\n      *peripheralData = uartPinIndex;\n      if (uartPinIndex == 0) {\n        process_and_initialize_data_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinIndex == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(peripheralData + 0x11) = 0;\n          *(undefined *)(peripheralData + 0x17) = 0x25;\n        }\n        else if (uartPinIndex == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(peripheralData + 0x11) = 1;\n          *(undefined *)(peripheralData + 0x17) = 0x26;\n        }\n        else if (uartPinIndex == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(peripheralData + 0x11) = 2;\n          *(undefined *)(peripheralData + 0x17) = 0x27;\n        }\n        else if (uartPinIndex == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(peripheralData + 0x11) = 3;\n          *(undefined *)(peripheralData + 0x17) = 0x34;\n        }\n        else if (uartPinIndex == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(peripheralData + 0x11) = 4;\n          *(undefined *)(peripheralData + 0x17) = 0x35;\n        }\n        else if (uartPinIndex == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(peripheralData + 0x11) = 5;\n          *(undefined *)(peripheralData + 0x17) = 0x47;\n        }\n        else if (uartPinIndex == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(peripheralData + 0x11) = 6;\n          *(undefined *)(peripheralData + 0x17) = 0x52;\n        }\n        else if (uartPinIndex == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(peripheralData + 0x11) = 7;\n          *(undefined *)(peripheralData + 0x17) = 0x53;\n        }\n        memoryAddress = set_memory_address_080031fc((uint)((int)*(short *)((int)peripheralData + 0x5a) << 0x18) >> 0x1c);\n        peripheralValue = find_value_or_default_0800354a((int)*(short *)((int)peripheralData + 0x5a),&DAT_08005c10);\n        pinFlag = 1 << (*(ushort *)((int)peripheralData + 0x5a) & 0xf) & 0xffff;\n        registerValue = (peripheralValue >> 3 & 1) << 4 | peripheralValue & 7;\n        shiftedValue = (peripheralValue << 0x1a) >> 0x1e;\n        registerMask = (peripheralValue << 0x11) >> 0x19;\n        registerIndex = 3;\n        update_registers_08000fb4(memoryAddress,&pinFlag);\n        memoryAddress = set_memory_address_080031fc((uint)((int)*(short *)(peripheralData + 0x16) << 0x18) >> 0x1c);\n        peripheralValue = find_value_or_default_0800354a((int)*(short *)(peripheralData + 0x16),&DAT_08005ca0);\n        pinFlag = 1 << (*(ushort *)(peripheralData + 0x16) & 0xf) & 0xffff;\n        registerValue = (peripheralValue >> 3 & 1) << 4 | peripheralValue & 7;\n        shiftedValue = (peripheralValue << 0x1a) >> 0x1e;\n        update_registers_08000fb4(memoryAddress,&pinFlag);\n        (&DAT_200002b4)[*(byte *)(peripheralData + 0x11)] = peripheralData + 1;\n        peripheralData[1] = *peripheralData;\n        peripheralData[2] = peripheralData[0x12];\n        peripheralData[3] = peripheralData[0x13];\n        peripheralData[4] = peripheralData[0x14];\n        peripheralData[5] = peripheralData[0x15];\n        peripheralData[6] = 0xc;\n        peripheralData[7] = 0;\n        peripheralData[8] = 0;\n        initialize_parameters_08002d72(peripheralData + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "initialize_uart_peripheral_08003978",
                "param_1": "peripheralData",
                "iVar1": "uartPinIndex",
                "iVar2": "peripheralPinIndex",
                "uVar3": "memoryAddress",
                "uVar4": "peripheralValue",
                "local_2c": "pinFlag",
                "local_28": "registerValue",
                "local_24": "shiftedValue",
                "local_20": "registerIndex",
                "local_1c": "registerMask"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_peripheral_08003cc8",
            "code": "\nvoid initialize_uart_peripheral_08003cc8(void)\n\n{\n  int valueIndex;\n  undefined4 defaultValueIndex;\n  \n  valueIndex = find_value_index_or_0_080034f4(0x38,&DAT_08005ca0);\n  if (valueIndex != 0) {\n    defaultValueIndex = find_value_index_or_0_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_or_default_0800351e(defaultValueIndex,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    initialize_uart_peripheral_08003cc8_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_peripheral_08003cc8",
                "iVar1": "valueIndex",
                "uVar2": "defaultValueIndex"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_data_with_conditions_08003d18",
            "code": "\nuint process_data_with_conditions_08003d18(undefined4 input,uint flags)\n\n{\n  int global_data;\n  int value_index;\n  uint counter;\n  \n  global_data = get_global_data_08000e30();\n  value_index = find_value_index_or_0_080034f4(0x38,&DAT_08005ca0);\n  if (value_index == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 10 &&\n      (((&DAT_200002b4)[counter] == 0 ||\n       (value_index = find_value_index_or_0_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[counter] != value_index))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (9 < counter) {\n    if ((9 < DAT_20000074) && (initialize_uart_peripheral_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    counter = (uint)DAT_20000074;\n  }\n  do {\n    value_index = process_data_08002dd0((&DAT_200002b4)[counter],input,flags & 0xffff,1000);\n    if (value_index == 0) {\n      return flags;\n    }\n    value_index = get_global_data_08000e30();\n  } while ((uint)(value_index - global_data) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_data_with_conditions_08003d18",
                "param_1": "input",
                "param_2": "flags",
                "iVar1": "global_data",
                "iVar2": "value_index",
                "uVar3": "counter"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_combining_bytes_equal_to22_08003dd0",
            "code": "\nbool isCombiningBytesEqualTo22_08003dd0(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_combining_bytes_equal_to22_08003dd0",
                "param_1": "input",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_set_08003df4",
            "code": "\nbool isFlagSet_08003df4(int address)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(address + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_set_08003df4",
                "param_1": "address",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "handle_combining_bytes_08003e18",
            "code": "\nundefined4 handle_combining_bytes_08003e18(int input_value,undefined *output_ptr,undefined4 temp_value1,undefined4 temp_value2)\n\n{\n  int is_equal_to_22;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  is_equal_to_22 = is_combining_bytes_equal_to22_08003dd0();\n  if (is_equal_to_22 == 0) {\n    *output_ptr = *(undefined *)(input_value + 0x45);\n    handle_parameters_08002efa((&DAT_200002b4)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200002b4,temp_value2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "handle_combining_bytes_08003e18",
                "param_1": "input_value",
                "param_2": "output_ptr",
                "param_3": "temp_value1",
                "param_4": "temp_value2",
                "iVar1": "is_equal_to_22"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_character_data_08003e54",
            "code": "\nvoid updateCharacterData_08003e54(int inputData,undefined4 newValue,undefined4 unusedParam,undefined4 additionalData)\n\n{\n  int isCombiningBytesEqual;\n  uint byteValue;\n  \n  if (inputData != 0) {\n    isCombiningBytesEqual = is_combining_bytes_equal_to22_08003dd0();\n    if (isCombiningBytesEqual == 0) {\n      byteValue = (uint)*(byte *)(inputData + 0x44);\n      *(undefined4 *)(&DAT_20000214 + byteValue * 4) = newValue;\n      *(int *)(&DAT_2000023c + byteValue * 4) = inputData;\n      updateCharacter((int)*(char *)(inputData + 0x5c),0,1,byteValue,additionalData);\n      setBitValue((int)*(char *)(inputData + 0x5c));\n      handleParameters((&DAT_200002b4)[*(byte *)(inputData + 0x44)],inputData + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_character_data_08003e54",
                "param_1": "inputData",
                "param_2": "newValue",
                "param_3": "unusedParam",
                "param_4": "additionalData",
                "iVar1": "isCombiningBytesEqual",
                "uVar2": "byteValue",
                "update_character_08000e60": "updateCharacter",
                "set_bit_value_08000ec4": "setBitValue",
                "handle_parameters_08002efa": "handleParameters"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_character_data_08003eac",
            "code": "\nvoid updateCharacterData_08003eac(int characterDataPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (characterDataPointer != 0) {\n    byteValue = *(byte *)(characterDataPointer + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = characterDataPointer;\n    updateCharacter((int)*(char *)(characterDataPointer + 0x5c),0,2);\n    setBitValue((int)*(char *)(characterDataPointer + 0x5c));\n    validateInput((&DAT_200002b4)[*(byte *)(characterDataPointer + 0x44)],\n                 *(int *)(characterDataPointer + 0x68) + (uint)*(ushort *)(characterDataPointer + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_character_data_08003eac",
                "param_1": "characterDataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "update_character_08000e60": "updateCharacter",
                "set_bit_value_08000ec4": "setBitValue",
                "validate_input_08002eb2": "validateInput"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_element_index_08003f00",
            "code": "\nuint find_element_index_08003f00(int element)\n\n{\n  uint index;\n  \n  if (element == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (element == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_element_index_08003f00",
                "param_1": "element",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_if_element_found_08003f24",
            "code": "\nvoid executeFunctionIfElementFound_08003f24(void)\n\n{\n  uint elementIndex;\n  \n  elementIndex = findElementIndex();\n  if (elementIndex < 10) {\n    (**(code **)(&DAT_20000214 + elementIndex * 4))(*(undefined4 *)(&DAT_2000023c + elementIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_if_element_found_08003f24",
                "uVar1": "elementIndex",
                "find_element_index_08003f00": "findElementIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "process_element_08003f48",
            "code": "\nvoid process_element_08003f48(void)\n\n{\n  uint element_index;\n  int result;\n  int element;\n  \n  element_index = find_element_index();\n  element = *(int *)(&DAT_2000028c + element_index * 4);\n  if ((element_index < 10) && (result = (**(code **)(&DAT_20000264 + element_index * 4))(element), result != -1)) {\n    validate_input((&DAT_200002b4)[*(byte *)(element + 0x44)],\n                 *(int *)(element + 0x68) + (uint)*(ushort *)(element + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "process_element_08003f48",
                "uVar1": "element_index",
                "iVar2": "result",
                "iVar3": "element",
                "find_element_index_08003f00": "find_element_index",
                "validate_input_08002eb2": "validate_input"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nuint32_t get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 param,int memoryOffset)\n\n{\n  *(undefined4 *)(memoryOffset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param",
                "param_2": "memoryOffset"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "is_one_080040e0",
            "code": "\nuint32_t is_one_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "is_one_080040e0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nundefined4 initialize_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nundefined4 initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_data_with_conditions_080040ec",
            "code": "\nvoid process_data_with_conditions_080040ec(undefined4 condition1,undefined4 condition2,undefined4 data1,undefined4 data2)\n\n{\n  process_data_with_conditions_080040ec_08003d18(condition2,data1,data1,data2,data2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_data_with_conditions_080040ec",
                "param_1": "condition1",
                "param_2": "condition2",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "is_function_successful_0800410c",
            "code": "\nundefined4 is_function_successful_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "is_function_successful_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_conditions_and_memory_08004110",
            "code": "\nvoid updateConditionsAndMemory_08004110(uint param1,undefined4 param2,undefined4 param3,undefined *param4)\n\n{\n  int result;\n  undefined *pointer;\n  int value;\n  \n  if (param1 < 0x60) {\n    value = (int)*(short *)(&DAT_08005d3c + param1 * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    value = -1;\n    pointer = param4;\n  }\n  if (value != -1) {\n    result = getBitValue(value,&DAT_200002e0,param3,pointer,param4);\n    if (result != 0) {\n      result = findValueInArray(value,&DAT_08005a18);\n      if (result == 0) {\n        result = findValueInArray(value,&DAT_08005a3c);\n        if (result != 0) {\n          updateConditions(value);\n        }\n      }\n      else {\n        processParameter(value);\n      }\n      updateBit(value,&DAT_200002e0);\n    }\n    switch(param2) {\n    case 0:\n      updateMemoryAndRegisters(value,0);\n      break;\n    case 1:\n      updateMemoryAndRegisters(value,1,0);\n      break;\n    case 2:\n      updateMemoryAndRegisters(value,0,1);\n      break;\n    case 3:\n      updateMemoryAndRegisters(value,0,2);\n    }\n    setBitInArray(value,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_conditions_and_memory_08004110",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "value",
                "get_bit_value_08003138": "getBitValue",
                "find_value_in_array_0800355e": "findValueInArray",
                "update_conditions_08003414": "updateConditions",
                "process_parameter_080033d8": "processParameter",
                "update_bit_0800316c": "updateBit",
                "update_memory_and_registers_08003486": "updateMemoryAndRegisters",
                "set_bit_in_array_0800314e": "setBitInArray"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "update_param_based_on_condition_080041bc",
            "code": "\nvoid updateParamBasedOnCondition_080041bc(uint value,undefined4 condition,undefined4 param,undefined *data)\n\n{\n  int bitValue;\n  undefined4 memoryAddress;\n  undefined *pointer;\n  uint lookupValue;\n  \n  if (value < 0x60) {\n    lookupValue = (uint)*(short *)(&DAT_08005d3c + value * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    lookupValue = 0xffffffff;\n    pointer = data;\n  }\n  if ((lookupValue != 0xffffffff) &&\n     (bitValue = get_bit_value_08003138(lookupValue,&DAT_2000030c,param,pointer,data), bitValue != 0)) {\n    memoryAddress = get_memory_address_0800318c((lookupValue << 0x18) >> 0x1c);\n    update_param_with_condition_080034b6(memoryAddress,1 << (lookupValue & 0xf) & 0xffff,condition);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "update_param_based_on_condition_080041bc",
                "param_1": "value",
                "param_2": "condition",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "bitValue",
                "uVar2": "memoryAddress",
                "puVar3": "pointer",
                "uVar4": "lookupValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_global_data_08004204",
            "code": "\nvoid initialize_global_data_08004204(void)\n\n{\n  initialize_global_data_08004204_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_global_data_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_result_08004240",
            "code": "\nushort calculate_result_08004240(int input_value)\n\n{\n  return (*(short *)(input_value + 0x138) + 0x40) - *(short *)(input_value + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_result_08004240",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "handle_combining_bytes_080042ac",
            "code": "\nvoid handle_combining_bytes_080042ac(int input_param)\n\n{\n  int result;\n  ushort new_value;\n  undefined byte_value;\n  \n  result = handle_combining_bytes_080042ac_08003e18(input_param,&byte_value);\n  if ((result == 0) &&\n     (new_value = *(short *)(input_param + 100) + 1U & 0x3f, new_value != *(ushort *)(input_param + 0x66))) {\n    *(undefined *)(*(int *)(input_param + 0x60) + (uint)*(ushort *)(input_param + 100)) = byte_value;\n    *(ushort *)(input_param + 100) = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "handle_combining_bytes_080042ac",
                "param_1": "input_param",
                "iVar1": "result",
                "uVar2": "new_value",
                "local_9": "byte_value"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "update_character_data_080042e8",
            "code": "\nundefined4 updateCharacterData_080042e8(int functionArg,undefined data)\n\n{\n  byte byteValue;\n  byte maskedValue;\n  int flagStatus;\n  \n  *(undefined *)(functionArg + 0x10) = 1;\n  flagStatus = *(ushort *)(functionArg + 0x140) + 1;\n  byteValue = (byte)flagStatus;\n  maskedValue = byteValue & 0x7f;\n  if (flagStatus == 0) {\n    maskedValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(functionArg + 0x142) == (ushort)maskedValue);\n  *(undefined *)(*(int *)(functionArg + 0x13c) + (uint)*(ushort *)(functionArg + 0x140)) = data;\n  *(ushort *)(functionArg + 0x140) = (ushort)maskedValue;\n  flagStatus = is_flag_set_08003df4(functionArg + 0xd4);\n  if (flagStatus == 0) {\n    update_character_data_08003eac(functionArg + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "update_character_data_080042e8",
                "param_1": "functionArg",
                "param_2": "data",
                "bVar1": "byteValue",
                "bVar2": "maskedValue",
                "iVar3": "flagStatus"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_08004364",
            "code": "\nvoid initializeData_08004364(int dataAddress)\n\n{\n  *(int *)(dataAddress + 0x134) = dataAddress + 0x11;\n  *(undefined2 *)(dataAddress + 0x138) = 0;\n  *(undefined2 *)(dataAddress + 0x13a) = 0;\n  *(int *)(dataAddress + 0x13c) = dataAddress + 0x51;\n  *(undefined2 *)(dataAddress + 0x140) = 0;\n  *(undefined2 *)(dataAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "dataAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_hardware_serial_08004388",
            "code": "\nvoid initializeHardwareSerial_08004388(int serialData,undefined4 baudRate,byte configByte)\n\n{\n  uint extraOut;\n  byte configByteMasked;\n  int uartMode;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialData + 0x11c) = baudRate;\n  *(byte *)(serialData + 0x144) = configByte;\n  configByteMasked = configByte & 7;\n  if (configByteMasked == 4) {\n    uartMode = 7;\n  }\n  else if (configByteMasked == 6) {\n    uartMode = 8;\n  }\n  else if (configByteMasked == 2) {\n    uartMode = 6;\n  }\n  else {\n    uartMode = 0;\n  }\n  if ((configByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialData + 0x128) = 0x600;\n    uartMode = uartMode + 1;\n  }\n  else if ((configByte & 0x20) == 0) {\n    *(undefined4 *)(serialData + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialData + 0x128) = 0x400;\n    uartMode = uartMode + 1;\n  }\n  if ((configByte & 8) == 0) {\n    *(undefined4 *)(serialData + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialData + 0x124) = 0x2000;\n  }\n  if (uartMode == 8) {\n    *(undefined4 *)(serialData + 0x120) = 0;\n  }\n  else if (uartMode == 9) {\n    *(undefined4 *)(serialData + 0x120) = 0x1000;\n  }\n  else {\n    uartMode = 0;\n  }\n  if (uartMode != 0) {\n    initialize_uart_peripheral_08003978(serialData + 0xd4);\n    update_character_data_08003e54(serialData + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  assertion_failure_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (extraOut < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + extraOut * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_hardware_serial_08004388",
                "param_1": "serialData",
                "param_2": "baudRate",
                "param_3": "configByte",
                "extraout_r1": "extraOut",
                "bVar1": "configByteMasked",
                "iVar2": "uartMode",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_return_value_based_on_param_08004444",
            "code": "\nvoid setReturnValueBasedOnParam_08004444(int returnValue,uint paramValue)\n\n{\n  undefined2 value;\n  code *jumpTable;\n  \n  if (paramValue < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + paramValue * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(returnValue + 0x12e) = value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_return_value_based_on_param_08004444",
                "param_1": "returnValue",
                "param_2": "paramValue",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "assign_parameter_value_08004460",
            "code": "\nvoid assignParameterValue_08004460(int targetAddress,uint valueIndex)\n\n{\n  undefined2 parameterValue;\n  \n  if (valueIndex < 0x60) {\n    parameterValue = *(undefined2 *)(&DAT_08005d3c + valueIndex * 2);\n  }\n  else {\n    parameterValue = 0xffff;\n  }\n  *(undefined2 *)(targetAddress + 300) = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "assign_parameter_value_08004460",
                "param_1": "targetAddress",
                "param_2": "valueIndex",
                "uVar1": "parameterValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_param_data_0800447c",
            "code": "\nundefined4 *\ninitialize_param_data_0800447c(undefined4 *param_array,undefined4 value_param,undefined4 assignment_param,undefined4 default_param)\n\n{\n  undefined2 found_value;\n  \n  param_array[1] = 0;\n  param_array[2] = 1000;\n  *param_array = &PTR_FUN_080042e8_1_08005ed4;\n  if (param_array == &DAT_20000338) {\n    set_return_value_based_on_param_08004444(&DAT_20000338,0x4c,assignment_param,&DAT_20000338,default_param);\n    assign_parameter_value_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    found_value = find_value_or_default_0800351e(value_param,&DAT_08005c10);\n    *(undefined2 *)((int)param_array + 0x12e) = found_value;\n    found_value = find_value_or_default_0800351e(value_param,&DAT_08005ca0);\n    *(undefined2 *)(param_array + 0x4b) = found_value;\n  }\n  initialize_data_08004364(param_array);\n  return param_array;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_param_data_0800447c",
                "param_1": "param_array",
                "param_2": "value_param",
                "param_3": "assignment_param",
                "param_4": "default_param",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_param_data_if_param1_is_one_080044d8",
            "code": "\nvoid initialize_param_data_if_param1_is_one_080044d8(int is_param1_one,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1_one != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_param_data(&DAT_20000338,0x40004800,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_param_data_if_param1_is_one_080044d8",
                "param_1": "is_param1_one",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value",
                "initialize_param_data_0800447c": "initialize_param_data"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08005f28;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_data_if_condition_met_08004560",
            "code": "\nvoid initialize_data_if_condition_met_08004560(int input_value_1,int input_value_2)\n\n{\n  if ((input_value_1 == 1) && (input_value_2 == 0xffff)) {\n    initialize_data_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_data_if_condition_met_08004560",
                "param_1": "input_value_1",
                "param_2": "input_value_2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_and_shift_08004640",
            "code": "\nuint combineAndShift_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_and_shift_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_application_08004648",
            "code": "\nvoid initialize_application_08004648(void)\n\n{\n  update_configuration_value(3);\n  initialize_application_08004648_and_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_application_08004648",
                "update_configuration_value_08000e3c": "update_configuration_value",
                "initialize_application_and_system_08000d8e": "initialize_application_and_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "main_loop_08004658",
            "code": "\nvoid mainLoop_08004658(void)\n\n{\n  FUNC_08004646();\n  initializeSystemData();\n  do {\n    updateParameterAndCheck();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "main_loop_08004658",
                "initialize_system_08000c4c": "initializeSystemData",
                "update_parameter_and_check_08000c64": "updateParameterAndCheck"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_bits_08004678",
            "code": "\nchar countBits_08004678(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_bits_08004678",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_parameters_080046b4",
            "code": "\nvoid initializeParameters_080046b4(int value1,int value2,undefined4 param3,undefined4 param4)\n\n{\n  if (value1 != 1) {\n    return;\n  }\n  if (value2 == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftUpperBits(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_parameters_080046b4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "shift_upper_bits_080047fe": "shiftUpperBits"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "process_data_080047c0",
            "code": "\nvoid processData_080047c0(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  handle_data_processing_08005760();\n  bitCount = count_bits_08004678();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    processData_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "process_data_080047c0",
                "param_1": "data",
                "iVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "process_data_based_on_bit_count_080047d0",
            "code": "\nvoid process_data_based_on_bit_count_080047d0(void)\n\n{\n  int bitCount;\n  \n  bitCount = count_bits();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "process_data_based_on_bit_count_080047d0",
                "iVar1": "bitCount",
                "count_bits_08004678": "count_bits",
                "process_data_080047c0": "process_data"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_upper_bits_080047fe",
            "code": "\nvoid shift_upper_bits_080047fe(undefined4 destination,undefined4 source)\n\n{\n  shift_upper_bits_080047fe_08004844(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_upper_bits_080047fe",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "assertion_failure_08004808",
            "code": "\nvoid assertionFailure_08004808(undefined4 file,undefined4 line,char *errorMessage,undefined4 additionalInfo)\n\n{\n  undefined4 fileAddress;\n  char *prefix;\n  undefined8 dataResult;\n  undefined4 info;\n  \n  fileAddress = *(undefined4 *)(DAT_200000a0 + 0xc);\n  info = additionalInfo;\n  if (errorMessage == (char *)0x0) goto LAB_0800482c;\n  prefix = \", function: \";\n  do {\n    processData(fileAddress,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",additionalInfo,file,line\n                 ,prefix,errorMessage,info);\n    dataResult = handleDataProcessing();\n    line = (undefined4)((ulonglong)dataResult >> 0x20);\n    fileAddress = (undefined4)dataResult;\nLAB_0800482c:\n    errorMessage = \"\";\n    prefix = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "assertion_failure_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "errorMessage",
                "param_4": "additionalInfo",
                "uVar1": "fileAddress",
                "pcVar2": "prefix",
                "uVar3": "dataResult",
                "uVar4": "info",
                "process_data_08004860": "processData",
                "handle_data_processing_080051ac": "handleDataProcessing"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_upper_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftUpperBits_08004844(undefined4 inputValue,uint bitShiftValue)\n\n{\n  return (ulonglong)bitShiftValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_upper_bits_08004844",
                "param_1": "inputValue",
                "param_2": "bitShiftValue"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_data_08004860",
            "code": "\nvoid process_data_08004860(undefined4 input_1,undefined4 input_2,undefined4 stack_value_1,undefined4 stack_value_2)\n\n{\n  undefined4 stack_value_3;\n  undefined4 stack_value_4;\n  \n  stack_value_3 = stack_value_1;\n  stack_value_4 = stack_value_2;\n  process_data_08004860_08004a84(DAT_200000a0,input_1,input_2,&stack_value_3,input_1,&stack_value_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "stack_value_1",
                "param_4": "stack_value_2",
                "uStack_8": "stack_value_3",
                "uStack_4": "stack_value_4"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_within_range_08004884",
            "code": "\nvoid executeFunctionsWithinRange_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_within_range_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_with_value_080048cc",
            "code": "\nvoid fillMemoryWithValue_080048cc(undefined *dest,undefined value,int numBytes)\n\n{\n  undefined *endAddress;\n  \n  endAddress = dest + numBytes;\n  for (; dest != endAddress; dest = dest + 1) {\n    *dest = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_with_value_080048cc",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "numBytes",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "manage_data_080048dc",
            "code": "\nvoid manageData_080048dc(undefined4 *result,int dataSize,undefined4 param3,undefined4 param4)\n\n{\n  int *temp1;\n  int **extraVar1;\n  int **ppiVar2;\n  int **ppiVar3;\n  int **ppiVar4;\n  int **ppiVar5;\n  bool flag;\n  \n  if (dataSize == 0) {\n    return;\n  }\n  ppiVar5 = (int **)(dataSize + -4);\n  if (*(int *)(dataSize + -4) < 0) {\n    ppiVar5 = (int **)((int)ppiVar5 + *(int *)(dataSize + -4));\n  }\n  FUNC_0800557c();\n  ppiVar3 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    ppiVar5[1] = (int *)0x0;\n    ppiVar2 = extraVar1;\n    DAT_200005c8 = ppiVar5;\n  }\n  else {\n    ppiVar3 = DAT_200005c8;\n    if (ppiVar5 < DAT_200005c8) {\n      ppiVar2 = (int **)*ppiVar5;\n      ppiVar3 = (int **)((int)ppiVar5 + (int)ppiVar2);\n      flag = DAT_200005c8 == ppiVar3;\n      if (flag) {\n        ppiVar3 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      ppiVar5[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = ppiVar5;\n      if (flag) {\n        ppiVar3 = (int **)((int)ppiVar3 + (int)ppiVar2);\n        *ppiVar5 = (int *)ppiVar3;\n      }\n    }\n    else {\n      do {\n        ppiVar4 = ppiVar3;\n        ppiVar3 = (int **)ppiVar4[1];\n        if (ppiVar3 == (int **)0x0) break;\n      } while (ppiVar3 <= ppiVar5);\n      ppiVar2 = (int **)*ppiVar4;\n      if ((int **)((int)ppiVar4 + (int)ppiVar2) == ppiVar5) {\n        ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n        *ppiVar4 = (int *)ppiVar2;\n        if (ppiVar3 == (int **)((int)ppiVar4 + (int)ppiVar2)) {\n          temp1 = *ppiVar3;\n          ppiVar3 = (int **)ppiVar3[1];\n          ppiVar4[1] = (int *)ppiVar3;\n          ppiVar2 = (int **)((int)ppiVar2 + (int)temp1);\n          *ppiVar4 = (int *)ppiVar2;\n        }\n      }\n      else if (ppiVar5 < (int **)((int)ppiVar4 + (int)ppiVar2)) {\n        *result = 0xc;\n      }\n      else {\n        ppiVar2 = (int **)((int)ppiVar5 + (int)*ppiVar5);\n        flag = ppiVar3 == ppiVar2;\n        if (flag) {\n          ppiVar2 = (int **)*ppiVar3;\n          ppiVar3 = (int **)ppiVar3[1];\n        }\n        ppiVar5[1] = (int *)ppiVar3;\n        if (flag) {\n          ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n          *ppiVar5 = (int *)ppiVar2;\n        }\n        ppiVar4[1] = (int *)ppiVar5;\n      }\n    }\n  }\n  FUNC_0800557e(result,ppiVar2,ppiVar3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "manage_data_080048dc",
                "param_1": "result",
                "param_2": "dataSize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp1",
                "extraout_r1": "extraVar1",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocate_memory_08004978(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    last_block = DAT_200005c8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          last_block = (uint *)((int)previous_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = initialize_memory_0800500c(result);\n    }\n    current_block = (uint *)initialize_memory_0800500c(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_space = initialize_memory_0800500c(result,(int)last_block - (int)current_block), remaining_space != -1)))) {\n      *last_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(result);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(last_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)last_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_0800557e(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_byte_08004a34",
            "code": "\nuint processByte_08004a34(int param1,byte byteValue,byte **byteArray)\n\n{\n  int tempVar1;\n  byte *tempVar2;\n  byte *tempVar3;\n  uint returnValue;\n  \n  tempVar2 = byteArray[2] + -1;\n  byteArray[2] = tempVar2;\n  if ((-1 < (int)tempVar2) ||\n     (((int)byteArray[6] <= (int)tempVar2 && (tempVar2 = (byte *)(uint)byteValue, tempVar2 != (byte *)0xa))))\n  {\n    tempVar2 = *byteArray;\n    *byteArray = tempVar2 + 1;\n    *tempVar2 = byteValue;\n    return (uint)byteValue;\n  }\n  if ((param1 != 0) && (*(int *)(param1 + 0x18) == 0)) {\n    initialize_data_structure_080053a0();\n  }\n  if (byteArray == (byte **)&DAT_08005fc0) {\n    byteArray = *(byte ***)(param1 + 4);\n  }\n  else if (byteArray == (byte **)&DAT_08005fe0) {\n    byteArray = *(byte ***)(param1 + 8);\n  }\n  else if (byteArray == (byte **)&DAT_08005fa0) {\n    byteArray = *(byte ***)(param1 + 0xc);\n  }\n  byteArray[2] = byteArray[6];\n  tempVar3 = (byte *)(uint)*(ushort *)(byteArray + 3);\n  tempVar1 = (int)tempVar3 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar3 = byteArray[4], tempVar3 != (byte *)0x0)) ||\n     (tempVar1 = cleanup_and_process_080050d0(param1,byteArray,tempVar1,tempVar3,tempVar2), tempVar1 == 0)) {\n    tempVar1 = (int)*byteArray - (int)byteArray[4];\n    returnValue = (uint)byteValue;\n    if ((tempVar1 < (int)byteArray[5]) || (tempVar1 = process_data_080052cc(param1,byteArray), tempVar1 == 0)) {\n      byteArray[2] = byteArray[2] + -1;\n      tempVar2 = *byteArray;\n      *byteArray = tempVar2 + 1;\n      *tempVar2 = byteValue;\n      if ((byte *)(tempVar1 + 1) != byteArray[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byteArray + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      tempVar1 = process_data_080052cc(param1,byteArray);\n      if (tempVar1 == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_byte_08004a34",
                "param_1": "param1",
                "param_2": "byteValue",
                "param_3": "byteArray",
                "iVar1": "tempVar1",
                "pbVar2": "tempVar2",
                "pbVar3": "tempVar3",
                "uVar4": "returnValue"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_bytes_08004a60",
            "code": "\nint process_bytes_08004a60(undefined4 input_parameter,undefined4 output_parameter,undefined *data_array,int array_size)\n\n{\n  int result;\n  undefined *end_of_data;\n  int current_index;\n  \n  end_of_data = data_array + array_size;\n  current_index = array_size;\n  do {\n    if (data_array == end_of_data) {\n      return 0;\n    }\n    result = process_byte_08004a34(input_parameter,*data_array,output_parameter,array_size,current_index);\n    array_size = result + 1;\n    data_array = data_array + 1;\n  } while (array_size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_bytes_08004a60",
                "param_1": "input_parameter",
                "param_2": "output_parameter",
                "param_3": "data_array",
                "param_4": "array_size",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint processData_08004a84(int input,undefined4 *data,byte *buffer,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool found;\n  byte *currentByte;\n  byte *nextByte;\n  int temp;\n  int count;\n  int *ptrArray;\n  uint flags;\n  int precision;\n  undefined4 temp1;\n  int width;\n  int total;\n  byte specifier;\n  undefined blank;\n  undefined plus;\n  undefined alternate;\n  undefined4 store;\n  \n  ptrArray = output;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_data_structure_080053a0();\n  }\n  if (data == &DAT_08005fc0) {\n    data = *(undefined4 **)(input + 4);\n  }\n  else if (data == (undefined4 *)&DAT_08005fe0) {\n    data = *(undefined4 **)(input + 8);\n  }\n  else if (data == (undefined4 *)&DAT_08005fa0) {\n    data = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data + 3) << 0x1c)) || (data[4] == 0)) &&\n     (count = cleanup_and_process_080050d0(input,data), count != 0)) {\n    return -1;\n  }\n  total = 0;\n  blank = 0x20;\n  plus = 0x30;\n  currentByte = buffer;\nLAB_08004ac6:\n  nextByte = currentByte;\n  if (*nextByte != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  currentByte = nextByte + 1;\n  if (*nextByte != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  count = (int)nextByte - (int)buffer;\n  if (count != 0) {\n    result = process_bytes_08004a60(input,data,buffer,count);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total;\n    }\n    total = total + count;\n  }\n  if (*nextByte == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  temp1 = 0;\n  alternate = 0;\n  store = 0;\n  currentByte = nextByte + 1;\n  while( true ) {\n    count = find_occurrence_08000230(\"#-0+ \",*currentByte);\n    buffer = currentByte + 1;\n    if (count == 0) break;\n    flags = 1 << (count + 0xf7ffa094U & 0xff) | flags;\n    currentByte = buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    alternate = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    alternate = 0x2b;\n  }\n  if (*currentByte == 0x2a) {\n    ptr = ptrArray + 1;\n    count = *ptrArray;\n    ptrArray = ptr;\n    if (count < 0) {\n      width = -count;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    found = false;\n    count = width;\n    buffer = currentByte;\n    while( true ) {\n      if (9 < *buffer - 0x30) break;\n      count = count * 10 + (*buffer - 0x30);\n      found = true;\n      buffer = buffer + 1;\n    }\n    if (!found) goto LAB_08004bae;\n  }\n  width = count;\nLAB_08004bae:\n  if (*buffer == 0x2e) {\n    if (buffer[1] == 0x2a) {\n      precision = *ptrArray;\n      if (precision < 0) {\n        precision = -1;\n      }\n      buffer = buffer + 2;\n      ptrArray = ptrArray + 1;\n    }\n    else {\n      found = false;\n      precision = 0;\n      count = 0;\n      while( true ) {\n        buffer = buffer + 1;\n        if (9 < *buffer - 0x30) break;\n        count = count * 10 + (*buffer - 0x30);\n        found = true;\n      }\n      if (found) {\n        precision = count;\n      }\n    }\n  }\n  count = find_occurrence_08000230(&DAT_08005f72,*buffer,3);\n  if (count != 0) {\n    flags = flags | 0x40 << (count + 0xf7ffa08eU & 0xff);\n    buffer = buffer + 1;\n  }\n  specifier = *buffer;\n  buffer = buffer + 1;\n  count = find_occurrence_08000230(\"efgEFG\",specifier,6);\n  if (count == 0) {\n    temp = decode_and_call_function_08004d9c(input,&flags,data,0x8004a61,&ptrArray);\n    if (temp == -1) goto LAB_08004c70;\n  }\n  else {\n    ptrArray = (int *)(((int)ptrArray + 7U & 0xfffffff8) + 8);\n  }\n  total = total + temp;\n  currentByte = buffer;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "param_1": "input",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "found",
                "pbVar4": "currentByte",
                "pbVar5": "nextByte",
                "unaff_r9": "temp",
                "iVar6": "count",
                "local_8c": "ptrArray",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "temp1",
                "local_7c": "width",
                "local_74": "total",
                "local_70": "specifier",
                "local_6f": "blank",
                "local_6e": "plus",
                "local_45": "alternate",
                "local_30": "store"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "decode_data_08004cb0",
            "code": "\nundefined4\ndecode_data_08004cb0(undefined4 data,uint *metadata,uint *result,undefined4 param,code *callback)\n\n{\n  int index;\n  int returnValue;\n  uint maxSize;\n  uint counter;\n  bool isFlagSet;\n  \n  maxSize = metadata[4];\n  if ((int)metadata[4] < (int)metadata[2]) {\n    maxSize = metadata[2];\n  }\n  *result = maxSize;\n  if (*(char *)((int)metadata + 0x43) != '\\0') {\n    *result = maxSize + 1;\n  }\n  if ((int)(*metadata << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*metadata & 6) == 0) {\n    for (index = 0; index < (int)(metadata[3] - *result); index = index + 1) {\n      returnValue = (*callback)(data,param,(int)metadata + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)metadata + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*metadata << 0x1a) < 0) {\n    *(undefined *)((int)metadata + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)metadata + maxSize + 0x44) = *(undefined *)((int)metadata + 0x45);\n    maxSize = maxSize + 2;\n  }\n  index = (*callback)(data,param,(int)metadata + 0x43,maxSize);\n  if (index != -1) {\n    maxSize = metadata[3];\n    isFlagSet = (*metadata & 6) == 4;\n    if (isFlagSet) {\n      maxSize = maxSize - *result;\n    }\n    if (isFlagSet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)metadata[4] < (int)metadata[2]) {\n      maxSize = maxSize + (metadata[2] - metadata[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxSize == counter) {\n        return 0;\n      }\n      index = (*callback)(data,param,(int)metadata + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "decode_data_08004cb0",
                "param_1": "data",
                "param_2": "metadata",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "returnValue",
                "uVar3": "maxSize",
                "uVar4": "counter",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decode_and_call_function_08004d9c",
            "code": "\nuint decode_and_call_function_08004d9c(undefined4 input_param,uint *data_array,undefined4 param_3,code *callback_function,uint **output_param)\n\n{\n  byte byte_value;\n  int index;\n  uint *pointer_value;\n  int loop_index;\n  char *char_pointer;\n  uint temp_value;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result_value;\n  uint array_value;\n  char *char_pointer2;\n  char *char_pointer3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data_array + 6);\n  char_pointer3 = (char *)((int)data_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08004f56;\n          if (byte_value != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          char_pointer = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          temp_value = *data_array;\n          pointer_value = *output_param;\n          *output_param = pointer_value + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            result_value = (uint)*(ushort *)pointer_value;\n          }\n          else {\n            result_value = *pointer_value;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *data_array = temp_value | 0x20;\n          }\n          if (result_value == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08004dcc;\n          result_value = *data_array;\n          pointer_value = *output_param;\n          if ((result_value & 0x80) == 0) {\n            *output_param = pointer_value + 1;\n            if ((result_value & 0x40) == 0) goto LAB_08004dec;\n            result_value = (uint)(short)*(ushort *)pointer_value;\n          }\n          else {\n            *output_param = pointer_value + 1;\nLAB_08004dec:\n            result_value = *pointer_value;\n          }\n          if ((int)result_value < 0) {\n            result_value = -result_value;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          char_pointer = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        array_value = data_array[1];\n        data_array[2] = array_value;\n        char_pointer2 = char_pointer3;\n        if ((int)array_value < 0) {\n          if (result_value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data_array + 0x42) = *char_pointer;\n          char_pointer2 = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (result_value == 0) {\n            if (array_value != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              array_value = result_value / temp_value;\n              char_pointer2 = char_pointer2 + -1;\n              *char_pointer2 = char_pointer[result_value - temp_value * array_value];\n              result_value = array_value;\n            } while (array_value != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          char_pointer2[-1] = '0';\n          char_pointer2 = char_pointer2 + -1;\n        }\n        data_array[4] = (int)char_pointer3 - (int)char_pointer2;\n        char_pointer3 = char_pointer2;\n        goto LAB_08004ec2;\n      }\n      pointer_value = *output_param;\n      *output_param = pointer_value + 1;\n      *(char *)((int)data_array + 0x42) = (char)*pointer_value;\nLAB_08004e2c:\n      char_pointer3 = (char *)((int)data_array + 0x42);\n      result_value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08004e52:\n            result_value = *data_array;\n            pointer_value = *output_param;\n            if ((result_value & 0x80) == 0) {\n              *output_param = pointer_value + 1;\n              if ((result_value & 0x40) == 0) goto LAB_08004e60;\n              result_value = (uint)*(ushort *)pointer_value;\n            }\n            else {\n              *output_param = pointer_value + 1;\nLAB_08004e60:\n              result_value = *pointer_value;\n            }\n            char_pointer = \"0123456789ABCDEF\";\n            if (byte_value == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_value == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            char_pointer = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08004e52;\n          if (byte_value == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data_array + 0x42) = byte_value;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*output_param;\n      *output_param = (uint *)(ppcVar8 + 1);\n      char_pointer3 = *ppcVar8;\n      index = find_occurrence_08000230(char_pointer3,0,data_array[1]);\n      if (index != 0) {\n        data_array[1] = index - (int)char_pointer3;\n      }\n      result_value = data_array[1];\n    }\n    data_array[4] = result_value;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  result_value = *data_array;\n  ppuVar7 = (uint **)*output_param;\n  temp_value = data_array[5];\n  if ((result_value & 0x80) == 0) {\n    *output_param = (uint *)(ppuVar7 + 1);\n    pointer_value = *ppuVar7;\n    if ((result_value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer_value = (short)temp_value;\n  }\n  else {\n    *output_param = (uint *)(ppuVar7 + 1);\n    pointer_value = *ppuVar7;\nLAB_08004f42:\n    *pointer_value = temp_value;\n  }\nLAB_08004f56:\n  data_array[4] = 0;\nLAB_08004ec2:\n  index = decode_data_08004cb0(input_param,data_array,local_array,param_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(input_param,param_3,char_pointer3,data_array[4]), index == -1)) {\nLAB_08004ed6:\n    result_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(data_array[3] - local_array[0]); index = index + 1) {\n        loop_index = (*callback_function)(input_param,param_3,(int)data_array + 0x19,1);\n        if (loop_index == -1) goto LAB_08004ed6;\n      }\n    }\n    result_value = data_array[3];\n    if ((int)data_array[3] < (int)local_array[0]) {\n      result_value = local_array[0];\n    }\n  }\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "decode_and_call_function_08004d9c",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_4": "callback_function",
                "param_5": "output_param",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "pointer_value",
                "iVar4": "loop_index",
                "pcVar5": "char_pointer",
                "uVar6": "temp_value",
                "uVar9": "result_value",
                "uVar10": "array_value",
                "pcVar11": "char_pointer2",
                "pcVar12": "char_pointer3",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "process_and_initialize_data_08004fdc",
            "code": "\nvoid process_and_initialize_data_08004fdc(undefined4 data_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  data_ptr = DAT_200000a0;\n  param_1_copy = data_param;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  process_data_08004a84(data_ptr,*(undefined4 *)(data_ptr + 8),data_param,&param_2_copy,param_1_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "process_and_initialize_data_08004fdc",
                "param_1": "data_param",
                "iVar1": "data_ptr",
                "uVar2": "param_1_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "initialize_memory_0800500c",
            "code": "\nvoid initializeMemory_0800500c(int *outputPtr,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000674 = 0;\n  allocationResult = allocate_memory_08004094(size);\n  if ((allocationResult == -1) && (DAT_20000674 != 0)) {\n    *outputPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "initialize_memory_0800500c",
                "param_1": "outputPtr",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "cleanup_and_process_080050d0",
            "code": "\nuint cleanup_and_process_080050d0(undefined4 *result_ptr,undefined4 *data_ptr)\n\n{\n  int base_address;\n  uint result;\n  ushort flags;\n  \n  base_address = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  if (data_ptr == &DAT_08005fc0) {\n    data_ptr = *(undefined4 **)(base_address + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fe0) {\n    data_ptr = *(undefined4 **)(base_address + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fa0) {\n    data_ptr = *(undefined4 **)(base_address + 0xc);\n  }\n  flags = *(ushort *)(data_ptr + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *result_ptr = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)data_ptr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)data_ptr[0xd] != data_ptr + 0x11) {\n          manage_data(result_ptr);\n        }\n        data_ptr[0xd] = 0;\n      }\n      *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) & 0xffdb;\n      data_ptr[1] = 0;\n      *data_ptr = data_ptr[4];\n    }\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 8;\n  }\n  if ((data_ptr[4] == 0) && ((*(ushort *)(data_ptr + 3) & 0x280) != 0x200)) {\n    process_memory(result_ptr,data_ptr);\n  }\n  flags = *(ushort *)(data_ptr + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = data_ptr[5];\n    }\n    data_ptr[2] = result;\n  }\n  else {\n    data_ptr[2] = 0;\n    data_ptr[6] = -data_ptr[5];\n  }\n  if (data_ptr[4] == 0) {\n    flags = *(ushort *)(data_ptr + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(data_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "cleanup_and_process_080050d0",
                "param_1": "result_ptr",
                "param_2": "data_ptr",
                "iVar1": "base_address",
                "uVar2": "result",
                "uVar3": "flags",
                "manage_data_080048dc": "manage_data",
                "process_memory_080054fc": "process_memory"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          manage_data_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    process_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "handle_data_processing_080051ac",
            "code": "\nvoid handle_data_processing_080051ac(void)\n\n{\n  uint *data_ptr;\n  int offset;\n  int *data;\n  int *aux_data;\n  uint ushort_value;\n  ushort ushort_flags;\n  int loop_iterations;\n  code *loop_function;\n  int remaining_iterations;\n  uint initial_value;\n  code *unrecovered_jump_table;\n  bool condition;\n  undefined8 loop_result;\n  \n  handle_parameter_080055d0(6);\n  unrecovered_jump_table = (code *)0x80051bb;\n  loop_result = infinite_loop_080040f8(1);\n  data = (int *)((ulonglong)loop_result >> 0x20);\n  data_ptr = (uint *)loop_result;\n  ushort_flags = *(ushort *)(data + 3);\n  ushort_value = (uint)ushort_flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    offset = data[4];\n    if (offset != 0) {\n      loop_iterations = ushort_value << 0x1e;\n      condition = loop_iterations == 0;\n      remaining_iterations = *data;\n      if (condition) {\n        loop_iterations = data[5];\n      }\n      *data = offset;\n      if (!condition) {\n        loop_iterations = 0;\n      }\n      data[2] = loop_iterations;\n      for (remaining_iterations = remaining_iterations - offset; 0 < remaining_iterations; remaining_iterations = remaining_iterations - loop_iterations) {\n        loop_iterations = (*(code *)data[10])(data_ptr,data[8],offset,remaining_iterations);\n        if (loop_iterations < 1) {\n          ushort_flags = *(ushort *)(data + 3);\n          goto LAB_080052b2;\n        }\n        offset = offset + loop_iterations;\n      }\n    }\n  }\n  else if (((0 < data[1]) || (0 < data[0x10])) &&\n          (loop_function = (code *)data[0xb], loop_function != (code *)0x0)) {\n    initial_value = *data_ptr;\n    *data_ptr = 0;\n    if ((ushort_flags & 0x1000) == 0) {\n      offset = (*loop_function)(data_ptr,data[8],ushort_value & 0x1000,1);\n      if ((offset == -1) && (ushort_value = *data_ptr, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecovered_jump_table)();\n          return;\n        }\n        *data_ptr = initial_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      offset = data[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data + 3) << 0x1d) < 0) &&\n       (offset = offset - data[1], data[0xd] != 0)) {\n      offset = offset - data[0x10];\n    }\n    offset = (*(code *)data[0xb])(data_ptr,data[8],offset,0);\n    ushort_flags = *(ushort *)(data + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(data + 3) = ushort_flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)(0xffffffff);\n      return;\n    }\n    data[1] = 0;\n    *data = data[4];\n    if (((int)((uint)ushort_flags << 0x13) < 0) && ((offset != -1 || (*data_ptr == 0)))) {\n      data[0x15] = offset;\n    }\n    aux_data = (int *)data[0xd];\n    *data_ptr = initial_value;\n    if (aux_data != (int *)0x0) {\n      if (aux_data != data + 0x11) {\n        manage_data_080048dc(data_ptr);\n      }\n      data[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "handle_data_processing_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "offset",
                "piVar3": "data",
                "piVar4": "aux_data",
                "uVar5": "ushort_value",
                "uVar6": "ushort_flags",
                "iVar7": "loop_iterations",
                "pcVar8": "loop_function",
                "iVar9": "remaining_iterations",
                "uVar10": "initial_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "bVar11": "condition",
                "uVar12": "loop_result"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 process_data_080052cc(uint *data_ptr,int *control_ptr)\n\n{\n  undefined4 result;\n  int length;\n  int *recursion_ptr;\n  uint temp_var;\n  ushort flag;\n  int offset;\n  undefined4 var1;\n  undefined4 var2;\n  code *callback;\n  int counter;\n  uint temp_var2;\n  code *jump_table;\n  bool is_zero;\n  \n  if (control_ptr[4] != 0) {\n    if ((data_ptr != (uint *)0x0) && (data_ptr[6] == 0)) {\n      initialize_data_structure_080053a0();\n    }\n    if (control_ptr == &DAT_08005fc0) {\n      control_ptr = (int *)data_ptr[1];\n    }\n    else if (control_ptr == (int *)&DAT_08005fe0) {\n      control_ptr = (int *)data_ptr[2];\n    }\n    else if (control_ptr == (int *)&DAT_08005fa0) {\n      control_ptr = (int *)data_ptr[3];\n    }\n    if (*(short *)(control_ptr + 3) != 0) {\n      flag = *(ushort *)(control_ptr + 3);\n      temp_var = (uint)flag;\n      if ((int)(temp_var << 0x1c) < 0) {\n        length = control_ptr[4];\n        if (length != 0) {\n          offset = temp_var << 0x1e;\n          is_zero = offset == 0;\n          counter = *control_ptr;\n          if (is_zero) {\n            offset = control_ptr[5];\n          }\n          *control_ptr = length;\n          if (!is_zero) {\n            offset = 0;\n          }\n          control_ptr[2] = offset;\n          for (counter = counter - length; 0 < counter; counter = counter - offset) {\n            offset = (*(code *)control_ptr[10])(data_ptr,control_ptr[8],length,counter,var1,var2);\n            if (offset < 1) {\n              flag = *(ushort *)(control_ptr + 3);\n              goto LAB_080052b2;\n            }\n            length = length + offset;\n          }\n        }\n      }\n      else if (((0 < control_ptr[1]) || (0 < control_ptr[0x10])) &&\n              (callback = (code *)control_ptr[0xb], callback != (code *)0x0)) {\n        temp_var2 = *data_ptr;\n        *data_ptr = 0;\n        if ((flag & 0x1000) == 0) {\n          length = (*callback)(data_ptr,control_ptr[8],temp_var & 0x1000,1);\n          if ((length == -1) && (temp_var = *data_ptr, temp_var != 0)) {\n            if ((temp_var != 0x1d) && (temp_var != 0x16)) {\n              *(ushort *)(control_ptr + 3) = *(ushort *)(control_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *data_ptr = temp_var2;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          length = control_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(control_ptr + 3) << 0x1d) < 0) &&\n           (length = length - control_ptr[1], control_ptr[0xd] != 0)) {\n          length = length - control_ptr[0x10];\n        }\n        length = (*(code *)control_ptr[0xb])(data_ptr,control_ptr[8],length,0);\n        flag = *(ushort *)(control_ptr + 3);\n        if ((length == -1) &&\n           ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(control_ptr + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        control_ptr[1] = 0;\n        *control_ptr = control_ptr[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((length != -1 || (*data_ptr == 0)))) {\n          control_ptr[0x15] = length;\n        }\n        recursion_ptr = (int *)control_ptr[0xd];\n        *data_ptr = temp_var2;\n        if (recursion_ptr != (int *)0x0) {\n          if (recursion_ptr != control_ptr + 0x11) {\n            manage_data_080048dc(data_ptr);\n          }\n          control_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data_ptr",
                "param_2": "control_ptr",
                "uVar1": "result",
                "iVar2": "length",
                "piVar3": "recursion_ptr",
                "uVar4": "temp_var",
                "uVar5": "flag",
                "iVar6": "offset",
                "unaff_r4": "var1",
                "unaff_r5": "var2",
                "pcVar7": "callback",
                "iVar8": "counter",
                "uVar9": "temp_var2",
                "bVar10": "is_zero",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            manage_data_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_structure_0800532c",
            "code": "\nvoid initialize_data_structure_0800532c(undefined4 *data_structure,undefined2 value_1,undefined2 value_2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value_1;\n  data_structure[25] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value_2;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  fill_memory_with_value_080048cc(data_structure + 0x17,0,8);\n  data_structure[9] = 0x8005609;\n  data_structure[10] = 0x800562b;\n  data_structure[11] = 0x8005663;\n  data_structure[8] = data_structure;\n  data_structure[12] = &LABEL_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_structure_0800532c",
                "param_1": "data_structure",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[1]": "data_structure[1]",
                "param_1[2]": "data_structure[2]",
                "param_1[0x19]": "data_structure[25]",
                "param_1[4]": "data_structure[4]",
                "param_1[5]": "data_structure[5]",
                "param_1[6]": "data_structure[6]",
                "param_1[9]": "data_structure[9]",
                "param_1[10]": "data_structure[10]",
                "param_1[0xb]": "data_structure[11]",
                "param_1[8]": "data_structure[8]",
                "param_1[0xc]": "data_structure[12]",
                "&LAB_08005686_1": "&LABEL_08005686_1"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_and_fill_memory_08005374",
            "code": "\nundefined4 * allocate_and_fill_memory_08005374(undefined4 memory_block,int num_blocks)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_blocks + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08004978(memory_block,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_blocks;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_with_value_080048cc(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_and_fill_memory_08005374",
                "param_1": "memory_block",
                "param_2": "num_blocks",
                "puVar1": "allocated_memory",
                "iVar2": "total_size"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_structure_080053a0",
            "code": "\nvoid initializeDataStructure_080053a0(undefined4 *structurePtr)\n\n{\n  undefined4 result;\n  undefined4 *tempPtr;\n  \n  if (structurePtr[6] == 0) {\n    structurePtr[0x12] = 0;\n    structurePtr[0x13] = 0;\n    structurePtr[0x14] = 0;\n    tempPtr = &DAT_200000a4;\n    structurePtr[10] = &label1;\n    if (structurePtr == &DAT_200000a4) {\n      tempPtr = (undefined4 *)0x1;\n    }\n    if (structurePtr == &DAT_200000a4) {\n      structurePtr[6] = tempPtr;\n    }\n    result = initialize_data_structure_08005400();\n    structurePtr[1] = result;\n    result = initialize_data_structure_08005400(structurePtr);\n    structurePtr[2] = result;\n    result = initialize_data_structure_08005400(structurePtr);\n    structurePtr[3] = result;\n    initialize_data_structure_0800532c(structurePtr[1],4,0);\n    initialize_data_structure_0800532c(structurePtr[2],9,1);\n    initialize_data_structure_0800532c(structurePtr[3],0x12,2);\n    structurePtr[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_structure_080053a0",
                "param_1": "structurePtr",
                "uVar1": "result",
                "puVar2": "tempPtr",
                "LAB_08005320_1": "label1"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structure_08005400",
            "code": "\nint * initialize_data_structure_08005400(undefined4 *result_status,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_node;\n  int *next_node;\n  int **data_structure;\n  \n  if (DAT_200000bc == 0) {\n    initialize_data_structure_080053a0(&DAT_200000a4);\n  }\n  data_structure = (int **)&DAT_200000ec;\n  do {\n    next_node = data_structure[2];\n    current_node = data_structure[1];\n    while (current_node = (int *)((int)current_node + -1), -1 < (int)current_node) {\n      if (*(short *)(next_node + 3) == 0) {\n        *(undefined2 *)((int)next_node + 0xe) = 0xffff;\n        *(undefined2 *)(next_node + 3) = 1;\n        next_node[0x19] = 0;\n        *next_node = 0;\n        next_node[2] = 0;\n        next_node[1] = 0;\n        next_node[4] = 0;\n        next_node[5] = 0;\n        next_node[6] = 0;\n        fill_memory_with_value_080048cc(next_node + 0x17,0,8,1,param_4);\n        next_node[0xd] = 0;\n        next_node[0xe] = 0;\n        next_node[0x12] = 0;\n        next_node[0x13] = 0;\n        return next_node;\n      }\n      next_node = next_node + 0x1a;\n    }\n    if (*data_structure == (int *)0x0) {\n      current_node = (int *)allocate_and_fill_memory_08005374(result_status,4);\n      *data_structure = current_node;\n      if (current_node == (int *)0x0) {\n        *result_status = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_structure = (int **)*data_structure;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structure_08005400",
                "param_1": "result_status",
                "piVar1": "current_node",
                "piVar2": "next_node",
                "ppiVar3": "data_structure"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_fill_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_memory_access_080054b4",
            "code": "\nundefined4 checkMemoryAccess_080054b4(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int result;\n  undefined4 status;\n  undefined stackBuffer [4];\n  uint localValue;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = initialize_memory_080056d4(param1,(int)*(short *)(param2 + 0xe),stackBuffer), result < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *param4 = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_080054f4:\n  *param3 = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_memory_access_080054b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_4c": "stackBuffer",
                "local_48": "localValue"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_memory_080054fc",
            "code": "\nvoid processMemory_080054fc(int memoryAddress,int *memoryBlock)\n\n{\n  ushort accessCheckResult;\n  int allocatedMemory;\n  int localMemory;\n  int *localBlock;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    localMemory = memoryAddress;\n    localBlock = memoryBlock;\n    accessCheckResult = check_memory_access_080054b4(memoryAddress,memoryBlock,&localMemory,&localBlock);\n    allocatedMemory = allocate_memory_08004978(memoryAddress,localMemory);\n    if (allocatedMemory != 0) {\n      *(undefined **)(memoryAddress + 0x28) = &LAB_08005320_1;\n      *memoryBlock = allocatedMemory;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[5] = localMemory;\n      memoryBlock[4] = allocatedMemory;\n      if ((localBlock != (int *)0x0) &&\n         (allocatedMemory = check_and_assign_value_080056f8(memoryAddress,(int)*(short *)((int)memoryBlock + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = accessCheckResult | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_memory_080054fc",
                "param_1": "memoryAddress",
                "param_2": "memoryBlock",
                "uVar1": "accessCheckResult",
                "iVar2": "allocatedMemory",
                "local_18": "localMemory",
                "local_14": "localBlock"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "handle_parameter_080055d0",
            "code": "\nint handle_parameter_080055d0(uint parameter)\n\n{\n  int *data_array;\n  undefined4 result;\n  int index;\n  code *function_ptr;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  undefined4 *ptr_to_data_array;\n  \n  data_array = DAT_200000a0;\n  ptr_to_data_array = &DAT_200000a0;\n  if (0x1f < parameter) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  index = DAT_200000a0[0x11];\n  if ((index != 0) && (function_ptr = *(code **)(index + parameter * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + parameter * 4) = 0;\n      (*function_ptr)(parameter);\n    }\n    return 0;\n  }\n  result = thunk_is_function_successful_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  index = initialize_data_080040fc(result,parameter,parameter,0,ptr_to_data_array,unused_var1,unused_var2,unused_var3);\n  if ((index == -1) && (DAT_20000674 != 0)) {\n    *data_array = DAT_20000674;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "handle_parameter_080055d0",
                "param_1": "parameter",
                "piVar1": "data_array",
                "uVar2": "result",
                "iVar3": "index",
                "pcVar4": "function_ptr",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "in_lr": "unused_var3",
                "puVar5": "ptr_to_data_array"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_return_value_thunk_0800410c",
            "code": "\nundefined4 getReturnValue_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_return_value_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_value_08005608",
            "code": "\nvoid updateValue_08005608(undefined4 input1,int input2)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = initialize_and_check_errors_0800573c(input1,(int)*(short *)(input2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(input2 + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(input2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(input2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(input2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_value_08005608",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "initialize_and_check_errors_0800562a",
            "code": "\nvoid initializeAndCheckErrors_0800562a(int *outputPointer,int inputPointer,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  if ((int)((uint)*(ushort *)(inputPointer + 0xc) << 0x17) < 0) {\n    initialize_and_check_errors_08005718(outputPointer,(int)*(short *)(inputPointer + 0xe),0,2);\n  }\n  *(ushort *)(inputPointer + 0xc) = *(ushort *)(inputPointer + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_data_with_conditions_080040ec((int)*(short *)(inputPointer + 0xe),param3,param4,param4,param4,localVar1,\n                       localVar2,localVar3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "initialize_and_check_errors_0800562a",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "unaff_r4": "localVar1",
                "unaff_r5": "localVar2",
                "in_lr": "localVar3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_and_update_status_08005662",
            "code": "\nvoid initialize_and_update_status_08005662(undefined4 param,int buffer)\n\n{\n  int result;\n  ushort updated_status;\n  bool isError;\n  \n  result = initialize_and_check_errors_08005718(param,(int)*(short *)(buffer + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updated_status = *(ushort *)(buffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = result;\n    updated_status = *(ushort *)(buffer + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(buffer + 0xc) = updated_status;\n  }\n  if (!isError) {\n    *(ushort *)(buffer + 0xc) = updated_status;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_and_update_status_08005662",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "updated_status",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_memory_080056d4",
            "code": "\nvoid initializeMemory_080056d4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int errorCode;\n  \n  DAT_20000674 = 0;\n  errorCode = initialize_memory_080040d6(arg1,arg2,arg2,0,arg3);\n  if ((errorCode == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_memory_080056d4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_assign_value_080056f8",
            "code": "\nvoid checkAndAssignValue_080056f8(int *resultPtr,undefined4 inputValue)\n\n{\n  int checkResult;\n  \n  DAT_20000674 = 0;\n  checkResult = is_one_080040e0(inputValue);\n  if ((checkResult == -1) && (DAT_20000674 != 0)) {\n    *resultPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_assign_value_080056f8",
                "param_1": "resultPtr",
                "param_2": "inputValue",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_check_errors_08005718",
            "code": "\nvoid initializeAndCheckErrors_08005718(int *output,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_080040e4(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_check_errors_08005718",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_and_check_errors_0800573c",
            "code": "\nvoid initialize_and_check_errors_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20000674 = 0;\n  init_result = initialize_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((init_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_and_check_errors_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "handle_data_processing_08005760",
            "code": "\nvoid handle_data_processing_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_data_processing_08005760;\n  handle_data_processing_08005760_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "handle_data_processing_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119489,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}