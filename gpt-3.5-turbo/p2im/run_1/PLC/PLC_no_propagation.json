{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "extract_data_from_param_080006b4",
                "param_1": "param",
                "bVar1": "data_overflow",
                "uVar2": "extracted_data",
                "iVar3": "function_result",
                "bVar4": "data_index"
            },
            "code": "int extract_data_from_param_080006b4(int **param) {\n  bool data_overflow = false;\n  int data_length = *(byte *)((int)param + 6);\n  if (data_length > 1) {\n    initialize_data(data_length, 0);\n  }\n  *(undefined *)((int)param + 0x49) = 0;\n  if (*(byte *)((int)param + 5) < 4) {\n    while (true) {\n      int function_result = (**(code **)(**param + 8))();\n      if (function_result == 0) {\n        break;\n      }\n      byte data_index = *(byte *)((int)param + 0x49);\n      undefined extracted_data = (**(code **)(**param + 0xc))();\n      *(undefined *)((int)param + data_index + 9) = extracted_data;\n      *(byte *)((int)param + 0x49) = data_index + 1;\n      if (data_index > 0x3f) {\n        data_overflow = true;\n        break;\n      }\n    }\n  }\n  if (data_overflow) {\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n    return -3;\n  }\n  *(short *)(param + 0x14) = *(short *)(param + 0x14) + 1;\n  return (int)*(char *)((int)param + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "extract_data_from_param_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "int"
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_value_in_array_080034da(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_of_uint_080035fc",
                "param_1": "bits_to_set",
                "DAT_08003718": "MASK_0xFFFFFFFE",
                "DAT_0800371c": "MASK_0xFFFFFFFD",
                "DAT_08003720": "MASK_0xFFFFFFFB",
                "DAT_08003724": "MASK_0xFFFFFFF7",
                "DAT_08003728": "MASK_0xFFFFFFF0",
                "DAT_0800372c": "MASK_0xFFFFFFDF",
                "DAT_08003730": "MASK_0xFFFFFFFD",
                "DAT_08003734": "MASK_0xFFFEFFFF",
                "DAT_08003738": "MASK_0xFFFDFFFF",
                "DAT_0800373c": "MASK_0xFFFBFFFF",
                "DAT_08003740": "MASK_0xFFFFFFBF",
                "DAT_08003744": "MASK_0xFFFFFF7F",
                "DAT_08003748": "MASK_0xFFFFFEFF",
                "*DAT_0800374c": "target"
            },
            "code": "void set_bits_of_uint_080035fc(uint **DAT_0800374c, uint bits_to_set) {\n  if (bits_to_set == DAT_08003718) {\n    **DAT_0800374c &= 0xfffffffe;\n  }\n  if (bits_to_set == 0x40000000) {\n    *(*DAT_0800374c + 0x10) &= 0xfffffffe;\n  }\n  if (bits_to_set == DAT_0800371c) {\n    *(*DAT_0800374c + 0x10) &= 0xfffffffd;\n  }\n  if (bits_to_set == DAT_08003720) {\n    *(*DAT_0800374c + 0x10) &= 0xfffffffb;\n  }\n  if (bits_to_set == DAT_08003724) {\n    *(*DAT_0800374c + 0x10) &= 0xfffffff7;\n  }\n  if (bits_to_set == DAT_08003728) {\n    *(*DAT_0800374c + 0x10) &= 0xffffffef;\n  }\n  if (bits_to_set == DAT_0800372c) {\n    *(*DAT_0800374c + 0x10) &= 0xffffffdf;\n  }\n  if (bits_to_set == DAT_08003730) {\n    *(*DAT_0800374c + 0x14) &= 0xfffffffd;\n  }\n  if (bits_to_set == DAT_08003734) {\n    *(*DAT_0800374c + 0x14) &= 0xfffeffff;\n  }\n  if (bits_to_set == DAT_08003738) {\n    *(*DAT_0800374c + 0x14) &= 0xfffdffff;\n  }\n  if (bits_to_set == DAT_0800373c) {\n    *(*DAT_0800374c + 0x14) &= 0xfffbffff;\n  }\n  if (bits_to_set == DAT_08003740) {\n    *(*DAT_0800374c + 0x10) &= 0xffffffbf;\n  }\n  if (bits_to_set == DAT_08003744) {\n    *(*DAT_0800374c + 0x10) &= 0xffffff7f;\n  }\n  if (bits_to_set == DAT_08003748) {\n    *(*DAT_0800374c + 0x10) &= 0xfffffeff;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_of_uint_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_valid_08003dd0",
                "param_1": "item_index",
                "uVar1": "ptr",
                "PTR_DAT_08003df0": "data_pointer",
                "byte": "byte_value",
                "FUN_0800312c": "function_call",
                "result": "result"
            },
            "code": "bool is_valid_08003dd0(int item_index) {\n  uint32_t ptr = *(uint32_t *)(PTR_DAT_08003df0 + (uint32_t)*(uint8_t *)(item_index + 0x44) * 4);\n  uint32_t result = FUN_0800312c(ptr);\n  return (result & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "is_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_game_08000c8c",
                "local_54": "player_lives",
                "local_50": "player_score",
                "local_3c": "player_speed",
                "local_38": "player_jump_height",
                "local_34": "player_size",
                "local_30": "player_color",
                "local_2c": "player_weapon",
                "local_28": "player_strength",
                "local_24": "level_difficulty",
                "local_20": "level_music",
                "local_1c": "level_boss",
                "local_18": "level_background",
                "local_14": "level_foreground",
                "DAT_08000d30": "game_config",
                "DAT_08000d34": "sound_config",
                "DAT_08000d38": "game_speed",
                "FUNC_0800201c": "initialize_player",
                "FUN_08001f9c": "initialize_sound",
                "FUN_08002488": "initialize_level",
                "FUN_080025e0": "calculate_level_time",
                "FUN_08000ee0": "set_game_time",
                "FUN_08000f2c": "set_game_state",
                "FUN_08000e60": "reset_game_state"
            },
            "code": "void initialize_game_08000c8c(void)\n{\n  uint32_t screen_settings = 0x10000000;\n  uint32_t sound_settings = 0xc000;\n  uint32_t player_settings[] = {1, 0x50000, 2, 0x400000, 8, 0x150, 2, 7};\n  initialize_player(player_settings);\n  initialize_sound();\n  uint32_t level_settings[] = {0xf, 2, 0, 0x1400, 0x1000};\n  initialize_level(level_settings);\n  uint32_t level_time = calculate_level_time();\n  set_game_time((uint32_t)((uint64_t)DAT_08000d38 * (uint64_t)level_time >> 0x26));\n  set_game_state(4);\n  reset_game_state();\n}\n",
            "called": [
                "FUN_08000ee0",
                "FUN_08000f2c",
                "FUN_0800201c",
                "FUN_08000e60",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_game_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_value_at_index_08000a4e",
                "param_1": "array_address",
                "param_2": "index",
                "bVar1": "index_value",
                "uVar2": "value_at_index"
            },
            "code": "uint8_t get_value_at_index_08000a4e(uint32_t array_address, uint32_t index) {\n    uint8_t index_value = get_byte_from_address(array_address + 0xb);\n    uint16_t value_at_index = get_value_from_address(array_address + 0xd);\n    set_value_at_address(array_address + index_value * 2, value_at_index);\n    set_byte_at_address(array_address + 0x49, 6);\n    call_function_at_address(array_address);\n    return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "do_something_until_condition_met_08004658",
                "FUN_08000c4c": "initialize_system",
                "FUN_08000c64": "perform_subtask",
                "FUN_08004338": "process_data",
                "DAT_08004674": "data_flag"
            },
            "code": "void do_something_until_condition_met_08004658() {\n  do_nothing();\n  initialize_system();\n  do {\n    do {\n      perform_subtask();\n    } while (DAT_08004674 == 0);\n    process_data();\n  } while(true);\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c64",
                "FUN_08004338",
                "FUN_08000c4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "do_something_until_condition_met_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "check_parameter_080034f4",
                "param_1": "param",
                "uVar1": "result",
                "FUN_080034da": "get_result"
            },
            "code": "int check_parameter_080034f4(int param)\n{\n  int result = 0;\n  if (param != -1) {\n    result = get_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978",
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_parameter_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "check_value_in_array_0800355e",
                "param_1": "value_to_check",
                "param_2": "array_of_values"
            },
            "code": "int check_value_in_array_0800355e(int value_to_check, short *array_of_values) {\n  if (value_to_check == -1) {\n    return 0;\n  }\n  while(true) {\n    if (*array_of_values == -1) {\n      return 0;\n    }\n    if (value_to_check == *array_of_values) {\n      break;\n    }\n    array_of_values += 6;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "check_value_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "initialize_param_1_0800573c",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr_to_undefined",
                "iVar2": "status"
            },
            "code": "void initialize_param_1_0800573c(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr_to_undefined = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  int status = FUN_080040e8(param_2, param_3, param_4, param_4, param_4);\n  if (status == -1 && (*(int *)ptr_to_undefined != 0)) {\n    *result = *(int *)ptr_to_undefined;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "initialize_param_1_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "data_address",
                "param_2": "new_data",
                "param_3": "unk1",
                "param_4": "unk2",
                "iVar1": "result",
                "uVar2": "data_index",
                "PTR_DAT_08003ea4": "data_address_list",
                "PTR_DAT_08003ea0": "new_data_list",
                "unk3": "data_type"
            },
            "code": "void update_data_08003e54(int data_address, int new_data, int unk1, int unk2)\n{\n  int result = FUN_08003dd0();\n  if (result == 0) {\n    uint data_index = (uint)*(byte *)(data_address + 0x44);\n    *(int *)(PTR_DAT_08003ea4 + data_index * 4) = data_address;\n    *(int *)(PTR_DAT_08003ea0 + data_index * 4) = new_data;\n    int unk3 = (int)*(char *)(data_address + 0x5c);\n    FUN_08000e60(unk3, 0, 1, data_index, unk2);\n    FUN_08000ec4(unk3);\n    FUN_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + data_index * 4), data_address + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "update_data_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "perform_action_08004fdc",
                "param_1": "action_type",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "iVar1": "action_ptr",
                "uVar2": "action_type",
                "uStack_c": "param_1",
                "uStack_8": "param_2",
                "uStack_4": "param_3"
            },
            "code": "void perform_action_08004fdc(int action_type, int param_1, int param_2, int param_3) {\n  int action_ptr = *(int *)PTR_PTR_DAT_08005008;\n  if ((action_ptr != 0) && (*(int *)(action_ptr + 0x18) == 0)) {\n    cleanup_action(action_ptr);\n  }\n  execute_action(action_ptr, *(int *)(action_ptr + 8), action_type, &param_1, &param_2, &param_3);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "perform_action_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "initialize_param_080056d4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void initialize_param_080056d4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *ptr = PTR_DAT_080056f4;\n    *(undefined4 *)PTR_DAT_080056f4 = 0;\n    int status = FUN_080040d6(arg1, arg2, arg2, 0, arg3);\n    if (status == -1 && *(int *)ptr != 0)\n    {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "initialize_param_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUNC_0800410c": "return_one",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "thunk_FUN_0800410c": "thunk_FUNC_0800410c_thunk_0800410c"
            },
            "code": "int thunk_FUNC_0800410c_thunk_0800410c(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "thunk_FUNC_0800410c_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "data",
                "local_1c": "result_array",
                "FUN_080034f4": "get_result",
                "PTR_DAT_08003408": "PTR_DAT_08003408",
                "FUN_08003380": "check_result",
                "iVar1": "result_status",
                "FUN_08000f72": "process_result",
                "FUN_08000f56": "finalize_result"
            },
            "code": "void process_data_080033d8(int data)\n{\n  int result_array[5];\n  \n  result_array[0] = get_result(data, PTR_DAT_08003408);\n  if ((result_array[0] != 0) && ((result_status = check_result(data), result_status == 0 || (result_status == 0x10)))) {\n    process_result(result_array,result_status);\n    finalize_result(result_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003380",
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "FUNC_080029c8"
            },
            "code": "\nvoid FUNC_080029c8(int *param_1)\n\n{\n  ulonglong uVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  int iVar11;\n  int iVar12;\n  \n  *(uint *)(*param_1 + 0x10) = *(uint *)(*param_1 + 0x10) & 0xffffcfff | param_1[3];\n  *(uint *)(*param_1 + 0xc) =\n       *(uint *)(*param_1 + 0xc) & 0xffff69f3 | param_1[2] | param_1[4] | param_1[5] | param_1[7];\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffcff | param_1[6];\n  if (param_1[7] == 0x8000) {\n    iVar12 = *param_1;\n    if ((iVar12 != 0x40011000) && (iVar12 != 0x40011400)) {\n      iVar3 = FUN_080025ec();\n      uVar2 = DAT_08002d08;\n      iVar8 = param_1[1];\n      uVar1 = (ulonglong)DAT_08002d08;\n      iVar4 = FUN_080025ec();\n      iVar9 = param_1[1];\n      iVar5 = FUN_080025ec();\n      iVar10 = param_1[1];\n      iVar6 = FUN_080025ec();\n      iVar11 = param_1[1];\n      iVar7 = FUN_080025ec();\n      *(uint *)(iVar12 + 8) =\n           ((uint)((int)((ulonglong)uVar2 *\n                         (ulonglong)\n                         (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                          (uint)((ulonglong)uVar2 *\n                                 ((ulonglong)(uint)(iVar7 * 0x19) /\n                                 (ulonglong)(uint)(param_1[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)uVar2 *\n                   (ulonglong)\n                   (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                    (uint)((ulonglong)uVar2 *\n                           ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    iVar3 = FUN_0800260c();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_0800260c();\n    iVar9 = param_1[1];\n    iVar5 = FUN_0800260c();\n    iVar10 = param_1[1];\n    iVar6 = FUN_0800260c();\n    iVar11 = param_1[1];\n    iVar7 = FUN_0800260c();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 1) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 1) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar12 = *param_1;\n  if ((iVar12 != DAT_08002d04) && (iVar12 != DAT_08002d04 + 0x400)) {\n    iVar3 = FUN_080025ec();\n    uVar2 = DAT_08002d08;\n    iVar8 = param_1[1];\n    uVar1 = (ulonglong)DAT_08002d08;\n    iVar4 = FUN_080025ec();\n    iVar9 = param_1[1];\n    iVar5 = FUN_080025ec();\n    iVar10 = param_1[1];\n    iVar6 = FUN_080025ec();\n    iVar11 = param_1[1];\n    iVar7 = FUN_080025ec();\n    *(uint *)(iVar12 + 8) =\n         ((uint)((int)((ulonglong)uVar2 *\n                       (ulonglong)\n                       (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                        (uint)((ulonglong)uVar2 *\n                               ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)uVar2 *\n                 (ulonglong)\n                 (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                  (uint)((ulonglong)uVar2 *\n                         ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  iVar3 = FUN_0800260c();\n  uVar2 = DAT_08002d08;\n  iVar8 = param_1[1];\n  uVar1 = (ulonglong)DAT_08002d08;\n  iVar4 = FUN_0800260c();\n  iVar9 = param_1[1];\n  iVar5 = FUN_0800260c();\n  iVar10 = param_1[1];\n  iVar6 = FUN_0800260c();\n  iVar11 = param_1[1];\n  iVar7 = FUN_0800260c();\n  *(uint *)(iVar12 + 8) =\n       ((uint)((int)((ulonglong)uVar2 *\n                     (ulonglong)\n                     (((uint)(iVar6 * 0x19) / (uint)(iVar11 << 2) +\n                      (uint)((ulonglong)uVar2 *\n                             ((ulonglong)(uint)(iVar7 * 0x19) / (ulonglong)(uint)(param_1[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)uVar2 *\n               (ulonglong)\n               (((uint)(iVar4 * 0x19) / (uint)(iVar9 << 2) +\n                (uint)((ulonglong)uVar2 *\n                       ((ulonglong)(uint)(iVar5 * 0x19) / (ulonglong)(uint)(iVar10 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(uVar1 * ((ulonglong)(uint)(iVar3 * 0x19) / (ulonglong)(uint)(iVar8 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "FUNC_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "set_parameters_08002488",
                "param_1": "params",
                "param_2": "num_params",
                "puVar1": "param_ptr",
                "iVar2": "time_start",
                "iVar3": "time_now",
                "uVar4": "param_value",
                "DAT_080025d0": "param_table",
                "DAT_080025d4": "param_return",
                "PTR_DAT_080025dc": "param_value",
                "PTR_DAT_080025d8": "param_shift_table",
                "FUN_08000e30": "get_time",
                "FUN_080023b4": "get_param_value",
                "PARAM_NULL_ERROR": "1",
                "PARAM_SET_ERROR": "2",
                "PARAM_TIMEOUT_ERROR": "3",
                "PARAM_SUCCESS": "0",
                "PARAM_MASK_1": "1",
                "PARAM_MASK_2": "2",
                "PARAM_MASK_3": "12",
                "PARAM_MASK_4": "4",
                "PARAM_MASK_6": "8192",
                "PARAM_MASK_7": "7168",
                "PARAM_MASK_8": "8",
                "PARAM_MASK_12": "4294967283",
                "PARAM_MASK_20": "2097152",
                "PARAM_MASK_25": "33554432",
                "PARAM_MASK_56223": "4294901760",
                "PARAM_MASK_61695": "4294959103"
            },
            "code": "uint32_t set_parameters_08002488(uint32_t *params, uint32_t num_params) {\n  uint32_t *param_ptr;\n  int32_t time_start;\n  int32_t time_now;\n  uint32_t PTR_DAT_080025dc;\n  uint32_t i;\n  \n  param_ptr = DAT_080025d0;\n  if (params == NULL) {\n    return PARAM_NULL_ERROR;\n  }\n  if ((*DAT_080025d0 & 0xf) < num_params) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*param_ptr & 0xf)) {\n      return PARAM_SET_ERROR;\n    }\n  }\n  if ((*params & PARAM_MASK_2) != 0) {\n    if ((*params & PARAM_MASK_4) != 0) {\n      *DAT_080025d0 |= PARAM_MASK_7;\n    }\n    if ((*params & PARAM_MASK_8) != 0) {\n      *DAT_080025d0 |= PARAM_MASK_6;\n    }\n    *DAT_080025d0 = (*DAT_080025d0 & PARAM_MASK_12) | params[2];\n  }\n  if ((*params & PARAM_MASK_1) != 0) {\n    PTR_DAT_080025dc = params[1];\n    if (PTR_DAT_080025dc == 1) {\n      if ((*DAT_080025d0 & PARAM_MASK_20) == 0) {\n        return PARAM_SET_ERROR;\n      }\n    }\n    else if (PTR_DAT_080025dc - 2 < 2) {\n      if ((*DAT_080025d0 & PARAM_MASK_25) == 0) {\n        return PARAM_SET_ERROR;\n      }\n    }\n    else if ((*DAT_080025d0 & PARAM_MASK_2) == 0) {\n      return PARAM_SET_ERROR;\n    }\n    *DAT_080025d0 = PTR_DAT_080025dc | (*DAT_080025d0 & PARAM_MASK_3);\n    time_start = get_time();\n    while ((DAT_080025d0[2] & PARAM_MASK_3) != params[1] * 4) {\n      time_now = get_time();\n      if (5000 < time_now - time_start) {\n        return PARAM_TIMEOUT_ERROR;\n      }\n    }\n  }\n  param_ptr = DAT_080025d0;\n  if (num_params < (*DAT_080025d0 & PARAM_MASK_2)) {\n    *(char *)DAT_080025d0 = (char)num_params;\n    if (num_params != (*param_ptr & PARAM_MASK_2)) {\n      return PARAM_SET_ERROR;\n    }\n  }\n  if ((*params & PARAM_MASK_4) != 0) {\n    *DAT_080025d0 = (*DAT_080025d0 & PARAM_MASK_56223) | params[3];\n  }\n  if ((*params & PARAM_MASK_8) != 0) {\n    *DAT_080025d0 = (*DAT_080025d0 & PARAM_MASK_61695) | (params[4] << 3);\n  }\n  PTR_DAT_080025dc = get_PTR_DAT_080025dc();\n  *DAT_080025d4 = PTR_DAT_080025dc >> PTR_DAT_080025d8[(DAT_080025d0[2] << 0x18) >> 0x1c];\n  set_led(0xf);\n  return PARAM_SUCCESS;\n}",
            "called": [
                "FUN_080023b4",
                "FUN_08000d98",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_parameters_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_parameters_for_something_08004544",
                "param_1": "ptr_to_params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5"
            },
            "code": "void set_parameters_for_something_08004544(uint32_t *ptr_to_params, uint8_t param_2, uint8_t param_3, uint8_t param_4, uint8_t param_5) {\n  *ptr_to_params = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(uint8_t *)(ptr_to_params + 1) = param_2;\n  *(uint8_t *)(ptr_to_params + 5) = param_3;\n  *(uint8_t *)(ptr_to_params + 6) = param_4;\n  *(uint8_t *)(ptr_to_params + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "set_parameters_for_something_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_data_08003cc8",
                "sVar1": "data_value",
                "puVar2": "data_pointer",
                "uVar3": "processed_value",
                "iVar4": "result",
                "uVar5": "calculated_value",
                "PTR_DAT_08003d08": "PTR_DATA_START",
                "PTR_DAT_08003d0c": "PTR_DATA_MIDDLE",
                "PTR_DAT_08003d10": "PTR_DATA_END",
                "PTR_DAT_08003d14": "PTR_DATA_POINTER",
                "FUNC_08003978": "process_data_pointer"
            },
            "code": "void process_data_08003cc8() {\n  short data_value = *(short *)(PTR_DAT_08003d08 + 0x9a);\n  int result = calculate_value((int)data_value, PTR_DAT_08003d08);\n  if (result != 0) {\n    undefined4 calculated_value = calculate_value((int)data_value, PTR_DAT_08003d08);\n    undefined2 processed_value = process_value(calculated_value, PTR_DAT_08003d08);\n    undefined *data_pointer = PTR_DAT_08003d08;\n    *(undefined2 *)(PTR_DAT_08003d08 + 0x5a) = processed_value;\n    *(short *)(data_pointer + 0x58) = data_value;\n    *(undefined4 *)(data_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(data_pointer + 0x54) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    process_data_08003cc8_pointer(data_pointer);\n  }\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "improve_code_08000fb4",
                "param_1": "memory_1",
                "param_2": "memory_2",
                "puVar1": "memory_3",
                "puVar2": "memory_4",
                "uVar3": "value",
                "uVar4": "bit_clear",
                "uVar5": "i",
                "uVar6": "bit_check",
                "uVar7": "value_2",
                "uVar9": "index_3",
                "iVar8": "index_1",
                "iVar10": "index_2",
                "DAT_0800118c": "DAT_memory_1",
                "DAT_08001184": "DAT_memory_2"
            },
            "code": "void improve_code_08000fb4(uint *memory_1, uint *memory_2) {\n    for (uint i = 0; i < 16; i++) {\n        uint bit_mask = 1 << (i & 0xff);\n        uint bit_check = bit_mask & *memory_2;\n        if (bit_mask == bit_check) {\n            if ((memory_2[1] == 2) || (memory_2[1] == 0x12)) {\n                int index_1 = (i >> 3) + 8;\n                int index_2 = (i & 7) << 2;\n                memory_1[index_1] = memory_1[index_1] & ~(0xf << index_2) | memory_2[4] << index_2;\n            }\n            uint index_3 = i << 1;\n            uint bit_clear = ~(3 << (index_3 & 0xff));\n            *memory_1 = *memory_1 & bit_clear | (memory_2[1] & 3) << (index_3 & 0xff);\n            uint value = memory_2[1];\n            if (((value - 1 < 2) || (value == 0x11)) || (value == 0x12)) {\n                memory_1[2] = memory_1[2] & bit_clear | memory_2[3] << (index_3 & 0xff);\n                memory_1[1] = memory_1[1] & ~bit_mask | ((memory_2[1] << 0x1b) >> 0x1f) << (i & 0xff);\n            }\n            memory_1[3] = bit_clear & memory_1[3] | memory_2[2] << (index_3 & 0xff);\n            if ((memory_2[1] & 0x10000000) != 0) {\n                *(uint *)(DAT_0800118c + 0x44) = *(uint *)(DAT_0800118c + 0x44) | 0x4000;\n                int index_4 = (i & 3) << 2;\n                int memory_index = -1;\n                if (memory_1 == DAT_08001190) {\n                    memory_index = 0;\n                }\n                else if (memory_1 == DAT_08001194) {\n                    memory_index = 1;\n                }\n                else if (memory_1 == DAT_08001194 + 0x100) {\n                    memory_index = 2;\n                }\n                else if (memory_1 == DAT_08001194 + 0x200) {\n                    memory_index = 3;\n                }\n                else if (memory_1 == DAT_08001194 + 0x300) {\n                    memory_index = 4;\n                }\n                else if (memory_1 == DAT_08001194 + 0x400) {\n                    memory_index = 5;\n                }\n                else if (memory_1 == DAT_08001194 + 0x500) {\n                    memory_index = 6;\n                }\n                else if (memory_1 == DAT_08001194 + 0x600) {\n                    memory_index = 7;\n                }\n                else if (memory_1 == DAT_08001194 + 0x700) {\n                    memory_index = 8;\n                }\n                else if (memory_1 == DAT_08001194 + 0x800) {\n                    memory_index = 9;\n                }\n                *(uint *)(DAT_08001184 + ((i >> 2) + 2) * 4) = *(uint *)(DAT_08001184 + ((i >> 2) + 2) * 4) & ~(0xf << index_4) | memory_index << index_4;\n                uint *memory_3 = DAT_08001188;\n                uint bit_set = ~bit_check;\n                uint value_2 = *DAT_08001188 & bit_set;\n                if ((memory_2[1] & 0x10000) != 0) {\n                    value_2 = bit_check | *DAT_08001188;\n                }\n                *DAT_08001188 = value_2;\n                uint *memory_4 = DAT_08001188;\n                value_2 = bit_set & memory_3[1];\n                if ((memory_2[1] & 0x20000) != 0) {\n                    value_2 = bit_check | memory_3[1];\n                }\n                DAT_08001188[1] = value_2;\n                memory_3 = DAT_08001188;\n                value_2 = bit_set & memory_4[2];\n                if ((memory_2[1] & 0x100000) != 0) {\n                    value_2 = bit_check | memory_4[2];\n                }\n                DAT_08001188[2] = value_2;\n                bit_clear = bit_set & memory_3[3];\n                if ((memory_2[1] & 0x200000) != 0) {\n                    bit_clear = bit_check | memory_3[3];\n                }\n                DAT_08001188[3] = bit_clear;\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "improve_code_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_input",
                "puVar3": "ptr_input_9"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] &= 0xfffff8ff;\n  **input |= 1;\n  **input &= 0xfffffbff;\n  uint32_t *ptr_input = *input;\n  if ((ptr_input[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((ptr_input[5] & 4) != 0) {\n      uint32_t *ptr_input_9 = input[9];\n      input[9] = (uint32_t *)((int)ptr_input_9 + 1);\n      *(char *)ptr_input_9 = (char)ptr_input[4];\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr_input = input[9];\n      input[9] = (uint32_t *)((int)ptr_input + 1);\n      *(char *)ptr_input = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) -= 1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08001cfc;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_something_with_input_080038d0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_0800160c();\n    }\n  }\n  else {\n    do_something_else_with_input_08001ab0();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_0800160c",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "check_and_update_08002d72",
                "param_1": "param",
                "*(char *)((int)param_1 + 0x39)": "param[9]",
                "*(undefined *)(param_1 + 0xe)": "param[14]",
                "*param_1": "param[0]",
                "*(uint *)(*param_1 + 0xc)": "*(uint32_t*)(param[0] + 0xc)",
                "FUNC_080029c8": "update_func",
                "*(uint *)(*param_1 + 0x10)": "*(uint32_t*)(param[0] + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint32_t*)(param[0] + 0x14)",
                "param_1[0xf]": "param[15]",
                "*(undefined *)((int)param_1 + 0x39)": "param[9]",
                "*(undefined *)((int)param_1 + 0x3a)": "param[10]"
            },
            "code": "int check_and_update_08002d72(int* param) {\n    if (param != NULL) {\n        if (param[9] == 0) {\n            param[14] = 0;\n            do_nothing();\n        }\n        param[9] = 0x24;\n        *(uint32_t*)(param[0] + 0xc) &= 0xffffdfff;\n        update_func(param);\n        *(uint32_t*)(param[0] + 0x10) &= 0xffffb7ff;\n        *(uint32_t*)(param[0] + 0x14) &= 0xffffffd5;\n        *(uint32_t*)(param[0] + 0xc) |= 0x2000;\n        param[15] = 0;\n        param[9] = 0x20;\n        param[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "check_and_update_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_parameters_080007f0",
                "param_1": "obj",
                "param_2": "a2",
                "param_3": "a3",
                "param_4": "a4",
                "bVar1": "found",
                "bVar2": "bVar",
                "cVar3": "cVar1",
                "cVar4": "cVar2",
                "iVar5": "iVar1",
                "uVar6": "idx",
                "iVar7": "n"
            },
            "code": "int check_parameters_080007f0(int obj, int a2, uint a3, int a4)\n{\n  bool found = false;\n  byte bVar;\n  char cVar1;\n  char cVar2;\n  int iVar1;\n  uint idx;\n  \n  idx = 0;\n  do {\n    if (7 < idx) {\n      if (!found) {\n        *(short *)(obj + 0x54) = *(short *)(obj + 0x54) + 1;\n        return 1;\n      }\n      int n = *(byte *)(obj + 10) - 1;\n      switch(*(byte *)(obj + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        cVar1 = FUN_08004640(*(undefined *)(obj + 0xb),*(undefined *)(obj + 0xc),a3, n, a4);\n        cVar2 = FUN_08004640(*(undefined *)(obj + 0xd),*(undefined *)(obj + 0xe));\n        if (*(byte *)(obj + 0x60) < (byte)(cVar2 + cVar1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        n = FUN_08004640(*(undefined *)(obj + 0xb),*(undefined *)(obj + 0xc),a3, n, a4);\n        if ((uint)*(byte *)(obj + 0x60) < (uint)(n << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        bVar = FUN_08004640(*(undefined *)(obj + 0xb),*(undefined *)(obj + 0xc),a3, n, a4);\n        if (*(byte *)(obj + 0x60) < bVar) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    a3 = (uint)*(byte *)(obj + 10);\n    if ((byte)PTR_DAT_080008c8[idx] == a3) {\n      found = true;\n      break;\n    }\n    idx = idx + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  n = FUN_08004640(*(undefined *)(obj + 0xb),*(undefined *)(obj + 0xc),a3,n,a4);\n  iVar1 = FUN_08004640(*(undefined *)(obj + 0xd),*(undefined *)(obj + 0xe));\n  if ((uint)*(byte *)(obj + 0x60) <\n      (((uint)(n << 0xc) >> 0x10) + ((uint)(iVar1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_parameters_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "output",
                "param_2": "data_address",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "sVar1": "data_value",
                "puVar2": "unused_ptr",
                "iVar3": "result"
            },
            "code": "void process_data_0800562a(int *output, int data_address, int unused_param1, int unused_param2) {\n  short data_value = *(short *)(data_address + 0xe);\n  *(ushort *)(data_address + 0xc) &= 0xefff;\n  int result = do_processing(data_value, unused_param1, unused_param2, unused_param2, unused_param2);\n  if (result == -1 && *(int *)PTR_DAT_080056b0 != 0) {\n    *output = *(int *)PTR_DAT_080056b0;\n  }\n  return;\n}",
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "process_input_080044d8",
                "param_1": "input_flag",
                "param_2": "input_value",
                "FUN_0800447c": "process_data"
            },
            "code": "void process_input_080044d8(int input_flag, int input_value, undefined4 param_3, undefined4 param_4)\n{\n  if (input_flag != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    process_data(PTR_DAT_080044f8, DAT_080044f4, param_3, 0xffff, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "param_1": "input_index",
                "uVar1": "result",
                "PTR_DAT_08003e14": "ptr_dat",
                "byte": "byte_val",
                "FUN_0800312c": "fun_1"
            },
            "code": "bool is_valid_input_08003df4(int input_index) {\n  uint32_t ptr = *(uint32_t *)(PTR_DAT_08003e14 + (uint32_t)*(uint8_t *)(input_index + 0x44) * 4);\n  uint32_t result = FUN_0800312c(ptr);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "initialize_array_08005400",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "array_ptr",
                "piVar2": "inner_array_ptr",
                "iVar3": "array_ptr_address",
                "ppiVar4": "next_array_ptr"
            },
            "code": "int * initialize_array_08005400(undefined4 *error_code, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    int *array_ptr;\n    int *inner_array_ptr;\n    int array_ptr_address;\n    int **next_array_ptr;\n\n    array_ptr_address = *(int *)PTR_PTR_DAT_08005474;\n    if (*(int *)(array_ptr_address + 0x18) == 0) {\n        initialize_array_08005400(array_ptr_address);\n    }\n    next_array_ptr = (int **)(array_ptr_address + 0x48);\n    do {\n        inner_array_ptr = next_array_ptr[2];\n        array_ptr = next_array_ptr[1];\n        while (array_ptr = (int *)((int)array_ptr + -1), -1 < (int)array_ptr) {\n            if (*(short *)(inner_array_ptr + 3) == 0) {\n                *(undefined2 *)((int)inner_array_ptr + 0xe) = 0xffff;\n                *(undefined2 *)(inner_array_ptr + 3) = 1;\n                inner_array_ptr[0x19] = 0;\n                *inner_array_ptr = 0;\n                inner_array_ptr[2] = 0;\n                inner_array_ptr[1] = 0;\n                inner_array_ptr[4] = 0;\n                inner_array_ptr[5] = 0;\n                inner_array_ptr[6] = 0;\n                FUN_080048cc(inner_array_ptr + 0x17, 0, 8, 1, param_4);\n                inner_array_ptr[0xd] = 0;\n                inner_array_ptr[0xe] = 0;\n                inner_array_ptr[0x12] = 0;\n                inner_array_ptr[0x13] = 0;\n                return inner_array_ptr;\n            }\n            inner_array_ptr = inner_array_ptr + 0x1a;\n        }\n        if (*next_array_ptr == (int *)0x0) {\n            array_ptr = (int *)FUN_08005374(error_code, 4);\n            *next_array_ptr = array_ptr;\n            if (array_ptr == (int *)0x0) {\n                *error_code = 0xc;\n                return (int *)0x0;\n            }\n        }\n        next_array_ptr = (int **)*next_array_ptr;\n    } while (true);\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_array_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "num1",
                "param_2": "num2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int compare_and_return_non_zero_08003582(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_and_return_non_zero_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "execute_function_08005760",
                "UNRECOVERED_JUMPTABLE": "function_pointer"
            },
            "code": "void execute_function_08005760(void)\n{\n  code *function_pointer;\n  function_pointer = execute_function_08005760;\n  set_flag_if_negative(PTR_DAT_080057fc);\n  set_flag_if_negative(PTR_DAT_08005800);\n  set_flag_if_negative(PTR_DAT_08005804);\n  set_flag_if_negative(PTR_DAT_08005808);\n  set_flag_if_negative(PTR_DAT_0800580c);\n  set_flag_if_negative(PTR_DAT_08005810);\n  set_flag_if_negative(PTR_DAT_08005814);\n  set_flag_if_negative(PTR_DAT_08005818);\n  set_flag_if_negative(PTR_DAT_0800581c);\n  set_flag_if_negative(PTR_DAT_08005820);\n  set_flag_if_negative(PTR_DAT_08005824);\n  set_flag_if_negative(PTR_DAT_08005828);\n  (*function_pointer)();\n  return;\n}\n\nvoid set_flag_if_negative(int *ptr)\n{\n  if (*ptr < 0)\n  {\n    *ptr = 1;\n  }\n}\n",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "execute_function_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "get_number_of_bits_set_to_1_08004678",
                "param_1": "number",
                "cVar1": "count"
            },
            "code": "char get_number_of_bits_set_to_1_08004678(uint number) {\n  char count = 0;\n  for (; number != 1; number = number >> 1) {\n    count++;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "get_number_of_bits_set_to_1_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "parameter",
                "iVar1": "result",
                "FUN_0800387c": "get_result",
                "*(char *)(iVar1 + 0x5f)": "*(char *)(result + 0x5f)",
                "FUN_08001578": "call_another_function"
            },
            "code": "void check_and_call_function_08003900(undefined4 parameter)\\n{\\n  int result = get_result();\\n  if (*(char *)(result + 0x5f) == \"\\0\") {\\n    call_another_function(parameter);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index",
                "DAT_08000f28": "array_ptr"
            },
            "code": "void set_bit_in_array_08000f0c(uint bit_index){\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint bit_position = bit_index & 0x1f;\n    int* DAT_08000f28 = (int *)(DAT_08000f28 + array_index * 4);\n    *DAT_08000f28 = 1 << bit_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "bVar1": "data_offset",
                "bVar3": "data_size",
                "bVar4": "buffer_size",
                "uVar5": "i",
                "uVar6": "next_offset",
                "cVar2": "final_offset"
            },
            "code": "int process_data_08000998(int data_ptr, int buffer_ptr, undefined4 param_3, undefined4 param_4) {\n  byte data_size = get_data_size(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,param_4);\n  byte buffer_size = get_data_size(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = buffer_size << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (uint i = (uint)data_size; i < (uint)data_size + (uint)buffer_size; i = i + 1 & 0xff) {\n    byte data_offset = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)data_offset + 9) = (char)((ushort)*(undefined2 *)(buffer_ptr + i * 2) >> 8);\n    uint next_offset = data_offset + 1 & 0xff;\n    char next_char = (char)next_offset;\n    *(char *)(data_ptr + 0x49) = next_char;\n    *(undefined *)(data_ptr + next_offset + 9) = *(undefined *)(buffer_ptr + i * 2);\n    *(char *)(data_ptr + 0x49) = next_char + '\\x01';\n  }\n  char final_offset = *(char *)(data_ptr + 0x49);\n  finalize_data(data_ptr);\n  return (int)(char)(final_offset + '\\x02');\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_data_080055d0",
                "param_1": "data",
                "puVar1": "ptr1",
                "uVar2": "result",
                "piVar3": "ptr2",
                "iVar4": "index",
                "pcVar5": "func_ptr",
                "unaff_r4": "var1",
                "unaff_r5": "var2",
                "in_lr": "var3",
                "puVar6": "ptr3"
            },
            "code": "int process_data_080055d0(uint data){\n    undefined *ptr1;\n    undefined4 result;\n    int *ptr2;\n    int index;\n    code *func_ptr;\n    undefined4 var1;\n    undefined4 var2;\n    undefined4 var3;\n    undefined *ptr3;\n    \n    ptr2 = *(int **)PTR_PTR_DAT_080055dc;\n    if (data > 0x1f) {\n        *ptr2 = 0x16;\n        return -1;\n    }\n    index = ptr2[0x11];\n    if ((index != 0) && (func_ptr = *(code **)(index + data * 4), func_ptr != (code *)0x0)) {\n        if (func_ptr != (code *)0x1) {\n            if (func_ptr == (code *)0xffffffff) {\n                *ptr2 = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(index + data * 4) = 0;\n            (*func_ptr)(data);\n        }\n        return 0;\n    }\n    ptr3 = PTR_PTR_DAT_080055dc;\n    result = thunk_FUN_0800410c(ptr2);\n    ptr1 = PTR_DAT_08005600;\n    *(undefined4 *)PTR_DAT_08005600 = 0;\n    index = FUN_080040fc(result,data,data,0,ptr3,var1,var2,var3);\n    if ((index == -1) && (*(int *)ptr1 != 0)) {\n        *ptr2 = *(int *)ptr1;\n    }\n    return index;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_data_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "set_param1_if_param2_invalid_080056f8",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "ptr",
                "iVar2": "param2_result"
            },
            "code": "void set_param1_if_param2_invalid_080056f8(int *result, undefined4 value)\n{\n  undefined *ptr = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int param2_result = FUN_080040e0(value);\n  if ((param2_result == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "set_param1_if_param2_invalid_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_file_type_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_header_offset",
                "param_3": "file_type",
                "param_4": "file_flags",
                "iVar1": "file_type_result",
                "uVar2": "file_type_offset",
                "auStack_4c": "file_header",
                "local_48": "file_flags_mask"
            },
            "code": "int check_file_type_080054b4(int file_descriptor, int file_header_offset, int* file_type, uint* file_flags){\n  int file_type_offset;\n  int result;\n  undefined4 file_header[4];\n  uint file_flags_mask = 0xf000;\n  \n  if(*(short*)(file_header_offset + 0xe) < 0 || FUN_080056d4(file_descriptor, (int)*(short*)(file_header_offset + 0xe), file_header) < 0){\n    *file_flags = 0;\n    if((int)((uint)*(ushort*)(file_header_offset + 0xc) << 0x18) < 0){\n      file_type_offset = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else{\n    *file_flags = (uint)((file_header[0] & file_flags_mask) == 0x2000);\n  }\n  file_type_offset = 0x400;\nLAB_080054f4:\n  *file_type = file_type_offset;\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_file_type_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "parse_input_0800171a",
                "param_1": "input_data",
                "cVar1": "current_char",
                "puVar2": "current_ptr",
                "PTR_DAT_08001718": "do_nothing_08001718",
                "PTR_DAT_080015b6": "do_nothing_080015b6"
            },
            "code": "uint32_t parse_input_0800171a(uint32_t **input_data) {\n  char current_char;\n  uint32_t *current_ptr;\n  uint32_t *current_ptr_2;\n  \n  current_char = *(char *)((int)input_data + 0x3d);\n  current_ptr = input_data[0xb];\n  if ((*(short *)(input_data + 10) == 0) && (current_char == '!')) {\n    if ((current_ptr == (uint32_t *)0x4) || ((current_ptr == (uint32_t *)0x8 || (current_ptr == (uint32_t *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        PTR_DAT_08001718();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        PTR_DAT_080015b6();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      input_data[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      PTR_DAT_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      current_ptr = input_data[0x14];\n      if (current_ptr == (uint32_t *)0x0) {\n        current_ptr_2 = input_data[0x13];\n        if (current_ptr_2 == (uint32_t *)0x1) {\n          (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n          input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 2);\n        }\n        else {\n          (*input_data)[4] = (uint32_t)((int)input_data[0x12] << 0x10) >> 0x18;\n          input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n        }\n      }\n      else if (current_ptr == (uint32_t *)0x1) {\n        (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n        input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n      }\n      else if (current_ptr == (uint32_t *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          current_ptr_2 = input_data[9];\n          input_data[9] = (uint32_t *)((int)current_ptr_2 + 1);\n          (*input_data)[4] = (uint32_t)*(byte *)current_ptr_2;\n          *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      current_ptr_2 = input_data[9];\n      input_data[9] = (uint32_t *)((int)current_ptr_2 + 1);\n      (*input_data)[4] = (uint32_t)*(byte *)current_ptr_2;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "parse_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "process_data_08004560",
                "param_1": "input_1",
                "param_2": "input_2",
                "FUN_08004544": "execute_function"
            },
            "code": "void process_data_08004560(int input_1, int input_2)\n{\n    if(input_1 == 1 && input_2 == 0xffff)\n    {\n        execute_function(PTR_DATA, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_in_ushort_array_08000a7a",
                "param_1": "config_data",
                "param_2": "output_array",
                "param_3": "output_array_size",
                "param_4": "bit_offset",
                "iVar1": "index",
                "iVar2": "array_size",
                "uVar3": "i",
                "uVar4": "j",
                "uVar5": "k",
                "uVar6": "output_array_index",
                "uVar7": "bit_mask",
                "byte": "config_byte",
                "config_data_index": "config_byte_index",
                "bit_value": "current_bit_value",
                "current_value": "current_ushort_value",
                "new_value": "new_ushort_value",
                "i": "loop_index",
                "j": "output_array_index",
                "k": "bit_index",
                "output_array_index": "current_output_array_index",
                "bit_mask": "current_bit_mask",
                "bit_offset": "current_bit_offset"
            },
            "code": "uint8_t set_bits_in_ushort_array_08000a7a(uint8_t* config_data, uint16_t* output_array, uint8_t output_array_size, uint8_t bit_offset) {\n    uint8_t config_data_index = 0x07;\n    uint16_t* output_array_index;\n    uint16_t bit_mask;\n    uint16_t bit_value;\n    uint16_t current_value;\n    uint16_t new_value;\n    uint16_t i;\n    uint16_t j;\n    uint16_t k;\n    uint16_t l;\n    uint16_t m;\n    uint16_t n;\n    uint16_t o;\n    uint16_t p;\n    uint16_t q;\n    uint16_t r;\n    uint16_t s;\n    uint16_t t;\n    uint16_t u;\n    uint16_t v;\n    uint16_t w;\n    uint16_t x;\n    uint16_t y;\n    uint16_t z;\n\n    int16_t index = FUN_08004640(config_data[0x0B], config_data[0x0C], 0, 0, 0);\n    int16_t array_size = FUN_08004640(config_data[0x0D], config_data[0x0E]);\n\n    for (i = 0; i < array_size; i++) {\n        j = (i + index) * 0x100000 >> 0x18;\n        k = i + index & 0xF;\n        output_array_index = output_array + j;\n        bit_mask = 0x01 << k;\n        bit_value = (uint16_t)(config_data[config_data_index + 9] >> bit_offset) & 0x01;\n        current_value = *output_array_index;\n        new_value = (bit_value == 0) ? current_value & ~bit_mask : current_value | bit_mask;\n        *output_array_index = new_value;\n\n        bit_offset++;\n        if (bit_offset > 7) {\n            config_data_index++;\n            bit_offset = 0;\n        }\n    }\n\n    config_data[0x49] = 6;\n    FUN_0800076c(config_data);\n    return 8;\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_in_ushort_array_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "data",
                "param_2": "min_value",
                "param_3": "max_value",
                "param_4": "flags",
                "param_5": "callback",
                "iVar1": "result",
                "uVar2": "max",
                "uVar3": "current",
                "bVar4": "is_fourth"
            },
            "code": "undefined4 process_data_08004cb0(uint32_t data, uint32_t* min_value, uint32_t* max_value, uint32_t flags, code* callback) {\n    int result = 0;\n    uint32_t max = data >> 0x10;\n    if (max < min_value[1]) {\n        max = min_value[1];\n    }\n    *max_value = max;\n    if (*(char*)((int)min_value + 0x43) != 0) {\n        *max_value += 1;\n    }\n    if ((int)(*min_value << 0x1a) < 0) {\n        *max_value += 2;\n    }\n    uint32_t current = *min_value & 6;\n    if (current == 0) {\n        for (; (int)current < (int)(min_value[2] - *max_value); current++) {\n            result = (*callback)(data, flags, (int)min_value + 0x19, 1);\n            if (result == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    current = *(byte*)((int)min_value + 0x43);\n    if (current != 0) {\n        current = 1;\n    }\n    if ((int)(*min_value << 0x1a) < 0) {\n        *(undefined*)((int)min_value + current + 0x43) = 0x30;\n        *(undefined*)((int)min_value + current + 0x44) = *(undefined*)((int)min_value + 0x45);\n        current += 2;\n    }\n    result = (*callback)(data, flags, (int)min_value + 0x43, current);\n    if (result != -1) {\n        uint32_t remaining = min_value[2];\n        bool is_fourth = (*min_value & 6) == 4;\n        if (is_fourth) {\n            remaining = remaining - *max_value;\n        }\n        if (is_fourth) {\n            remaining = remaining & ~((int)remaining >> 0x1f);\n        }\n        else {\n            remaining = 0;\n        }\n        if (max < min_value[1]) {\n            remaining += (min_value[1] - max);\n        }\n        uint32_t current_remaining = 0;\n        while (true) {\n            if (remaining == current_remaining) {\n                return 0;\n            }\n            result = (*callback)(data, flags, (int)min_value + 0x1a, 1);\n            if (result == -1) {\n                break;\n            }\n            current_remaining++;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "process_data_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_pointer_not_null_08003594",
                "PTR_DAT_080035a4": "function_pointer_address",
                "PTR_DAT_080035a8": "argument_pointer_address",
                "code": "code_pointer",
                "function_pointer": "code_pointer"
            },
            "code": "void execute_code_if_pointer_not_null_08003594(void)\n{\n  code* function_pointer = *(code **)PTR_DAT_080035a4;\n  if (function_pointer != NULL) {\n    (*function_pointer)(*(undefined4 *)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_pointer_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "*param_1": "flags_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag1",
                "*(uint *)(*param_1 + 0x14)": "flag2",
                "*(undefined *)((int)param_1 + 0x3a)": "flag3"
            },
            "code": "void clear_flags_08002940(int *param_1)\n{\n    uint *flag1 = (uint *)(*param_1 + 0xc);\n    *flag1 = *flag1 & 0xfffffedf;\n    uint *flag2 = (uint *)(*param_1 + 0x14);\n    *flag2 = *flag2 & 0xfffffffe;\n    char *flag3 = (char *)((int)param_1 + 0x3a);\n    *flag3 = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "execute_initialization_08004204",
                "FUN_0800346c": "initialize_system"
            },
            "code": "void execute_initialization_08004204(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "execute_initialization_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "call_three_functions_and_do_nothing_08003476",
                "FUN_08000e18": "call_first_function",
                "FUN_08000f4e": "call_second_function",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void call_three_functions_and_do_nothing_08003476(void)\n{\n  call_first_function();\n  call_second_function();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08003474",
                "FUN_08000f4e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "call_three_functions_and_do_nothing_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_at_index_08004444",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_index_08004444(int index, uint value)\n{\n  undefined2 value_to_set;\n  code *jump_table;\n  if (value < 0x60) {\n    value_to_set = *(undefined2 *)(PTR_DAT_0800445c + value * 2);\n  }\n  else {\n    value_to_set = 0xffff;\n  }\n  *(undefined2 *)(index + 0x12e) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "call_initialization_function_0800346c",
                "FUN_08000e30": "initialize_system"
            },
            "code": "void call_initialization_function_0800346c(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "call_initialization_function_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data_addr",
                "uVar1": "result",
                "iVar2": "ptr_addr",
                "bVar3": "is_ptr_addr"
            },
            "code": "void initialize_data_080053a0(int data_addr)\n{\n    if (*(int *)(data_addr + 0x18) == 0) {\n        *(int *)(data_addr + 0x48) = 0;\n        *(int *)(data_addr + 0x4c) = 0;\n        *(int *)(data_addr + 0x50) = 0;\n        int ptr_addr = *(int *)PTR_PTR_DAT_080053f8;\n        *(void **)(data_addr + 0x28) = PTR_LAB_08005320_1_080053fc;\n        bool is_ptr_addr = data_addr == ptr_addr;\n        if (is_ptr_addr) {\n            ptr_addr = 1;\n        }\n        if (is_ptr_addr) {\n            *(int *)(data_addr + 0x18) = ptr_addr;\n        }\n        int uVar1 = FUN_08005400();\n        *(int *)(data_addr + 4) = uVar1;\n        uVar1 = FUN_08005400(data_addr);\n        *(int *)(data_addr + 8) = uVar1;\n        uVar1 = FUN_08005400(data_addr);\n        *(int *)(data_addr + 0xc) = uVar1;\n        FUN_0800532c(*(int *)(data_addr + 4), 4, 0);\n        FUN_0800532c(*(int *)(data_addr + 8), 9, 1);\n        FUN_0800532c(*(int *)(data_addr + 0xc), 0x12, 2);\n        *(int *)(data_addr + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_08004a34",
                "FUN_08004a84",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "FUNC_0800201c"
            },
            "code": "\nundefined4 FUNC_0800201c(uint *param_1)\n\n{\n  uint *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  bool bVar5;\n  \n  puVar1 = DAT_080022d0;\n  if (param_1 == (uint *)0x0) {\n    return 1;\n  }\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *puVar1 = *puVar1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar2 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          iVar3 = FUN_08000e30();\n          if (100 < (uint)(iVar3 - iVar2)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n    else if (param_1[3] == 0) {\n      *DAT_080022d4 = 0;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | param_1[4] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_080022d8 = 0;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar5 = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bVar5) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      iVar2 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        iVar3 = FUN_08000e30();\n        if (2 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    puVar1 = DAT_080022d0;\n    if (param_1[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (param_1[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      puVar1[0x1c] = puVar1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      puVar1[0x1c] = puVar1[0x1c] & 0xfffffffb;\n    }\n    if (param_1[2] == 0) {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar2 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        iVar3 = FUN_08000e30();\n        if (5000 < (uint)(iVar3 - iVar2)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar5) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (param_1[6] == 0) {\n    uVar4 = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    uVar4 = 1;\n  }\n  else if (param_1[6] == 2) {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             param_1[7] | param_1[8] | param_1[9] << 6 | ((param_1[10] >> 1) - 1) * 0x10000 |\n             param_1[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        iVar2 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar3 = FUN_08000e30();\n        } while ((uint)(iVar3 - iVar2) < 3);\n        return 3;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    iVar2 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar3 = FUN_08000e30();\n    } while ((uint)(iVar3 - iVar2) < 3);\n    uVar4 = 3;\n  }\n  return uVar4;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "FUNC_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "data",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "*(uint *)(param_1 + 0x20) | param_3 << (param_2 & 0xff)": "(*data & mask) | (bit_value << (bit_index & 0xff))"
            },
            "code": "void set_bit_080028d4(uint32_t *data, uint8_t bit_index, uint32_t bit_value){\n    uint32_t mask = ~(4 << (bit_index & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "call_with_params_080040ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08003d18": "call_function"
            },
            "code": "void call_with_params_080040ec(int param1, int param2, int param3, int param4){\n  call_function(param2, param3, param3, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "call_with_params_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_parameters_08001460",
                "param_1": "param_list",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr1"
            },
            "code": "uint32_t check_parameters_08001460(uint32_t **param_list, uint32_t *param1, int param2, uint32_t *param3)\n{\n  uint32_t result;\n  uint32_t *ptr1;\n  \n  if (*(char *)((int)param_list + 0x3d) == '(') {\n    if (param1 == NULL) {\n      result = 1;\n    }\n    else if (param2 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      ptr1 = *param_list;\n      if ((*ptr1 & 1) == 0) {\n        *ptr1 = *ptr1 | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)((int)param_list + 0x3d) = 0x29;\n      *(undefined *)((int)param_list + 0x3e) = 0x20;\n      result = 0;\n      param_list[0x10] = NULL;\n      param_list[9] = param1;\n      *(short *)((int)param_list + 0x2a) = (short)param2;\n      param_list[0xb] = param3;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "check_parameters_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_08003880",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "code": "void process_08003880(int input_1, int input_2, int input_3, undefined4 input_4)\n{\n  int result = FUN_0800387c();\n  if (input_3 == *(int *)(input_1 + 0xc)) {\n    if (input_2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_08001460(input_1, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    FUN_080014ec(input_1, result + 0x68, 0x20, 8, input_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_flag_and_call_function_08002f4c",
                "param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag_value_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "flag_char_ptr",
                "FUN_08003f48": "call_some_function"
            },
            "code": "void set_flag_and_call_function_08002f4c(int *flag_ptr) {\n    uint32_t *flag_value_ptr = (uint32_t *)(*flag_ptr + 0xc);\n    *flag_value_ptr &= 0xffffffbf;\n    char *flag_char_ptr = (char *)(flag_ptr + 0x39);\n    *flag_char_ptr = 0x20;\n    call_some_function();\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flag_and_initialize_080035bc",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flag_and_initialize_080035bc(void)\n{\n  uint *flag_ptr = DAT_080035f0;\n  *flag_ptr |= 1;\n  flag_ptr[2] = 0;\n  *flag_ptr &= 0xfef6ffff;\n  flag_ptr[1] = DAT_080035f4;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flag_and_initialize_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "shifted_value",
                "FUN_080025e0": "get_value",
                "PTR_DAT_08002608": "shift_amount",
                "DAT_08002604": "data_pointer"
            },
            "code": "uint calculate_shifted_value_080025ec(void)\n{\n  uint shifted_value;\n  uint value = get_value();\n  shifted_value = value >> PTR_DAT_08002608[(uint)(*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d];\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_screen_08000c4c",
                "FUN_080005e4": "clear_screen",
                "FUN_08000600": "set_screen_buffer",
                "PTR_DAT_08000c60": "PTR_SCREEN_BUFFER"
            },
            "code": "void initialize_screen_08000c4c(void)\n{\n  clear_screen();\n  set_screen_buffer(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_screen_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "puVar2": "end",
                "iVar1": "result",
                "iVar3": "current"
            },
            "code": "int process_data_08004a60(undefined4 arg1, undefined4 arg2, undefined *data, int length) {\n  int result = 0;\n  undefined *end = data + length;\n  int current = length;\n  do {\n    if (data == end) {\n      return 0;\n    }\n    result = process_byte(arg1, *data, arg2, length, current);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "decode_message_header_080050d0",
                "param_1": "message_type",
                "param_2": "message_data",
                "iVar3": "message_header",
                "PTR_PTR_DAT_0800519c": "message_header_ptr_ptr",
                "PTR_DAT_080051a0": "message_data_ptr_1",
                "PTR_DAT_080051a4": "message_data_ptr_2",
                "PTR_DAT_080051a8": "message_data_ptr_3",
                "uVar1": "message_type_return",
                "uVar2": "message_flags",
                "message_flags_shifted": "message_flags_shifted",
                "message_flags_shifted_1": "message_flags_shifted_1",
                "message_flags_shifted_2": "message_flags_shifted_2",
                "handle_error": "handle_error",
                "message_flags_and_1": "message_flags_and_1",
                "message_data_5": "message_data_5",
                "message_flags_and_2": "message_flags_and_2"
            },
            "code": "uint decode_message_header_080050d0(uint32_t *message_type, uint32_t *message_data)\n{\n  uint32_t message_header = *(uint32_t *)PTR_PTR_DAT_0800519c;\n  if ((message_header != 0) && (*(uint32_t *)(message_header + 0x18) == 0)) {\n    clear_message_header(message_header);\n  }\n  if (message_data == (uint32_t *)PTR_DAT_080051a0) {\n    message_data = *(uint32_t **)(message_header + 4);\n  }\n  else if (message_data == (uint32_t *)PTR_DAT_080051a4) {\n    message_data = *(uint32_t **)(message_header + 8);\n  }\n  else if (message_data == (uint32_t *)PTR_DAT_080051a8) {\n    message_data = *(uint32_t **)(message_header + 0xc);\n  }\n  uint16_t message_flags = *(uint16_t *)(message_data + 3);\n  uint32_t message_flags_shifted = (uint32_t)message_flags << 0x1c;\n  if (-1 < (int)message_flags_shifted) {\n    uint32_t message_flags_shifted_1 = (uint32_t)message_flags << 0x1b;\n    if (-1 < (int)message_flags_shifted_1) {\n      *message_type = 9;\n      goto LAB_08005100;\n    }\n    uint32_t message_flags_shifted_2 = (uint32_t)message_flags << 0x1d;\n    if ((int)message_flags_shifted_2 < 0) {\n      if ((uint32_t *)message_data[0xd] != (uint32_t *)0x0) {\n        if ((uint32_t *)message_data[0xd] != message_data + 0x11) {\n          handle_error(message_type);\n        }\n        message_data[0xd] = 0;\n      }\n      *(uint16_t *)(message_data + 3) = *(uint16_t *)(message_data + 3) & 0xffdb;\n      message_data[1] = 0;\n      *message_data = message_data[4];\n    }\n    *(uint16_t *)(message_data + 3) = *(uint16_t *)(message_data + 3) | 8;\n  }\n  if ((message_data[4] == 0) && ((*(uint16_t *)(message_data + 3) & 0x280) != 0x200)) {\n    handle_error(message_type, message_data);\n  }\n  uint16_t message_flags_1 = *(uint16_t *)(message_data + 3);\n  uint16_t message_flags_and_1 = message_flags_1 & 1;\n  if (message_flags_and_1 == 0) {\n    uint32_t message_data_5 = message_data[5];\n    if (-1 < (int)((uint32_t)message_flags_1 << 0x1e)) {\n      message_data[2] = message_data_5;\n    }\n  }\n  else {\n    message_data[2] = 0;\n    message_data[6] = -message_data[5];\n  }\n  if (message_data[4] == 0) {\n    uint16_t message_flags_2 = *(uint16_t *)(message_data + 3);\n    uint16_t message_flags_and_2 = (int)(int16_t)message_flags_2 & 0x80;\n    if (message_flags_and_2 != 0) {\n      *(uint16_t *)(message_data + 3) = message_flags_2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    return 0;\n  }\n  return message_data[5];\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "decode_message_header_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "out_address",
                "param_2": "size",
                "puVar1": "pointer",
                "uVar2": "result",
                "puVar3": "prev",
                "iVar4": "padding",
                "uVar5": "free_space",
                "puVar6": "prev",
                "puVar7": "current",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_08004978(uint *out_address, uint size) {\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_address = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    uint *prev = *(uint **)PTR_DAT_08004a2c;\n    uint *current = *(uint **)PTR_DAT_08004a2c;\n    while (current != (uint *)0x0) {\n      uint free_space = *current - aligned_size;\n      if (-1 < (int)free_space) {\n        if (free_space < 0xc) {\n          if (prev == current) {\n            aligned_size = prev[1];\n          }\n          else {\n            aligned_size = current[1];\n          }\n          if (prev == current) {\n            *(uint *)PTR_DAT_08004a2c = aligned_size;\n            current = prev;\n          }\n          else {\n            prev[1] = aligned_size;\n          }\n        }\n        else {\n          *current = free_space;\n          *(uint *)((int)current + free_space) = aligned_size;\n          current = (uint *)((int)current + free_space);\n        }\n        goto LAB_080049dc;\n      }\n      prev = current;\n      current = (uint *)current[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint result = FUN_0800500c(out_address);\n      *(uint *)PTR_DAT_08004a30 = result;\n    }\n    current = (uint *)FUN_0800500c(out_address, aligned_size);\n    if ((current != (uint *)0xffffffff) && ((current == (uint *)((int)current + 3U & 0xfffffffc)) || (FUN_0800500c(out_address, (int)current + 4 - (int)current) != -1))) {\n      *current = aligned_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_address);\n      uint aligned_address = (int)current + 0xbU & 0xfffffff8;\n      int padding = aligned_address - (int)(current + 1);\n      if (padding != 0) {\n        *(int *)((int)current + padding) = -padding;\n        return aligned_address;\n      }\n      return aligned_address;\n    }\n    *out_address = 0xc;\n    do_nothing_0800557e(out_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "allocate_memory_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_params_08002d0c",
                "param_1": "params",
                "param_2": "param2",
                "param_3": "expected_value",
                "param_4": "param4",
                "param_5": "max_param5",
                "iVar1": "current_value",
                "mask": "mask",
                "diff": "diff",
                "result": "result"
            },
            "code": "int check_params_08002d0c(uint **params, uint param2, bool expected_value, int param4, uint max_param5) {\n    int result;\n    uint mask;\n    uint diff;\n    int current_value;\n\n    do {\n        mask = param2 & ~**params;\n        diff = (mask == 0) != expected_value;\n        if (diff) {\n            return 0;\n        }\n    } while ((max_param5 == 0xffffffff) || (max_param5 != 0 && (current_value = FUN_08000e30(), (uint)(current_value - param4) <= max_param5)));\n\n    (*params)[3] &= 0xfffffe5f;\n    (*params)[5] &= 0xfffffffe;\n    *(undefined *)((int)params + 0x39) = 0x20;\n    *(undefined *)((int)params + 0x3a) = 0x20;\n    *(undefined *)(params + 0xe) = 0;\n    result = 3;\n    return result;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_params_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "param_array",
                "puVar1": "param_9",
                "**param_1": "*current_param",
                "(*param_1)[1]": "current_param[1]",
                "*(char *)puVar1": "*(char *)param_9",
                "*(short *)((int)param_1 + 0x2a)": "param_2",
                "*(undefined *)((int)param_1 + 0x3d)": "*((char *)(*param_array) + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*((char *)(*param_array) + 0x3e)"
            },
            "code": "uint32_t process_param_08001904(uint32_t **param_array)\n{\n  uint32_t *current_param = *param_array;\n  \n  if (*((char *)(*param_array) + 0x3d) == '\"') {\n    uint16_t param_2 = *((uint16_t *)(*param_array) + 0x2a);\n    \n    if (param_2 < 4) {\n      if (param_2 < 2) {\n        current_param[0] = current_param[0] & 0xfffffbff;\n        current_param[1] = current_param[1] & 0xfffff8ff;\n        uint32_t *param_9 = param_array[9];\n        param_array[9] = param_9 + 1;\n        *((char *)param_9) = (char)current_param[4];\n        param_2--;\n        *((char *)(*param_array) + 0x3d) = 0x20;\n        param_array[0xc] = NULL;\n        \n        if (*((char *)(*param_array) + 0x3e) == '@') {\n          *((char *)(*param_array) + 0x3e) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *((char *)(*param_array) + 0x3e) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      uint32_t *param_9 = param_array[9];\n      param_array[9] = param_9 + 1;\n      *((char *)param_9) = (char)current_param[4];\n      param_2--;\n      \n      if (param_2 == 3) {\n        current_param[1] = current_param[1] & 0xfffffbff;\n      }\n    }\n  }\n  \n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_param_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "execute_function_with_params_08000c64",
                "in_r3": "param1/param2",
                "PTR_DAT_08000c78": "function_ptr1",
                "PTR_DAT_08000c74": "function_ptr2"
            },
            "code": "void execute_function_with_params_08000c64(void)\n{\n  undefined4 param1;\n  undefined4 param2;\n  int buffer_size = 0x10;\n  FUN_08000b54(PTR_DAT_08000c78, PTR_DAT_08000c74, buffer_size, param1, param2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "res",
                "uVar2": "third",
                "puVar3": "d",
                "uVar4": "bit",
                "uVar5": "first",
                "FUN_08002f66": "handle_case_a",
                "FUN_0800295c": "handle_case_b",
                "FUN_08002f4c": "handle_case_c",
                "do_nothing_08003f94": "do_nothing",
                "PTR_LAB_0800311c_1_08003118": "handle_case_e",
                "FUN_08000f8c": "do_something"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n    uint *d = *data;\n    uint first = *d;\n    uint third = d[3];\n    if ((first & 0xf) == 0 && (first & 0x20) && (third & 0x20)) {\n        handle_case_a(data);\n        return;\n    }\n    if ((first & 0xf) == 0 || ((d[5] & 1) == 0 && (third & 0x120) == 0)) {\n        if ((first & 0x80) && (third & 0x80)) {\n            handle_case_b(data);\n            return;\n        }\n        if ((first & 0x40) && (third & 0x40)) {\n            handle_case_c(data);\n        }\n    } else {\n        if ((first & 1) && (third & 0x100)) {\n            (*data)[15] = (uint *)((uint)(*data)[15] | 1);\n        }\n        if ((first & 4) && (d[5] & 1)) {\n            (*data)[15] = (uint *)((uint)(*data)[15] | 2);\n        }\n        if ((first & 2) && (d[5] & 1)) {\n            (*data)[15] = (uint *)((uint)(*data)[15] | 4);\n        }\n        if ((first & 8) && (d[5] & 1)) {\n            (*data)[15] = (uint *)((uint)(*data)[15] | 8);\n        }\n        if ((*data)[15] != (uint *)0) {\n            if ((first & 0x20) && (third & 0x20)) {\n                handle_case_a(data);\n            }\n            if (((uint)(*data)[15] & 8) == 0 && ((**data)[5] & 0x40) == 0) {\n                do_nothing(data);\n                (*data)[15] = (uint *)0;\n                return;\n            }\n            handle_case_d(data);\n            d = *data;\n            if ((d[5] & 0x40) == 0) {\n                do_nothing(data);\n                return;\n            }\n            d[5] &= 0xffffffbf;\n            if ((*data)[13] == (uint *)0) {\n                do_nothing(data);\n                return;\n            }\n            (*data)[13][20] = (uint)PTR_LAB_0800311c_1_08003118;\n            int res = do_something((*data)[13]);\n            if (res != 0) {\n                (*(code *)(*data)[13][20])();\n                return;\n            }\n        }\n    }\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002940",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input",
                "return": "result"
            },
            "code": "int subtract_four_from_input_0800387c(int input) {\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "check_param": "check_param",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_08003506": "get_result",
                "FUN_0800351e": "check_param_0800351e"
            },
            "code": "int check_param_0800351e(int input_param) {\n    int result;\n    if (input_param != 0) {\n        result = get_result();\n        return result;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "check_param_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "*pbVar1": "*byte_ptr",
                "sVar2": "count",
                "*puVar3": "*undefined_ptr"
            },
            "code": "undefined4 process_data_08002f66(int *data)\n{\n  byte *byte_ptr;\n  short count;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  process_other_data();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "process_data_080034b6",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_size",
                "param_4": "data_buffer",
                "FUN_08001198": "process_data_helper"
            },
            "code": "void process_data_080034b6(undefined4 data_ptr, undefined2 data_type, int data_size, undefined4 data_buffer) {\n    if (data_size == 0) {\n        process_data_080034b6_helper(data_ptr, data_type, 0, data_buffer, data_buffer);\n        return;\n    }\n    process_data_080034b6_helper(data_ptr, data_type, 1, data_buffer, data_buffer);\n    return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "process_data_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_address",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_08003ef4": "data_array",
                "PTR_DAT_08003ef8": "data_index_array",
                "*(char *)(param_1 + 0x5c)": "char_code",
                "FUN_08000e60": "print_message",
                "FUN_08000ec4": "print_message",
                "FUN_08002eb2": "update_data2",
                "PTR_DAT_08003efc": "data_pointer_array"
            },
            "code": "void update_data_08003eac(int data_address, int new_data){\n    if (data_address != 0){\n        int index = *(byte *)(data_address + 0x44);\n        *(undefined4 *)(PTR_DAT_08003ef4 + index * 4) = new_data;\n        *(int *)(PTR_DAT_08003ef8 + index * 4) = data_address;\n        int char_code = *(char *)(data_address + 0x5c);\n        print_message(0, char_code, 2);\n        print_message(char_code);\n        update_data_08003eac2(*(undefined4 *)(PTR_DAT_08003efc + index * 4), *(int *)(data_address + 0x68) + (uint)*(ushort *)(data_address + 0x6e), 1);\n    }\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "get_value_from_param_08003e18",
                "param_1": "param_value",
                "param_2": "output_buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "iVar1": "result",
                "PTR_DAT_08003e50": "PTR_DATA"
            },
            "code": "int get_value_from_param_08003e18(int param_value, char* output_buffer, int buffer_size, int default_value) {\n    if (param_value == 0) {\n        return -1;\n    }\n    int result = get_result();\n    if (result == 0) {\n        *output_buffer = *(char *)(param_value + 0x45);\n        copy_memory(*(int *)(PTR_DAT_08003e50 + (uint)*(unsigned char *)(param_value + 0x44) * 4), param_value + 0x45, 1, PTR_DAT_08003e50, default_value);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "get_value_from_param_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_ptr_dat_to_22_080040fc",
                "PTR_DAT_08004108": "ptr_dat",
                "0x16": "value_to_set",
                "0xffffffff": "return_value"
            },
            "code": "void set_ptr_dat_to_22_080040fc() {\n    int value_to_set = 22;\n    *(int *)PTR_DAT_08004108 = value_to_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_to_22_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "decode_packet_08002dd0",
                "param_1": "packet_data",
                "param_2": "packet_mask",
                "param_3": "packet_length",
                "param_4": "param_4",
                "uVar1": "packet_data_result",
                "iVar2": "result"
            },
            "code": "int decode_packet_08002dd0(int *packet_data, ushort *packet_mask, int packet_length, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)packet_data + 0x39) == ' ') {\n    if (packet_mask == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (packet_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(packet_data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(packet_data + 0xe) = 1;\n      packet_data[0xf] = 0;\n      *(undefined *)((int)packet_data + 0x39) = 0x21;\n      uVar1 = get_packet_data(packet_data, param_4);\n      *(short *)(packet_data + 9) = (short)packet_length;\n      *(short *)((int)packet_data + 0x26) = (short)packet_length;\n      while (*(short *)((int)packet_data + 0x26) != 0) {\n        *(short *)((int)packet_data + 0x26) = *(short *)((int)packet_data + 0x26) + -1;\n        if (packet_data[2] == 0x1000) {\n          result = decode_packet_08002dd0_data(packet_data, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*packet_data + 4) = *packet_mask & 0x1ff;\n          if (packet_data[4] == 0) {\n            packet_mask = packet_mask + 1;\n          }\n          else {\n            packet_mask = (ushort *)((int)packet_mask + 1);\n          }\n        }\n        else {\n          result = decode_packet_08002dd0_data(packet_data, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*packet_data + 4) = (uint)*(byte *)packet_mask;\n          packet_mask = (ushort *)((int)packet_mask + 1);\n        }\n      }\n      result = decode_packet_08002dd0_data(packet_data, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)packet_data + 0x39) = 0x20;\n        *(undefined *)(packet_data + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "decode_packet_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "execute_function_with_args_08004860",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "arg3_copy",
                "uStack_4": "arg4_copy",
                "PTR_PTR_DAT_08004880": "PTR_PTR_DATA"
            },
            "code": "void execute_function_with_args_08004860(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    undefined4 arg3_copy;\n    undefined4 arg4_copy;\n    arg3_copy = arg3;\n    arg4_copy = arg4;\n    execute_function(*(undefined4 *)PTR_PTR_DAT_08004880,arg1,arg2,&arg3_copy,arg1,&arg3_copy);\n    return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "execute_command_08004622",
                "param_1": "command_ptr",
                "param_2": "command_type",
                "param_3": "command_length",
                "param_4": "command_data",
                "FUN_080045c8": "execute_subcommand"
            },
            "code": "void execute_command_08004622(void *command_ptr, uint8_t command_type, uint32_t command_length, void *command_data)\n{\n  if (command_length != 0) {\n    execute_subcommand(command_ptr, command_type, command_length & 0xff);\n    return;\n  }\n  (**(code **)*command_ptr)(command_ptr, command_type & 0xff, 0, *(code **)*command_ptr, command_data);\n  return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "execute_command_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "print_result_if_valid_input_08003414",
                "param_1": "input_value",
                "local_4c": "result_array",
                "FUN_080034f4": "calculate_result",
                "PTR_DAT_08003468": "PTR_DAT_08003468",
                "FUN_0800339c": "get_input_type",
                "FUN_0800354a": "get_input_flag",
                "uVar2": "input_flag",
                "FUN_08002864": "print_result_array",
                "FUN_080028f0": "print_result_array_with_flag",
                "FUN_0800268e": "clear_result_array"
            },
            "code": "void print_result_if_valid_input_08003414(int input_value)\n{\n  int result_array[16];\n  result_array[0] = calculate_result(input_value, PTR_DAT_08003468);\n  if ((result_array[0] != 0) &&\n     ((((input_value = get_input_type(input_value)), input_value == 0 || (input_value == 4)) || (input_value == 8)) ||\n      ((input_value == 0xc || (input_value == 0x18)))))) {\n    uint input_flag = get_input_flag(input_value, PTR_DAT_08003468);\n    if ((input_flag & 0x100000) == 0) {\n      print_result_array(result_array, input_value);\n    }\n    else {\n      print_result_array_with_flag(result_array, input_value);\n    }\n    clear_result_array(result_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "print_result_if_valid_input_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "execute_function_08005718",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "pointer",
                "iVar2": "result"
            },
            "code": "void execute_function_08005718(int *output, undefined4 input1, undefined4 input2, undefined4 input3) {\n  undefined *pointer;\n  int result;\n  \n  pointer = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  result = calculate_value(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)pointer != 0)) {\n    *output = *(int *)pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": false,
            "current_name": "execute_function_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "set_device_status_080011c0",
                "param_1": "device_info",
                "*(char *)((int)param_1 + 0x3e)": "device_type",
                "param_1[0x14]": "device_subtype",
                "*(uint *)(*param_1 + 0x10)": "device_status_ptr",
                "param_1[0x11]": "device_status",
                "*(char *)((int)param_1 + 0x3d)": "device_status_char"
            },
            "code": "uint32_t set_device_status_080011c0(int *device_info)\n{\n    uint32_t status = 0;\n    char device_type = *(char *)(device_info + 0x3e);\n    uint32_t device_status = device_info[0x11];\n    uint32_t *device_ptr = (uint32_t *)*device_info;\n\n    if (device_type == '@') {\n        if (device_info[0x14] == 0) {\n            *device_ptr = device_status & 0xfe;\n        }\n        else {\n            *device_ptr = device_status & 0xffU | 1;\n        }\n    }\n    else if (device_info[4] == 0x4000) {\n        char device_status_char = *(char *)(device_info + 0x3d);\n        if (device_status_char == '!') {\n            *device_ptr = device_status & 0xfe;\n        }\n        else {\n            *device_ptr = device_status & 0xffU | 1;\n        }\n    }\n    else if (device_info[0x14] == 0) {\n        *device_ptr = (device_status << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (device_info[0x14] == 1) {\n        *device_ptr = (device_status << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_device_status_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "validate_input_08000b54",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_length",
                "bVar1": "result_byte",
                "iVar2": "result_int",
                "unaff_r5": "length_uint",
                "iVar3": "validate_result"
            },
            "code": "int validate_input_08000b54(int **input_array, int *input_value, int input_length)\n{\n  byte result_byte;\n  int result_int;\n  uint length_uint;\n  \n  input_array[19] = input_value;\n  *(char *)(input_array + 24) = (char)input_length;\n  if (*(byte *)((int)input_array + 5) < 4) {\n    result_byte = (**(code **)(**input_array + 8))();\n    length_uint = (uint)result_byte;\n  }\n  if (length_uint == 0) {\n    result_int = 0;\n  }\n  else if ((int)length_uint < 8) {\n    result_int = 0;\n  }\n  else {\n    result_int = validate_array(input_array);\n    *(char *)(input_array + 2) = (char)result_int;\n    if (*(char *)((int)input_array + 9) == *(char *)(input_array + 4)) {\n      result_int = validate_input_08000b54_type(input_array, input_value, input_length);\n    }\n    else {\n      result_int = 0;\n    }\n  }\n  return result_int;\n}",
            "called": [
                "FUN_08000a00",
                "FUN_080006b4",
                "FUN_080008cc",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "validate_input_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_callback_function_0800376e",
                "iVar1": "callback_function_address",
                "FUN_08003750": "get_callback_function_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void execute_callback_function_0800376e(void)\n{\n  int callback_function_address = get_callback_function_address();\n  if (*(code **)(callback_function_address + 0x44) != (code *)0x0) {\n    (**(code **)(callback_function_address + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_function_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_param_08000d98",
                "param_1": "param",
                "iVar1": "result",
                "PTR_DAT_08000ddc": "ptr_denominator",
                "PTR_DAT_08000dd8": "ptr_byte",
                "FUN_08000ee0": "calculate_value",
                "0xf": "MAX_PARAM_VALUE",
                "FUN_08000e60": "set_value",
                "PTR_DAT_08000de0": "ptr_param"
            },
            "code": "int check_and_set_param_08000d98(uint param)\n{\n    uint denominator = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n    int result = FUN_08000ee0(denominator);\n    if (result != 0) {\n        return 1;\n    }\n    if (param > 0xf) {\n        return 1;\n    }\n    FUN_08000e60(0xffffffff, param, 0);\n    *(uint *)PTR_DAT_08000de0 = param;\n    return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_param_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "index",
                "iVar2": "data_ptr",
                "iVar3": "data_ptr",
                "PTR_DAT_08003f88": "data_array_ptr",
                "PTR_DAT_08003f8c": "function_pointers_ptr",
                "PTR_DAT_08003f90": "memory_addresses_ptr"
            },
            "code": "void process_data_08003f48()\n{\n    uint32_t index = get_index();\n    int32_t data_ptr = *(int32_t *)(PTR_DAT_08003f88 + index * 4);\n    if ((index < 10) && (data_ptr = (**(code **)(PTR_DAT_08003f8c + index * 4))(data_ptr), data_ptr != -1)) {\n        uint32_t byte_offset = *(uint8_t *)(data_ptr + 0x44);\n        uint32_t int_offset = *(uint16_t *)(data_ptr + 0x6e);\n        uint32_t address = *(uint32_t *)(PTR_DAT_08003f90 + byte_offset * 4);\n        uint32_t value = *(int32_t *)(data_ptr + 0x68) + int_offset;\n        write_to_memory(address, value, 1);\n    }\n    return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "process_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "call_subroutine_0800340c",
                "FUN_080035fc": "execute_subroutine"
            },
            "code": "void call_subroutine_0800340c() \n{\n  execute_subroutine();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "call_subroutine_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_short_in_array_0800352e",
                "param_1": "target",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ find_short_in_array_0800352e(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_wDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_-DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_kDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_6DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "parse_input_08001ab0",
                "param_1": "input",
                "iVar1": "result",
                "puVar2": "data5",
                "puVar3": "data3",
                "do_nothing_08001aac": "do_nothing",
                "FUN_08003900": "handle_input",
                "PTR_LAB_08001f3c_1_08001bf4": "PTR_LAB_08001f3c_1_08001bf4",
                "FUN_08000f8c": "do_something",
                "DAT_08001bf8": "DAT_08001bf8"
            },
            "code": "void parse_input_08001ab0(uint **input)\n{\n  int input_length = *(byte *)((int)input + 0x3d) - 0x29;\n  uint *data = *input;\n  uint *data2 = input[0xc];\n  uint *data3 = input[0xd];\n  uint *data4 = input[0xe];\n  uint *data5 = input[9];\n  \n  if (input_length < 2) {\n    data2 = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if (*(char *)((int)input + 0x3d) != '`' && (data[1] & 0x800) == 0) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    data2 = NULL;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  \n  *data &= 0xfffff7ff;\n  \n  if ((data[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = NULL;\n      if ((data[5] & 0x40) != 0) {\n        data5 = (uint *)((int)data5 + 1);\n        *(char *)data5 = (char)data[4];\n      }\n      *data &= 0xfffffffe;\n      do_nothing_08001aac(input);\n    }\n    else {\n      if ((data[5] & 0x40) != 0) {\n        data5 = (uint *)((int)data5 + 1);\n        *(char *)data5 = (char)data[4];\n      }\n      handle_input(input);\n    }\n  }\n  else {\n    data[1] &= 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n      data4[0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int result = do_something(data4);\n      if (result != 0) {\n        if ((data[5] & 0x40) != 0) {\n          data5 = (uint *)((int)data5 + 1);\n          *(char *)data5 = (char)data[4];\n        }\n        *data &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)data4[0x14])();\n      }\n    }\n    else {\n      data3[0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int result = do_something(data3);\n      if (result != 0) {\n        *data &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)data3[0x14])();\n      }\n    }\n  }\n  \n  if (*(char *)((int)input + 0x3d) == '(' && ((uint)input[0x10] & 4) != 0) {\n    input[0xb] = DAT_08001bf8;\n    data2 = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    handle_parentheses(input);\n  }\n  return;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "parse_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "set_flag_and_wait_for_response_08001f9c",
                "iVar1": "initial_time",
                "iVar2": "current_time",
                "DAT_0800200c": "data_ptr",
                "DAT_08002010": "flag_ptr",
                "DAT_08002014": "response_ptr",
                "DAT_08002018": "result_ptr"
            },
            "code": "int set_flag_and_wait_for_response_08001f9c()\n{\n    int initial_time = get_current_time();\n    *(uint *)(DAT_0800200c + 0x40) |= 0x10000000;\n    *DAT_08002010 = 1;\n\n    while (get_current_time() - initial_time < 0x3e9)\n    {\n        if ((*(uint *)(DAT_08002014 + 4) & 0x10000) != 0)\n        {\n            *DAT_08002018 = 1;\n            return 0;\n        }\n    }\n\n    return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_and_wait_for_response_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "execute_function_08000d8e",
                "FUN_080034ce": "call_another_function"
            },
            "code": "void execute_function_08000d8e(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "execute_function_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "run_function_08004638",
                "FUN_08004622": "call_another_function"
            },
            "code": "void run_function_08004638(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "run_function_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_byte_to_memory_location_080008cc",
                "param_1": "memory_location",
                "param_2": "byte_value",
                "*(undefined *)(param_1 + 9)": "*(undefined *)(memory_location + 9)",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(memory_location + 4)",
                "*(byte *)(param_1 + 10)": "*(byte *)(memory_location + 10)",
                "*(undefined *)(param_1 + 0xb)": "*(undefined *)(memory_location + 0xb)",
                "*(undefined *)(param_1 + 0x49)": "*(undefined *)(memory_location + 0x49)"
            },
            "code": "void copy_byte_to_memory_location_080008cc(int memory_location, byte byte_value)\n{\n  *(undefined *)(memory_location + 9) = *(undefined *)(memory_location + 4);\n  *(byte *)(memory_location + 10) = *(byte *)(memory_location + 10) ^ 0x80;\n  *(undefined *)(memory_location + 0xb) = byte_value;\n  *(undefined *)(memory_location + 0x49) = 3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_byte_to_memory_location_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "FUNC_08004a84"
            },
            "code": "\nint FUNC_08004a84(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (param_2 == PTR_DAT_08004c90) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08004c98) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08004c9c) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_080050d0(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_08004ac6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08004a60(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08004c70;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08000230(PTR_s___0__08004c94,*pbVar5);\n    puVar1 = PTR_DAT_08004ca0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__08004c94 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08004ba0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08004ba0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      local_84 = *local_8c;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n      param_3 = param_3 + 2;\n      local_8c = local_8c + 1;\n    }\n    else {\n      bVar4 = false;\n      local_84 = 0;\n      iVar7 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08000230(PTR_DAT_08004ca0,*param_3,3);\n  if (iVar7 != 0) {\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n    param_3 = param_3 + 1;\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08000230(PTR_s_efgEFG_08004ca4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08004d9c(param_1,&local_88,param_2,DAT_08004cac,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_08004ca8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08004c22;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60",
                "FUN_080050d0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "FUNC_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "update_uint_from_short_and_int_08005608",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "index",
                "uVar2": "updated_value",
                "bVar3": "is_index_valid"
            },
            "code": "void update_uint_from_short_and_int_08005608(void* data, int offset) {\n  int index = get_index(data, (int)*(short *)(offset + 0xe));\n  bool is_index_valid = -1 < index;\n  uint updated_value;\n  if (is_index_valid) {\n    updated_value = *(int *)(offset + 0x54) + index;\n  } else {\n    updated_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_index_valid) {\n    *(uint *)(offset + 0x54) = updated_value;\n  }\n  if (!is_index_valid) {\n    *(short *)(offset + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "update_uint_from_short_and_int_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "check_input_and_set_values_08002efa",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "PTR_": "",
                "DAT_": "",
                "int": "",
                "short": "",
                "char": "",
                "uint": "",
                "undefined": ""
            },
            "code": "DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ check_input_and_set_values_08002efa(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_,DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_!DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_\\DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_'DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_{DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_gDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_bDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_sDAT_PDAT_TDAT_RDAT__DAT_hDAT_PDAT_TDAT_RDAT__DAT_oDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_vDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_lDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_[DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_]DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_3DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_fDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_dDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_4DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_=DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_(DAT_PDAT_TDAT_RDAT__DAT_*DAT_PDAT_TDAT_RDAT__DAT_iDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_pDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT__DAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_aDAT_PDAT_TDAT_RDAT__DAT_yDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_+DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_cDAT_PDAT_TDAT_RDAT__DAT_)DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_|DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_xDAT_PDAT_TDAT_RDAT__DAT_1DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_0DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_eDAT_PDAT_TDAT_RDAT__DAT_tDAT_PDAT_TDAT_RDAT__DAT_uDAT_PDAT_TDAT_RDAT__DAT_rDAT_PDAT_TDAT_RDAT__DAT_nDAT_PDAT_TDAT_RDAT__DAT_ DAT_PDAT_TDAT_RDAT__DAT_2DAT_PDAT_TDAT_RDAT__DAT_;DAT_PDAT_TDAT_RDAT__DAT_\nDAT_PDAT_TDAT_RDAT__DAT_}DAT_PDAT_TDAT_RDAT__DAT_",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "check_input_and_set_values_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_data_integrity_0800377c",
                "PTR_DAT_08003794": "ptr_data",
                "PTR_DAT_08003794 + 0x24": "ptr_data_offset",
                "*PTR_DAT_08003794": "data_value",
                "*PTR_DAT_08003794 + 0x24": "data_offset_value",
                "FUN_080026ce": "handle_data_integrity_error"
            },
            "code": "void check_data_integrity_0800377c(void)\n{\n  int* ptr = (int*)PTR_DAT_08003794;\n  if (*ptr != 0) {\n    FUN_080026ce();\n  }\n  int* ptr2 = (int*)(PTR_DAT_08003794 + 0x24);\n  if (*ptr2 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_data_integrity_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "set_flag_and_clear_bit_0800268e",
                "param_1": "data",
                "puVar1": "data_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "data[9]",
                "*(undefined *)(param_1 + 0xe)": "data[14]"
            },
            "code": "void set_flag_and_clear_bit_0800268e(uint **data)\n{\n  uint *data_ptr;\n  data[9] = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  call_subroutine(data);\n  data[9] = 0;\n  data[14] = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_flag_and_clear_bit_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data_start",
                "param_2": "data_end",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "data_offset",
                "uVar2": "data_size",
                "cVar5": "bit_mask",
                "iVar6": "data_ptr",
                "uVar3": "i",
                "uVar4": "bit_offset"
            },
            "code": "int process_data_080008e2(int data_start, int data_end, uint32_t param_3, uint32_t param_4)\n{\n  int data_offset = get_data_offset(*(undefined *)(data_start + 0xb),*(undefined *)(data_start + 0xc),param_3,param_4,param_4);\n  uint32_t data_size = get_data_offset(*(undefined *)(data_start + 0xd),*(undefined *)(data_start + 0xe));\n  char bit_mask = (char)((data_size << 0x15) >> 0x18);\n  if ((data_size & 7) != 0) {\n    bit_mask += 1;\n  }\n  *(char *)(data_start + 0xb) = bit_mask;\n  *(undefined *)(data_start + 0x49) = 3;\n  uint32_t bit_offset = 0;\n  for (uint32_t i = 0; i < data_size; i++) {\n    if (((int)(uint)*(ushort *)(data_end + ((i + data_offset) * 0x100000 >> 0x18) * 2) >> (i + data_offset & 0xf) & 1U) == 0) {\n      int data_ptr = (uint)*(byte *)(data_start + 0x49) + data_start;\n      *(byte *)(data_ptr + 9) = *(byte *)(data_ptr + 9) & ~(byte)(1 << bit_offset);\n    }\n    else {\n      int data_ptr = (uint)*(byte *)(data_start + 0x49) + data_start;\n      *(byte *)(data_ptr + 9) = *(byte *)(data_ptr + 9) | (byte)(1 << bit_offset);\n    }\n    bit_offset = (bit_offset + 1) % 8;\n    if (bit_offset == 0) {\n      *(char *)(data_start + 0x49) += 1;\n    }\n  }\n  if ((data_size & 7) != 0) {\n    *(char *)(data_start + 0x49) += 1;\n  }\n  char result = *(char *)(data_start + 0x49);\n  finalize_data(data_start);\n  return (int)(char)(result + 2);\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "ptr_num",
                "param_2": "num",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "ptr_buffer",
                "local_15": "buffer",
                "cVar1": "digit"
            },
            "code": "undefined4 convert_base_080045c8(int *ptr_num, uint num, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient, remainder;\n  char buffer[9];\n\n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *ptr_buffer = buffer + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n    ptr_buffer--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *ptr_buffer = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (ptr_buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = FUN_08000218(ptr_buffer);\n    result = (**(code **)(*ptr_num + 4))(ptr_num, ptr_buffer, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "check_value_and_call_function_08003d18",
                "param_1": "arg1",
                "param_2": "arg2",
                "sVar1": "value",
                "iVar2": "initial_time",
                "iVar3": "check",
                "uVar4": "i"
            },
            "code": "uint check_value_and_call_function_08003d18(undefined4 arg1, uint arg2){\n        int initial_time = FUN_08000e30();\n        short value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n        int check = FUN_080034f4((int)value,PTR_DAT_08003dc4);\n        if (check == 0) {\n            return 0;\n        }\n        uint i = 0;\n        while ((i < 10 &&\n             ((*(int *)(PTR_DAT_08003dc8 + i * 4) == 0 ||\n              (check = FUN_080034f4((int)value,PTR_DAT_08003dc4),\n              **(int **)(PTR_DAT_08003dc8 + i * 4) != check))))) {\n            i = i + 1 & 0xff;\n        }\n        if (9 < i) {\n            if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (FUN_08003cc8(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n            return 0;\n            }\n            i = (uint)(byte)PTR_DAT_08003dcc[0x44];\n        }\n        do {\n            check = FUN_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + i * 4),arg1,arg2 & 0xffff,1000);\n            if (check == 0) {\n                return arg2;\n            }\n            check = FUN_08000e30();\n        } while ((uint)(check - initial_time) < 1000);\n        return 0;\n    }",
            "called": [
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "check_value_and_call_function_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2)\n{\n    return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a00",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "call_two_functions_080034ce",
                "FUN_08000de4": "call_first_function",
                "FUN_08000c8c": "call_second_function"
            },
            "code": "void call_two_functions_080034ce(void)\n{\n  call_first_function();\n  call_second_function();\n  return;\n}",
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "call_two_functions_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "swap_pointers_080047fe",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "FUN_08004844": "swap"
            },
            "code": "void swap_pointers_080047fe(void* pointer1, void* pointer2)\n{\n    swap(pointer2, pointer1);\n    return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "swap_pointers_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "set_flags_08001256",
                "param_1": "param_array",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t set_flags_08001256(uint32_t **param_array)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = param_array[11];\n  if ((*(char *)((int)param_array + 61) == '\"') && ((param_array[20] != (uint32_t *)0x0 || (*(char *)((int)param_array + 62) != '@')))) {\n    if ((param_array[20] == (uint32_t *)0x0) && (param_array[4] == (uint32_t *)0xc000)) {\n      **param_array = **param_array | 0x100;\n      param_array[20] = (uint32_t *)((int)param_array[20] + 1);\n    }\n    else {\n      if (*(short *)((int)param_array + 42) == 0) {\n        **param_array = **param_array | 0x200;\n      }\n      else if (*(short *)((int)param_array + 42) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **param_array = **param_array & 0xfffffbff;\n          flag_ptr = *param_array;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (param_array[12] == (uint32_t *)0x12)) {\n          **param_array = **param_array & 0xfffffbff;\n          **param_array = **param_array | 0x200;\n        }\n        else if (param_array[11] == (uint32_t *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param_array + 42) == 2) {\n        if (param_array[11] == (uint32_t *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = **param_array & 0xfffffbff;\n          **param_array = **param_array | 0x800;\n        }\n        flag_ptr = *param_array;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **param_array = **param_array | 0x400;\n        flag_ptr = *param_array;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      param_array[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_ptrs_start",
                "puVar2": "function_ptrs2_start",
                "puVar3": "function_ptrs2_end",
                "iVar4": "function_ptrs_count",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_ptrs_start = PTR_DAT_080048bc;\n  undefined *function_ptrs_end = PTR_DAT_080048c0;\n  int function_ptrs_count = (int)function_ptrs_end - (int)function_ptrs_start;\n  for (int i = 0; i < function_ptrs_count / 4; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  undefined *function_ptrs2_start = PTR_DAT_080048c4;\n  undefined *function_ptrs2_end = PTR_DAT_080048c8;\n  int function_ptrs2_count = (int)function_ptrs2_end - (int)function_ptrs2_start;\n  for (int i = 0; i < function_ptrs2_count / 4; i++) {\n    (**(code **)(function_ptrs2_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "execute_initialization_08004648",
                "FUN_08000e3c": "initialize_memory",
                "FUN_08000d8e": "initialize_data"
            },
            "code": "void execute_initialization_08004648(void)\n{\n  initialize_memory(3);\n  initialize_data();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "execute_initialization_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "set_data_08000600",
                "param_1": "data",
                "param_2": "size",
                "cVar1": "data_type",
                "iVar2": "result",
                "PTR_DAT_08000668": "ptr_to_data"
            },
            "code": "void set_data_08000600(int **data, int size) {\n  char data_type = *(char *)((int)data + 5);\n  int *PTR_DAT_08000668 = (int *)PTR_DAT_08000668;\n  if (data_type == '\\x02' || data_type == '\\x03' || data_type == '\\x01') {\n    *data = PTR_DAT_08000668;\n  }\n  else {\n    *data = PTR_DAT_08000668;\n  }\n  set_data_08000600_values(*data, size, 6);\n  if (size > 1) {\n    set_data_08000600_values(size, 1);\n    set_data_08000600_values(*(undefined *)((int)data + 6), 0);\n  }\n  do {\n    int result = (**(code **)(**data + 0xc))();\n  } while (result >= -1);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n}\n",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "set_data_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "call_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_080045be(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_08000728",
                "param_1": "data",
                "param_2": "length",
                "uVar2": "crc",
                "uVar3": "lsb",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint16_t calculate_crc16_08000728(uint8_t* data, uint16_t length)\n{\n  uint16_t crc = 0xffff;\n  for (uint16_t i = 0; i < length; i++)\n  {\n    crc ^= *(data + i + 9);\n    for (uint8_t j = 1; j < 9; j++)\n    {\n      uint16_t lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0)\n      {\n        crc ^= 0xa001;\n      }\n    }\n  }\n  return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_result_0800354a",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_0800352e": "calculate_result"
            },
            "code": "int get_result_0800354a(int input_value) {\n  if (input_value == -1) {\n    return -1;\n  }\n  int result = calculate_result();\n  return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_0800339c"
            ],
            "imported": false,
            "current_name": "get_result_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_uint_at_offset_0800124a",
                "param_1": "base_ptr",
                "PTR_8": "offset",
                "DAT_080484a4": "target_ptr",
                "*PTR_8": "value"
            },
            "code": "int set_uint_at_offset_0800124a(int *base_ptr, int PTR_8, int *PTR_8) {\n    uint *DAT_080484a4 = (uint *)(base_ptr + PTR_8);\n    *DAT_080484a4 = *PTR_8 & 0xff;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_uint_at_offset_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "get_offset_08004094",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "memory_location"
            },
            "code": "int get_offset_08004094(int offset)\n{\n  int current_offset = *(int*)PTR_DAT_080040c4;\n  undefined* memory_location = (undefined*)(offset + current_offset);\n  if (memory_location <= &stack0x00000000)\n  {\n    *(undefined**)PTR_DAT_080040c4 = memory_location;\n    return current_offset;\n  }\n  *(undefined4*)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "get_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_uint_at_offset_080033c8",
                "DAT_080033d4": "data_offset",
                "uint": "unsigned_int",
                "uint_ptr": "unsigned_int_pointer",
                "mask": "bitmask"
            },
            "code": "void clear_bit_in_uint_at_offset_080033c8(void)\n{\n  uint *uint_ptr = (uint *)(DAT_080033d4 + 0x40);\n  uint mask = 0xdfffffff;\n  *uint_ptr = *uint_ptr & mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_at_offset_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_bit_in_register_080031fc",
                "param_1": "bit_position",
                "uVar1": "return_value",
                "DAT_08003350": "register_base_address",
                "DAT_08003354": "bit_0_return_value",
                "DAT_08003358": "bit_1_return_value",
                "DAT_0800335c": "bit_2_return_value",
                "DAT_08003360": "bit_3_return_value",
                "DAT_08003364": "bit_4_return_value",
                "DAT_08003368": "bit_5_return_value",
                "DAT_0800336c": "bit_6_return_value",
                "DAT_08003370": "bit_7_return_value",
                "DAT_08003374": "bit_8_return_value",
                "DAT_08003378": "bit_9_return_value",
                "DAT_0800337c": "bit_10_return_value"
            },
            "code": "uint32_t set_bit_in_register_080031fc(uint32_t bit_position) {\n    uint32_t* register_address = (uint32_t*)(DAT_08003350 + 0x30);\n    uint32_t bit_mask = 1 << bit_position;\n    *register_address |= bit_mask;\n\n    switch(bit_position) {\n        case 0: return DAT_08003354;\n        case 1: return DAT_08003358;\n        case 2: return DAT_0800335c;\n        case 3: return DAT_08003360;\n        case 4: return DAT_08003364;\n        case 5: return DAT_08003368;\n        case 6: return DAT_0800336c;\n        case 7: return DAT_08003370;\n        case 8: return DAT_08003374;\n        case 9: return DAT_08003378;\n        case 10: return DAT_0800337c;\n        default: return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "process_input_08000690",
                "param_1": "input_value",
                "param_2": "max_value",
                "FUN_08000682": "process_output"
            },
            "code": "void process_input_08000690(int input_value, int max_value, undefined4 param_3, undefined4 param_4)\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (max_value == 0xffff) {\n    process_output(PTR_DAT_080006b0, 1, 0, 0, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "process_data_080054fc",
                "param_1": "data_pointer",
                "param_2": "data_array",
                "local_18": "value1",
                "local_14": "temp_pointer",
                "uVar1": "flag",
                "FUN_080054b4": "get_flag_value",
                "FUN_08004978": "get_value",
                "iVar2": "value2",
                "PTR_LAB_08005320_1_08005578": "some_pointer",
                "(int *)0x0": "NULL",
                "FUN_080056f8": "check_value"
            },
            "code": "void process_data_080054fc(int data_pointer, int *data_array)\n{\n  ushort flag;\n  int value1;\n  int value2;\n  int *temp_pointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n    value1 = data_pointer;\n    temp_pointer = data_array;\n    flag = get_flag_value(data_pointer, data_array, &value1, &temp_pointer);\n    value2 = get_value(data_pointer, value1);\n    if (value2 != 0) {\n      *(undefined **)(data_pointer + 0x28) = PTR_LAB_08005320_1_08005578;\n      *data_array = value2;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[5] = value1;\n      data_array[4] = value2;\n      if ((temp_pointer != (int *)0x0) && (value2 = check_value(data_pointer, (int)*(short *)((int)data_array + 0xe)), value2 != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_08004978",
                "FUN_080054b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "process_data_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_byte_at_ninth_index_08001420",
                "param_1": "param_array",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "uint_ptr": "uint_ptr"
            },
            "code": "int increment_byte_at_ninth_index_08001420(int *param_array)\n{\n  short *short_ptr = (short *)(param_array + 0x2a);\n  if (*short_ptr != 0)\n  {\n    byte *byte_ptr = (byte *)param_array[9];\n    param_array[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*param_array + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_byte_at_ninth_index_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "set_flags_and_call_functions": "set_flags_and_call_functions",
                "puVar1": "flag_ptr",
                "DAT_08000e14": "flag_ptr",
                "FUN_08000e3c": "call_function_1",
                "FUN_08000d98": "call_function_2",
                "do_nothing_08000d96": "do_nothing",
                "FUN_08000de4": "set_flags_and_call_functions_08000de4"
            },
            "code": "int set_flags_and_call_functions_08000de4() {\n  uint *DAT_08000e14 = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *DAT_08000e14 |= 0x400;\n  *DAT_08000e14 |= 0x100;\n  call_function_1(3);\n  call_function_2(0xf);\n  do_nothing_08000d96();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000d98",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_data_080026ce",
                "param_1": "data",
                "iVar1": "data_ptr",
                "do_nothing_080026ca": "do_nothing",
                "do_nothing_080026c8": "do_nothing_2",
                "FUN_08003754": "perform_action_1",
                "FUN_0800376e": "perform_action_3",
                "do_nothing_0800293e": "do_nothing_4",
                "do_nothing_080026cc": "do_nothing_5",
                "do_nothing_0800293c": "do_nothing_6"
            },
            "code": "void process_data_080026ce(int *data)\n{\n  int data_ptr = *data;\n  \n  if (((*(uint *)(data_ptr + 0x10) & 2) != 0) && ((*(uint *)(data_ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 6) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      perform_action_1();\n      do_nothing_080026ca(data);\n    }\n    else {\n      do_nothing_080026c8();\n    }\n    *(undefined *)(data + 6) = 0;\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 4) != 0) && ((*(uint *)(data_ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 6) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      perform_action_1(data);\n      do_nothing_080026ca(data);\n    }\n    else {\n      do_nothing_080026c8(data);\n    }\n    *(undefined *)(data + 6) = 0;\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 8) != 0) && ((*(uint *)(data_ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 6) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      perform_action_1(data);\n      do_nothing_080026ca(data);\n    }\n    else {\n      do_nothing_080026c8(data);\n    }\n    *(undefined *)(data + 6) = 0;\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x10) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffef;\n    *(undefined *)(data + 6) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      perform_action_1(data);\n      do_nothing_080026ca(data);\n    }\n    else {\n      do_nothing_080026c8(data);\n    }\n    *(undefined *)(data + 6) = 0;\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 1) != 0) && ((*(uint *)(data_ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffe;\n    perform_action_3(data);\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x80) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800293e(data);\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x40) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffbf;\n    do_nothing_080026cc(data);\n  }\n  data_ptr = *data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x20) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffdf;\n    do_nothing_0800293c(data);\n  }\n  return;\n}\n",
            "called": [
                "FUN_080026c8",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_0800293e",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_data_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "str",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000218(char* str) {\n    char* current_char = str;\n    while (*current_char != \"\\0\") {\n        current_char++;\n    }\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "determine_value_0800339c",
                "param_1": "input1",
                "param_2": "unused",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t determine_value_0800339c(uint32_t input1, uint32_t input3, uint32_t input4)\n{\n  int32_t result = process_input(input1, PTR_DAT_080033c4, input3, input4, input4);\n  uint8_t shifted_result = (uint8_t)((result << 12) >> 27);\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 12;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "determine_value_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "reverse_bits_and_store_08000e60",
                "param_1": "bit_index",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "num_bits_shifted",
                "uVar2": "num_bits_to_shift",
                "DAT_08000ebc": "ptr_ebc",
                "DAT_08000ec0": "ptr_ec0"
            },
            "code": "void reverse_bits_and_store_08000e60(uint bit_index, uint mask, uint data)\n{\n  uint num_bits_shifted = (uint)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint num_bits_to_shift = 7 - num_bits_shifted;\n  if (num_bits_to_shift > 3) {\n    num_bits_to_shift = 4;\n  }\n  if (num_bits_shifted + 4 < 7) {\n    num_bits_shifted = 0;\n  }\n  else {\n    num_bits_shifted = num_bits_shifted - 3;\n  }\n  uint shifted_masked_data = (mask & (1 << (num_bits_to_shift & 0xff)) - 1U) << (num_bits_shifted & 0xff) | (1 << (num_bits_shifted & 0xff)) - 1U & data;\n  if ((int)bit_index < 0) {\n    *(char *)(DAT_08000ec0 + (bit_index & 0xf)) = (char)(shifted_masked_data << 4);\n  }\n  else {\n    *(char *)(bit_index + 0xe000e400) = (char)(shifted_masked_data << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003eac",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "reverse_bits_and_store_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "check_and_call_0800165a",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "code": "int check_and_call_0800165a(int *data_ptr, int param_2, int param_3, int param_4)\n{\n    uint32_t flag = *(uint32_t *)(*data_ptr + 0x18);\n    uint16_t value;\n    if ((flag & 0x80) == 0) {\n        value = *(uint16_t *)(data_ptr + 3);\n    }\n    else {\n        value = *(uint16_t *)(data_ptr + 6);\n    }\n    call_function(data_ptr, (flag & 4) == 0, value, flag, param_4);\n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "check_and_call_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_address",
                "param_2": "output_address",
                "bVar1": "data_size",
                "bVar2": "output_size",
                "cVar3": "c",
                "uVar4": "processed_data",
                "uVar5": "i"
            },
            "code": "int process_data_08000b04(int data_address, int output_address) {\n  byte data_size = *(byte *)(data_address + 0xc);\n  byte output_size = *(byte *)(data_address + 0xe);\n  *(undefined *)(data_address + 0xd) = 0;\n  *(byte *)(data_address + 0xe) = output_size;\n  *(undefined *)(data_address + 0x49) = 6;\n  for (uint i = 0; i < output_size; i++) {\n    undefined2 processed_data = process_single_data(*(undefined *)(i * 2 + data_address + 0x10), *(undefined *)(data_address + (i + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (data_size + i) * 2) = processed_data;\n  }\n  char c = *(char *)(data_address + 0x49);\n  finalize_processing(data_address);\n  return (int)(char)(c + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "check_and_update_flags_0800262c",
                "param_1": "param_ptr",
                "DAT_08002688": "DAT_08002688",
                "execute_function_1": "execute_function_1",
                "do_nothing_0800268c": "do_nothing",
                "PTR_08002688": "PTR_08002688"
            },
            "code": "void check_and_update_flags_0800262c(int *param_ptr)\n{\n  uint32_t flag1 = *(uint32_t *)(*param_ptr + 0xc);\n  uint32_t flag2 = *(uint32_t *)(*param_ptr + 8);\n  if ((flag1 & 0x100) && (flag2 & 0x1000)) {\n    execute_function_1();\n    *(uint32_t *)(*param_ptr + 0xc) = (flag1 & 0xff) | 0xfffffe7f;\n  }\n  if ((flag1 & 0x200) && (flag2 & 0x2000)) {\n    do_nothing_0800268c(param_ptr);\n    *(uint32_t *)(*param_ptr + 0xc) = (flag1 & 0xff) | 0xfffffd7f;\n  }\n  *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n  *(undefined *)((int)param_ptr + 0x1d) = 1;\n  return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_08004388",
                "param_1": "flags",
                "param_2": "value",
                "param_3": "b",
                "bVar1": "lower_three_bits",
                "iVar2": "num_bits",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr"
            },
            "code": "void set_flags_08004388(int flags, int value, byte b) {\n    int num_bits = 0;\n    uint jump_index;\n    int *jumptable_ptr;\n    int *flag1_ptr = (int *)(flags + 0x11c);\n    byte *flag2_ptr = (byte *)(flags + 0x144);\n    *flag1_ptr = value;\n    *flag2_ptr = b;\n    byte bVar1 = b & 7;\n    if (bVar1 == 4) {\n        num_bits = 7;\n    }\n    else if (bVar1 == 6) {\n        num_bits = 8;\n    }\n    else if (bVar1 == 2) {\n        num_bits = 6;\n    }\n    if ((b & 0x30) == 0x30) {\n        *(int *)(flags + 0x128) = 0x600;\n        num_bits++;\n    }\n    else if ((b & 0x20) == 0) {\n        *(int *)(flags + 0x128) = 0;\n    }\n    else {\n        *(int *)(flags + 0x128) = 0x400;\n        num_bits++;\n    }\n    if ((b & 8) == 0) {\n        *(int *)(flags + 0x124) = 0;\n    }\n    else {\n        *(int *)(flags + 0x124) = 0x2000;\n    }\n    if (num_bits == 8) {\n        *(int *)(flags + 0x120) = 0;\n    }\n    else if (num_bits == 9) {\n        *(int *)(flags + 0x120) = 0x1000;\n    }\n    else {\n        num_bits = 0;\n    }\n    if (num_bits != 0) {\n        FUNC_08003978(flags + 0xd4);\n        FUN_08003e54(flags + 0xd4,uRam08004434);\n        return;\n    }\n    jumptable_ptr = (int *)0x8004432;\n    FUN_08004808(uRam08004440,299,uRam0800443c);\n    jump_index = extraout_r1;\n    if (jump_index < 0x60) {\n        jumptable_ptr = (int *)(PTR_DAT_0800445c + jump_index * 2);\n    }\n    else {\n        jumptable_ptr = (int *)0xffff;\n    }\n    (*jumptable_ptr)();\n}",
            "called": [
                "FUN_08003978",
                "FUN_08004808",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "index1",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "var1",
                "uVar6": "var2",
                "iVar7": "var3",
                "pcVar8": "func_ptr",
                "iVar9": "var4",
                "uVar10": "var5",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "var6",
                "uVar12": "var7"
            },
            "code": "void process_data_080051ac(void) {\n  uint *data_ptr;\n  int index1;\n  int *ptr1;\n  int *ptr2;\n  uint var1;\n  ushort var2;\n  int var3;\n  code *func_ptr;\n  int var4;\n  uint var5;\n  code *jump_table;\n  bool var6;\n  undefined8 var7;\n  init_data_struct(6);\n  jump_table = (code *)0x80051bb;\n  var7 = get_data(1);\n  ptr1 = (int *)((ulonglong)var7 >> 0x20);\n  data_ptr = (uint *)var7;\n  var2 = *(ushort *)(ptr1 + 3);\n  var1 = (uint)var2;\n  if ((int)(var1 << 0x1c) < 0) {\n    index1 = ptr1[4];\n    if (index1 != 0) {\n      var3 = var1 << 0x1e;\n      var6 = var3 == 0;\n      var4 = *ptr1;\n      if (var6) {\n        var3 = ptr1[5];\n      }\n      *ptr1 = index1;\n      if (!var6) {\n        var3 = 0;\n      }\n      ptr1[2] = var3;\n      for (var4 = var4 - index1; 0 < var4; var4 = var4 - var3) {\n        var3 = (*(code *)ptr1[10])(data_ptr,ptr1[8],index1,var4);\n        if (var3 < 1) {\n          var2 = *(ushort *)(ptr1 + 3);\n          goto LAB_080052b2;\n        }\n        index1 = index1 + var3;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) && (func_ptr = (code *)ptr1[0xb], func_ptr != (code *)0x0)) {\n    var5 = *data_ptr;\n    *data_ptr = 0;\n    if ((var2 & 0x1000) == 0) {\n      index1 = (*func_ptr)(data_ptr,ptr1[8],var1 & 0x1000,1);\n      if ((index1 == -1) && (var1 = *data_ptr, var1 != 0)) {\n        if ((var1 != 0x1d) && (var1 != 0x16)) {\n          *(ushort *)(ptr1 + 3) |= 0x40;\n          (*jump_table)();\n          return;\n        }\n        *data_ptr = var5;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      index1 = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) && (index1 = index1 - ptr1[1], ptr1[0xd] != 0)) {\n      index1 = index1 - ptr1[0x10];\n    }\n    index1 = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],index1,0);\n    var2 = *(ushort *)(ptr1 + 3);\n    if ((index1 == -1) && ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(ptr1 + 3) |= 0x40;\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)var2 << 0x13) < 0) && ((index1 != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = index1;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = var5;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        free(ptr2);\n      }\n      ptr1[0xd] = 0;\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*jump_table)(0);\n  return;\n}",
            "called": [
                "FUN_080040f8",
                "FUN_080055d0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "decode_data_080052cc",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "data_length",
                "piVar3": "param_ptr",
                "uVar4": "chunk_size",
                "uVar5": "flags",
                "iVar6": "chunk_remaining",
                "unaff_r4": "unused_1",
                "unaff_r5": "unused_2",
                "pcVar7": "decode_func",
                "iVar8": "chunk_offset",
                "uVar9": "data_length_copy",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "condition"
            },
            "code": "uint32_t decode_data_080052cc(uint32_t *data, int *params) {\n    uint32_t result = 0;\n    int *param_ptr;\n    uint32_t data_length;\n    uint32_t data_offset;\n    uint32_t chunk_size;\n    uint32_t chunk_offset;\n    uint32_t chunk_remaining;\n    uint16_t flags;\n    uint32_t (*decode_func)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);\n\n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            do_something();\n        }\n        if (params == (int *)PTR_DAT_08005314) {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08005318) {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_0800531c) {\n            param_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(param_ptr + 6) != 0) {\n            flags = *(uint16_t *)(param_ptr + 6);\n            if ((int)(flags << 0x1c) < 0) {\n                data_length = params[4];\n                if (data_length != 0) {\n                    chunk_size = flags << 0x1e;\n                    chunk_offset = *param_ptr;\n                    if (chunk_size == 0) {\n                        chunk_size = param_ptr[5];\n                    }\n                    *param_ptr = data_length;\n                    if (chunk_size != 0) {\n                        param_ptr[2] = 0;\n                        while (chunk_offset > data_length) {\n                            chunk_remaining = chunk_offset - data_length;\n                            decode_func = (uint32_t (*)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))param_ptr[10];\n                            result = decode_func(data, param_ptr[8], data_length, chunk_remaining, 0, 0);\n                            if (result < 1) {\n                                flags = *(uint16_t *)(param_ptr + 6);\n                                goto LAB_080052b2;\n                            }\n                            data_length += result;\n                        }\n                    }\n                }\n            }\n            else {\n                if (((params[1] > 0) || (params[0x10] > 0)) && ((decode_func = (uint32_t (*)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))param_ptr[0xb]) != NULL)) {\n                    data_length = *data;\n                    *data = 0;\n                    if ((flags & 0x1000) == 0) {\n                        result = decode_func(data, param_ptr[8], flags & 0x1000, 1, 0, 0);\n                        if ((result == -1) && (*data != 0)) {\n                            if ((*data != 0x1d) && (*data != 0x16)) {\n                                flags = *(uint16_t *)(param_ptr + 6);\n                                goto LAB_0800527c;\n                            }\n                            *data = data_length;\n                            goto LAB_080051d6;\n                        }\n                    }\n                    else {\n                        result = param_ptr[0x15];\n                    }\n                    if (((int)(flags << 0x1d) < 0) && (param_ptr[0xd] != 0)) {\n                        result -= params[1];\n                        if (param_ptr[0xd] != (int *)PTR_DAT_08005320) {\n                            result -= params[0x10];\n                        }\n                    }\n                    result = decode_func(data, param_ptr[8], result, 0, 0, 0);\n                    flags = *(uint16_t *)(param_ptr + 6);\n                    if ((result == -1) && ((*data > 0x1d) || (((DAT_080052c8 >> (*data & 0xff)) << 0x1f) >= 0))) {\n                        flags = *(uint16_t *)(param_ptr + 6);\n                        goto LAB_080052b2;\n                    }\n                    params[1] = 0;\n                    *params = params[4];\n                    if (((int)(flags << 0x13) < 0) && ((result != -1) || (*data == 0))) {\n                        param_ptr[0x15] = result;\n                    }\n                    if (param_ptr[0xd] != 0) {\n                        if (param_ptr[0xd] != (int *)PTR_DAT_08005320) {\n                            do_something_else(data);\n                        }\n                        param_ptr[0xd] = 0;\n                        flags = *(uint16_t *)(param_ptr + 6);\n                        goto LAB_08005252;\n                    }\n                }\n            }\n        }\n    }\nLAB_080051d6:\n    flags = *(uint16_t *)(param_ptr + 6);\nLAB_08005252:\n    result = 0;\nLAB_0800527c:\n    return result;\n}\n",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "decode_data_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "check_valid_input_08002eb2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "value",
                "(char *)((int)param_1 + 0x39)": "space_check",
                "*(char *)((int)param_1 + 0x39)": "*space_check",
                "*(char *)(param_1 + 0xe)": "*char_check",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "*(short *)(input_array + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)input_array + 0x26)",
                "param_1[0xf]": "input_array[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)input_array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(input_array + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_valid_input_08002eb2(int *input_array, int array_size, int value){\n\tchar *space_check = (char *)(input_array + 0x39);\n\tif (*space_check != ' '){\n\t\treturn 2;\n\t}\n\tif (array_size == 0){\n\t\treturn 1;\n\t}\n\tif (value == 0){\n\t\treturn 1;\n\t}\n\tchar *char_check = (char *)(input_array + 0xe);\n\tif (*char_check != '\\x01'){\n\t\tinput_array[8] = array_size;\n\t\t*(short *)(input_array + 9) = (short)value;\n\t\t*(short *)((int)input_array + 0x26) = (short)value;\n\t\tinput_array[0xf] = 0;\n\t\t*(undefined *)((int)input_array + 0x39) = 0x21;\n\t\t*(undefined *)(input_array + 0xe) = 0;\n\t\t*(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n\t\treturn 0;\n\t}\n\treturn 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "check_valid_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_data_and_reset_08000d3c",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_reset_08000d3c(void)\n{\n  int i;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (i = 0; PTR_DAT_08000d7c + i < PTR_DAT_08000d80; i += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + i) = *(undefined4 *)(DAT_08000d78 + i);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08000d84; data_ptr < PTR_DAT_08000d88; data_ptr++) {\n    *data_ptr = 0;\n  }\n  execute_function_1();\n  execute_function_2();\n  jump_table = (code *)0x8000d72;\n  execute_function_3(jump_table);\n}\n",
            "called": [
                "FUN_080035bc",
                "FUN_08004884",
                "FUN_08004658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_reset_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "FUNC_08003978"
            },
            "code": "\nvoid FUNC_08003978(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  uint local_2c;\n  uint local_28;\n  uint local_24;\n  undefined4 local_20;\n  uint local_1c;\n  \n  if (param_1 != (int *)0x0) {\n    iVar7 = FUN_080034f4((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n    iVar8 = FUN_080034f4((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n    if ((iVar8 == 0) || (iVar7 == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,iVar8);\n    }\n    else {\n      iVar9 = FUN_08003582(iVar7);\n      *param_1 = iVar9;\n      iVar6 = DAT_08003c7c;\n      iVar5 = DAT_08003c78;\n      iVar4 = DAT_08003c74;\n      iVar3 = DAT_08003c70;\n      iVar2 = DAT_08003c6c;\n      iVar1 = DAT_08003c68;\n      iVar8 = DAT_08003c64;\n      iVar7 = DAT_08003c60;\n      if (iVar9 == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (iVar9 == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(iVar7 + 0x12824) = *(uint *)(iVar7 + 0x12824) & 0xffffffef;\n          *(uint *)(iVar7 + 0x12844) = *(uint *)(iVar7 + 0x12844) | 0x10;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)(param_1 + 0x17) = 0x25;\n        }\n        else if (iVar9 == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(iVar8 + 0x1f420) = *(uint *)(iVar8 + 0x1f420) & 0xfffdffff;\n          *(uint *)(iVar8 + 0x1f440) = *(uint *)(iVar8 + 0x1f440) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)(param_1 + 0x17) = 0x26;\n        }\n        else if (iVar9 == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(iVar1 + 0x1f020) = *(uint *)(iVar1 + 0x1f020) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1f040) = *(uint *)(iVar1 + 0x1f040) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)(param_1 + 0x17) = 0x27;\n        }\n        else if (iVar9 == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(iVar2 + 0x1ec20) = *(uint *)(iVar2 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(iVar2 + 0x1ec40) = *(uint *)(iVar2 + 0x1ec40) | 0x80000;\n          *(undefined *)(param_1 + 0x11) = 3;\n          *(undefined *)(param_1 + 0x17) = 0x34;\n        }\n        else if (iVar9 == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(iVar3 + 0x1e820) = *(uint *)(iVar3 + 0x1e820) & 0xffefffff;\n          *(uint *)(iVar3 + 0x1e840) = *(uint *)(iVar3 + 0x1e840) | 0x100000;\n          *(undefined *)(param_1 + 0x11) = 4;\n          *(undefined *)(param_1 + 0x17) = 0x35;\n        }\n        else if (iVar9 == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(iVar4 + 0x12424) = *(uint *)(iVar4 + 0x12424) & 0xffffffdf;\n          *(uint *)(iVar4 + 0x12444) = *(uint *)(iVar4 + 0x12444) | 0x20;\n          *(undefined *)(param_1 + 0x11) = 5;\n          *(undefined *)(param_1 + 0x17) = 0x47;\n        }\n        else if (iVar9 == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(iVar5 + 0x1c020) = *(uint *)(iVar5 + 0x1c020) & 0xbfffffff;\n          *(uint *)(iVar5 + 0x1c040) = *(uint *)(iVar5 + 0x1c040) | 0x40000000;\n          *(undefined *)(param_1 + 0x11) = 6;\n          *(undefined *)(param_1 + 0x17) = 0x52;\n        }\n        else if (iVar9 == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(iVar6 + 0x1bc20) = *(uint *)(iVar6 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(iVar6 + 0x1bc40) = *(uint *)(iVar6 + 0x1bc40) | 0x80000000;\n          *(undefined *)(param_1 + 0x11) = 7;\n          *(undefined *)(param_1 + 0x17) = 0x53;\n        }\n        uVar10 = FUN_080031fc((uint)((int)*(short *)((int)param_1 + 0x5a) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)((int)param_1 + 0x5a),PTR_DAT_08003c5c);\n        local_2c = 1 << (*(ushort *)((int)param_1 + 0x5a) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        local_1c = (uVar11 << 0x11) >> 0x19;\n        local_20 = 3;\n        FUN_08000fb4(uVar10,&local_2c);\n        uVar10 = FUN_080031fc((uint)((int)*(short *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar11 = FUN_0800354a((int)*(short *)(param_1 + 0x16),PTR_DAT_08003c58);\n        local_2c = 1 << (*(ushort *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_28 = (uVar11 >> 3 & 1) << 4 | uVar11 & 7;\n        local_24 = (uVar11 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uVar10,&local_2c);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_08002d72(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_08002d72",
                "FUN_080031fc",
                "FUN_08003582",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "FUNC_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_index",
                "param_2": "bit_array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "*(uint*)(bit_array + array_index * 4)",
                "1 << (param_1 & 0xf)": "1 << (bit_index & 0xf)",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*(uint*)(bit_array + array_index * 4) &= ~bit_mask",
                "uVar1 = (param_1 << 0x18) >> 0x1c;": "uint array_index = (bit_index << 0x18) >> 0x1c;"
            },
            "code": "void update_bit_0800316c(uint bit_index, int* bit_array) {\n    uint bit_mask = 1 << (bit_index & 0xf);\n    uint array_index = (bit_index << 0x18) >> 0x1c;\n    *(uint*)(bit_array + array_index * 4) &= ~bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "return_error_code_080040d0",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_080040d0() {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permission_080040d6",
                "param_1": "target_address",
                "param_2": "permission_value",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(target_address + 4)"
            },
            "code": "int set_memory_permission_080040d6(int target_address, int permission_value){\n    *(int *)(target_address + 4) = permission_value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permission_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "decode_string_08004a34",
                "param_1": "input_length",
                "param_2": "current_char",
                "param_3": "output_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "buffer_ptr",
                "pbVar3": "buffer_end",
                "uVar4": "return_value",
                "PTR_DAT_080050c4": "ptr_dat_080050c4",
                "PTR_DAT_080050c8": "ptr_dat_080050c8",
                "PTR_DAT_080050cc": "ptr_dat_080050cc"
            },
            "code": "uint decode_string_08004a34(int input_length, byte current_char, byte **output_buffer) {\n  int buffer_offset = 0;\n  byte *buffer_ptr = *output_buffer;\n  byte *buffer_end = (*output_buffer)[5];\n  buffer_offset = (int)*output_buffer - (int)(*output_buffer)[4];\n  if (buffer_offset >= (int)(*output_buffer)[5]) {\n    return 0xffffffff;\n  }\n  if ((*output_buffer)[2] < 0) {\n    return current_char == 10 ? 10 : current_char;\n  }\n  if ((*output_buffer)[2] >= (int)(*output_buffer)[6] && current_char != 10) {\n    return 0xffffffff;\n  }\n  if (input_length != 0 && *(int *)(input_length + 0x18) == 0) {\n    handle_error();\n  }\n  if (*output_buffer == PTR_DAT_080050c4) {\n    *output_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (*output_buffer == PTR_DAT_080050c8) {\n    *output_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (*output_buffer == PTR_DAT_080050cc) {\n    *output_buffer = *(byte ***)(input_length + 0xc);\n  }\n  (*output_buffer)[2] = (*output_buffer)[6];\n  byte *buffer_start = (byte *)(uint)*(ushort *)(*output_buffer + 3);\n  int buffer_size = (int)buffer_start << 0x1c;\n  if ((buffer_size < 0 && (*output_buffer)[4] != (byte *)0x0) || decode_string_08004a34_helper(input_length, *output_buffer, buffer_size, (*output_buffer)[4], buffer_ptr) == 0) {\n    if (buffer_offset < (int)(*output_buffer)[5] && decode_string_08004a34_helper(input_length, *output_buffer) != 0) {\n      (*output_buffer)[2] = (*output_buffer)[2] + -1;\n      *buffer_ptr = current_char;\n      *output_buffer = *output_buffer + 1;\n      if ((byte *)(buffer_offset + 1) != (*output_buffer)[5]) {\n        if ((uint)*(ushort *)((*output_buffer) + 3) << 0x1f < 0) {\n          return current_char == 10 ? 10 : current_char;\n        }\n        if (current_char != 10) {\n          return current_char;\n        }\n      }\n      if (decode_string_08004a34_helper(input_length, *output_buffer) == 0) {\n        return current_char;\n      }\n    }\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\nuint decode_string_08004a34_helper(int input_length, byte **output_buffer, int buffer_size, byte *buffer_end, byte *buffer_ptr) {\n  if (buffer_size < 0) {\n    buffer_end = buffer_end + buffer_size;\n    if (buffer_end < *output_buffer[5]) {\n      return 0;\n    }\n  }\n  int buffer_offset = (int)buffer_ptr - (int)*output_buffer[4];\n  if (buffer_offset >= (int)*output_buffer[5]) {\n    return 0;\n  }\n  if (buffer_size != 0) {\n    if (buffer_size < 0) {\n      *output_buffer = *output_buffer - buffer_size;\n    }\n    else {\n      *output_buffer = *output_buffer + buffer_size;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_080052cc",
                "FUN_080053a0",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "decode_string_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_param_080002d0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result"
            },
            "code": "typedef uint64_t u64; \n\nu64 get_param_080002d0(u64 param_1, u64 param_2, u64 param_3, u64 param_4) {\n    if ((param_4 == 0) && (param_3 == 0)) {\n        if (param_2 != 0 || param_1 != 0) {\n            param_2 = -1;\n            param_1 = -1;\n        }\n        return ((u64)param_2 << 32) | param_1;\n    }\n    u64 result = FUNC_08000300();\n    return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_param_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_of_value_in_array_08003f00",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_in_array_08003f00(int search_value) {\n  uint index;\n  if (search_value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while (index <= 9) {\n      if (search_value == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_of_value_in_array_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_and_assign_value_to_pointer_08001440",
                "param_1": "ptr_param_1",
                "puVar1": "ptr_uchar_at_offset_0x24",
                "*puVar1": "*ptr_uchar_at_offset_0x24",
                "*(short *)((int)param_1 + 0x2a)": "*ptr_short_at_offset_0x2a",
                "*(short *)((int)param_1 + 0x2a) + -1": "*ptr_short_at_offset_0x2a - 1",
                "param_1[9]": "ptr_uchar_at_offset_0x24",
                "int)(puVar1 + 1)": "(int)(ptr_uchar_at_offset_0x24 + 1)",
                "(char)*(undefined4 *)(*param_1 + 0x10)": "(unsigned char)*ptr_value_at_offset_0x10"
            },
            "code": "int increment_and_assign_value_to_pointer_08001440(int *ptr_param_1)\n{\n  int *ptr_value_at_offset_0x10 = (int *)(*ptr_param_1 + 0x10);\n  short *ptr_short_at_offset_0x2a = (short *)((int)ptr_param_1 + 0x2a);\n\n  if (*ptr_short_at_offset_0x2a != 0)\n  {\n    unsigned char *ptr_uchar_at_offset_0x24 = (unsigned char *)ptr_param_1[9];\n    ptr_param_1[9] = (int)(ptr_uchar_at_offset_0x24 + 1);\n    *ptr_uchar_at_offset_0x24 = (unsigned char)*ptr_value_at_offset_0x10;\n    *ptr_short_at_offset_0x2a = *ptr_short_at_offset_0x2a - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_assign_value_to_pointer_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_in_array_08000230",
                "param_1": "array",
                "param_2": "array_size",
                "param_3": "byte_to_find",
                "bVar1": "byte_value",
                "cVar2": "byte1",
                "cVar3": "byte2",
                "cVar4": "byte3",
                "cVar5": "byte4",
                "pbVar6": "byte_ptr",
                "puVar7": "uint_ptr",
                "pbVar8": "byte_ptr2",
                "uVar9": "array_alignment",
                "uVar10": "aligned_array_size",
                "uVar11": "array_value",
                "uVar12": "array_value2",
                "bVar13": "byte5",
                "bVar14": "byte6",
                "bVar15": "byte7",
                "bVar16": "byte8"
            },
            "code": "byte* find_byte_in_array_08000230(uint* array, uint array_size, uint byte_to_find) {\n  byte* result = NULL;\n  array_size = array_size & 0xff;\n  if ((int)array_size < 0x10) {\n    while (array_size > 0) {\n      if (*array == byte_to_find) {\n        result = (byte*)array;\n        break;\n      }\n      array++;\n      array_size--;\n    }\n  }\n  else {\n    uint array_alignment = (uint)array & 7;\n    uint byte_mask = byte_to_find | (byte_to_find << 8) | (byte_to_find << 16) | (byte_to_find << 24);\n    uint aligned_array_size = array_size & 0xfffffff8;\n    while (true) {\n      if (array_alignment == 0) {\n        do {\n          uint array_value = *array ^ byte_mask;\n          uint array_value2 = *(array + 1) ^ byte_mask;\n          bool array_value_zero = array_value == 0;\n          bool array_value2_not_zero = array_value2 != 0;\n          if (array_value_zero) {\n            result = (byte*)(array + 1) - 4;\n            break;\n          }\n          if (array_value2_not_zero) {\n            uint byte1 = (array_value & 0xff) == 0;\n            uint byte2 = ((array_value >> 8) & 0xff) == 0;\n            uint byte3 = ((array_value >> 16) & 0xff) == 0;\n            uint byte4 = ((array_value >> 24) & 0xff) == 0;\n            uint byte5 = (array_value2 & 0xff) != 0;\n            uint byte6 = ((array_value2 >> 8) & 0xff) != 0;\n            uint byte7 = ((array_value2 >> 16) & 0xff) != 0;\n            uint byte8 = ((array_value2 >> 24) & 0xff) != 0;\n            uint byte_result = byte1 * byte5 + byte2 * byte6 + byte3 * byte7 + byte4 * byte8;\n            if (byte_result != 0) {\n              result = (byte*)(array + 1) - 3 + byte_result;\n              break;\n            }\n          }\n          array += 2;\n          aligned_array_size -= 8;\n        } while (aligned_array_size > 0);\n        array_size = array_size & 7;\n        if (array_size < 1) {\n          break;\n        }\n      }\n      array_size--;\n      if (*array == byte_to_find) {\n        result = (byte*)array;\n        break;\n      }\n      array_alignment = ((uint)(array + 1)) & 7;\n      array++;\n      if (array_size < 1) {\n        break;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_in_array_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "set_param_value_08001684",
                "param_1": "param_list",
                "param_1d": "param_1_descriptor",
                "param_b": "param_b_value"
            },
            "code": "uint32_t set_param_value_08001684(uint32_t **param_list) {\n    uint32_t *param_b = param_list[0xb];\n    char *param_1d = (char *)((int)param_list + 0x3d);\n    if ((param_b == (uint32_t *)0x4 || param_b == (uint32_t *)0x8) && (*param_1d == '(')) {\n        param_list[0xb] = PTR_DAT_08001714;\n        (*param_list)[1] &= 0xfffff8ff;\n        (*param_list)[5] = 0xfffffbff;\n        **param_list &= 0xfffffbff;\n        param_list[0xc] = (uint32_t *)0x0;\n        *param_1d = 0x20;\n        *(param_1d + 1) = 0;\n        FUN_080038d0();\n    }\n    else if (*param_1d == '!') {\n        param_list[0xb] = PTR_DAT_08001714;\n        param_list[0xc] = (uint32_t *)0x21;\n        *param_1d = 0x20;\n        *(param_1d + 1) = 0;\n        (*param_list)[1] &= 0xfffff8ff;\n        (*param_list)[5] = 0xfffffbff;\n        **param_list &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else {\n        (*param_list)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "set_param_value_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "set_param_value_08000f8c",
                "param_1": "param_list",
                "uint": "uint32_t",
                "PTR_": "",
                "DAT_": "",
                "param_flag": "param_flag",
                "0x35": "param_flag_offset",
                "0x15": "param_offset",
                "0x80": "default_param_value"
            },
            "code": "uint32_t set_param_value_08000f8c(uint32_t **param_list) {\n    uint8_t param_flag = *(uint8_t *)((int)param_list + 0x35);\n    if (param_flag != 2) {\n        param_list[0x15] = (uint32_t *)0x80;\n        return 1;\n    }\n    *(uint8_t *)((int)param_list + 0x35) = 5;\n    **param_list = **param_list & 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "set_param_value_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_and_return_function_080001ac",
                "param_1": "input_string",
                "*PTR_DAT_080001c4": "*PTR_null_terminated",
                "DAT_080001c8": "DAT_non_zero",
                "PTR_FUN_080001cc": "PTR_custom_function"
            },
            "code": "char* check_and_return_function_080001ac(char* input_string) {\\n  if (*PTR_DAT_080001c4 == \"\\0\") {\\n    if (DAT_080001c8 != 0) {\\n      input_string = PTR_FUN_080001cc;\\n    }\\n    *PTR_DAT_080001c4 = 1;\\n  }\\n  return input_string;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_function_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "set_memory_range_to_value_080048cc",
                "param_1": "memory_start",
                "param_2": "value",
                "param_3": "memory_range_size",
                "puVar1": "memory_end"
            },
            "code": "void set_memory_range_to_value_080048cc(unsigned char *memory_start, unsigned char value, int memory_range_size) {\n  unsigned char *memory_end = memory_start + memory_range_size;\n  for (; memory_start != memory_end; memory_start++) {\n    *memory_start = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005400",
                "FUN_0800532c",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "set_memory_range_to_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "return_zero_080040e4"
            },
            "code": "int return_zero_080040e4(void)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "return_zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_value_08003506",
                "param_1": "target_value",
                "param_2": "short_array",
                "*param_2": "*short_array",
                "*(int *)(param_2 + 2)": "*(int *)(short_array + 2)"
            },
            "code": "int find_short_value_08003506(int target_value, short *short_array)\n{\n  while(true) {\n    if (*(int *)(short_array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(short_array + 2) == target_value) {\n        break;\n    }\n    short_array = short_array + 6;\n  }\n  return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_value_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "value_pointer"
            },
            "code": "int get_value_from_pointer_080025e0() {\n  int* PTR_DAT_080025e8 = PTR_DAT_080025e8;\n  return *PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "return_zero_080040e8"
            },
            "code": "int return_zero_080040e8() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "return_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "param_1": "data_ptr",
                "param_2": "update_ptr",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "updated_value",
                "uVar2": "index"
            },
            "code": "uint32_t update_data_08000a00(uint32_t data_ptr, uint32_t update_ptr, uint32_t param_3, uint32_t param_4)\n{\n    uint32_t updated_value = get_updated_value(*(uint8_t *)(data_ptr + 0xb), *(uint8_t *)(data_ptr + 0xc), param_3, param_4, param_4);\n    uint32_t index = (updated_value << 0x14) >> 0x18;\n    if (*(int8_t *)(data_ptr + 0xd) == -1) {\n        *(uint16_t *)(update_ptr + index * 2) = (uint16_t)(1 << (updated_value & 0xf)) | *(uint16_t *)(update_ptr + index * 2);\n    }\n    else {\n        *(uint16_t *)(update_ptr + index * 2) = *(uint16_t *)(update_ptr + index * 2) & ~(uint16_t)(1 << (updated_value & 0xf));\n    }\n    *(uint8_t *)(data_ptr + 0x49) = 6;\n    update_data_08000a00(data_ptr);\n    return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "update_data_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "function_param",
                "iVar1": "index",
                "FUN_08005760": "initialize",
                "FUN_08004678": "get_index"
            },
            "code": "void execute_function_080047c0(int function_param) {\n  int index;\n  if (*(int *)(function_param + 8) != 0) {\n    (**(code **)(function_param + 0xc))();\n    return;\n  }\n  initialize();\n  index = get_index();\n  if (*(int *)(PTR_DAT_080047ec + index * 0x14 + 0xc) != 0) {\n    execute_function_080047c0();\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_block_08005374",
                "param_1": "base_address",
                "param_2": "block_size",
                "puVar1": "memory_block",
                "iVar2": "block_offset"
            },
            "code": "undefined4* allocate_memory_block_08005374(undefined4 base_address, int block_size)\n{\n    undefined4 *memory_block;\n    int block_offset = (block_size - 1) * 0x68;\n    memory_block = (undefined4 *)FUN_08004978(base_address, block_offset + 0x74);\n    if (memory_block != (undefined4 *)0x0)\n    {\n        *memory_block = 0;\n        memory_block[1] = block_size;\n        memory_block[2] = memory_block + 3;\n        FUN_080048cc(memory_block + 3, 0, block_offset + 0x68);\n    }\n    return memory_block;\n}",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "FUNC_08004d9c"
            },
            "code": "\nuint FUNC_08004d9c(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08004f56;\n          if (bVar1 != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08004dcc;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08004dec;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08004dec:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_08004ec2;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08004e2c:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08004e52:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08004e60;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08004e60:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_08004fd8;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            puVar5 = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08004e52;\n          if (bVar1 == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08004e2c;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08000230(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08004f42;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08004f42:\n    *puVar3 = uVar6;\n  }\nLAB_08004f56:\n  param_2[4] = 0;\nLAB_08004ec2:\n  iVar2 = FUN_08004cb0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_08004ed6:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_08004ed6;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "FUNC_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_parameter_08003750",
                "param_1": "parameter",
                "return_value": "result"
            },
            "code": "int subtract_four_from_parameter_08003750(int parameter){\n    int result = parameter - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_parameter_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "process_input_080014ec",
                "param_1": "input_ptr",
                "param_2": "data",
                "param_3": "data_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "input_data"
            },
            "code": "uint32_t process_input_080014ec(uint32_t **input_ptr, uint32_t *data, int data_len, uint32_t *output_ptr) {\n  uint32_t result;\n  uint32_t *input_data;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (data == NULL) {\n      result = 1;\n    }\n    else if (data_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      input_data = *input_ptr;\n      if ((*input_data & 1) == 0) {\n        *input_data = *input_data | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = data;\n      *(short *)((int)input_ptr + 0x2a) = (short)data_len;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "process_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_node_080048dc",
                "param_1": "error_code",
                "param_2": "node_value",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "puVar1": "head_ptr",
                "piVar2": "unused_ptr",
                "extraout_r1": "unused_ptr_2",
                "ppiVar3": "previous_node_ptr",
                "ppiVar4": "new_node_ptr",
                "ppiVar5": "current_node_ptr",
                "ppiVar6": "temp_node_ptr",
                "ppiVar7": "new_node_ptr"
            },
            "code": "void insert_node_080048dc(int* error_code, int node_value, int unused_param_1, int unused_param_2)\n{\n  int **head_ptr = (int **)(&PTR_DAT_08004974);\n  int **current_node_ptr = *head_ptr;\n  int **previous_node_ptr = NULL;\n  int **new_node_ptr = (int **)malloc(sizeof(int *));\n  *new_node_ptr = (int *)malloc(sizeof(int));\n  **new_node_ptr = node_value;\n  while (current_node_ptr != NULL && **current_node_ptr < node_value) {\n    previous_node_ptr = current_node_ptr;\n    current_node_ptr = (int **)(*current_node_ptr + 1);\n  }\n  if (previous_node_ptr == NULL) {\n    *head_ptr = new_node_ptr;\n    (*new_node_ptr)[1] = (int *)current_node_ptr;\n  }\n  else {\n    previous_node_ptr[1] = (int *)new_node_ptr;\n    new_node_ptr[1] = (int *)current_node_ptr;\n  }\n  do_nothing_0800557e(error_code, new_node_ptr, current_node_ptr, unused_param_2);\n  return;\n}\n",
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080051ac",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "insert_node_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_if_enabled_08003754",
                "param_1": "callback_param",
                "iVar1": "callback_ptr"
            },
            "code": "void execute_callback_if_enabled_08003754(int callback_param)\n{\n  int callback_ptr = get_callback_pointer();\n  if (*(code **)(callback_ptr + 0x48) != (code *)0x0 && *(char *)(callback_param + 0x18) == '\\x01') {\n    (**(code **)(callback_ptr + 0x48))(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_enabled_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "toggle_bits_and_set_chars_to_parentheses_08001578",
                "param_1": "bits_and_chars",
                "puVar1": "bits",
                "*(char *)((int)param_1 + 0x3d)": "(*bits_and_chars)[9]",
                "*(undefined *)((int)param_1 + 0x3d)": "(*bits_and_chars)[9]",
                "*param_1": "*bits_and_chars",
                "**param_1": "**bits_and_chars"
            },
            "code": "uint32_t toggle_bits_and_set_chars_to_parentheses_08001578(uint32_t **bits_and_chars)\n{\n  uint32_t *bits = *bits_and_chars;\n  if ((*bits_and_chars)[9] != ' ') {\n    return 2;\n  }\n  (*bits_and_chars)[9] = '(';\n  if ((*bits & 1) == 0) {\n    *bits |= 1;\n  }\n  **bits_and_chars |= 0x400;\n  (*bits_and_chars)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "toggle_bits_and_set_chars_to_parentheses_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "flag",
                "param_2": "value",
                "DAT_0800485c": "is_flag_set"
            },
            "code": "longlong calculate_result_08004844(undefined4 flag, uint value) {\n  if (DAT_0800485c != 0) {\n    return CONCAT44(flag, 2);\n  }\n  return (ulonglong)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_by_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_1",
                "DAT_080031f8": "data_2",
                "DAT_080031d4": "data_3",
                "DAT_080031d8": "data_4",
                "DAT_080031dc": "data_5",
                "DAT_080031e0": "data_6",
                "DAT_080031e4": "data_7",
                "DAT_080031e8": "data_8",
                "DAT_080031ec": "data_9",
                "DAT_080031f0": "data_10",
                "DAT_080031f4": "data_11"
            },
            "code": "undefined4 get_data_by_index_0800318c(int index)\n{\n  switch(index) {\n  case 0:\n    return DAT_080031d0;\n  case 1:\n    return DAT_080031f8;\n  case 2:\n    return DAT_080031d4;\n  case 3:\n    return DAT_080031d8;\n  case 4:\n    return DAT_080031dc;\n  case 5:\n    return DAT_080031e0;\n  case 6:\n    return DAT_080031e4;\n  case 7:\n    return DAT_080031e8;\n  case 8:\n    return DAT_080031ec;\n  case 9:\n    return DAT_080031f0;\n  case 10:\n    return DAT_080031f4;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_by_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_and_call_function_080047d0",
                "iVar1": "random_number",
                "FUN_08004678": "generate_random_number",
                "PTR_DAT_080047ec": "ptr_to_data",
                "* (int *) (PTR_DAT_080047ec + iVar1 * 0x14 + 0xc)": "*ptr_to_data",
                "FUN_080047c0": "call_function"
            },
            "code": "void check_and_call_function_080047d0(void)\n{\n  int random_number = generate_random_number();\n  int* PTR_DAT_080047ec = PTR_DAT_080047ec + random_number * 0x14 + 0xc;\n  if (* (int *) (PTR_DAT_080047ec + iVar1 * 0x14 + 0xc) != 0) {\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "do_nothing_forever_080040f8"
            },
            "code": "void do_nothing_forever_080040f8(void)\n{\n  while(true){}\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": false,
            "current_name": "do_nothing_forever_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "process_param_and_set_value_0800500c",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "ptr_to_value",
                "iVar2": "result"
            },
            "code": "void process_param_and_set_value_0800500c(int *output_value, undefined4 input_value)\n{\n  undefined *ptr_to_value = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  int result = calculate_value(input_value);\n  if ((result == -1) && (*(int *)ptr_to_value != 0)) {\n    *output_value = *(int *)ptr_to_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "process_param_and_set_value_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_frequency_divisor_080023b4",
                "in_r3": "unused_parameter",
                "uVar1": "clock_config",
                "uVar2": "clock_cycles",
                "DAT_0800247c": "clock_config_address",
                "DAT_08002484": "default_frequency_divisor_1",
                "DAT_08002480": "default_frequency_divisor_2"
            },
            "code": "uint calculate_frequency_divisor_080023b4(void)\n{\n  uint clock_config = *(uint *)(DAT_0800247c + 8) & 0xc;\n  if (clock_config == 4) {\n    return DAT_08002484;\n  }\n  if (clock_config != 8) {\n    return DAT_08002480;\n  }\n  uint frequency = *(uint *)(DAT_0800247c + 4) & 0x3f;\n  if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n    uint clock_cycles = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    frequency = calculate_frequency(clock_cycles * 16000000, (((uint)(clock_cycles * 0x20 < clock_cycles) * -0x3f - (uint)(clock_cycles * 0x7c0 < clock_cycles * 0x1f)) * 8 + (uint)CARRY4(clock_cycles * 0x3d08,clock_cycles)) * 0x400 | clock_cycles * 0x3d09 >> 0x16,frequency,0,in_r3);\n  }\n  else {\n    uint clock_cycles = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n    frequency = calculate_frequency(clock_cycles * 8000000, (((uint)(clock_cycles * 0x20 < clock_cycles) * -0x3f - (uint)(clock_cycles * 0x7c0 < clock_cycles * 0x1f)) * 8 + (uint)CARRY4(clock_cycles * 0x3d08,clock_cycles)) * 0x200,frequency,0,in_r3);\n  }\n  return frequency / ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_frequency_divisor_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_param_080011a4",
                "param_1": "new_param",
                "*(uint *)(DAT_080011bc + 0x14)": "param_ptr",
                "FUN_080047d0": "call_some_function"
            },
            "code": "void update_param_080011a4(uint new_param) {\n  uint* *(uint *)(DAT_080011bc + 0x14) = (uint*)(DAT_080011bc + 0x14);\n  if ((**(uint *)(DAT_080011bc + 0x14) & new_param) != 0) {\n    **(uint *)(DAT_080011bc + 0x14) = new_param;\n    call_some_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_param_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_conditions_08001e68",
                "param_1": "param_array",
                "puVar2": "array_pointer",
                "uVar3": "condition_1",
                "uVar4": "condition_2",
                "DAT_08001f38": "CONDITION_1_MASK",
                "0x100": "BIT_MASK",
                "0x10200": "CONDITION_2_MASK",
                "0x10400": "CONDITION_3_MASK",
                "0x10800": "CONDITION_4_MASK",
                "*(char *)((int)param_1 + 0x3d)": "current_char",
                "*(char *)((int)param_1 + 0x3e)": "next_char",
                "*(short *)((int)param_1 + 0x2a)": "short_value",
                "param_1[0xc]": "pointer_value",
                "FUN_08001684": "update_array",
                "param_1[0x10]": "update_pointer",
                "**param_1": "double_pointer",
                "0x200": "BIT_UPDATE",
                "0x0": "NULL_POINTER",
                "FUN_08001ab0": "call_function",
                "uint": "unsigned_integer"
            },
            "code": "void check_conditions_08001e68(uint **param_array)\n{\n  char current_char;\n  uint *array_pointer;\n  uint condition_1, condition_2;\n  \n  array_pointer = *param_array;\n  condition_1 = array_pointer[5];\n  condition_2 = array_pointer[1];\n  \n  if (((condition_1 & DAT_08001f38) != 0) && ((condition_2 & 0x100) != 0)) {\n    param_array[16] = (uint *)((uint)param_array[16] | 1);\n    array_pointer[5] = CONDITION_1_UPDATE;\n  }\n  if (((condition_1 & CONDITION_2_MASK) != 0) && ((condition_2 & 0x100) != 0)) {\n    param_array[16] = (uint *)((uint)param_array[16] | 2);\n    (*param_array)[5] = CONDITION_2_UPDATE;\n  }\n  if (((condition_1 & CONDITION_3_MASK) != 0) && ((condition_2 & 0x100) != 0)) {\n    current_char = *(char *)((int)param_array + 0x3d);\n    if (((*(char *)((int)param_array + 0x3e) == ' ') && (*(short *)((int)param_array + 0x2a) == 0)) &&\n       (((current_char == '!' || (current_char == ')')) || ((current_char == '(' && (param_array[12] == (uint *)0x21)))))) {\n      FUN_08001684(param_array);\n    }\n    else {\n      param_array[16] = (uint *)((uint)param_array[16] | 4);\n      if (*(char *)((int)param_array + 0x3e) == '\\x10') {\n        **param_array = **param_array | 0x200;\n      }\n      (*param_array)[5] = CONDITION_3_UPDATE;\n    }\n  }\n  if (((condition_1 & CONDITION_4_MASK) != 0) && ((condition_2 & 0x100) != 0)) {\n    param_array[16] = (uint *)((uint)param_array[16] | 8);\n    (*param_array)[5] = CONDITION_4_UPDATE;\n  }\n  if (param_array[16] != (uint *)0x0) {\n    FUN_08001ab0(param_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "check_conditions_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "update_param_080019a0",
                "param_1": "param_array",
                "puVar1": "temp_ptr",
                "short_val": "short_value",
                "param": "param",
                "param_1[9]": "temp_ptr_2",
                "param_1[4]": "param_value",
                "param_1[1]": "param_value_2",
                "param_1[0xb]": "param_value_3"
            },
            "code": "uint32_t update_param_080019a0(uint32_t **param_array)\n{\n  uint32_t *param = *param_array;\n  uint32_t *puVar1;\n  uint16_t short_val = *(uint16_t *)((int)param_array + 0x2a);\n  if (short_val == 4) {\n    param[1] &= 0xfffffbff;\n    puVar1 = param_array[9];\n    param_array[9] = (uint32_t *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)param[4];\n    *(uint16_t *)((int)param_array + 0x2a) = short_val - 1;\n  }\n  else if (short_val == 3) {\n    param[1] &= 0xfffffbff;\n    **param_array &= 0xfffffbff;\n    puVar1 = param_array[9];\n    param_array[9] = (uint32_t *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)param[4];\n    *(uint16_t *)((int)param_array + 0x2a) = short_val - 1;\n  }\n  else if (short_val == 2) {\n    if ((int)param_array[0xb] - 1U < 2) {\n      **param_array &= 0xfffffbff;\n      **param_array |= 0x100;\n    }\n    else {\n      **param_array |= 0x200;\n    }\n    puVar1 = param_array[9];\n    param_array[9] = (uint32_t *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)param[4];\n    *(uint16_t *)((int)param_array + 0x2a) = short_val - 1;\n    puVar1 = param_array[9];\n    param_array[9] = (uint32_t *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)param[4];\n    *(uint16_t *)((int)param_array + 0x2a) = short_val - 1;\n    param[1] &= 0xfffffcff;\n    *(undefined *)((int)param_array + 0x3d) = 0x20;\n    param_array[0xc] = (uint32_t *)0x0;\n    if (*(char *)((int)param_array + 0x3e) == '@') {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    puVar1 = param_array[9];\n    param_array[9] = (uint32_t *)((int)puVar1 + 1);\n    *(char *)puVar1 = (char)param[4];\n    *(uint16_t *)((int)param_array + 0x2a) = short_val - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "update_param_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_argument_less_than_10_08003f24",
                "uVar1": "argument_value",
                "FUN_08003f00": "get_argument_value",
                "PTR_DAT_08003f40": "function_ptr_array",
                "PTR_DAT_08003f44": "argument_ptr_array"
            },
            "code": "void execute_function_if_argument_less_than_10_08003f24(void)\n{\n  uint argument_value;\n  argument_value = get_argument_value();\n  if (argument_value < 10) {\n    (**(code **)(PTR_DAT_08003f40 + argument_value * 4))(*(undefined4 *)(PTR_DAT_08003f44 + argument_value * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_argument_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "initialize_game_board_080046b4",
                "param_1": "player_count",
                "param_2": "max_players",
                "puVar1": "game_board"
            },
            "code": "void initialize_game_board_080046b4(int player_count, int max_players, undefined4 param_3, undefined4 param_4)\n{\n  undefined *game_board = PTR_DAT_08004754;\n  if (player_count != 1) {\n    return;\n  }\n  if (max_players == 0xffff) {\n    game_board[0] = 6;\n    *(undefined4 *)(game_board + 0xc) = 0;\n    game_board[0x14] = 7;\n    *(undefined4 *)(game_board + 0x20) = 0;\n    game_board[0x28] = 8;\n    *(undefined4 *)(game_board + 0x34) = 0;\n    game_board[0x3c] = 9;\n    *(undefined4 *)(game_board + 0x48) = 0;\n    game_board[0x50] = 10;\n    *(undefined4 *)(game_board + 0x5c) = 0;\n    game_board[100] = 0x17;\n    *(undefined4 *)(game_board + 0x70) = 0;\n    game_board[0x78] = 0x17;\n    *(undefined4 *)(game_board + 0x84) = 0;\n    game_board[0x8c] = 0x17;\n    *(undefined4 *)(game_board + 0x98) = 0;\n    game_board[0xa0] = 0x17;\n    *(undefined4 *)(game_board + 0xac) = 0;\n    game_board[0xb4] = 0x17;\n    *(undefined4 *)(game_board + 0xc0) = 0;\n    game_board[200] = 0x28;\n    *(undefined4 *)(game_board + 0xd4) = 0;\n    game_board[0xdc] = 0x28;\n    *(undefined4 *)(game_board + 0xe8) = 0;\n    game_board[0xf0] = 0x28;\n    *(undefined4 *)(game_board + 0xfc) = 0;\n    game_board[0x104] = 0x28;\n    *(undefined4 *)(game_board + 0x110) = 0;\n    game_board[0x118] = 0x28;\n    *(undefined4 *)(game_board + 0x124) = 0;\n    game_board[300] = 0x28;\n    *(undefined4 *)(game_board + 0x138) = 0;\n    initialize_game_pieces(0, PTR_LAB_0800468c_1_0800475c, PTR_DAT_08004758, game_board, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_game_board_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_input_0800160e",
                "param_1": "input_array",
                "cVar1": "last_char",
                "puVar2": "next_char_ptr"
            },
            "code": "int process_input_0800160e(int *input_array) {\n    char last_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *next_char_ptr = (undefined *)input_array[9];\n        input_array[9] = (int)(next_char_ptr + 1);\n        *next_char_ptr = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) - 1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_value_at_pointer_08000e18",
                "PTR_DAT_08000e28": "pointer_to_update",
                "PTR_DAT_08000e2c": "pointer_to_byte_value"
            },
            "code": "void update_value_at_pointer_08000e18(void)\n{\n    uint8_t* byte_ptr = (uint8_t*)PTR_DAT_08000e2c;\n    uint32_t* int_ptr = (uint32_t*)PTR_DAT_08000e28;\n    uint32_t value = (uint32_t)*byte_ptr;\n    *int_ptr += value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "update_value_at_pointer_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "decode_and_set_bit_08003486",
                "param_1": "bit_position",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "decoded_value",
                "local_24": "bit_mask",
                "local_18": "constant_two",
                "local_20": "param_2_new",
                "local_1c": "param_3_new",
                "FUN_080031fc": "decode",
                "FUN_08000fb4": "set_bit"
            },
            "code": "void decode_and_set_bit_08003486(uint bit_position, uint32_t param_2, uint32_t param_3)\n{\n  uint32_t decoded_value = decode(bit_position);\n  uint32_t bit_mask = 1 << (bit_position & 0xf) & 0xffff;\n  uint32_t constant_two = 2;\n  uint32_t param_2_new = param_2;\n  uint32_t param_3_new = param_3;\n  set_bit(decoded_value, &bit_mask);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "decode_and_set_bit_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "update_status_08005662",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updated_status",
                "bVar3": "error"
            },
            "code": "void update_status_08005662(int status, int *data) {\n  int result = get_status_code(status, (int)*(short *)(data + 0xe));\n  bool error = result == -1;\n  ushort updated_status;\n  if (error) {\n    updated_status = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updated_status = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  *(ushort *)(data + 0xc) = updated_status;\n}\n",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "update_status_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data",
                "iVar1": "status",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "code": "void update_data_080042ac(int data)\n{\n  int status;\n  ushort new_index;\n  undefined new_value;\n  status = get_status(data, &new_value);\n  if ((status == 0) && (new_index = *(short *)(data + 100) + 1U & 0x3f, new_index != *(ushort *)(data + 0x66))) {\n    *(undefined *)(*(int *)(data + 0x60) + (uint)*(ushort *)(data + 100)) = new_value;\n    *(ushort *)(data + 100) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "param_b",
                "c1": "char_1",
                "s1": "short_1",
                "param_9": "param_9",
                "c2": "char_2"
            },
            "code": "uint32_t process_input_08001864(uint32_t **input)\n{\n  uint32_t *param_b = input[0xB];\n  char c1 = *(char *)((int)input + 0x3D);\n  if (c1 == '!') {\n    uint16_t s1 = *(uint16_t *)((int)input + 0x2A);\n    if (s1 == 0) {\n      if (((param_b == (uint32_t *)0x4) || (param_b == (uint32_t *)0x8)) || (param_b == (uint32_t *)0xFFFF0000)) {\n        (*input)[1] &= 0xFFFFF8FF;\n        **input |= 0x200;\n        input[0xC] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3D) = 0x20;\n        char c2 = *(char *)((int)input + 0x3E);\n        if (c2 == '@') {\n          *(char *)((int)input + 0x3E) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3E) = 0;\n          do_nothing_080015B6();\n        }\n      }\n      else {\n        (*input)[1] &= 0xFFFFF8FF;\n        input[0xC] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3E) = 0;\n        *(char *)((int)input + 0x3D) = 0x20;\n        do_nothing_080015B6();\n      }\n    }\n    else {\n      uint32_t *param_9 = input[9];\n      input[9] = (uint32_t *)((int)param_9 + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)param_9;\n      *(uint16_t *)((int)input + 0x2A) = *(uint16_t *)((int)input + 0x2A) - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_if_param_is_4_08000f2c",
                "param_1": "param",
                "*DAT_08000f48": "*data_pointer"
            },
            "code": "void set_flag_if_param_is_4_08000f2c(int param) {\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_4_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "bit_index",
                "PTR_DAT_08000edc": "array_ptr",
                "DAT_08000edc": "array_base_address"
            },
            "code": "void set_bit_in_array_08000ec4(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_position = bit_index & 0x1f;\n    int* PTR_DAT_08000edc = (int*)(DAT_08000edc + array_index * 4);\n    *PTR_DAT_08000edc = 1 << bit_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "check_and_call_08004338",
                "DAT_0800435c": "data",
                "FUN_08004240": "call_function",
                "PTR_DAT_08004360": "pointer_data"
            },
            "code": "void check_and_call_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    call_function(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "check_and_call_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_software_interrupt_080005e0",
                "0x3f": "SWI_READ_KEY"
            },
            "code": "void trigger_software_interrupt_080005e0(void)\n{\n    software_interrupt(SWI_READ_KEY);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "check_if_initialized_and_call_function_080005e4",
                "param_1": "arg1",
                "param_4": "arg4",
                "uVar1": "result",
                "PTR_DAT_080005fc": "ptr_dat",
                "FUN_080005e0": "call_function"
            },
            "code": "int check_if_initialized_and_call_function_080005e4(int arg1, int arg4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_080005fc == 0) {\n    result = call_function(1, arg1, 0, 0, arg4);\n  }\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "check_if_initialized_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "update_data_0800076c",
                "param_1": "data",
                "param_2": "index",
                "param_3": "value",
                "param_4": "max_size",
                "uVar1": "result",
                "iVar2": "current_index",
                "uVar3": "current_size"
            },
            "code": "void update_data_0800076c(int **data, int index, int value, int max_size) {\n  int current_size = (int)(*data)[0];\n  if (index >= current_size) {\n    int new_size = (index + 1 > max_size) ? max_size : index + 1;\n    *data = (int*)realloc(*data, (new_size + 1) * sizeof(int));\n    (*data)[0] = new_size;\n  }\n  (*data)[index + 1] = value;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08000728",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a00",
                "FUN_08000b54",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "update_data_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "get_value_at_index_08004460",
                "param_1": "index",
                "param_2": "array_size",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08004460(int index, uint array_size)\n{\n  undefined2 value;\n  if (array_size < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(index + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "obj_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x18)": "*(int *)(obj_address + 0x18)"
            },
            "code": "void set_param_value_08001198(int obj_address, int value, int is_shifted){\n  if (is_shifted == 0) {\n    *(int *)(obj_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(obj_address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_param_value_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_at_index_08003138",
                "param_1": "number",
                "param_2": "index",
                "*PTR_": "ptr",
                "DAT_": "bit",
                "uint": "unsigned int"
            },
            "code": "uint get_bit_at_index_08003138(uint number, int index) {\n    uint shifted_index = (number << 0x18) >> 0x1c;\n    uint* *PTR_ = (uint*)(index + shifted_index * 4);\n    uint DAT_ = **PTR_ >> (number & 0xf) & 1;\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "FUNC_08000300"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong FUNC_08000300(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  ulonglong uVar1;\n  uint *puVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 != 0) {\n        param_3 = param_3 << (uVar12 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        param_1 = param_1 << (uVar12 & 0xff);\n      }\n      uVar10 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar10;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar10 * uVar8) * 0x10000;\n      uVar6 = uVar8 * (param_3 & 0xffff);\n      uVar5 = uVar8;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar8 = (uVar7 - uVar6) / uVar10;\n      uVar7 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar10 * uVar8) * 0x10000;\n      uVar10 = uVar8 * (param_3 & 0xffff);\n      uVar6 = uVar8;\n      if (uVar7 <= uVar10 && uVar10 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar10 && uVar10 - uVar7 != 0)) {\n          uVar6 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar10;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n      puVar4 = (uint *)0x0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar12 = count_leading_zeroes(param_3);\n      if (uVar12 == 0) {\n        param_2 = param_2 - param_3;\n        uVar7 = param_3 >> 0x10;\n        uVar11 = param_3 & 0xffff;\n        puVar4 = (uint *)0x1;\n      }\n      else {\n        param_3 = param_3 << (uVar12 & 0xff);\n        uVar7 = param_3 >> 0x10;\n        uVar5 = param_2 >> (0x20 - uVar12 & 0xff);\n        uVar9 = param_1 >> (0x20 - uVar12 & 0xff) | param_2 << (uVar12 & 0xff);\n        uVar6 = uVar5 / uVar7;\n        uVar11 = param_3 & 0xffff;\n        uVar10 = uVar9 >> 0x10 | (uVar5 - uVar7 * uVar6) * 0x10000;\n        uVar8 = uVar6 * uVar11;\n        param_1 = param_1 << (uVar12 & 0xff);\n        uVar5 = uVar6;\n        if (uVar10 <= uVar8 && uVar8 - uVar10 != 0) {\n          bVar13 = CARRY4(uVar10,param_3);\n          uVar10 = uVar10 + param_3;\n          uVar5 = uVar6 - 1;\n          if ((bVar13 == false) && (uVar10 <= uVar8 && uVar8 - uVar10 != 0)) {\n            uVar5 = uVar6 - 2;\n            uVar10 = uVar10 + param_3;\n          }\n        }\n        uVar3 = (uVar10 - uVar8) / uVar7;\n        param_2 = uVar9 & 0xffff | ((uVar10 - uVar8) - uVar7 * uVar3) * 0x10000;\n        uVar8 = uVar3 * uVar11;\n        uVar6 = uVar3;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar6 = uVar3 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar6 = uVar3 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        puVar4 = (uint *)(uVar6 | uVar5 << 0x10);\n      }\n      uVar10 = param_2 / uVar7;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar10) * 0x10000;\n      uVar6 = uVar11 * uVar10;\n      uVar5 = uVar10;\n      if (uVar8 <= uVar6 && uVar6 - uVar8 != 0) {\n        bVar13 = CARRY4(uVar8,param_3);\n        uVar8 = uVar8 + param_3;\n        uVar5 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar8 <= uVar6 && uVar6 - uVar8 != 0)) {\n          uVar5 = uVar10 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar10 = (uVar8 - uVar6) / uVar7;\n      uVar7 = param_1 & 0xffff | ((uVar8 - uVar6) - uVar7 * uVar10) * 0x10000;\n      uVar11 = uVar11 * uVar10;\n      uVar6 = uVar10;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar7 = uVar7 - uVar11;\n      puVar2 = (uint *)(uVar6 | uVar5 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar7 >> (uVar12 & 0xff);\n      param_5[1] = 0;\n      return CONCAT44(puVar4,puVar2);\n    }\n  }\n  else if (param_2 < param_4) {\n    puVar2 = param_5;\n    puVar4 = param_5;\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return 0;\n    }\n  }\n  else {\n    puVar4 = (uint *)count_leading_zeroes(param_4);\n    if (puVar4 != (uint *)0x0) {\n      uVar8 = 0x20 - (int)puVar4;\n      uVar5 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar4 & 0xff);\n      uVar9 = uVar5 >> 0x10;\n      uVar12 = param_2 >> (uVar8 & 0xff);\n      uVar11 = param_1 >> (uVar8 & 0xff) | param_2 << ((uint)puVar4 & 0xff);\n      uVar10 = uVar12 / uVar9;\n      uVar7 = uVar11 >> 0x10 | (uVar12 - uVar9 * uVar10) * 0x10000;\n      uVar6 = uVar10 * (uVar5 & 0xffff);\n      param_3 = param_3 << ((uint)puVar4 & 0xff);\n      param_1 = param_1 << ((uint)puVar4 & 0xff);\n      uVar12 = uVar10;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar12 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar12 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar10 = (uVar7 - uVar6) / uVar9;\n      uVar7 = uVar11 & 0xffff | ((uVar7 - uVar6) - uVar9 * uVar10) * 0x10000;\n      uVar9 = uVar10 * (uVar5 & 0xffff);\n      uVar6 = uVar10;\n      if (uVar7 <= uVar9 && uVar9 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,uVar5);\n        uVar7 = uVar7 + uVar5;\n        uVar6 = uVar10 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar9 && uVar9 - uVar7 != 0)) {\n          uVar6 = uVar10 - 2;\n          uVar7 = uVar7 + uVar5;\n        }\n      }\n      uVar6 = uVar6 | uVar12 << 0x10;\n      uVar1 = (ulonglong)uVar6 * (ulonglong)param_3;\n      if (CONCAT44(uVar7 - uVar9,param_1) < uVar1) {\n        uVar1 = uVar1 - CONCAT44(uVar5,param_3);\n        uVar6 = uVar6 - 1;\n      }\n      if (param_5 != (uint *)0x0) {\n        uVar12 = ((uVar7 - uVar9) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n        *param_5 = uVar12 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar4 & 0xff);\n        param_5[1] = uVar12 >> ((uint)puVar4 & 0xff);\n      }\n      return (ulonglong)uVar6;\n    }\n    if ((param_4 < param_2) || (puVar2 = puVar4, param_3 <= param_1)) {\n      bVar13 = param_1 < param_3;\n      param_1 = param_1 - param_3;\n      param_2 = (param_2 - param_4) - (uint)bVar13;\n      puVar2 = (uint *)0x1;\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = param_1;\n      param_5[1] = param_2;\n      return ZEXT48(puVar2);\n    }\n  }\n  return CONCAT44(puVar4,puVar2);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "FUNC_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_in_uint_array_08002848",
                "param_1": "uint_array_ptr",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "uint_array[5]",
                "uint": "unsigned int",
                "&": "and",
                "|": "or",
                "~": "not",
                "<<": "left_shift",
                "&=": "bitwise_and_assignment",
                "|=": "bitwise_or_assignment"
            },
            "code": "void set_bit_in_uint_array_08002848(uint_array_ptr, bit_index, bit_value) {\n    uint* uint_array = (uint*)uint_array_ptr;\n    uint bit_mask = ~(1 << (bit_index & 0xff));\n    uint_array[5] = (uint_array[5] & bit_mask) | (bit_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_two_bytes_0800312c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_two_bytes_0800312c(int address)\n{\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "imported": false,
            "current_name": "combine_two_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bits_if_conditions_met_080028f0",
                "param_1": "data_ptr",
                "param_2": "value",
                "puVar1": "data",
                "0x1111": "BIT_MASK_1",
                "0x444": "BIT_MASK_2"
            },
            "code": "uint32_t clear_bits_if_conditions_met_080028f0(uint32_t **data_ptr, uint32_t value) {\n    uint32_t *data = *data_ptr;\n    uint32_t condition_1 = (data[8] & 0x1111) == 0;\n    uint32_t condition_2 = (data[8] & 0x444) == 0;\n    if (condition_1 && condition_2) {\n        data[17] &= 0xffff7fff;\n    }\n    data = *data_ptr;\n    if (condition_1 && condition_2) {\n        *data &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bits_if_conditions_met_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer"
            },
            "code": "int get_value_from_pointer_08000e30() {\n    int* PTR_DAT_08000e38 = (int*)PTR_DAT_08000e38;\n    return *PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_0800201c",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_value_and_reset_08000f56",
                "param_1": "value_ptr",
                "*(undefined *)(param_1 + 4)": "*(char *)(value_ptr + 4)",
                "FUN_080033c8": "call_helper_function",
                "*(undefined4 *)(param_1 + 0x10)": "*(int *)(value_ptr + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(char *)(value_ptr + 5)"
            },
            "code": "int set_value_and_reset_08000f56(int value_ptr){\n  if (value_ptr != 0) {\n    *(char *)(value_ptr + 4) = 2;\n    call_helper_function();\n    *(int *)(value_ptr + 0x10) = 0;\n    *(char *)(value_ptr + 4) = 0;\n    *(char *)(value_ptr + 5) = 0;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_value_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data_ptr",
                "pbVar2": "source_ptr",
                "sVar1": "data_length",
                "*param_1": "target_ptr",
                "*(ushort *)param_1[8]": "*source_ptr",
                "param_1[4]": "flag",
                "param_1[8]": "source_ptr"
            },
            "code": "int process_data_0800295c(int *data_ptr)\n{\n    int data_length = *(short *)((int)data_ptr + 0x26) - 1;\n\n    if (*(char *)((int)data_ptr + 0x39) != '!') {\n        return 2;\n    }\n\n    if (data_ptr[2] == 0x1000) {\n        uint *target_ptr = (uint *)(*data_ptr + 4);\n        ushort *source_ptr = (ushort *)data_ptr[8];\n        *target_ptr = *source_ptr & 0x1ff;\n        if (data_ptr[4] == 0) {\n            data_ptr[8] = data_ptr[8] + 2;\n        }\n        else {\n            data_ptr[8] = data_ptr[8] + 1;\n        }\n    }\n    else {\n        byte *source_ptr = (byte *)data_ptr[8];\n        uint *target_ptr = (uint *)(*data_ptr + 4);\n        *target_ptr = (uint)*source_ptr;\n        data_ptr[8] = (int)(source_ptr + 1);\n    }\n\n    *(short *)((int)data_ptr + 0x26) = data_length;\n\n    if (data_length == 0) {\n        uint *flag_ptr = (uint *)(*data_ptr + 0xc);\n        *flag_ptr &= 0xffffff7f;\n        *flag_ptr |= 0x40;\n        return 0;\n    }\n\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_input_and_return_value_08003380",
                "param_1": "input_1",
                "param_2": "N/A",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "code": "int check_input_and_return_value_08003380(int input_1, int input_3, int input_4)\n{\n  int result = FUN_0800354a(input_1, PTR_DAT_08003398, input_3, input_4, input_4);\n  if ((uint)(result << 12) >> 27 != 2) {\n    return 0;\n  }\n  return 16;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_input_and_return_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_value"
            },
            "code": "void process_data_08004110(uint index, undefined4 parameter_2, undefined4 parameter_3, undefined *data)\n{\n  int data_value;\n  undefined *data_ptr;\n  int result;\n\n  if (index < 0x60) {\n    data_value = (int)*(short *)(PTR_DAT_080041a8 + index * 2);\n    data_ptr = PTR_DAT_080041a8;\n  }\n  else {\n    data_value = -1;\n    data_ptr = data;\n  }\n  if (data_value != -1) {\n    result = FUN_08003138(data_value, PTR_DAT_080041ac, parameter_3, data_ptr, data);\n    if (result != 0) {\n      result = FUN_0800355e(data_value, PTR_DAT_080041b0);\n      if (result == 0) {\n        result = FUN_0800355e(data_value, PTR_DAT_080041b4);\n        if (result != 0) {\n          FUN_08003414(data_value);\n        }\n      }\n      else {\n        FUN_080033d8(data_value);\n      }\n      FUN_0800316c(data_value, PTR_DAT_080041ac);\n    }\n    switch(parameter_2) {\n    case 0:\n      FUN_08003486(data_value, 0);\n      break;\n    case 1:\n      FUN_08003486(data_value, 1, 0);\n      break;\n    case 2:\n      FUN_08003486(data_value, 0, 1);\n      break;\n    case 3:\n      FUN_08003486(data_value, 0, 2);\n    }\n    FUN_0800314e(data_value, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003486"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "calculate_result_08000ee0",
                "param_1": "input_value",
                "puVar1": "data_pointer"
            },
            "code": "int calculate_result_08000ee0(int input_value) {\n    int* data_pointer = DAT_08000f04;\n    if (input_value - 1U < 0x1000000) {\n        data_pointer[1] = input_value - 1U;\n        *(undefined *)(DAT_08000f08 + 0x23) = 0xf0;\n        data_pointer[2] = 0;\n        *data_pointer = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "calculate_result_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "decode_message_080015bc",
                "param_1": "message",
                "cVar1": "current_char",
                "pbVar2": "message_body",
                "uint": "unsigned_int",
                "do_nothing_080015ba": "perform_no_operation"
            },
            "code": "int decode_message_080015bc(int *message)\n{\n  char current_char;\n  byte *message_body;\n\n  current_char = *(char *)((int)message + 0x3d);\n  if (*(short *)((int)message + 0x2a) != 0) {\n    message_body = (byte *)message[9];\n    message[9] = (int)(message_body + 1);\n    *(uint *)(*message + 0x10) = (uint)*message_body;\n    *(short *)((int)message + 0x2a) = *(short *)((int)message + 0x2a) + -1;\n    if ((*(short *)((int)message + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*message + 4) = *(uint *)(*message + 4) & 0xfffffbff;\n      message[0xc] = 0x21;\n      *(undefined *)((int)message + 0x3d) = 0x28;\n      do_nothing_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "decode_message_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing_08000f4c();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_0800066c",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "max_value",
                "param_4": "data_type"
            },
            "code": "void set_data_0800066c(int data_address, char data_value, int max_value, char data_type) {\n\t*(char *)(data_address + 4) = data_value;\n\tif (max_value > 3) {\n\t\tmax_value = 0;\n\t}\n\t*(char *)(data_address + 5) = (char)max_value;\n\t*(char *)(data_address + 6) = data_type;\n\t*(short *)(data_address + 0x56) = 1000;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "set_value_at_index_080042e8",
                "param_1": "array_ptr",
                "param_2": "value",
                "iVar3": "index",
                "bVar1": "positive_index",
                "bVar2": "temp_index",
                "PTR_LAB_0800420c_1_08004334": "CHECK_VALUE_FAILED"
            },
            "code": "uint32_t set_value_at_index_080042e8(uint32_t array_ptr, uint8_t value) {\n  uint16_t* index_ptr = (uint16_t*)(array_ptr + 0x140);\n  *index_ptr += 1;\n  uint16_t index = *index_ptr;\n  uint8_t positive_index = (uint8_t)(index & 0x7F);\n  if (index == 0) {\n    positive_index = -(-positive_index & 0x7F);\n  }\n  while (*(uint16_t*)(array_ptr + 0x142) == (uint16_t)positive_index);\n  uint32_t* data_ptr = (uint32_t*)(array_ptr + 0x13C);\n  *(uint8_t*)(*data_ptr + index) = value;\n  *index_ptr = positive_index;\n  if (!check_value(array_ptr + 0xD4)) {\n    set_value_at_index_080042e8(array_ptr + 0xD4, PTR_LAB_0800420c_1_08004334);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_index_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_valid_080038d0",
                "param_1": "status",
                "iVar1": "function_context",
                "FUN_0800387c": "get_function_context",
                "*(code **)(iVar1 + 0x60)": "function_ptr",
                "code*": "function_ptr",
                "*(char *)(iVar1 + 0x5e)": "is_valid",
                "*(char *)(iVar1 + 0x2c)": "status",
                "' '": "space_character",
                "(**function_ptr)(iVar1 + 0x68)": "execute_function",
                "FUN_08001578": "execute_cleanup_function"
            },
            "code": "void execute_function_if_valid_080038d0(code* function_ptr, char is_valid, char status) {\n  int function_context = get_function_context();\n  if (function_ptr != NULL && is_valid && status != ' ') {\n    (*function_ptr)(function_context + 0x68);\n  }\n  execute_cleanup_function(status);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c"
            },
            "code": "int return_one_0800410c(void) {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "calculate_shifted_value_0800260c",
                "uVar1": "result",
                "FUN_080025e0": "get_value",
                "DAT_08002624": "some_data",
                "PTR_DAT_08002628": "shift_array"
            },
            "code": "uint calculate_shifted_value_0800260c(void)\n{\n  uint result;\n  uint value = get_value();\n  uint shift_amount = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  result = value >> PTR_DAT_08002628[shift_amount];\n  return result;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_value_at_offset_08004240",
                "param_1": "struct_address",
                "*(short *)(param_1 + 0x138)": "value_at_offset_138",
                "*(short *)(param_1 + 0x13a)": "value_at_offset_13a",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_08004240(int struct_address)\n{\n    ushort value_at_offset_138 = *(ushort *)(struct_address + 0x138);\n    ushort value_at_offset_13a = *(ushort *)(struct_address + 0x13a);\n    ushort result = (value_at_offset_138 + 0x40) - value_at_offset_13a;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "data_index",
                "param_2": "bit_shift",
                "param_3": "output_value",
                "param_4": "data_array",
                "iVar1": "status_code",
                "uVar2": "modified_value",
                "puVar3": "data_ptr",
                "uVar4": "data_value"
            },
            "code": "void process_data_080041bc(uint data_index, uint bit_shift, uint output_value, undefined *data_array) {\n  int status_code;\n  uint data_value;\n  undefined *data_ptr;\n  if (data_index < 0x60) {\n    data_value = (uint)*(short *)(PTR_DATA_ARRAY + data_index * 2);\n    data_ptr = PTR_DATA_ARRAY;\n  }\n  else {\n    data_value = 0xffffffff;\n    data_ptr = data_array;\n  }\n  if ((data_value != 0xffffffff) &&\n     (status_code = perform_operation(data_value, PTR_OPERATION_ARRAY, output_value, data_ptr, data_array), status_code != 0)) {\n    uint bit_mask = 1 << (data_value & 0xf) & 0xffff;\n    uint shifted_value = (data_value << 0x18) >> 0x1c;\n    uint modified_value = apply_mask(shifted_value, bit_mask);\n    write_output(modified_value, bit_shift);\n  }\n  return;\n}",
            "called": [
                "FUN_08003138",
                "FUN_0800318c",
                "FUN_080034b6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_080006b4",
                "FUN_08000600",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "process_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_struct_08004364",
                "param_1": "struct_ptr",
                "PTR_": "ptr_offset_",
                "DAT_": "data_"
            },
            "code": "void initialize_struct_08004364(int struct_ptr) {\n    int* PTR_134 = (int*)(struct_ptr + 0x134);\n    *PTR_134 = struct_ptr + 0x11;\n    \n    short* PTR_138 = (short*)(struct_ptr + 0x138);\n    *PTR_138 = 0;\n    \n    short* PTR_13a = (short*)(struct_ptr + 0x13a);\n    *PTR_13a = 0;\n    \n    int* PTR_13c = (int*)(struct_ptr + 0x13c);\n    *PTR_13c = struct_ptr + 0x51;\n    \n    short* PTR_140 = (short*)(struct_ptr + 0x140);\n    *PTR_140 = 0;\n    \n    short* PTR_142 = (short*)(struct_ptr + 0x142);\n    *PTR_142 = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "input_param",
                "FUN_0800066c": "initialize"
            },
            "code": "undefined4 execute_function_08000682(undefined4 input_param)\n{\n  initialize();\n  return input_param;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "execute_function_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_param_value_08000e3c",
                "param_1": "param_value",
                "DAT_08000e5c": "dat_e5c",
                "PTR_08000e5c": "ptr_dat_e5c"
            },
            "code": "void set_param_value_08000e3c(uint8_t param_value) {\n    uint32_t* PTR_08000e5c = (uint32_t*) (DAT_08000e5c + 0xC);\n    uint32_t masked_PTR_08000e5c = (*PTR_08000e5c) & 0xF8FF;\n    uint32_t new_value = (param_value & 0x7) << 8 | masked_PTR_08000e5c | 0x5FA0000;\n    *PTR_08000e5c = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_param_value_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "clear_flags_if_conditions_met_08002864",
                "param_1": "data",
                "param_2": "flag",
                "puVar2": "ptr_data",
                "bVar1": "is_dat_080028d0"
            },
            "code": "uint32_t clear_flags_if_conditions_met_08002864(uint32_t **data, uint32_t flag) {\n    bool is_dat_080028d0 = false;\n    uint32_t *ptr_data = *data;\n\n    FUN_08002848(*data, flag, 0);\n\n    if (ptr_data == DAT_080028d0 || ptr_data == (DAT_080028d0 + 0x100)) {\n        is_dat_080028d0 = true;\n    }\n\n    if (is_dat_080028d0 && ((ptr_data[8] & 0x1111) == 0) && ((ptr_data[8] & 0x444) == 0)) {\n        ptr_data[0x11] &= 0xffff7fff;\n    }\n\n    if (((ptr_data[8] & 0x1111) == 0) && ((ptr_data[8] & 0x444) == 0)) {\n        *ptr_data &= 0xfffffffe;\n    }\n\n    *(uint8_t *)((int)data + 0x39) = 1;\n\n    return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_flags_if_conditions_met_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "*param_1": "data",
                "param_2": "data_param2",
                "param_3": "data_param3",
                "puVar1": "ptr1"
            },
            "code": "void initialize_data_0800532c(undefined4 *data, undefined2 data_param2, undefined2 data_param3)\n{\n    // Initialize integer values to 0\n    data[0] = 0;\n    data[1] = 0;\n    data[2] = 0;\n    data[25] = 0;\n\n    // Initialize the two short values to the given parameters\n    *(undefined2 *)(data + 3) = data_param2;\n    *(undefined2 *)((int)data + 0xe) = data_param3;\n\n    // Initialize the remaining integer values to 0\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n\n    // Initialize a range of 8 bytes starting from data[23] to 0\n    FUN_080048cc(data + 0x17, 0, 8);\n\n    // Assign predefined integer and function pointer values to specific data indices\n    data[9] = DAT_08005364;\n    data[10] = PTR_FUN_0800562a_1_08005368;\n    data[11] = PTR_FUN_08005662_1_0800536c;\n\n    // Assign specific data indices to predefined pointers\n    undefined *ptr1 = PTR_LAB_08005686_1_08005370;\n    data[8] = data;\n    data[12] = ptr1;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "array_ptr"
            },
            "code": "void set_bit_in_array_0800314e(uint bit_index, int* array){\n  uint array_index = (bit_index << 0x18) >> 0x1c;\n  uint* PTR_ = (uint*)(array + array_index * 4);\n  *PTR_ = *PTR_ | 1 << (bit_index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "process_data_0800447c",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "string_value",
                "PTR_PTR_FUN_080042e8_1_080044c8": "PTR_PTR_PROCESS_1",
                "PTR_DAT_080044cc": "PTR_DATA",
                "FUN_08004444": "log_error",
                "FUN_08004460": "log_event",
                "check_param": "get_string",
                "PTR_DAT_080044d0": "PTR_STRING_1",
                "PTR_DAT_080044d4": "PTR_STRING_2",
                "FUN_08004364": "finalize_process"
            },
            "code": "undefined4* process_data_0800447c(undefined4 *data, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  data[1] = 0;\n  data[2] = 1000;\n  *data = PTR_PTR_FUN_080042e8_1_080044c8;\n  if (data == (undefined4 *)PTR_DAT_080044cc) {\n    log_error(data, 0x4c, param_3, PTR_DAT_080044cc, param_4);\n    log_event(data, 0x4d);\n  }\n  else {\n    undefined2 uVar1 = check_param(param_2, PTR_DAT_080044d0);\n    *(undefined2 *)((int)data + 0x12e) = uVar1;\n    uVar1 = check_param(param_2, PTR_DAT_080044d4);\n    *(undefined2 *)(data + 0x4b) = uVar1;\n  }\n  finalize_process(data);\n  return data;\n}",
            "called": [
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364",
                "FUN_08004460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "process_data_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "line",
                "param_2": "column",
                "param_3": "file_name",
                "param_4": "error_code",
                "uVar1": "error_code_copy",
                "puVar2": "file_name_copy",
                "uVar3": "uVar3",
                "uVar4": "uVar4"
            },
            "code": "void assertion_failed_08004808(undefined4 line, undefined4 column, undefined *file_name, undefined4 error_code)\n{\n  undefined4 error_code_copy;\n  undefined *file_name_copy;\n  undefined4 line_copy;\n  undefined4 column_copy;\n  error_code_copy = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  file_name_copy = PTR_s___function__08004838;\n  if (file_name == (undefined *)0x0) goto LAB_0800482c;\n  do {\n    FUN_08004860(error_code_copy, PTR_s_assertion___s__failed__file___s__0800483c, error_code, line, column, file_name_copy, file_name, error_code_copy);\n    uVar3 = FUN_080051ac();\n    column = (undefined4)((ulonglong)uVar3 >> 0x20);\n    error_code_copy = (undefined4)uVar3;\nLAB_0800482c:\n    file_name = PTR_s__08004840;\n    file_name_copy = PTR_s__08004840;\n  } while( true );\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "assertion_failed_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bits",
                "param_2": "bit_position",
                "**param_1": "*bits",
                "*(undefined *)(param_1 + 1)": "*(uint8_t *)(bits + 1)",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t clear_bit_08000f72(uint32_t **bits, uint32_t bit_position) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    **bits &= mask;\n    *(uint8_t *)(bits + 1) = 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "check_input_08001d00",
                "param_1": "input",
                "iVar1": "input_ptr",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "FUN_08001256": "execute_function_1",
                "FUN_0800124a": "execute_function_2",
                "DAT_08001e60": "const1",
                "DAT_08001e4c": "const2",
                "FUN_080011c0": "execute_function_3",
                "DAT_08001e54": "const3",
                "DAT_08001e64": "const4",
                "DAT_08001e5c": "const5",
                "FUN_08001904": "execute_function_4",
                "FUN_080019a0": "execute_function_5",
                "DAT_08001e58": "const6",
                "FUN_0800171a": "execute_function_6",
                "FUN_08001864": "execute_function_7",
                "FUN_0800165a": "execute_function_8",
                "DAT_08001e50": "const7",
                "FUN_08001bfc": "execute_function_9",
                "FUN_0800160e": "execute_function_10",
                "FUN_08001440": "execute_function_11",
                "FUN_080015bc": "execute_function_12",
                "FUN_08001420": "execute_function_13"
            },
            "code": "void check_input_08001d00(int *input)\n{\n  int input_ptr = *input;\n  uint var1 = *(uint *)(input_ptr + 0x18);\n  uint var2 = *(uint *)(input_ptr + 0x14);\n  uint var3 = *(uint *)(input_ptr + 4);\n\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((DAT_08001e60 & var2) == 0) || ((var3 & 0x200) == 0)) {\n        if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n          execute_function_1(input);\n        }\n      }\n      else {\n        execute_function_2(input);\n      }\n    }\n    else {\n      execute_function_3(input);\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_function_4(input);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_function_5(input);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_function_6(input);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_function_7(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & var2) != 0) && ((var3 & 0x200) != 0)) {\n      execute_function_8();\n      return;\n    }\n    if (((DAT_08001e50 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      execute_function_9(input);\n      return;\n    }\n    if ((DAT_08001e54 & var1) == 0) {\n      if ((((DAT_08001e64 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_function_10(input);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_function_11(input);\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08001e5c & var2) == 0)) {\n        execute_function_12(input);\n        return;\n      }\n      if (((DAT_08001e5c & var2) != 0) && ((var3 & 0x200) != 0)) {\n        execute_function_13(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_08001420",
                "FUN_08001256",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800171a",
                "FUN_08001440",
                "FUN_0800160e",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_080019a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "check_input_08001d00"
        }
    },
    "used_tokens": 184407,
    "layers": [
        [
            "FUN_08000b04",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ],
        [
            "thunk_FUN_0800410c",
            "FUN_0800351e",
            "FUN_08000de4"
        ]
    ],
    "locked_functions": []
}