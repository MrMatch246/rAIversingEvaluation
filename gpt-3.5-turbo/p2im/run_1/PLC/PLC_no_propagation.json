{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initialize_flag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080001ac": {
                    "26": "initialize_flag",
                    "1": "initialize_flag_if_zero"
                },
                "param_1": {
                    "13": "input",
                    "1": "value",
                    "11": "input_value",
                    "2": "input_data",
                    "3": "input_param"
                },
                "DAT_20000104": {
                    "18": "flag",
                    "1": "data_initialized"
                }
            }
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint byte_to_find,uint length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char flag_2;\n  char flag_3;\n  char flag_4;\n  byte *next_byte;\n  uint *current_ptr;\n  byte *result;\n  uint offset;\n  uint aligned_length;\n  uint xor_result;\n  uint xor_result_2;\n  bool nonzero_byte_check;\n  bool nonzero_byte_check_2;\n  bool nonzero_byte_check_3;\n  bool nonzero_byte_check_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = byte_to_find | byte_to_find << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result = *data ^ offset;\n          xor_result_2 = data[1] ^ offset;\n          is_byte_zero = -((char)xor_result == '\\0');\n          flag_2 = -((char)(xor_result >> 8) == '\\0');\n          flag_3 = -((char)(xor_result >> 0x10) == '\\0');\n          flag_4 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(flag_4,CONCAT12(flag_3,CONCAT11(flag_2,is_byte_zero)));\n          nonzero_byte_check = (char)xor_result_2 != '\\0';\n          nonzero_byte_check_2 = (char)(xor_result_2 >> 8) != '\\0';\n          nonzero_byte_check_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          nonzero_byte_check_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(nonzero_byte_check_4 * flag_4 - !nonzero_byte_check_4,\n                            CONCAT12(nonzero_byte_check_3 * flag_3 - !nonzero_byte_check_3,\n                                     CONCAT11(nonzero_byte_check_2 * flag_2 - !nonzero_byte_check_2,nonzero_byte_check * is_byte_zero - !nonzero_byte_check)));\n          if (xor_result_2 != 0) {\n            if (xor_result == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              nonzero_byte_check = (xor_result & 0x100) == 0;\n              next_byte = result + 1;\n              if (nonzero_byte_check) {\n                nonzero_byte_check = (xor_result & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (nonzero_byte_check) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x08000290;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "flag_2",
                "cVar4": "flag_3",
                "cVar5": "flag_4",
                "pbVar6": "next_byte",
                "puVar7": "current_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result",
                "uVar12": "xor_result_2",
                "bVar13": "nonzero_byte_check",
                "bVar14": "nonzero_byte_check_2",
                "bVar15": "nonzero_byte_check_3",
                "bVar16": "nonzero_byte_check_4"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000230": {
                    "1": "find_pattern",
                    "23": "find_byte_sequence",
                    "3": "find_first_occurrence"
                },
                "param_1": {
                    "1": "data_pointer",
                    "18": "data",
                    "2": "input_array",
                    "4": "buffer",
                    "3": "input_data"
                },
                "param_2": {
                    "14": "byte_to_find",
                    "1": "pattern",
                    "10": "target_byte",
                    "3": "target"
                },
                "param_3": {
                    "2": "array_length",
                    "6": "data_size",
                    "1": "input_length",
                    "4": "buffer_length",
                    "3": "size",
                    "11": "length"
                },
                "bVar1": {
                    "2": "byte_val",
                    "4": "byte_value",
                    "25": "current_byte"
                },
                "cVar2": {
                    "4": "flag_1",
                    "1": "bit0",
                    "7": "is_byte_zero",
                    "2": "first_byte_match"
                },
                "cVar3": {
                    "1": "byte_match_1",
                    "4": "flag_2",
                    "2": "is_zero_byte_shifted_8"
                },
                "cVar4": {
                    "1": "is_zero_byte_upper16",
                    "2": "third_byte_match",
                    "4": "flag_3"
                },
                "cVar5": {
                    "1": "check_4",
                    "2": "fourth_byte_match",
                    "4": "flag_4"
                },
                "pbVar6": {
                    "16": "next_byte",
                    "1": "result_pointer",
                    "3": "result"
                },
                "puVar7": {
                    "1": "array_ptr",
                    "2": "current_uint_pointer",
                    "7": "current_ptr",
                    "6": "next_uint"
                },
                "pbVar8": {
                    "1": "next_index",
                    "4": "result_ptr",
                    "10": "result",
                    "2": "result_byte",
                    "3": "result_pointer"
                },
                "uVar9": {
                    "3": "buffer_alignment",
                    "2": "data_offset",
                    "1": "shift",
                    "4": "remainder",
                    "8": "offset"
                },
                "uVar10": {
                    "1": "aligned_data_size",
                    "4": "length_aligned",
                    "2": "aligned_buffer_length",
                    "7": "aligned_length"
                },
                "uVar11": {
                    "2": "xored_value",
                    "1": "first_xor",
                    "3": "xor_result_1",
                    "4": "xor_result"
                },
                "uVar12": {
                    "1": "xor2",
                    "2": "xor_result2",
                    "5": "xor_result_2"
                },
                "bVar13": {
                    "1": "is_shifted_byte_nonzero"
                },
                "bVar14": {
                    "1": "check_result_bit_2"
                },
                "bVar15": {
                    "1": "check_result_bit_3"
                },
                "bVar16": {
                    "1": "xor_mask_3"
                },
                "uVar13": {
                    "1": "encrypt_is_zero"
                },
                "uVar14": {
                    "1": "temp1"
                },
                "uVar15": {
                    "1": "combined_patterns3"
                },
                "uVar16": {
                    "1": "temp3"
                },
                "uVar17": {
                    "1": "temp4"
                },
                "bVar17": {
                    "1": "byte_result1"
                },
                "bVar18": {
                    "1": "byte_result2"
                },
                "bVar19": {
                    "1": "byte_result3"
                },
                "bVar20": {
                    "1": "byte_result4"
                }
            }
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "process_params_080002d0",
            "code": "\nundefined8 process_params_080002d0(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return concatenate_vars(input2,input1);\n  }\n  result = FUN_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "process_params_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "CONCAT44": "concatenate_vars"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080002d0": {
                    "1": "reconstruct_data",
                    "6": "process_params",
                    "2": "process_parameters",
                    "3": "get_concatenated_values",
                    "4": "extracted_function"
                },
                "param_1": {
                    "2": "first_param",
                    "1": "input_value1",
                    "4": "value1",
                    "15": "input1"
                },
                "param_2": {
                    "15": "input2",
                    "1": "value_2",
                    "4": "value2",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "third_param",
                    "4": "input_param3",
                    "1": "value_3",
                    "3": "value3",
                    "13": "input3"
                },
                "param_4": {
                    "2": "fourth_param",
                    "1": "input_param_4",
                    "4": "input_param4",
                    "3": "value4",
                    "13": "input4"
                },
                "uVar1": {
                    "2": "combined_values",
                    "1": "concatenated_result",
                    "20": "result"
                },
                "FUN_08000300": {
                    "1": "process_results",
                    "3": "calculate_result"
                },
                "CONCAT44": {
                    "1": "combine_results"
                }
            }
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper,uint *remainder)\n\n{\n  ulonglong result;\n  uint temp1;\n  uint temp2;\n  uint quotient_low;\n  uint temp2;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  uint temp_8;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_upper = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp_7 = divisor >> 0x10;\n      temp_5 = dividend_upper / temp_7;\n      temp2 = dividend >> 0x10 | (dividend_upper - temp_7 * temp_5) * 0x10000;\n      quotient_low = temp_5 * (divisor & 0xffff);\n      temp2 = temp_5;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry_flag = check_and_carry_addition(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp2 = temp_5 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          temp2 = temp_5 - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp_5 = (temp2 - quotient_low) / temp_7;\n      temp2 = dividend & 0xffff | ((temp2 - quotient_low) - temp_7 * temp_5) * 0x10000;\n      temp_7 = temp_5 * (divisor & 0xffff);\n      quotient_low = temp_5;\n      if (temp2 <= temp_7 && temp_7 - temp2 != 0) {\n        carry_flag = check_and_carry_addition(temp2,divisor);\n        temp2 = temp2 + divisor;\n        quotient_low = temp_5 - 1;\n        if ((carry_flag == false) && (temp2 <= temp_7 && temp_7 - temp2 != 0)) {\n          quotient_low = temp_5 - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = temp2 - temp_7;\n      quotient_low = quotient_low | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_upper = dividend_upper - divisor;\n        temp2 = divisor >> 0x10;\n        temp_8 = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp2 = divisor >> 0x10;\n        quotient_low = dividend_upper >> (0x20U - shift_amount & 0xff);\n        temp_6 = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        temp2 = quotient_low / temp2;\n        temp_8 = divisor & 0xffff;\n        temp_7 = temp_6 >> 0x10 | (quotient_low - temp2 * temp2) * 0x10000;\n        temp_5 = temp2 * temp_8;\n        dividend = dividend << shift_amount;\n        quotient_low = temp2;\n        if (temp_7 <= temp_5 && temp_5 - temp_7 != 0) {\n          carry_flag = check_and_carry_addition(temp_7,divisor);\n          temp_7 = temp_7 + divisor;\n          quotient_low = temp2 - 1;\n          if ((carry_flag == false) && (temp_7 <= temp_5 && temp_5 - temp_7 != 0)) {\n            quotient_low = temp2 - 2;\n            temp_7 = temp_7 + divisor;\n          }\n        }\n        temp1 = (temp_7 - temp_5) / temp2;\n        dividend_upper = temp_6 & 0xffff | ((temp_7 - temp_5) - temp2 * temp1) * 0x10000;\n        temp_5 = temp1 * temp_8;\n        temp2 = temp1;\n        if (dividend_upper <= temp_5 && temp_5 - dividend_upper != 0) {\n          carry_flag = check_and_carry_addition(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          temp2 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_upper <= temp_5 && temp_5 - dividend_upper != 0)) {\n            temp2 = temp1 - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp_5;\n        temp2 = temp2 | quotient_low << 0x10;\n      }\n      temp_6 = dividend_upper / temp2;\n      temp_7 = dividend >> 0x10 | (dividend_upper - temp2 * temp_6) * 0x10000;\n      quotient_low = temp_8 * temp_6;\n      temp_5 = temp_6;\n      if (temp_7 <= quotient_low && quotient_low - temp_7 != 0) {\n        carry_flag = check_and_carry_addition(temp_7,divisor);\n        temp_7 = temp_7 + divisor;\n        temp_5 = temp_6 - 1;\n        if ((carry_flag == false) && (temp_7 <= quotient_low && quotient_low - temp_7 != 0)) {\n          temp_5 = temp_6 - 2;\n          temp_7 = temp_7 + divisor;\n        }\n      }\n      temp_6 = (temp_7 - quotient_low) / temp2;\n      temp2 = dividend & 0xffff | ((temp_7 - quotient_low) - temp2 * temp_6) * 0x10000;\n      temp_8 = temp_8 * temp_6;\n      quotient_low = temp_6;\n      if (temp2 <= temp_8 && temp_8 - temp2 != 0) {\n        carry_flag = check_and_carry_addition(temp2,divisor);\n        temp2 = temp2 + divisor;\n        quotient_low = temp_6 - 1;\n        if ((carry_flag == false) && (temp2 <= temp_8 && temp_8 - temp2 != 0)) {\n          quotient_low = temp_6 - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = temp2 - temp_8;\n      quotient_low = quotient_low | temp_5 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp2 >> shift_amount;\n      remainder[1] = 0;\n      return concatenate_uint64(temp2,quotient_low);\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_upper;\n      return 0;\n    }\n    quotient_low = 0;\n    temp2 = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(divisor_upper);\n    if (shift_amount != 0) {\n      temp_7 = 0x20 - shift_amount;\n      temp2 = divisor >> (temp_7 & 0xff) | divisor_upper << shift_amount;\n      temp_8 = temp2 >> 0x10;\n      quotient_low = dividend_upper >> (temp_7 & 0xff);\n      temp1 = dividend >> (temp_7 & 0xff) | dividend_upper << shift_amount;\n      temp_6 = quotient_low / temp_8;\n      temp_5 = temp1 >> 0x10 | (quotient_low - temp_8 * temp_6) * 0x10000;\n      temp2 = temp_6 * (temp2 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient_low = temp_6;\n      if (temp_5 <= temp2 && temp2 - temp_5 != 0) {\n        carry_flag = check_and_carry_addition(temp_5,temp2);\n        temp_5 = temp_5 + temp2;\n        quotient_low = temp_6 - 1;\n        if ((carry_flag == false) && (temp_5 <= temp2 && temp2 - temp_5 != 0)) {\n          quotient_low = temp_6 - 2;\n          temp_5 = temp_5 + temp2;\n        }\n      }\n      temp_6 = (temp_5 - temp2) / temp_8;\n      temp_5 = temp1 & 0xffff | ((temp_5 - temp2) - temp_8 * temp_6) * 0x10000;\n      temp_8 = temp_6 * (temp2 & 0xffff);\n      temp2 = temp_6;\n      if (temp_5 <= temp_8 && temp_8 - temp_5 != 0) {\n        carry_flag = check_and_carry_addition(temp_5,temp2);\n        temp_5 = temp_5 + temp2;\n        temp2 = temp_6 - 1;\n        if ((carry_flag == false) && (temp_5 <= temp_8 && temp_8 - temp_5 != 0)) {\n          temp2 = temp_6 - 2;\n          temp_5 = temp_5 + temp2;\n        }\n      }\n      temp2 = temp2 | quotient_low << 0x10;\n      result = (ulonglong)temp2 * (ulonglong)(divisor << shift_amount);\n      if (concatenate_uint64(temp_5 - temp_8,dividend) < result) {\n        result = result - concatenate_uint64(temp2,divisor << shift_amount);\n        temp2 = temp2 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient_low = ((temp_5 - temp_8) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient_low << (temp_7 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = quotient_low >> shift_amount;\n      }\n      return (ulonglong)temp2;\n    }\n    if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper = (dividend_upper - divisor_upper) - (uint)carry_flag;\n      quotient_low = 1;\n    }\n    else {\n      quotient_low = 0;\n    }\n    temp2 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_upper;\n      return (ulonglong)quotient_low;\n    }\n  }\n  return concatenate_uint64(temp2,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "param_5": "remainder",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "quotient_low",
                "uVar5": "temp2",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "uVar9": "temp_8",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag",
                "LZCOUNT": "leading_zero_count",
                "CARRY4": "check_and_carry_addition",
                "CONCAT44": "concatenate_uint64"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000300": {
                    "1": "div_and_mod",
                    "13": "divide_with_remainder",
                    "4": "divide_and_remainder",
                    "2": "perform_division"
                },
                "param_1": {
                    "1": "input1",
                    "29": "dividend"
                },
                "param_2": {
                    "6": "dividend_high",
                    "1": "quotient_high",
                    "4": "dividend_low",
                    "2": "divisor"
                },
                "param_3": {
                    "1": "quotient",
                    "24": "divisor"
                },
                "param_4": {
                    "1": "quotient_low",
                    "4": "divisor_lower",
                    "6": "divisor_upper",
                    "3": "remainder"
                },
                "param_5": {
                    "1": "quotient",
                    "3": "result",
                    "19": "remainder"
                },
                "uVar1": {
                    "1": "result_higher",
                    "2": "quotient_high",
                    "10": "result",
                    "8": "quotient"
                },
                "uVar2": {
                    "1": "quotient_high",
                    "2": "quotient1",
                    "10": "temp1",
                    "6": "temp_1"
                },
                "uVar3": {
                    "2": "quotient2",
                    "1": "quotient",
                    "4": "temp_2",
                    "3": "quotient_high",
                    "6": "temp2"
                },
                "uVar4": {
                    "3": "quotient_high",
                    "1": "calculation1",
                    "2": "quotient_upper_bits",
                    "4": "quotient_low"
                },
                "uVar5": {
                    "1": "temp3",
                    "2": "temp1",
                    "4": "temp2",
                    "3": "temp4"
                },
                "uVar6": {
                    "2": "temp5",
                    "1": "temp4",
                    "4": "temp_5",
                    "3": "temp3"
                },
                "uVar7": {
                    "1": "remainder_final",
                    "4": "temp_6",
                    "2": "temp_4",
                    "3": "temp4"
                },
                "uVar8": {
                    "2": "temp7",
                    "1": "divisor_high_temp",
                    "4": "temp_7",
                    "3": "temp4"
                },
                "uVar9": {
                    "1": "temp4",
                    "2": "temp7",
                    "4": "temp_8"
                },
                "iVar10": {
                    "2": "shift",
                    "14": "shift_amount",
                    "1": "bit_count",
                    "9": "shift_count"
                },
                "bVar11": {
                    "5": "carry",
                    "2": "is_carry",
                    "1": "carry_check",
                    "21": "carry_flag"
                },
                "uVar12": {
                    "1": "temp3"
                },
                "uVar10": {
                    "2": "temp",
                    "1": "leading_zeros_count"
                },
                "iVar11": {
                    "1": "shift_amount"
                },
                "bVar12": {
                    "2": "carry_flag"
                },
                "LZCOUNT": {
                    "1": "leading_zeros_count"
                },
                "CARRY4": {
                    "1": "check_and_carry_addition"
                },
                "uVar13": {
                    "1": "temp2"
                },
                "uVar14": {
                    "1": "temp3"
                },
                "CONCAT44": {
                    "1": "concatenate_uint64"
                }
            }
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_system_call_080005e0",
            "code": "\nvoid execute_system_call_080005e0(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_system_call_080005e0",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005e0": {
                    "6": "perform_system_call",
                    "1": "send_interrupt",
                    "3": "invoke_system_interrupt",
                    "7": "execute_system_call"
                },
                "software_interrupt": {
                    "3": "execute_interrupt",
                    "2": "invoke_interrupt",
                    "1": "system_call"
                },
                "0x3f": {
                    "2": "interrupt_number",
                    "1": "irq_code"
                },
                "PTR_12345678": {
                    "1": "buffer_pointer"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_function_080005e4",
            "code": "\nundefined4 execute_function_080005e4(undefined4 input1,undefined4 unused_param,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = FUN_080005e0(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_function_080005e4",
                "param_1": "input1",
                "param_4": "input4",
                "uVar1": "result",
                "param_2": "unused_param",
                "param_3": "input3"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005e4": {
                    "1": "execute_if_not_executed_before",
                    "6": "process_data",
                    "10": "execute_function",
                    "2": "check_and_call_function"
                },
                "param_1": {
                    "1": "value1",
                    "3": "arg1",
                    "2": "input_value",
                    "10": "input1",
                    "8": "input_param"
                },
                "param_4": {
                    "1": "config_param",
                    "5": "output_param",
                    "3": "arg4",
                    "10": "input4"
                },
                "uVar1": {
                    "17": "result",
                    "8": "return_value"
                },
                "param_2": {
                    "4": "input2",
                    "1": "arg2",
                    "2": "unused_param1",
                    "5": "unused_param"
                },
                "param_3": {
                    "2": "unused_param_2",
                    "1": "arg3",
                    "3": "unused_param2",
                    "4": "input3"
                },
                "FUN_080005e0": {
                    "1": "process_code"
                }
            }
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_data_08000600",
            "code": "\nvoid initialize_data_08000600(int **data,undefined4 param)\n\n{\n  char data_type;\n  int result;\n  \n  data_type = *(char *)((int)data + 5);\n  if (data_type == '\\x02') {\n    *data = &DAT_20000338;\n  }\n  else if (data_type == '\\x03') {\n    *data = &DAT_20000338;\n  }\n  else if (data_type == '\\x01') {\n    *data = &DAT_20000338;\n  }\n  else {\n    *data = &DAT_20000338;\n  }\n  FUN_08004388(*data,param,6);\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_08004110(*(byte *)((int)data + 6),1);\n    FUN_080041bc(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_data_08000600",
                "cVar1": "data_type",
                "iVar2": "result",
                "param_1": "data",
                "param_2": "param"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_08004388",
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000600": {
                    "4": "process_data",
                    "1": "update_data",
                    "2": "initialize_param",
                    "20": "initialize_data",
                    "3": "initialize_function"
                },
                "cVar1": {
                    "2": "data_char",
                    "7": "data_type",
                    "1": "data_element",
                    "3": "character",
                    "4": "data_value"
                },
                "iVar2": {
                    "1": "int_value",
                    "6": "return_value",
                    "22": "result"
                },
                "FUN_08004388": {
                    "7": "process_data"
                },
                "FUN_08004110": {
                    "1": "operation1",
                    "2": "perform_action1"
                },
                "FUN_080041bc": {
                    "1": "operation2",
                    "2": "perform_action2"
                },
                "param_1": {
                    "10": "data",
                    "1": "param",
                    "6": "data_ptr",
                    "7": "data_pointer"
                },
                "param_2": {
                    "1": "param_code",
                    "3": "param2",
                    "9": "value",
                    "12": "param"
                },
                "FUM_08004388": {
                    "1": "process_data"
                },
                "FUM_08004110": {
                    "1": "helper_function1"
                },
                "FUM_080041bc": {
                    "1": "helper_function2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "DAT_20000338": {
                    "1": "data_pointer"
                },
                "FUNK_08004388": {
                    "1": "process_data_internal"
                }
            }
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "update_data_0800066c",
            "code": "\nvoid update_data_0800066c(int data_pointer,unspecified new_value,int limit,unspecified value3)\n\n{\n  *(unspecified *)(data_pointer + 4) = new_value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(byte *)(data_pointer + 5) = (byte)limit;\n  *(unspecified *)(data_pointer + 6) = value3;\n  *(unspecified2 *)(data_pointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "update_data_0800066c",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "param_3": "limit",
                "param_4": "value3",
                "char": "byte",
                "undefined": "unspecified"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800066c": {
                    "1": "update_struct",
                    "2": "set_parameters",
                    "3": "set_function_parameters",
                    "4": "initialize_data",
                    "11": "update_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "data_ptr",
                    "3": "base_address",
                    "7": "data_pointer",
                    "5": "data_address"
                },
                "param_2": {
                    "2": "param_value",
                    "12": "new_value",
                    "1": "new_data",
                    "7": "value",
                    "5": "value1"
                },
                "param_3": {
                    "1": "value_limit",
                    "2": "count",
                    "5": "value2",
                    "14": "limit"
                },
                "param_4": {
                    "1": "param",
                    "2": "new_data",
                    "4": "additional_data",
                    "5": "value3"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data_struct.pointer"
                },
                "*(char *)(param_1 + 5)": {
                    "1": "data_struct.limit_flag"
                },
                "*(undefined *)(param_1 + 6)": {
                    "1": "data_struct.info_pointer"
                },
                "*(undefined2 *)(param_1 + 0x56)": {
                    "1": "data_struct.default_size"
                },
                "param_1 + 4": {
                    "1": "address_to_update"
                },
                "param_1 + 5": {
                    "1": "address_to_store_max_value"
                },
                "param_1 + 6": {
                    "1": "data_byte"
                },
                "param_1 + 0x56": {
                    "1": "buffer_size",
                    "2": "constant_value"
                },
                "char": {
                    "1": "byte"
                },
                "undefined": {
                    "1": "unspecified"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "(param_1 + 4)": {
                    "1": "address"
                },
                "(param_1 + 5)": {
                    "1": "limit_address"
                },
                "(param_1 + 6)": {
                    "1": "data_address"
                },
                "(param_1 + 0x56)": {
                    "1": "constant"
                },
                "1000": {
                    "1": "default_buffer_size"
                }
            }
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "execute_function_08000682",
            "code": "\nunspecified4 execute_function_08000682(unspecified4 input_param)\n\n{\n  FUN_0800066c();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "input_param",
                "undefined": "unspecified"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000682": {
                    "1": "initialize_and_return_value",
                    "6": "initialize",
                    "10": "execute_function",
                    "2": "execute_and_return"
                },
                "param_1": {
                    "10": "input",
                    "1": "value",
                    "6": "input_value",
                    "11": "input_param"
                },
                "FUN_0800066c": {
                    "1": "initialize_components",
                    "3": "perform_action",
                    "2": "perform_operation",
                    "4": "helper_function"
                },
                "param_2": {
                    "1": "arg2",
                    "2": "unknown_param",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "arg3",
                    "5": "count",
                    "3": "param_3",
                    "2": "arg2"
                },
                "param_4": {
                    "1": "unused_param2",
                    "3": "param_4",
                    "2": "unknown_param"
                },
                "undefined": {
                    "1": "unspecified"
                }
            }
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_and_call_function_08000690",
            "code": "\nvoid check_and_call_function_08000690(int status,int value,undefined4 unused_param,undefined4 param_4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FUN_08000682(&DAT_20000124,1,0,0,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_and_call_function_08000690",
                "param_1": "status",
                "param_2": "value",
                "param_3": "unused_param"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000690": {
                    "1": "check_param1_and_call_func",
                    "2": "check_and_execute",
                    "7": "check_and_call_function",
                    "4": "check_param"
                },
                "param_1": {
                    "3": "value_1",
                    "1": "input_param",
                    "4": "input_flag",
                    "2": "status_code",
                    "7": "status"
                },
                "param_2": {
                    "3": "value_2",
                    "2": "param_value",
                    "5": "input_value",
                    "12": "value",
                    "1": "flag_value"
                },
                "FUN_08000682": {
                    "1": "execute_special_function",
                    "9": "process_data",
                    "2": "call_sub_function"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "unused_param_1",
                    "7": "unused_param"
                },
                "param_4": {
                    "3": "additional_param",
                    "2": "param",
                    "1": "arg2",
                    "7": "param_4"
                },
                "&DAT_20000124": {
                    "1": "data_address"
                }
            }
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint process_data_080006b4(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  int return_value;\n  byte counter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    is_overflow = false;\n    while (return_value = (**(code **)(**data + 8))(), return_value != 0) {\n      counter = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + counter + 9) = result;\n      counter = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = counter;\n      if (0x3f < counter) {\n        is_overflow = true;\n      }\n    }\n  }\n  else {\n    is_overflow = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "result",
                "iVar3": "return_value",
                "bVar4": "counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006b4": {
                    "1": "extract_chars_from_array",
                    "15": "process_data",
                    "3": "process_param",
                    "2": "extract_data_from_binary"
                },
                "param_1": {
                    "2": "binary_data",
                    "12": "data",
                    "1": "param",
                    "4": "input_data",
                    "3": "data_ptr"
                },
                "bVar1": {
                    "1": "exceed_limit",
                    "5": "is_full",
                    "3": "exceeded_threshold",
                    "4": "exceeded_limit",
                    "11": "is_overflow"
                },
                "uVar2": {
                    "3": "value",
                    "1": "data_element",
                    "2": "byte_value",
                    "12": "result"
                },
                "iVar3": {
                    "1": "return_val",
                    "14": "return_value",
                    "2": "status",
                    "12": "result"
                },
                "bVar4": {
                    "1": "char_index",
                    "6": "count",
                    "10": "counter",
                    "2": "byte_index",
                    "4": "current_index"
                },
                "FUN_080041bc": {
                    "2": "perform_action",
                    "1": "process_data_block",
                    "6": "process_data"
                },
                "param_2": {
                    "1": "param_2",
                    "3": "param_1",
                    "5": "param1"
                },
                "param_3": {
                    "5": "param2",
                    "1": "param_val_2",
                    "3": "param_2"
                },
                "param_4": {
                    "1": "buffer",
                    "4": "param3",
                    "2": "param_3"
                }
            }
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculate_checksum_08000728(int data_address,int data_length)\n\n{\n  byte bit_counter;\n  uint checksum;\n  uint bit;\n  uint i;\n  \n  checksum = 0xffff;\n  for (i = 0; (int)i < data_length; i = i + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_address + i + 9);\n    for (bit_counter = 1; bit_counter < 9; bit_counter = bit_counter + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "i",
                "bVar1": "bit_counter"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000728": {
                    "22": "calculate_checksum",
                    "7": "calculate_crc",
                    "2": "calculate_crc16"
                },
                "param_1": {
                    "1": "data",
                    "4": "data_start_address",
                    "6": "data_start",
                    "2": "data_ptr",
                    "17": "data_address"
                },
                "param_2": {
                    "28": "data_length",
                    "1": "length"
                },
                "uVar2": {
                    "2": "crc_value",
                    "1": "check_value",
                    "21": "checksum",
                    "7": "crc"
                },
                "uVar3": {
                    "1": "msb_bit",
                    "4": "bit_value",
                    "22": "bit",
                    "2": "lsb"
                },
                "uVar4": {
                    "1": "iterator",
                    "15": "i",
                    "14": "index"
                },
                "bVar1": {
                    "8": "bit_counter",
                    "1": "bit",
                    "2": "bit_position",
                    "7": "bit_index",
                    "4": "j",
                    "3": "bit_count"
                },
                "0xffff": {
                    "1": "crc_init"
                },
                "*(byte *)(param_1 + uVar4 + 9)": {
                    "1": "byte_at_index"
                },
                "0xa001": {
                    "1": "crc_polynomial"
                }
            }
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_data_0800076c",
            "code": "\nvoid update_data_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int status;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  result = FUN_08000728(data,index,param3,param4,param4);\n  *(char *)((int)data + index + 9) = (char)((ushort)result >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)result;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      status = (**(code **)(**data + 0xc))();\n    } while (-1 < status);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  status = FUN_08004204();\n  data[0x17] = (int *)(status + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_data_0800076c",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "status",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004204",
                "FUN_08000728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800076c": {
                    "1": "update_data_and_call_subfunctions",
                    "2": "update_character",
                    "4": "process_data",
                    "3": "update_parameter",
                    "7": "update_data"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "data",
                    "3": "param_array",
                    "2": "param_list",
                    "4": "data_pointer"
                },
                "param_2": {
                    "12": "param2",
                    "1": "update1",
                    "2": "param_2",
                    "3": "param1"
                },
                "param_3": {
                    "3": "value2",
                    "1": "val2",
                    "12": "param3",
                    "2": "arg2"
                },
                "param_4": {
                    "1": "yet_another_param",
                    "12": "param4",
                    "3": "value3",
                    "2": "arg3"
                },
                "uVar1": {
                    "4": "result1",
                    "25": "result",
                    "2": "return_value"
                },
                "iVar2": {
                    "4": "result2",
                    "1": "tmp_value",
                    "2": "temp_var",
                    "6": "status",
                    "5": "index"
                },
                "uVar3": {
                    "1": "byte_val",
                    "2": "offset",
                    "15": "index",
                    "8": "byte_value"
                },
                "FUN_08000728": {
                    "2": "calculate_result",
                    "1": "get_data",
                    "7": "get_updated_value"
                },
                "FUN_080041bc": {
                    "6": "perform_action",
                    "1": "check_and_update"
                },
                "FUN_08004204": {
                    "5": "calculate_value",
                    "1": "get_info",
                    "2": "get_offset"
                },
                "*param_1": {
                    "1": "data_pointer"
                }
            }
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_conditions_080007f0",
            "code": "\nundefined4 check_conditions_080007f0(int input,undefined4 value,uint value,undefined4 param)\n\n{\n  bool is_match;\n  byte result;\n  char result1;\n  char result2;\n  int result1;\n  uint counter;\n  int result2;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n        return 1;\n      }\n      result2 = *(byte *)(input + 10) - 1;\n      switch(*(byte *)(input + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto case_1_result;\n      case 3:\n      case 4:\n      case 0x10:\n        result1 = FUN_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             result2,param);\n        result2 = FUN_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n        if (*(byte *)(input + 0x60) < (byte)(result2 + result1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        result2 = FUN_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             result2,param);\n        if ((uint)*(byte *)(input + 0x60) < (uint)(result2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = FUN_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,\n                             result2,param);\n        if (*(byte *)(input + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(input + 10);\n    if ((byte)(&DAT_08005a10)[counter] == value) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\ncase_1_result:\n  result2 = FUN_08004640(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,result2,\n                       param);\n  result1 = FUN_08004640(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n  if ((uint)*(byte *)(input + 0x60) <\n      (((uint)(result2 << 0xc) >> 0x10) + ((uint)(result1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_conditions_080007f0",
                "param_1": "input",
                "param_2": "value",
                "param_3": "value",
                "param_4": "param",
                "bVar1": "is_match",
                "bVar2": "result",
                "cVar3": "result1",
                "cVar4": "result2",
                "iVar5": "result1",
                "uVar6": "counter",
                "iVar7": "result2",
                "switchD_08000816_caseD_1": "case_1_result"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080007f0": {
                    "1": "check_and_update_counter",
                    "3": "check_and_update_value",
                    "2": "check_condition_and_return",
                    "9": "check_conditions",
                    "5": "check_condition"
                },
                "param_1": {
                    "7": "input",
                    "2": "input_ptr",
                    "1": "function_parameter",
                    "3": "input_data",
                    "5": "input_param"
                },
                "param_2": {
                    "4": "flag",
                    "3": "param_2",
                    "1": "arg2",
                    "8": "value"
                },
                "param_3": {
                    "3": "param_3",
                    "1": "param",
                    "6": "value",
                    "2": "limit",
                    "4": "length"
                },
                "param_4": {
                    "2": "config",
                    "1": "value_2",
                    "3": "param4",
                    "4": "param"
                },
                "bVar1": {
                    "2": "is_condition_met",
                    "1": "is_condition_matched",
                    "3": "found_match",
                    "5": "condition_met",
                    "6": "is_match",
                    "4": "is_matching"
                },
                "bVar2": {
                    "1": "result_byte",
                    "2": "byte_result",
                    "24": "result"
                },
                "cVar3": {
                    "1": "char_result1",
                    "3": "char1",
                    "11": "result1",
                    "5": "result_1"
                },
                "cVar4": {
                    "1": "value2",
                    "11": "result2",
                    "3": "char2",
                    "5": "result_2"
                },
                "iVar5": {
                    "2": "first_value",
                    "1": "int_value_1",
                    "5": "result_3",
                    "6": "result1",
                    "4": "value1"
                },
                "uVar6": {
                    "2": "loop_counter",
                    "1": "loop_index",
                    "3": "i",
                    "13": "counter",
                    "10": "index"
                },
                "iVar7": {
                    "1": "result_2",
                    "2": "value1",
                    "3": "value",
                    "4": "result2"
                },
                "switchD_08000816_caseD_1": {
                    "1": "case1"
                },
                "FUN_08004640": {
                    "2": "calculate_value",
                    "1": "compute_value"
                },
                "byte_switch_case_value": {
                    "1": "byte_switch_case_value"
                }
            }
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copy_and_modify_data_080008cc(int data_address,undefined new_value)\n\n{\n  *(undefined *)(data_address + 9) = *(undefined *)(data_address + 4);\n  *(data_byte *)(data_address + 10) = *(data_byte *)(data_address + 10) ^ 0x80;\n  *(undefined *)(data_address + 0xb) = new_value;\n  *(undefined *)(data_address + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "data_address",
                "param_2": "new_value",
                "byte": "data_byte"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080008cc": {
                    "1": "copy_and_toggle_byte",
                    "5": "copy_data",
                    "2": "copy_data_and_toggle_bit",
                    "15": "copy_and_modify_data",
                    "3": "copy_data_and_toggle_flag"
                },
                "param_1": {
                    "2": "destination",
                    "4": "data_ptr",
                    "6": "data_pointer",
                    "5": "source_address",
                    "1": "src_offset",
                    "9": "data_address"
                },
                "param_2": {
                    "1": "data_value",
                    "14": "new_value",
                    "3": "value",
                    "2": "data_to_copy",
                    "4": "new_data"
                },
                "*(undefined *)(param_1 + 9)": {
                    "2": "destination",
                    "1": "new_data"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data_ptr[4]",
                    "2": "source_data"
                },
                "*(byte *)(param_1 + 10)": {
                    "3": "flag_byte",
                    "1": "destination_byte_2"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "new_data"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "2": "flag",
                    "1": "data_at_offset49",
                    "3": "status",
                    "4": "constant_value"
                },
                "param_1 + 4": {
                    "1": "data_source"
                },
                "param_1 + 9": {
                    "1": "destination_address"
                },
                "param_1 + 10": {
                    "1": "bit_address"
                },
                "param_1 + 0xb": {
                    "1": "new_value",
                    "2": "new_value_address"
                },
                "param_1 + 0x49": {
                    "1": "constant",
                    "2": "constant_value"
                },
                "0x80": {
                    "2": "mask",
                    "1": "toggle_mask"
                },
                "* (param_1 + 9)": {
                    "1": "destination"
                },
                "* (param_1 + 4)": {
                    "1": "source"
                },
                "* (param_1 + 10)": {
                    "1": "byte_value"
                },
                "* (param_1 + 0xb)": {
                    "1": "new_byte"
                },
                "* (param_1 + 0x49)": {
                    "1": "constant_value"
                },
                "byte": {
                    "1": "data_byte"
                },
                "0x49": {
                    "1": "flag_address",
                    "2": "constant_value"
                },
                "param_1+4": {
                    "1": "source_pointer"
                },
                "param_1+9": {
                    "1": "destination_pointer"
                },
                "param_1+10": {
                    "1": "bit_pointer"
                },
                "param_1+0xb": {
                    "1": "value_pointer"
                },
                "param_1+0x49": {
                    "1": "constant_value"
                },
                "1": {
                    "1": "offset1"
                },
                "0": {
                    "1": "offset2"
                },
                "9": {
                    "2": "destination_offset"
                },
                "4": {
                    "2": "source_offset"
                },
                "10": {
                    "1": "bitwise_xor_offset"
                },
                "0xb": {
                    "2": "new_value_offset"
                },
                "byte_1": {
                    "1": "byte_value"
                },
                "3": {
                    "1": "flag_value"
                }
            }
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint process_data_080008e2(int data_pointer,int data,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  uint result2;\n  uint counter;\n  uint bit_counter;\n  char bit_value;\n  int temp_var;\n  \n  result1 = FUN_08004640(*(undefined *)(data_pointer + 0xb),*(undefined *)(data_pointer + 0xc),param3,param4,\n                       param4);\n  result2 = FUN_08004640(*(undefined *)(data_pointer + 0xd),*(undefined *)(data_pointer + 0xe));\n  bit_value = (char)((result2 << 0x15) >> 0x18);\n  if ((result2 & 7) != 0) {\n    bit_value = bit_value + '\\x01';\n  }\n  *(char *)(data_pointer + 0xb) = bit_value;\n  *(undefined *)(data_pointer + 0x49) = 3;\n  bit_counter = 0;\n  for (counter = 0; (int)counter < (int)result2; counter = counter + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(data + ((counter + result1) * 0x100000 >> 0x18) * 2) >>\n         (counter + result1 & 0xf) & 1U) == 0) {\n      temp_var = (uint)*(byte *)(data_pointer + 0x49) + data_pointer;\n      *(byte *)(temp_var + 9) = *(byte *)(temp_var + 9) & ~(byte)(1 << bit_counter);\n    }\n    else {\n      temp_var = (uint)*(byte *)(data_pointer + 0x49) + data_pointer;\n      *(byte *)(temp_var + 9) = *(byte *)(temp_var + 9) | (byte)(1 << bit_counter);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      *(char *)(data_pointer + 0x49) = *(char *)(data_pointer + 0x49) + '\\x01';\n      bit_counter = 0;\n    }\n  }\n  if ((result2 & 7) != 0) {\n    *(char *)(data_pointer + 0x49) = *(char *)(data_pointer + 0x49) + '\\x01';\n  }\n  bit_value = *(char *)(data_pointer + 0x49);\n  FUN_0800076c(data_pointer);\n  return (int)(char)(bit_value + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "data_pointer",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "counter",
                "uVar4": "bit_counter",
                "cVar5": "bit_value",
                "iVar6": "temp_var"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080008e2": {
                    "1": "calculate_check_sum",
                    "2": "update_data",
                    "13": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "data_pointer",
                    "2": "input_array",
                    "3": "input_data"
                },
                "param_2": {
                    "4": "data",
                    "2": "array_pointer",
                    "1": "input_pointer",
                    "3": "input2"
                },
                "param_3": {
                    "1": "config_param",
                    "15": "param3",
                    "2": "arg1",
                    "4": "param_3"
                },
                "param_4": {
                    "1": "val2",
                    "4": "param_4",
                    "15": "param4",
                    "2": "arg2"
                },
                "iVar1": {
                    "1": "result_1",
                    "19": "result1",
                    "6": "result"
                },
                "uVar2": {
                    "1": "decode_length",
                    "19": "result2",
                    "2": "length"
                },
                "uVar3": {
                    "6": "index",
                    "1": "iter_count",
                    "3": "u_var3",
                    "11": "counter",
                    "2": "loop_index"
                },
                "uVar4": {
                    "16": "bit_counter",
                    "2": "flag_index",
                    "1": "u_var4",
                    "9": "bit_index"
                },
                "cVar5": {
                    "1": "shifted_checksum",
                    "5": "char_value",
                    "4": "temp_char",
                    "6": "bit_value",
                    "2": "shifted_char"
                },
                "iVar6": {
                    "1": "data_offset",
                    "2": "temp",
                    "9": "temp_var",
                    "3": "index",
                    "4": "offset"
                },
                "FUN_08004640": {
                    "1": "get_info"
                },
                "FUN_0800076c": {
                    "4": "cleanup",
                    "3": "cleanup_data",
                    "1": "update_data",
                    "2": "cleanup_function"
                }
            }
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_ptr,int input_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byte_value;\n  char temp_char;\n  byte result1;\n  byte result2;\n  uint index;\n  uint temp_counter;\n  \n  result1 = FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,\n                       param_4);\n  result2 = FUN_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = result2 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (index = (uint)result1; index < (uint)result1 + (uint)result2; index = index + 1 & 0xff) {\n    byte_value = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte_value + 9) = (char)((ushort)*(undefined2 *)(input_ptr + index * 2) >> 8)\n    ;\n    temp_counter = byte_value + 1 & 0xff;\n    temp_char = (char)temp_counter;\n    *(char *)(data_ptr + 0x49) = temp_char;\n    *(undefined *)(data_ptr + temp_counter + 9) = *(undefined *)(input_ptr + index * 2);\n    *(char *)(data_ptr + 0x49) = temp_char + '\\x01';\n  }\n  temp_char = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(temp_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "bVar1": "byte_value",
                "cVar2": "temp_char",
                "bVar3": "result1",
                "bVar4": "result2",
                "uVar5": "index",
                "uVar6": "temp_counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000998": {
                    "1": "extract_and_process_data",
                    "8": "process_data",
                    "2": "reverse_and_update_values"
                },
                "param_1": {
                    "1": "data_address",
                    "3": "data",
                    "2": "input_ptr",
                    "10": "data_ptr",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "input_pointer",
                    "4": "data_array",
                    "7": "input_ptr",
                    "2": "input_data"
                },
                "param_3": {
                    "1": "arg1",
                    "7": "param3",
                    "2": "param1",
                    "19": "param_3"
                },
                "param_4": {
                    "1": "arg2",
                    "2": "param2",
                    "7": "param4",
                    "19": "param_4"
                },
                "bVar1": {
                    "4": "temp_byte1",
                    "1": "index",
                    "5": "temp_byte",
                    "2": "byte_val",
                    "3": "temp_byte_1",
                    "7": "byte_value"
                },
                "cVar2": {
                    "9": "char_value",
                    "12": "temp_char",
                    "2": "next_index",
                    "1": "char_var_2"
                },
                "bVar3": {
                    "1": "byte_var3",
                    "2": "byte_val_1",
                    "11": "result1",
                    "8": "result_1"
                },
                "bVar4": {
                    "1": "byte_value_2",
                    "11": "result2",
                    "2": "byte_val_2",
                    "8": "result_2"
                },
                "uVar5": {
                    "4": "index_1",
                    "2": "counter_1",
                    "1": "current_index",
                    "3": "loop_index",
                    "6": "index"
                },
                "uVar6": {
                    "2": "temp_index",
                    "1": "updated_counter",
                    "4": "index_2",
                    "3": "new_index"
                },
                "FUN_08004640": {
                    "1": "process_data"
                },
                "FUN_0800076c": {
                    "1": "perform_cleanup"
                }
            }
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_memory_08000a00",
            "code": "\nundefined4 update_memory_08000a00(int address,int memory,undefined4 param3,undefined4 param4)\n\n{\n  uint result;\n  uint shifted_result;\n  \n  result = FUN_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),param3,param4,\n                       param4);\n  shifted_result = (result << 0x14) >> 0x18;\n  if (*(char *)(address + 0xd) == -1) {\n    *(ushort *)(memory + shifted_result * 2) =\n         (ushort)(1 << (result & 0xf)) | *(ushort *)(memory + shifted_result * 2);\n  }\n  else {\n    *(ushort *)(memory + shifted_result * 2) =\n         *(ushort *)(memory + shifted_result * 2) & ~(ushort)(1 << (result & 0xf));\n  }\n  *(undefined *)(address + 0x49) = 6;\n  FUN_0800076c(address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_memory_08000a00",
                "param_1": "address",
                "param_2": "memory",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a00": {
                    "2": "update_memory_value",
                    "5": "update_bit",
                    "1": "set_bit_in_array",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "array_index",
                    "4": "address",
                    "3": "memory_address"
                },
                "param_2": {
                    "1": "array_index",
                    "2": "memory_address",
                    "3": "memory"
                },
                "param_3": {
                    "16": "param3",
                    "1": "param",
                    "2": "param_a",
                    "3": "param1"
                },
                "param_4": {
                    "1": "flag2",
                    "3": "param2",
                    "16": "param4",
                    "2": "value2"
                },
                "uVar1": {
                    "1": "bit_shifted_value",
                    "10": "result1",
                    "16": "result"
                },
                "uVar2": {
                    "4": "shifted_index",
                    "2": "bit_shifted_result",
                    "1": "shifted_result1",
                    "3": "index",
                    "12": "shifted_result"
                },
                "FUN_08004640": {
                    "3": "calculate_value",
                    "1": "calculate_result",
                    "2": "calculate_index"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "byte_value_1"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "value2"
                },
                "*(char *)(param_1 + 0xd)": {
                    "3": "flag",
                    "1": "check_value"
                },
                "*(ushort *)(param_2 + uVar2 * 2)": {
                    "1": "destination_value",
                    "2": "output_value"
                },
                "FUN_0800076c": {
                    "1": "notify_change",
                    "2": "update_parameter"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "2": "status",
                    "1": "updated_value"
                },
                "*(ushort *)(param_2 + uVar2 * 2) & ~(ushort)(1 << (uVar1 & 0xf))": {
                    "1": "output_value_with_bit_cleared"
                },
                "*(ushort *)(param_2 + uVar2 * 2) | (ushort)(1 << (uVar1 & 0xf))": {
                    "1": "set_bit_value"
                },
                "PTR__08004640": {
                    "1": "calculation_pointer"
                },
                "param_1_1": {
                    "1": "value_a"
                },
                "param_2_1": {
                    "1": "value_b"
                }
            }
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_data_08000a4e",
            "code": "\nundefined4 update_data_08000a4e(int data_ptr,int result_ptr)\n\n{\n  byte result;\n  undefined2 result2;\n  \n  result = FUN_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc));\n  result2 = FUN_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(undefined2 *)(result_ptr + (uint)result * 2) = result2;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  FUN_0800076c(data_ptr);\n  return 8;\n}\n\n",
            "renaming": {
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "result",
                "uVar2": "result2",
                "FUN_08000a4e": "update_data_08000a4e"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_pointer",
                    "4": "data_ptr",
                    "2": "input",
                    "3": "input1"
                },
                "param_2": {
                    "1": "result",
                    "2": "result_pointer",
                    "3": "output",
                    "4": "result_ptr"
                },
                "bVar1": {
                    "5": "byte_result",
                    "1": "result_byte",
                    "8": "result",
                    "2": "index"
                },
                "uVar2": {
                    "1": "result_word",
                    "8": "result2",
                    "5": "value",
                    "3": "ushort_result",
                    "2": "second_result"
                },
                "FUN_08000a4e": {
                    "1": "update_array_and_set_flag",
                    "3": "update_values",
                    "7": "update_data"
                },
                "FUN_08004640": {
                    "1": "read_memory",
                    "2": "get_value"
                },
                "param_1 + 0xb": {
                    "1": "input_addr1"
                },
                "param_1 + 0xc": {
                    "1": "input_addr2"
                },
                "param_1 + 0xd": {
                    "1": "input_addr3"
                },
                "param_1 + 0xe": {
                    "1": "input_byte4"
                },
                "param_2 + (uint)bVar1 * 2": {
                    "1": "output_offset"
                },
                "param_1 + 0x49": {
                    "2": "status",
                    "1": "status_addr"
                },
                "FUN_0800076c": {
                    "1": "update_status"
                }
            }
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "process_data_08000a7a",
            "code": "\nundefined4 process_data_08000a7a(int input_array,int output_array,undefined4 param3,undefined4 param4)\n\n{\n  int result1;\n  int result2;\n  uint counter;\n  uint bit_counter;\n  uint bit_position;\n  uint byte_index;\n  uint offset;\n  \n  result1 = FUN_08004640(*(undefined *)(input_array + 0xb),*(undefined *)(input_array + 0xc),param3,param4,\n                       param4);\n  result2 = FUN_08004640(*(undefined *)(input_array + 0xd),*(undefined *)(input_array + 0xe));\n  bit_counter = 0;\n  offset = 7;\n  for (counter = 0; (int)counter < result2; counter = counter + 1 & 0xffff) {\n    byte_index = (counter + result1) * 0x100000 >> 0x18;\n    bit_position = counter + result1 & 0xf;\n    if (((int)(uint)*(byte *)(input_array + offset + 9) >> bit_counter & 1U) == 0) {\n      *(ushort *)(output_array + byte_index * 2) = *(ushort *)(output_array + byte_index * 2) & ~(ushort)(1 << bit_position);\n    }\n    else {\n      *(ushort *)(output_array + byte_index * 2) = (ushort)(1 << bit_position) | *(ushort *)(output_array + byte_index * 2);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      offset = offset + 1 & 0xff;\n      bit_counter = 0;\n    }\n  }\n  *(undefined *)(input_array + 0x49) = 6;\n  FUN_0800076c(input_array);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "process_data_08000a7a",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "counter",
                "uVar4": "bit_counter",
                "uVar5": "bit_position",
                "uVar6": "byte_index",
                "uVar7": "offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a7a": {
                    "1": "reorder_bits_and_set",
                    "2": "update_memory_bits",
                    "7": "process_data",
                    "4": "update_bits",
                    "3": "reverse_and_update_bits"
                },
                "param_1": {
                    "1": "input_address",
                    "3": "data",
                    "2": "data_pointer",
                    "7": "input_array",
                    "6": "input_data"
                },
                "param_2": {
                    "8": "output_array",
                    "2": "arg2",
                    "1": "result_array_ptr",
                    "6": "output_data"
                },
                "param_3": {
                    "1": "param",
                    "14": "param3",
                    "4": "param1",
                    "7": "param_3",
                    "2": "arg3"
                },
                "param_4": {
                    "5": "param2",
                    "14": "param4",
                    "1": "unused_param",
                    "7": "param_4",
                    "2": "arg4"
                },
                "iVar1": {
                    "1": "compressed_data_length",
                    "24": "result1",
                    "2": "result_1"
                },
                "iVar2": {
                    "1": "var2",
                    "24": "result2",
                    "2": "result_2"
                },
                "uVar3": {
                    "4": "loop_counter",
                    "1": "loop_iteration",
                    "2": "count",
                    "12": "counter",
                    "6": "index"
                },
                "uVar4": {
                    "14": "bit_counter",
                    "1": "count2",
                    "4": "bit_position",
                    "5": "bit_index",
                    "2": "bit_count",
                    "3": "shift"
                },
                "uVar5": {
                    "4": "bit_offset",
                    "1": "temp_var1",
                    "12": "bit_position",
                    "3": "bit_index",
                    "2": "shifted_bit"
                },
                "uVar6": {
                    "1": "memory_offset",
                    "2": "byte_position",
                    "13": "byte_index",
                    "3": "offset",
                    "4": "array_index"
                },
                "uVar7": {
                    "1": "array_index",
                    "4": "byte_index",
                    "2": "byte_position",
                    "5": "offset"
                },
                "<byte>(dataPtr + 0xb)": {
                    "1": "byte1"
                },
                "<byte>(dataPtr + 0xc)": {
                    "1": "byte2"
                },
                "<byte>(dataPtr + 0xd)": {
                    "1": "byte3"
                },
                "<byte>(dataPtr + 0xe)": {
                    "1": "byte4"
                },
                "FUN_08004640": {
                    "1": "perform_operation"
                },
                "FUN_0800076c": {
                    "1": "update_flag"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "value1"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "value2"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "value3"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "value4"
                },
                "*(byte *)(param_1 + uVar7 + 9)": {
                    "1": "bit_mask"
                },
                "*(ushort *)(param_2 + uVar6 * 2)": {
                    "1": "current_value"
                },
                "*(ushort *)(param_2 + uVar6 * 2) & ~(ushort)(1 << uVar5)": {
                    "1": "reset_bit"
                },
                "(ushort)(1 << uVar5) | *(ushort *)(param_2 + uVar6 * 2)": {
                    "1": "set_bit"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "flag"
                },
                "6": {
                    "1": "new_flag_value"
                },
                "8": {
                    "1": "return_value"
                },
                "FUNK_08004640": {
                    "1": "get_var1"
                }
            }
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "process_data_08000b04",
            "code": "\nint process_data_08000b04(int data_ptr,int result_ptr)\n\n{\n  byte byte1;\n  byte byte2;\n  char result;\n  undefined2 result;\n  uint index;\n  \n  byte1 = *(byte *)(data_ptr + 0xc);\n  byte2 = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = byte2;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (index = 0; index < byte2; index = index + 1 & 0xff) {\n    result = FUN_08004640(*(undefined *)(index * 2 + data_ptr + 0x10),\n                         *(undefined *)(data_ptr + (index + 4) * 2 + 9));\n    *(undefined2 *)(result_ptr + (byte1 + index) * 2) = result;\n  }\n  result = *(char *)(data_ptr + 0x49);\n  FUN_0800076c(data_ptr);\n  return (int)(char)(result + '\\x02');\n}\n\n",
            "renaming": {
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "result",
                "uVar4": "result",
                "uVar5": "index",
                "FUN_08000b04": "process_data_08000b04"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "3": "data",
                    "1": "byte_sequence",
                    "2": "data_offset",
                    "6": "data_ptr"
                },
                "param_2": {
                    "1": "result",
                    "2": "output_array",
                    "4": "result_ptr"
                },
                "bVar1": {
                    "2": "byte_count",
                    "7": "byte1",
                    "1": "first_byte_value",
                    "3": "first_byte"
                },
                "bVar2": {
                    "1": "value_2",
                    "7": "byte2",
                    "3": "second_byte"
                },
                "cVar3": {
                    "3": "char_value",
                    "2": "updated_value",
                    "1": "resulting_char",
                    "5": "char1",
                    "9": "result"
                },
                "uVar4": {
                    "1": "processed_value",
                    "2": "return_val",
                    "4": "temp_value",
                    "8": "result"
                },
                "uVar5": {
                    "5": "loop_counter",
                    "4": "i",
                    "8": "counter",
                    "1": "loop_index",
                    "13": "index"
                },
                "FUN_08000b04": {
                    "2": "reverse_and_copy_bytes",
                    "1": "reverse_and_copy_data",
                    "3": "decode_and_copy_data",
                    "12": "process_data"
                },
                "FUN_08004640": {
                    "1": "calculate_result",
                    "2": "convert_data"
                },
                "FUN_0800076c": {
                    "2": "cleanup",
                    "1": "cleanup_data"
                },
                "source_value": {
                    "1": "source_value"
                },
                "destination_value": {
                    "1": "destination_value"
                }
            }
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_data_08000b54",
            "code": "\nint process_data_08000b54(int **data,int *input,undefined4 value)\n\n{\n  byte result;\n  int result;\n  uint result;\n  int return_value;\n  \n  data[0x13] = input;\n  *(char *)(data + 0x18) = (char)value;\n  if (*(byte *)((int)data + 5) < 4) {\n    result = (**(code **)(**data + 8))();\n    result = (uint)result;\n  }\n  if (result == 0) {\n    return_value = 0;\n  }\n  else if ((int)result < 8) {\n    return_value = 0;\n  }\n  else {\n    return_value = FUN_080006b4(data);\n    *(char *)(data + 2) = (char)return_value;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      result = FUN_080007f0(data);\n      if (result < 1) {\n        result = FUN_08004204();\n        data[0x17] = (int *)((uint)*(ushort *)((int)data + 0x56) + result);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          return_value = FUN_080008e2(data,input,value);\n          break;\n        case 3:\n        case 4:\n          return_value = FUN_08000998(data,input,value);\n          break;\n        case 5:\n          return_value = FUN_08000a00(data,input,value);\n          break;\n        case 6:\n          return_value = FUN_08000a4e(data,input,value);\n          break;\n        case 0xf:\n          return_value = FUN_08000a7a(data,input,value);\n          break;\n        case 0x10:\n          return_value = FUN_08000b04(data,input,value);\n        }\n      }\n      else {\n        if (result != 0xff) {\n          FUN_080008cc(data,result);\n          FUN_0800076c(data);\n        }\n        *(char *)(data + 2) = (char)result;\n        return_value = (int)(char)result;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "input",
                "param_3": "value",
                "bVar1": "result",
                "iVar2": "result",
                "unaff_r5": "result",
                "iVar3": "return_value"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a4e",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_080008cc",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08004204",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000b54": {
                    "18": "process_data",
                    "3": "extract_data",
                    "1": "execute_operation",
                    "2": "process_function"
                },
                "param_1": {
                    "12": "data",
                    "1": "input_data",
                    "3": "data_struct",
                    "2": "parameters"
                },
                "param_2": {
                    "8": "input",
                    "3": "value",
                    "1": "array_ptr",
                    "2": "input_data",
                    "7": "input_array"
                },
                "param_3": {
                    "7": "flag",
                    "2": "param_value",
                    "4": "input_value",
                    "1": "parameter_value",
                    "12": "value"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "temp_byte",
                    "4": "result_byte",
                    "13": "result",
                    "9": "byte_value"
                },
                "iVar2": {
                    "2": "temp_var",
                    "1": "result_int",
                    "3": "sub_result",
                    "8": "result"
                },
                "unaff_r5": {
                    "2": "value",
                    "1": "unsigned_int_var",
                    "3": "condition",
                    "5": "result"
                },
                "iVar3": {
                    "19": "return_value",
                    "1": "processed_value",
                    "3": "result",
                    "2": "output"
                },
                "<original_function_name>": {
                    "1": "process_input"
                },
                "<function_name_1>": {
                    "1": "process_case_1"
                },
                "<function_name_2>": {
                    "1": "process_case_2"
                },
                "<function_name_n>": {
                    "1": "<new_function_name_n>"
                }
            }
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_data_08000c4c",
            "code": "\nvoid initialize_data_08000c4c(void)\n\n{\n  FUN_080005e4(0);\n  FUN_08000600(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_data_08000c4c"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c4c": {
                    "3": "initialize_memory",
                    "5": "initialize_system",
                    "1": "initialize_components",
                    "2": "initialize_program",
                    "9": "initialize_data"
                },
                "param_1": {
                    "2": "data",
                    "1": "buffer",
                    "3": "data_ptr"
                },
                "param_2": {
                    "1": "memory_size",
                    "2": "data_size",
                    "5": "size"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                },
                "FUN_08000600": {
                    "2": "initialize_array",
                    "1": "update_data",
                    "4": "load_data",
                    "3": "initialize_memory",
                    "12": "allocate_memory"
                },
                "FUN_080005e4": {
                    "2": "execute_function",
                    "1": "set_buffer",
                    "3": "process_data",
                    "5": "initialize_memory"
                },
                "DAT_20000124": {
                    "1": "data_array"
                }
            }
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "initialize_data_08000c64",
            "code": "\nvoid initialize_data_08000c64(void)\n\n{\n  undefined4 input_value;\n  \n  FUN_08000b54(&DAT_20000124,&DAT_20000004,0x10,input_value,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "initialize_data_08000c64",
                "in_r3": "input_value"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c64": {
                    "1": "execute_extraction",
                    "2": "execute_data_processing",
                    "19": "initialize_data"
                },
                "param_1": {
                    "1": "source_pointer",
                    "6": "source_array",
                    "2": "source"
                },
                "param_2": {
                    "2": "destination",
                    "1": "value_ptr",
                    "5": "destination_array",
                    "6": "destination_data"
                },
                "param_3": {
                    "1": "parameter",
                    "6": "data_size",
                    "14": "size"
                },
                "in_r3": {
                    "1": "arg",
                    "5": "param",
                    "2": "register_value",
                    "4": "unused_parameter"
                },
                "FUN_08000b54": {
                    "1": "perform_sub_process",
                    "2": "process_data",
                    "14": "copy_data"
                }
            }
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint result;\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 count1;\n  undefined4 value2;\n  undefined4 count2;\n  undefined4 value3;\n  undefined4 count3;\n  undefined4 value4;\n  undefined4 value4;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value5;\n  undefined4 value6;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  value1 = 0x50000;\n  count1 = 2;\n  value2 = 0x400000;\n  count2 = 8;\n  value3 = 0x150;\n  count3 = 2;\n  value4 = 7;\n  FUN_0800201c(&flag);\n  FUN_08001f9c();\n  value4 = 0xf;\n  value2 = 2;\n  value3 = 0;\n  value5 = 0x1400;\n  value6 = 0x1000;\n  FUN_08002488(&value4,5);\n  result = FUN_080025e0();\n  FUN_08000ee0(result / 1000);\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "flag",
                "local_50": "value1",
                "local_3c": "count1",
                "local_38": "value2",
                "local_34": "count2",
                "local_30": "value3",
                "local_2c": "count3",
                "local_28": "value4",
                "local_24": "value4",
                "local_20": "value2",
                "local_1c": "value3",
                "local_18": "value5",
                "local_14": "value6",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_080025e0",
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c8c": {
                    "2": "initialize_device",
                    "1": "configure_peripheral",
                    "23": "initialize_system"
                },
                "local_54": {
                    "23": "flag",
                    "1": "is_flag_enabled",
                    "2": "is_flag_set"
                },
                "local_50": {
                    "2": "value",
                    "1": "data_offset",
                    "14": "value1",
                    "3": "memory_address"
                },
                "local_3c": {
                    "1": "num_attempts",
                    "2": "flag2",
                    "3": "counter",
                    "7": "count1"
                },
                "local_38": {
                    "2": "address",
                    "1": "constant2",
                    "13": "value2"
                },
                "local_34": {
                    "1": "step_size",
                    "5": "count2",
                    "3": "size"
                },
                "local_30": {
                    "1": "constant3",
                    "8": "value3",
                    "2": "limit"
                },
                "local_2c": {
                    "1": "constant6",
                    "3": "counter3",
                    "5": "count3"
                },
                "local_28": {
                    "1": "limit",
                    "3": "count4",
                    "2": "retry_count",
                    "4": "value4"
                },
                "local_24": {
                    "1": "param7",
                    "3": "mask",
                    "2": "count4",
                    "4": "value1"
                },
                "local_20": {
                    "1": "param8",
                    "3": "value5",
                    "5": "value2",
                    "2": "count5"
                },
                "local_1c": {
                    "2": "count6",
                    "1": "count7",
                    "4": "value3"
                },
                "local_18": {
                    "1": "variable2",
                    "5": "value5",
                    "3": "value6",
                    "2": "size1"
                },
                "local_14": {
                    "1": "page_count",
                    "3": "value7",
                    "2": "size2",
                    "5": "value6"
                },
                "FUN_0800201c": {
                    "1": "function1",
                    "3": "update_flag"
                },
                "FUN_08001f9c": {
                    "1": "initialize_memory",
                    "2": "perform_operation",
                    "3": "perform_initialization"
                },
                "FUN_08002488": {
                    "1": "execute_operation",
                    "8": "process_data"
                },
                "FUN_080025e0": {
                    "4": "calculate_value",
                    "1": "get_input",
                    "2": "get_value",
                    "3": "retrieve_value"
                },
                "FUN_08000ee0": {
                    "1": "convert_value",
                    "7": "convert_to_seconds",
                    "2": "calculate_result",
                    "4": "convert_to_milliseconds"
                },
                "FUN_08000f2c": {
                    "1": "perform_operation",
                    "4": "set_mode",
                    "2": "execute_action"
                },
                "FUN_08000e60": {
                    "1": "perform_operation",
                    "2": "execute_operation",
                    "7": "reset_system"
                },
                "uVar1": {
                    "4": "result"
                },
                "param_1": {
                    "1": "time"
                },
                "param_2": {
                    "1": "configuration"
                },
                "param_3": {
                    "1": "param3"
                }
            }
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_080035bc();\n  FUN_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  FUN_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  FUN_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000d8e": {
                    "4": "initialize_application",
                    "1": "execute_setup",
                    "5": "execute_initialization",
                    "11": "initialize_system",
                    "2": "initialize_program"
                },
                "FUN_080034ce": {
                    "1": "execute_sub_function",
                    "2": "perform_operation",
                    "6": "execute_initialization",
                    "7": "perform_initialization"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_data_08000d98",
            "code": "\nundefined4 initialize_data_08000d98(uint input_value)\n\n{\n  int result;\n  \n  result = FUN_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < input_value) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff,input_value,0);\n  DAT_20000028 = input_value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_data_08000d98",
                "param_1": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000d98": {
                    "1": "check_and_set_parameter_value",
                    "3": "process_input",
                    "2": "initialize_process",
                    "9": "initialize_data",
                    "5": "check_and_set_param"
                },
                "param_1": {
                    "2": "input",
                    "1": "process_id",
                    "14": "input_value",
                    "3": "value",
                    "8": "input_param"
                },
                "iVar1": {
                    "30": "result",
                    "1": "error_flag"
                },
                "FUN_08000ee0": {
                    "11": "calculate_value",
                    "2": "calculate_time",
                    "4": "calculate_division",
                    "1": "compute_ratio",
                    "7": "calculate_ratio"
                },
                "DAT_2000002c": {
                    "2": "variable1",
                    "3": "total_time",
                    "8": "constant1",
                    "1": "input1",
                    "4": "constant_a"
                },
                "DAT_20000024": {
                    "1": "data_variable2",
                    "2": "variable2",
                    "4": "constant_b",
                    "8": "constant2"
                },
                "0xf": {
                    "9": "threshold",
                    "1": "upper_limit",
                    "2": "max_value",
                    "3": "limit"
                },
                "FUN_08000e60": {
                    "2": "update_values",
                    "1": "set_process_parameters",
                    "4": "update_data",
                    "5": "perform_operation"
                },
                "0xffffffff": {
                    "1": "operand_a",
                    "2": "constant3",
                    "3": "param1"
                },
                "DAT_20000028": {
                    "6": "stored_param",
                    "2": "current_value",
                    "8": "stored_value",
                    "1": "processed_value"
                },
                "param_2": {
                    "3": "param2",
                    "4": "new_value",
                    "1": "value_2"
                },
                "param_3": {
                    "3": "param3",
                    "1": "flag_value"
                },
                "DAT_20000026": {
                    "1": "constant_1"
                }
            }
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_system_08000de4",
            "code": "\n\n\nvoid initialize_system_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08000e3c(3);\n  FUN_08000d98(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4",
                "undefined4": "void"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000e3c",
                "FUN_08000d96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000de4": {
                    "1": "set_flags_and_call_functions",
                    "5": "initialize",
                    "9": "initialize_system",
                    "6": "initialize_program",
                    "2": "initialize_data"
                },
                "FUN_08000d98": {
                    "1": "set_config",
                    "2": "set_flags",
                    "6": "set_permissions"
                },
                "FUN_08000e3c": {
                    "1": "perform_initialization",
                    "2": "set_mode",
                    "4": "perform_action"
                },
                "FUNC_08000d96": {
                    "1": "perform_initialization",
                    "2": "execute_operation",
                    "3": "execute_function"
                },
                "param_1": {
                    "2": "config_value",
                    "1": "flags",
                    "8": "value"
                },
                "_DAT_40023c00": {
                    "1": "configuration",
                    "2": "flags"
                },
                "undefined4": {
                    "1": "void"
                },
                "DAT_40023c00": {
                    "1": "data"
                }
            }
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "calculate_sum_08000e18",
            "code": "\nvoid calculate_sum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "calculate_sum_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e18": {
                    "1": "calculate_updated_value",
                    "2": "addition_function",
                    "4": "calculate_sum",
                    "3": "addition_operation"
                },
                "DAT_20000670": {
                    "1": "data_sum",
                    "2": "sum_variable",
                    "9": "sum",
                    "12": "result"
                },
                "DAT_20000024": {
                    "3": "input",
                    "1": "input_data",
                    "11": "input_value",
                    "2": "input_variable",
                    "4": "value"
                }
            }
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_08000e30",
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "calling": [
                "FUN_0800346c",
                "FUN_08003d18",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e30": {
                    "1": "get_initialized_value",
                    "4": "get_global_variable",
                    "8": "get_data_value",
                    "2": "get_data_constant",
                    "13": "get_data"
                },
                "DAT_20000670": {
                    "12": "data",
                    "1": "initialized_value",
                    "4": "global_variable"
                }
            }
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_configuration_08000e3c",
            "code": "\n\n\nvoid update_configuration_08000e3c(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_configuration_08000e3c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e3c": {
                    "1": "update_data",
                    "4": "update_config",
                    "7": "update_configuration",
                    "6": "update_register_value"
                },
                "param_1": {
                    "2": "config",
                    "1": "configuration",
                    "14": "input_value",
                    "3": "value"
                },
                "_DAT_e000ed0c": {
                    "2": "data_register",
                    "1": "flag_value",
                    "4": "config_register",
                    "6": "register_value"
                },
                "0xf8ff": {
                    "1": "mask"
                },
                "0x5fa0000": {
                    "1": "constant"
                },
                "param_2": {
                    "1": "output_value"
                },
                "newConfigurationValue": {
                    "1": "new_configuration_value"
                },
                "newVariableName": {
                    "1": "new_variable"
                },
                "& 7": {
                    "1": "bitmask"
                },
                "<< 8": {
                    "1": "shifted_value"
                },
                "& 0xf8ff": {
                    "1": "mask"
                },
                "| 0x5fa0000": {
                    "1": "constant_value"
                }
            }
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_memory_08000e60",
            "code": "\n\n\nvoid update_memory_08000e60(uint address,uint mask,uint data)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)address < 0) {\n    *(character_value *)((address & 0xf) + 0xe000ed14) = (character_value)(shift_amount << 4);\n  }\n  else {\n    *(character_value *)(address + 0xe000e400) = (character_value)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_memory_08000e60",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits",
                "char": "character_value"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e60": {
                    "1": "write_to_memory",
                    "2": "write_data_to_memory",
                    "6": "update_memory",
                    "4": "update_character"
                },
                "param_1": {
                    "13": "address",
                    "2": "input",
                    "1": "char_index",
                    "3": "character_address",
                    "4": "memory_address"
                },
                "param_2": {
                    "7": "mask",
                    "4": "data",
                    "3": "bit_mask",
                    "1": "character_bitmask",
                    "2": "value1"
                },
                "param_3": {
                    "2": "value2",
                    "6": "data",
                    "4": "value",
                    "1": "param"
                },
                "uVar1": {
                    "2": "shifted_data",
                    "1": "updated_char_value",
                    "3": "shifted_bits",
                    "8": "shift_amount"
                },
                "uVar2": {
                    "1": "limit",
                    "8": "remaining_bits",
                    "2": "shift_difference"
                },
                "uVar1_2": {
                    "1": "shift_offset"
                },
                "uVar1_3": {
                    "1": "data_to_write"
                },
                "param_1_2": {
                    "1": "address_offset"
                },
                "uVar3": {
                    "1": "result"
                },
                "uVar4": {
                    "1": "shifted_value"
                },
                "uVar5": {
                    "1": "mask3"
                },
                "uVar6": {
                    "1": "updated_value"
                },
                "uVar2Old": {
                    "1": "original_bit_offset"
                },
                "uVar1Old": {
                    "1": "original_shift_amount"
                },
                "char": {
                    "1": "character_value"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "memory_address1"
                },
                "param_1 + 0xe000e400": {
                    "1": "character_address_condition_2"
                },
                "uVar1 & uVar2": {
                    "1": "shifted_masked_bits"
                },
                "uVar1 & uVar1": {
                    "1": "shifted_masked_data"
                },
                "(int)param_1 < 0": {
                    "1": "is_negative_address"
                },
                "*(char *)((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "output1"
                },
                "*(char *)(param_1 + 0xe000e400)": {
                    "1": "output2"
                },
                "uVar1 << 4": {
                    "1": "shifted_data"
                },
                "uVar1 << 0x15 >> 0x1d": {
                    "1": "shifted_bits_masked"
                },
                "7 - uVar1": {
                    "1": "remaining_bits_masked"
                },
                "uVar2 < 4": {
                    "1": "is_less_than_4"
                },
                "uVar1 + 4 < 7": {
                    "1": "is_less_than_3"
                },
                "uVar1 - 3": {
                    "1": "shifted_bits_adjusted"
                },
                "(param_2 & (1 << (uVar2 & 0xff)) - 1U) << (uVar1 & 0xff)": {
                    "1": "masked_bitwise_operation"
                },
                "(char)(uVar1 << 4)": {
                    "1": "result"
                },
                "*(char *) ((param_1 & 0xf) + 0xe000ed14)": {
                    "1": "update_character_at_position"
                }
            }
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_in_array_08000ec4",
            "code": "\nvoid set_bit_in_array_08000ec4(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_in_array_08000ec4",
                "param_1": "index"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ec4": {
                    "1": "set_bitmask",
                    "8": "set_bit",
                    "2": "set_bit_value",
                    "4": "set_bit_at_index",
                    "13": "set_bit_in_array"
                },
                "param_1": {
                    "4": "bit_position",
                    "10": "bit_index",
                    "14": "index",
                    "1": "array_index"
                },
                "param_1 >> 5": {
                    "1": "byte_index",
                    "2": "array_index"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "2": "bit_array",
                    "1": "memory_location"
                },
                "param_1 & 0x1f": {
                    "1": "bit_position"
                },
                "*(int*)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "bit_field"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "4": "bit_mask"
                },
                "Lqwqeqweqpwe": {
                    "1": "set_bit_in_array"
                },
                "PTR___1fff1f00": {
                    "1": "array"
                },
                "(-1 < (int)param_1)": {
                    "1": "is_valid_index"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "address"
                }
            }
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_data_08000ee0",
            "code": "\n\n\nundefined4 initialize_data_08000ee0(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_data_08000ee0",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ee0": {
                    "1": "initialize_function",
                    "2": "set_parameters",
                    "5": "initialize_parameters",
                    "7": "initialize_memory",
                    "8": "initialize_data"
                },
                "param_1": {
                    "1": "input_param",
                    "17": "input_value",
                    "7": "value",
                    "4": "size"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "5": "modified_value",
                    "2": "updated_value",
                    "6": "memory_address"
                },
                "DAT_e000ed23": {
                    "1": "status_flags",
                    "2": "status_value",
                    "3": "constant",
                    "7": "constant_value"
                },
                "_DAT_e000e018": {
                    "4": "initialized_value",
                    "1": "initialized_flag",
                    "7": "counter"
                },
                "_DAT_e000e010": {
                    "4": "counter",
                    "1": "result4",
                    "3": "constant_value",
                    "2": "status_flag"
                },
                "param_1 - 1U": {
                    "1": "adjusted_value"
                },
                "0x1000000": {
                    "1": "limit"
                },
                "0xf0": {
                    "1": "default_status"
                }
            }
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_array_08000f0c",
            "code": "\nvoid set_bit_in_array_08000f0c(uinteger bit_index)\n\n{\n  if (-1 < index_int) {\n    *(integer *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index",
                "int": "integer",
                "(int)param_1": "index_int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f0c": {
                    "8": "set_bit",
                    "1": "set_bit_in_table",
                    "5": "set_bit_in_memory",
                    "2": "set_bit_at_index",
                    "12": "set_bit_in_array"
                },
                "param_1": {
                    "2": "position",
                    "1": "value",
                    "6": "bit_position",
                    "11": "bit_index",
                    "7": "index"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "2": "bit_array",
                    "1": "bit_mask"
                },
                "1 << (param_1 & 0x1f)": {
                    "5": "bit_value",
                    "3": "bit_mask",
                    "1": "bit"
                },
                "param_1 >> 5": {
                    "1": "shifted_value"
                },
                "((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00": {
                    "1": "table_index"
                },
                "int": {
                    "1": "index_type",
                    "2": "integer"
                },
                "(param_1 >> 5) + 0x60": {
                    "1": "base_address"
                },
                "-0x1fff1f00": {
                    "1": "offset"
                },
                "param_1>>5": {
                    "1": "shifted_input"
                },
                "param_1&0x1f": {
                    "1": "mask"
                },
                "(param_1 >> 5) + 0x60) * 4 + -0x1fff1f00": {
                    "1": "address"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "<original_variable_name_1>": {
                    "1": "array_address"
                },
                "arrayOffset * 4 + -0x1fff1f00": {
                    "1": "array_address"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "(int)param_1": {
                    "1": "index_int"
                },
                "(param_1 >> 5)": {
                    "1": "divided_by_32"
                },
                "(divided_by_32 + 0x60)": {
                    "1": "address"
                },
                "(address * 4 + -0x1fff1f00)": {
                    "1": "memory_offset"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_position"
                },
                "param_2": {
                    "1": "bit_array"
                },
                "param_3": {
                    "1": "bit_array_size"
                },
                "new_variable_name_1": {
                    "1": "bit_index_shifted"
                },
                "new_variable_name_2": {
                    "1": "bit_position"
                }
            }
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_status_08000f2c",
            "code": "\n\n\nvoid update_status_08000f2c(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_status_08000f2c",
                "param_1": "status"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f2c": {
                    "1": "update_config_flags",
                    "2": "update_register_flag",
                    "5": "set_flag",
                    "6": "update_status"
                },
                "param_1": {
                    "3": "value",
                    "2": "input",
                    "6": "input_value",
                    "1": "status_flag",
                    "7": "flag_value"
                },
                "_DAT_e000e010": {
                    "1": "configuration",
                    "2": "status_flag",
                    "6": "status_register",
                    "5": "register_value"
                },
                "param_2": {
                    "1": "new_param_name"
                }
            }
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_main_function_08000f4e",
            "code": "\nvoid execute_main_function_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_main_function_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f4e": {
                    "1": "initialize_components",
                    "8": "execute_main_function",
                    "2": "initialize_application",
                    "3": "initialize_system",
                    "7": "execute_function"
                },
                "FUNC_08000f4c": {
                    "1": "perform_initialization",
                    "3": "call_sub_function",
                    "2": "perform_action",
                    "7": "execute_sub_function"
                },
                "PTR_parameter_1": {
                    "1": "ptr_parameter_1"
                },
                "PTR_parameter_2": {
                    "1": "ptr_parameter_2"
                },
                "DAT_variable_1": {
                    "1": "dat_variable_1"
                },
                "DAT_variable_2": {
                    "1": "dat_variable_2"
                }
            }
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_data_08000f56",
            "code": "\nundefined4 initialize_data_08000f56(int data_ptr)\n\n{\n  if (data_ptr != 0) {\n    *(undefined *)(data_ptr + 4) = 2;\n    FUN_080033c8();\n    *(undefined4 *)(data_ptr + 0x10) = 0;\n    *(undefined *)(data_ptr + 4) = 0;\n    *(undefined *)(data_ptr + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_data_08000f56",
                "param_1": "data_ptr"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f56": {
                    "1": "set_default_value",
                    "2": "initialize_function",
                    "4": "update_data",
                    "5": "initialize_data",
                    "3": "set_defaults"
                },
                "param_1": {
                    "3": "param",
                    "2": "value",
                    "1": "input_param",
                    "6": "data_ptr",
                    "4": "data_pointer"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data_ptr[4]",
                    "6": "status"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "1": "initialized_flag",
                    "2": "counter",
                    "5": "result"
                },
                "*(undefined *)(param_1 + 5)": {
                    "3": "flag",
                    "1": "additional_flag"
                },
                "FUN_080033c8": {
                    "1": "perform_initialization",
                    "5": "perform_action",
                    "3": "do_something",
                    "2": "perform_operation"
                },
                "2": {
                    "1": "status_complete"
                },
                "0": {
                    "1": "status_incomplete"
                },
                "param_1 + 4": {
                    "1": "pointer_to_value"
                },
                "param_1 + 0x10": {
                    "1": "settings->value"
                },
                "param_1 + 5": {
                    "1": "pointer_to_flag2"
                },
                "*(undefined *)(user_data_structure + 4)": {
                    "1": "user_data_structure.status"
                },
                "*(undefined4 *)(user_data_structure + 0x10)": {
                    "1": "user_data_structure.error_code"
                },
                "*(undefined *)(user_data_structure + 5)": {
                    "1": "user_data_structure.flag"
                }
            }
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clear_bit_and_set_flag_08000f72(uint **bit_pointer,uint bit_position)\n\n{\n  **bit_pointer = **bit_pointer & ~(1 << (bit_position & 0xff));\n  *(undefined *)(bit_pointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "bit_pointer",
                "param_2": "bit_position"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f72": {
                    "1": "apply_bitwise_operation",
                    "28": "clear_bit_and_set_flag"
                },
                "param_1": {
                    "3": "data",
                    "1": "input_pointer",
                    "5": "bit_pointer",
                    "2": "ptr_to_value"
                },
                "param_2": {
                    "21": "bit_position",
                    "9": "bit_index",
                    "1": "bit_position_updated"
                },
                "**param_1": {
                    "2": "value",
                    "1": "input_value",
                    "3": "data_value"
                },
                "*(undefined *)(param_1 + 1)": {
                    "4": "flag",
                    "1": "flag_value"
                },
                "**param_1 & ~(1 << (param_2 & 0xff))": {
                    "1": "cleared_bit_value"
                },
                "(param_1 + 1)": {
                    "1": "flag_pointer"
                },
                "param_1 + 1": {
                    "1": "output"
                },
                "1 << (param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "param_1+1": {
                    "1": "flag_ptr"
                }
            }
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_data_08000f8c",
            "code": "\nuint update_data_08000f8c(uint **param_array)\n\n{\n  if (*(char *)((int)param_array + 0x35) != '\\x02') {\n    param_array[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)param_array + 0x35) = 5;\n  **param_array = **param_array & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_data_08000f8c",
                "param_1": "param_array",
                "param_1[0x15]": "param_array[21]",
                "undefined4": "uint"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f8c": {
                    "1": "validate_and_modify",
                    "3": "update_parameter_value",
                    "4": "update_data",
                    "2": "update_flag_and_value"
                },
                "param_1": {
                    "1": "input_pointer",
                    "4": "data",
                    "2": "param",
                    "6": "param_array",
                    "3": "parameter"
                },
                "param_1[0x15]": {
                    "1": "output",
                    "2": "params[21]",
                    "3": "result",
                    "4": "param_array[21]"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "5": "flag",
                    "1": "flag_value",
                    "2": "condition",
                    "7": "status"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "2": "updated_flag",
                    "1": "param_byte",
                    "3": "new_status"
                },
                "**param_1": {
                    "3": "param_value",
                    "1": "value_ptr",
                    "12": "value"
                },
                "undefined4": {
                    "1": "uint"
                },
                "(uint *)0x80": {
                    "1": "updated_value"
                },
                "0xfffffffe": {
                    "1": "4294967294",
                    "3": "bit_mask"
                },
                "0x35": {
                    "1": "flag",
                    "2": "status_offset"
                },
                "0x15": {
                    "1": "index"
                },
                "0x80": {
                    "1": "128"
                },
                "*(char *)((int)config + 0x35)": {
                    "1": "config_status"
                },
                "*(undefined *)((int)config + 0x35)": {
                    "1": "updated_status"
                },
                "(int)param_1 + 0x35": {
                    "1": "param_address"
                },
                "*(char *)((int)param + 0x35)": {
                    "1": "param[53]"
                },
                "*(undefined *)((int)param + 0x35)": {
                    "1": "param[53]"
                },
                "param[0][0]": {
                    "1": "param[0][0]"
                },
                "'\\x02'": {
                    "1": "2"
                },
                "5": {
                    "1": "5"
                },
                "**param_1 & 0xfffffffe": {
                    "1": "updated_value"
                },
                "value_ptr": {
                    "1": "value_ptr"
                },
                "DAT_0800xxxx": {
                    "1": "constant_value"
                },
                "*param_1": {
                    "1": "val1"
                },
                "**(param_1)": {
                    "1": "current_value"
                },
                "0x02": {
                    "1": "flag_value"
                },
                "charVar": {
                    "1": "value"
                },
                "uintPtr": {
                    "1": "param_ptr"
                },
                "param_1 + 0x35": {
                    "1": "flag"
                },
                "pointer": {
                    "1": "param"
                },
                "param": {
                    "1": "param"
                },
                "flag": {
                    "1": "flag"
                },
                "errorCode": {
                    "1": "error_code"
                },
                "DAT_00000080": {
                    "1": "error_value"
                },
                "CHAR_PTR": {
                    "1": "char_ptr"
                },
                "*(char *)(params + 0x35)": {
                    "1": "mode"
                },
                "*(undefined *)(params + 0x35)": {
                    "1": "mode"
                }
            }
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid update_registers_08000fb4(uint *registers,uint *input_array)\n\n{\n  uint temp1;\n  uint temp2;\n  uint index;\n  uint bit_mask;\n  uint temp3;\n  int index1;\n  uint shifted_index;\n  int bit_offset;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    temp2 = 1 << (index & 0xff);\n    bit_mask = temp2 & *input_array;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == bit_mask) {\n      if ((mode_value == 2) || (mode_value == 0x12)) {\n        index1 = (index >> 3) + 8;\n        bit_offset = (index & 7) << 2;\n        registers[index1] = registers[index1] & ~(0xf << bit_offset) | shifted_value2 << bit_offset;\n      }\n      shifted_index = index << 1;\n      temp1 = ~(3 << (shifted_index & 0xff));\n      *registers = *registers & temp1 | (mode_value & 3) << (shifted_index & 0xff);\n      temp3 = mode_value;\n      if (((temp3 - 1 < 2) || (temp3 == 0x11)) || (temp3 == 0x12)) {\n        registers[2] = registers[2] & temp1 | input_array[3] << (shifted_index & 0xff);\n        registers[1] = registers[1] & ~temp2 | ((mode_value << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      registers[3] = temp1 & registers[3] | input_array[2] << (shifted_index & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((mode_value & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        bit_offset = (index & 3) << 2;\n        if (registers == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registers == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registers == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registers == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registers == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registers == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registers == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registers == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registers == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registers == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << bit_offset) | index1 << bit_offset;\n        temp1 = ~bit_mask;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((mode_value & 0x10000) != 0) {\n          temp2 = bit_mask | _DAT_40013c00;\n        }\n        temp3 = temp1 & _DAT_40013c04;\n        if ((mode_value & 0x20000) != 0) {\n          temp3 = bit_mask | _DAT_40013c04;\n        }\n        shifted_index = temp1 & _DAT_40013c08;\n        if ((mode_value & 0x100000) != 0) {\n          shifted_index = bit_mask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = temp3;\n        _DAT_40013c08 = shifted_index;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((mode_value & 0x200000) != 0) {\n          temp1 = bit_mask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registers",
                "param_2": "input_array",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "index",
                "uVar4": "bit_mask",
                "uVar5": "temp3",
                "iVar6": "index1",
                "uVar7": "shifted_index",
                "iVar8": "bit_offset",
                "param_2[1]": "mode_value",
                "param_2[4]": "shifted_value2"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000fb4": {
                    "1": "improve_code",
                    "2": "update_parameters",
                    "18": "update_registers"
                },
                "param_1": {
                    "6": "registers",
                    "1": "parameter_array1",
                    "2": "register_array1",
                    "3": "input_array"
                },
                "param_2": {
                    "1": "input_values",
                    "2": "input_data",
                    "4": "input_array",
                    "3": "input_registers"
                },
                "uVar1": {
                    "1": "new_flag_mask",
                    "8": "temp1",
                    "3": "value1",
                    "2": "register_value",
                    "6": "temp_var1"
                },
                "uVar2": {
                    "1": "mask_2",
                    "2": "value2",
                    "6": "temp_var2",
                    "7": "bit_mask"
                },
                "uVar3": {
                    "3": "bit_position",
                    "1": "temp_mask",
                    "14": "index"
                },
                "uVar4": {
                    "6": "mask",
                    "1": "masked_bit",
                    "2": "masked_value",
                    "3": "bit_check",
                    "7": "bit_mask"
                },
                "uVar5": {
                    "1": "loop_var3",
                    "2": "temp5",
                    "4": "temp3",
                    "3": "value"
                },
                "iVar6": {
                    "9": "index1",
                    "1": "index_var_1",
                    "2": "high_index",
                    "4": "register_index"
                },
                "uVar7": {
                    "1": "temp4",
                    "4": "index2",
                    "2": "temp",
                    "3": "temp_var7"
                },
                "iVar8": {
                    "1": "index_var_2",
                    "6": "bit_offset",
                    "5": "index2",
                    "4": "index3",
                    "2": "shift_amount"
                },
                "_DAT_40013c0c": {
                    "1": "constant_value"
                },
                "_DAT_40023844": {
                    "1": "register"
                },
                "_DAT_40013c00": {
                    "1": "register0"
                },
                "_DAT_40013c04": {
                    "1": "register1"
                },
                "_DAT_40013c08": {
                    "1": "register2"
                },
                "param_2[1]": {
                    "1": "mode_value"
                },
                "param_2[4]": {
                    "1": "shifted_value2"
                },
                "param_1 == (uint *)0x40020000": {
                    "1": "check_address1"
                },
                "param_1 == (uint *)0x40020400": {
                    "1": "check_address2"
                },
                "param_1 == (uint *)0x40020800": {
                    "1": "check_address3"
                },
                "param_1 == (uint *)0x40020c00": {
                    "1": "check_address4"
                },
                "param_1 == (uint *)0x40021000": {
                    "1": "check_address5"
                },
                "param_1 == (uint *)0x40021400": {
                    "1": "check_address6"
                },
                "param_1 == (uint *)0x40021800": {
                    "1": "check_address7"
                },
                "param_1 == (uint *)0x40021c00": {
                    "1": "check_address8"
                },
                "param_1 == (uint *)0x40022000": {
                    "1": "check_address9"
                },
                "param_1 == (uint *)0x40022400": {
                    "1": "check_address10"
                }
            }
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid set_param_value_08001198(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "_": "shifted_value"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "<original_function_name>": {
                    "1": "set_param"
                },
                "<param_1>": {
                    "1": "object_address"
                },
                "<param_2>": {
                    "1": "new_value"
                },
                "<param_3>": {
                    "1": "is_shifted"
                },
                "<local_variable_1>": {
                    "1": "shifted_value"
                },
                "FUN_08001198": {
                    "1": "update_parameter_value",
                    "3": "set_parameter_value",
                    "2": "update_parameter",
                    "17": "set_param_value"
                },
                "param_1": {
                    "1": "param_base_address",
                    "16": "object_address",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "new_parameter_value",
                    "21": "value",
                    "7": "new_value"
                },
                "param_3": {
                    "2": "shift_value",
                    "1": "is_shifted_value",
                    "4": "shift_flag",
                    "18": "is_shifted"
                },
                "param_1 + 0x18": {
                    "1": "parameter_address",
                    "2": "target_address",
                    "3": "value_address"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "obj_value",
                    "3": "object_value"
                },
                "_": {
                    "1": "shifted_value"
                },
                "param_2 << 0x10": {
                    "6": "shifted_value"
                },
                "*(int *)(value_address)": {
                    "1": "current_value"
                },
                "*(int *)(target_address)": {
                    "1": "value_at_target_address"
                },
                "value << 0x10": {
                    "1": "shifted_value"
                },
                "ptr_value": {
                    "1": "value"
                },
                "param_3 == 0": {
                    "1": "should_use_bit_shift"
                },
                "objectAddress + 0x18": {
                    "1": "parameter_address"
                },
                "*(int *)(objectAddress + 0x18)": {
                    "1": "parameter_value"
                }
            }
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_080011a4",
            "code": "\n\n\nvoid update_data_080011a4(uint data)\n\n{\n  if ((_DAT_40013c14 & data) != 0) {\n    _DAT_40013c14 = data;\n    FUN_080047d0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_080011a4",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011a4": {
                    "1": "update_data_if_set",
                    "3": "update_data_and_call_function",
                    "2": "update_data_and_invoke_function",
                    "6": "update_data"
                },
                "param_1": {
                    "4": "flag",
                    "6": "data",
                    "2": "input_data",
                    "1": "parameter",
                    "5": "new_data"
                },
                "_DAT_40013c14": {
                    "2": "data_flag",
                    "1": "data_1",
                    "3": "data_register",
                    "4": "current_data"
                },
                "FUN_080047d0": {
                    "1": "execute_updated_function",
                    "6": "perform_action",
                    "2": "execute_update",
                    "4": "execute_function",
                    "3": "perform_operation"
                }
            }
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_status_080011c0",
            "code": "\nundefined4 update_status_080011c0(integer *permissions)\n\n{\n  if (*(character *)((integer)permissions + 0x3e) == '@') {\n    if (condition == 0) {\n      *(unsigned_integer *)(*permissions + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_integer *)(*permissions + 0x10) = value & mask2 | 1;\n    }\n  }\n  else if (param_array[4] == 0x4000) {\n    if (*(character *)((integer)permissions + 0x3d) == '!') {\n      *(unsigned_integer *)(*permissions + 0x10) = value & 0xfe;\n    }\n    else {\n      *(unsigned_integer *)(*permissions + 0x10) = value & mask2 | 1;\n    }\n  }\n  else if (condition == 0) {\n    *(unsigned_integer *)(*permissions + 0x10) = (unsigned_integer)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition == 1) {\n    *(unsigned_integer *)(*permissions + 0x10) = (unsigned_integer)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_status_080011c0",
                "param_1": "permissions",
                "param_1[0x14]": "condition",
                "param_1[0x11]": "value",
                "0xffU": "mask2",
                "param_1[4]": "param_array[4]",
                "char": "character",
                "int": "integer",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011c0": {
                    "1": "set_permissions",
                    "2": "set_flag_based_on_condition",
                    "5": "update_status",
                    "3": "set_flag_based_on_conditions"
                },
                "param_1": {
                    "2": "input_data",
                    "4": "permissions",
                    "1": "param"
                },
                "param_1[0x14]": {
                    "2": "status_flag",
                    "1": "condition_1",
                    "5": "condition",
                    "3": "flag_value"
                },
                "param_1[0x11]": {
                    "2": "input",
                    "1": "value2",
                    "8": "value",
                    "3": "status_value"
                },
                "*param_1": {
                    "1": "file",
                    "2": "status_pointer"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "6": "flag",
                    "1": "flag_result",
                    "2": "result"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "character_at_offset0x3e",
                    "3": "char_value1",
                    "2": "char1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "2": "char2",
                    "1": "char_at_index_2",
                    "3": "char_value2"
                },
                "0xfe": {
                    "1": "fe_value",
                    "2": "mask1"
                },
                "0xffU": {
                    "2": "mask2",
                    "1": "mask_2"
                },
                "param_1[4]": {
                    "1": "value2",
                    "2": "value"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6": {
                    "1": "shifted_value"
                },
                "0x3e": {
                    "1": "char_code"
                },
                "0x14": {
                    "1": "offset_14"
                },
                "0": {
                    "1": "offset0"
                },
                "0x10": {
                    "1": "offset_10"
                },
                "0x11": {
                    "1": "offset_11"
                },
                "4": {
                    "1": "condition2"
                },
                "0x4000": {
                    "1": "magic_number"
                },
                "0x3d": {
                    "1": "char_code2"
                },
                "inputParams": {
                    "1": "input_params"
                },
                "inputParams[0x14]": {
                    "1": "condition1"
                },
                "inputParams[0x11]": {
                    "1": "value"
                },
                "inputParams[4]": {
                    "1": "condition2"
                },
                "inputParams + 0x3e": {
                    "1": "char_pointer1"
                },
                "inputParams + 0x3d": {
                    "1": "char_pointer2"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "shifted_value0"
                },
                "0xf1": {
                    "1": "constant2"
                },
                "input": {
                    "1": "input"
                },
                "0xf0": {
                    "1": "mask3"
                },
                "*param_1 + 0x10": {
                    "1": "updated_status_flag"
                },
                "1": {
                    "1": "true"
                },
                "0xffU | 1": {
                    "1": "ff_value"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "shifted_value1"
                },
                "config[0x14]": {
                    "1": "is_flag_set"
                },
                "((int)config + 0x3e)": {
                    "1": "config_flag1"
                },
                "config[0x11]": {
                    "1": "config_value"
                },
                "((int)config + 0x3d)": {
                    "1": "config_flag2"
                },
                "& 0xfe": {
                    "1": "clear_bit0"
                },
                "& 0xffU | 1": {
                    "1": "set_bit0"
                },
                "(uint)(input << 0x10) >> 0x17 & 6 | 0xf0": {
                    "1": "updated_value1"
                },
                "(uint)(input << 0x10) >> 0x17 & 6 | 0xf1": {
                    "1": "updated_value2"
                },
                "param_1 + 0x3e": {
                    "1": "char_at_index40"
                },
                "param_1 + 0x3d": {
                    "1": "char_at_index3_f"
                },
                "data[0x14]": {
                    "1": "condition1"
                },
                "data[0x11]": {
                    "1": "value"
                },
                "*data": {
                    "1": "ptr"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "flag"
                },
                "*(char *)((int)data + 0x3e)": {
                    "1": "char1"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "char2"
                },
                "char": {
                    "1": "character"
                },
                "int": {
                    "1": "integer"
                },
                "uint": {
                    "1": "unsigned_integer"
                }
            }
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "set_byte_value_0800124a",
            "code": "\nundefined4 set_byte_value_0800124a(int *input_array)\n\n{\n  *(uint *)(*input_array + 0x10) = source_value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "set_byte_value_0800124a",
                "param_1": "input_array",
                "param_1[0x11]": "source_value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800124a": {
                    "1": "set_unsigned_byte_value",
                    "2": "set_parameter_value",
                    "4": "set_byte_value"
                },
                "param_1": {
                    "1": "memory_address",
                    "2": "params",
                    "8": "input_array",
                    "3": "input_ptr",
                    "4": "parameter"
                },
                "*param_1": {
                    "1": "parameter_list_pointer"
                },
                "0x10": {
                    "4": "offset"
                },
                "array[0x11]": {
                    "1": "value"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "unsigned_value",
                    "7": "target_address",
                    "2": "destination_address"
                },
                "param_1[0x11]": {
                    "1": "parameter[0x11]",
                    "2": "value",
                    "3": "source_value"
                },
                "param_1[0x11] & 0xff": {
                    "1": "byte_to_set"
                },
                "0xff": {
                    "3": "mask",
                    "1": "bit_mask"
                },
                "input_array": {
                    "1": "array_pointer"
                },
                "value_to_extract_and_store": {
                    "1": "extracted_value"
                },
                "memory_address_to_store_value": {
                    "1": "memory_address"
                },
                "0x11": {
                    "2": "index"
                },
                "& 0xff": {
                    "2": "mask"
                },
                "*(uint *)(arrayPointer + 0x10)": {
                    "1": "unsigned_int_pointer"
                }
            }
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_08001256",
            "code": "\nundefined4 update_flags_08001256(uint **parameters)\n\n{\n  uint *temp_ptr;\n  \n  temp_ptr = param_b;\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((param_14 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((param_14 == (uint *)0x0) && (param4 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      param_14 = (uint *)((int)param_14 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (temp_ptr == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          temp_ptr = *parameters;\n          if ((flag_ptr2_value1 & 0x800) == 0) {\n            *temp_ptr = *temp_ptr | 0x200;\n          }\n          else {\n            *temp_ptr = *temp_ptr & 0xfffffbff;\n          }\n        }\n        else if (((temp_ptr == (uint *)0x4) || (temp_ptr == (uint *)0x8)) ||\n                (params[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (param_b == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (param_b == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        temp_ptr = *parameters;\n        if ((flag_ptr2_value1 & 0x800) != 0) {\n          flag_ptr2_value1 = flag_ptr2_value1 | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        temp_ptr = *parameters;\n        if ((flag_ptr2_value1 & 0x800) != 0) {\n          flag_ptr2_value1 = flag_ptr2_value1 | 0x1000;\n        }\n      }\n      param_14 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "puVar1": "temp_ptr",
                "param_1[0xb]": "param_b",
                "param_1[0x14]": "param_14",
                "param_1[4]": "param4",
                "param_1[0xc]": "params[0xc]",
                "puVar1[1]": "flag_ptr2_value1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001256": {
                    "1": "analyze_parameters",
                    "3": "set_flags",
                    "12": "update_flags",
                    "2": "process_flags"
                },
                "param_1": {
                    "1": "param",
                    "8": "params",
                    "15": "parameters"
                },
                "puVar1": {
                    "1": "pointer_1",
                    "2": "value",
                    "3": "ptr"
                },
                "param_1[0xb]": {
                    "1": "var2",
                    "4": "param_b",
                    "2": "params[0xb]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "3": "char_value1",
                    "1": "char_check1",
                    "4": "char1",
                    "2": "char_value_1"
                },
                "param_1[0x14]": {
                    "1": "pointer_value",
                    "2": "param14",
                    "3": "param_14"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "character_2",
                    "4": "char2",
                    "6": "char_value2",
                    "2": "char_value_2"
                },
                "param_1[4]": {
                    "1": "pointer3",
                    "2": "parameters[4]",
                    "3": "param4"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "13": "short_value",
                    "1": "short_a",
                    "2": "params[0x2a]"
                },
                "**param_1": {
                    "1": "flag_value"
                },
                "uint": {
                    "1": "uint"
                },
                "(uint *)0x0": {
                    "1": "null"
                },
                "(uint *)0xc000": {
                    "1": "pointer_3"
                },
                "0x100": {
                    "1": "flag1"
                },
                "(uint *)((int)param_1[0x14] + 1)": {
                    "1": "updated_pointer1"
                },
                "0x200": {
                    "1": "flag2"
                },
                "(uint *)0xffff0000": {
                    "1": "ptr_check"
                },
                "0xfffffbff": {
                    "1": "bitwise_flag"
                },
                "0x4": {
                    "1": "compare_ptr1"
                },
                "0x8": {
                    "1": "compare_ptr2"
                },
                "param_1[0xc]": {
                    "1": "param_c",
                    "2": "params[0xc]"
                },
                "(uint *)0x12": {
                    "1": "compare_constant_ptr"
                },
                "0x400": {
                    "1": "flag3"
                },
                "0x800": {
                    "1": "flag_5"
                },
                "(puVar1[1] & 0x800) == 0": {
                    "1": "is_flag4_cleared"
                },
                "0x1000": {
                    "1": "flag5"
                },
                "return 0;": {
                    "1": "return_statement"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_check"
                },
                "(uint *)0x4": {
                    "1": "constant2"
                },
                "(uint *)0x8": {
                    "1": "constant3"
                },
                "(uint *)0x2": {
                    "1": "constant5"
                },
                "puVar1[1]": {
                    "1": "temp_ptr[1]"
                },
                "(puVar1[1] & 0x800)": {
                    "1": "flag_ptr2_value1_check"
                },
                "(int)param_1+0x3d": {
                    "1": "params[0x3d]"
                },
                "(int)param_1+0x3e": {
                    "1": "params[0x3e]"
                },
                "tempVar": {
                    "1": "temp_var"
                },
                "*(param_1[0xb])": {
                    "1": "value"
                },
                "(param_1[0xb])": {
                    "1": "ptr_value6"
                },
                "*param_1": {
                    "1": "param_array_val"
                },
                "char1": {
                    "1": "first_char"
                },
                "char2": {
                    "1": "second_char"
                },
                "puVar1 == (uint *)0xffff0000": {
                    "1": "param_b_is_minus_1"
                },
                "puVar1 == (uint *)0x4": {
                    "1": "is_pointer_four"
                },
                "puVar1 == (uint *)0x8": {
                    "1": "is_pointer_eight"
                },
                "param_1[0xb] == (uint *)0x2": {
                    "1": "is_pointer_two"
                },
                "param_1[1] & 0x800": {
                    "1": "bit_11_of_param_1"
                },
                "puVar1[1] & 0x800": {
                    "1": "bitwise_and_result"
                },
                "param_1[0xc] == (uint *)0x12": {
                    "1": "is_pointer_twelve"
                },
                "puVar1[1] = puVar1[1] | 0x1000": {
                    "1": "bitwise_or_result"
                },
                "*(char *)((int)parameters + 0x3d)": {
                    "1": "char_value1"
                },
                "parameters[0x14]": {
                    "1": "ptr_value"
                },
                "*(char *)((int)parameters + 0x3e)": {
                    "1": "char_value2"
                },
                "*(short *)((int)parameters + 0x2a)": {
                    "1": "short_value"
                },
                "(int)parameters + 0x2a": {
                    "1": "short_address"
                },
                "uint **param_1": {
                    "1": "parameters"
                },
                "(int)param_1 + 0x3d": {
                    "1": "str_check"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_check"
                },
                "*(char *)((int)param + 0x3d)": {
                    "1": "char_value"
                },
                "param[0x14]": {
                    "1": "array_elem"
                },
                "*(char *)((int)param + 0x3e)": {
                    "1": "char_value2"
                },
                "*(short *)((int)param + 0x2a)": {
                    "1": "short_value"
                },
                "0xffff0000": {
                    "1": "0x_ffff0000"
                },
                "0x12": {
                    "1": "constant_3"
                },
                "0x0": {
                    "2": "null"
                },
                "0xc000": {
                    "1": "constant"
                },
                "0x2": {
                    "1": "constant_4"
                },
                "<original_function_name>": {
                    "1": "process_input"
                },
                "<param_1>": {
                    "1": "input_data"
                }
            }
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 update_data_08001420(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)array_pointer;\n    array_pointer = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "param_1[9]": "array_pointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001420": {
                    "1": "decode",
                    "7": "update_data",
                    "3": "update_byte_array",
                    "2": "update_value_in_array",
                    "4": "update_pointer"
                },
                "param_1": {
                    "2": "input_array",
                    "7": "array",
                    "1": "pointer_list",
                    "3": "pointer"
                },
                "pbVar1": {
                    "6": "byte_ptr",
                    "17": "byte_pointer",
                    "1": "byte_data",
                    "3": "current_byte"
                },
                "*param_1": {
                    "1": "array_value",
                    "2": "first_element"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "4": "short_value",
                    "1": "condition_value",
                    "2": "element_count"
                },
                "param_1[9]": {
                    "2": "array_pointer",
                    "1": "pointer_value"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "dereferenced_data_pointer_with_offset"
                },
                "*param_1 + 0x10": {
                    "1": "target_address"
                },
                "data[9]": {
                    "1": "byte_array"
                },
                "(int)(pbVar1 + 1)": {
                    "1": "buffer_offset"
                },
                "(uint)*pbVar1": {
                    "1": "new_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "2": "updated_element_count",
                    "1": "short_value_minus_one"
                }
            }
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_data_08001440",
            "code": "\nundefined4 update_data_08001440(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)data_buffer;\n    data_buffer = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "array",
                "puVar1": "ptr",
                "param_1[9]": "data_buffer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001440": {
                    "3": "update_array_element",
                    "2": "update_char_array",
                    "5": "update_value",
                    "1": "update_data_array",
                    "7": "update_data"
                },
                "param_1": {
                    "4": "data",
                    "11": "array",
                    "1": "param",
                    "2": "input_array",
                    "3": "param_array"
                },
                "puVar1": {
                    "1": "current_address",
                    "4": "current_element",
                    "2": "char_pointer",
                    "5": "ptr"
                },
                "*puVar1": {
                    "3": "new_value",
                    "1": "new_data",
                    "2": "value"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "4": "short_value",
                    "3": "array_size",
                    "2": "count",
                    "1": "character_count"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_length"
                },
                "param_1[9]": {
                    "1": "modified_pointer"
                },
                "(int)(puVar1 + 1)": {
                    "1": "new_address"
                },
                "(char)*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "new_value",
                    "2": "source_value"
                },
                "*param_1": {
                    "2": "base_address"
                },
                "param_1[9] + 1": {
                    "1": "updated_data_pointer"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "1": "source_value"
                },
                "0x2a": {
                    "1": "count"
                }
            }
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "process_params_08001460",
            "code": "\nundefined4 process_params_08001460(unsigned_int **param_array,unsigned_int *param_ptr,int data_size,unsigned_int *result_ptr)\n\n{\n  undefined4 result;\n  unsigned_int *ptr;\n  \n  if (*(char *)((int)param_array + 0x3d) == '(') {\n    if (param_ptr == (unsigned_int *)0x0) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_array + 0xf) = 1;\n      ptr = *param_array;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **param_array = **param_array & 0xfffff7ff;\n      *(undefined *)((int)param_array + 0x3d) = 0x29;\n      *(undefined *)((int)param_array + 0x3e) = 0x20;\n      result = 0;\n      data_pointer2 = (unsigned_int *)0x0;\n      data_pointer3 = param_ptr;\n      *(short *)((int)param_array + 0x2a) = (short)data_size;\n      data_pointer4 = result_ptr;\n      *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n      *(undefined *)(param_array + 0xf) = 0;\n      (*param_array)[1] = (*param_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "process_params_08001460",
                "param_1": "param_array",
                "param_2": "param_ptr",
                "param_3": "data_size",
                "param_4": "result_ptr",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "data_pointer2",
                "param_1[9]": "data_pointer3",
                "param_1[0xb]": "data_pointer4",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001460": {
                    "2": "initialize_parameters",
                    "7": "process_params",
                    "1": "update_parameters",
                    "3": "initialize_data"
                },
                "param_1": {
                    "2": "input_pointer",
                    "1": "input_ptr",
                    "7": "param_array",
                    "3": "param_list"
                },
                "param_2": {
                    "1": "input_param",
                    "2": "input_data",
                    "4": "data_pointer",
                    "3": "value_ptr"
                },
                "param_3": {
                    "1": "optional_param2",
                    "4": "data_size",
                    "3": "size",
                    "2": "parameter3"
                },
                "param_4": {
                    "2": "result_pointer",
                    "1": "output_buffer",
                    "3": "param_data"
                },
                "uVar1": {
                    "3": "status",
                    "15": "result",
                    "13": "return_value"
                },
                "puVar2": {
                    "4": "temp_ptr",
                    "1": "pointer_variable",
                    "2": "first_element_ptr",
                    "8": "ptr",
                    "3": "ptr_var"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_var1"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "some_flag"
                },
                "(*puVar2 & 1)": {
                    "1": "is_flag_set"
                },
                "**param_1": {
                    "1": "double_pointer_data"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "input_char_offset"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "param_array[0x3e]"
                },
                "param_1[0x10]": {
                    "1": "data_pointer2"
                },
                "param_1[9]": {
                    "1": "data_pointer3"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "param_1[0xb]": {
                    "1": "data_ptr"
                },
                "(*param_1)[1]": {
                    "1": "double_pointer_data2"
                },
                "(*(char *)((int)param_1 + 0x3d) == '(')": {
                    "1": "is_char_opening_bracket"
                },
                "(param_2 == (uint *)0x0)": {
                    "1": "is_null_param1"
                },
                "(param_3 == 0)": {
                    "1": "is_zero_param2"
                },
                "(*(char *)(param_1 + 0xf) == '\\x01')": {
                    "1": "is_char_one"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "param_array[0xf]"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "(int)param_1 + 0x3d": {
                    "1": "condition_char"
                },
                "param_1 == (uint *)0x0": {
                    "1": "input_null"
                },
                "param_3 == 0": {
                    "1": "data_size_zero"
                },
                "*(char *)(param_1 + 0xf) == '\\x01'": {
                    "1": "flag_set"
                },
                "*(undefined *)(param_1 + 0xf) = 1": {
                    "1": "set_flag"
                },
                "*puVar2 & 1 == 0": {
                    "1": "check_bit"
                },
                "*puVar2 = *puVar2 | 1": {
                    "1": "set_bit"
                },
                "**param_1 = **param_1 & 0xfffff7ff": {
                    "1": "clear_bits"
                },
                "(int)param_1 + 0x3e": {
                    "1": "space_char"
                },
                "param_1[0x10] = (uint *)0x0": {
                    "1": "reset_pointer"
                },
                "param_1[9] = param_2": {
                    "1": "set_data_pointer"
                },
                "*(short *)((int)param_1 + 0x2a) = (short)param_3": {
                    "1": "set_data_size"
                },
                "param_1[0xb] = param_4": {
                    "1": "set_result_pointer"
                },
                "*(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a)": {
                    "1": "assign_data_size"
                },
                "(*param_1)[1] = (*param_1)[1] | 0x700": {
                    "1": "set_flag_bits"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "param_array[10]"
                },
                "*param_1": {
                    "1": "first_element"
                },
                "*puVar2": {
                    "2": "ptr_value"
                },
                "(*(undefined2 *)((int)param_1 + 0x2a))": {
                    "1": "short_value"
                },
                "*param_2": {
                    "1": "value"
                }
            }
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "process_data_080014ec",
            "code": "\nundefined4 process_data_080014ec(uint **data_ptr,uint *input_ptr,int input_size,uint *output_ptr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)data_ptr + 0x3d) == '(') {\n    if (input_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      ptr = *data_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x20;\n      result = 0;\n      temp_ptr1 = (uint *)0x0;\n      temp_ptr2 = input_ptr;\n      *(short *)((int)data_ptr + 0x2a) = short_size;\n      temp_ptr3 = output_ptr;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "process_data_080014ec",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "input_size",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr",
                "(short)param_3": "short_size",
                "param_1[0x10]": "temp_ptr1",
                "param_1[9]": "temp_ptr2",
                "param_1[0xb]": "temp_ptr3"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014ec": {
                    "1": "update_parameters",
                    "2": "validate_input",
                    "6": "process_data"
                },
                "param_1": {
                    "1": "function_flags",
                    "3": "input_ptr",
                    "2": "parameter1"
                },
                "param_2": {
                    "2": "input_pointer",
                    "1": "value1",
                    "3": "data_ptr",
                    "4": "input_ptr"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "parameter3",
                    "8": "input_size",
                    "3": "count",
                    "4": "size"
                },
                "param_4": {
                    "6": "output_ptr",
                    "1": "param_values",
                    "2": "output_buffer"
                },
                "uVar1": {
                    "4": "return_value",
                    "23": "result"
                },
                "puVar2": {
                    "1": "ptr_var",
                    "3": "pointer",
                    "2": "ptr1",
                    "9": "ptr"
                },
                "data_ptr": {
                    "1": "uint_ptr"
                },
                "input_ptr": {
                    "1": "input"
                },
                "input_size": {
                    "1": "size"
                },
                "output_ptr": {
                    "1": "output"
                },
                "PTR_080014ec+0x3d": {
                    "1": "char1"
                },
                "PTR_080014ec+0xf": {
                    "1": "flag"
                },
                "PTR_080014ec+0x2a": {
                    "1": "short_value"
                },
                "*param_1": {
                    "1": "pointer_value",
                    "2": "ptr_value"
                },
                "DAT_080014ec+4": {
                    "1": "mask"
                },
                "**param_1": {
                    "2": "value",
                    "1": "ptr_ptr_val"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr"
                },
                "(char *)(param_1 + 0xf)": {
                    "1": "char_ptr2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "3": "flag",
                    "1": "second_char"
                },
                "*puVar2": {
                    "1": "ptr_val"
                },
                "(short)param_3": {
                    "1": "param_size"
                },
                "*param_1)[1]": {
                    "1": "value2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "byte_value2"
                },
                "param_1[0x10]": {
                    "1": "var1"
                },
                "param_1[9]": {
                    "1": "temp_ptr2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "3": "short_value"
                },
                "param_1[0xb]": {
                    "1": "temp_ptr3"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "undefined2_value",
                    "2": "undefined_value"
                },
                "(*param_1)[1]": {
                    "1": "temp_value"
                },
                "(*(param_1 + 0xf))[0]": {
                    "1": "param1f_val"
                },
                "(*(param_1 + 0xf))[1]": {
                    "1": "param1f_val2"
                },
                "(*puVar2 & 1)": {
                    "1": "bit_check"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "flag2"
                },
                "(*(char *)((int)param_1 + 0x3d))": {
                    "1": "config_identifier"
                },
                "(*(char *)(param_1 + 0xf))": {
                    "1": "flag"
                },
                "(*(undefined *)((int)param_1 + 0x3d))": {
                    "1": "config_flag1"
                },
                "(*(undefined *)((int)param_1 + 0x3e))": {
                    "1": "config_flag2"
                },
                "data": {
                    "1": "data_array_value"
                }
            }
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initialize_data_08001578(uint **data_pointer)\n\n{\n  uint *first_element;\n  \n  if (*(char *)((int)data_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data_pointer + 0x3d) = 0x28;\n  first_element = *data_pointer;\n  if ((*first_element & 1) == 0) {\n    *first_element = *first_element | 1;\n  }\n  **data_pointer = **data_pointer | 0x400;\n  (*data_pointer)[1] = (*data_pointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "data_pointer",
                "puVar1": "first_element"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001578": {
                    "2": "set_flag_bits",
                    "1": "update_values",
                    "10": "initialize_data",
                    "3": "set_flags_and_values"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "data",
                    "5": "data_pointer",
                    "2": "flags",
                    "4": "param"
                },
                "puVar1": {
                    "1": "temp_pointer",
                    "9": "first_element",
                    "3": "pointer",
                    "2": "current_value"
                },
                "*(char *)((int)dataPointer + 0x3d)": {
                    "1": "char_value"
                },
                "*(undefined *)((int)dataPointer + 0x3d)": {
                    "1": "new_value"
                },
                "*dataPointer": {
                    "1": "first_value"
                },
                "**dataPointer": {
                    "1": "first_value_dereferenced"
                },
                "(*dataPointer)[1]": {
                    "1": "second_value"
                },
                "<unnamed_variable_1>": {
                    "1": "space_character"
                },
                "<unnamed_variable_2>": {
                    "1": "left_parenthesis"
                },
                "<unnamed_variable_3>": {
                    "1": "bit_mask1"
                },
                "<unnamed_variable_4>": {
                    "1": "bit_mask2"
                },
                "*(undefined *)((int)data + 0x3d)": {
                    "1": "character"
                },
                "*data": {
                    "1": "value1"
                },
                "(*data)[1]": {
                    "1": "value2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_of_param",
                    "3": "char_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "byte_value"
                },
                "(*puVar1 & 1)": {
                    "1": "is_bit_set"
                },
                "*puVar1": {
                    "1": "data_value",
                    "3": "first_element_value",
                    "2": "pointer_value"
                },
                "**param_1": {
                    "2": "data_pointer_value",
                    "1": "double_pointer"
                },
                "(*param_1)[1]": {
                    "1": "second_value_in_data",
                    "3": "second_element_value"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "param_1[0]": {
                    "1": "first_param_deref"
                },
                "param_1[1]": {
                    "1": "second_param_deref"
                },
                "0x28": {
                    "1": "parenthesis"
                },
                "1": {
                    "1": "bit_mask"
                },
                "0x400": {
                    "1": "bit_mask1"
                },
                "0x300": {
                    "1": "bit_mask2"
                },
                "*param_1 & 1": {
                    "1": "param_bitwise_and_one"
                }
            }
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 process_data_080015bc(int *data)\n\n{\n  char char_value;\n  byte *byte_ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "char_value",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015bc": {
                    "5": "process_input",
                    "15": "process_data",
                    "1": "update_data",
                    "2": "process_buffer",
                    "3": "process_param"
                },
                "param_1": {
                    "2": "buffer",
                    "13": "data",
                    "1": "param",
                    "6": "input_array"
                },
                "cVar1": {
                    "11": "char_value",
                    "6": "character",
                    "1": "additional_char",
                    "5": "char_var"
                },
                "pbVar2": {
                    "18": "byte_ptr",
                    "12": "byte_pointer",
                    "1": "ptr_byte"
                },
                "FUNC_080015ba": {
                    "3": "perform_action",
                    "2": "do_something",
                    "1": "perform_operation"
                }
            }
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 process_data_0800160e(int *data)\n\n{\n  char char_value;\n  undefined *pointer;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    pointer = (undefined *)data[9];\n    data[9] = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800160e": {
                    "1": "update_char_array",
                    "4": "process_input",
                    "15": "process_data",
                    "2": "process_buffer",
                    "5": "process_param"
                },
                "param_1": {
                    "1": "param",
                    "11": "data",
                    "2": "buffer",
                    "3": "param_array",
                    "6": "input_array"
                },
                "cVar1": {
                    "11": "char_value",
                    "10": "character",
                    "1": "param_char",
                    "3": "char1",
                    "2": "char_variable"
                },
                "puVar2": {
                    "1": "undefined_ptr",
                    "2": "data_pointer",
                    "7": "pointer",
                    "6": "ptr"
                },
                "FUNC_0800160c": {
                    "1": "execute_func",
                    "10": "perform_action",
                    "2": "cleanup"
                },
                "*puVar2": {
                    "1": "target"
                }
            }
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_data_0800165a",
            "code": "\nundefined4 process_data_0800165a(int *data,undefined4 param2,undefined4 flag2,undefined4 param4)\n\n{\n  undefined2 selected_value;\n  uint flag;\n  \n  flag = *(uint *)(*data + 0x18);\n  if ((flag & 0x80) == 0) {\n    selected_value = *(undefined2 *)(data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(data + 6);\n  }\n  FUN_08003880(data,(*(uint *)(*data + 0x18) & 4) == 0,selected_value,flag,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data",
                "param_2": "param2",
                "param_4": "param4",
                "uVar1": "selected_value",
                "uVar2": "flag",
                "param_3": "flag2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800165a": {
                    "18": "process_data",
                    "1": "decode_and_process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "13": "data",
                    "2": "data_ptr",
                    "5": "data_pointer",
                    "6": "input_array"
                },
                "param_2": {
                    "6": "flag",
                    "9": "flag1",
                    "1": "input1",
                    "2": "param_2"
                },
                "param_4": {
                    "17": "param4",
                    "1": "value_3",
                    "4": "param_4",
                    "2": "value2",
                    "3": "param"
                },
                "uVar1": {
                    "1": "value_1",
                    "13": "selected_value",
                    "2": "chosen_value",
                    "4": "result",
                    "3": "value1"
                },
                "uVar2": {
                    "7": "flag",
                    "1": "value_from_pointer",
                    "2": "flag_value",
                    "5": "data_value",
                    "4": "flags",
                    "3": "value2"
                },
                "param_3": {
                    "1": "value_2",
                    "8": "param3",
                    "2": "param_3",
                    "9": "flag2"
                },
                "FUN_08003880": {
                    "1": "process_sub_function",
                    "2": "perform_operation"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "value1"
                },
                "*(undefined2 *)(param_1 + 3)": {
                    "1": "data1"
                },
                "*(undefined2 *)(param_1 + 6)": {
                    "1": "data2"
                }
            }
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "process_param_08001684",
            "code": "\nundefined4 process_param_08001684(uint **param)\n\n{\n  if (((param[11] == (uint *)0x4) || (param[11] == (uint *)0x8)) &&\n     (*(char *)((int)param + 0x3d) == '(')) {\n    param[11] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    FUN_080038d0();\n  }\n  else if (*(char *)((int)param + 0x3d) == '!') {\n    param[11] = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "process_param_08001684",
                "param_1": "param",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001684": {
                    "1": "check_and_modify_parameters",
                    "4": "handle_param",
                    "15": "process_param",
                    "2": "update_param"
                },
                "param_1": {
                    "1": "input_array",
                    "5": "params",
                    "3": "param_array",
                    "2": "param_list",
                    "6": "parameters",
                    "9": "param"
                },
                "FUN_080038d0": {
                    "2": "perform_action",
                    "1": "perform_task_a"
                },
                "FUNC_080015ba": {
                    "1": "handle_case2",
                    "4": "perform_action",
                    "2": "perform_action2"
                },
                "param_1[0xb]": {
                    "1": "param->status",
                    "3": "param[11]"
                },
                "param_1[0xc]": {
                    "1": "param_c",
                    "3": "param[12]"
                },
                "(*param_1)[1]": {
                    "1": "data_value[1]"
                },
                "(*param_1)[5]": {
                    "1": "value2"
                },
                "(*param_1)": {
                    "1": "ptr_input"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char1_value"
                },
                "**param_1": {
                    "1": "param_d"
                },
                "*param_1": {
                    "1": "param"
                },
                "FUN_080015ba": {
                    "1": "handle_exclamation"
                },
                "(uint *)0x4": {
                    "1": "value1"
                },
                "(uint *)0x8": {
                    "1": "value2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "addr_param_plus3d"
                },
                "(uint *)0xffff0000": {
                    "1": "new_value"
                },
                "0xfffff8ff": {
                    "1": "param1_mask"
                },
                "0xfffffbff": {
                    "1": "param2_mask"
                },
                "(uint *)0x0": {
                    "1": "null_value"
                },
                "0x20": {
                    "1": "space_character"
                },
                "0": {
                    "1": "zero_value"
                },
                "(uint *)0x21": {
                    "1": "another_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "current_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "next_char"
                },
                "*(char*)((int)param_1 + 0x3d)": {
                    "1": "value_at_addr_param_plus3d"
                },
                "*(undefined*)((int)param_1 + 0x3d)": {
                    "1": "byte_at_addr_param_plus3d"
                },
                "*(undefined*)((int)param_1 + 0x3e)": {
                    "1": "byte_at_addr_param_plus3e"
                },
                "0xb": {
                    "1": "param_b"
                },
                "0xc": {
                    "1": "param_c"
                }
            }
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 process_data_0800171a(uint **data)\n\n{\n  char char1;\n  uint *ptr;\n  \n  char1 = *(char *)((int)data + 0x3d);\n  ptr = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (char1 == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char1 == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char1 == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptr = data[9];\n          data[9] = (uint *)((int)ptr + 1);\n          (*data)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data",
                "cVar1": "char1",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800171a": {
                    "2": "parse_data",
                    "15": "process_data",
                    "1": "parse_and_execute_command",
                    "4": "process_param"
                },
                "param_1": {
                    "15": "data",
                    "3": "parameters",
                    "1": "param",
                    "2": "parameter"
                },
                "cVar1": {
                    "6": "first_char",
                    "4": "character",
                    "5": "char_val",
                    "8": "char1",
                    "1": "char_var"
                },
                "puVar2": {
                    "3": "pointer_var",
                    "1": "ptr_to_uint",
                    "2": "ptr_value",
                    "5": "ptr_var",
                    "8": "ptr"
                },
                "FUNC_08001718": {
                    "1": "process_func1",
                    "3": "perform_action1",
                    "2": "handle_at_symbol"
                },
                "FUNC_080015b6": {
                    "1": "process_data_alt",
                    "2": "handle_at_sign",
                    "3": "perform_action2"
                }
            }
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_param_08001864",
            "code": "\nundefined4 process_param_08001864(uint **param_array)\n\n{\n  uint *value_ptr;\n  \n  value_ptr = value;\n  if (*(char *)((int)param_array + 0x3d) == '!') {\n    if (*(short *)((int)param_array + 0x2a) == 0) {\n      if (((value_ptr == (uint *)0x4) || (value_ptr == (uint *)0x8)) || (value_ptr == (uint *)0xffff0000)) {\n        (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n        **param_array = **param_array | 0x200;\n        ptr_array = (uint *)0x0;\n        *(undefined *)((int)param_array + 0x3d) = 0x20;\n        if (*(char *)((int)param_array + 0x3e) == 'at_symbol') {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n        ptr_array = (uint *)0x11;\n        *(undefined *)((int)param_array + 0x3e) = 0;\n        *(undefined *)((int)param_array + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value_ptr = ptr_array;\n      ptr_array = (uint *)((int)value_ptr + 1);\n      (*param_array)[4] = (uint)*(byte *)value_ptr;\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_param_08001864",
                "param_1": "param_array",
                "puVar1": "value_ptr",
                "param_1[0xc]": "ptr_array",
                "@": "at_symbol",
                "param_1[9]": "ptr_array",
                "param_1[0xb]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001864": {
                    "1": "process_command",
                    "5": "process_input",
                    "2": "process_data",
                    "12": "process_param"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param",
                    "9": "param_array",
                    "4": "param_list",
                    "6": "parameters"
                },
                "puVar1": {
                    "1": "pointer_value",
                    "2": "var1",
                    "3": "value",
                    "5": "value_ptr"
                },
                "FUNC_08001718": {
                    "2": "handle_at_symbol",
                    "1": "handle_at_input",
                    "4": "perform_action1"
                },
                "FUNC_080015b6": {
                    "1": "execute_func_b",
                    "2": "process_default",
                    "4": "perform_action2"
                },
                "*param_1": {
                    "1": "input_array"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value1"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value1"
                },
                "(uint *)0x4": {
                    "1": "ptr_value1"
                },
                "(uint *)0x8": {
                    "1": "pointer8"
                },
                "(uint *)0xffff0000": {
                    "1": "pointer_ffff0000"
                },
                "(*param_1)[1]": {
                    "1": "first_element"
                },
                "(*param_1)[1] & 0xfffff8ff": {
                    "1": "modified_array_val1"
                },
                "**param_1": {
                    "1": "param1_value_2"
                },
                "**param_1 | 0x200": {
                    "1": "modified_array_val2"
                },
                "param_1[0xc]": {
                    "1": "ptr_array"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value1"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value"
                },
                "@": {
                    "1": "at_symbol"
                },
                "0x20": {
                    "1": "space_char"
                },
                "param_1[9]": {
                    "1": "ptr_array"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "modified_ptr_array"
                },
                "(*param_1)[4]": {
                    "1": "array_val3"
                },
                "(uint)*(byte *)puVar1": {
                    "1": "modified_array_val3"
                },
                "(int)param_1 + 0x2a": {
                    "1": "int_val"
                },
                "(int)param_1 + 0x3d": {
                    "1": "int_val2"
                },
                "(int)param_1 + 0x3e": {
                    "1": "int_val3"
                },
                "(uint *)0x0": {
                    "1": "pointer0"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_value2"
                },
                "0x0": {
                    "1": "null_ptr"
                },
                "0x11": {
                    "1": "eleventh_value"
                },
                "*(byte *)puVar1": {
                    "1": "byte_value"
                },
                "param_1[0xb]": {
                    "1": "value"
                },
                "param_1 + 0x3d": {
                    "1": "condition_char"
                },
                "param_1 + 0x2a": {
                    "1": "count"
                },
                "param_1 + 0x3e": {
                    "1": "next_char"
                }
            }
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_param_08001904",
            "code": "\nundefined4 process_param_08001904(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) < 2) {\n        **data = **data & 0xfffffbff;\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      temp_ptr = data[9];\n      data[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n      if (*(short *)((int)data + 0x2a) == 3) {\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "data",
                "puVar1": "temp_ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001904": {
                    "2": "parse_string",
                    "1": "process_param_data",
                    "5": "process_data",
                    "8": "process_param",
                    "7": "process_string"
                },
                "param_1": {
                    "2": "parameter",
                    "5": "data",
                    "1": "param_list",
                    "4": "param"
                },
                "puVar1": {
                    "1": "temp_var1",
                    "2": "ptr",
                    "11": "temp_ptr",
                    "3": "temp_var"
                },
                "FUNC_08001902": {
                    "1": "execute_function1",
                    "3": "handle_at_sign",
                    "7": "handle_at_symbol",
                    "2": "handle_at_character"
                },
                "FUNC_080015b8": {
                    "1": "handle_case2",
                    "2": "handle_other_symbol",
                    "3": "handle_default_case"
                }
            }
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_param_080019a0",
            "code": "\nundefined4 process_param_080019a0(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    temp_ptr = ptr_at_offset_9;\n    ptr_at_offset_9 = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    temp_ptr = ptr_at_offset_9;\n    ptr_at_offset_9 = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (counter - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    temp_ptr = ptr_at_offset_9;\n    ptr_at_offset_9 = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    temp_ptr = ptr_at_offset_9;\n    ptr_at_offset_9 = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    ptr_value = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    temp_ptr = ptr_at_offset_9;\n    ptr_at_offset_9 = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_param_080019a0",
                "param_1": "data",
                "puVar1": "temp_ptr",
                "param_1[9]": "ptr_at_offset_9",
                "(int)param_1[0xb]": "counter",
                "param_1[0xc]": "ptr_value",
                "param_1[0xb]": "array_ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080019a0": {
                    "2": "update_parameters",
                    "1": "update_data",
                    "6": "process_data",
                    "7": "process_param",
                    "3": "update_param"
                },
                "param_1": {
                    "1": "input_data",
                    "9": "data",
                    "2": "param_list",
                    "3": "parameters",
                    "4": "parameter",
                    "7": "param"
                },
                "puVar1": {
                    "1": "ptr1",
                    "4": "ptr",
                    "11": "temp_ptr",
                    "2": "temp_var1"
                },
                "FUNC_08001902": {
                    "1": "process_case_a",
                    "2": "reset_connection"
                },
                "FUNC_080015b8": {
                    "1": "alternative_function",
                    "3": "process_data",
                    "2": "handle_error"
                },
                "(*param_1)[1]": {
                    "1": "first_element"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "param_value_length"
                },
                "(*param_1)[4]": {
                    "1": "value2"
                },
                "param_1[9]": {
                    "1": "counter_ptr"
                },
                "*(char *)puVar1": {
                    "1": "char_at_temp_ptr"
                },
                "(uint *)((int)puVar1 + 1)": {
                    "1": "temp_ptr_plus_1"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decremented_value_at_offset_0x2a"
                },
                "(int)param_1[0xb] - 1U": {
                    "1": "value_at_offset_0xb_minus_1"
                },
                "**param_1": {
                    "1": "ptr_value_at_ptr_list"
                },
                "(*param_1)[1] & 0xfffffbff": {
                    "1": "first_element_with_masking"
                },
                "**param_1 & 0xfffffbff": {
                    "1": "ptr_value_at_ptr_list_with_masking"
                },
                "**param_1 | 0x100": {
                    "1": "ptr_value_at_ptr_list_with_or_0x100"
                },
                "**param_1 | 0x200": {
                    "1": "ptr_value_at_ptr_list_with_or_0x200"
                },
                "*(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "decrement_offset_0x2a"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_at_offset_0x3e"
                },
                "*(char *)((int)param_1 + 0x3e) == '@'": {
                    "1": "is_char_at_offset_0x3e_equal_to_at_symbol"
                },
                "(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_at_offset_0x3e"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_ptr"
                },
                "(char *)(*param_1)[4]": {
                    "1": "char_ptr"
                },
                "(int)param_1[0xb]": {
                    "1": "counter"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_var"
                },
                "(int)puVar1 + 1": {
                    "1": "temp_var"
                },
                "(int)param_1 + 0x3d": {
                    "1": "undefined_var"
                },
                "(int)param_1 + 0x3e": {
                    "1": "undefined_var1"
                },
                "(**param_1 & 0xfffffbff)": {
                    "1": "param3_value"
                },
                "(**param_1 | 0x100)": {
                    "1": "new_value1"
                },
                "(**param_1 | 0x200)": {
                    "1": "new_value2"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value"
                },
                "param_1[0xc]": {
                    "1": "temp_ptr2"
                },
                "param_1[0xb]": {
                    "1": "array_ptr"
                },
                "*param_1": {
                    "1": "array_value"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value"
                },
                "FUC_08001902": {
                    "1": "process_function1"
                },
                "FUC_080015b8": {
                    "1": "process_function2"
                }
            }
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_data_08001ab0",
            "code": "\nvoid process_data_08001ab0(uint **data)\n\n{\n  int result;\n  uint *ptr;\n  uint *temp_ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  temp_ptr2 = *data;\n  if ((temp_ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        ptr = data[9];\n        data[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)temp_ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        ptr = data[9];\n        data[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)temp_ptr2[4];\n      }\n      FUN_08003900(data);\n    }\n  }\n  else {\n    temp_ptr2[1] = temp_ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          temp_ptr2 = data[9];\n          data[9] = (uint *)((int)temp_ptr2 + 1);\n          *(char *)temp_ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    FUN_080038d0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "puVar2": "ptr",
                "puVar3": "temp_ptr2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001aac",
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001ab0": {
                    "2": "process_parameter",
                    "4": "process_input",
                    "10": "process_data",
                    "1": "improve_code",
                    "3": "process_function"
                },
                "param_1": {
                    "6": "input",
                    "8": "data",
                    "2": "input_data",
                    "4": "params",
                    "1": "function_params",
                    "3": "param"
                },
                "puVar2": {
                    "2": "char_ptr",
                    "1": "var2",
                    "4": "ptr2",
                    "6": "ptr"
                },
                "puVar3": {
                    "1": "pointer_var3",
                    "5": "ptr2",
                    "4": "ptr3",
                    "2": "pointer3"
                },
                "iVar1": {
                    "5": "return_value",
                    "1": "index",
                    "2": "status",
                    "22": "result"
                },
                "FUNC_08001aac": {
                    "1": "process_case1"
                },
                "FUN_08000f8c": {
                    "1": "process_case2"
                },
                "FUN_080038d0": {
                    "1": "perform_action3"
                },
                "FUN_08003900": {
                    "1": "process_case4"
                }
            }
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_data_08001bfc",
            "code": "\nundefined4 process_data_08001bfc(uint **data)\n\n{\n  char char_value;\n  uint *ptr1;\n  uint *ptr2;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((char_value == '(') || (char_value == '*')) || (char_value == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUN_080038d0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (char_value == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    FUN_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_data_08001bfc",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001bfc": {
                    "1": "improve_code",
                    "2": "decode_and_process_data",
                    "13": "process_data"
                },
                "param_1": {
                    "10": "data",
                    "5": "params",
                    "1": "parameter",
                    "2": "data_ptr",
                    "3": "input_data"
                },
                "cVar1": {
                    "10": "char_value",
                    "8": "character",
                    "1": "delimiter",
                    "3": "first_char",
                    "4": "char1",
                    "2": "char_var"
                },
                "puVar2": {
                    "1": "ptr2",
                    "2": "ptr_data",
                    "10": "ptr1",
                    "3": "ptr"
                },
                "puVar3": {
                    "2": "pointer_var2",
                    "1": "var2",
                    "11": "ptr2"
                },
                "FUN_08001ab0": {
                    "1": "process_condition_a"
                },
                "FUNC_0800160c": {
                    "1": "process_condition_b"
                },
                "FUN_080038d0": {
                    "1": "process_condition_c"
                }
            }
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_data_08001d00",
            "code": "\nvoid process_data_08001d00(int *data)\n\n{\n  int value;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  value = *data;\n  flag3 = *(uint *)(value + 0x18);\n  flag1 = *(uint *)(value + 0x14);\n  flag2 = *(uint *)(value + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          FUN_08001256(data);\n        }\n      }\n      else {\n        FUN_0800124a(data);\n      }\n    }\n    else {\n      FUN_080011c0(data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_08001904(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_080019a0(data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_0800171a(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001864(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_0800165a();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      FUN_08001bfc(data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_0800160e(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001440(data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        FUN_080015bc(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        FUN_08001420(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data",
                "iVar1": "value",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_0800160e",
                "FUN_08001256",
                "FUN_080015bc",
                "FUN_08001440",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800165a",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_0800171a",
                "FUN_080019a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001d00": {
                    "3": "process_input",
                    "20": "process_data",
                    "1": "process_flags",
                    "2": "process_function"
                },
                "param_1": {
                    "4": "input",
                    "18": "data",
                    "2": "input_data",
                    "1": "function_params"
                },
                "iVar1": {
                    "1": "action_pointer",
                    "12": "value",
                    "10": "ptr"
                },
                "uVar2": {
                    "1": "arg2",
                    "10": "flag1",
                    "3": "flags",
                    "9": "value1"
                },
                "uVar3": {
                    "1": "flags2",
                    "9": "value2",
                    "2": "permissions",
                    "3": "var2",
                    "10": "flag2"
                },
                "uVar4": {
                    "3": "var3",
                    "1": "flags3",
                    "10": "flag3",
                    "9": "value3"
                },
                "FUN_0800160e": {
                    "1": "perform_action1"
                },
                "FUN_08001256": {
                    "1": "reverse_flags"
                },
                "FUN_080015bc": {
                    "1": "improve_flags4"
                },
                "FUN_08001440": {
                    "1": "perform_action4"
                },
                "FUN_08001420": {
                    "1": "perform_operation"
                },
                "FUN_08001904": {
                    "1": "execute_command"
                },
                "FUN_080011c0": {
                    "1": "perform_action7"
                },
                "FUN_0800165a": {
                    "1": "perform_action8"
                },
                "FUN_0800124a": {
                    "1": "apply_transformation"
                },
                "FUN_08001864": {
                    "1": "perform_action10"
                },
                "FUN_08001bfc": {
                    "1": "process_config"
                },
                "FUN_0800171a": {
                    "1": "improve_config3"
                },
                "FUN_080019a0": {
                    "1": "improve_config2"
                },
                "FUn_08001256": {
                    "1": "reverse_bytes"
                }
            }
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_flags_08001e68",
            "code": "\nvoid update_flags_08001e68(uint **parameters)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *parameters;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      FUN_08001684(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    FUN_08001ab0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_flags_08001e68",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001e68": {
                    "1": "update_flags_and_perform_action",
                    "2": "update_flags_based_on_conditions",
                    "9": "update_flags",
                    "3": "process_flags",
                    "5": "update_flags_and_values"
                },
                "param_1": {
                    "2": "data",
                    "1": "status_flags",
                    "6": "params",
                    "8": "parameters",
                    "3": "param"
                },
                "cVar1": {
                    "1": "character_var",
                    "4": "char_value",
                    "14": "character",
                    "6": "char1",
                    "3": "char_var"
                },
                "puVar2": {
                    "1": "ptr_to_input_data",
                    "5": "pointer_var",
                    "3": "ptr_param",
                    "7": "pointer",
                    "8": "ptr",
                    "2": "pointer_value"
                },
                "uVar3": {
                    "2": "flag_value1",
                    "1": "flags1",
                    "11": "flag1",
                    "12": "value1"
                },
                "uVar4": {
                    "1": "value_two",
                    "2": "flag_value2",
                    "12": "value2",
                    "11": "flag2"
                },
                "FUN_08001684": {
                    "1": "execute_action"
                },
                "FUN_08001ab0": {
                    "1": "perform_operation"
                }
            }
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "initialize_and_check_status_08001f9c",
            "code": "\n\n\nundefined4 initialize_and_check_status_08001f9c(void)\n\n{\n  int initial_value;\n  int current_time;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initial_value = FUN_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initial_value = FUN_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_time = FUN_08000e30();\n      } while ((uint)(current_time - initial_value) < 0x3e9);\n      return 3;\n    }\n    current_time = FUN_08000e30();\n  } while ((uint)(current_time - initial_value) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "initialize_and_check_status_08001f9c",
                "iVar1": "initial_value",
                "iVar2": "current_time"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f9c": {
                    "1": "initialize_process",
                    "2": "initialize_flags",
                    "7": "initialize_and_check_status",
                    "3": "initialize_system"
                },
                "FUN_08000e30": {
                    "1": "get_time_difference",
                    "3": "get_elapsed_time"
                },
                "iVar1": {
                    "1": "initial_status",
                    "5": "initial_time",
                    "2": "initial_timestamp",
                    "8": "start_time",
                    "13": "initial_value"
                },
                "iVar2": {
                    "2": "updated_value",
                    "1": "current_delay",
                    "13": "current_time",
                    "10": "current_value"
                },
                "_DAT_40023840": {
                    "1": "system_flags"
                },
                "_DAT_420e0040": {
                    "1": "flag_register",
                    "2": "flag2"
                },
                "_DAT_40007004": {
                    "2": "status_register",
                    "1": "system_status"
                },
                "_DAT_420e0044": {
                    "1": "flag_3",
                    "2": "flag3"
                }
            }
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "process_flags_0800201c",
            "code": "\n\n\nundefined4 process_flags_0800201c(uint *parameters)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_condition_met;\n  \n  if (parameters == (uint *)0x0) {\n    return 1;\n  }\n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (parameters[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (parameters[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        start_time = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_time = FUN_08000e30();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_time = FUN_08000e30();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (parameters[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | parameters[4] << 3;\n    }\n    else if (parameters[3] == 0) {\n      _DAT_42470000 = 0;\n      start_time = FUN_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      start_time = FUN_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | parameters[4] << 3;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[5] == 0) {\n      _DAT_42470e80 = 0;\n      start_time = FUN_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      start_time = FUN_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    is_condition_met = (_DAT_40023840 & 0x10000000) == 0;\n    if (is_condition_met) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = FUN_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_08000e30();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (parameters[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (parameters[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (parameters[2] == 0) {\n      start_time = FUN_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_time = FUN_08000e30();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_time = FUN_08000e30();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_condition_met) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (parameters[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameters[6] == 2) {\n    _DAT_42470060 = 0;\n    start_time = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             parameters[7] | parameters[8] | parameters[9] << 6 | ((parameters[10] >> 1) - 1) * 0x10000 |\n             parameters[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        start_time = FUN_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = FUN_08000e30();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = FUN_08000e30();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    start_time = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = FUN_08000e30();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "process_flags_0800201c",
                "param_1": "parameters",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "is_condition_met"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800201c": {
                    "1": "improve_code",
                    "2": "process_flags"
                },
                "param_1": {
                    "2": "input_data",
                    "4": "flags",
                    "1": "settings",
                    "5": "params",
                    "3": "parameter",
                    "6": "parameters"
                },
                "iVar1": {
                    "1": "start_value",
                    "3": "initial_time",
                    "20": "start_time",
                    "2": "initial_value"
                },
                "iVar2": {
                    "1": "end_value",
                    "20": "current_time",
                    "3": "end_time",
                    "2": "current_value"
                },
                "uVar3": {
                    "1": "<return_value>",
                    "25": "result",
                    "4": "return_value"
                },
                "bVar4": {
                    "6": "is_condition_met",
                    "1": "is_bit_clear",
                    "3": "is_flag_set",
                    "2": "is_bit_set"
                },
                "_DAT_40023808": {
                    "1": "register_value",
                    "6": "register1"
                },
                "_DAT_40023804": {
                    "1": "flag2",
                    "6": "register2"
                },
                "_DAT_40023800": {
                    "1": "gpio_reg3",
                    "2": "control_register",
                    "6": "register3"
                },
                "_DAT_40023840": {
                    "1": "config_flags",
                    "3": "register4"
                },
                "_DAT_40007000": {
                    "1": "global_register3",
                    "3": "register5"
                },
                "_DAT_40023870": {
                    "1": "register_7_data",
                    "3": "register6"
                },
                "_DAT_40023874": {
                    "1": "gpio_reg6",
                    "3": "register7"
                },
                "_DAT_42470000": {
                    "1": "gpio_reg8",
                    "4": "register8"
                },
                "_DAT_42470e80": {
                    "1": "register_9_data",
                    "4": "register9"
                },
                "_DAT_42470060": {
                    "1": "gpio_reg10",
                    "4": "register10"
                },
                "_DAT_40423800": {
                    "1": "register4"
                },
                "FUN_08000e30": {
                    "2": "get_time",
                    "1": "get_current_time"
                }
            }
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_clock_speed_080023b4",
            "code": "\n\n\nuint calculate_clock_speed_080023b4(void)\n\n{\n  undefined4 input_parameter;\n  uint clock_speed;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    clock_speed = (_DAT_40023804 << 0x11) >> 0x17;\n    clock_speed = FUN_080002d0(clock_speed * 16000000,\n                         (((uint)(clock_speed * 0x20 < clock_speed) * -0x3f -\n                          (uint)(clock_speed * 0x7c0 < clock_speed * 0x1f)) * 8 +\n                         (uint)CARRY4(clock_speed * 0x3d08,clock_speed)) * 0x400 | clock_speed * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  else {\n    clock_speed = (_DAT_40023804 << 0x11) >> 0x17;\n    clock_speed = FUN_080002d0(clock_speed * 8000000,\n                         (((uint)(clock_speed * 0x20 < clock_speed) * -0x3f -\n                          (uint)(clock_speed * 0x7c0 < clock_speed * 0x1f)) * 8 +\n                         (uint)CARRY4(clock_speed * 0x3d08,clock_speed)) * 0x200,_DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  return clock_speed / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_clock_speed_080023b4",
                "in_r3": "input_parameter",
                "uVar1": "clock_speed"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080023b4": {
                    "7": "calculate_frequency",
                    "2": "get_clock_frequency",
                    "14": "calculate_clock_speed",
                    "1": "calculate_system_clock_speed",
                    "3": "calculate_clock_frequency"
                },
                "in_r3": {
                    "5": "input_parameter",
                    "1": "additional_parameter",
                    "3": "unused_parameter",
                    "2": "parameter"
                },
                "uVar1": {
                    "1": "calculated_clock_speed",
                    "4": "frequency",
                    "2": "calculated_value",
                    "3": "clock_frequency",
                    "7": "result",
                    "10": "clock_speed"
                },
                "_DAT_40023808": {
                    "1": "input_flags",
                    "5": "register_value1",
                    "4": "register1"
                },
                "_DAT_40023804": {
                    "1": "control_register2",
                    "5": "register_value2",
                    "4": "register2"
                },
                "FUN_080002d0": {
                    "1": "calculate_output"
                },
                "_FUNC_080023b4": {
                    "1": "calculate_frequency"
                },
                "_PARAM_1": {
                    "1": "input_parameter"
                },
                "_PARAM_2": {
                    "1": "flag"
                },
                "_VAR_1": {
                    "1": "result"
                },
                "_VAR_2": {
                    "1": "temp_var"
                },
                "_VAR_3": {
                    "1": "carry"
                },
                "_VAR_4": {
                    "1": "shifted_var"
                },
                "_VAR_5": {
                    "1": "mask"
                },
                "_VAR_6": {
                    "1": "in_r3"
                },
                "param_1": {
                    "1": "input_value1"
                },
                "param_2": {
                    "1": "input_value2"
                },
                "param_3": {
                    "1": "input_value3"
                },
                "param_4": {
                    "1": "input_value4"
                }
            }
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_device_08002488",
            "code": "\n\n\nundefined4 configure_device_08002488(uint *config_params,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint status;\n  \n  if (config_params == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < config_size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    if ((*config_params & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config_params & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | setting2_value;\n  }\n  if ((*config_params & 1) != 0) {\n    status = setting1_value;\n    if (status == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (status - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = status | _DAT_40023808 & 0xfffffffc;\n    start_time = FUN_08000e30();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == setting1_value * 4) break;\n      current_time = FUN_08000e30();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (config_size < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config_mask_1;\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config_mask_2 << 3;\n  }\n  status = FUN_080023b4();\n  DAT_2000002c = status >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_device_08002488",
                "param_1": "config_params",
                "param_2": "config_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "status",
                "param_1[2]": "setting2_value",
                "param_1[1]": "setting1_value",
                "param_1[3]": "config_mask_1",
                "param_1[4]": "config_mask_2"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_080023b4",
                "FUN_08000e30",
                "FUN_08000d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002488": {
                    "4": "configure_hardware",
                    "3": "initialize_hardware",
                    "1": "update_settings",
                    "6": "initialize_system",
                    "7": "configure_device",
                    "2": "initialize_configuration",
                    "5": "initialize_device"
                },
                "param_1": {
                    "1": "configuration",
                    "4": "config",
                    "2": "config_flags",
                    "3": "device_settings",
                    "10": "config_params"
                },
                "param_2": {
                    "2": "config_length",
                    "1": "limit",
                    "3": "num_params",
                    "4": "config_size"
                },
                "iVar1": {
                    "24": "start_time",
                    "1": "start_timestamp"
                },
                "iVar2": {
                    "1": "current",
                    "19": "current_time",
                    "4": "end_time"
                },
                "uVar3": {
                    "3": "flag",
                    "1": "config_option",
                    "2": "config_value",
                    "8": "status",
                    "4": "result"
                },
                "FUN_080023b4": {
                    "1": "get_value_from_hardware",
                    "2": "get_device_status"
                },
                "FUN_08000e30": {
                    "1": "get_elapsed_ticks",
                    "2": "delay",
                    "4": "get_elapsed_time"
                },
                "FUN_08000d98": {
                    "4": "set_mode",
                    "2": "set_system_mode",
                    "1": "set_flags"
                },
                "_DAT_40023c00": {
                    "1": "hardware_config_mask",
                    "2": "system_config"
                },
                "DAT_40023c00_1": {
                    "1": "hardware_config_1"
                },
                "_DAT_40023808": {
                    "1": "hardware_properties",
                    "2": "device_control"
                },
                "DAT_40023800": {
                    "1": "sensor_config"
                },
                "DAT_2000002c": {
                    "1": "data_result"
                },
                "DAT_08005dfc": {
                    "1": "clock_constant_array"
                },
                "CONCAT31(DAT_40023c00_1,(char)param_2)": {
                    "1": "updated_capability"
                },
                "(*param_1 & 2)": {
                    "1": "has_setting2"
                },
                "(*param_1 & 4)": {
                    "1": "has_setting4"
                },
                "(*param_1 & 8)": {
                    "1": "has_setting8"
                },
                "param_1[2]": {
                    "1": "config_flags"
                },
                "(*param_1 & 1)": {
                    "1": "has_setting1"
                },
                "param_1[1]": {
                    "1": "config_type"
                },
                "_DAT_40023800": {
                    "1": "device_register_2"
                },
                "5000": {
                    "1": "max_time_difference"
                },
                "(&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c]": {
                    "1": "shift_amount"
                },
                "_DAT_40023c00_1": {
                    "1": "hardware_config_value"
                },
                "FtRead": {
                    "1": "read_flag"
                },
                "FtWrite": {
                    "1": "write_flag"
                },
                "FtWait": {
                    "1": "wait_flag"
                },
                "DmTmsRead": {
                    "1": "read_tms_flag"
                },
                "DmTmsWrite": {
                    "1": "write_tms_flag"
                },
                "DmShift": {
                    "1": "shift_tms"
                },
                "param_1[3]": {
                    "1": "config_mask_1"
                },
                "param_1[4]": {
                    "1": "config_mask_2"
                },
                "DAT_40023c00": {
                    "1": "system_config"
                },
                "DAT_40023808": {
                    "1": "hardware_config"
                }
            }
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_080025e0",
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "calling": [
                "FUN_080025ec",
                "FUN_0800260c",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025e0": {
                    "1": "get_dat_value",
                    "2": "get_constant_value",
                    "10": "get_data_value",
                    "11": "get_data"
                },
                "DAT_2000002c": {
                    "9": "data",
                    "2": "global_variable",
                    "1": "data_from_memory",
                    "3": "data_value"
                }
            }
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "shifted_value_080025ec",
            "code": "\n\n\nuint shifted_value_080025ec(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "shifted_value_080025ec",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025ec": {
                    "1": "get_shifted_value",
                    "2": "calculate_shifted_value",
                    "5": "shifted_value",
                    "3": "shift_and_return"
                },
                "FUN_080025e0": {
                    "1": "get_input",
                    "7": "get_value",
                    "3": "get_initial_value",
                    "2": "get_unsigned_value",
                    "6": "get_original_value"
                },
                "uVar1": {
                    "1": "input_result",
                    "2": "value",
                    "6": "result"
                },
                "DAT_08005e0c": {
                    "1": "bit_mask",
                    "3": "shift_table"
                },
                "_DAT_40023808": {
                    "1": "constant_value",
                    "9": "input_value",
                    "2": "input_data"
                },
                "&DAT_08005e0c": {
                    "1": "bit_shift_array",
                    "2": "shift_table"
                },
                "FUNG_080025ec": {
                    "1": "extract_and_shift"
                }
            }
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "shifted_value_0800260c",
            "code": "\n\n\nuint shifted_value_0800260c(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "shifted_value_0800260c",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800260c": {
                    "1": "shift_and_return",
                    "4": "shifted_value",
                    "2": "get_shifted_value"
                },
                "FUN_080025e0": {
                    "5": "get_value",
                    "1": "get_data",
                    "2": "get_return_value",
                    "6": "get_initial_value",
                    "4": "get_original_value"
                },
                "uVar1": {
                    "1": "value",
                    "5": "result"
                },
                "_DAT_40023808": {
                    "1": "original_value",
                    "4": "input_value",
                    "2": "input_data"
                },
                "DAT_08005e0c": {
                    "2": "shift_amount"
                },
                "&DAT_08005e0c": {
                    "1": "shift_lookup_table",
                    "2": "shift_value"
                },
                "d1": {
                    "1": "shift_amount"
                }
            }
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "initialize_flags_0800262c",
            "code": "\n\n\nvoid initialize_flags_0800262c(int *flags)\n\n{\n  if (((*(uint *)(*flags + 0xc) & 0x100) != 0) && ((*(uint *)(*flags + 8) & 0x1000) != 0)) {\n    FUN_08003594();\n    *(uint *)(*flags + 0xc) = *(uint *)(*flags + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*flags + 0xc) & 0x200) != 0) && ((*(uint *)(*flags + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(flags);\n    *(uint *)(*flags + 0xc) = *(uint *)(*flags + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)flags + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "initialize_flags_0800262c",
                "param_1": "flags"
            },
            "calling": [],
            "called": [
                "FUN_0800268c",
                "FUN_08003594"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800262c": {
                    "2": "update_flags",
                    "1": "process_flags",
                    "17": "initialize_flags"
                },
                "param_1": {
                    "1": "param",
                    "2": "flag_array",
                    "13": "flags"
                },
                "FUN_08003594": {
                    "2": "enable_interrupts",
                    "1": "perform_initialization",
                    "6": "perform_action1"
                },
                "FUNC_0800268c": {
                    "1": "handle_flag1",
                    "2": "set_flag_b",
                    "6": "perform_action2"
                },
                "_DAT_40013c14": {
                    "1": "flag_value"
                },
                "DAT_40013c14": {
                    "1": "some_data"
                },
                "<int>": {
                    "1": "temp"
                },
                "FUN_0800268c": {
                    "1": "process_flag2"
                },
                "0xc": {
                    "1": "flag_register"
                },
                "0x100": {
                    "1": "flag_1"
                },
                "0x8": {
                    "1": "register"
                },
                "0x1000": {
                    "1": "flag_2"
                },
                "0x200": {
                    "1": "flag_3"
                },
                "0x2000": {
                    "1": "flag_4"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag1"
                },
                "*(uint *)(*param_1 + 8)": {
                    "1": "flag2"
                },
                "*param_1": {
                    "1": "function_pointer"
                },
                "*(undefined *)((int)param_1 + 0x1d)": {
                    "1": "variable3"
                }
            }
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_data_0800268e",
            "code": "\nvoid update_data_0800268e(uint **data)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)data + 0x39) = 2;\n  ptr = *data;\n  if ((flag & 0x1111) == 0) {\n    if ((flag & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  FUN_0800340c(data);\n  *(undefined *)((int)data + 0x39) = 0;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_data_0800268e",
                "param_1": "data",
                "puVar1": "ptr",
                "puVar1[8]": "flag"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800268e": {
                    "1": "update_value_and_call_function",
                    "2": "update_data_array",
                    "5": "update_data",
                    "4": "update_flags_and_call_function"
                },
                "param_1": {
                    "1": "input_data",
                    "7": "data",
                    "2": "input_pointer",
                    "3": "param",
                    "4": "parameters"
                },
                "puVar1": {
                    "1": "value_pointer",
                    "2": "value_ptr",
                    "3": "pointer",
                    "7": "ptr",
                    "4": "pointer1"
                },
                "FUN_0800340c": {
                    "7": "process_data",
                    "1": "process_param1",
                    "3": "execute_sub_function"
                },
                "*(undefined *)((int)parameters + 0x39)": {
                    "1": "status_flag"
                },
                "puVar1[8]": {
                    "1": "flag"
                },
                "*puVar1": {
                    "1": "value"
                },
                "PTR_0800340c": {
                    "1": "ptr_process_data"
                }
            }
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid process_flags_080026ce(int *input_array)\n\n{\n  int value;\n  \n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(input_array + 6) = 1;\n    if ((*(uint *)(*input_array + 0x18) & 3) == 0) {\n      FUN_08003754();\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(input_array + 6) = 2;\n    if ((*(uint *)(*input_array + 0x18) & 0x300) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(input_array + 6) = 4;\n    if ((*(uint *)(*input_array + 0x1c) & 3) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(input_array + 6) = 8;\n    if ((*(uint *)(*input_array + 0x1c) & 0x300) == 0) {\n      FUN_08003754(input_array);\n      FUNC_080026ca(input_array);\n    }\n    else {\n      FUNC_080026c8(input_array);\n    }\n    *(undefined *)(input_array + 6) = 0;\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    FUN_0800376e(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(input_array);\n  }\n  value = *input_array;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(input_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "input_array",
                "iVar1": "value"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800293c",
                "FUN_080026c8",
                "FUN_08003754",
                "FUN_080026ca",
                "FUN_0800293e",
                "FUN_0800376e",
                "FUN_080026cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080026ce": {
                    "2": "process_function",
                    "1": "process_conditions",
                    "5": "process_data",
                    "4": "check_and_process_flags",
                    "8": "process_flags"
                },
                "param_1": {
                    "1": "param",
                    "5": "data",
                    "6": "input_array",
                    "4": "flags",
                    "2": "parameter"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "2": "current_flag",
                    "13": "value",
                    "3": "current_value"
                },
                "FUN_08003754": {
                    "1": "check_and_process_flag_combinations",
                    "2": "perform_action1",
                    "5": "check_condition"
                },
                "FUNC_080026ca": {
                    "1": "perform_action_b",
                    "2": "handle_case2"
                },
                "FUNC_080026c8": {
                    "1": "handle_case2",
                    "2": "handle_case1"
                },
                "FUN_0800376e": {
                    "1": "execute_case2",
                    "2": "reverse_data"
                },
                "FUNC_0800293e": {
                    "2": "reverse_action",
                    "1": "cleanup_data"
                },
                "FUNC_0800293c": {
                    "1": "reverse_action_type5"
                },
                "FUNC_080026cc": {
                    "1": "perform_operation_c"
                },
                "FUNC_0800376e": {
                    "1": "perform_special_operation"
                },
                "FUNCTION_08003754": {
                    "1": "perform_operation_a"
                },
                "FUNCTION_0800376e": {
                    "1": "perform_operation_d"
                },
                "FUNCTION_0800293c": {
                    "1": "perform_operation_g"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "flag_value"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "flag2"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "flag_result"
                },
                "*(undefined *)(param_1 + 6)": {
                    "2": "status",
                    "1": "flag_state"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "value2"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "condition_2"
                },
                "(uint *)(*param_1 + 0x18)": {
                    "1": "check_value1"
                },
                "(uint *)(*param_1 + 0x1c)": {
                    "1": "check_value2"
                },
                "F_0800293c": {
                    "1": "reverse_action1"
                },
                "F_0800293e": {
                    "1": "reverse_action3"
                },
                "PTR_080026ce": {
                    "1": "param1_pointer"
                },
                "PTR_0800293c": {
                    "1": "reverse_variable1_pointer"
                },
                "PTR_08002738": {
                    "1": "reverse_variable2_pointer"
                },
                "PTR_080072d8": {
                    "1": "reverse_variable3_pointer"
                },
                "PTR_08007830": {
                    "1": "reverse_variable4_pointer"
                },
                "PTR_08008e1c": {
                    "1": "reverse_variable5_pointer"
                },
                "PTR_08009e50": {
                    "1": "reverse_variable6_pointer"
                },
                "PTR_08009e98": {
                    "1": "reverse_variable7_pointer"
                },
                "PTR_08009ff4": {
                    "1": "reverse_variable8_pointer"
                },
                "PTR_0800a000": {
                    "1": "reverse_variable9_pointer"
                },
                "PTR_0800a25c": {
                    "1": "reverse_variable10_pointer"
                },
                "PTR_0800abcd": {
                    "1": "reverse_variable11_pointer"
                },
                "PTR_0800e674": {
                    "1": "reverse_variable12_pointer"
                },
                "PTR_0800e8b4": {
                    "1": "reverse_variable13_pointer"
                },
                "PTR_0800e8c0": {
                    "1": "reverse_variable14_pointer"
                },
                "PTR_0800f63c": {
                    "1": "reverse_variable15_pointer"
                },
                "PTR_0800f964": {
                    "1": "reverse_variable16_pointer"
                },
                "PTR_0800fae8": {
                    "1": "reverse_variable17_pointer"
                },
                "PTR_0800fb50": {
                    "1": "reverse_variable18_pointer"
                },
                "PTR_080100d0": {
                    "1": "reverse_variable19_pointer"
                },
                "PTR_080100d4": {
                    "1": "reverse_variable20_pointer"
                },
                "PTR_08010944": {
                    "1": "reverse_variable21_pointer"
                },
                "PTR_08010990": {
                    "1": "reverse_variable22_pointer"
                },
                "PTR_08010f84": {
                    "1": "reverse_variable23_pointer"
                },
                "PTR_08010f88": {
                    "1": "reverse_variable24_pointer"
                },
                "PTR_08011364": {
                    "1": "reverse_variable25_pointer"
                },
                "PTR_0801212c": {
                    "1": "reverse_variable26_pointer"
                },
                "PTR_080122f4": {
                    "1": "reverse_variable27_pointer"
                },
                "PTR_08012ae4": {
                    "1": "reverse_variable28_pointer"
                },
                "PTR_08012af4": {
                    "1": "reverse_variable29_pointer"
                },
                "PTR_08012ba4": {
                    "1": "reverse_variable30_pointer"
                },
                "PTR_08012ba8": {
                    "1": "reverse_variable31_pointer"
                },
                "PTR_08012bac": {
                    "1": "reverse_variable32_pointer"
                },
                "PTR_080141bc": {
                    "1": "reverse_variable33_pointer"
                },
                "PTR_080146e8": {
                    "1": "reverse_variable34_pointer"
                },
                "PTR_08014724": {
                    "1": "reverse_variable35_pointer"
                },
                "PTR_08015264": {
                    "1": "reverse_variable36_pointer"
                },
                "PTR_08016f38": {
                    "1": "reverse_variable37_pointer"
                },
                "PTR_08016fc4": {
                    "1": "reverse_variable38_pointer"
                },
                "PTR_080173b8": {
                    "1": "reverse_variable39_pointer"
                },
                "PTR_08017410": {
                    "1": "reverse_variable40_pointer"
                },
                "PTR_080174c8": {
                    "1": "reverse_variable41_pointer"
                },
                "PTR_080175a4": {
                    "1": "reverse_variable42_pointer"
                },
                "DAT_080100c0": {
                    "1": "reverse_constant1"
                },
                "DAT_080100c1": {
                    "1": "reverse_constant2"
                }
            }
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_08002848",
            "code": "\nvoid update_bit_08002848(int base_address,unsigned_integer_data bit_position,int new_value)\n\n{\n  *(unsigned_integer_data *)(base_address + 0x20) = *(unsigned_integer_data *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(unsigned_integer_data *)(base_address + 0x20) = *(unsigned_integer_data *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_integer_data"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002848": {
                    "1": "update_flags",
                    "4": "update_bit_value",
                    "7": "update_bit",
                    "2": "update_bit_at_position"
                },
                "param_1": {
                    "2": "data_address",
                    "4": "data",
                    "1": "array_address",
                    "17": "base_address"
                },
                "param_2": {
                    "1": "index",
                    "27": "bit_position"
                },
                "param_3": {
                    "1": "value",
                    "18": "new_value",
                    "11": "bit_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "flags"
                },
                "(param_2 & 0xff)": {
                    "1": "bit_mask"
                },
                "uint": {
                    "1": "unsigned_integer_data"
                },
                "arrayStartAddress": {
                    "1": "array"
                },
                "bitPosition": {
                    "1": "position"
                },
                "newValue": {
                    "1": "bit_value"
                },
                "<original_function_name>": {
                    "1": "update_bits"
                },
                "<param_1>": {
                    "1": "data"
                },
                "<param_2>": {
                    "1": "bit_position"
                },
                "<param_3>": {
                    "1": "bit_value"
                }
            }
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_memory_08002864",
            "code": "\nundefined4 update_memory_08002864(uint **memory,undefined4 value)\n\n{\n  bool is_special_address;\n  uint *ptr;\n  \n  FUN_08002848(*memory,value,0);\n  ptr = *memory;\n  if (ptr == (uint *)0x40010000) {\n    is_special_address = true;\n  }\n  else if (ptr == (uint *)0x40010400) {\n    is_special_address = true;\n  }\n  else {\n    is_special_address = false;\n  }\n  if (((is_special_address) && ((pointer[8] & 0x1111) == 0)) && ((pointer[8] & 0x444) == 0)) {\n    pointer[17] = pointer[17] & 0xffff7fff;\n  }\n  ptr = *memory;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)memory + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_memory_08002864",
                "param_1": "memory",
                "param_2": "value",
                "bVar1": "is_special_address",
                "puVar2": "ptr",
                "puVar2[8]": "pointer[8]",
                "puVar2[0x11]": "pointer[17]"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002864": {
                    "2": "check_and_update_flags",
                    "1": "update_flags_and_set_bit",
                    "3": "update_flags_and_values",
                    "4": "update_memory"
                },
                "param_1": {
                    "5": "memory",
                    "1": "memory_value",
                    "2": "memory_region",
                    "4": "memory_pointer"
                },
                "param_2": {
                    "4": "flag",
                    "1": "param",
                    "20": "value",
                    "2": "size"
                },
                "bVar1": {
                    "2": "is_special_region",
                    "1": "is_special_data",
                    "3": "is_special",
                    "7": "is_special_address"
                },
                "puVar2": {
                    "1": "current_location",
                    "2": "address",
                    "4": "pointer",
                    "5": "ptr"
                },
                "FUN_08002848": {
                    "1": "update_flags",
                    "2": "process_data"
                },
                "param_3": {
                    "1": "condition"
                },
                "puVar2[8]": {
                    "1": "pointer[8]"
                },
                "pointer": {
                    "1": "memory"
                },
                "puVar2[0x11]": {
                    "1": "pointer[17]"
                },
                "*puVar2": {
                    "1": "value_at_ptr"
                },
                "ptrObj[8]": {
                    "1": "flags"
                },
                "ptrObj[0x11]": {
                    "1": "flag_value"
                },
                "(int)param_1 + 0x39": {
                    "1": "value_addr"
                },
                "param_1[0]": {
                    "1": "pointer_value"
                },
                "param_1[8]": {
                    "1": "flags_value"
                }
            }
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bit_value_080028d4",
            "code": "\nvoid update_bit_value_080028d4(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bit_value_080028d4",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028d4": {
                    "1": "update_bitfield",
                    "2": "update_flags",
                    "4": "update_value",
                    "3": "update_register",
                    "6": "update_bit_value"
                },
                "param_1": {
                    "1": "register_base",
                    "2": "register_address",
                    "25": "base_address"
                },
                "param_2": {
                    "10": "bit_offset",
                    "16": "bit_position",
                    "3": "bit_index",
                    "1": "index"
                },
                "param_3": {
                    "1": "original_value",
                    "20": "new_value",
                    "3": "value",
                    "6": "bit_value"
                },
                "4": {
                    "1": "flag_mask"
                },
                "0x20": {
                    "1": "flags_address"
                },
                "(param_1 + 0x20)": {
                    "1": "target_address"
                },
                "(param_2 & 0xff)": {
                    "1": "effective_bit"
                },
                "4 << (param_2 & 0xff)": {
                    "1": "clear_mask"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "register_value"
                }
            }
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_flags_and_values_080028f0",
            "code": "\nundefined4 update_flags_and_values_080028f0(uint **data,undefined4 value)\n\n{\n  uint *ptr;\n  \n  FUN_080028d4(*data,value,0);\n  ptr = *data;\n  if (((pointer_param[8] & 0x1111) == 0) && ((pointer_param[8] & 0x444) == 0)) {\n    pointer_param[17] = pointer_param[17] & 0xffff7fff;\n  }\n  ptr = *data;\n  if (((pointer_param[8] & 0x1111) == 0) && ((pointer_param[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_flags_and_values_080028f0",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "ptr",
                "puVar1[8]": "pointer_param[8]",
                "puVar1[0x11]": "pointer_param[17]"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028f0": {
                    "1": "update_values",
                    "2": "update_data",
                    "9": "update_flags_and_values",
                    "3": "improve_code"
                },
                "param_1": {
                    "1": "value1",
                    "4": "data",
                    "2": "input_data",
                    "3": "param1"
                },
                "param_2": {
                    "3": "flag",
                    "5": "param_value",
                    "4": "param2",
                    "1": "param_2",
                    "2": "input_value",
                    "10": "value"
                },
                "puVar1": {
                    "2": "current_pointer",
                    "1": "ptr_array",
                    "3": "ptr_data",
                    "6": "ptr"
                },
                "FUN_080028d4": {
                    "1": "perform_operation",
                    "4": "process_data",
                    "2": "update_values"
                },
                "param_3": {
                    "1": "param_3",
                    "3": "param3",
                    "2": "index"
                },
                "puVar1[8]": {
                    "1": "pointer_param[8]"
                },
                "puVar1[0x11]": {
                    "1": "pointer_param[17]"
                },
                "*puVar1": {
                    "1": "dereferenced_pointer"
                },
                "param_1[8]": {
                    "1": "array_ptr[8]"
                }
            }
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_flags_08002940",
            "code": "\nvoid clear_flags_08002940(int *flags)\n\n{\n  *(unsigned_int *)(*flags + 0xc) = *(unsigned_int *)(*flags + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*flags + 0x14) = *(unsigned_int *)(*flags + 0x14) & 0xfffffffe;\n  *(undefined_byte *)((int)flags + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "param_1": "flags",
                "uint": "unsigned_int",
                "undefined": "undefined_byte"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002940": {
                    "1": "update_flags_and_values",
                    "2": "update_data",
                    "7": "clear_flags",
                    "4": "update_values"
                },
                "param_1": {
                    "2": "memory_address",
                    "3": "memory_pointer",
                    "1": "memory_array",
                    "5": "flags"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_at_offset_c",
                    "2": "flag1",
                    "9": "value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "status_flag2",
                    "9": "value2",
                    "2": "flag2"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "6": "flag",
                    "1": "character_set"
                },
                "*param_1": {
                    "1": "param",
                    "2": "value"
                },
                "0xc": {
                    "1": "flag_address_offset",
                    "3": "offset1"
                },
                "0x14": {
                    "1": "bitmask2",
                    "3": "offset2"
                },
                "0x3a": {
                    "1": "some_variable_address_offset"
                },
                "(int)param_1 + 0x3a": {
                    "1": "offset"
                },
                "PTR_0xc": {
                    "1": "flag1"
                },
                "PTR_0x14": {
                    "1": "flag2"
                },
                "uint": {
                    "1": "unsigned_int"
                },
                "undefined": {
                    "1": "undefined_byte"
                },
                "0xfffffedf": {
                    "1": "mask1"
                },
                "0xfffffffe": {
                    "1": "mask2"
                },
                "0x20": {
                    "1": "value"
                },
                "*param_1 + 0xc": {
                    "1": "value1_address"
                },
                "*param_1 + 0x14": {
                    "1": "value2_address"
                }
            }
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 process_data_0800295c(int *data)\n\n{\n  short remaining_iterations;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (param2_value == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)param8_value & 0x1ff;\n    if (param4_value == 0) {\n      param8_value = param8_value + 2;\n    }\n    else {\n      param8_value = param8_value + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)param8_value;\n    param8_value = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  remaining_iterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "remaining_iterations",
                "pbVar2": "byte_ptr",
                "param_1[2]": "param2_value",
                "param_1[4]": "param4_value",
                "param_1[8]": "param8_value"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800295c": {
                    "1": "parse_data",
                    "3": "process_input",
                    "16": "process_data",
                    "2": "decode_data"
                },
                "param_1": {
                    "1": "data_ptr",
                    "21": "data",
                    "2": "input_array",
                    "5": "input_data"
                },
                "sVar1": {
                    "3": "remaining_count",
                    "12": "remaining_iterations",
                    "1": "short_var1",
                    "7": "count",
                    "2": "decremented_value",
                    "5": "counter"
                },
                "pbVar2": {
                    "19": "byte_ptr",
                    "5": "byte_pointer",
                    "1": "byte_array",
                    "3": "byte_data"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "param_1[2]": {
                    "1": "value2"
                },
                "*param_1": {
                    "1": "data_ptr"
                },
                "*(ushort *)param_1[8]": {
                    "2": "short_value"
                },
                "param_1[4]": {
                    "1": "param4_value"
                },
                "param_1[8]": {
                    "1": "pointer_value"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_variable"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "data_ptr_value"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "address1"
                },
                "*(ushort *)param_1[8] & 0x1ff": {
                    "1": "masked_value"
                }
            }
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "update_configuration_080029c8",
            "code": "\nvoid update_configuration_080029c8(int *parameters)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int result10;\n  \n  *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffcfff | param1_3;\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffff69f3 | param1_2 | param1_4 | param1_5 | param1_7;\n  *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xfffffcff | param1_6;\n  if (param1_7 == 0x8000) {\n    result10 = *parameters;\n    if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n      result1 = FUN_080025ec();\n      result6 = param1_1;\n      result2 = FUN_080025ec();\n      result7 = param1_1;\n      result3 = FUN_080025ec();\n      result8 = param1_1;\n      result4 = FUN_080025ec();\n      result9 = param1_1;\n      result5 = FUN_080025ec();\n      *(uint *)(result10 + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                          (int)(((ulonglong)(uint)(result5 * 0x19) /\n                                (ulonglong)(uint)(param1_1 << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n             (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n      return;\n    }\n    result1 = FUN_0800260c();\n    result6 = param1_1;\n    result2 = FUN_0800260c();\n    result7 = param1_1;\n    result3 = FUN_0800260c();\n    result8 = param1_1;\n    result4 = FUN_0800260c();\n    result9 = param1_1;\n    result5 = FUN_0800260c();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(param1_1 << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n    return;\n  }\n  result10 = *parameters;\n  if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n    result1 = FUN_080025ec();\n    result6 = param1_1;\n    result2 = FUN_080025ec();\n    result7 = param1_1;\n    result3 = FUN_080025ec();\n    result8 = param1_1;\n    result4 = FUN_080025ec();\n    result9 = param1_1;\n    result5 = FUN_080025ec();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(param1_1 << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result1 = FUN_0800260c();\n  result6 = param1_1;\n  result2 = FUN_0800260c();\n  result7 = param1_1;\n  result3 = FUN_0800260c();\n  result8 = param1_1;\n  result4 = FUN_0800260c();\n  result9 = param1_1;\n  result5 = FUN_0800260c();\n  *(uint *)(result10 + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                      (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(param1_1 << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n         (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "update_configuration_080029c8",
                "param_1": "parameters",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "result10",
                "param_1[1]": "param1_1",
                "param_1[2]": "param1_2",
                "param_1[3]": "param1_3",
                "param_1[4]": "param1_4",
                "param_1[5]": "param1_5",
                "param_1[6]": "param1_6",
                "param_1[7]": "param1_7"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080029c8": {
                    "1": "update_config_values",
                    "2": "update_settings",
                    "6": "update_configuration",
                    "4": "update_values",
                    "3": "update_parameters"
                },
                "param_1": {
                    "4": "input_array",
                    "1": "configuration",
                    "2": "config_params",
                    "11": "parameters"
                },
                "iVar1": {
                    "22": "result1",
                    "9": "value1"
                },
                "iVar2": {
                    "9": "value2",
                    "22": "result2"
                },
                "iVar3": {
                    "9": "value3",
                    "22": "result3"
                },
                "iVar4": {
                    "9": "value4",
                    "22": "result4"
                },
                "iVar5": {
                    "22": "result5",
                    "9": "value5"
                },
                "iVar6": {
                    "9": "value6",
                    "22": "result6"
                },
                "iVar7": {
                    "9": "value7",
                    "22": "result7"
                },
                "iVar8": {
                    "9": "value8",
                    "22": "result8"
                },
                "iVar9": {
                    "22": "result9",
                    "9": "value9"
                },
                "iVar10": {
                    "1": "temp_var1",
                    "4": "value10",
                    "13": "result10"
                },
                "FUN_080025ec": {
                    "1": "calculate_value1"
                },
                "FUN_0800260c": {
                    "1": "get_adjusted_value"
                },
                "*param_1": {
                    "1": "registers"
                },
                "param_1[1]": {
                    "1": "param1_1"
                },
                "param_1[2]": {
                    "1": "param1_2"
                },
                "param_1[3]": {
                    "1": "param1_3"
                },
                "param_1[4]": {
                    "1": "param1_4"
                },
                "param_1[5]": {
                    "1": "param1_5"
                },
                "param_1[6]": {
                    "1": "param1_6"
                },
                "param_1[7]": {
                    "1": "param1_7"
                }
            }
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_conditions_08002d0c",
            "code": "\nundefined4 check_conditions_08002d0c(uint **pointer_array,uint mask,uint condition,int comparison_value,uint threshold)\n\n{\n  int result;\n  \n  do {\n    if (((mask & ~**pointer_array) == 0) != condition) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (result = FUN_08000e30(), (uint)(result - comparison_value) <= threshold))));\n  (*pointer_array)[3] = (*pointer_array)[3] & 0xfffffe5f;\n  (*pointer_array)[5] = (*pointer_array)[5] & 0xfffffffe;\n  *(undefined *)((int)pointer_array + 0x39) = 0x20;\n  *(undefined *)((int)pointer_array + 0x3a) = 0x20;\n  *(undefined *)(pointer_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_conditions_08002d0c",
                "param_1": "pointer_array",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "comparison_value",
                "param_5": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d0c": {
                    "1": "validate_and_modify",
                    "3": "check_condition_and_modify",
                    "2": "validate_parameters",
                    "4": "check_conditions"
                },
                "param_1": {
                    "2": "permissions",
                    "3": "input_array",
                    "1": "double_pointer",
                    "4": "pointer_array"
                },
                "param_2": {
                    "5": "flag",
                    "7": "mask",
                    "1": "required_mask",
                    "2": "value_2",
                    "3": "bit_mask"
                },
                "param_3": {
                    "1": "is_allowed",
                    "5": "expected_result",
                    "9": "condition",
                    "3": "is_true"
                },
                "param_4": {
                    "3": "threshold",
                    "1": "value2",
                    "2": "current_value",
                    "4": "value",
                    "11": "comparison_value"
                },
                "param_5": {
                    "8": "threshold",
                    "7": "max_difference",
                    "1": "value_3",
                    "2": "value_5",
                    "6": "limit"
                },
                "FNV_08000e30": {
                    "1": "get_difference"
                },
                "iVar1": {
                    "2": "comparison_result",
                    "1": "current_value",
                    "18": "result",
                    "3": "difference"
                },
                "*param_array_ptr": {
                    "1": "array"
                },
                "(*param_array_ptr)[3]": {
                    "1": "value1"
                },
                "(*param_array_ptr)[5]": {
                    "1": "value2"
                },
                "(*param_1)[3]": {
                    "1": "p_pointer[3]"
                },
                "(*param_1)[5]": {
                    "1": "fifth_element"
                },
                "FUN_08000e30": {
                    "1": "get_result"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "byte_1"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "byte_2"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "byte_14"
                },
                "*param_1": {
                    "1": "array_ptr"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_data_08002d72",
            "code": "\nundefined4 initialize_data_08002d72(int *param)\n\n{\n  if (param != (int *)0x0) {\n    if (*(byte *)((int)param + 0x39) == '\\0') {\n      *(undefined *)(param + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)param + 0x39) = 0x24;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffdfff;\n    FUN_080029c8(param);\n    *(uint *)(*param + 0x10) = *(uint *)(*param + 0x10) & 0xffffb7ff;\n    *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xffffffd5;\n    *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)param + 0x39) = 0x20;\n    *(undefined *)((int)param + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_data_08002d72",
                "param_1": "param",
                "param_1[0xf]": "counter",
                "char": "byte"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d72": {
                    "1": "check_param_validity",
                    "3": "check_and_modify_param",
                    "5": "initialize_data",
                    "2": "check_and_initialize"
                },
                "param_1": {
                    "1": "function_parameter",
                    "6": "data",
                    "2": "param_array",
                    "3": "data_ptr",
                    "4": "input_array",
                    "9": "param"
                },
                "FUNC_08002d70": {
                    "5": "reset_data",
                    "2": "do_something",
                    "1": "reset_parameter",
                    "6": "reset_function",
                    "3": "initialize_data"
                },
                "FUN_080029c8": {
                    "1": "modify_values",
                    "2": "process_param1",
                    "8": "process_data",
                    "3": "process_param",
                    "5": "modify_param"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "3": "flag",
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "reset_memory_value",
                    "2": "flag_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value1",
                    "2": "value_1"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "value2",
                    "2": "value_2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "ptr3",
                    "2": "value_3"
                },
                "param_1[0xf]": {
                    "1": "value4",
                    "2": "counter"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "is_data_null"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "data_reset_value"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "data_flag_value"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "data_value_1"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "data_value_2"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "data_value_3"
                },
                "0x0": {
                    "4": "null"
                },
                "0x39": {
                    "1": "status_flag"
                },
                "0x24": {
                    "1": "symbol"
                },
                "0xc": {
                    "1": "value1"
                },
                "0xffffdfff": {
                    "1": "clear_mask"
                },
                "0x10": {
                    "1": "ptr_offset_2"
                },
                "0xffffb7ff": {
                    "1": "mask_2"
                },
                "0x14": {
                    "1": "offset_2"
                },
                "0xffffffd5": {
                    "1": "clear_mask3"
                },
                "0x2000": {
                    "1": "set_mask"
                },
                "0xf": {
                    "1": "counter"
                },
                "0x20": {
                    "1": "char1"
                },
                "0x3a": {
                    "1": "flag2_offset"
                },
                "char": {
                    "1": "byte"
                },
                "*(char *)((int)param + 0x39)": {
                    "1": "is_reset_required"
                },
                "*(undefined *)(param + 0xe)": {
                    "1": "reset_flag"
                },
                "*(uint *)(*param + 0xc)": {
                    "1": "param_value_a"
                },
                "*(uint *)(*param + 0x10)": {
                    "1": "param_value_b"
                },
                "*(uint *)(*param + 0x14)": {
                    "1": "param_value_c"
                },
                "'\\0'": {
                    "2": "null_char",
                    "1": "flag_off"
                },
                "param_1 + 0xe": {
                    "1": "value_ptr"
                },
                "*param_1 + 0xc": {
                    "1": "data_ptr"
                },
                "*param_1 + 0x10": {
                    "1": "data2_ptr"
                },
                "*param_1 + 0x14": {
                    "1": "data3_ptr"
                },
                "param_1[0xe]": {
                    "1": "param1.initialized"
                },
                "(int)param_1 + 0x39": {
                    "1": "param1.is_flag_set"
                },
                "(int)param_1 + 0x3a": {
                    "1": "param1.flag"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag2"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "undefined_at_offset_0x3a"
                },
                "char *param_1[0x39]": {
                    "1": "flag"
                },
                "data + 0xe": {
                    "1": "flag_reset_ptr"
                },
                "data + 0x39": {
                    "1": "flag_ptr"
                },
                "*data + 0xc": {
                    "1": "first_value"
                },
                "*data + 0x10": {
                    "1": "second_value"
                },
                "*data + 0x14": {
                    "1": "third_value"
                },
                "data + 0x3a": {
                    "1": "another_flag_ptr"
                }
            }
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 process_data_08002dd0(int *data,ushort *input,int data_length,undefined4 param4)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (input == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      return_value = FUN_08000e30();\n      *(short *)(data + 9) = (short)data_length;\n      *(short *)((int)data + 0x26) = (short)data_length;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (array_element == 0x1000) {\n          result = FUN_08002d0c(data,0x80,0,return_value,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *input & 0x1ff;\n          if (array_element_2 == 0) {\n            input = input + 1;\n          }\n          else {\n            input = (ushort *)((int)input + 1);\n          }\n        }\n        else {\n          result = FUN_08002d0c(data,0x80,0,return_value,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)input;\n          input = (ushort *)((int)input + 1);\n        }\n      }\n      result = FUN_08002d0c(data,0x40,0,return_value,param4);\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data",
                "param_2": "input",
                "param_3": "data_length",
                "param_4": "param4",
                "uVar2": "return_value",
                "iVar1": "result",
                "param_1[2]": "array_element",
                "param_1[4]": "array_element_2"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002dd0": {
                    "1": "process_function",
                    "28": "process_data"
                },
                "param_1": {
                    "8": "data",
                    "5": "data_pointer",
                    "1": "data_arr",
                    "3": "data_buffer",
                    "2": "input_array"
                },
                "param_2": {
                    "3": "data",
                    "1": "data_array_ptr",
                    "4": "input",
                    "2": "input_string"
                },
                "param_3": {
                    "5": "array_length",
                    "1": "data_array_length",
                    "4": "input_length",
                    "3": "array_size",
                    "6": "data_length",
                    "2": "length"
                },
                "param_4": {
                    "1": "parameter",
                    "11": "param4",
                    "2": "some_value",
                    "8": "param_4",
                    "4": "param"
                },
                "uVar2": {
                    "2": "output",
                    "11": "result",
                    "16": "return_value"
                },
                "iVar1": {
                    "8": "return_value",
                    "2": "error_code",
                    "1": "status",
                    "18": "result"
                },
                "FUN_08000e30": {
                    "7": "initialize",
                    "1": "helper_function1",
                    "2": "initialize_function"
                },
                "FUN_08002d0c": {
                    "1": "perform_operation",
                    "2": "process_data",
                    "5": "process_sub_function"
                },
                "*param_1": {
                    "1": "data_pointer_value"
                },
                "*param_1 + 4": {
                    "1": "data_pointer_value_plus4"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(char *)(param_1 + 0xe)": {
                    "1": "char_value_3"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "short_data"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_data2"
                },
                "(ushort *)0x0": {
                    "1": "null"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "var1"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "var2"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "uint_value"
                },
                "*(uint)*(byte *)param_2": {
                    "1": "byte_data"
                },
                "*(definition *)((int)param_1 + 0x39)": {
                    "1": "char_value_2"
                },
                "param_1[2]": {
                    "1": "array_element"
                },
                "param_1[4]": {
                    "1": "array_element_2"
                },
                "*(byte *)param_2": {
                    "1": "byte_value"
                },
                "PTR_FUN_08000e30": {
                    "1": "helper_function"
                },
                "PTR_FUN_08002d0c": {
                    "1": "sub_function"
                }
            }
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_input_08002eb2",
            "code": "\nundefined4 validate_input_08002eb2(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(input_array + 9) = short_value;\n    *(short *)((int)input_array + 0x26) = short_value;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[0xf]",
                "(short)param_3": "short_value"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002eb2": {
                    "1": "validate_parameters",
                    "2": "update_parameters",
                    "8": "validate_input",
                    "3": "initialize_data",
                    "7": "update_data"
                },
                "param_1": {
                    "10": "data",
                    "1": "input_data",
                    "2": "param_array",
                    "11": "input_array"
                },
                "param_2": {
                    "1": "param2",
                    "8": "value_1",
                    "21": "value1"
                },
                "param_3": {
                    "8": "value_2",
                    "21": "value2",
                    "1": "new_value2"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "character_check",
                    "2": "char_value"
                },
                "*(char *)(param_1 + 0xe)": {
                    "4": "flag",
                    "1": "flag2"
                },
                "param_1[8]": {
                    "3": "input_array[8]",
                    "1": "device_param1"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "value4",
                    "2": "data[9]"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "short_value_2",
                    "2": "data[10]"
                },
                "param_1[0xf]": {
                    "1": "param_1_value_4",
                    "2": "input_array[0xf]"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "set_special_char"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "byte_value"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "pointer_value"
                },
                "param_1 + 0xe": {
                    "1": "ptr_in_params",
                    "2": "input_array[14]"
                },
                "param_1 + 0x39": {
                    "1": "input_array[57]"
                },
                "param_1 + 9": {
                    "1": "input_array[9]"
                },
                "(int)param_1 + 0x26": {
                    "1": "short_param"
                },
                "(char *)((int)param_1 + 0x39)": {
                    "1": "char_pointer"
                },
                "param_2 == 0": {
                    "1": "value1_is_zero"
                },
                "param_3 == 0": {
                    "1": "value2_is_zero"
                },
                "*(char *)(param_1 + 0xe) != '\\x01'": {
                    "1": "is_char_pointer_2_not_equal_to_1"
                },
                "*(short *)(param_1 + 0x26)": {
                    "1": "data_item_3"
                },
                "char_1": {
                    "1": "character"
                },
                "uint_1": {
                    "1": "pointer"
                },
                "short_1": {
                    "2": "short_value"
                },
                "(int)param_1 + 0x39": {
                    "1": "char_param"
                },
                "(short)param_3": {
                    "1": "short_value"
                },
                "inputArray + 0xe": {
                    "1": "input_array[14]"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "character"
                },
                "*(char *)(data + 0xe)": {
                    "1": "status"
                },
                "*(short *)(data + 9)": {
                    "1": "result2"
                },
                "*(short *)((int)data + 0x26)": {
                    "1": "result3"
                },
                "input_data": {
                    "1": "array_pointer"
                },
                "value_1": {
                    "1": "size"
                },
                "value_2": {
                    "1": "size_limit"
                },
                "output": {
                    "1": "result"
                },
                "<int>param_1 + 0x39": {
                    "1": "input_array[0x39]"
                },
                "<char>input_array[0x39]": {
                    "1": "input_array_character"
                },
                "<char>param_1 + 0xe": {
                    "1": "input_array[0xe]"
                },
                "'\\x01'": {
                    "1": "one"
                },
                "<short>param_1 + 9": {
                    "1": "short_value"
                },
                "<int>param_1 + 0x26": {
                    "1": "input_array[0x26]"
                },
                "<undefined>param_1 + 0x39": {
                    "1": "input_array[0x39]"
                },
                "<undefined>param_1 + 0xe": {
                    "1": "input_array[0xe]"
                },
                "__return": {
                    "1": "return_value"
                },
                "0x80": {
                    "1": "mask"
                },
                "param_1 + 0xf": {
                    "1": "params[15]"
                },
                "params[8]": {
                    "1": "params[8]"
                },
                "params + 9": {
                    "1": "params[9]"
                },
                "params + 0x26": {
                    "1": "params[38]"
                },
                "params[0xf]": {
                    "1": "params[15]"
                },
                "params + 0x39": {
                    "1": "params[57]"
                },
                "params + 0xe": {
                    "1": "params[14]"
                },
                "*(char*)((int)param_1 + 0x39)": {
                    "1": "char_value"
                },
                "*(char*)(param_1 + 0xe)": {
                    "1": "flag_value"
                },
                "*(short*)(param_1 + 9)": {
                    "1": "param_1_index_9"
                },
                "*(short*)((int)param_1 + 0x26)": {
                    "1": "param_1_index_0x26"
                },
                "*(undefined*)((int)param_1 + 0x39)": {
                    "1": "undefined_value"
                },
                "*(undefined*)(param_1 + 0xe)": {
                    "1": "undefined_flag_value"
                },
                "*(uint*)(*param_1 + 0xc)": {
                    "1": "uint_value"
                },
                "char_2": {
                    "1": "second_char"
                },
                "char_3": {
                    "1": "third_char"
                },
                "short_2": {
                    "1": "short_value_2"
                },
                "int_1": {
                    "1": "array_index"
                },
                "int_2": {
                    "1": "array_index_2"
                },
                "int_3": {
                    "1": "array_index_3"
                },
                "int_4": {
                    "1": "array_index_4"
                },
                "int_5": {
                    "1": "array_index_5"
                },
                "undefined_1": {
                    "1": "temp_undefined"
                }
            }
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validate_input_08002efa(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[10] = value1;\n    *(short *)(data + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    data[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) | 1;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "data[10]",
                "param_1[0xf]": "data[15]",
                "(int)param_1": "(int)input_array"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002efa": {
                    "1": "validate_and_set_parameters",
                    "2": "validate_and_update_data",
                    "7": "validate_input",
                    "4": "initialize_data",
                    "6": "update_data",
                    "3": "update_parameters"
                },
                "param_1": {
                    "9": "data",
                    "3": "data_array",
                    "1": "param_array",
                    "2": "data_pointer",
                    "5": "parameters",
                    "7": "input_array"
                },
                "param_2": {
                    "1": "size_1",
                    "8": "value_1",
                    "21": "value1"
                },
                "param_3": {
                    "8": "value_2",
                    "1": "param2",
                    "21": "value2"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "third_character",
                    "2": "char_at_offset_0x3a"
                },
                "*(char *)(param_1 + 0xe)": {
                    "4": "flag",
                    "1": "flag_character",
                    "2": "char_at_offset_0xe"
                },
                "param_1[10]": {
                    "1": "data_value1",
                    "3": "input_array[10]",
                    "5": "data[10]"
                },
                "param_1 + 0xb": {
                    "1": "parameters[11]"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "array_index3",
                    "2": "data[14]"
                },
                "param_1[0xf]": {
                    "1": "param_f",
                    "3": "data[15]",
                    "2": "data_array[0xf]"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "third_character",
                    "2": "undefined_at_offset_0x3a"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "2": "flag",
                    "1": "data_flag"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "int_value1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "param1_ptr_c"
                },
                "*(short *)(param_1 + 0xb)": {
                    "2": "data[11]",
                    "1": "data_array[11]"
                },
                "param_1[11]": {
                    "1": "data[11]"
                },
                "param_1[14]": {
                    "1": "data[14]"
                },
                "param_1[15]": {
                    "1": "param_array[15]"
                },
                "input_array": {
                    "1": "input_array"
                },
                "value_1": {
                    "1": "length"
                },
                "value_2": {
                    "1": "short_length"
                },
                "(int)param_1 + 0x2e": {
                    "1": "data_value3"
                },
                "0x3a": {
                    "1": "char_value"
                },
                "0xe": {
                    "2": "flag"
                },
                "10": {
                    "1": "array_index"
                },
                "0xb": {
                    "1": "short_value_1"
                },
                "0x2e": {
                    "1": "array_index3"
                },
                "0xf": {
                    "1": "counter"
                },
                "inputArray[0]": {
                    "1": "pointer1"
                },
                "inputArray[1]": {
                    "1": "pointer2"
                },
                "(int)param_1": {
                    "1": "(int)input_array"
                },
                "0x14": {
                    "1": "ptr_value_1"
                },
                "0xc": {
                    "1": "ptr_value_2"
                },
                "(*(char *)((int)dataPointer + 0x3a)": {
                    "1": "char_value"
                },
                "param_1 + 0xe": {
                    "1": "parameters[14]"
                },
                "(*(char *)(dataPointer + 0xe)": {
                    "1": "char_value2"
                },
                "*(short *)(dataPointer + 0xb)": {
                    "1": "short_value1"
                },
                "*(short *)((int)dataPointer + 0x2e)": {
                    "1": "short_value2"
                },
                "*(undefined *)((int)dataPointer + 0x3a)": {
                    "1": "undefined_value"
                },
                "*(undefined *)(dataPointer + 0xe)": {
                    "1": "undefined_value2"
                },
                "*(uint *)(*dataPointer + 0x14)": {
                    "1": "uint_value1"
                },
                "*(uint *)(*dataPointer + 0xc)": {
                    "1": "uint_value2"
                },
                "param_1 + 0x3a": {
                    "1": "parameters[58]"
                },
                "param_1 + 0x2e": {
                    "1": "parameters[46]"
                },
                "*(char *)((int)data + 0x3a)": {
                    "1": "char1"
                },
                "*(char *)(data + 0xe)": {
                    "1": "char2"
                },
                "*(short *)(data + 0xb)": {
                    "1": "short1"
                },
                "*(short *)((int)data + 0x2e)": {
                    "1": "short2"
                },
                "*(undefined *)((int)data + 0x3a)": {
                    "1": "undefined1"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "undefined2"
                },
                "*(uint *)(*data + 0x14)": {
                    "1": "uint1"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "uint2"
                },
                "var_1": {
                    "1": "char_at_index58"
                },
                "var_2": {
                    "1": "char_at_index14"
                },
                "var_3": {
                    "1": "short_at_index11"
                },
                "var_4": {
                    "1": "short_at_index46"
                },
                "var_5": {
                    "1": "uint_val1"
                },
                "var_6": {
                    "1": "uint_val2"
                }
            }
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_permissions_08002f4c",
            "code": "\nvoid update_permissions_08002f4c(int *input)\n\n{\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xffffffbf;\n  *(undefined *)(param_ptr + 0x39) = 0x20;\n  FUN_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_permissions_08002f4c",
                "param_1": "input",
                "undefined4": "void",
                "(int)param_1": "param_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f4c": {
                    "2": "update_permission",
                    "1": "set_permissions",
                    "3": "update_flags_and_call_function"
                },
                "param_1": {
                    "3": "data_pointer",
                    "2": "parameter",
                    "1": "input_pointer",
                    "4": "input"
                },
                "FUN_08003f48": {
                    "1": "execute_helper_function",
                    "2": "execute_function",
                    "5": "execute_sub_function"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "flag_value",
                    "3": "value_to_modify",
                    "2": "permission_value",
                    "6": "value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "6": "flag",
                    "3": "new_value",
                    "1": "info_byte",
                    "2": "flag_value"
                },
                "*(uint *)(*dataPointer + 0xc)": {
                    "1": "data_value"
                },
                "*(undefined *)((int)dataPointer + 0x39)": {
                    "1": "flag_value"
                },
                "*param_1": {
                    "1": "flag_value"
                },
                "undefined4": {
                    "1": "void"
                },
                "(int)param_1": {
                    "1": "param_ptr"
                },
                "0xc": {
                    "1": "offset"
                },
                "0xffffffbf": {
                    "1": "mask"
                },
                "0x20": {
                    "1": "value"
                },
                "*param_1 + 0xc": {
                    "1": "permissions_address"
                },
                "*(uint *)(*param_1 + 0xc) & 0xffffffbf": {
                    "1": "new_permissions"
                },
                "(int)param_1 + 0x39": {
                    "1": "flag_address"
                }
            }
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_data_08002f66",
            "code": "\nundefined4 process_data_08002f66(int *data)\n\n{\n  byte *byte_ptr;\n  short count;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (value1 == 0x1000) {\n    if (value2 == 0) {\n      *(ushort *)output_data_ptr = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      output_data_ptr = output_data_ptr + 2;\n    }\n    else {\n      *(ushort *)output_data_ptr = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      output_data_ptr = output_data_ptr + 1;\n    }\n  }\n  else if (value2 == 0) {\n    undefined_ptr = (undefined *)output_data_ptr;\n    output_data_ptr = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)output_data_ptr;\n    output_data_ptr = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  FUN_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "count",
                "puVar3": "undefined_ptr",
                "param_1[2]": "value1",
                "param_1[4]": "value2",
                "param_1[10]": "output_data_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f66": {
                    "1": "decode_and_process_data",
                    "2": "process_string",
                    "10": "process_data",
                    "5": "process_binary_data",
                    "6": "parse_string"
                },
                "param_1": {
                    "2": "data_pointer",
                    "12": "data",
                    "1": "string_ptr",
                    "6": "input_array",
                    "4": "input_data"
                },
                "pbVar1": {
                    "19": "byte_ptr",
                    "1": "byte_data_pointer",
                    "8": "byte_pointer"
                },
                "sVar2": {
                    "3": "short_value",
                    "1": "updated_short_value",
                    "2": "short_var",
                    "12": "count",
                    "9": "counter"
                },
                "puVar3": {
                    "1": "dest_ptr",
                    "8": "undefined_pointer",
                    "16": "undefined_ptr"
                },
                "FUN_08003f24": {
                    "1": "perform_additional_task"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "char_value"
                },
                "param_1[2]": {
                    "1": "value1"
                },
                "param_1[4]": {
                    "1": "value2"
                },
                "*(int *)(*param_1 + 4)": {
                    "1": "int_value"
                },
                "*(ushort *)param_1[10]": {
                    "1": "short_value"
                },
                "param_1[10]": {
                    "1": "output_data_ptr"
                },
                "*(undefined4 *)(*param_1 + 4)": {
                    "1": "undefined_value"
                },
                "(ushort)*(undefined4 *)(*param_1 + 4) & 0xff": {
                    "1": "short_value"
                },
                "(byte)*(undefined4 *)(*param_1 + 4) & 0x7f": {
                    "1": "byte_value"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_var"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value3"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "value4"
                }
            }
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "check_and_process_flags_08002ffc",
            "code": "\nvoid check_and_process_flags_08002ffc(uint **parameters)\n\n{\n  int result;\n  uint value2;\n  uint *ptr;\n  uint value2;\n  uint value1;\n  \n  ptr = *parameters;\n  value1 = *ptr;\n  value2 = ptr[3];\n  if ((((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    FUN_08002f66(parameters);\n    return;\n  }\n  if (((value1 & 0xf) == 0) || ((value2 = ptr[5] & 1, value2 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      FUN_0800295c(parameters);\n      return;\n    }\n    if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      FUN_08002f4c(parameters);\n    }\n  }\n  else {\n    if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((value1 & 4) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((value1 & 2) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((value1 & 8) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        FUN_08002f66(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_08003f94(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      FUN_08002940(parameters);\n      ptr = *parameters;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      parameters[0xd][0x14] = (uint)&some_label;\n      result = FUN_08000f8c(parameters[0xd]);\n      if (result != 0) {\n        (*(code *)parameters[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "check_and_process_flags_08002ffc",
                "param_1": "parameters",
                "iVar1": "result",
                "uVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "value2",
                "uVar5": "value1",
                "LAB_0800311c_1": "some_label"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ffc": {
                    "1": "check_and_handle_conditions",
                    "4": "process_flags",
                    "3": "process_data",
                    "2": "check_and_handle_flags"
                },
                "param_1": {
                    "3": "data",
                    "1": "input_array",
                    "2": "params",
                    "9": "parameters",
                    "4": "param"
                },
                "iVar1": {
                    "19": "result",
                    "10": "return_value"
                },
                "uVar2": {
                    "2": "value_2",
                    "1": "variable2",
                    "6": "value2",
                    "4": "value1"
                },
                "puVar3": {
                    "1": "array_ptr",
                    "7": "pointer",
                    "8": "ptr",
                    "3": "param",
                    "2": "first_param"
                },
                "uVar4": {
                    "2": "value4",
                    "1": "u_var4",
                    "4": "check",
                    "3": "flag_value"
                },
                "uVar5": {
                    "2": "value_5",
                    "1": "var5",
                    "4": "value1"
                },
                "FUNC_08003f94": {
                    "1": "cleanup_function1",
                    "4": "cleanup"
                },
                "FUN_0800295c": {
                    "1": "process_flags"
                },
                "FUN_08002940": {
                    "1": "handle_case2"
                },
                "FUN_08002f4c": {
                    "1": "function4"
                },
                "FUN_08000f8c": {
                    "1": "execute_different_function",
                    "2": "perform_operation"
                },
                "FUN_08002f66": {
                    "1": "check_flags"
                },
                "LAB_0800311c_1": {
                    "1": "label1"
                },
                "FUC_08003f94": {
                    "1": "cleanup"
                }
            }
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combine_bytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800312c": {
                    "1": "combine_two_bytes",
                    "29": "combine_bytes"
                },
                "param_1": {
                    "18": "input",
                    "3": "address",
                    "1": "input_address",
                    "2": "base_address",
                    "5": "offset"
                },
                "0x3a": {
                    "1": "byte_offset1",
                    "2": "offset1"
                },
                "0x39": {
                    "2": "offset2",
                    "1": "byte_offset2"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "1": "byte_1",
                    "13": "byte1",
                    "3": "first_byte"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "3": "second_byte",
                    "13": "byte2",
                    "1": "byte_2"
                },
                "": {
                    "1": ""
                },
                "PTR_": {
                    "1": "",
                    "2": "unchanged"
                },
                "DAT_": {
                    "1": "",
                    "2": "unchanged"
                }
            }
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint get_bit_value_08003138(uint value,int base_address)\n\n{\n  bit_value *(uint *)(base_address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "value",
                "param_2": "base_address",
                "return": "bit_value"
            },
            "calling": [
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003138": {
                    "1": "get_bit_from_uint",
                    "3": "retrieve_bit_value",
                    "2": "extract_bit_from_array",
                    "9": "get_bit_value"
                },
                "param_1": {
                    "1": "array_index",
                    "3": "bit_index",
                    "4": "input_value",
                    "2": "bit_position",
                    "9": "value",
                    "6": "index"
                },
                "param_2": {
                    "7": "address",
                    "2": "array_base",
                    "8": "base_address",
                    "1": "array_start",
                    "3": "data_address",
                    "5": "array_address"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "2": "element",
                    "1": "array_element"
                },
                "param_1 & 0xf": {
                    "1": "bit_mask"
                },
                "param_1 << 0x18 >> 0x1c": {
                    "1": "shifted_index"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_mask",
                    "2": "bit_index"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4) >> (param_1 & 0xf) & 1": {
                    "1": "bit_value"
                },
                "param_1 << 0x18": {
                    "2": "shifted_input_value"
                },
                "((param_1 << 0x18) >> 0x1c) * 4": {
                    "1": "index_offset"
                },
                "*(uint *)(param_2 + indexOffset)": {
                    "1": "target_value"
                },
                "return": {
                    "1": "bit_value"
                },
                "0x18": {
                    "1": "shift_amount1"
                },
                "0x1c": {
                    "1": "shift_amount2"
                },
                "0xf": {
                    "1": "bit_mask"
                },
                "4": {
                    "1": "size_of_uint"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_value"
                },
                "...": {
                    "1": "..."
                },
                "param_3": {
                    "1": "bit_shift"
                },
                "param_4": {
                    "1": "index_mask"
                },
                "param_5": {
                    "1": "bit_mask"
                },
                "param_6": {
                    "1": "bit_mask_result"
                },
                "param_7": {
                    "1": "shifted_index"
                },
                "param_8": {
                    "1": "address_offset"
                },
                "var_10": {
                    "1": "shifted_value"
                },
                "var_14": {
                    "1": "array_address"
                },
                "var_4": {
                    "1": "index"
                },
                "var_8": {
                    "1": "result"
                },
                "1": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid set_bit_in_array_0800314e(uint bit_position,int array)\n\n{\n  uint shifted_index;\n  \n  shifted_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + shifted_index * 4) = *(uint *)(array + shifted_index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "shifted_index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800314e": {
                    "7": "set_bit",
                    "1": "update_data",
                    "2": "update_bit",
                    "15": "set_bit_in_array"
                },
                "param_1": {
                    "2": "index",
                    "1": "bit_position_to_set",
                    "13": "bit_position",
                    "5": "bit_index",
                    "4": "value"
                },
                "param_2": {
                    "1": "array_addr",
                    "13": "array",
                    "2": "array_ptr",
                    "11": "array_address"
                },
                "uVar1": {
                    "4": "array_index",
                    "1": "shifted_bit_position",
                    "7": "shifted_index",
                    "3": "shift_amount",
                    "2": "byte_index",
                    "5": "index"
                }
            }
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_0800316c",
            "code": "\nvoid update_bit_0800316c(uint bit_position,int array_address)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + index * 4) = *(uint *)(array_address + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800316c": {
                    "1": "update_array_value",
                    "2": "update_data",
                    "14": "update_bit",
                    "3": "update_bit_value",
                    "5": "update_bit_in_array"
                },
                "param_1": {
                    "1": "input_index",
                    "2": "index",
                    "18": "bit_position",
                    "3": "value"
                },
                "param_2": {
                    "2": "memory_address",
                    "5": "array",
                    "1": "bit_array",
                    "15": "array_address"
                },
                "uVar1": {
                    "1": "shifted_bit",
                    "5": "shifted_index",
                    "8": "index",
                    "4": "shifted_position"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "array_element"
                },
                "param_1 & 0xf": {
                    "1": "bit_index"
                }
            }
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 get_memory_address_0800318c(undefined4 index)\n\n{\n  switch(index) {\n  case 0:\n    address 0x40020000;\n  case 1:\n    address 0x40020400;\n  case 2:\n    address 0x40020800;\n  case 3:\n    address 0x40020c00;\n  case 4:\n    address 0x40021000;\n  case 5:\n    address 0x40021400;\n  case 6:\n    address 0x40021800;\n  case 7:\n    address 0x40021c00;\n  case 8:\n    address 0x40022000;\n  case 9:\n    address 0x40022400;\n  case 10:\n    address 0x40022800;\n  default:\n    address 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "index",
                "return": "address"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800318c": {
                    "3": "map_parameter_to_value",
                    "1": "get_memory_offset",
                    "18": "get_memory_address",
                    "2": "map_param_to_address"
                },
                "param_1": {
                    "8": "index",
                    "1": "selection",
                    "5": "input_value",
                    "4": "value",
                    "2": "param"
                },
                "0": {
                    "1": "value_0",
                    "5": "base_address",
                    "8": "0x40020000",
                    "3": "memory_address_0"
                },
                "1": {
                    "2": "address_1",
                    "1": "value2",
                    "8": "0x40020400",
                    "3": "memory_address_1"
                },
                "2": {
                    "8": "0x40020800",
                    "2": "address_2",
                    "1": "value_2",
                    "3": "memory_address_2"
                },
                "3": {
                    "1": "map_address_3",
                    "2": "address_3",
                    "8": "0x40020c00",
                    "3": "memory_address_3"
                },
                "4": {
                    "1": "address_offset4",
                    "2": "address_4",
                    "3": "memory_address_4",
                    "8": "0x40021000"
                },
                "5": {
                    "8": "0x40021400",
                    "1": "address_offset5",
                    "3": "memory_address_5",
                    "2": "address_5"
                },
                "6": {
                    "2": "address_6",
                    "1": "address_offset_6",
                    "3": "memory_address_6",
                    "8": "0x40021800"
                },
                "7": {
                    "1": "map_address_7",
                    "3": "memory_address_7",
                    "8": "0x40021c00",
                    "2": "address_7"
                },
                "8": {
                    "1": "address_offset_8",
                    "2": "address_8",
                    "8": "0x40022000",
                    "3": "memory_address_8"
                },
                "9": {
                    "3": "memory_address_9",
                    "1": "value_9",
                    "8": "0x40022400",
                    "2": "address_9"
                },
                "10": {
                    "1": "return_code_10",
                    "8": "0x40022800",
                    "3": "memory_address_10",
                    "2": "address_10"
                },
                "return": {
                    "1": "address"
                },
                "case 0": {
                    "1": "memory_address0"
                },
                "case 1": {
                    "1": "address1"
                },
                "case 2": {
                    "1": "address2"
                },
                "case 3": {
                    "1": "memory_address3"
                },
                "case 4": {
                    "1": "address4"
                },
                "case 5": {
                    "1": "memory_address5"
                },
                "case 6": {
                    "1": "memory_address6"
                },
                "case 7": {
                    "1": "memory_address7"
                },
                "case 8": {
                    "1": "memory_address8"
                },
                "case 9": {
                    "1": "memory_address9"
                },
                "case 10": {
                    "1": "address10"
                },
                "return_value": {
                    "1": "output_value"
                }
            }
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_address_080031fc",
            "code": "\n\n\nundefined4 set_memory_address_080031fc(undefined4 address_index)\n\n{\n  undefined4 new_address;\n  \n  switch(address_index) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    new_address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    new_address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    new_address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    new_address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    new_address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    new_address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    new_address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    new_address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    new_address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    new_address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    new_address = 0x40022800;\n    break;\n  default:\n    new_address = 0;\n  }\n  return new_address;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_address_080031fc",
                "param_1": "address_index",
                "uVar1": "new_address"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080031fc": {
                    "1": "set_flag_and_return_value",
                    "2": "set_register_value",
                    "6": "set_memory_address"
                },
                "param_1": {
                    "4": "flag_index",
                    "1": "peripheral_index",
                    "2": "register_index",
                    "3": "value",
                    "6": "address_index"
                },
                "uVar1": {
                    "4": "address",
                    "2": "memory_address",
                    "1": "new_data_value",
                    "5": "base_address",
                    "6": "new_address"
                },
                "_DAT_40023830": {
                    "2": "memory_access_permissions",
                    "1": "flag_register",
                    "4": "memory_address"
                }
            }
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_validity_08003380",
            "code": "\nundefined4 check_validity_08003380(undefined4 input_param,undefined4 unused_param,undefined4 data_param,undefined4 input_4)\n\n{\n  int result;\n  \n  result = FUN_0800354a(input_param,&DAT_08005a18,data_param,input_4,input_4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_validity_08003380",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "data_param",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003380": {
                    "1": "check_parameter",
                    "2": "check_result",
                    "3": "check_validity"
                },
                "param_1": {
                    "1": "input1",
                    "5": "input_param_1",
                    "2": "value_1",
                    "3": "arg1",
                    "9": "input_param"
                },
                "param_2": {
                    "1": "value_2",
                    "8": "unused_param",
                    "4": "input_param_2",
                    "5": "input_2",
                    "3": "arg2"
                },
                "param_3": {
                    "5": "data_param",
                    "1": "input_param_2",
                    "4": "input_param_3",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "size_parameter",
                    "5": "input_4",
                    "4": "input_param_4",
                    "3": "arg4"
                },
                "iVar1": {
                    "30": "result",
                    "1": "return_value"
                },
                "FUN_0800354a": {
                    "1": "perform_operation",
                    "2": "process_input",
                    "4": "calculate_result"
                },
                "&DAT_08005a18": {
                    "1": "data_address"
                }
            }
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "process_data_0800339c",
            "code": "\nundefined4 process_data_0800339c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = FUN_0800354a(input1,&DAT_08005a3c,input3,input4,input4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "process_data_0800339c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800339c": {
                    "2": "get_return_value",
                    "1": "decode_value",
                    "5": "process_data"
                },
                "param_1": {
                    "1": "data_1",
                    "2": "input_param_1",
                    "6": "input_value",
                    "3": "input_param",
                    "8": "input1"
                },
                "param_2": {
                    "3": "param_2",
                    "1": "input_param_2",
                    "7": "input2",
                    "4": "unused_param",
                    "2": "input_2"
                },
                "param_3": {
                    "2": "data_param",
                    "1": "config_param",
                    "3": "param_3",
                    "8": "input3"
                },
                "param_4": {
                    "3": "param_4",
                    "1": "input_param_4",
                    "2": "input_value_4",
                    "8": "input4"
                },
                "iVar1": {
                    "30": "result",
                    "1": "return_value"
                },
                "uVar2": {
                    "14": "shifted_result",
                    "1": "classification",
                    "15": "shifted_value"
                }
            }
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_bit_in_memory_080033c8",
            "code": "\n\n\nvoid clear_bit_in_memory_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_bit_in_memory_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033c8": {
                    "3": "clear_flag_bit",
                    "1": "clear_memory_protection",
                    "7": "clear_bit_in_memory",
                    "2": "clear_bit_in_register"
                },
                "_DAT_40023840": {
                    "5": "memory_address",
                    "1": "flag_value",
                    "2": "flags",
                    "3": "memory_flag"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_data_080033d8",
            "code": "\nvoid process_data_080033d8(undefined4 input_data)\n\n{\n  int result;\n  int result_array [5];\n  \n  result_array[0] = FUN_080034f4(input_data,&DAT_08005a18);\n  if ((result_array[0] != 0) && ((result = FUN_08003380(input_data), result == 0 || (result == 0x10)))) {\n    FUN_08000f72(result_array,result);\n    FUN_08000f56(result_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "input_data",
                "local_1c": "result_array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380",
                "FUN_08000f72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033d8": {
                    "1": "main_function",
                    "2": "initialize_and_process_data",
                    "23": "process_data"
                },
                "param_1": {
                    "9": "input",
                    "7": "data",
                    "1": "arg",
                    "13": "input_data"
                },
                "local_1c": {
                    "5": "data_array",
                    "1": "result",
                    "8": "results",
                    "2": "results_array",
                    "10": "result_array"
                },
                "FUN_080034f4": {
                    "3": "calculate_value",
                    "1": "initialize_data",
                    "2": "calculate_result"
                },
                "FUN_08003380": {
                    "4": "check_validity",
                    "2": "check_condition"
                },
                "iVar1": {
                    "1": "result_code",
                    "3": "status",
                    "9": "result"
                },
                "FUN_08000f72": {
                    "1": "execute_action",
                    "3": "process_valid_data",
                    "2": "handle_success"
                },
                "FUN_08000f56": {
                    "1": "cleanup_data",
                    "8": "cleanup"
                }
            }
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_application_0800340c",
            "code": "\nvoid initialize_application_0800340c(void)\n\n{\n  FUN_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_application_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800340c": {
                    "6": "initialize",
                    "7": "initialize_application",
                    "1": "perform_initialization",
                    "3": "execute_initialization",
                    "4": "initialize_program",
                    "2": "execute_function"
                },
                "FUN_080035fc": {
                    "1": "execute_action",
                    "2": "perform_operation",
                    "6": "execute_initialization",
                    "9": "perform_initialization"
                },
                "param_1": {
                    "5": "data",
                    "4": "data_array",
                    "1": "subfunction_parameter",
                    "2": "data_pointer"
                }
            }
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_data_08003414",
            "code": "\nvoid process_data_08003414(undefined4 input)\n\n{\n  int result;\n  uint flag;\n  int result_array [16];\n  \n  result_array[0] = FUN_080034f4(input,&DAT_08005a3c);\n  if ((result_array[0] != 0) &&\n     ((((result = FUN_0800339c(input), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flag = FUN_0800354a(input,&DAT_08005a3c);\n    if ((flag & 0x100000) == 0) {\n      FUN_08002864(result_array,result);\n    }\n    else {\n      FUN_080028f0(result_array,result);\n    }\n    FUN_0800268e(result_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "input",
                "local_4c": "result_array",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003414": {
                    "1": "process_function",
                    "24": "process_data"
                },
                "param_1": {
                    "11": "input",
                    "4": "data",
                    "2": "input_param",
                    "1": "parameter_1",
                    "8": "input_data"
                },
                "local_4c": {
                    "3": "array",
                    "1": "result",
                    "7": "results",
                    "11": "result_array"
                },
                "FUN_080034f4": {
                    "3": "calculate_value",
                    "1": "calculate_value1",
                    "2": "get_initial_value",
                    "5": "get_data"
                },
                "iVar1": {
                    "1": "result_status",
                    "5": "status",
                    "6": "result"
                },
                "FUN_0800339c": {
                    "1": "check_value",
                    "6": "check_status",
                    "13": "check_condition"
                },
                "uVar2": {
                    "11": "flag",
                    "1": "flag_value",
                    "5": "flags"
                },
                "FUN_0800354a": {
                    "1": "calculate_value3",
                    "7": "check_flag",
                    "2": "get_flag_value"
                },
                "FUN_08002864": {
                    "1": "handle_flag_false",
                    "3": "handle_case1"
                },
                "FUN_080028f0": {
                    "1": "process_result_with_flag",
                    "2": "handle_error",
                    "3": "handle_case2"
                },
                "FUN_0800268e": {
                    "1": "cleanup_result_array",
                    "2": "cleanup_result",
                    "9": "cleanup",
                    "3": "cleanup_data"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param4"
                }
            }
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_system_0800346c",
            "code": "\nvoid initialize_system_0800346c(void)\n\n{\n  FUN_08000e30();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_system_0800346c"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800346c": {
                    "1": "initiate_main_function",
                    "6": "initialize_program",
                    "9": "initialize_system"
                },
                "FUN_08000e30": {
                    "1": "perform_initial_setup",
                    "11": "execute_initialization",
                    "3": "call_sub_function",
                    "4": "perform_initialization",
                    "2": "execute_setup"
                }
            }
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_system_08003476",
            "code": "\nvoid initialize_system_08003476(void)\n\n{\n  FUN_08000e18();\n  FUN_08000f4e();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_system_08003476"
            },
            "calling": [],
            "called": [
                "FUN_08003474",
                "FUN_08000f4e",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003476": {
                    "3": "initialize",
                    "2": "initialize_and_run_program",
                    "1": "initialize_components",
                    "13": "initialize_system"
                },
                "FUNC_08003474": {
                    "1": "finalize_system",
                    "5": "perform_cleanup",
                    "2": "execute_cleanup"
                },
                "FUN_08000f4e": {
                    "2": "perform_cleanup",
                    "1": "perform_initialization"
                },
                "FUN_08000e18": {
                    "1": "perform_initialization",
                    "2": "perform_task2",
                    "3": "load_configuration"
                }
            }
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "reverse_bits_08003486",
            "code": "\nvoid reverse_bits_08003486(uint input_value,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 shifted_value;\n  uint bit_mask;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 constant;\n  \n  shifted_value = FUN_080031fc((input_value << 0x18) >> 0x1c);\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  constant = 2;\n  param2_copy = param2;\n  param3_copy = param3;\n  FUN_08000fb4(shifted_value,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "reverse_bits_08003486",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "shifted_value",
                "local_24": "bit_mask",
                "local_20": "param2_copy",
                "local_1c": "param3_copy",
                "local_18": "constant"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003486": {
                    "1": "extract_bit_and_call_function",
                    "3": "process_parameter",
                    "2": "update_flags"
                },
                "param_1": {
                    "8": "input",
                    "1": "input_param",
                    "14": "input_value",
                    "2": "bit_position"
                },
                "param_2": {
                    "12": "param2",
                    "1": "parameter_2",
                    "2": "arg1",
                    "5": "value1",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "parameter3",
                    "12": "param3",
                    "6": "param_3",
                    "5": "value2",
                    "2": "arg2"
                },
                "uVar1": {
                    "1": "bit_shifted_input",
                    "8": "shifted_value",
                    "5": "result",
                    "2": "transformed_value"
                },
                "local_24": {
                    "5": "mask",
                    "1": "shifted_bits",
                    "23": "bit_mask"
                },
                "local_20": {
                    "4": "local_param2",
                    "1": "new_param2",
                    "2": "param_2",
                    "6": "param2_copy"
                },
                "local_1c": {
                    "1": "param2_copy",
                    "2": "param_3",
                    "4": "param_3_copy",
                    "6": "param3_copy"
                },
                "local_18": {
                    "1": "constant_bit",
                    "2": "constant_2",
                    "6": "constant",
                    "3": "constant_value",
                    "5": "constant2"
                },
                "FUN_08000fb4": {
                    "1": "perform_operation"
                },
                "FUN_080031fc": {
                    "1": "shift_bits"
                }
            }
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "process_param_080034b6",
            "code": "\nvoid process_param_080034b6(undefined4 param1,undefined2 param2,int flag,undefined4 data)\n\n{\n  if (flag == 0) {\n    FUN_08001198(param1,param2,0,data,data);\n    return;\n  }\n  FUN_08001198(param1,param2,1,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "process_param_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "data"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034b6": {
                    "1": "set_flag_based_on_condition",
                    "2": "handle_param",
                    "6": "process_param"
                },
                "param_1": {
                    "1": "value1",
                    "4": "arg1",
                    "2": "param_ptr",
                    "3": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "5": "param2",
                    "3": "input_2",
                    "4": "arg2"
                },
                "param_3": {
                    "10": "flag",
                    "1": "flag_value",
                    "2": "operation_type",
                    "7": "condition"
                },
                "param_4": {
                    "10": "data",
                    "6": "param4",
                    "1": "output_arg",
                    "3": "arg4"
                },
                "FUN_08001198": {
                    "3": "perform_action",
                    "1": "execute_process",
                    "2": "execute_operation"
                }
            }
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initialize_system_080034ce(void)\n\n{\n  FUN_08000de4();\n  FUN_08000c8c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034ce": {
                    "2": "run_initialization",
                    "6": "initialize",
                    "5": "initialize_application",
                    "3": "execute_startup_tasks",
                    "8": "initialize_system",
                    "1": "execute_initialization_procedure"
                },
                "FUN_08000c8c": {
                    "1": "perform_initialization",
                    "10": "perform_cleanup",
                    "2": "initialize_subsystem",
                    "3": "configure_settings"
                },
                "FUN_08000de4": {
                    "1": "perform_initialization",
                    "3": "initialize_system",
                    "4": "initialize_data",
                    "7": "initialize_components",
                    "2": "initialize_resources"
                }
            }
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_in_array_080034da",
            "code": "\nundefined4 find_value_in_array_080034da(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0;\n    }\n    if (*array == target_value) break;\n    array = array + 6;\n  }\n  found_value *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "target_value",
                "param_2": "array",
                "return": "found_value"
            },
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034da": {
                    "4": "find_value",
                    "6": "find_value_index",
                    "1": "find_param_value",
                    "15": "find_value_in_array"
                },
                "param_1": {
                    "18": "target_value",
                    "8": "value",
                    "2": "search_value",
                    "3": "value_to_find"
                },
                "param_2": {
                    "19": "array",
                    "5": "array_of_values",
                    "3": "array_ptr",
                    "1": "input_array"
                },
                "*param_2": {
                    "2": "current_element",
                    "3": "current_value"
                },
                "param_2 + 6": {
                    "4": "next_element",
                    "1": "next_array_element"
                },
                "*(undefined4 *)(param_2 + 2)": {
                    "1": "desired_value",
                    "2": "found_value",
                    "3": "result"
                },
                "break_var_1": {
                    "1": "array_element"
                },
                "ptr_var_1": {
                    "1": "array_index"
                },
                "ptr_var_2": {
                    "1": "result_ptr"
                },
                "return": {
                    "1": "found_value"
                },
                "param_2+6": {
                    "1": "array+6"
                },
                "param_2[0]": {
                    "1": "current_element"
                },
                "param_2[6]": {
                    "1": "jump_step"
                },
                "param_2 + 2": {
                    "1": "result"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_param_080034f4",
            "code": "\nundefined4 check_param_080034f4(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value != -1) {\n    result = FUN_080034da();\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_param_080034f4",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003978",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034f4": {
                    "1": "check_for_valid_input",
                    "4": "check_parameter",
                    "2": "check_param_and_call_function",
                    "13": "check_param"
                },
                "param_1": {
                    "8": "input",
                    "1": "input_parameter",
                    "9": "input_param",
                    "2": "param"
                },
                "FUN_080034da": {
                    "3": "process_input",
                    "2": "process_data",
                    "1": "get_data"
                },
                "uVar1": {
                    "22": "result",
                    "3": "return_value"
                },
                "param_2": {
                    "2": "data_array",
                    "1": "ptr_param_2"
                },
                "*param_2": {
                    "1": "data"
                }
            }
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint find_value_in_array_08003506(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == target_value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003506": {
                    "1": "find_param_value",
                    "4": "find_value_index",
                    "2": "find_element",
                    "13": "find_value_in_array",
                    "3": "find_value_by_index"
                },
                "param_1": {
                    "5": "value_to_find",
                    "8": "target_value",
                    "3": "index",
                    "7": "value",
                    "1": "item",
                    "2": "element_to_find"
                },
                "param_2": {
                    "3": "short_array",
                    "14": "array",
                    "1": "array_of_numbers",
                    "5": "array_ptr"
                },
                "param_2 + 2": {
                    "2": "array_element",
                    "1": "array_offset"
                },
                "param_2 + 6": {
                    "3": "next_array_element",
                    "1": "next_data"
                },
                "*param_2": {
                    "1": "found_element",
                    "3": "found_value",
                    "4": "value",
                    "2": "current_value"
                },
                "*(int *)(param_2 + 2)": {
                    "1": "array_value",
                    "2": "current_value"
                },
                "param_2+2": {
                    "1": "element_address"
                },
                "*param_2 + 2": {
                    "1": "next_element_pointer"
                },
                "(int)*param_2": {
                    "1": "found_value"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "param_2+6": {
                    "1": "next_element_address"
                },
                "param_2[2]": {
                    "1": "array_value"
                }
            }
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "check_param_0800351e",
            "code": "\nundefined4 check_param_0800351e(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value != 0) {\n    result = FUN_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "check_param_0800351e",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800351e": {
                    "3": "check_return_value",
                    "1": "calculate_return_value",
                    "4": "check_parameter",
                    "15": "check_param"
                },
                "param_1": {
                    "6": "input",
                    "1": "value_to_check",
                    "11": "input_value",
                    "2": "param",
                    "8": "input_param"
                },
                "uVar1": {
                    "20": "result",
                    "7": "return_value"
                },
                "FUN_08003506": {
                    "1": "calculate_result",
                    "2": "process_data"
                },
                "param_2": {
                    "1": "data_array"
                }
            }
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_in_array_0800352e",
            "code": "\nundefined4 find_value_in_array_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  found_value *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array",
                "return": "found_value"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800352e": {
                    "1": "find_value_in_list",
                    "10": "find_value_index",
                    "3": "find_index",
                    "14": "find_value_in_array"
                },
                "param_1": {
                    "8": "target_value",
                    "13": "value",
                    "3": "search_value",
                    "7": "value_to_find"
                },
                "param_2": {
                    "2": "array_of_values",
                    "21": "array",
                    "1": "array_address"
                },
                "*param_2": {
                    "5": "current_element",
                    "6": "current_value"
                },
                "param_2 + 6": {
                    "4": "next_element"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "2": "value_index",
                    "1": "retrieved_value",
                    "3": "found_value",
                    "4": "next_value"
                },
                "param_2+6": {
                    "3": "next_element"
                },
                "return value": {
                    "1": "index"
                },
                "*param_2 == -1": {
                    "1": "end_of_array"
                },
                "*param_2 == param_1": {
                    "1": "value_found",
                    "2": "found_value"
                },
                "param_2 = param_2 + 6": {
                    "1": "move_to_next_value"
                },
                "return": {
                    "1": "found_value"
                },
                "DAT_0804c28c": {
                    "1": "not_found"
                },
                "*(param_2 + 6)": {
                    "1": "next_value"
                },
                "*(param_2 + 4)": {
                    "1": "found_value"
                },
                "local_1": {
                    "1": "index"
                },
                "local_2": {
                    "1": "current_value"
                },
                "local_3": {
                    "1": "next_value_address"
                },
                "ptr_1": {
                    "1": "current_element"
                },
                "ptr_2": {
                    "1": "next_element"
                }
            }
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "process_input_0800354a",
            "code": "\nundefined4 process_input_0800354a(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_0800352e();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "process_input_0800354a",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003978"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800354a": {
                    "1": "get_return_value",
                    "5": "check_return_value",
                    "6": "process_input",
                    "3": "process_param",
                    "2": "calculate_result"
                },
                "param_1": {
                    "7": "input_param",
                    "3": "input_parameter",
                    "1": "value",
                    "12": "input_value"
                },
                "uVar1": {
                    "19": "result",
                    "7": "return_value",
                    "2": "function_result"
                },
                "FUN_0800352e": {
                    "1": "get_short_param"
                },
                "param_2": {
                    "1": "short_param"
                }
            }
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) exit_loop;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array",
                "break": "exit_loop"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800355e": {
                    "1": "find_value_in_list",
                    "2": "find_value_index",
                    "4": "find_value",
                    "12": "find_value_in_array",
                    "5": "check_value_in_array"
                },
                "param_1": {
                    "8": "value_to_find",
                    "1": "value_to_compare",
                    "4": "value_to_check",
                    "10": "value"
                },
                "param_2": {
                    "21": "array",
                    "1": "value_list",
                    "5": "array_of_values",
                    "2": "array_ptr"
                },
                "*param_2": {
                    "3": "current_element",
                    "1": "array_value",
                    "11": "current_value"
                },
                "param_2 + 6": {
                    "1": "next_value_in_array",
                    "3": "next_value"
                },
                "*param_2 == -1": {
                    "1": "current_value_is_invalid"
                },
                "param_2 = param_2 + 6": {
                    "1": "move_to_next_value"
                },
                "return 0": {
                    "1": "not_found"
                },
                "return 1": {
                    "1": "value_found"
                },
                "break": {
                    "1": "exit_loop"
                }
            }
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_smaller_08003582",
            "code": "\nint compare_and_return_smaller_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_smaller_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003582": {
                    "1": "compare_and_return_nonzero_param",
                    "2": "find_common_value",
                    "3": "compare_and_return_if_equal",
                    "4": "compare_and_return_smaller"
                },
                "param_1": {
                    "1": "first_parameter",
                    "8": "value_1",
                    "13": "value1",
                    "2": "first_param"
                },
                "param_2": {
                    "1": "input_2",
                    "2": "second_param",
                    "8": "value_2",
                    "13": "value2"
                }
            }
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid execute_callback_08003594(void)\n\n{\n  if (DAT_20000188 != (callback_func *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594",
                "code": "callback_func"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003594": {
                    "1": "execute_callback_func",
                    "17": "execute_callback",
                    "9": "execute_callback_function"
                },
                "DAT_20000188": {
                    "1": "callback_func",
                    "3": "callback",
                    "7": "callback_function"
                },
                "DAT_200001ac": {
                    "9": "callback_data",
                    "2": "function_parameter",
                    "5": "callback_argument",
                    "3": "callback_parameter",
                    "1": "parameter"
                },
                "code": {
                    "1": "execute_code",
                    "2": "callback_function"
                },
                "doSomething": {
                    "1": "input_code"
                },
                "executeCodeFunction": {
                    "1": "execute_code_function"
                },
                "PTR_20000188": {
                    "1": "callback_function"
                },
                "execute_code_arg": {
                    "1": "callback_arg"
                },
                "executeCallback": {
                    "1": "execute_callback"
                },
                "callbackFunc": {
                    "1": "callback_func"
                },
                "code *": {
                    "1": "callback_function"
                },
                "CODE_PTR": {
                    "1": "callback_function"
                },
                "VAR_200001ac": {
                    "1": "callback_argument"
                },
                "VAR_20000188": {
                    "1": "callback_function"
                }
            }
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_memory_080035bc",
            "code": "\n\n\nvoid initialize_memory_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_memory_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035bc": {
                    "5": "initialize_hardware",
                    "6": "initialize_registers",
                    "1": "initialize_data",
                    "7": "initialize_memory",
                    "2": "initialize_device"
                },
                "_DAT_40023804": {
                    "2": "memory_address",
                    "1": "register2",
                    "10": "base_address"
                },
                "_DAT_40023800": {
                    "1": "system_config_flags",
                    "13": "control_register",
                    "3": "register_value"
                },
                "_DAT_e000ed08": {
                    "2": "system_control_register",
                    "1": "register_value5",
                    "7": "interrupt_control_register",
                    "3": "interrupt_control",
                    "6": "interrupt_enable_register"
                },
                "_DAT_40023808": {
                    "1": "data_flag",
                    "2": "status_register"
                },
                "_DAT_4002380c": {
                    "1": "status_register",
                    "2": "counter"
                },
                "original_parameters": {
                    "1": "new_parameters"
                },
                "": {
                    "1": ""
                }
            }
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_registers_080035fc",
            "code": "\n\n\nvoid update_registers_080035fc(flag_value *value)\n\n{\n  if (*value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_registers_080035fc",
                "param_1": "value",
                "int": "flag_value"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035fc": {
                    "1": "update_control_register",
                    "2": "update_settings",
                    "6": "update_registers"
                },
                "param_1": {
                    "3": "flag",
                    "2": "config_value",
                    "1": "bit_mask",
                    "4": "param"
                },
                "_DAT_40023844": {
                    "1": "config_register1",
                    "2": "flag1",
                    "4": "flag_register1",
                    "8": "register_a"
                },
                "_DAT_40023840": {
                    "1": "flags1",
                    "4": "flag_register2",
                    "8": "register_b",
                    "2": "flag2"
                },
                "original_variable_name_1": {
                    "1": "flag_value"
                },
                "original_variable_name_2": {
                    "1": "flag_mask"
                },
                "original_variable_name_n": {
                    "1": "updated_register_n"
                },
                "*param_1": {
                    "1": "data_value"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "original_variable_name_3": {
                    "1": "flag_mask2"
                },
                "original_variable_name_4": {
                    "1": "flag_mask3"
                },
                "int": {
                    "1": "flag_value"
                },
                "0x40010000": {
                    "1": "flag_1"
                },
                "0x40000000": {
                    "1": "flag_2"
                },
                "0x40000400": {
                    "1": "flag_3"
                },
                "0x40000800": {
                    "1": "flag_4"
                },
                "0x40000c00": {
                    "1": "flag_5"
                },
                "0x40001000": {
                    "1": "flag_6"
                },
                "0x40001400": {
                    "1": "flag_7"
                },
                "0x40010400": {
                    "1": "flag_8"
                },
                "0x40014000": {
                    "1": "flag_9"
                },
                "0x40014400": {
                    "1": "flag_10"
                },
                "0x40014800": {
                    "1": "flag_11"
                },
                "0x40001800": {
                    "1": "flag_12"
                },
                "0x40001c00": {
                    "1": "flag_13"
                },
                "0x40002000": {
                    "1": "flag_14"
                },
                "<original_function_name>": {
                    "1": "update_flags_based_on_param"
                },
                "<param_1>": {
                    "1": "param"
                },
                "DAT_40023844": {
                    "1": "control_register1"
                },
                "DAT_40023840": {
                    "1": "control_register2"
                },
                "*_param_1": {
                    "1": "setting_value"
                }
            }
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input)\n\n{\n  result input + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input",
                "return": "result"
            },
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003750": {
                    "1": "decrement_by_four",
                    "27": "subtract_four",
                    "2": "subtract_by_four"
                },
                "param_1": {
                    "10": "input",
                    "1": "number",
                    "3": "input_value",
                    "2": "input_number",
                    "4": "num",
                    "9": "result"
                },
                "param_2": {
                    "2": "output"
                },
                "return": {
                    "3": "result"
                },
                "result": {
                    "1": "sum"
                },
                "": {
                    "1": ""
                },
                "param_1+ -4": {
                    "1": "result"
                }
            }
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_if_enabled_08003754",
            "code": "\nvoid execute_callback_if_enabled_08003754(int callback_data)\n\n{\n  int function_pointer;\n  \n  function_pointer = FUN_08003750();\n  if ((*(function_pointer **)(function_pointer + 0x48) != (function_pointer *)0x0) && (*(char *)(callback_data + 0x18) == '\\x01')) {\n    (**(function_pointer **)(function_pointer + 0x48))(function_pointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_if_enabled_08003754",
                "param_1": "callback_data",
                "iVar1": "function_pointer",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003754": {
                    "1": "execute_callback_function",
                    "2": "execute_callback_if_flag_set",
                    "3": "execute_callback_if_condition_met",
                    "6": "execute_callback_if_enabled"
                },
                "param_1": {
                    "2": "input_parameter",
                    "7": "input_value",
                    "4": "callback_parameter",
                    "1": "callback_argument",
                    "3": "param"
                },
                "iVar1": {
                    "1": "function_result",
                    "9": "function_pointer",
                    "2": "callback_handle",
                    "4": "result"
                },
                "FUN_08003750": {
                    "2": "get_callback_handler",
                    "1": "get_callback_function",
                    "7": "get_function_pointer"
                },
                "1": {
                    "1": "success"
                },
                "NULL": {
                    "1": "0x0"
                },
                "code": {
                    "2": "function_ptr",
                    "3": "function_pointer"
                },
                "0x48": {
                    "1": "handler_offset"
                },
                "0x0": {
                    "1": "null"
                },
                "0x18": {
                    "1": "condition_offset"
                },
                "PTR_FUN_08003750": {
                    "1": "function_table_pointer"
                },
                "*(code **)(iVar1 + 0x48)": {
                    "1": "function_to_execute",
                    "2": "callback_function"
                },
                "param_1 + 0x18": {
                    "1": "input_value_plus_offset"
                },
                "(char *)(param_1 + 0x18)": {
                    "1": "status_char"
                },
                "**(code **)(iVar1 + 0x48)": {
                    "1": "callback_function"
                },
                "*(char *)(param_1 + 0x18)": {
                    "1": "condition_check"
                },
                "DAT_08003750": {
                    "1": "function_address"
                },
                "DAT_08003754": {
                    "1": "character_value"
                },
                "(code **)(iVar1 + 0x48)": {
                    "1": "callback_function_ptr"
                },
                "(*(code **)(iVar1 + 0x48)": {
                    "1": "callback_function"
                },
                "(*(char *)(param_1 + 0x18)": {
                    "1": "param_condition"
                },
                "*(char *)(callbackData + 0x18)": {
                    "1": "is_callback_enabled"
                },
                "'\\x01'": {
                    "1": "desired_value"
                },
                "(*(code **)(iVar1 + 0x48) != (code *)0x0)": {
                    "1": "is_callback_not_null"
                },
                "(*(char *)(inputValue + 0x18) == '\\x01')": {
                    "1": "is_input_true"
                }
            }
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_sub_function_0800376e",
            "code": "\nvoid execute_sub_function_0800376e(void)\n\n{\n  int function_pointer;\n  \n  function_pointer = FUN_08003750();\n  if (*(func_ptr **)(function_pointer + 0x44) != (func_ptr *)0x0) {\n    (**(func_ptr **)(function_pointer + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_sub_function_0800376e",
                "iVar1": "function_pointer",
                "code": "func_ptr"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800376e": {
                    "8": "execute_callback",
                    "1": "execute_callback_if_needed",
                    "9": "execute_sub_function",
                    "4": "execute_callback_function",
                    "2": "execute_optional_function"
                },
                "FUN_08003750": {
                    "1": "find_callback_function",
                    "5": "get_function_pointer",
                    "2": "get_callback_function",
                    "3": "get_sub_function_pointer"
                },
                "param_1": {
                    "1": "input_argument"
                },
                "iVar1": {
                    "5": "function_pointer",
                    "2": "callback_function_address",
                    "1": "param"
                },
                "code": {
                    "1": "func_ptr"
                },
                "(*(code **)(iVar1 + 0x44))": {
                    "1": "callback_function"
                }
            }
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "check_and_execute_functions_0800377c",
            "code": "\nvoid check_and_execute_functions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    FUN_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "check_and_execute_functions_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800377c": {
                    "1": "check_and_call",
                    "7": "check_and_call_functions",
                    "15": "check_and_execute_functions"
                },
                "FUN_080026ce": {
                    "2": "call_function",
                    "1": "reverse_data",
                    "3": "execute_sub_function",
                    "16": "execute_function"
                },
                "param_1": {
                    "1": "input_param",
                    "3": "function_parameters"
                },
                "*param_1": {
                    "1": "array"
                },
                "DAT_200001b0": {
                    "1": "data_variable_1"
                },
                "DAT_200001d4": {
                    "1": "data_variable_2"
                }
            }
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int result)\n\n{\n  result result + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "result",
                "return": "result"
            },
            "calling": [
                "FUN_08003880",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800387c": {
                    "1": "subtract_4",
                    "2": "subtract_four_from_input",
                    "23": "subtract_four"
                },
                "param_1": {
                    "8": "input",
                    "2": "num",
                    "6": "input_value",
                    "3": "input_number",
                    "1": "number",
                    "9": "result"
                },
                "param_2": {
                    "2": "output",
                    "1": "new_parameter_name_2"
                },
                "var_1": {
                    "1": "result"
                },
                "param_1 (in return statement)": {
                    "1": "result"
                },
                "param_1 (in subtraction)": {
                    "1": "num"
                },
                "param_1 (in subtraction, updated)": {
                    "1": "result"
                },
                "<original_function_name>": {
                    "1": "subtract_four"
                },
                "return": {
                    "1": "result"
                },
                "local_var_1": {
                    "1": "result"
                }
            }
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_parameters_08003880",
            "code": "\nvoid process_parameters_08003880(int data_pointer,int flag,int value,undefined4 param)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (value == *(int *)(data_pointer + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(func_ptr **)(result + 100) != (func_ptr *)0x0) {\n        (**(func_ptr **)(result + 100))();\n      }\n      FUN_08001460(data_pointer,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    FUN_080014ec(data_pointer,result + 0x68,0x20,8,param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_parameters_08003880",
                "param_1": "data_pointer",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param",
                "iVar1": "result",
                "code": "func_ptr"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_080014ec",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003880": {
                    "1": "check_params_and_execute",
                    "3": "process_data",
                    "4": "process_params",
                    "6": "update_data",
                    "2": "update_parameters"
                },
                "param_1": {
                    "1": "input_param",
                    "4": "data",
                    "2": "param1",
                    "5": "data_pointer",
                    "3": "input1"
                },
                "param_2": {
                    "16": "flag",
                    "2": "arg2",
                    "1": "input_2",
                    "3": "input2"
                },
                "param_3": {
                    "1": "target",
                    "2": "input3",
                    "3": "comparison_value",
                    "9": "value"
                },
                "param_4": {
                    "1": "additional_parameter",
                    "3": "param4",
                    "2": "input4",
                    "6": "param"
                },
                "iVar1": {
                    "19": "result",
                    "8": "return_value",
                    "2": "temp_var",
                    "1": "data_index"
                },
                "code *": {
                    "1": "function_ptr",
                    "2": "function_pointer"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "data_offset",
                    "2": "data_value"
                },
                "*(undefined *)(returnValue + 0x88)": {
                    "1": "pointer1"
                },
                "*(undefined *)(returnValue + 0x5e)": {
                    "1": "pointer2"
                },
                "*(code **)(returnValue + 100)": {
                    "1": "function_ptr_addr"
                },
                "param_1 + 0x68": {
                    "1": "output_addr"
                },
                "FUN_0800387c": {
                    "1": "get_something",
                    "6": "get_result",
                    "11": "get_return_value",
                    "2": "get_pointer"
                },
                "FUN_080014ec": {
                    "4": "process_data",
                    "2": "process_data2",
                    "1": "process_data_flag_set"
                },
                "FUN_08001460": {
                    "1": "process_data_b",
                    "4": "process_data",
                    "2": "copy_data"
                },
                "*(undefined *)(result + 0x88)": {
                    "1": "result[0x88]"
                },
                "*(undefined *)(result + 0x5e)": {
                    "1": "flag2"
                },
                "*(code **)(result + 100)": {
                    "1": "result[100]"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "temp_var4"
                },
                "*(undefined *)(iVar1 + 0x5e)": {
                    "1": "second_val",
                    "2": "var2"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "function_ptr",
                    "2": "func_ptr"
                },
                "(iVar1 + 100)": {
                    "1": "ptr_to_func"
                },
                "iVar1 + 0x68": {
                    "1": "buffer"
                },
                "0x20": {
                    "1": "value1"
                },
                "8": {
                    "2": "size",
                    "1": "value2"
                },
                "iVar1 + 0x88": {
                    "1": "var1"
                },
                "iVar1 + 0x5e": {
                    "1": "var2"
                },
                "input1 + 0xc": {
                    "1": "element"
                },
                "*(uint **)(param_1 + 0x68)": {
                    "1": "param_1[0x68]"
                },
                "(**(code **)(iVar1 + 100))()": {
                    "1": "call_function"
                },
                "param_1 + 0xc": {
                    "1": "input_3_addr"
                },
                "param_1 + 0x88": {
                    "1": "temp_var1"
                },
                "param_1 + 0x5e": {
                    "1": "temp_var2"
                },
                "0x0": {
                    "1": "null_ptr"
                },
                "FUN_08001460(param_1,iVar1 + 0x68,*(undefined *)(iVar1 + 0x88),8)": {
                    "1": "write_updated_data"
                },
                "iVar1 + 0x5e) = 1": {
                    "1": "set_temp_var2_to1"
                },
                "FUN_080014ec(param_1,iVar1 + 0x68,0x20,8,param_4)": {
                    "1": "process_updated_data"
                },
                "(param_1 + 0xc)": {
                    "1": "param1_plus_12"
                },
                "(iVar1 + 0x88)": {
                    "1": "result_plus_136"
                },
                "(iVar1 + 0x5e)": {
                    "1": "result_plus_94"
                },
                "code **": {
                    "1": "function_pointer"
                },
                "0xc": {
                    "1": "offset"
                },
                "code": {
                    "1": "func_ptr"
                },
                "returnValue + 0x88": {
                    "1": "flag_1"
                },
                "returnValue + 0x5e": {
                    "1": "flag_2_addr"
                }
            }
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_function_080038d0",
            "code": "\nvoid execute_function_080038d0(undefined4 input_param)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (((*(function_ptr **)(result + 0x60) != (function_ptr *)0x0) && (*(character *)(result + 0x5e) == '\\x01')) &&\n     (*(character *)(result + 0x2c) != ' ')) {\n    (**(function_ptr **)(result + 0x60))(result + 0x68);\n  }\n  FUN_08001578(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_function_080038d0",
                "param_1": "input_param",
                "iVar1": "result",
                "code": "function_ptr",
                "char": "character"
            },
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080038d0": {
                    "1": "execute_action",
                    "2": "execute_callback",
                    "18": "execute_function",
                    "4": "execute_function_if_conditions_met"
                },
                "param_1": {
                    "2": "param",
                    "4": "data",
                    "1": "input_data",
                    "3": "param_1",
                    "8": "input_param"
                },
                "iVar1": {
                    "1": "temp_var1",
                    "4": "return_value",
                    "3": "function_result",
                    "15": "result"
                },
                "FUN_0800387c": {
                    "1": "retrieve_callback",
                    "9": "get_function_address",
                    "10": "get_function_pointer",
                    "4": "get_function_ptr"
                },
                "FUN_08001578": {
                    "1": "call_another_function",
                    "9": "perform_cleanup",
                    "2": "cleanup",
                    "5": "cleanup_function"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "function"
                },
                "*(char *)(iVar1 + 0x5e)": {
                    "1": "condition_1"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "char_var"
                },
                "PTR_FUN_0800387c": {
                    "1": "function_address_ptr"
                },
                "**(code **)(iVar1 + 0x60)": {
                    "2": "function_pointer"
                },
                "**(code **)(iVar1 + 0x60))(iVar1 + 0x68)": {
                    "1": "execute_function"
                },
                "code": {
                    "1": "function_ptr"
                },
                "char": {
                    "1": "character"
                },
                "(iVar1 + 0x68)": {
                    "1": "function_argument"
                },
                "(**(code **)(iVar1 + 0x60))": {
                    "1": "function_pointer"
                },
                "iVar1 + 0x68": {
                    "1": "argument"
                },
                "FUNK_0800387c": {
                    "1": "get_function_pointer"
                }
            }
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_call_function_08003900",
            "code": "\nvoid check_and_call_function_08003900(undefined4 input)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    FUN_08001578(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003900": {
                    "4": "check_and_execute_function",
                    "1": "check_if_flag_set",
                    "25": "check_and_call_function"
                },
                "param_1": {
                    "7": "input",
                    "6": "input_parameter",
                    "4": "argument",
                    "1": "input_data",
                    "2": "param",
                    "5": "input_param"
                },
                "iVar1": {
                    "1": "func_result",
                    "4": "return_value",
                    "23": "result"
                },
                "FUN_0800387c": {
                    "2": "get_character_data",
                    "1": "get_expected_value",
                    "4": "get_return_value",
                    "3": "get_result"
                },
                "FUN_08001578": {
                    "1": "execute_action",
                    "9": "execute_function",
                    "2": "call_sub_function",
                    "5": "call_function",
                    "4": "call_another_function"
                },
                "FUNK_0800387c": {
                    "1": "get_flag_value"
                },
                "undefined4 param_1": {
                    "1": "parameter"
                },
                "*(char *)(iVar1 + 0x5f)": {
                    "1": "value_at_address_plus_offset"
                },
                "F_UN_08001578": {
                    "1": "execute_function_if_condition_passes"
                }
            }
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configure_uart_pins_08003978(int *uart_pins)\n\n{\n  int uart_pin1;\n  int uart_pin2;\n  undefined4 uart_config1;\n  uint uart_config2;\n  uint uart_pin1_mask;\n  uint uart_pin2_mask;\n  uint uart_pin_config2;\n  undefined4 uart_pin_config2;\n  uint uart_pin_config3;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin1 = FUN_080034f4((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n    uart_pin2 = FUN_080034f4((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n    if ((uart_pin2 == 0) || (uart_pin1 == 0)) {\n      FUN_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uart_pin2);\n    }\n    else {\n      uart_pin1 = FUN_08003582(uart_pin1);\n      *uart_pins = uart_pin1;\n      if (uart_pin1 == 0) {\n        FUN_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart_pin1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)(uart_pins + 0x17) = 0x25;\n        }\n        else if (uart_pin1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)(uart_pins + 0x17) = 0x26;\n        }\n        else if (uart_pin1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)(uart_pins + 0x17) = 0x27;\n        }\n        else if (uart_pin1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uart_pins + 0x11) = 3;\n          *(undefined *)(uart_pins + 0x17) = 0x34;\n        }\n        else if (uart_pin1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uart_pins + 0x11) = 4;\n          *(undefined *)(uart_pins + 0x17) = 0x35;\n        }\n        else if (uart_pin1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uart_pins + 0x11) = 5;\n          *(undefined *)(uart_pins + 0x17) = 0x47;\n        }\n        else if (uart_pin1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uart_pins + 0x11) = 6;\n          *(undefined *)(uart_pins + 0x17) = 0x52;\n        }\n        else if (uart_pin1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uart_pins + 0x11) = 7;\n          *(undefined *)(uart_pins + 0x17) = 0x53;\n        }\n        uart_config1 = FUN_080031fc((uint)((int)*(short *)((int)uart_pins + 0x5a) << 0x18) >> 0x1c);\n        uart_config2 = FUN_0800354a((int)*(short *)((int)uart_pins + 0x5a),&DAT_08005c10);\n        uart_pin1_mask = 1 << (*(ushort *)((int)uart_pins + 0x5a) & 0xf) & 0xffff;\n        uart_pin2_mask = (uart_config2 >> 3 & 1) << 4 | uart_config2 & 7;\n        uart_pin_config2 = (uart_config2 << 0x1a) >> 0x1e;\n        uart_pin_config3 = (uart_config2 << 0x11) >> 0x19;\n        uart_pin_config2 = 3;\n        FUN_08000fb4(uart_config1,&uart_pin1_mask);\n        uart_config1 = FUN_080031fc((uint)((int)*(short *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        uart_config2 = FUN_0800354a((int)*(short *)(uart_pins + 0x16),&DAT_08005ca0);\n        uart_pin1_mask = 1 << (*(ushort *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        uart_pin2_mask = (uart_config2 >> 3 & 1) << 4 | uart_config2 & 7;\n        uart_pin_config2 = (uart_config2 << 0x1a) >> 0x1e;\n        FUN_08000fb4(uart_config1,&uart_pin1_mask);\n        (&DAT_200002b4)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        FUN_08002d72(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "uart_pins",
                "iVar1": "uart_pin1",
                "iVar2": "uart_pin2",
                "uVar3": "uart_config1",
                "uVar4": "uart_config2",
                "local_2c": "uart_pin1_mask",
                "local_28": "uart_pin2_mask",
                "local_24": "uart_pin_config2",
                "local_20": "uart_pin_config2",
                "local_1c": "uart_pin_config3"
            },
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08003582",
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_0800354a",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003978": {
                    "6": "initialize_uart_pins",
                    "1": "configure_peripheral",
                    "2": "initialize_uart",
                    "19": "configure_uart_pins"
                },
                "param_1": {
                    "1": "peripheral_pins",
                    "4": "pins",
                    "10": "uart_pins",
                    "2": "uart_config",
                    "9": "pin_config"
                },
                "iVar1": {
                    "2": "uart_peripheral1",
                    "1": "uart_peripheral",
                    "3": "uart1_peripheral",
                    "10": "uart_pin1"
                },
                "iVar2": {
                    "1": "peripheral_result",
                    "3": "uart2_peripheral",
                    "2": "uart_peripheral2",
                    "10": "uart_pin2"
                },
                "uVar3": {
                    "5": "uart_config1",
                    "1": "uart_pin1_config",
                    "2": "uart_pin_config1",
                    "3": "uart1_config"
                },
                "uVar4": {
                    "1": "uart_baud_rate",
                    "2": "uart_pin_config2",
                    "5": "uart_config2",
                    "3": "uart2_config"
                },
                "local_2c": {
                    "1": "bitmask1",
                    "4": "pin_mask",
                    "3": "pin_mask1"
                },
                "local_28": {
                    "1": "uart2_mode",
                    "2": "pin_config1"
                },
                "local_24": {
                    "1": "uart_pin1_gpio_mode",
                    "2": "uart_pin_config2"
                },
                "local_20": {
                    "1": "uart_pin1_config",
                    "2": "uart_pin_config2"
                },
                "local_1c": {
                    "2": "uart_pin_config3",
                    "1": "output_type"
                },
                "FUN_080034f4": {
                    "1": "get_pin_config"
                },
                "FUN_08003582": {
                    "1": "verify_uart_pins"
                },
                "_DAT_40023824": {
                    "1": "uart_port_config_reg1"
                },
                "_DAT_40023844": {
                    "1": "uart_port_config_reg2"
                },
                "FUN_08004fdc": {
                    "1": "print_error_message",
                    "3": "print_error"
                },
                "_DAT_40023820": {
                    "1": "uart_periph_reg"
                },
                "_DAT_40023840": {
                    "1": "uart_periph_config_reg"
                },
                "FUN_080031fc": {
                    "1": "shift_config_value"
                },
                "FUN_0800354a": {
                    "1": "get_pin_config"
                },
                "FUN_08002d72": {
                    "1": "initialize_pins",
                    "3": "initialize_uart"
                },
                "FUN_08000fb4": {
                    "1": "set_pin_configuration"
                },
                "DAT_08005ca0": {
                    "1": "uart_pin_conf_data1"
                },
                "DAT_08005c10": {
                    "1": "uart_pin_conf_data2"
                }
            }
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_data_08003cc8",
            "code": "\nvoid initialize_data_08003cc8(void)\n\n{\n  int result;\n  undefined4 second_result;\n  \n  result = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result != 0) {\n    second_result = FUN_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = FUN_0800351e(second_result,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    FUN_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_data_08003cc8",
                "iVar1": "result",
                "uVar2": "second_result"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800351e",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003cc8": {
                    "1": "initialize_system",
                    "2": "initialize_data_structures",
                    "26": "initialize_data"
                },
                "iVar1": {
                    "1": "allocation_result",
                    "27": "result"
                },
                "uVar2": {
                    "1": "processed_data",
                    "3": "value",
                    "2": "another_result",
                    "8": "second_result",
                    "4": "param"
                },
                "FUN_080034f4": {
                    "1": "get_info",
                    "2": "get_data"
                },
                "&DAT_08005ca0": {
                    "1": "data_pointer"
                },
                "DAT_2000008a": {
                    "1": "result_variable"
                },
                "FUN_0800351e": {
                    "1": "function2",
                    "5": "process_data"
                },
                "&DAT_08005c10": {
                    "1": "data_variable_2"
                },
                "DAT_20000088": {
                    "1": "size",
                    "5": "data_size"
                },
                "DAT_20000078": {
                    "1": "time_delay",
                    "3": "constant1"
                },
                "DAT_20000084": {
                    "1": "var2",
                    "3": "constant2"
                },
                "DAT_2000007c": {
                    "1": "flag2",
                    "3": "constant3"
                },
                "DAT_20000080": {
                    "1": "constant_4",
                    "3": "constant4"
                },
                "FUN_08003978": {
                    "1": "update_data",
                    "2": "process_data",
                    "5": "print_data"
                },
                "&DAT_20000030": {
                    "1": "data_config"
                },
                "0x38": {
                    "1": "device_size"
                },
                "DAT_08005c10": {
                    "1": "data2"
                },
                "DAT_08005ca0": {
                    "1": "data_address"
                },
                "DAT_20000030": {
                    "1": "param1_array"
                },
                "param_1": {
                    "1": "size"
                }
            }
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "execute_function_08003d18",
            "code": "\nuint execute_function_08003d18(undefined4 input_param,uint param2)\n\n{\n  int initial_value;\n  int result2;\n  uint index;\n  \n  initial_value = FUN_08000e30();\n  result2 = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result2 == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (result2 = FUN_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != result2))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (FUN_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    result2 = FUN_08002dd0((&DAT_200002b4)[index],input_param,param2 & 0xffff,1000);\n    if (result2 == 0) {\n      return param2;\n    }\n    result2 = FUN_08000e30();\n  } while ((uint)(result2 - initial_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "execute_function_08003d18",
                "param_1": "input_param",
                "param_2": "param2",
                "iVar1": "initial_value",
                "iVar2": "result2",
                "uVar3": "index"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08000e30",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003d18": {
                    "1": "reverse_secret_code",
                    "2": "execute_function"
                },
                "param_1": {
                    "1": "unknown_param",
                    "3": "param1",
                    "2": "value1",
                    "9": "input_param"
                },
                "param_2": {
                    "2": "arg2",
                    "1": "value",
                    "3": "param2"
                },
                "iVar1": {
                    "1": "previous_value",
                    "2": "value1",
                    "9": "initial_value",
                    "8": "result1"
                },
                "iVar2": {
                    "2": "value2",
                    "1": "current_value",
                    "8": "result2",
                    "5": "result"
                },
                "uVar3": {
                    "5": "loop_counter",
                    "1": "loop_iter",
                    "3": "count",
                    "7": "counter",
                    "11": "index"
                },
                "DAT_08005ca0": {
                    "5": "data_array",
                    "1": "data_value",
                    "2": "constant_data",
                    "3": "some_data"
                },
                "DAT_200002b4": {
                    "1": "result_array",
                    "4": "data_array",
                    "2": "array"
                },
                "FUN_08000e30": {
                    "1": "function2",
                    "7": "get_initial_value",
                    "2": "get_current_time"
                },
                "FUN_080034f4": {
                    "1": "perform_operation",
                    "2": "initialize_data"
                },
                "FUN_08003cc8": {
                    "1": "perform_operation",
                    "2": "print_error",
                    "5": "handle_error"
                },
                "DAT_20000074": {
                    "1": "max_size",
                    "3": "limit_value",
                    "2": "max_value",
                    "4": "limit"
                },
                "FUN_08002dd0": {
                    "1": "calculate_result",
                    "9": "process_data",
                    "2": "execute_operation"
                },
                "&DAT_08005ca0": {
                    "4": "data_array",
                    "1": "search_array"
                },
                "&DAT_200002b4": {
                    "2": "data_array",
                    "1": "data_pointer"
                },
                "*(int *)(&DAT_200002b4)[uVar3]": {
                    "1": "array[index]"
                }
            }
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_flag_08003dd0",
            "code": "\nbool check_flag_08003dd0(int input_value)\n\n{\n  uint result;\n  \n  result = FUN_0800312c((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (result & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_flag_08003dd0",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003dd0": {
                    "1": "is_bit_pattern_valid",
                    "5": "check_flag",
                    "3": "check_condition",
                    "4": "is_flag_set"
                },
                "param_1": {
                    "6": "flag",
                    "1": "input_data",
                    "2": "value",
                    "11": "input_value",
                    "7": "flag_value"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "function_result",
                    "22": "result"
                },
                "FUN_0800312c": {
                    "1": "convert_byte_to_int",
                    "6": "get_byte_value",
                    "2": "get_flag_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "flag_index"
                }
            }
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_flag_set_08003df4",
            "code": "\nbool is_flag_set_08003df4(int input_value)\n\n{\n  uint result;\n  \n  result = FUN_0800312c((&DAT_200002b4)[*(input_byte *)(input_value + 0x44)]);\n  return (result & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_flag_set_08003df4",
                "param_1": "input_value",
                "uVar1": "result",
                "byte": "input_byte"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003df4": {
                    "1": "is_value_valid",
                    "4": "check_flag",
                    "3": "check_condition",
                    "13": "is_flag_set",
                    "2": "is_param_valid"
                },
                "param_1": {
                    "7": "flag",
                    "4": "input",
                    "1": "input_param",
                    "10": "input_value",
                    "2": "value",
                    "5": "flag_value"
                },
                "uVar1": {
                    "1": "flag_value",
                    "2": "function_result",
                    "24": "result"
                },
                "byte": {
                    "1": "input_byte"
                },
                "FUN_0800312c": {
                    "1": "get_bit_from_data",
                    "2": "get_byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "data_index"
                },
                "&DAT_200002b4": {
                    "1": "data_array"
                },
                "(uVar1 & 0x21) == 0x21": {
                    "1": "is_condition_true"
                },
                "0x21": {
                    "1": "comparison_constant"
                },
                "FUNC_0800312c": {
                    "1": "get_flag_value"
                },
                "*(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "data_value"
                },
                "(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "(uint) uVar1 & 0x21": {
                    "1": "check_value"
                }
            }
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_data_08003e18",
            "code": "\nundefined4 extract_data_08003e18(int input_value,undefined *output,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  if (input_value == 0) {\n    return 0xffffffff;\n  }\n  result = FUN_08003dd0();\n  if (result == 0) {\n    *output = *(undefined *)(input_value + 0x45);\n    FUN_08002efa((&DAT_200002b4)[*(byte *)(input_value + 0x44)],input_value + 0x45,1,&DAT_200002b4,param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_data_08003e18",
                "param_1": "input_value",
                "param_2": "output",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003e18": {
                    "1": "extract_specific_data",
                    "4": "extract_and_process_data",
                    "2": "extract_byte_and_process",
                    "5": "extract_data"
                },
                "param_1": {
                    "4": "input",
                    "1": "value_ptr",
                    "8": "input_value",
                    "2": "input_data",
                    "3": "data_address"
                },
                "param_2": {
                    "4": "output_value",
                    "1": "offset",
                    "2": "output_buffer",
                    "7": "output"
                },
                "param_3": {
                    "1": "param_a",
                    "10": "param3",
                    "2": "length",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "unused2",
                    "12": "param4",
                    "5": "param_4",
                    "2": "additional_data"
                },
                "iVar1": {
                    "2": "return_value",
                    "1": "result_code",
                    "24": "result"
                },
                "FUN_08002efa": {
                    "1": "perform_operation",
                    "17": "process_data"
                },
                "FUN_08003dd0": {
                    "1": "check_validity",
                    "2": "check_value",
                    "11": "check_condition",
                    "4": "check_data"
                },
                "FUNC_08002efa": {
                    "1": "process_data"
                },
                "DAT_200002b4": {
                    "2": "data",
                    "1": "data_buffer"
                },
                "*param_2": {
                    "1": "output"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "data_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "data_index",
                    "2": "index"
                },
                "&DAT_200002b4": {
                    "1": "destination"
                },
                "byte": {
                    "1": "byte"
                }
            }
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_08003e54",
            "code": "\nvoid update_data_08003e54(int data,undefined4 value,undefined4 unused,undefined4 param_4)\n\n{\n  int result;\n  uint index;\n  \n  if (data != 0) {\n    result = FUN_08003dd0();\n    if (result == 0) {\n      index = (uint)*(byte *)(data + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = value;\n      *(int *)(&DAT_2000023c + index * 4) = data;\n      FUN_08000e60((int)*(char *)(data + 0x5c),0,1,index,param_4);\n      FUN_08000ec4((int)*(char *)(data + 0x5c));\n      FUN_08002efa((&DAT_200002b4)[*(byte *)(data + 0x44)],data + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "unused",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08000e60",
                "FUN_08003dd0",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003e54": {
                    "1": "process_param",
                    "10": "process_data",
                    "2": "initialize_data",
                    "13": "update_data"
                },
                "param_1": {
                    "2": "input",
                    "9": "data",
                    "1": "input_value",
                    "6": "data_ptr",
                    "7": "data_pointer",
                    "3": "param"
                },
                "param_2": {
                    "1": "new_value1",
                    "8": "new_value",
                    "14": "value",
                    "6": "value1"
                },
                "param_3": {
                    "1": "length",
                    "4": "value2",
                    "8": "unused",
                    "2": "unused_param"
                },
                "param_4": {
                    "1": "arg2",
                    "5": "value3",
                    "3": "additional_data"
                },
                "iVar1": {
                    "28": "result",
                    "2": "return_value",
                    "1": "check_result"
                },
                "uVar2": {
                    "1": "data_index",
                    "6": "byte_value",
                    "24": "index"
                },
                "FUN_08002efa": {
                    "1": "update_index",
                    "2": "update_data"
                },
                "FUN_08000e60": {
                    "1": "process_data_segment",
                    "2": "process_value",
                    "3": "process_data"
                },
                "FUN_08003dd0": {
                    "1": "check_condition",
                    "2": "check_data"
                },
                "FUN_08000ec4": {
                    "1": "process_data2",
                    "4": "cleanup"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "key"
                },
                "*(undefined4 *)(&DAT_20000214 + uVar2 * 4)": {
                    "1": "data_structure_array"
                },
                "*(int *)(&DAT_2000023c + uVar2 * 4)": {
                    "1": "data_pointer_array"
                },
                "*(char *)(param_1 + 0x5c)": {
                    "1": "character"
                },
                "DAT_20000214": {
                    "1": "data_array"
                },
                "DAT_2000023c": {
                    "1": "index_array"
                },
                "&DAT_20000214": {
                    "1": "array1"
                },
                "&DAT_2000023c": {
                    "1": "array2"
                },
                "(int)*(char *)(param_1 + 0x5c)": {
                    "1": "char_value"
                }
            }
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid update_data_08003eac(int data_ptr,undefined4 new_value)\n\n{\n  byte byte_value;\n  \n  if (data_ptr != 0) {\n    byte_value = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byte_value * 4) = new_value;\n    *(int *)(&DAT_2000028c + (uint)byte_value * 4) = data_ptr;\n    FUN_08000e60((int)*(char *)(data_ptr + 0x5c),0,2);\n    FUN_08000ec4((int)*(char *)(data_ptr + 0x5c));\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(data_ptr + 0x44)],\n                 *(int *)(data_ptr + 0x68) + (uint)*(ushort *)(data_ptr + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "bVar1": "byte_value"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003eac": {
                    "1": "update_data_and_call_functions",
                    "4": "process_data",
                    "2": "update_function",
                    "19": "update_data"
                },
                "param_1": {
                    "2": "data",
                    "1": "param",
                    "11": "data_ptr",
                    "8": "data_pointer",
                    "3": "data_address"
                },
                "param_2": {
                    "1": "data_value",
                    "23": "new_value",
                    "4": "value"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "data_byte",
                    "10": "index",
                    "15": "byte_value"
                },
                "FUN_08000e60": {
                    "3": "update_char",
                    "1": "initialize_value",
                    "2": "initialize_data"
                },
                "FUN_08000ec4": {
                    "1": "process_data_char",
                    "6": "process_data",
                    "2": "cleanup_data"
                },
                "FUN_08002eb2": {
                    "1": "execute_operation",
                    "3": "process_data",
                    "2": "process_data_part3"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "data_index"
                },
                "*(undefined4 *)(&DAT_20000264 + (uint)bVar1 * 4)": {
                    "1": "data_ptr"
                },
                "*(int *)(&DAT_2000028c + (uint)bVar1 * 4)": {
                    "1": "data_index_storage"
                },
                "(int)*(char *)(param_1 + 0x5c)": {
                    "3": "char_value"
                },
                "*(int *)(param_1 + 0x68) + (uint)*(ushort *)(param_1 + 0x6e)": {
                    "1": "data_value"
                },
                "DAT_20000264": {
                    "1": "array1"
                },
                "DAT_2000028c": {
                    "1": "array2"
                },
                "&DAT_20000264": {
                    "1": "array_pointer1"
                },
                "&DAT_2000028c": {
                    "1": "array_pointer2"
                },
                "(int)*(char *)(param_1 + 0x62)": {
                    "1": "char_value2"
                },
                "(uint)*(ushort *)(param_1 + 0x6e)": {
                    "1": "ushort_value"
                },
                "*(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "new_value"
                },
                "PARAM_1": {
                    "1": "data_offset"
                },
                "PARAM_2": {
                    "1": "additional_offset"
                },
                "PARAM_3": {
                    "1": "value_to_pass"
                },
                "param_3": {
                    "1": "flag"
                }
            }
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_value_index_08003f00",
            "code": "\nuint find_value_index_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_value_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f00": {
                    "1": "find_number_index",
                    "2": "find_in_array",
                    "7": "find_value_index",
                    "5": "find_index"
                },
                "param_1": {
                    "10": "input_value",
                    "1": "input_param",
                    "11": "value",
                    "3": "number"
                },
                "uVar1": {
                    "1": "output_number",
                    "2": "found_index",
                    "21": "index",
                    "4": "result"
                }
            }
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_based_on_value_08003f24",
            "code": "\nvoid execute_function_based_on_value_08003f24(void)\n\n{\n  uint result;\n  \n  result = FUN_08003f00();\n  if (result < 10) {\n    (**(subfunction_pointer **)(&DAT_20000214 + result * 4))(*(undefined4 *)(&DAT_2000023c + result * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_based_on_value_08003f24",
                "uVar1": "result",
                "code": "subfunction_pointer"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f24": {
                    "2": "execute_function_based_on_condition",
                    "1": "execute_callback_function",
                    "5": "execute_sub_function",
                    "6": "execute_function_based_on_value",
                    "3": "execute_operation"
                },
                "uVar1": {
                    "5": "result",
                    "1": "counter",
                    "2": "index",
                    "3": "value"
                },
                "FUN_08003f00": {
                    "1": "get_integer",
                    "4": "get_value",
                    "2": "get_function_index"
                },
                "param_1": {
                    "3": "input_parameter",
                    "1": "unused_param",
                    "2": "index"
                },
                "code": {
                    "1": "subfunction_pointer"
                },
                "DAT_20000214": {
                    "1": "subfunction_table"
                },
                "DAT_2000023c": {
                    "1": "argument_table"
                },
                "&DAT_20000214": {
                    "1": "function_pointers_start"
                },
                "&DAT_2000023c": {
                    "1": "function_arguments_start"
                }
            }
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "execute_function_08003f48",
            "code": "\nvoid execute_function_08003f48(void)\n\n{\n  uint result;\n  int result;\n  int data;\n  \n  result = FUN_08003f00();\n  data = *(int *)(&DAT_2000028c + result * 4);\n  if ((result < 10) && (result = (**(code **)(&DAT_20000264 + result * 4))(data), result != -1)) {\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 0x68) + (uint)*(ushort *)(data + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "execute_function_08003f48",
                "uVar1": "result",
                "iVar3": "data",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f48": {
                    "1": "execute_selected_function",
                    "10": "process_data",
                    "11": "execute_function"
                },
                "uVar1": {
                    "1": "random_value",
                    "3": "index",
                    "2": "return_value",
                    "4": "random_number",
                    "9": "result"
                },
                "iVar3": {
                    "1": "selected_function",
                    "9": "data",
                    "5": "data_pointer"
                },
                "iVar2": {
                    "7": "return_value",
                    "2": "status",
                    "1": "action_result",
                    "11": "result"
                },
                "FUN_08003f00": {
                    "1": "fetch_result",
                    "14": "get_random_number",
                    "4": "get_random_value",
                    "2": "get_random_index"
                },
                "DAT_2000028c": {
                    "3": "data_array",
                    "1": "data_array1"
                },
                "DAT_20000264": {
                    "1": "function_pointer_array",
                    "2": "function_array"
                },
                "FUN_08002eb2": {
                    "7": "perform_action",
                    "4": "process_data",
                    "1": "execute_process",
                    "2": "execute_operation"
                },
                "iVar3 + 0x44": {
                    "1": "byte_value"
                },
                "iVar3 + 0x68": {
                    "1": "int_value"
                },
                "iVar3 + 0x6e": {
                    "1": "short_value"
                },
                "code **": {
                    "1": "function_ptr"
                },
                "*(byte *)(iVar3 + 0x44)": {
                    "1": "byte_value"
                },
                "*(int *)(iVar3 + 0x68)": {
                    "2": "int_value"
                },
                "*(ushort *)(iVar3 + 0x6e)": {
                    "2": "ushort_value"
                },
                "param_1": {
                    "1": "param",
                    "2": "input_value"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "FUn_08002eb2": {
                    "1": "process_data_entry"
                },
                "DAT_200002b4": {
                    "1": "byte_data",
                    "3": "byte_array"
                },
                "*(int *)(&DAT_2000028c + uVar1 * 4)": {
                    "1": "function_pointer"
                },
                "(**(code **)(&DAT_20000264 + uVar1 * 4))": {
                    "1": "function"
                },
                "*(int *)(iVar3 + 0x44)": {
                    "1": "byte_value"
                },
                "(uVar1 < 10)": {
                    "1": "is_in_range"
                },
                "(**(code **)(&DAT_20000264 + uVar1 * 4))(iVar3)": {
                    "1": "uncertain_result"
                },
                "F(0x44)": {
                    "1": "byte_value"
                },
                "*(int *)(data + 0x68) + (uint)*(ushort *)(data + 0x6e)": {
                    "1": "computed_value"
                },
                "**FUN_08003f00": {
                    "1": "get_random_number"
                },
                "**FUN_08002eb2": {
                    "1": "perform_operation"
                }
            }
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocate_memory_08004094(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocated_memory = DAT_200002dc;\n  if (DAT_200002dc + size <= end_of_stack) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocated_memory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_limit",
                "&stack0x00000000": "end_of_stack"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004094": {
                    "29": "allocate_memory",
                    "1": "get_memory"
                },
                "param_1": {
                    "1": "buffer_size",
                    "28": "size"
                },
                "puVar1": {
                    "28": "allocated_memory",
                    "1": "memory"
                },
                "stack0x00000000": {
                    "2": "stack_end",
                    "1": "stack_pointer",
                    "4": "stack_limit"
                },
                "DAT_20000678": {
                    "3": "initial_memory",
                    "1": "initial_position"
                },
                "DAT_200002dc": {
                    "3": "current_position",
                    "1": "stack_ptr",
                    "7": "current_memory",
                    "5": "current_pointer"
                },
                "DAT_20000674": {
                    "1": "error_indicator",
                    "3": "error_flag",
                    "15": "error_code"
                },
                "&DAT_20000678": {
                    "1": "initial_memory_ptr",
                    "2": "initial_memory"
                },
                "new_variable_name_1": {
                    "1": "stack_limit"
                },
                "&stack0x00000000": {
                    "1": "end_address"
                }
            }
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nint get_default_value_080040d0(void)\n\n{\n  return 0resultffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0",
                "undefined4": "int",
                "x": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040d0": {
                    "1": "initialize_error_flag",
                    "7": "get_default_value",
                    "2": "initialize_error_code",
                    "6": "initialize_return_value"
                },
                "<no_change>": {
                    "1": "<no_change>"
                },
                "undefined4": {
                    "2": "error_code",
                    "1": "uint32_t"
                },
                "x": {
                    "1": "result"
                },
                "DAT_080057e0": {
                    "1": "default_value"
                },
                "DAT_08004100": {
                    "1": "invalid_value"
                }
            }
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_page_size_080040d6",
            "code": "\nreturn_type set_memory_page_size_080040d6(return_type result,int memory_address)\n\n{\n  *(return_type *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_page_size_080040d6",
                "param_1": "result",
                "param_2": "memory_address",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040d6": {
                    "1": "set_memory_permission",
                    "3": "set_memory_flag",
                    "2": "initialize_memory_segment",
                    "8": "set_memory_page_size",
                    "7": "initialize_memory"
                },
                "param_1": {
                    "2": "arg1",
                    "1": "first_parameter",
                    "3": "base_address",
                    "5": "param"
                },
                "param_2": {
                    "5": "address",
                    "1": "size",
                    "2": "memory_offset",
                    "11": "memory_address"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "2": "page_size",
                    "1": "memory_flag"
                },
                "param_2 + 4": {
                    "1": "buffer_size"
                },
                "<original_function_name>": {
                    "1": "set_memory_page_permission"
                },
                "4": {
                    "1": "value"
                },
                "0x2000": {
                    "1": "initial_value"
                },
                "undefined4": {
                    "1": "return_type"
                }
            }
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "get_one_080040e0",
            "code": "\nint get_one_080040e0(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "get_one_080040e0",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e0": {
                    "5": "initialize",
                    "6": "get_one",
                    "1": "get_true_value",
                    "4": "get_return_value",
                    "3": "get_status"
                },
                "undefined4": {
                    "10": "int",
                    "4": "status",
                    "1": "uint32_t",
                    "2": "bool"
                },
                "return": {
                    "1": "return_code",
                    "4": "result"
                },
                "return_value": {
                    "1": "result"
                },
                "": {
                    "1": ""
                },
                "result": {
                    "1": "new_result"
                },
                "return value": {
                    "1": "status"
                },
                "DAT_08004abc": {
                    "1": "program_constant"
                },
                "DAT_08004def": {
                    "1": "program_data"
                },
                "PTR_08004xyz": {
                    "1": "program_pointer"
                },
                "<original_function_parameter>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nvoid initialize_080040e4(void)\n\n{\n  status 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4",
                "undefined4": "void",
                "return": "status"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e4": {
                    "1": "initialize_value",
                    "19": "initialize",
                    "3": "get_zero"
                },
                "return value": {
                    "1": "status"
                },
                "undefined4": {
                    "13": "void",
                    "1": "uint32_t"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                },
                "<unused_parameter>": {
                    "1": "<unused_parameter>"
                },
                "0": {
                    "1": "success"
                },
                "return_value": {
                    "1": "result"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "1": "count"
                },
                "<original_variable_name_2>": {
                    "1": "result"
                },
                "return": {
                    "1": "status"
                }
            }
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nvoid initialize_080040e8(void)\n\n{\n  status_code 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8",
                "undefined4": "void",
                "return": "status_code"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e8": {
                    "1": "get_data",
                    "20": "initialize",
                    "3": "get_zero"
                },
                "undefined4": {
                    "1": "status",
                    "14": "void",
                    "2": "int"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "return": {
                    "1": "status_code"
                },
                "return value": {
                    "1": "status"
                },
                "return_type": {
                    "1": "undefined4"
                },
                "<original_variable_name_1>": {
                    "1": "counter",
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "result",
                    "3": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "3": "<new_variable_name_n>"
                }
            }
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "execute_function_080040ec",
            "code": "\nvoid execute_function_080040ec(result_type arg1,result_type arg2,result_type arg3,result_type arg4)\n\n{\n  FUN_08003d18(arg2,arg3,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "execute_function_080040ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "undefined4": "result_type"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040ec": {
                    "1": "execute_sub_functions",
                    "3": "initialize",
                    "10": "execute_function"
                },
                "param_1": {
                    "1": "func_parameter_1",
                    "4": "unused_param",
                    "9": "arg1",
                    "3": "param1",
                    "2": "input_param"
                },
                "param_2": {
                    "4": "param2",
                    "1": "command",
                    "2": "input_param",
                    "3": "input1",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "input_2",
                    "4": "param3",
                    "2": "input_param2",
                    "9": "arg3"
                },
                "param_4": {
                    "1": "input3",
                    "4": "param4",
                    "3": "unused",
                    "9": "arg4"
                },
                "FUN_08003d18": {
                    "2": "calculate_result",
                    "7": "process_data",
                    "1": "calculate_checksum",
                    "3": "perform_operation"
                },
                "undefined4": {
                    "1": "result_type"
                },
                "uint": {
                    "1": "unsigned_integer_type"
                },
                "new_variable_name_1": {
                    "1": "temp_var1"
                },
                "new_variable_name_2": {
                    "1": "temp_var2"
                }
            }
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infinite_loop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040f8": {
                    "2": "run_infinite_loop",
                    "1": "endless_loop",
                    "27": "infinite_loop"
                },
                "PTR_*": {
                    "1": "unchanged"
                },
                "DAT_*": {
                    "1": "unchanged"
                },
                "PTR_": {
                    "4": "",
                    "1": "unchanged"
                },
                "DAT_": {
                    "4": "",
                    "1": "unchanged"
                },
                "PTR_/original_variable_name_1/": {
                    "1": "/new_variable_name_1/"
                },
                "PTR_/original_variable_name_2/": {
                    "1": "/new_variable_name_2/"
                },
                "PTR_/original_variable_name_n/": {
                    "1": "/new_variable_name_n/"
                },
                "PTR_XXX": {
                    "2": "xxx"
                },
                "DAT_XXX": {
                    "2": "xxx"
                },
                "PTR_12345678": {
                    "1": "unchanged"
                },
                "DAT_12345678": {
                    "1": "unchanged"
                },
                "original_function_name": {
                    "1": "more_descriptive_function_name"
                },
                "do": {
                    "2": "do"
                },
                "true": {
                    "2": "true"
                }
            }
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nvoid initialize_data_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  result 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc",
                "return": "result",
                "undefined4": "void"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040fc": {
                    "1": "set_value_and_return",
                    "2": "initialize_counter",
                    "14": "initialize_data",
                    "3": "set_initial_value",
                    "5": "initialize_value"
                },
                "DAT_20000674": {
                    "3": "initial_value",
                    "1": "constant_value",
                    "2": "value",
                    "4": "data_value"
                },
                "return": {
                    "1": "success",
                    "2": "result"
                },
                "undefined4": {
                    "1": "void"
                },
                "": {
                    "1": ""
                },
                "count": {
                    "1": "counter"
                },
                "return_value": {
                    "1": "status"
                },
                "0xffffffff": {
                    "1": "error_return"
                },
                "PTR_20000674": {
                    "1": "data_pointer"
                }
            }
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "get_return_value_0800410c",
            "code": "\nint get_return_value_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "get_return_value_0800410c",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800410c": {
                    "6": "initialize",
                    "1": "initialize_value",
                    "2": "get_one",
                    "5": "initialize_program",
                    "8": "get_return_value"
                },
                "undefined4": {
                    "5": "int",
                    "3": "uint32_t"
                },
                "<no_parameters>": {
                    "1": ""
                },
                "<no_variables>": {
                    "1": ""
                },
                "return": {
                    "1": "status",
                    "7": "result"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "result"
                },
                "return value": {
                    "1": "result"
                },
                "returnValue": {
                    "1": "result"
                }
            }
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid process_data_08004110(uint index,undefined4 mode,undefined4 data,undefined *buffer)\n\n{\n  int result;\n  undefined *pointer;\n  int value;\n  \n  if (index < 0x60) {\n    value = (int)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    value = -1;\n    pointer = buffer;\n  }\n  if (value != -1) {\n    result = FUN_08003138(value,&DAT_200002e0,data,pointer,buffer);\n    if (result != 0) {\n      result = FUN_0800355e(value,&DAT_08005a18);\n      if (result == 0) {\n        result = FUN_0800355e(value,&DAT_08005a3c);\n        if (result != 0) {\n          FUN_08003414(value);\n        }\n      }\n      else {\n        FUN_080033d8(value);\n      }\n      FUN_0800316c(value,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08003486(value,0);\n      break;\n    case 1:\n      FUN_08003486(value,1,0);\n      break;\n    case 2:\n      FUN_08003486(value,0,1);\n      break;\n    case 3:\n      FUN_08003486(value,0,2);\n    }\n    FUN_0800314e(value,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "data",
                "param_4": "buffer",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "value"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_0800314e",
                "FUN_080033d8",
                "FUN_08003138",
                "FUN_08003414",
                "FUN_0800355e",
                "FUN_08003486",
                "FUN_0800316c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004110": {
                    "1": "perform_operation",
                    "20": "process_data",
                    "5": "execute_function",
                    "2": "execute_operation"
                },
                "param_1": {
                    "2": "input_index",
                    "3": "input_value",
                    "5": "input_size",
                    "1": "input_data",
                    "11": "index"
                },
                "param_2": {
                    "1": "argument_type",
                    "4": "option",
                    "23": "mode"
                },
                "param_3": {
                    "5": "data",
                    "3": "param",
                    "1": "input1",
                    "4": "arg1",
                    "2": "arg"
                },
                "param_4": {
                    "10": "data",
                    "1": "output_buffer",
                    "11": "buffer",
                    "3": "arg2"
                },
                "iVar1": {
                    "2": "result1",
                    "28": "result",
                    "1": "return_value"
                },
                "puVar2": {
                    "3": "array_pointer",
                    "2": "data_pointer",
                    "1": "ptr_data",
                    "4": "data_ptr",
                    "5": "ptr"
                },
                "iVar3": {
                    "1": "command",
                    "13": "value",
                    "12": "index"
                },
                "FUN_08003138": {
                    "2": "perform_operation",
                    "1": "process_element"
                },
                "FUN_0800355e": {
                    "1": "check_data",
                    "3": "check_value",
                    "4": "check_condition"
                },
                "FUN_08003414": {
                    "1": "cleanup_data2",
                    "4": "perform_action"
                },
                "FUN_080033d8": {
                    "1": "cleanup"
                },
                "FUN_0800316c": {
                    "2": "finalize",
                    "1": "cleanup_action2"
                },
                "FUN_08003486": {
                    "2": "set_options",
                    "1": "set_data_flag"
                },
                "FUN_0800314e": {
                    "2": "finalize_process",
                    "1": "log_result"
                },
                "DAT_200002e0": {
                    "1": "constant1"
                },
                "DAT_08005a18": {
                    "1": "constant2"
                },
                "DAT_08005a3c": {
                    "1": "constant3"
                },
                "DAT_2000030c": {
                    "1": "constant4"
                },
                "&DAT_200002e0": {
                    "1": "constant_data"
                },
                "&DAT_08005a18": {
                    "1": "value1"
                },
                "&DAT_08005a3c": {
                    "1": "value2"
                },
                "&DAT_2000030c": {
                    "1": "data4"
                },
                "&DAT_08005d3c": {
                    "1": "short_data"
                }
            }
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid process_data_080041bc(uint index,undefined4 param2,undefined4 param3,undefined *data)\n\n{\n  int result;\n  undefined4 shifted_value;\n  undefined *pointer;\n  uint value;\n  \n  if (index < 0x60) {\n    value = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    value = 0xffffffff;\n    pointer = data;\n  }\n  if ((value != 0xffffffff) &&\n     (result = FUN_08003138(value,&DAT_2000030c,param3,pointer,data), result != 0)) {\n    shifted_value = FUN_0800318c((value << 0x18) >> 0x1c);\n    FUN_080034b6(shifted_value,1 << (value & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "index",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "shifted_value",
                "puVar3": "pointer",
                "uVar4": "value"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_0800318c",
                "FUN_08003138",
                "FUN_080034b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041bc": {
                    "1": "parse_data",
                    "21": "process_data"
                },
                "param_1": {
                    "3": "data_index",
                    "1": "input_size",
                    "2": "value",
                    "18": "index"
                },
                "param_2": {
                    "8": "param2",
                    "1": "param",
                    "2": "arg1",
                    "7": "value1",
                    "4": "param_2"
                },
                "param_3": {
                    "5": "param2",
                    "1": "param",
                    "8": "param3",
                    "4": "param_3",
                    "7": "value2",
                    "2": "arg2"
                },
                "param_4": {
                    "16": "data",
                    "3": "data_ptr",
                    "1": "ptr_data",
                    "2": "buffer"
                },
                "iVar1": {
                    "27": "result",
                    "3": "return_value",
                    "1": "function_result"
                },
                "uVar2": {
                    "1": "modified_value",
                    "21": "shifted_value",
                    "2": "transformed_value"
                },
                "puVar3": {
                    "1": "value_ptr",
                    "4": "data_ptr",
                    "8": "pointer",
                    "2": "array_ptr"
                },
                "uVar4": {
                    "9": "short_value",
                    "1": "index",
                    "13": "value",
                    "2": "data_value"
                },
                "FUN_08003138": {
                    "1": "process_data_value"
                },
                "FUN_0800318c": {
                    "1": "extract_bits"
                },
                "FUN_080034b6": {
                    "1": "update_result",
                    "2": "update_data"
                },
                "&DAT_08005d3c": {
                    "1": "shift_table"
                }
            }
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_system_08004204",
            "code": "\nvoid initialize_system_08004204(void)\n\n{\n  FUN_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_system_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004204": {
                    "1": "initialize_components",
                    "3": "initialize_application",
                    "5": "execute_initialization",
                    "12": "initialize_system",
                    "2": "initialize_program"
                },
                "FUN_0800346c": {
                    "1": "perform_initial_setup",
                    "4": "execute_initialization",
                    "2": "initialize_subsystem",
                    "17": "perform_initialization"
                }
            }
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_checksum_08004240",
            "code": "\nunsigned_short calculate_checksum_08004240(int base_address)\n\n{\n  return (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_checksum_08004240",
                "param_1": "base_address",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004240": {
                    "4": "calculate_shift_amount",
                    "1": "calculate_hash",
                    "11": "calculate_checksum"
                },
                "param_1": {
                    "5": "address",
                    "1": "memory_offset",
                    "6": "input_value",
                    "9": "base_address",
                    "2": "start_address",
                    "3": "memory_address"
                },
                "*(short *)(param_1 + 0x138)": {
                    "5": "first_value",
                    "2": "offset_1",
                    "1": "offset_138_value",
                    "3": "value1"
                },
                "*(short *)(param_1 + 0x13a)": {
                    "1": "offset2",
                    "5": "second_value",
                    "3": "value2",
                    "2": "offset_2"
                },
                "0x40": {
                    "1": "offset_constant",
                    "3": "constant_1"
                },
                "0x3f": {
                    "1": "bit_mask",
                    "2": "bitmask"
                },
                "0x138": {
                    "2": "first_offset",
                    "1": "first_value_offset"
                },
                "0x13a": {
                    "2": "offset_b",
                    "1": "offset_2"
                },
                "param_2": {
                    "1": "unused"
                },
                "*PTR_08004278": {
                    "1": "offset_138"
                },
                "*PTR_0800427A": {
                    "1": "offset_13a"
                },
                "*PTR_param_1_138": {
                    "1": "offset_1"
                },
                "*PTR_param_1_13a": {
                    "1": "offset_2"
                },
                "(param_1 + 0x138)": {
                    "1": "first_offset"
                },
                "(param_1 + 0x13a)": {
                    "1": "second_offset"
                },
                "ushort": {
                    "1": "unsigned_short"
                },
                "F_UNPACKED_VALUE": {
                    "1": "calculate_unpacked_value"
                },
                "short_1": {
                    "1": "first_short"
                },
                "short_2": {
                    "1": "second_short"
                }
            }
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid update_data_080042ac(int data)\n\n{\n  int result;\n  ushort new_index;\n  undefined new_value;\n  \n  result = FUN_08003e18(data,&new_value);\n  if ((result == 0) &&\n     (new_index = *(short *)(data + 100) + 1U & 0x3f, new_index != *(ushort *)(data + 0x66))) {\n    *(undefined *)(*(int *)(data + 0x60) + (uint)*(ushort *)(data + 100)) = new_value;\n    *(ushort *)(data + 100) = new_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042ac": {
                    "1": "update_parameter",
                    "21": "update_data"
                },
                "param_1": {
                    "3": "input",
                    "14": "data",
                    "4": "data_ptr",
                    "6": "data_pointer",
                    "1": "memory_address",
                    "2": "input_param"
                },
                "iVar1": {
                    "28": "result",
                    "2": "return_value"
                },
                "uVar2": {
                    "3": "updated_index",
                    "4": "new_value",
                    "21": "new_index",
                    "2": "updated_value"
                },
                "local_9": {
                    "26": "new_value",
                    "1": "data_element"
                },
                "FUN_08003e18": {
                    "2": "get_data",
                    "1": "process_data"
                },
                "param_2": {
                    "1": "data_ptr"
                },
                "param_3": {
                    "1": "unknown_parameter1"
                },
                "param_4": {
                    "1": "unknown_parameter2"
                }
            }
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initialize_data_080042e8(int data_pointer,undefined value)\n\n{\n  byte byte_value;\n  byte masked_value;\n  int incremented_value;\n  \n  *(undefined *)(data_pointer + 0x10) = 1;\n  incremented_value = *(ushort *)(data_pointer + 0x140) + 1;\n  byte_value = (byte)incremented_value;\n  masked_value = byte_value & 0x7f;\n  if (incremented_value == 0) {\n    masked_value = -(-byte_value & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(data_pointer + 0x142) == (ushort)masked_value);\n  *(undefined *)(*(int *)(data_pointer + 0x13c) + (uint)*(ushort *)(data_pointer + 0x140)) = value;\n  *(ushort *)(data_pointer + 0x140) = (ushort)masked_value;\n  incremented_value = FUN_08003df4(data_pointer + 0xd4);\n  if (incremented_value == 0) {\n    FUN_08003eac(data_pointer + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "data_pointer",
                "param_2": "value",
                "bVar1": "byte_value",
                "bVar2": "masked_value",
                "iVar3": "incremented_value"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042e8": {
                    "1": "set_and_increment_value",
                    "2": "initialize_and_store_data",
                    "10": "initialize_data",
                    "4": "update_data"
                },
                "param_1": {
                    "4": "data",
                    "1": "pointer_to_struct",
                    "7": "data_pointer",
                    "2": "data_address",
                    "3": "data_ptr"
                },
                "param_2": {
                    "3": "new_data",
                    "5": "new_value",
                    "1": "parameter",
                    "12": "value",
                    "2": "data_value"
                },
                "bVar1": {
                    "2": "lower_byte",
                    "1": "lower_byte_count",
                    "13": "byte_value"
                },
                "bVar2": {
                    "1": "adjusted_byte_value",
                    "2": "temp_byte2",
                    "5": "masked_value",
                    "4": "masked_byte"
                },
                "iVar3": {
                    "3": "new_value",
                    "1": "value",
                    "2": "result",
                    "17": "incremented_value"
                },
                "FUN_08003eac": {
                    "1": "handle_failure"
                },
                "FUN_08003df4": {
                    "1": "check_condition",
                    "3": "check_validity"
                },
                "L_abcdabcdabcdabcdabcd": {
                    "1": "set_initialized_value"
                }
            }
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_parameters_08004364",
            "code": "\nvoid initialize_parameters_08004364(int base_address)\n\n{\n  *(int *)(base_address + 0x134) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x138) = 0;\n  *(undefined2 *)(base_address + 0x13a) = 0;\n  *(int *)(base_address + 0x13c) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x140) = 0;\n  *(undefined2 *)(base_address + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_parameters_08004364",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004364": {
                    "1": "update_data_structure",
                    "2": "set_memory_values",
                    "10": "initialize_data"
                },
                "param_1": {
                    "1": "param_base_address",
                    "14": "base_address",
                    "2": "memory_address",
                    "6": "data_address"
                },
                "param_1 + 0x134": {
                    "3": "parameter1_address",
                    "1": "pointer_to_data1",
                    "2": "address1"
                },
                "param_1 + 0x138": {
                    "1": "data_struct_ptr->flag1",
                    "3": "parameter2_address",
                    "2": "value1"
                },
                "param_1 + 0x13a": {
                    "1": "var2",
                    "2": "parameter3_address"
                },
                "param_1 + 0x13c": {
                    "1": "data_address_plus13c",
                    "2": "parameter4_address"
                },
                "param_1 + 0x140": {
                    "1": "parameter4_address",
                    "2": "parameter5_address"
                },
                "param_1 + 0x142": {
                    "1": "data_address_plus142",
                    "2": "value4"
                },
                "param_1 + 0x11": {
                    "1": "data_struct_ptr->start_offset",
                    "2": "parameter1_value"
                },
                "param_1 + 0x51": {
                    "1": "data_value_plus51",
                    "2": "parameter4_value"
                },
                "*(int *)(param_1 + 0x134)": {
                    "1": "new_memory_value1",
                    "2": "data_pointer1"
                },
                "*(undefined2 *)(param_1 + 0x138)": {
                    "1": "register2",
                    "2": "data_pointer->value1"
                },
                "*(undefined2 *)(param_1 + 0x13a)": {
                    "2": "flag2",
                    "1": "value2"
                },
                "*(int *)(param_1 + 0x13c)": {
                    "2": "parameter4",
                    "1": "data_pointer4"
                },
                "*(undefined2 *)(param_1 + 0x140)": {
                    "1": "register5",
                    "2": "data_pointer->value3"
                },
                "*(undefined2 *)(param_1 + 0x142)": {
                    "1": "data_pointer6",
                    "2": "data_pointer->value4"
                },
                "baseAddress + 0x11": {
                    "1": "updated_offset1"
                },
                "baseAddress + 0x51": {
                    "1": "updated_offset2"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "0x134": {
                    "1": "offset1"
                },
                "0x11": {
                    "1": "value1"
                },
                "0x138": {
                    "1": "offset2"
                },
                "0x13a": {
                    "1": "offset3"
                },
                "0x13c": {
                    "1": "offset4"
                },
                "0x51": {
                    "1": "value2"
                },
                "0x140": {
                    "1": "offset5"
                },
                "0x142": {
                    "1": "offset6"
                }
            }
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_hardware_serial_08004388",
            "code": "\nvoid initialize_hardware_serial_08004388(int serial_port,undefined4 baud_rate,byte config)\n\n{\n  uint error_code;\n  byte config_bits;\n  int config_value;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x144) = config;\n  config_bits = config & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    FUN_08003978(serial_port + 0xd4);\n    FUN_08003e54(serial_port + 0xd4,0x80042ad);\n    return;\n  }\n  jump_table = (code *)0x8004432;\n  FUN_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (error_code < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + error_code * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_hardware_serial_08004388",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config",
                "extraout_r1": "error_code",
                "bVar1": "config_bits",
                "iVar2": "config_value",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uRam0000012e": "value"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004388": {
                    "4": "configure_serial_port",
                    "1": "initialize_serial_configuration",
                    "5": "initialize_serial",
                    "2": "configure_hardware_serial",
                    "7": "initialize_hardware_serial"
                },
                "param_1": {
                    "1": "serial_config",
                    "3": "serial_port_address",
                    "2": "serial_device",
                    "12": "serial_port",
                    "4": "port_address"
                },
                "param_2": {
                    "1": "baudrate",
                    "29": "baud_rate"
                },
                "param_3": {
                    "1": "configuration",
                    "13": "config",
                    "3": "config_flags",
                    "7": "config_byte"
                },
                "extraout_r1": {
                    "2": "result",
                    "1": "file_index",
                    "4": "error_code"
                },
                "bVar1": {
                    "2": "config_flag",
                    "1": "mode_bits",
                    "5": "config_mask",
                    "3": "config_bit",
                    "8": "config_bits"
                },
                "iVar2": {
                    "1": "mode_code",
                    "20": "config_value",
                    "3": "config_index"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_address",
                    "12": "jump_table",
                    "10": "jumptable"
                },
                "FUN_08004808": {
                    "1": "log_fatal_error",
                    "6": "print_error_message",
                    "3": "report_error"
                },
                "FUN_08003e54": {
                    "5": "configure_serial",
                    "2": "set_serial_config",
                    "1": "init_serial"
                },
                "FUN_08003978": {
                    "1": "init_serial_buffer",
                    "7": "initialize_buffer",
                    "2": "reset_buffer"
                },
                "uRam0000012e": {
                    "1": "serial_config"
                }
            }
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_return_value_08004444",
            "code": "\nvoid set_return_value_08004444(int output_address,uint input_value)\n\n{\n  undefined2 return_value;\n  code *jump_table;\n  \n  if (input_value < 0x60) {\n    return_value = *(undefined2 *)(&DAT_08005d3c + input_value * 2);\n  }\n  else {\n    return_value = 0xffff;\n  }\n  *(undefined2 *)(output_address + 0x12e) = return_value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_return_value_08004444",
                "param_1": "output_address",
                "param_2": "input_value",
                "uVar1": "return_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004444": {
                    "1": "set_special_value",
                    "2": "set_return_value_based_on_input",
                    "3": "set_return_value_based_on_param",
                    "6": "set_return_value"
                },
                "param_1": {
                    "4": "address",
                    "1": "param",
                    "2": "output",
                    "9": "output_address",
                    "6": "base_address"
                },
                "param_2": {
                    "2": "input",
                    "1": "value_index",
                    "12": "input_value",
                    "3": "value",
                    "4": "offset",
                    "6": "index"
                },
                "uVar1": {
                    "1": "parameter_value",
                    "2": "new_value",
                    "13": "return_value",
                    "4": "value",
                    "6": "result"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "2": "jump_table_function",
                    "9": "jump_table",
                    "1": "jump_function"
                }
            }
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_parameter_value_08004460",
            "code": "\nvoid set_parameter_value_08004460(int base_address,uint index)\n\n{\n  undefined2 value;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_parameter_value_08004460",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004460": {
                    "8": "set_parameter_value",
                    "1": "set_return_value_based_on_param",
                    "2": "set_return_value",
                    "3": "update_parameter_value",
                    "5": "set_param_value"
                },
                "param_1": {
                    "2": "target_address",
                    "1": "result",
                    "3": "memory_address",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "value_index",
                    "3": "offset",
                    "2": "value",
                    "13": "index"
                },
                "uVar1": {
                    "1": "result_code",
                    "3": "parameter_value",
                    "2": "default_value",
                    "9": "value"
                },
                "*(undefined2 *)(param_1 + 300)": {
                    "1": "destination_address"
                },
                "300": {
                    "2": "offset",
                    "1": "target_offset"
                }
            }
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_parameters_0800447c",
            "code": "\nint32 *\ninitialize_parameters_0800447c(int32 *parameters,int32 value1,int32 value2,int32 value3)\n\n{\n  undefined2 result;\n  \n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_FUN_080042e8_1_08005ed4;\n  if (parameters == &DAT_20000338) {\n    FUN_08004444(&DAT_20000338,0x4c,value2,&DAT_20000338,value3);\n    FUN_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    result = FUN_0800351e(value1,&DAT_08005c10);\n    *(undefined2 *)((int)parameters + 0x12e) = result;\n    result = FUN_0800351e(value1,&DAT_08005ca0);\n    *(undefined2 *)(parameters + 0x4b) = result;\n  }\n  FUN_08004364(parameters);\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_parameters_0800447c",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "result",
                "undefined4": "int32"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004444",
                "FUN_08004364",
                "FUN_0800351e",
                "FUN_08004460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800447c": {
                    "4": "initialize_function",
                    "1": "initialize_data_struct",
                    "2": "initialize_data_structure",
                    "10": "initialize_parameters",
                    "3": "initialize_param",
                    "6": "initialize_data"
                },
                "param_1": {
                    "4": "data",
                    "2": "function_params",
                    "1": "output",
                    "5": "param_array",
                    "8": "parameters"
                },
                "param_2": {
                    "1": "param",
                    "2": "param2_value",
                    "3": "param2",
                    "7": "value",
                    "10": "value1"
                },
                "param_3": {
                    "2": "param",
                    "4": "param3",
                    "1": "value_2",
                    "10": "value2"
                },
                "param_4": {
                    "3": "data",
                    "4": "param4",
                    "2": "param4_value",
                    "1": "param",
                    "10": "value3"
                },
                "FUN_0800351e": {
                    "1": "get_info",
                    "17": "get_value",
                    "2": "get_identifier"
                },
                "FUN_08004444": {
                    "3": "set_initial_values",
                    "1": "initialize_variable",
                    "9": "process_data",
                    "5": "perform_action1",
                    "2": "update_data"
                },
                "FUN_08004364": {
                    "1": "cleanup_function",
                    "3": "finalize_initialization",
                    "2": "finalize_param",
                    "4": "finalize_data"
                },
                "FUN_08004460": {
                    "3": "finalize_process",
                    "7": "perform_action",
                    "1": "perform_operation",
                    "2": "execute_action",
                    "5": "perform_action2"
                },
                "uVar1": {
                    "1": "calculated_value",
                    "9": "result",
                    "2": "return_value"
                },
                "DAT_20000338": {
                    "1": "data"
                },
                "undefined4": {
                    "1": "int32"
                },
                "&PTR_FUN_080042e8_1_08005ed4": {
                    "1": "function_pointer"
                },
                "&DAT_20000338": {
                    "1": "data_buffer"
                },
                "&DAT_08005c10": {
                    "1": "identifier1_data"
                },
                "&DAT_08005ca0": {
                    "1": "identifier2_data"
                }
            }
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "check_and_call_function_080044d8",
            "code": "\nvoid check_and_call_function_080044d8(int input_flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (input_flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    FUN_0800447c(&DAT_20000338,0x40004800,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "check_and_call_function_080044d8",
                "param_1": "input_flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080044d8": {
                    "1": "process_param1",
                    "3": "process_params",
                    "4": "process_param",
                    "2": "check_param",
                    "5": "check_and_call_function"
                },
                "param_1": {
                    "2": "condition",
                    "1": "input1",
                    "3": "value1",
                    "5": "param1",
                    "4": "status"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "param_value",
                    "5": "input_value",
                    "10": "value",
                    "3": "value2"
                },
                "param_3": {
                    "1": "param_value_1",
                    "10": "param3",
                    "3": "value3",
                    "2": "param_a",
                    "7": "param_3"
                },
                "param_4": {
                    "2": "param_b",
                    "10": "param4",
                    "1": "param_2",
                    "7": "param_4",
                    "3": "arg2"
                },
                "FUN_0800447c": {
                    "9": "process_data",
                    "1": "perform_operation"
                },
                "&DAT_20000338": {
                    "1": "data_address"
                },
                "0x40004800": {
                    "1": "data_value_1"
                },
                "0xffff": {
                    "1": "data_value_2"
                }
            }
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initialize_data_08004544(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08005f28;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004544": {
                    "1": "set_data",
                    "27": "initialize_data"
                },
                "param_1": {
                    "1": "output_buffer",
                    "3": "output_pointer",
                    "4": "data_ptr",
                    "13": "data_pointer",
                    "5": "output_data",
                    "2": "output"
                },
                "param_2": {
                    "4": "param2",
                    "1": "param_2",
                    "23": "value1"
                },
                "param_3": {
                    "1": "value_2",
                    "4": "param3",
                    "23": "value2"
                },
                "param_4": {
                    "4": "param4",
                    "1": "value_3",
                    "23": "value3"
                },
                "param_5": {
                    "1": "input4",
                    "4": "param5",
                    "23": "value4"
                },
                "*(undefined *)(param_1 + 1)": {
                    "1": "output_pointer_value1"
                },
                "*(undefined *)((int)param_1 + 5)": {
                    "1": "output_pointer_value2"
                },
                "*(undefined *)((int)param_1 + 6)": {
                    "1": "output_pointer_value3"
                },
                "*(undefined *)((int)param_1 + 7)": {
                    "1": "output_pointer_value4"
                }
            }
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "check_parameters_08004560",
            "code": "\nvoid check_parameters_08004560(int value1,int value)\n\n{\n  if ((value1 == 1) && (value == 0xffff)) {\n    FUN_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "check_parameters_08004560",
                "param_1": "value1",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004560": {
                    "7": "check_parameters",
                    "1": "check_params",
                    "2": "handle_special_case",
                    "4": "process_parameters",
                    "3": "initialize_data"
                },
                "param_1": {
                    "1": "first_parameter",
                    "3": "flag1",
                    "2": "status_flag",
                    "4": "value1"
                },
                "param_2": {
                    "1": "second_param",
                    "2": "param2",
                    "4": "value2",
                    "3": "flag2",
                    "5": "value"
                },
                "FUN_08004544": {
                    "1": "update_data",
                    "5": "process_data",
                    "2": "initialize_memory",
                    "4": "initialize_data"
                }
            }
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combine_values_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004640": {
                    "1": "merge_values",
                    "15": "combine_values",
                    "6": "combine_params"
                },
                "param_1": {
                    "1": "start_byte",
                    "5": "input_value",
                    "2": "byte_value",
                    "8": "value1"
                },
                "param_2": {
                    "1": "bitwise_or_value",
                    "2": "original_value",
                    "4": "flags",
                    "8": "value2"
                },
                "param_3": {
                    "1": "shifted_bit_field",
                    "2": "shifted_value"
                },
                "__new_variable_1": {
                    "1": "shifted_input"
                },
                "__new_variable_2": {
                    "1": "combined_result"
                },
                "<<": {
                    "1": "shift_left"
                },
                "|": {
                    "1": "bitwise_or"
                }
            }
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_application_08004648",
            "code": "\nvoid initialize_application_08004648(void)\n\n{\n  FUN_08000e3c(3);\n  FUN_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_application_08004648"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004648": {
                    "2": "initialize_and_execute",
                    "1": "execute_init_function",
                    "5": "initialize",
                    "7": "initialize_application",
                    "3": "initialize_system",
                    "6": "initialize_program"
                },
                "param_1": {
                    "1": "configuration",
                    "3": "num_iterations",
                    "5": "count",
                    "2": "number_of_attempts"
                },
                "FUN_08000e3c": {
                    "1": "set_thread_count",
                    "2": "perform_initialization",
                    "3": "set_count"
                },
                "FUN_08000d8e": {
                    "1": "execute_program",
                    "4": "perform_action",
                    "3": "perform_cleanup",
                    "2": "execute",
                    "8": "perform_initialization"
                }
            }
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "run_infinite_loop_08004658",
            "code": "\nvoid run_infinite_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  FUN_08000c4c();\n  do {\n    FUN_08000c64();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "run_infinite_loop_08004658"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004338",
                "FUN_08000c64",
                "FUN_08000c4c",
                "FUN_08004646"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004658": {
                    "1": "execute_tasks_infinitely",
                    "4": "execute_loop",
                    "2": "main_loop",
                    "6": "execute_infinite_loop",
                    "8": "run_infinite_loop"
                },
                "FUNC_08004646": {
                    "1": "perform_task_3",
                    "2": "initialize",
                    "5": "initialize_system",
                    "3": "perform_initialization"
                },
                "FUN_08000c4c": {
                    "1": "execute_task1",
                    "5": "perform_initialization",
                    "4": "initialize_variables"
                },
                "FUN_08000c64": {
                    "1": "execute_subtask_1",
                    "4": "perform_action",
                    "2": "execute_task"
                },
                "FUNC_08004338": {
                    "1": "perform_system_cleanup",
                    "2": "perform_cleanup",
                    "4": "perform_action",
                    "3": "cleanup_operations"
                }
            }
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar count_set_bits_08004678(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004678": {
                    "6": "count_bits",
                    "19": "count_set_bits",
                    "1": "binary_to_decimal",
                    "4": "count_bits_set"
                },
                "param_1": {
                    "4": "input",
                    "1": "input_num",
                    "2": "input_number",
                    "7": "num",
                    "16": "number"
                },
                "cVar1": {
                    "4": "count",
                    "3": "bits_count",
                    "23": "bit_count",
                    "1": "bits_counted"
                },
                "<original_function_name>": {
                    "1": "count_set_bits"
                },
                "<param_1>": {
                    "1": "num"
                }
            }
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initialize_data_080046b4(int flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    FUN_080047fe(0,&label1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_4": "param4",
                "LAB_0800468c_1": "label1",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080046b4": {
                    "3": "initialize_params",
                    "1": "initialize_values",
                    "9": "initialize_parameters",
                    "16": "initialize_data"
                },
                "param_1": {
                    "8": "flag",
                    "1": "input_param",
                    "2": "input_value",
                    "6": "input_flag",
                    "4": "status"
                },
                "param_2": {
                    "1": "flag_value",
                    "2": "check_value",
                    "17": "value"
                },
                "param_4": {
                    "1": "variable2",
                    "2": "param",
                    "6": "param4",
                    "5": "unused_param2",
                    "3": "unused2"
                },
                "FUN_080047fe": {
                    "2": "perform_action",
                    "8": "process_data",
                    "1": "calling_function",
                    "5": "call_sub_function",
                    "3": "perform_operation"
                },
                "LAB_0800468c_1": {
                    "1": "constant_label",
                    "4": "label1"
                },
                "param_3": {
                    "1": "variable1",
                    "3": "unused1",
                    "5": "param3",
                    "4": "unused_param",
                    "2": "param_three"
                },
                "new_var_1": {
                    "1": "6"
                },
                "new_var_2": {
                    "1": "0"
                },
                "new_var_3": {
                    "1": "7"
                },
                "new_var_4": {
                    "1": "8"
                },
                "new_var_5": {
                    "1": "9"
                },
                "new_var_6": {
                    "1": "10"
                },
                "new_var_7": {
                    "1": "0x17"
                },
                "new_var_8": {
                    "1": "0x28"
                },
                "initializeParameters": {
                    "1": "initialize_parameters"
                },
                "processData": {
                    "1": "process_data"
                }
            }
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_function_080047c0",
            "code": "\nvoid execute_function_080047c0(int input_value)\n\n{\n  int index;\n  \n  if (*(int *)(input_value + 8) != 0) {\n    (**(code **)(input_value + 0xc))();\n    return;\n  }\n  FUN_08005760();\n  index = FUN_08004678();\n  if ((&DAT_20000494)[index * 5] != 0) {\n    execute_function_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "input_value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047c0": {
                    "2": "execute_operation",
                    "1": "process_function",
                    "11": "execute_function"
                },
                "param_1": {
                    "4": "input",
                    "2": "data",
                    "1": "ptr_struct",
                    "3": "input_param",
                    "5": "input_value"
                },
                "iVar1": {
                    "1": "result_variable",
                    "28": "index"
                },
                "FUN_08005760": {
                    "1": "print_welcome_message",
                    "2": "initialize",
                    "3": "perform_initialization",
                    "6": "initialize_data"
                },
                "(**(code **)(param_1 + 0xc))()": {
                    "1": "execute_dynamic_function"
                },
                "&DAT_20000494": {
                    "2": "data_array",
                    "1": "function_array"
                },
                "FUN_08004678": {
                    "1": "get_index",
                    "4": "get_valid_index"
                },
                "DAT_20000494": {
                    "1": "data_array"
                }
            }
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_function_080047d0",
            "code": "\nvoid check_and_execute_function_080047d0(void)\n\n{\n  int result;\n  \n  result = FUN_08004678();\n  if ((&DAT_20000494)[result * 5] != 0) {\n    FUN_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_function_080047d0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047d0": {
                    "12": "check_and_execute_function",
                    "2": "check_and_update_data",
                    "1": "perform_action_if_not_zero",
                    "3": "check_and_execute",
                    "9": "check_and_call_function"
                },
                "iVar1": {
                    "2": "array_index",
                    "1": "function_id",
                    "4": "index",
                    "5": "result"
                },
                "FUN_08004678": {
                    "2": "get_index_of_non_zero_element",
                    "7": "get_valid_index",
                    "1": "get_value_to_check",
                    "5": "get_index",
                    "3": "get_array_index",
                    "4": "get_function_index"
                },
                "FUN_080047c0": {
                    "1": "execute_if_data_valid",
                    "18": "execute_function",
                    "4": "execute_action",
                    "2": "update_data"
                },
                "&DAT_20000494": {
                    "1": "data_array"
                },
                "param_1": {
                    "1": "input",
                    "3": "index"
                }
            }
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "execute_function_080047fe",
            "code": "\nvoid execute_function_080047fe(data_type_2 input1,data_type_2 input2)\n\n{\n  FUN_08004844(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "FUN_080047fe": "execute_function_080047fe",
                "undefined4": "data_type_2"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "first_parameter",
                    "2": "dest",
                    "8": "input1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "source_address",
                    "8": "input2",
                    "2": "src",
                    "4": "output_param"
                },
                "FUN_08004844": {
                    "3": "reverse_data",
                    "1": "execute_operation",
                    "2": "copy_data"
                },
                "FUN_080047fe": {
                    "1": "reorder_parameters",
                    "7": "execute_function",
                    "2": "copy_parameters"
                },
                "undefined4": {
                    "1": "data_type_2"
                },
                "longlong": {
                    "1": "return_type"
                }
            }
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "assertion_failed_08004808",
            "code": "\nvoid assertion_failed_08004808(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 file_ptr;\n  char *additional_info;\n  undefined8 result;\n  undefined4 assertion_function;\n  \n  file_ptr = *(undefined4 *)(DAT_200000a0 + 0xc);\n  assertion_function = function;\n  if (message == (char *)0x0) goto LAB_0800482c;\n  additional_info = \", function: \";\n  do {\n    FUN_08004860(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additional_info,message,assertion_function);\n    result = FUN_080051ac();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    file_ptr = (undefined4)result;\nLAB_0800482c:\n    message = \"\";\n    additional_info = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "uVar1": "file_ptr",
                "pcVar2": "additional_info",
                "uVar3": "result",
                "uVar4": "assertion_function"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004808": {
                    "1": "print_assertion_failed_error",
                    "2": "check_assertion",
                    "21": "assertion_failed"
                },
                "param_1": {
                    "1": "expression",
                    "5": "file_name",
                    "23": "file"
                },
                "param_2": {
                    "1": "file_name",
                    "8": "line_number",
                    "20": "line",
                    "2": "file"
                },
                "param_3": {
                    "1": "failed_assertion",
                    "5": "assertion_message",
                    "2": "expression",
                    "6": "assertion",
                    "4": "condition",
                    "9": "message"
                },
                "param_4": {
                    "1": "u_var4",
                    "7": "function_name",
                    "3": "message",
                    "16": "function"
                },
                "uVar1": {
                    "1": "var1",
                    "3": "file_ptr",
                    "2": "assertion_flag"
                },
                "pcVar2": {
                    "1": "prefix",
                    "3": "delimiter",
                    "2": "context",
                    "8": "additional_info"
                },
                "uVar3": {
                    "1": "u_var_result",
                    "5": "return_value",
                    "20": "result"
                },
                "uVar4": {
                    "1": "function_error_message",
                    "2": "assertion_function"
                },
                "FUN_080051ac": {
                    "1": "get_current_time"
                },
                "FUN_08004860": {
                    "1": "print_error_message"
                }
            }
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left64_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shift_left64_bits_08004844(undefined4 input_value,uint input_value)\n\n{\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left64_bits_08004844",
                "param_1": "input_value",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004844": {
                    "1": "shift_parameter_value",
                    "3": "shift_left_by32",
                    "2": "left_shift_by32_bits",
                    "5": "shift_left64_bits"
                },
                "param_1": {
                    "6": "input_value",
                    "1": "input_param",
                    "2": "param",
                    "4": "flags"
                },
                "param_2": {
                    "2": "shifted_value",
                    "1": "parameter_value",
                    "3": "shift_amount",
                    "7": "input_value",
                    "5": "value"
                }
            }
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_data_08004860",
            "code": "\nvoid process_data_08004860(undefined4 input1,undefined4 input2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 stack_data1;\n  undefined4 stack_data2;\n  \n  stack_data1 = data1;\n  stack_data2 = data2;\n  FUN_08004a84(DAT_200000a0,input1,input2,&stack_data1,input1,&stack_data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2",
                "uStack_8": "stack_data1",
                "uStack_4": "stack_data2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004860": {
                    "11": "process_data",
                    "3": "extract_data",
                    "1": "execute_operation",
                    "2": "execute_function"
                },
                "param_1": {
                    "2": "param1",
                    "3": "input_1",
                    "1": "input_param",
                    "4": "input_param_1",
                    "8": "input1"
                },
                "param_2": {
                    "1": "value2",
                    "2": "arg2",
                    "8": "input2",
                    "4": "input_param_2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "source_param",
                    "2": "data_param_1",
                    "3": "data1"
                },
                "param_4": {
                    "1": "result",
                    "3": "data2",
                    "2": "output_param_2"
                },
                "uStack_8": {
                    "1": "extracted_data_1"
                },
                "uStack_4": {
                    "1": "result"
                },
                "FUN_08004a84": {
                    "1": "analyze_data"
                }
            }
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid execute_functions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004884": {
                    "1": "execute_all_functions",
                    "3": "execute_sub_functions",
                    "23": "execute_functions"
                },
                "FUNC_080059f8": {
                    "1": "function2",
                    "2": "cleanup"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "20": "index",
                    "6": "counter"
                },
                "FUN_08004648": {
                    "1": "function_1",
                    "2": "perform_task"
                },
                "FUNK_08004884": {
                    "1": "execute_functions"
                },
                "*(code *)(&DAT_08006008)[iVar1]": {
                    "1": "function_ptr"
                }
            }
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_080048cc",
            "code": "\nvoid fill_memory_080048cc(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_080048cc",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_08005400",
                "FUN_08005374",
                "FUN_0800532c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080048cc": {
                    "1": "fill_memory_with_byte",
                    "14": "fill_memory",
                    "2": "fill_memory_with",
                    "5": "initialize_memory"
                },
                "param_1": {
                    "12": "destination",
                    "2": "memory_ptr",
                    "1": "memory_start",
                    "8": "memory",
                    "4": "dest"
                },
                "param_2": {
                    "1": "byte_value",
                    "27": "value"
                },
                "param_3": {
                    "3": "num_bytes",
                    "1": "number_of_bytes",
                    "16": "size",
                    "10": "length"
                },
                "puVar1": {
                    "5": "end_ptr",
                    "1": "end",
                    "2": "end_pointer",
                    "7": "end_address",
                    "3": "end_of_memory"
                },
                "*param_1": {
                    "1": "current_memory_address"
                }
            }
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid update_linked_list_080048dc(undefined4 *output_array,int array_size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *temp_var1;\n  int **extra_output;\n  int **current;\n  int **current_entry;\n  int **next;\n  int **new_node;\n  bool is_equal;\n  \n  if (array_size == 0) {\n    return;\n  }\n  new_node = (int **)(array_size + -4);\n  if (*(int *)(array_size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(array_size + -4));\n  }\n  FUNC_0800557c();\n  current_entry = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current = extra_output;\n    DAT_200005c8 = new_node;\n  }\n  else {\n    current_entry = DAT_200005c8;\n    if (new_node < DAT_200005c8) {\n      current = (int **)*new_node;\n      current_entry = (int **)((int)new_node + (int)current);\n      is_equal = DAT_200005c8 == current_entry;\n      if (is_equal) {\n        current_entry = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      new_node[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = new_node;\n      if (is_equal) {\n        current_entry = (int **)((int)current_entry + (int)current);\n        *new_node = (int *)current_entry;\n      }\n    }\n    else {\n      do {\n        next = current_entry;\n        current_entry = (int **)next[1];\n        if (current_entry == (int **)0x0) break;\n      } while (current_entry <= new_node);\n      current = (int **)*next;\n      if ((int **)((int)next + (int)current) == new_node) {\n        current = (int **)((int)current + (int)*new_node);\n        *next = (int *)current;\n        if (current_entry == (int **)((int)next + (int)current)) {\n          temp_var1 = *current_entry;\n          current_entry = (int **)current_entry[1];\n          next[1] = (int *)current_entry;\n          current = (int **)((int)current + (int)temp_var1);\n          *next = (int *)current;\n        }\n      }\n      else if (new_node < (int **)((int)next + (int)current)) {\n        *output_array = 0xc;\n      }\n      else {\n        current = (int **)((int)new_node + (int)*new_node);\n        is_equal = current_entry == current;\n        if (is_equal) {\n          current = (int **)*current_entry;\n          current_entry = (int **)current_entry[1];\n        }\n        new_node[1] = (int *)current_entry;\n        if (is_equal) {\n          current = (int **)((int)current + (int)*new_node);\n          *new_node = (int *)current;\n        }\n        next[1] = (int *)new_node;\n      }\n    }\n  }\n  FUNC_0800557e(output_array,current,current_entry,param_4);\n  return;\n}\n\n",
            "renaming": {
                "param_1": "output_array",
                "param_2": "array_size",
                "piVar1": "temp_var1",
                "extraout_r1": "extra_output",
                "ppiVar2": "current",
                "ppiVar3": "current_entry",
                "ppiVar4": "next",
                "ppiVar5": "new_node",
                "bVar6": "is_equal",
                "FUN_080048dc": "update_linked_list_080048dc"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "6": "result",
                    "1": "array_ptr",
                    "3": "output_list",
                    "2": "input_array"
                },
                "param_2": {
                    "3": "size",
                    "2": "list_length",
                    "4": "input_size",
                    "1": "input_array_length",
                    "5": "array_size"
                },
                "param_3": {
                    "1": "input_value1",
                    "10": "param3",
                    "11": "param_3",
                    "2": "input1"
                },
                "param_4": {
                    "1": "value2",
                    "10": "param4",
                    "2": "input2",
                    "11": "param_4"
                },
                "piVar1": {
                    "3": "temp1",
                    "1": "next_node_size",
                    "4": "temp_ptr",
                    "2": "temp_pointer",
                    "6": "temp_var1"
                },
                "extraout_r1": {
                    "1": "tmp_pointer_2",
                    "2": "temp2",
                    "5": "extra_output",
                    "3": "extra_output1"
                },
                "ppiVar2": {
                    "1": "previous_pointer",
                    "3": "current",
                    "2": "prev_entry"
                },
                "ppiVar3": {
                    "1": "temp4",
                    "2": "prev_ptr"
                },
                "ppiVar4": {
                    "3": "next",
                    "1": "tmp_pointer_5",
                    "2": "prev_ptr"
                },
                "ppiVar5": {
                    "1": "new_data",
                    "5": "new_node",
                    "2": "temp_var5"
                },
                "bVar6": {
                    "1": "is_match",
                    "2": "is_same_entry",
                    "6": "is_equal",
                    "3": "is_true"
                },
                "FUNC_0800557c": {
                    "2": "initialize",
                    "1": "function_a",
                    "3": "initialize_function"
                },
                "FUNC_0800557e": {
                    "1": "process_and_output_list",
                    "2": "process_function"
                },
                "FUN_080048dc": {
                    "1": "remove_negative_elements",
                    "2": "update_data"
                },
                "DAT_200005c8": {
                    "1": "global_var",
                    "2": "data_ptr"
                },
                "ppiVar1": {
                    "1": "current_ptr"
                }
            }
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocate_memory_08004978(undefined4 *output_buffer,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *next_block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    previous_block = DAT_200005c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      difference = *next_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *next_block = difference;\n          *(uint *)((int)next_block + difference) = allocated_size;\n          previous_block = (uint *)((int)next_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto end_of_loop;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = FUN_0800500c(output_buffer);\n    }\n    current_block = (uint *)FUN_0800500c(output_buffer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (difference = FUN_0800500c(output_buffer,(int)previous_block - (int)current_block), difference != -1)))) {\n      *previous_block = allocated_size;\n      current_block = DAT_200005c8;\nend_of_loop:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(output_buffer);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800557e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "output_buffer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "next_block",
                "puVar5": "previous_block",
                "uVar4": "difference",
                "uVar6": "allocated_size",
                "LAB_080049dc": "end_of_loop"
            },
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e",
                "FUN_0800500c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004978": {
                    "1": "resize_and_allocate_memory",
                    "8": "allocate_memory_block",
                    "5": "allocate_and_initialize_memory",
                    "2": "allocate_and_store_memory",
                    "10": "allocate_memory"
                },
                "param_1": {
                    "5": "output_ptr",
                    "1": "result_ptr",
                    "3": "output_pointer",
                    "2": "output",
                    "8": "output_buffer"
                },
                "param_2": {
                    "1": "required_size",
                    "6": "input_size",
                    "16": "size",
                    "3": "requested_size",
                    "2": "block_size"
                },
                "puVar1": {
                    "1": "current_allocation",
                    "3": "current",
                    "13": "current_block",
                    "6": "current_chunk"
                },
                "iVar2": {
                    "1": "chunk_size",
                    "2": "block_size",
                    "7": "difference",
                    "5": "offset"
                },
                "puVar3": {
                    "1": "previous_block_pointer",
                    "3": "current_block",
                    "4": "next_chunk",
                    "8": "next_block",
                    "2": "previous"
                },
                "puVar5": {
                    "1": "new_node",
                    "12": "previous_block",
                    "4": "previous_chunk",
                    "2": "previous_block_ptr"
                },
                "uVar4": {
                    "3": "block_diff",
                    "1": "block_size_difference_temp",
                    "7": "block_difference",
                    "2": "chunk_diff",
                    "9": "difference"
                },
                "uVar6": {
                    "1": "final_block_size",
                    "6": "aligned_size",
                    "14": "allocated_size",
                    "4": "new_block_size",
                    "2": "block_size"
                },
                "FUNC_0800557c": {
                    "3": "initialize_memory_manager",
                    "1": "initialize_function_1",
                    "5": "initialize_memory"
                },
                "DAT_200005c8": {
                    "1": "heap_start_pointer",
                    "2": "memory_pool"
                },
                "DAT_200005cc": {
                    "2": "memory_initialized",
                    "1": "is_pool_initialized",
                    "3": "memory_manager_initialized"
                },
                "FUN_0800500c": {
                    "1": "initialize_block",
                    "4": "allocate_block",
                    "3": "allocate_memory"
                },
                "FUNC_0800557e": {
                    "1": "clean_up_memory"
                },
                "FUNC_0800500c": {
                    "1": "allocate_memory_block"
                },
                "LAB_080049dc": {
                    "1": "end_of_loop"
                }
            }
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int arg1,byte input_byte,byte **data_ptr)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_ptr[2] + -1;\n  data_ptr[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_ptr[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)input_byte, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_ptr;\n    *data_ptr = temp_var2 + 1;\n    *temp_var2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (data_ptr == (byte **)&DAT_08005fc0) {\n    data_ptr = *(byte ***)(arg1 + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_08005fe0) {\n    data_ptr = *(byte ***)(arg1 + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_08005fa0) {\n    data_ptr = *(byte ***)(arg1 + 0xc);\n  }\n  data_ptr[2] = data_ptr[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_ptr + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = data_ptr[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = FUN_080050d0(arg1,data_ptr,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    temp_var1 = (int)*data_ptr - (int)data_ptr[4];\n    result = (uint)input_byte;\n    if ((temp_var1 < (int)data_ptr[5]) || (temp_var1 = FUN_080052cc(arg1,data_ptr), temp_var1 == 0)) {\n      data_ptr[2] = data_ptr[2] + -1;\n      temp_var2 = *data_ptr;\n      *data_ptr = temp_var2 + 1;\n      *temp_var2 = input_byte;\n      if ((byte *)(temp_var1 + 1) != data_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = FUN_080052cc(arg1,data_ptr);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "arg1",
                "param_2": "input_byte",
                "param_3": "data_ptr",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a34": {
                    "1": "decode_and_store_byte",
                    "22": "process_input",
                    "3": "process_byte"
                },
                "param_1": {
                    "1": "input_pointer",
                    "3": "input_struct",
                    "5": "arg1",
                    "4": "input_data",
                    "2": "input"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "param2",
                    "11": "input_byte",
                    "8": "byte_value"
                },
                "param_3": {
                    "4": "input_data",
                    "3": "param3",
                    "1": "ptr_array",
                    "2": "byte_array"
                },
                "iVar1": {
                    "3": "result",
                    "1": "temp_var_1",
                    "10": "temp_var1"
                },
                "pbVar2": {
                    "1": "buffer_end",
                    "11": "temp_var2",
                    "4": "ptr1",
                    "3": "current_byte",
                    "2": "byte_ptr1"
                },
                "pbVar3": {
                    "11": "temp_var3",
                    "2": "byte_ptr2",
                    "1": "temp_ptr_2",
                    "5": "ptr2"
                },
                "uVar4": {
                    "1": "output",
                    "9": "return_value",
                    "2": "output_value",
                    "17": "result"
                },
                "FUN_080050d0": {
                    "1": "calculate_result",
                    "4": "process_data",
                    "3": "sub_function1",
                    "2": "process_sub_function1"
                },
                "FUN_080052cc": {
                    "2": "process_sub_function2",
                    "1": "process_function2",
                    "3": "check_condition"
                },
                "FUN_080053a0": {
                    "2": "perform_action",
                    "1": "cleanup",
                    "12": "handle_error"
                },
                "DAT_08005fc0": {
                    "2": "constant1",
                    "1": "dat_1"
                },
                "DAT_08005fe0": {
                    "1": "dat_2",
                    "2": "constant2"
                },
                "DAT_08005fa0": {
                    "2": "constant3",
                    "1": "dat_3"
                }
            }
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_data_08004a60",
            "code": "\nint process_data_08004a60(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data + length;\n  current_index = length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = FUN_08004a34(arg1,*data,arg2,length,current_index);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_data_08004a60",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a60": {
                    "3": "iterate_and_process",
                    "1": "process_bytes",
                    "20": "process_data"
                },
                "param_1": {
                    "3": "input_param",
                    "1": "param_a",
                    "2": "value1",
                    "7": "arg1",
                    "5": "input1"
                },
                "param_2": {
                    "1": "second_param",
                    "5": "input2",
                    "3": "input_2",
                    "2": "value2",
                    "7": "arg2"
                },
                "param_3": {
                    "1": "input_data",
                    "15": "data",
                    "3": "data_ptr",
                    "2": "data_array",
                    "4": "byte_array"
                },
                "param_4": {
                    "8": "size",
                    "1": "array_size",
                    "2": "data_length",
                    "10": "length"
                },
                "iVar1": {
                    "30": "result",
                    "1": "return_value"
                },
                "puVar2": {
                    "15": "end_ptr",
                    "1": "ptr",
                    "2": "end_of_array",
                    "4": "end_pointer",
                    "3": "end"
                },
                "iVar3": {
                    "1": "length",
                    "3": "current_size",
                    "7": "current_length",
                    "14": "current_index"
                },
                "FUN_08004a34": {
                    "1": "process_byte"
                }
            }
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_data_08004a84(int input,undefined4 *data_ptr,byte *byte_array,int *length)\n\n{\n  int result;\n  int *ptr;\n  bool is_numeric;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int temp_var;\n  int *output_ptr;\n  uint flags;\n  int precision;\n  undefined4 num2;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined flag;\n  undefined4 zero_flag;\n  \n  output_ptr = length;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (data_ptr == &DAT_08005fc0) {\n    data_ptr = *(undefined4 **)(input + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fe0) {\n    data_ptr = *(undefined4 **)(input + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_08005fa0) {\n    data_ptr = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x1c)) || (data_ptr[4] == 0)) &&\n     (temp_var = FUN_080050d0(input,data_ptr), temp_var != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = byte_array;\nLAB_08004ac6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_var = (int)next_char - (int)byte_array;\n  if (temp_var != 0) {\n    result = FUN_08004a60(input,data_ptr,byte_array,temp_var);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(data_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + temp_var;\n  }\n  if (*next_char == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  num2 = 0;\n  flag = 0;\n  zero_flag = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp_var = FUN_08000230(\"#-0+ \",*current_char);\n    byte_array = current_char + 1;\n    if (temp_var == 0) break;\n    flags = 1 << (temp_var + 0xf7ffa094U & 0xff) | flags;\n    current_char = byte_array;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    ptr = output_ptr + 1;\n    temp_var = *output_ptr;\n    output_ptr = ptr;\n    if (temp_var < 0) {\n      width = -temp_var;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_numeric = false;\n    temp_var = width;\n    byte_array = current_char;\n    while( true ) {\n      if (9 < *byte_array - 0x30) break;\n      temp_var = temp_var * 10 + (*byte_array - 0x30);\n      is_numeric = true;\n      byte_array = byte_array + 1;\n    }\n    if (!is_numeric) goto LAB_08004bae;\n  }\n  width = temp_var;\nLAB_08004bae:\n  if (*byte_array == 0x2e) {\n    if (byte_array[1] == 0x2a) {\n      precision = *output_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      byte_array = byte_array + 2;\n      output_ptr = output_ptr + 1;\n    }\n    else {\n      is_numeric = false;\n      precision = 0;\n      temp_var = 0;\n      while( true ) {\n        byte_array = byte_array + 1;\n        if (9 < *byte_array - 0x30) break;\n        temp_var = temp_var * 10 + (*byte_array - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = FUN_08000230(&DAT_08005f72,*byte_array,3);\n  if (temp_var != 0) {\n    flags = flags | 0x40 << (temp_var + 0xf7ffa08eU & 0xff);\n    byte_array = byte_array + 1;\n  }\n  conversion_specifier = *byte_array;\n  byte_array = byte_array + 1;\n  temp_var = FUN_08000230(\"efgEFG\",conversion_specifier,6);\n  if (temp_var == 0) {\n    unaff_r9 = FUN_08004d9c(input,&flags,data_ptr,0x8004a61,&output_ptr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_char = byte_array;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "param_1": "input",
                "param_2": "data_ptr",
                "param_3": "byte_array",
                "param_4": "length",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "is_numeric",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "iVar6": "temp_var",
                "local_8c": "output_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "num2",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "flag",
                "local_30": "zero_flag"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230",
                "FUN_080053a0",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a84": {
                    "1": "extract_and_decode",
                    "3": "parse_format_string",
                    "7": "process_data",
                    "2": "parse_input"
                },
                "param_1": {
                    "5": "input",
                    "2": "input_pointer",
                    "1": "input_param",
                    "3": "arg1",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "arg_ptr",
                    "3": "data_ptr",
                    "2": "format_specifier"
                },
                "param_3": {
                    "1": "format_specifiers",
                    "4": "byte_array",
                    "2": "output_buffer",
                    "3": "input_string"
                },
                "param_4": {
                    "1": "counter_ptr",
                    "2": "arg4",
                    "3": "output_length",
                    "4": "length"
                },
                "iVar1": {
                    "27": "result",
                    "3": "return_value",
                    "1": "result_code"
                },
                "piVar2": {
                    "3": "ptr_var",
                    "1": "output_data_ptr",
                    "2": "int_ptr",
                    "6": "ptr"
                },
                "bVar3": {
                    "4": "is_digit",
                    "6": "is_numeric",
                    "3": "is_true",
                    "2": "found_digit",
                    "1": "condition"
                },
                "pbVar4": {
                    "1": "data_ptr_temp",
                    "2": "ptr1",
                    "12": "current_char",
                    "4": "byte_ptr1"
                },
                "pbVar5": {
                    "1": "end_of_string",
                    "2": "byte_ptr_2",
                    "4": "byte_ptr2",
                    "12": "next_char"
                },
                "unaff_r9": {
                    "1": "unaffected_r9",
                    "7": "unaff_r9",
                    "2": "temp_var1",
                    "3": "temp_var"
                },
                "iVar6": {
                    "1": "length",
                    "3": "temp",
                    "12": "temp_var",
                    "4": "temp_var2"
                },
                "local_8c": {
                    "2": "output_array",
                    "1": "output_data_ptr"
                },
                "local_88": {
                    "5": "flag",
                    "1": "modifiers",
                    "17": "flags"
                },
                "local_84": {
                    "1": "decimal_flag",
                    "2": "field_width",
                    "16": "precision"
                },
                "local_80": {
                    "1": "argsize",
                    "2": "width"
                },
                "local_7c": {
                    "1": "length",
                    "6": "field_width",
                    "9": "width",
                    "2": "num3"
                },
                "local_74": {
                    "1": "output_length_total",
                    "3": "total_len",
                    "7": "total_length",
                    "2": "total"
                },
                "local_70": {
                    "1": "byte_value",
                    "3": "specifier",
                    "2": "format_char",
                    "13": "conversion_specifier"
                },
                "local_6f": {
                    "1": "minus_flag",
                    "2": "space",
                    "13": "space_flag"
                },
                "local_6e": {
                    "1": "undefined_var_2",
                    "2": "char2",
                    "11": "plus_flag"
                },
                "local_45": {
                    "2": "sign_flag",
                    "1": "char_value3"
                },
                "local_30": {
                    "2": "zero_flag",
                    "1": "float_flag"
                },
                "FUN_080050d0": {
                    "1": "check_condition"
                },
                "FUN_08004a60": {
                    "1": "process_conversion"
                },
                "FUN_08000230": {
                    "1": "find_char_position"
                },
                "FUN_080053a0": {
                    "1": "warning_message"
                },
                "FUN_08004d9c": {
                    "1": "process_numeric_conversion"
                },
                "F_UND_08004a84": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocess_data_08004cb0(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_size;\n  uint counter;\n  bool is_condition_met;\n  \n  max_size = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_size = data[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_size + 0x43) = 0x30;\n    *(undefined *)((int)data + max_size + 0x44) = *(undefined *)((int)data + 0x45);\n    max_size = max_size + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,max_size);\n  if (index != -1) {\n    max_size = data[3];\n    is_condition_met = (*data & 6) == 4;\n    if (is_condition_met) {\n      max_size = max_size - *output_size;\n    }\n    if (is_condition_met) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    else {\n      max_size = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_size = max_size + (data[2] - data[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (max_size == counter) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_size",
                "uVar4": "counter",
                "bVar5": "is_condition_met"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cb0": {
                    "1": "calculate_size_and_read_data",
                    "17": "process_data",
                    "2": "parse_data"
                },
                "param_1": {
                    "9": "input",
                    "7": "data",
                    "5": "input_value",
                    "1": "input_param",
                    "2": "param1",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "metadata",
                    "10": "data",
                    "8": "data_array",
                    "4": "header"
                },
                "param_3": {
                    "1": "size",
                    "8": "output_size",
                    "3": "output_length",
                    "4": "result",
                    "7": "output"
                },
                "param_4": {
                    "1": "arg2",
                    "8": "param",
                    "2": "extra_param",
                    "5": "param_4"
                },
                "param_5": {
                    "1": "function_ptr",
                    "19": "callback",
                    "2": "callback_func",
                    "5": "callback_function"
                },
                "iVar1": {
                    "2": "result",
                    "1": "loop_index_1",
                    "5": "index1",
                    "3": "loop_index",
                    "6": "index"
                },
                "iVar2": {
                    "1": "iteration_counter2",
                    "5": "index2",
                    "3": "j",
                    "2": "counter2",
                    "4": "callback_result",
                    "8": "result"
                },
                "uVar3": {
                    "1": "max_output",
                    "3": "max_length",
                    "8": "max_value",
                    "10": "max_size"
                },
                "uVar4": {
                    "1": "current_index",
                    "8": "count",
                    "13": "counter"
                },
                "bVar5": {
                    "5": "flag",
                    "1": "is_true",
                    "3": "is_flag_set",
                    "4": "condition",
                    "11": "is_condition_met"
                },
                "*(char *)((int)param_2 + 0x43)": {
                    "1": "is_flag_set"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x43)": {
                    "1": "flag_value"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x44)": {
                    "1": "flag_content"
                }
            }
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decode_and_process_data_08004d9c",
            "code": "\nuint decode_and_process_data_08004d9c(undefined4 param1,uint *input_array,undefined4 param_3,code *callback_function,uint **output_array)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *char_ptr;\n  uint temp_value;\n  uint **ptr_ptr;\n  char **char_ptr_ptr;\n  uint result;\n  uint temp_value;\n  char *char_ptr1;\n  char *char_ptr2;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(input_array + 6);\n  char_ptr2 = (char *)((int)input_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08004f56;\n          if (byte_value != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)input_array + 0x45) = 0x58;\n          char_ptr = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          temp_value = *input_array;\n          ptr = *output_array;\n          *output_array = ptr + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr;\n          }\n          else {\n            result = *ptr;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *input_array = temp_value | 0x20;\n          }\n          if (result == 0) {\n            *input_array = *input_array & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)input_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08004dcc;\n          result = *input_array;\n          ptr = *output_array;\n          if ((result & 0x80) == 0) {\n            *output_array = ptr + 1;\n            if ((result & 0x40) == 0) goto LAB_08004dec;\n            result = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_array = ptr + 1;\nLAB_08004dec:\n            result = *ptr;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)input_array + 0x43) = 0x2d;\n          }\n          char_ptr = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        temp_value = input_array[1];\n        input_array[2] = temp_value;\n        char_ptr1 = char_ptr2;\n        if ((int)temp_value < 0) {\n          if (result != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)input_array + 0x42) = *char_ptr;\n          char_ptr1 = (char *)((int)input_array + 0x42);\n        }\n        else {\n          *input_array = *input_array & 0xfffffffb;\n          if (result == 0) {\n            if (temp_value != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp_value = result / temp_value;\n              char_ptr1 = char_ptr1 + -1;\n              *char_ptr1 = char_ptr[result - temp_value * temp_value];\n              result = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*input_array << 0x1f) < 0)) && ((int)input_array[1] <= (int)input_array[4]))\n        {\n          char_ptr1[-1] = '0';\n          char_ptr1 = char_ptr1 + -1;\n        }\n        input_array[4] = (int)char_ptr2 - (int)char_ptr1;\n        char_ptr2 = char_ptr1;\n        goto LAB_08004ec2;\n      }\n      ptr = *output_array;\n      *output_array = ptr + 1;\n      *(char *)((int)input_array + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      char_ptr2 = (char *)((int)input_array + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08004e52:\n            result = *input_array;\n            ptr = *output_array;\n            if ((result & 0x80) == 0) {\n              *output_array = ptr + 1;\n              if ((result & 0x40) == 0) goto LAB_08004e60;\n              result = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_array = ptr + 1;\nLAB_08004e60:\n              result = *ptr;\n            }\n            char_ptr = \"0123456789ABCDEF\";\n            if (byte_value == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_value == 0x70) {\n            *input_array = *input_array | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)input_array + 0x45) = 0x78;\n            char_ptr = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08004e52;\n          if (byte_value == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)input_array + 0x42) = byte_value;\n        goto LAB_08004e2c;\n      }\n      char_ptr_ptr = (char **)*output_array;\n      *output_array = (uint *)(char_ptr_ptr + 1);\n      char_ptr2 = *char_ptr_ptr;\n      index = FUN_08000230(char_ptr2,0,input_array[1]);\n      if (index != 0) {\n        input_array[1] = index - (int)char_ptr2;\n      }\n      result = input_array[1];\n    }\n    input_array[4] = result;\n    *(undefined *)((int)input_array + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  result = *input_array;\n  ptr_ptr = (uint **)*output_array;\n  temp_value = input_array[5];\n  if ((result & 0x80) == 0) {\n    *output_array = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((result & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)temp_value;\n  }\n  else {\n    *output_array = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_08004f42:\n    *ptr = temp_value;\n  }\nLAB_08004f56:\n  input_array[4] = 0;\nLAB_08004ec2:\n  index = FUN_08004cb0(param1,input_array,local_array,param_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(param1,param_3,char_ptr2,input_array[4]), index == -1)) {\nLAB_08004ed6:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_array << 0x1e) < 0) {\n      for (index = 0; index < (int)(input_array[3] - local_array[0]); index = index + 1) {\n        result = (*callback_function)(param1,param_3,(int)input_array + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    result = input_array[3];\n    if ((int)input_array[3] < (int)local_array[0]) {\n      result = local_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "param1",
                "param_2": "input_array",
                "param_4": "callback_function",
                "param_5": "output_array",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "char_ptr",
                "uVar6": "temp_value",
                "ppuVar7": "ptr_ptr",
                "ppcVar8": "char_ptr_ptr",
                "uVar9": "result",
                "uVar10": "temp_value",
                "pcVar11": "char_ptr1",
                "pcVar12": "char_ptr2",
                "local_24": "local_array",
                "FUN_08004d9c": "decode_and_process_data_08004d9c"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "input",
                    "1": "input1",
                    "3": "input_data",
                    "4": "input_param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "input_param",
                    "8": "data",
                    "4": "data_array",
                    "9": "input_array",
                    "2": "input_data"
                },
                "param_3": {
                    "1": "param",
                    "6": "param3",
                    "2": "size",
                    "3": "arg3",
                    "11": "param_3"
                },
                "param_4": {
                    "1": "callback_fn",
                    "4": "callback_func",
                    "2": "function",
                    "3": "process_function",
                    "7": "callback_function"
                },
                "param_5": {
                    "1": "counter",
                    "3": "output_data",
                    "2": "output_param",
                    "6": "output_array"
                },
                "bVar1": {
                    "1": "first_byte_data",
                    "4": "byte_var",
                    "12": "byte_value",
                    "7": "byte_val"
                },
                "iVar2": {
                    "1": "int_variable1",
                    "3": "int_var1",
                    "2": "int_var",
                    "15": "index",
                    "4": "result"
                },
                "puVar3": {
                    "2": "pointer_value",
                    "1": "ptr_value",
                    "9": "ptr"
                },
                "iVar4": {
                    "2": "return_value",
                    "1": "inner_loop_var",
                    "4": "int_var2",
                    "7": "result"
                },
                "pcVar5": {
                    "1": "char_array",
                    "4": "hex_chars",
                    "3": "char_pointer",
                    "7": "char_ptr",
                    "2": "digits"
                },
                "uVar6": {
                    "1": "uint_val",
                    "2": "uint_var",
                    "4": "temp_value",
                    "3": "num"
                },
                "ppuVar7": {
                    "4": "ptr_ptr",
                    "1": "temp_data_pointer_array"
                },
                "ppcVar8": {
                    "1": "charptrptr",
                    "3": "char_ptr_ptr"
                },
                "uVar9": {
                    "3": "uint_var2",
                    "1": "uint_var_2",
                    "2": "temp_var2",
                    "4": "value",
                    "5": "result"
                },
                "uVar10": {
                    "2": "temp_var_2",
                    "1": "temp_value3",
                    "3": "uint_var3"
                },
                "pcVar11": {
                    "2": "result_pointer",
                    "1": "result",
                    "3": "char_ptr1"
                },
                "pcVar12": {
                    "1": "result",
                    "2": "char_ptr_3",
                    "4": "char_ptr2"
                },
                "local_24": {
                    "1": "buffer_sizes",
                    "18": "local_array",
                    "2": "temp_array"
                },
                "FUN_08004d9c": {
                    "2": "parse_data",
                    "1": "parse_and_format_value",
                    "5": "decode_and_process_data"
                },
                "FUN_08004cb0": {
                    "1": "callback_function"
                },
                "FUN_08000230": {
                    "1": "conversion_function"
                }
            }
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "execute_function_08004fdc",
            "code": "\nvoid execute_function_08004fdc(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int data_pointer;\n  undefined4 param1_copy;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  data_pointer = DAT_200000a0;\n  param1_copy = input1;\n  stack_var1 = input2;\n  stack_var2 = input3;\n  stack_var3 = input4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  FUN_08004a84(data_pointer,*(undefined4 *)(data_pointer + 8),input1,&stack_var1,param1_copy,&stack_var1);\n  return;\n}\n\n",
            "renaming": {
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "data_pointer",
                "uVar2": "param1_copy",
                "uStack_c": "stack_var1",
                "uStack_8": "stack_var2",
                "uStack_4": "stack_var3",
                "FUN_08004fdc": "execute_function_08004fdc"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param",
                    "3": "param1",
                    "6": "arg1",
                    "13": "input1"
                },
                "param_2": {
                    "5": "param2",
                    "3": "argument2",
                    "13": "input2",
                    "1": "argument1",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "data_3",
                    "5": "param3",
                    "6": "arg3",
                    "13": "input3",
                    "3": "argument3"
                },
                "param_4": {
                    "5": "param4",
                    "1": "argument3",
                    "3": "argument4",
                    "6": "arg4",
                    "13": "input4"
                },
                "iVar1": {
                    "3": "data_ptr",
                    "1": "data5",
                    "2": "variable1",
                    "8": "data_pointer",
                    "6": "data_address"
                },
                "uVar2": {
                    "1": "argument1_copy",
                    "4": "param1_copy",
                    "2": "variable2",
                    "3": "input1_copy"
                },
                "uStack_c": {
                    "2": "param2_copy",
                    "1": "argument1_copy",
                    "3": "stack_var1"
                },
                "uStack_8": {
                    "1": "stack_var_2",
                    "2": "param3_copy",
                    "3": "stack_var2"
                },
                "uStack_4": {
                    "1": "temp_variable3",
                    "3": "stack_var3",
                    "2": "var5"
                },
                "FUN_08004fdc": {
                    "2": "initialize_data",
                    "1": "cleanup_and_call_function",
                    "6": "process_data",
                    "7": "execute_function",
                    "4": "initialize_function"
                },
                "FUN_08004a84": {
                    "2": "process_data"
                },
                "FUN_080053a0": {
                    "1": "check_condition"
                }
            }
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "extract_data_0800500c",
            "code": "\nvoid extract_data_0800500c(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_08004094(input);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "result",
                "param_2": "input",
                "iVar1": "result",
                "FUN_0800500c": "extract_data_0800500c"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "output_buffer",
                    "2": "value",
                    "8": "output",
                    "9": "result"
                },
                "param_2": {
                    "15": "input",
                    "1": "input_data",
                    "10": "input_value",
                    "2": "input_param"
                },
                "iVar1": {
                    "10": "return_value",
                    "1": "result_code",
                    "3": "status",
                    "14": "result"
                },
                "FUN_08004094": {
                    "1": "calculate_result"
                },
                "FUN_0800500c": {
                    "1": "process_return_value",
                    "2": "update_param_if_error",
                    "3": "check_and_assign_value",
                    "4": "extract_data"
                },
                "*param_1": {
                    "1": "output_data"
                },
                "DAT_20000674": {
                    "1": "saved_value"
                }
            }
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint process_data_080050d0(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int data_address;\n  uint result;\n  ushort flags;\n  \n  data_address = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  if (input_param == &DAT_08005fc0) {\n    input_param = *(undefined4 **)(data_address + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fe0) {\n    input_param = *(undefined4 **)(data_address + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_08005fa0) {\n    input_param = *(undefined4 **)(data_address + 0xc);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_param = 9;\n      goto set_flag;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)sub_array != (undefined4 *)0x0) {\n        if ((undefined4 *)sub_array != input_param + 0x11) {\n          FUN_080048dc(output_param);\n        }\n        sub_array = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      param_2_1 = 0;\n      *input_param = sub_array_size;\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((sub_array_size == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    FUN_080054fc(output_param,input_param);\n  }\n  flags = *(ushort *)(input_param + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = sub_variable1;\n    }\n    sub_variable2 = result;\n  }\n  else {\n    sub_variable2 = 0;\n    sub_variable3 = -sub_variable1;\n  }\n  if (sub_array_size == 0) {\n    flags = *(ushort *)(input_param + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nset_flag:\n      *(ushort *)(input_param + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "data_address",
                "uVar2": "result",
                "uVar3": "flags",
                "param_2[0xd]": "sub_array",
                "param_2[4]": "sub_array_size",
                "param_2[5]": "sub_variable1",
                "param_2[2]": "sub_variable2",
                "param_2[6]": "sub_variable3",
                "FUN_080050d0": "process_data_080050d0",
                "param_2[1]": "param_2_1",
                "LAB_08005100": "set_flag"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080054fc",
                "FUN_080048dc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "output_flag",
                    "8": "output_param",
                    "6": "output_data",
                    "7": "output"
                },
                "param_2": {
                    "6": "input",
                    "2": "data",
                    "1": "input1",
                    "7": "input_param"
                },
                "iVar1": {
                    "1": "data_offset",
                    "5": "data_ptr",
                    "7": "data_pointer",
                    "2": "data_var",
                    "9": "data_address"
                },
                "uVar2": {
                    "4": "return_value",
                    "1": "result_var",
                    "2": "value",
                    "23": "result"
                },
                "uVar3": {
                    "6": "value",
                    "2": "param_val",
                    "1": "input_data_value",
                    "7": "flags"
                },
                "FUN_080053a0": {
                    "1": "reset_data_buffer",
                    "2": "initialize_data",
                    "4": "cleanup_data"
                },
                "FUN_080048dc": {
                    "1": "handle_case",
                    "3": "process_data",
                    "2": "cleanup_data"
                },
                "FUN_080054fc": {
                    "4": "handle_error",
                    "1": "process_data_function2"
                },
                "&DAT_08005fc0": {
                    "1": "data_pointer1",
                    "2": "data_1"
                },
                "&DAT_08005fe0": {
                    "1": "data2_address",
                    "2": "constant2"
                },
                "&DAT_08005fa0": {
                    "1": "const_data3_ptr",
                    "2": "constant3"
                },
                "param_2[0xd]": {
                    "1": "param2_0xd"
                },
                "param_2 + 0x11": {
                    "1": "param_2_end"
                },
                "param_2 + 3": {
                    "1": "sub_value"
                },
                "param_2[4]": {
                    "1": "input_array[4]"
                },
                "param_2[5]": {
                    "1": "input_data[5]"
                },
                "param_2[2]": {
                    "1": "value2"
                },
                "param_2[6]": {
                    "1": "negative_value"
                },
                "FUN_080050d0": {
                    "1": "update_flags_and_return_value",
                    "11": "process_data",
                    "3": "update_data"
                },
                "param_1[0]": {
                    "1": "param_1_0"
                },
                "param_1[1]": {
                    "1": "param_1_1"
                },
                "param_2[0]": {
                    "1": "input1[0]"
                },
                "param_2[1]": {
                    "1": "input_data_field_1"
                },
                "param_2[3]": {
                    "1": "input_data_field_3"
                },
                "(undefined4 *)&DAT_08005fe0": {
                    "1": "data_2"
                },
                "(undefined4 *)&DAT_08005fa0": {
                    "1": "data_ptr_3"
                },
                "*(int *)(DAT_200000a0 + 0x18)": {
                    "1": "data_flag"
                },
                "(undefined4 *)param_2[0xd]": {
                    "1": "pointer"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "flags"
                },
                "*(ushort *)(param_2 + 3) & 0xffdb": {
                    "1": "modified_value_at_param2_plus3"
                },
                "*param_2": {
                    "1": "param2_dereferenced"
                },
                "uVar3 & 0x280": {
                    "1": "flag_check1"
                },
                "(int)(short)uVar3 & 0x80": {
                    "1": "temp_flag"
                },
                "DAT_200000a0": {
                    "1": "data_ptr"
                },
                "param_2 == &DAT_08005fc0": {
                    "1": "is_param2_equal_08005fc0"
                },
                "param_2 == (undefined4 *)&DAT_08005fe0": {
                    "1": "is_param2_equal_08005fe0"
                },
                "param_2 == (undefined4 *)&DAT_08005fa0": {
                    "1": "is_param2_equal_08005fa0"
                },
                "-1 < (int)(uVar2 << 0x1c)": {
                    "1": "is_value_positive_bitshifted_0x1c"
                },
                "-1 < (int)(uVar2 << 0x1b)": {
                    "1": "is_value_positive_bitshifted_0x1b"
                },
                "(int)(uVar2 << 0x1d) < 0": {
                    "1": "is_value_negative_bitshifted_0x1d"
                },
                "(undefined4 *)param_2[0xd] != (undefined4 *)0x0": {
                    "1": "is_param2_index_not_equal_0x0"
                },
                "(undefined4 *)param_2[0xd] != param_2 + 0x11": {
                    "1": "is_param2_index_not_equal_param2_plus_0x11"
                },
                "(*(ushort *)(param_2 + 3) & 0x280) != 0x200": {
                    "1": "is_value_at_param2_plus3_not_equal_to_0x200"
                },
                "uVar2 = (int)(short)uVar3 & 0x80": {
                    "1": "u_var2_equal_to_modified_value"
                },
                "*(ushort *)(param_2 + 3) | 0x40": {
                    "1": "modified_value1"
                },
                "0xffffffff": {
                    "1": "return_value"
                },
                "param_3": {
                    "1": "param_ptr"
                },
                "param_4": {
                    "1": "param_value"
                },
                "param_ptr": {
                    "1": "config_param_ptr"
                },
                "param_val": {
                    "1": "config_param_val"
                },
                "*(undefined4 **)(iVar1 + 4)": {
                    "1": "data_ptr[1]"
                },
                "*(undefined4 **)(iVar1 + 8)": {
                    "1": "data_ptr[2]"
                },
                "*(undefined4 **)(iVar1 + 0xc)": {
                    "1": "data_ptr[3]"
                },
                "(param_2 + 3) & 0xffdb": {
                    "1": "updated_value"
                },
                "(param_2 + 3) | 8": {
                    "1": "final_value"
                },
                "(short)(param_2 + 3) & 0x80": {
                    "1": "check_value"
                },
                "LAB_08005100": {
                    "1": "set_flag"
                },
                "(int)(uVar2 << 0x1c)": {
                    "1": "shifted_result1"
                },
                "(int)(uVar2 << 0x1b)": {
                    "1": "shifted_result2"
                },
                "(int)(uVar2 << 0x1d)": {
                    "1": "shifted_result3"
                },
                "(int)((uint)uVar3 << 0x1e)": {
                    "1": "shifted_flag"
                }
            }
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_data_080051ac",
            "code": "\nvoid process_data_080051ac(void)\n\n{\n  unsigned_integer *data_pointer;\n  integer count;\n  integer *data_pointer;\n  integer *ptr_2;\n  unsigned_integer ushort_value;\n  unsigned_short flag;\n  integer temp;\n  function_pointer *function_pointer;\n  integer length;\n  unsigned_integer temp_value;\n  function_pointer *jump_table;\n  boolean is_zero;\n  undefined8 result;\n  \n  FUN_080055d0(6);\n  jump_table = (function_pointer *)0x80051bb;\n  result = FUN_080040f8(1);\n  data_pointer = (integer *)((ulonglong)result >> 0x20);\n  data_pointer = (unsigned_integer *)result;\n  flag = *(unsigned_short *)(data_pointer + 3);\n  ushort_value = (unsigned_integer)flag;\n  if ((integer)(ushort_value << 0x1c) < 0) {\n    count = data_pointer[4];\n    if (count != 0) {\n      temp = ushort_value << 0x1e;\n      is_zero = temp == 0;\n      length = *data_pointer;\n      if (is_zero) {\n        temp = data_pointer[5];\n      }\n      *data_pointer = count;\n      if (!is_zero) {\n        temp = 0;\n      }\n      data_pointer[2] = temp;\n      for (length = length - count; 0 < length; length = length - temp) {\n        temp = (*(function_pointer *)data_pointer[10])(data_pointer,data_pointer[8],count,length);\n        if (temp < 1) {\n          flag = *(unsigned_short *)(data_pointer + 3);\n          goto LAB_080052b2;\n        }\n        count = count + temp;\n      }\n    }\n  }\n  else if (((0 < data_pointer[1]) || (0 < data_pointer[0x10])) &&\n          (function_pointer = (function_pointer *)data_pointer[0xb], function_pointer != (function_pointer *)0x0)) {\n    temp_value = *data_pointer;\n    *data_pointer = 0;\n    if ((flag & 0x1000) == 0) {\n      count = (*function_pointer)(data_pointer,data_pointer[8],ushort_value & 0x1000,1);\n      if ((count == -1) && (ushort_value = *data_pointer, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(unsigned_short *)(data_pointer + 3) = *(unsigned_short *)(data_pointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *data_pointer = temp_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      count = data_pointer[0x15];\n    }\n    if (((integer)((unsigned_integer)*(unsigned_short *)(data_pointer + 3) << 0x1d) < 0) &&\n       (count = count - data_pointer[1], data_pointer[0xd] != 0)) {\n      count = count - data_pointer[0x10];\n    }\n    count = (*(function_pointer *)data_pointer[0xb])(data_pointer,data_pointer[8],count,0);\n    flag = *(unsigned_short *)(data_pointer + 3);\n    if ((count == -1) &&\n       ((0x1d < *data_pointer || (-1 < (integer)((0x20400001U >> (*data_pointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(unsigned_short *)(data_pointer + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    data_pointer[1] = 0;\n    *data_pointer = data_pointer[4];\n    if (((integer)((unsigned_integer)flag << 0x13) < 0) && ((count != -1 || (*data_pointer == 0)))) {\n      data_pointer[0x15] = count;\n    }\n    ptr_2 = (integer *)data_pointer[0xd];\n    *data_pointer = temp_value;\n    if (ptr_2 != (integer *)0x0) {\n      if (ptr_2 != data_pointer + 0x11) {\n        FUN_080048dc(data_pointer);\n      }\n      data_pointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_pointer",
                "iVar2": "count",
                "piVar3": "data_pointer",
                "piVar4": "ptr_2",
                "uVar5": "ushort_value",
                "uVar6": "flag",
                "iVar7": "temp",
                "pcVar8": "function_pointer",
                "iVar9": "length",
                "uVar10": "temp_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "uVar12": "result",
                "bVar11": "is_zero",
                "uint": "unsigned_integer",
                "int": "integer",
                "ushort": "unsigned_short",
                "code": "function_pointer",
                "bool": "boolean"
            },
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080051ac": {
                    "1": "execute_function",
                    "12": "process_data"
                },
                "FUN_080048dc": {
                    "1": "clear_param",
                    "3": "cleanup",
                    "2": "cleanup_resources",
                    "5": "cleanup_function",
                    "4": "cleanup_data"
                },
                "FUN_080040f8": {
                    "1": "allocate_memory",
                    "2": "get_pointer",
                    "6": "get_data"
                },
                "FUN_080055d0": {
                    "10": "initialize",
                    "1": "initialize_value",
                    "2": "initialize_process"
                },
                "puVar1": {
                    "2": "pointer_var2",
                    "1": "value_pointer",
                    "3": "data_pointer"
                },
                "iVar2": {
                    "1": "var2",
                    "5": "count",
                    "3": "counter",
                    "2": "int_value"
                },
                "piVar3": {
                    "1": "pointer3",
                    "2": "pointer_var1"
                },
                "piVar4": {
                    "1": "pointer_var3"
                },
                "uVar5": {
                    "1": "var2",
                    "6": "ushort_value",
                    "3": "value"
                },
                "uVar6": {
                    "6": "flag",
                    "1": "flag_value",
                    "2": "ushort_value2",
                    "3": "flags"
                },
                "iVar7": {
                    "1": "var2",
                    "4": "temp",
                    "2": "offset"
                },
                "pcVar8": {
                    "7": "function_pointer",
                    "1": "pointer_var3",
                    "3": "callback_function"
                },
                "iVar9": {
                    "1": "difference",
                    "2": "loop_counter"
                },
                "uVar10": {
                    "1": "variable10",
                    "6": "temp_value"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "6": "jump_table",
                    "1": "unrecovered_jumptable",
                    "3": "jump_table_function",
                    "2": "jmp_table"
                },
                "uVar12": {
                    "1": "undefined8_value",
                    "2": "return_value",
                    "7": "result"
                },
                "bVar11": {
                    "1": "boolean1",
                    "2": "bool_var1",
                    "14": "is_zero"
                },
                "uint": {
                    "1": "unsigned_integer"
                },
                "int": {
                    "1": "integer"
                },
                "ushort": {
                    "1": "unsigned_short"
                },
                "code": {
                    "1": "function_pointer"
                },
                "bool": {
                    "1": "boolean"
                },
                "undefined8": {
                    "1": "undefined8"
                }
            }
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 process_data_080052cc(uint *param_array,int *param_array)\n\n{\n  undefined4 return_value;\n  int offset;\n  int *temp_pointer;\n  uint ushort_value;\n  ushort temp_var2;\n  int temp_var3;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *function_pointer;\n  int loop_counter;\n  uint temp_value;\n  code *jump_table;\n  bool bool_var;\n  \n  if (param_array[4] != 0) {\n    if ((param_array != (uint *)0x0) && (param_array[6] == 0)) {\n      FUN_080053a0();\n    }\n    if (param_array == &DAT_08005fc0) {\n      param_array = (int *)param_array[1];\n    }\n    else if (param_array == (int *)&DAT_08005fe0) {\n      param_array = (int *)param_array[2];\n    }\n    else if (param_array == (int *)&DAT_08005fa0) {\n      param_array = (int *)param_array[3];\n    }\n    if (*(short *)(param_array + 3) != 0) {\n      temp_var2 = *(ushort *)(param_array + 3);\n      ushort_value = (uint)temp_var2;\n      if ((int)(ushort_value << 0x1c) < 0) {\n        offset = param_array[4];\n        if (offset != 0) {\n          temp_var3 = ushort_value << 0x1e;\n          bool_var = temp_var3 == 0;\n          loop_counter = *param_array;\n          if (bool_var) {\n            temp_var3 = param_array[5];\n          }\n          *param_array = offset;\n          if (!bool_var) {\n            temp_var3 = 0;\n          }\n          param_array[2] = temp_var3;\n          for (loop_counter = loop_counter - offset; 0 < loop_counter; loop_counter = loop_counter - temp_var3) {\n            temp_var3 = (*(code *)param_array[10])(param_array,param_array[8],offset,loop_counter,unaff_r4,unaff_r5);\n            if (temp_var3 < 1) {\n              temp_var2 = *(ushort *)(param_array + 3);\n              goto LAB_080052b2;\n            }\n            offset = offset + temp_var3;\n          }\n        }\n      }\n      else if (((0 < param_array[1]) || (0 < param_array[0x10])) &&\n              (function_pointer = (code *)param_array[0xb], function_pointer != (code *)0x0)) {\n        temp_value = *param_array;\n        *param_array = 0;\n        if ((temp_var2 & 0x1000) == 0) {\n          offset = (*function_pointer)(param_array,param_array[8],ushort_value & 0x1000,1);\n          if ((offset == -1) && (ushort_value = *param_array, ushort_value != 0)) {\n            if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n              *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*jump_table)();\n              return return_value;\n            }\n            *param_array = temp_value;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          offset = param_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n           (offset = offset - param_array[1], param_array[0xd] != 0)) {\n          offset = offset - param_array[0x10];\n        }\n        offset = (*(code *)param_array[0xb])(param_array,param_array[8],offset,0);\n        temp_var2 = *(ushort *)(param_array + 3);\n        if ((offset == -1) &&\n           ((0x1d < *param_array || (-1 < (int)((0x20400001U >> (*param_array & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_array + 3) = temp_var2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)(0xffffffff);\n          return return_value;\n        }\n        param_array[1] = 0;\n        *param_array = param_array[4];\n        if (((int)((uint)temp_var2 << 0x13) < 0) && ((offset != -1 || (*param_array == 0)))) {\n          param_array[0x15] = offset;\n        }\n        temp_pointer = (int *)param_array[0xd];\n        *param_array = temp_value;\n        if (temp_pointer != (int *)0x0) {\n          if (temp_pointer != param_array + 0x11) {\n            FUN_080048dc(param_array);\n          }\n          param_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*jump_table)();\n          return return_value;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*jump_table)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "param_array",
                "param_2": "param_array",
                "uVar1": "return_value",
                "iVar2": "offset",
                "piVar3": "temp_pointer",
                "uVar4": "ushort_value",
                "uVar5": "temp_var2",
                "iVar6": "temp_var3",
                "pcVar7": "function_pointer",
                "iVar8": "loop_counter",
                "uVar9": "temp_value",
                "bVar10": "bool_var",
                "FUN_080052cc": "process_data_080052cc",
                "UNRECOVERED_JUMPTABLE_00": "jump_table"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "array_param",
                    "2": "uint_array",
                    "6": "param_array",
                    "5": "input_array"
                },
                "param_2": {
                    "1": "input_pointer",
                    "4": "param_array",
                    "2": "int_array"
                },
                "uVar1": {
                    "12": "result",
                    "19": "return_value"
                },
                "iVar2": {
                    "1": "current_index",
                    "3": "temp_var1",
                    "6": "offset",
                    "4": "index"
                },
                "piVar3": {
                    "1": "pointer_value",
                    "3": "pointer_var",
                    "2": "var2",
                    "4": "ptr",
                    "6": "temp_pointer"
                },
                "uVar4": {
                    "2": "u_var4",
                    "3": "temp_value",
                    "1": "value2",
                    "6": "ushort_value",
                    "4": "ushort_var"
                },
                "uVar5": {
                    "2": "u_var5",
                    "1": "current_value",
                    "3": "temp_var2"
                },
                "iVar6": {
                    "3": "temp_var",
                    "1": "variable1",
                    "2": "increment"
                },
                "unaff_r4": {
                    "1": "unaff_var4",
                    "2": "register_4",
                    "3": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "unused_param",
                    "2": "register_5",
                    "3": "unaff_r5"
                },
                "pcVar7": {
                    "17": "function_pointer",
                    "1": "function_pointer_var",
                    "7": "function_ptr",
                    "2": "code_ptr"
                },
                "iVar8": {
                    "1": "temp4",
                    "2": "temp_var",
                    "4": "loop_counter"
                },
                "uVar9": {
                    "1": "uint_val",
                    "2": "u_var9",
                    "3": "temp_value"
                },
                "bVar10": {
                    "2": "boolean_var",
                    "1": "bool_flag",
                    "3": "condition"
                },
                "FUN_080052cc": {
                    "1": "execute_function",
                    "5": "process_data",
                    "4": "process_function"
                },
                "uVar10": {
                    "2": "temp_bool",
                    "1": "flag2",
                    "4": "bool_value",
                    "3": "bool_var"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "8": "jump_table",
                    "1": "unrecovered_jumptable_00",
                    "2": "jmp_table",
                    "4": "jumptable"
                },
                "uVar11": {
                    "1": "flag3"
                },
                "FUN_080053a0": {
                    "1": "reset_data"
                },
                "FUN_080048dc": {
                    "1": "function_call"
                }
            }
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_0800532c",
            "code": "\nvoid initialize_data_0800532c(undefined4 *data,undefined2 value1,undefined2 size)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = size;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  FUN_080048cc(data + 0x17,0,8);\n  data[9] = 0x8005609;\n  data[10] = 0x800562b;\n  data[0xb] = 0x8005663;\n  data[8] = data;\n  data[0xc] = &label_constant;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "size",
                "LAB_08005686_1": "label_constant"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800532c": {
                    "1": "initialize_param_array",
                    "3": "initialize_data_struct",
                    "10": "initialize_data",
                    "4": "initialize_function",
                    "2": "initialize_param_struct"
                },
                "param_1": {
                    "5": "memory",
                    "3": "destination",
                    "2": "data_structure",
                    "1": "memory_ptr"
                },
                "param_2": {
                    "1": "param2_value",
                    "4": "default_value",
                    "5": "initial_value",
                    "8": "value1"
                },
                "param_3": {
                    "1": "8",
                    "11": "size",
                    "4": "length",
                    "8": "value2"
                },
                "FUN_080048cc": {
                    "4": "set_memory",
                    "2": "fill_memory",
                    "1": "memset",
                    "18": "initialize_memory"
                },
                "LAB_08005686_1": {
                    "1": "label1"
                },
                "dataPointer": {
                    "1": "data"
                },
                "value1": {
                    "1": "initial_value"
                },
                "value2": {
                    "1": "secondary_value"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "initializeMemory": {
                    "1": "initialize_memory"
                }
            }
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_data_structure_08005374",
            "code": "\nundefined4 * initialize_data_structure_08005374(undefined4 data,int size)\n\n{\n  undefined4 *result;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  result = (undefined4 *)FUN_08004978(data,offset + 0x74);\n  if (result != (undefined4 *)0x0) {\n    *result = 0;\n    result[1] = size;\n    result[2] = result + 3;\n    FUN_080048cc(result + 3,0,offset + 0x68);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_data_structure_08005374",
                "param_1": "data",
                "param_2": "size",
                "iVar2": "offset",
                "puVar1": "result"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005374": {
                    "11": "initialize_array",
                    "1": "allocate_and_initialize_data",
                    "17": "initialize_data_structure"
                },
                "param_1": {
                    "1": "input_param",
                    "6": "data",
                    "5": "array",
                    "2": "array_pointer",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "length",
                    "2": "memory_size",
                    "19": "size"
                },
                "iVar2": {
                    "31": "offset"
                },
                "puVar1": {
                    "5": "new_array",
                    "1": "data_structure_pointer",
                    "2": "ptr",
                    "6": "result"
                },
                "FUN_080048cc": {
                    "1": "initialize_subarray",
                    "3": "initialize_elements",
                    "5": "initialize_memory"
                },
                "FUN_08004978": {
                    "11": "allocate_memory"
                },
                "param_3": {
                    "1": "additional_offset",
                    "3": "size"
                },
                "*puVar1": {
                    "1": "data_ptr"
                },
                "*puVar1[1]": {
                    "1": "data_count"
                },
                "*puVar1[2]": {
                    "1": "next_element_ptr"
                },
                "*param_1": {
                    "1": "allocated_memory"
                }
            }
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initialize_data_080053a0(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *temp_ptr;\n  \n  if (params[6] == 0) {\n    data[18] = 0;\n    data[19] = 0;\n    data[20] = 0;\n    temp_ptr = &DAT_200000a4;\n    data[10] = address1;\n    if (data == &DAT_200000a4) {\n      temp_ptr = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000a4) {\n      params[6] = temp_ptr;\n    }\n    result = FUN_08005400();\n    allocated_ptr1 = result;\n    result = FUN_08005400(data);\n    allocated_ptr2 = result;\n    result = FUN_08005400(data);\n    allocated_ptr3 = result;\n    FUN_0800532c(allocated_ptr1,4,0);\n    FUN_0800532c(allocated_ptr2,9,1);\n    FUN_0800532c(allocated_ptr3,0x12,2);\n    params[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "temp_ptr",
                "param_1[6]": "params[6]",
                "param_1[0x12]": "data[18]",
                "param_1[0x13]": "data[19]",
                "param_1[0x14]": "data[20]",
                "param_1[10]": "data[10]",
                "&LAB_08005320_1": "address1",
                "param_1[1]": "allocated_ptr1",
                "param_1[2]": "allocated_ptr2",
                "param_1[3]": "allocated_ptr3",
                "LAB_08005320_1": "default_pointer"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053a0": {
                    "3": "initialize_function",
                    "8": "initialize_parameters",
                    "2": "initialize_param",
                    "1": "initialize_data_structures",
                    "14": "initialize_data"
                },
                "param_1": {
                    "8": "data",
                    "3": "data_ptr",
                    "1": "param",
                    "2": "param_array",
                    "7": "parameters"
                },
                "uVar1": {
                    "1": "result_value",
                    "21": "result",
                    "7": "return_value"
                },
                "puVar2": {
                    "1": "p_value",
                    "2": "ptr",
                    "11": "temp_ptr",
                    "6": "pointer",
                    "4": "temp_pointer"
                },
                "FUN_08005400": {
                    "1": "create_integer_array",
                    "2": "create_data",
                    "25": "allocate_memory"
                },
                "FUN_0800532c": {
                    "1": "set_values_in_array",
                    "2": "set_param_value",
                    "6": "set_values"
                },
                "param_1[6]": {
                    "1": "input_array[6]",
                    "2": "params[6]"
                },
                "param_1[0x12]": {
                    "2": "data[18]",
                    "1": "parameters[18]"
                },
                "param_1[0x13]": {
                    "2": "params[19]",
                    "1": "parameters[19]"
                },
                "param_1[0x14]": {
                    "1": "input_array[end_index]",
                    "2": "params[20]"
                },
                "param_1[10]": {
                    "1": "parameters[16]"
                },
                "DAT_200000a4": {
                    "1": "constant_data"
                },
                "&LAB_08005320_1": {
                    "1": "address1"
                },
                "param_1[1]": {
                    "1": "parameters[1]"
                },
                "param_1[2]": {
                    "1": "parameters[2]"
                },
                "param_1[3]": {
                    "1": "parameters[3]"
                },
                "4": {
                    "1": "size1"
                },
                "9": {
                    "1": "constant2"
                },
                "0x12": {
                    "1": "size3"
                },
                "LAB_08005320_1": {
                    "1": "callback_function"
                },
                "param_2": {
                    "2": "value1",
                    "3": "size"
                },
                "param_3": {
                    "2": "value2",
                    "3": "index"
                },
                "param_4": {
                    "1": "flag2",
                    "2": "index"
                },
                "&DAT_200000a4": {
                    "1": "default_val"
                },
                "param_1[6] == 0": {
                    "1": "is_params_initialized"
                },
                "param_1 == &DAT_200000a4": {
                    "1": "is_default_param"
                },
                "FUN_0800532c(param_1[1],4,0)": {
                    "1": "initialize_memory(params[1],4,0)"
                },
                "FUN_0800532c(param_1[2],9,1)": {
                    "1": "initialize_memory(params[2],9,1)"
                },
                "FUN_0800532c(param_1[3],0x12,2)": {
                    "1": "initialize_memory(params[3],0x12,2)"
                }
            }
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "process_data_08005400",
            "code": "\nint * process_data_08005400(undefined4 *error_code,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *current_object;\n  int *next_data;\n  int **object_list;\n  \n  if (DAT_200000bc == 0) {\n    FUN_080053a0(&DAT_200000a4);\n  }\n  object_list = (int **)&DAT_200000ec;\n  do {\n    next_data = object_list[2];\n    current_object = object_list[1];\n    while (current_object = (int *)((int)current_object + -1), -1 < (int)current_object) {\n      if (*(short_value *)(next_data + 3) == 0) {\n        *(undefined2 *)((int)next_data + 0xe) = 0xffff;\n        *(undefined2 *)(next_data + 3) = 1;\n        pointer2_plus25 = 0;\n        *next_data = 0;\n        value3 = 0;\n        value4 = 0;\n        value5 = 0;\n        value6 = 0;\n        value7 = 0;\n        FUN_080048cc(next_data + 0x17,0,8,1,param4);\n        pointer2_plus13 = 0;\n        pointer2_plus14 = 0;\n        pointer2_plus18 = 0;\n        pointer2_plus19 = 0;\n        return next_data;\n      }\n      next_data = next_data + 0x1a;\n    }\n    if (*object_list == (int *)0x0) {\n      current_object = (int *)FUN_08005374(error_code,4);\n      *object_list = current_object;\n      if (current_object == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    object_list = (int **)*object_list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "process_data_08005400",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "current_object",
                "piVar2": "next_data",
                "ppiVar3": "object_list",
                "short": "short_value",
                "piVar2[0x19]": "pointer2_plus25",
                "piVar2[0xd]": "pointer2_plus13",
                "piVar2[0xe]": "pointer2_plus14",
                "piVar2[0x12]": "pointer2_plus18",
                "piVar2[0x13]": "pointer2_plus19",
                "piVar2[2]": "value3",
                "piVar2[1]": "value4",
                "piVar2[4]": "value5",
                "piVar2[5]": "value6",
                "piVar2[6]": "value7"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08005374",
                "FUN_080048cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005400": {
                    "1": "initialize_modules",
                    "4": "process_data",
                    "3": "initialize_data_structure",
                    "2": "initialize_resources"
                },
                "param_1": {
                    "1": "input_pointer",
                    "2": "result",
                    "7": "error_code"
                },
                "param_2": {
                    "14": "param2",
                    "1": "unknown_param_1",
                    "2": "input_param_1",
                    "3": "input1",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "3": "input2",
                    "14": "param3",
                    "6": "param_3",
                    "2": "input_param_2"
                },
                "param_4": {
                    "16": "param4",
                    "1": "arg3",
                    "6": "param_4",
                    "2": "input_param_3",
                    "3": "input3"
                },
                "piVar1": {
                    "1": "current_address",
                    "2": "current_pointer",
                    "3": "current_object"
                },
                "piVar2": {
                    "1": "entry",
                    "2": "inner_pointer"
                },
                "ppiVar3": {
                    "1": "double_ptr",
                    "2": "data_array_ptr",
                    "3": "object_list"
                },
                "FUN_080053a0": {
                    "3": "initialize_dat_200000a4",
                    "1": "setup_initialize_data",
                    "9": "initialize_data",
                    "8": "initialize_global_data"
                },
                "FUN_080048cc": {
                    "1": "initialize_block",
                    "2": "process_data",
                    "6": "initialize_memory",
                    "3": "initialize_data"
                },
                "DAT_200000bc": {
                    "1": "initialized_flag",
                    "3": "data_flag",
                    "2": "is_initialized"
                },
                "DAT_200000a4": {
                    "1": "dat_200000a4",
                    "4": "global_data"
                },
                "DAT_200000ec": {
                    "1": "pointer_buffer"
                },
                "FUN_08005374": {
                    "14": "allocate_memory",
                    "1": "allocate_memory_block"
                },
                "short": {
                    "2": "short_value"
                },
                "&DAT_200000ec": {
                    "1": "data_ptr"
                },
                "piVar2 + 3": {
                    "1": "short_value"
                },
                "piVar2 + 0x17": {
                    "1": "param1"
                },
                "&param_2": {
                    "1": "param2"
                },
                "&param_3": {
                    "1": "param3"
                },
                "&param_4": {
                    "1": "param4"
                },
                "piVar2 + 0xd": {
                    "1": "value_d"
                },
                "piVar2 + 0xe": {
                    "1": "value_e"
                },
                "piVar2 + 0x12": {
                    "1": "value12"
                },
                "piVar2 + 0x13": {
                    "1": "value13"
                },
                "piVar2+3": {
                    "1": "pointer2_plus3"
                },
                "piVar2+0xe": {
                    "1": "pointer2_plus14"
                },
                "piVar2[3]": {
                    "1": "temp_var2_3"
                },
                "piVar2[0x19]": {
                    "1": "pointer2_plus25"
                },
                "piVar2+0x17": {
                    "1": "pointer2_plus23"
                },
                "piVar2[0xd]": {
                    "1": "value8"
                },
                "piVar2[0xe]": {
                    "1": "pointer2_plus14"
                },
                "piVar2[0x12]": {
                    "1": "value10"
                },
                "piVar2[0x13]": {
                    "1": "pointer2_plus19"
                },
                "*(short *)(piVar2 + 3)": {
                    "1": "short_value"
                },
                "*(undefined2 *)((int)piVar2 + 0xe)": {
                    "1": "undefined2_value"
                },
                "(int)piVar1 + -1": {
                    "1": "counter"
                },
                "*(undefined2 *)(piVar2 + 3)": {
                    "1": "undefined2_pointer"
                },
                "*piVar2": {
                    "1": "value2"
                },
                "piVar2[2]": {
                    "1": "value3"
                },
                "piVar2[1]": {
                    "1": "value4"
                },
                "piVar2[4]": {
                    "1": "value5"
                },
                "piVar2[5]": {
                    "1": "value6"
                },
                "piVar2[6]": {
                    "1": "value7"
                },
                "*ppiVar3": {
                    "1": "next_data_ptr"
                }
            }
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_permissions_080054b4",
            "code": "\nundefined4 check_permissions_080054b4(undefined4 param1,int param2,undefined4 *result,uint *result)\n\n{\n  int result;\n  undefined4 permission;\n  undefined stack_buffer [4];\n  uint file_permissions;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = FUN_080056d4(param1,(int)*(short *)(param2 + 0xe),stack_buffer), result < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *result = (uint)((file_permissions & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_080054f4:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_permissions_080054b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "result",
                "iVar1": "result",
                "auStack_4c": "stack_buffer",
                "local_48": "file_permissions",
                "uVar2": "permission"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054b4": {
                    "1": "check_flags_and_set_value",
                    "4": "check_file_permissions",
                    "2": "analyze_permissions",
                    "8": "check_permissions"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "file_handle",
                    "5": "param_1",
                    "9": "param1",
                    "4": "param"
                },
                "param_2": {
                    "9": "param2",
                    "1": "input_param",
                    "5": "file_info",
                    "2": "arg2",
                    "3": "input_data"
                },
                "param_3": {
                    "1": "permission_type",
                    "3": "output_param",
                    "4": "permission",
                    "5": "result"
                },
                "param_4": {
                    "4": "flags",
                    "1": "file_flags",
                    "3": "is_executable",
                    "2": "status",
                    "6": "result"
                },
                "iVar1": {
                    "5": "return_value",
                    "4": "error_code",
                    "6": "status",
                    "13": "result",
                    "1": "result_code"
                },
                "auStack_4c": {
                    "1": "local_stack",
                    "2": "buffer",
                    "4": "stack_buffer",
                    "3": "temporary_buffer"
                },
                "local_48": {
                    "2": "file_attributes",
                    "1": "flag_value",
                    "4": "file_permissions"
                },
                "uVar2": {
                    "1": "parameter_value",
                    "3": "permission_value",
                    "7": "permission",
                    "2": "permission_flag"
                }
            }
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_data_080054fc",
            "code": "\nvoid process_data_080054fc(int input_value,int *data)\n\n{\n  ushort result;\n  int status;\n  int local_value1;\n  int *local_value2;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    local_value1 = input_value;\n    local_value2 = data;\n    result = FUN_080054b4(input_value,data,&local_value1,&local_value2);\n    status = FUN_08004978(input_value,local_value1);\n    if (status != 0) {\n      *(undefined **)(input_value + 0x28) = some_label;\n      *data = status;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = local_value1;\n      data[4] = status;\n      if ((local_value2 != (int *)0x0) &&\n         (status = FUN_080056f8(input_value,(int)*(short *)((int)data + 0xe)), status != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_data_080054fc",
                "param_1": "input_value",
                "param_2": "data",
                "local_18": "local_value1",
                "local_14": "local_value2",
                "uVar1": "result",
                "iVar2": "status",
                "&LAB_08005320_1": "some_label"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080054b4",
                "FUN_080056f8",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054fc": {
                    "1": "process_input_data",
                    "19": "process_data",
                    "2": "process_param"
                },
                "param_1": {
                    "4": "input",
                    "1": "input_param",
                    "10": "input_value",
                    "2": "data_address"
                },
                "param_2": {
                    "1": "input_2",
                    "6": "data",
                    "3": "data_array",
                    "2": "output",
                    "4": "output_data"
                },
                "local_18": {
                    "1": "local_param_1",
                    "2": "local_value",
                    "3": "temp1",
                    "6": "local_value1"
                },
                "local_14": {
                    "1": "local_value_2",
                    "4": "temp_data",
                    "2": "local_data",
                    "3": "temp2",
                    "5": "local_value2"
                },
                "uVar1": {
                    "1": "result_code",
                    "2": "result1",
                    "19": "result"
                },
                "iVar2": {
                    "4": "return_value",
                    "2": "result2",
                    "1": "result_2",
                    "6": "status",
                    "3": "result"
                },
                "FUN_080054b4": {
                    "1": "process_input"
                },
                "FUN_08004978": {
                    "1": "check_value"
                },
                "FUN_080056f8": {
                    "1": "process_short"
                },
                "&LAB_08005320_1": {
                    "1": "some_label"
                }
            }
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "execute_function_080055d0",
            "code": "\nint execute_function_080055d0(uint input_value)\n\n{\n  int *data_ptr;\n  undefined4 result;\n  int value;\n  code *function_ptr;\n  undefined4 arg4;\n  undefined4 arg5;\n  undefined4 return_address;\n  undefined4 *data_ptr;\n  \n  data_ptr = DAT_200000a0;\n  data_ptr = &DAT_200000a0;\n  if (0x1f < input_value) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  value = DAT_200000a0[0x11];\n  if ((value != 0) && (function_ptr = *(code **)(value + input_value * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input_value * 4) = 0;\n      (*function_ptr)(input_value);\n    }\n    return 0;\n  }\n  result = thunk_FUN_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  value = FUN_080040fc(result,input_value,input_value,0,data_ptr,arg4,arg5,return_address);\n  if ((value == -1) && (DAT_20000674 != 0)) {\n    *data_ptr = DAT_20000674;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "execute_function_080055d0",
                "param_1": "input_value",
                "piVar1": "data_ptr",
                "uVar2": "result",
                "iVar3": "value",
                "pcVar4": "function_ptr",
                "puVar5": "data_ptr",
                "unaff_r4": "arg4",
                "unaff_r5": "arg5",
                "in_lr": "return_address"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040fc",
                "thunk_FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080055d0": {
                    "2": "handle_function",
                    "3": "handle_param",
                    "1": "execute_operation",
                    "6": "execute_function"
                },
                "param_1": {
                    "6": "input",
                    "2": "param",
                    "1": "operation_code",
                    "9": "input_value",
                    "4": "input_param"
                },
                "piVar1": {
                    "2": "ptr_data",
                    "1": "ptr_to_int1",
                    "3": "result_ptr",
                    "6": "data_ptr"
                },
                "uVar2": {
                    "1": "thunk_value",
                    "6": "thunk_result",
                    "20": "result"
                },
                "iVar3": {
                    "2": "var1",
                    "1": "code_ptr",
                    "3": "function_ptr",
                    "4": "value"
                },
                "pcVar4": {
                    "1": "function_addr",
                    "3": "code_ptr",
                    "6": "function_pointer",
                    "9": "function_ptr",
                    "2": "function"
                },
                "puVar5": {
                    "1": "data_array_ptr",
                    "2": "data_ptr_ptr",
                    "5": "data_ptr"
                },
                "unaff_r4": {
                    "1": "register_r4",
                    "2": "arg4"
                },
                "unaff_r5": {
                    "1": "unused_register_5",
                    "2": "arg5"
                },
                "in_lr": {
                    "1": "unused_link_register",
                    "5": "return_address"
                },
                "DAT_200000a0": {
                    "1": "array1"
                },
                "DAT_20000674": {
                    "1": "error_code"
                },
                "thunk_FUN_0800410c": {
                    "1": "get_result_from_thunk"
                },
                "FUN_080040fc": {
                    "1": "perform_calculation"
                }
            }
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_return_value_thunk_0800410c",
            "code": "\nundefined4 get_return_value_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_return_value_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "thunk_FUN_0800410c": {
                    "2": "get_status",
                    "1": "calculate_result",
                    "14": "get_return_value"
                },
                "FUN_0800410c": {
                    "4": "calculate_value",
                    "3": "get_value",
                    "1": "internal_function",
                    "2": "calculate_result",
                    "9": "calculate_return_value"
                }
            }
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_value_08005608",
            "code": "\nvoid update_value_08005608(undefined4 input_array,int offset)\n\n{\n  int result;\n  uint new_value;\n  bool is_positive;\n  \n  result = FUN_0800573c(input_array,(int)*(short *)(offset + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    new_value = *(int *)(offset + 0x54) + result;\n  }\n  else {\n    new_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(offset + 0x54) = new_value;\n  }\n  if (!is_positive) {\n    *(short *)(offset + 0xc) = (short)new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_value_08005608",
                "param_1": "input_array",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "new_value",
                "bVar3": "is_positive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005608": {
                    "21": "update_value",
                    "1": "update_value_based_on_condition",
                    "5": "update_data",
                    "3": "update_values"
                },
                "param_1": {
                    "3": "input_array",
                    "1": "input_pointer",
                    "2": "ptr1"
                },
                "param_2": {
                    "4": "base_address",
                    "2": "data",
                    "1": "ptr2",
                    "10": "offset",
                    "3": "data_offset"
                },
                "iVar1": {
                    "29": "result",
                    "2": "return_value"
                },
                "uVar2": {
                    "1": "new_val",
                    "15": "new_value",
                    "14": "updated_value"
                },
                "bVar3": {
                    "31": "is_positive"
                }
            }
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_0800562a",
            "code": "\nvoid process_data_0800562a(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 link_register;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    FUN_08005718(result,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = FUN_080040ec((int)*(short *)(data + 0xe),param1,param2,param2,param2,unused1,\n                       unused2,link_register);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "link_register",
                "FUN_0800562a": "process_data_0800562a"
            },
            "calling": [],
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "2": "result_array",
                    "6": "output",
                    "1": "output_buffer",
                    "9": "result"
                },
                "param_2": {
                    "7": "data",
                    "1": "data_offset",
                    "5": "input_data"
                },
                "param_3": {
                    "4": "param3",
                    "1": "value1",
                    "13": "param1",
                    "5": "param_3",
                    "7": "param_a"
                },
                "param_4": {
                    "13": "param2",
                    "4": "param4",
                    "7": "param_b",
                    "5": "param_4",
                    "1": "var2"
                },
                "iVar1": {
                    "1": "sub_function_result",
                    "16": "result",
                    "8": "return_value"
                },
                "unaff_r4": {
                    "1": "unaffected_register_4",
                    "6": "unused1",
                    "2": "unused_var1",
                    "3": "temp1"
                },
                "unaff_r5": {
                    "1": "extra_param_2",
                    "2": "var2",
                    "3": "temp2",
                    "6": "unused2"
                },
                "in_lr": {
                    "1": "in_linked_register",
                    "4": "unused3",
                    "5": "link_register",
                    "2": "unused_var3"
                },
                "FUN_0800562a": {
                    "2": "update_data",
                    "20": "process_data",
                    "1": "extract_and_process_data"
                },
                "FUN_08005718": {
                    "1": "process_data_sub_function"
                },
                "FUN_080040ec": {
                    "1": "process_input_data",
                    "2": "perform_operation"
                }
            }
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_status_08005662",
            "code": "\nvoid update_status_08005662(undefined4 status,int data)\n\n{\n  int result;\n  ushort updated_value;\n  bool is_error;\n  \n  result = FUN_08005718(status,(int)*(short *)(data + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_status_08005662",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005662": {
                    "5": "update_flag",
                    "2": "update_param_value",
                    "1": "update_flags_and_values",
                    "7": "update_status",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "input_param",
                    "5": "status",
                    "4": "param1",
                    "3": "param"
                },
                "param_2": {
                    "1": "context",
                    "9": "data",
                    "4": "param2",
                    "2": "arg2"
                },
                "iVar1": {
                    "29": "result",
                    "2": "return_value"
                },
                "uVar2": {
                    "5": "flag",
                    "1": "flag_value",
                    "18": "updated_value",
                    "2": "updated_flag"
                },
                "bVar3": {
                    "1": "is_not_found",
                    "8": "is_negative",
                    "2": "is_invalid",
                    "3": "is_result_minus_one",
                    "13": "is_error"
                }
            }
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "process_data_080056d4",
            "code": "\nvoid process_data_080056d4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int return_value;\n  \n  DAT_20000674 = 0;\n  return_value = FUN_080040d6(input1,input2,input2,0,input3);\n  if ((return_value == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "process_data_080056d4",
                "param_1": "result",
                "param_2": "input1",
                "param_4": "input3",
                "iVar1": "return_value",
                "param_3": "input2"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080056d4": {
                    "1": "update_param_with_result",
                    "5": "process_data",
                    "2": "extract_error_code",
                    "3": "check_and_assign_value"
                },
                "param_1": {
                    "4": "output_value",
                    "1": "target",
                    "2": "output_data",
                    "3": "output",
                    "11": "result"
                },
                "param_2": {
                    "4": "value1",
                    "1": "param1",
                    "5": "input_param_1",
                    "10": "input1",
                    "3": "input_value1"
                },
                "param_4": {
                    "4": "value3",
                    "1": "arg3",
                    "5": "input_param_3",
                    "9": "input3",
                    "3": "input_value3"
                },
                "iVar1": {
                    "13": "result",
                    "14": "return_value",
                    "1": "error_code"
                },
                "param_3": {
                    "1": "arg2",
                    "9": "input2",
                    "3": "input_value2",
                    "5": "input_param_2",
                    "4": "value2"
                },
                "DAT_20000674": {
                    "1": "extracted_error_code"
                },
                "FUN_080040d6": {
                    "1": "process_input_values",
                    "2": "calculate_result"
                }
            }
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "process_data_080056f8",
            "code": "\nvoid process_data_080056f8(int *result,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e0(input_value);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "process_data_080056f8",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080056f8": {
                    "1": "process_error",
                    "3": "extract_error_code",
                    "2": "process_and_assign_value"
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "error_code",
                    "3": "output_param",
                    "4": "output_value",
                    "8": "output",
                    "11": "result"
                },
                "param_2": {
                    "11": "input",
                    "1": "value",
                    "15": "input_value",
                    "3": "input_param"
                },
                "iVar1": {
                    "1": "status",
                    "10": "return_value",
                    "2": "error_code",
                    "13": "result"
                },
                "DAT_20000674": {
                    "1": "failed_return_value"
                }
            }
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "process_data_08005718",
            "code": "\nvoid process_data_08005718(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e4(input1,input2,input3,input3,input3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "process_data_08005718",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005718": {
                    "1": "clear_error_and_set_result",
                    "4": "process_data",
                    "3": "extract_data",
                    "2": "extract_error_code"
                },
                "param_1": {
                    "1": "error_pointer",
                    "3": "error_code",
                    "7": "output",
                    "13": "result"
                },
                "param_2": {
                    "1": "param_2",
                    "5": "input_1",
                    "2": "input_param_1",
                    "3": "value1",
                    "8": "input1"
                },
                "param_3": {
                    "1": "param_3",
                    "8": "input2",
                    "2": "arg2",
                    "5": "input_2",
                    "3": "value2"
                },
                "param_4": {
                    "5": "input_3",
                    "1": "input_data3",
                    "2": "arg3",
                    "3": "value3",
                    "8": "input3"
                },
                "iVar1": {
                    "1": "error_code",
                    "11": "return_value",
                    "3": "function_result",
                    "13": "result"
                },
                "DAT_20000674": {
                    "2": "error_code",
                    "1": "extracted_error_code"
                }
            }
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "process_data_0800573c",
            "code": "\nvoid process_data_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "process_data_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800573c": {
                    "1": "reverse_and_store_value",
                    "5": "process_data",
                    "2": "extract_and_assign_value",
                    "3": "extract_error_code"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "result_ptr",
                    "4": "output_value",
                    "6": "output",
                    "7": "result"
                },
                "param_2": {
                    "1": "param_a",
                    "2": "input_value1",
                    "12": "arg1",
                    "3": "input_param_1",
                    "8": "input1"
                },
                "param_3": {
                    "8": "input2",
                    "1": "value_2",
                    "2": "input_2",
                    "3": "input_param_2",
                    "12": "arg2"
                },
                "param_4": {
                    "2": "input_value3",
                    "1": "value_3",
                    "3": "input_param_3",
                    "12": "arg3",
                    "8": "input3"
                },
                "iVar1": {
                    "15": "result",
                    "6": "return_value",
                    "4": "function_result",
                    "2": "error_code"
                },
                "DAT_20000674": {
                    "2": "extracted_value",
                    "1": "error_value"
                }
            }
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initialize_data_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = initialize_data_08005760;\n  FUN_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005760": {
                    "1": "update_flags",
                    "8": "initialize_data",
                    "6": "initialize_variables"
                },
                "FUN_080051ac": {
                    "1": "initialize_sub_function",
                    "2": "execute_sub_function",
                    "5": "sub_function",
                    "4": "initialize_variables",
                    "6": "perform_initialization"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable",
                    "2": "function_pointer",
                    "8": "jump_table"
                }
            }
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 683710,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000682",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004648",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047c0",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "thunk_FUN_0800410c",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}