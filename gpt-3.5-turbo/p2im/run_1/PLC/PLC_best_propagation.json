{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initialize_flag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080001ac": {
                    "2": "update_flag_if_zero",
                    "23": "initialize_flag",
                    "1": "initialize_data_variable"
                },
                "param_1": {
                    "10": "input",
                    "2": "input_parameter",
                    "1": "flag",
                    "9": "input_value",
                    "3": "input_param"
                },
                "DAT_20000104": {
                    "16": "flag",
                    "1": "flag_initialized",
                    "5": "flag_variable"
                }
            }
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint byte_to_find,uint length)\n\n{\n  byte current_byte;\n  char bit0;\n  char bit8;\n  char bit16;\n  char bit24;\n  byte *next_byte;\n  uint *data_ptr;\n  byte *result;\n  uint offset;\n  uint aligned_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool temp_byte;\n  bool temp_byte2;\n  bool temp_byte3;\n  bool temp_byte4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = data_ptr;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = byte_to_find | byte_to_find << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          data_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result_1 = *data ^ offset;\n          xor_result_2 = data[1] ^ offset;\n          bit0 = -((char)xor_result_1 == '\\0');\n          bit8 = -((char)(xor_result_1 >> 8) == '\\0');\n          bit16 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          bit24 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(bit24,CONCAT12(bit16,CONCAT11(bit8,bit0)));\n          temp_byte = (char)xor_result_2 != '\\0';\n          temp_byte2 = (char)(xor_result_2 >> 8) != '\\0';\n          temp_byte3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          temp_byte4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(temp_byte4 * bit24 - !temp_byte4,\n                            CONCAT12(temp_byte3 * bit16 - !temp_byte3,\n                                     CONCAT11(temp_byte2 * bit8 - !temp_byte2,temp_byte * bit0 - !temp_byte)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              temp_byte = (xor_result_1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (temp_byte) {\n                temp_byte = (xor_result_1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (temp_byte) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = data_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x08000290;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      offset = (uint)data_ptr & 7;\n      data = data_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)data_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "bit0",
                "cVar3": "bit8",
                "cVar4": "bit16",
                "cVar5": "bit24",
                "pbVar6": "next_byte",
                "puVar7": "data_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "temp_byte",
                "bVar14": "temp_byte2",
                "bVar15": "temp_byte3",
                "bVar16": "temp_byte4"
            },
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000230": {
                    "1": "find_first_occurrence",
                    "24": "find_byte_sequence"
                },
                "param_1": {
                    "2": "input_array",
                    "21": "data",
                    "1": "ptr_data",
                    "3": "byte_sequence"
                },
                "param_2": {
                    "1": "pattern",
                    "11": "byte_to_find",
                    "2": "search_value",
                    "10": "target_byte",
                    "3": "target"
                },
                "param_3": {
                    "4": "array_length",
                    "2": "size",
                    "1": "size_of_data",
                    "3": "sequence_length",
                    "15": "length"
                },
                "bVar1": {
                    "1": "byte_val",
                    "20": "current_byte",
                    "2": "byte_found",
                    "6": "byte_value"
                },
                "cVar2": {
                    "4": "bit0",
                    "2": "check_1",
                    "1": "is_zero_bit"
                },
                "cVar3": {
                    "1": "is_equal_0_8",
                    "3": "is_byte_zero_shifted_8",
                    "2": "mask_2",
                    "4": "bit8"
                },
                "cVar4": {
                    "1": "byte_check3",
                    "4": "bit16",
                    "2": "check_3",
                    "3": "is_byte_zero_shifted_16"
                },
                "cVar5": {
                    "1": "cond_bit_3",
                    "3": "is_byte_zero_shifted_24",
                    "2": "check_4",
                    "4": "bit24"
                },
                "pbVar6": {
                    "1": "ptr_data",
                    "8": "next_byte",
                    "4": "next_byte_pointer",
                    "2": "next_byte_ptr",
                    "7": "result"
                },
                "puVar7": {
                    "1": "next_data",
                    "2": "sequence_pointer",
                    "9": "data_ptr",
                    "4": "ptr"
                },
                "pbVar8": {
                    "1": "result_pointer",
                    "2": "next_ptr",
                    "8": "result_ptr",
                    "10": "result"
                },
                "uVar9": {
                    "1": "sequence_alignment",
                    "2": "data_offset",
                    "5": "remainder",
                    "7": "offset"
                },
                "uVar10": {
                    "1": "buffer_length_rounded_down",
                    "12": "aligned_length",
                    "2": "length_aligned"
                },
                "uVar11": {
                    "1": "temp_mask",
                    "4": "xor_result_1",
                    "2": "xor_result_0"
                },
                "uVar12": {
                    "1": "tmp_result2",
                    "2": "temp_xor",
                    "4": "xor_result_2"
                },
                "bVar13": {
                    "1": "nonzero_low_byte"
                },
                "bVar14": {
                    "1": "is_byte_xor_zero_shifted_8"
                },
                "bVar15": {
                    "1": "cond3"
                },
                "bVar16": {
                    "1": "temp_byte4"
                },
                "bVar13 * cVar2 - !bVar13": {
                    "1": "xor_result1_byte1"
                },
                "bVar14 * cVar3 - !bVar14": {
                    "1": "xor_result1_byte2"
                },
                "bVar15 * cVar4 - !bVar15": {
                    "1": "xor_result1_byte3"
                },
                "bVar16 * cVar5 - !bVar16": {
                    "1": "xor_result1_byte4"
                },
                "uVar12 != 0": {
                    "1": "xor_result_not_zero"
                },
                "uVar11 == 0": {
                    "1": "xor_result1_zero"
                },
                "uVar11 & 1": {
                    "1": "xor_result1_lowest_bit"
                },
                "uVar11 & 0x100": {
                    "1": "xor_result1_bit8"
                },
                "uVar11 & 0x18000": {
                    "1": "xor_result1_bits8and15"
                },
                "pbVar6 + 1": {
                    "1": "next_result_ptr"
                },
                "pbVar8 + 1": {
                    "1": "next_result_ptr"
                },
                "pbVar8 + 2": {
                    "1": "next_result_ptr"
                },
                "pbVar8 - 1": {
                    "1": "result_ptr_minus_1"
                },
                "(int)puVar7 + -1": {
                    "1": "result_ptr_minus_1"
                },
                "uVar13": {
                    "1": "temp_var1"
                },
                "uVar14": {
                    "1": "temp_var2"
                },
                "uVar15": {
                    "1": "temp_var3"
                },
                "uVar16": {
                    "1": "temp_var4"
                }
            }
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculate_result_080002d0(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return combine_results(input2,input1);\n  }\n  result = divide_and_modulo();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "__udivmoddi4": "divide_and_modulo",
                "CONCAT44": "combine_results"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080002d0": {
                    "1": "divide_and_concatenate",
                    "23": "calculate_result"
                },
                "param_1": {
                    "7": "input_1",
                    "3": "input_value_1",
                    "2": "numerator",
                    "1": "input_a",
                    "9": "input1"
                },
                "param_2": {
                    "9": "input2",
                    "2": "input_param_2",
                    "1": "value2",
                    "3": "input_value_2",
                    "7": "input_2"
                },
                "param_3": {
                    "6": "input3",
                    "2": "input_param_3",
                    "1": "num3",
                    "3": "input_value_3"
                },
                "param_4": {
                    "1": "default_denominator",
                    "2": "input_param_4",
                    "6": "input4",
                    "3": "input_value_4"
                },
                "uVar1": {
                    "1": "division_result",
                    "27": "result"
                },
                "__udivmoddi4": {
                    "1": "perform_division",
                    "2": "divide_and_modulo"
                },
                "CONCAT44": {
                    "1": "compose_result"
                }
            }
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper,uint *remainder)\n\n{\n  ulonglong result;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp3;\n  uint temp4;\n  uint temp3;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      shift_amount = leading_zeros(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_upper = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = divisor >> 0x10;\n      temp4 = dividend_upper / temp4;\n      temp3 = dividend >> 0x10 | (dividend_upper - temp4 * temp4) * 0x10000;\n      temp2 = temp4 * (divisor & 0xffff);\n      temp1 = temp4;\n      if (temp3 <= temp2 && temp2 - temp3 != 0) {\n        carry_flag = overflow_check(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp1 = temp4 - 1;\n        if ((carry_flag == false) && (temp3 <= temp2 && temp2 - temp3 != 0)) {\n          temp1 = temp4 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp4 = (temp3 - temp2) / temp4;\n      temp3 = dividend & 0xffff | ((temp3 - temp2) - temp4 * temp4) * 0x10000;\n      temp4 = temp4 * (divisor & 0xffff);\n      temp2 = temp4;\n      if (temp3 <= temp4 && temp4 - temp3 != 0) {\n        carry_flag = overflow_check(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp2 = temp4 - 1;\n        if ((carry_flag == false) && (temp3 <= temp4 && temp4 - temp3 != 0)) {\n          temp2 = temp4 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp3 = temp3 - temp4;\n      temp2 = temp2 | temp1 << 0x10;\n      temp1 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zeros(divisor);\n      if (shift_amount == 0) {\n        dividend_upper = dividend_upper - divisor;\n        temp3 = divisor >> 0x10;\n        temp3 = divisor & 0xffff;\n        temp1 = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp3 = divisor >> 0x10;\n        temp2 = dividend_upper >> (0x20U - shift_amount & 0xff);\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper << shift_amount;\n        temp1 = temp2 / temp3;\n        temp3 = divisor & 0xffff;\n        temp4 = temp3 >> 0x10 | (temp2 - temp3 * temp1) * 0x10000;\n        temp4 = temp1 * temp3;\n        dividend = dividend << shift_amount;\n        temp2 = temp1;\n        if (temp4 <= temp4 && temp4 - temp4 != 0) {\n          carry_flag = overflow_check(temp4,divisor);\n          temp4 = temp4 + divisor;\n          temp2 = temp1 - 1;\n          if ((carry_flag == false) && (temp4 <= temp4 && temp4 - temp4 != 0)) {\n            temp2 = temp1 - 2;\n            temp4 = temp4 + divisor;\n          }\n        }\n        quotient_high = (temp4 - temp4) / temp3;\n        dividend_upper = temp3 & 0xffff | ((temp4 - temp4) - temp3 * quotient_high) * 0x10000;\n        temp4 = quotient_high * temp3;\n        temp1 = quotient_high;\n        if (dividend_upper <= temp4 && temp4 - dividend_upper != 0) {\n          carry_flag = overflow_check(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          temp1 = quotient_high - 1;\n          if ((carry_flag == false) && (dividend_upper <= temp4 && temp4 - dividend_upper != 0)) {\n            temp1 = quotient_high - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp4;\n        temp1 = temp1 | temp2 << 0x10;\n      }\n      temp3 = dividend_upper / temp3;\n      temp4 = dividend >> 0x10 | (dividend_upper - temp3 * temp3) * 0x10000;\n      temp2 = temp3 * temp3;\n      temp4 = temp3;\n      if (temp4 <= temp2 && temp2 - temp4 != 0) {\n        carry_flag = overflow_check(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp4 = temp3 - 1;\n        if ((carry_flag == false) && (temp4 <= temp2 && temp2 - temp4 != 0)) {\n          temp4 = temp3 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp3 = (temp4 - temp2) / temp3;\n      temp3 = dividend & 0xffff | ((temp4 - temp2) - temp3 * temp3) * 0x10000;\n      temp3 = temp3 * temp3;\n      temp2 = temp3;\n      if (temp3 <= temp3 && temp3 - temp3 != 0) {\n        carry_flag = overflow_check(temp3,divisor);\n        temp3 = temp3 + divisor;\n        temp2 = temp3 - 1;\n        if ((carry_flag == false) && (temp3 <= temp3 && temp3 - temp3 != 0)) {\n          temp2 = temp3 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp3 = temp3 - temp3;\n      temp2 = temp2 | temp4 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp3 >> shift_amount;\n      remainder[1] = 0;\n      return CONCAT44(temp1,temp2);\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_upper;\n      return 0;\n    }\n    temp2 = 0;\n    temp1 = 0;\n  }\n  else {\n    shift_amount = leading_zeros(divisor_upper);\n    if (shift_amount != 0) {\n      temp4 = 0x20 - shift_amount;\n      temp1 = divisor >> (temp4 & 0xff) | divisor_upper << shift_amount;\n      temp3 = temp1 >> 0x10;\n      temp2 = dividend_upper >> (temp4 & 0xff);\n      quotient_high = dividend >> (temp4 & 0xff) | dividend_upper << shift_amount;\n      temp3 = temp2 / temp3;\n      temp4 = quotient_high >> 0x10 | (temp2 - temp3 * temp3) * 0x10000;\n      temp3 = temp3 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      temp2 = temp3;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = overflow_check(temp4,temp1);\n        temp4 = temp4 + temp1;\n        temp2 = temp3 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp3 - 2;\n          temp4 = temp4 + temp1;\n        }\n      }\n      temp3 = (temp4 - temp3) / temp3;\n      temp4 = quotient_high & 0xffff | ((temp4 - temp3) - temp3 * temp3) * 0x10000;\n      temp3 = temp3 * (temp1 & 0xffff);\n      temp3 = temp3;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = overflow_check(temp4,temp1);\n        temp4 = temp4 + temp1;\n        temp3 = temp3 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp3 = temp3 - 2;\n          temp4 = temp4 + temp1;\n        }\n      }\n      temp3 = temp3 | temp2 << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp4 - temp3,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_amount);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp2 = ((temp4 - temp3) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = temp2 << (temp4 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = temp2 >> shift_amount;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper = (dividend_upper - divisor_upper) - (uint)carry_flag;\n      temp2 = 1;\n    }\n    else {\n      temp2 = 0;\n    }\n    temp1 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_upper;\n      return (ulonglong)temp2;\n    }\n  }\n  return CONCAT44(temp1,temp2);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "param_5": "remainder",
                "uVar1": "result",
                "uVar2": "quotient_high",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp3",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag",
                "LZCOUNT": "leading_zeros",
                "CARRY4": "overflow_check"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000300": {
                    "1": "compute_division_remainder",
                    "2": "div_with_remainder",
                    "5": "divide_and_remainder",
                    "4": "division_with_remainder",
                    "10": "divide_with_remainder"
                },
                "param_1": {
                    "31": "dividend"
                },
                "param_2": {
                    "8": "dividend_upper",
                    "1": "dividend_rem_high",
                    "2": "quotient_high",
                    "3": "divisor",
                    "7": "dividend_high"
                },
                "param_3": {
                    "1": "divisor_l",
                    "2": "quotient_high",
                    "24": "divisor"
                },
                "param_4": {
                    "1": "remainder_high",
                    "2": "divisor_lower",
                    "6": "divisor_high",
                    "8": "divisor_upper"
                },
                "param_5": {
                    "1": "remainder_high",
                    "5": "remainder_ptr",
                    "12": "remainder",
                    "4": "quotient"
                },
                "uVar1": {
                    "1": "remainder_high1",
                    "5": "quotient_low",
                    "15": "result",
                    "7": "quotient"
                },
                "uVar2": {
                    "1": "quotient_low",
                    "6": "quotient_high",
                    "2": "temp_1",
                    "5": "temp1"
                },
                "uVar3": {
                    "1": "quotient_low_temp",
                    "4": "temp1",
                    "2": "quotient_low"
                },
                "uVar4": {
                    "1": "divisor_middle",
                    "2": "quotient_low",
                    "4": "temp2",
                    "3": "quotient_upper"
                },
                "uVar5": {
                    "1": "u_var5",
                    "2": "temp1",
                    "4": "temp3"
                },
                "uVar6": {
                    "1": "remainder_lower_half",
                    "2": "temp1",
                    "3": "temp4"
                },
                "uVar7": {
                    "1": "tmp_div_high",
                    "3": "temp3"
                },
                "uVar8": {
                    "1": "quotient_temp3",
                    "3": "temp4",
                    "2": "temp6"
                },
                "uVar9": {
                    "1": "remainder_low",
                    "2": "temp7",
                    "3": "temp4"
                },
                "iVar10": {
                    "1": "l_z_count",
                    "6": "shift_count",
                    "3": "shift"
                },
                "bVar11": {
                    "5": "carry",
                    "1": "is_carry",
                    "19": "carry_flag"
                },
                "uVar12": {
                    "1": "temp_10"
                },
                "uVar10": {
                    "1": "temp_8",
                    "2": "temp5"
                },
                "LZCOUNT": {
                    "1": "leading_zeros"
                },
                "uVar11": {
                    "1": "temp_9"
                },
                "bVar13": {
                    "1": "carry"
                },
                "iVar14": {
                    "1": "shift"
                },
                "iVar11": {
                    "1": "shift_count"
                },
                "bVar12": {
                    "2": "carry_flag"
                },
                "CARRY4": {
                    "1": "carry_flag_check"
                }
            }
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_software_interrupt_080005e0",
            "code": "\nvoid execute_software_interrupt_080005e0(void)\n\n{\n  invoke_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0",
                "software_interrupt": "invoke_interrupt"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005e0": {
                    "2": "execute_system_call",
                    "1": "system_call",
                    "6": "execute_software_interrupt",
                    "5": "invoke_system_interrupt"
                },
                "software_interrupt": {
                    "1": "system_call",
                    "3": "trigger_interrupt",
                    "5": "invoke_interrupt",
                    "2": "call_interrupt"
                },
                "0x3f": {
                    "1": "interrupt_id"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                }
            }
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_afl_call_080005e4",
            "code": "\nundefined4 execute_afl_call_080005e4(undefined4 input_param,undefined4 unused_param,undefined4 unused_param2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = aflCall(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_afl_call_080005e4",
                "param_1": "input_param",
                "param_4": "output_param",
                "uVar1": "result",
                "param_2": "unused_param",
                "param_3": "unused_param2"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080005e4": {
                    "1": "calculate_result",
                    "4": "call_afl_function",
                    "14": "execute_afl_call",
                    "3": "afl_call_wrapper"
                },
                "param_1": {
                    "3": "input1",
                    "2": "input_1",
                    "1": "input_data",
                    "11": "input_param"
                },
                "param_4": {
                    "2": "output",
                    "1": "other_parameter",
                    "10": "output_param",
                    "3": "input4"
                },
                "uVar1": {
                    "2": "afl_result",
                    "14": "result"
                },
                "param_2": {
                    "1": "second_parameter",
                    "2": "input2",
                    "4": "unused_param"
                },
                "param_3": {
                    "1": "input3",
                    "3": "unused_param2"
                },
                "DAT_20000120": {
                    "1": "data_check_flag"
                }
            }
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_device_08000600",
            "code": "\nvoid initialize_device_08000600(int **device,undefined4 param)\n\n{\n  char device_type;\n  int return_value;\n  \n  device_type = *(char *)((int)device + 5);\n  if (device_type == '\\x02') {\n    *device = &DAT_20000338;\n  }\n  else if (device_type == '\\x03') {\n    *device = &DAT_20000338;\n  }\n  else if (device_type == '\\x01') {\n    *device = &DAT_20000338;\n  }\n  else {\n    *device = &DAT_20000338;\n  }\n  start_device(*device,param,6);\n  if (1 < *(byte *)((int)device + 6)) {\n    set_pin_mode(*(byte *)((int)device + 6),1);\n    write_to_pin(*(undefined *)((int)device + 6),0);\n  }\n  do {\n    return_value = (**(code **)(**device + 0xc))();\n  } while (-1 < return_value);\n  *(undefined *)((int)device + 0x49) = 0;\n  *(undefined *)((int)device + 0x4a) = 0;\n  *(undefined2 *)(device + 0x15) = 0;\n  *(undefined2 *)((int)device + 0x52) = 0;\n  *(undefined2 *)(device + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_device_08000600",
                "param_1": "device",
                "param_2": "param",
                "cVar1": "device_type",
                "iVar2": "return_value",
                "begin": "start_device",
                "digitalWrite": "write_to_pin",
                "pinMode": "set_pin_mode"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000600": {
                    "1": "configure_param_and_execute",
                    "4": "initialize_hardware",
                    "22": "initialize_device"
                },
                "param_1": {
                    "3": "device_config",
                    "1": "device_params",
                    "6": "device_data",
                    "2": "device_ptr"
                },
                "param_2": {
                    "3": "param2",
                    "2": "parameter",
                    "1": "config_param",
                    "16": "param"
                },
                "cVar1": {
                    "2": "char_value",
                    "1": "device_status",
                    "14": "device_type",
                    "5": "status"
                },
                "iVar2": {
                    "14": "result",
                    "1": "result_code"
                },
                "FUN_080041bc": {
                    "1": "setup_device",
                    "2": "perform_operation_a"
                },
                "FUN_08004110": {
                    "2": "start_device",
                    "1": "configure_port"
                },
                "FUN_08004388": {
                    "1": "digital_write",
                    "2": "configure_pin",
                    "5": "set_pin_mode"
                },
                "param_4": {
                    "1": "data"
                },
                "param_3": {
                    "1": "pin"
                },
                "begin": {
                    "1": "operation",
                    "2": "start_device"
                },
                "digitalWrite": {
                    "1": "write_digital_pin",
                    "2": "write_to_pin"
                },
                "pinMode": {
                    "2": "set_pin_mode"
                }
            }
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "update_data_0800066c",
            "code": "\nvoid update_data_0800066c(int data_pointer,unknown new_value,int limit,unknown additional_data)\n\n{\n  *(unknown *)(data_pointer + 4) = new_value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(byte *)(data_pointer + 5) = (byte)limit;\n  *(unknown *)(data_pointer + 6) = additional_data;\n  *(unknown2 *)(data_pointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "update_data_0800066c",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "param_3": "limit",
                "param_4": "additional_data",
                "undefined": "unknown",
                "char": "byte"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800066c": {
                    "3": "set_params",
                    "1": "set_data",
                    "2": "write_data_to_memory",
                    "4": "initialize_data",
                    "8": "update_data"
                },
                "param_1": {
                    "1": "buffer",
                    "6": "data_ptr",
                    "10": "data_pointer",
                    "4": "data_address"
                },
                "param_2": {
                    "2": "data",
                    "12": "new_value",
                    "1": "data_value",
                    "10": "value",
                    "3": "value1"
                },
                "param_3": {
                    "1": "value_limit",
                    "3": "value2",
                    "4": "size",
                    "16": "limit"
                },
                "param_4": {
                    "2": "new_data",
                    "1": "other_param",
                    "7": "additional_data",
                    "3": "param"
                },
                "param_5": {
                    "1": "optional_value"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data_ptr_offset_4"
                },
                "*(char *)(param_1 + 5)": {
                    "1": "data_pointer[5]"
                },
                "*(undefined *)(param_1 + 6)": {
                    "1": "data_ptr_offset_6"
                },
                "*(undefined2 *)(param_1 + 0x56)": {
                    "1": "data_pointer[86]"
                },
                "PTR": {
                    "1": "pointer"
                },
                "DAT": {
                    "1": "data"
                },
                "undefined": {
                    "1": "unknown"
                },
                "param_1 + 4": {
                    "1": "next_memory_address",
                    "2": "data_pointer"
                },
                "param_1 + 5": {
                    "1": "ptr_to_limit"
                },
                "param_1 + 6": {
                    "1": "metadata_pointer"
                },
                "param_1 + 0x56": {
                    "2": "constant_value",
                    "1": "ptr_to_constant"
                },
                "char": {
                    "1": "byte"
                },
                "1000": {
                    "1": "default_timeout"
                }
            }
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "update_data_08000682",
            "code": "\nundefined4 update_data_08000682(undefined4 data)\n\n{\n  update_data_08000682();\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08000682": "update_data_08000682",
                "param_1": "data",
                "update_data_0800066c": "update_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000682": {
                    "1": "update_param_1",
                    "3": "update_data_and_return",
                    "5": "update_and_return_value",
                    "2": "update_param",
                    "4": "update_and_return",
                    "9": "update_data"
                },
                "param_1": {
                    "2": "param",
                    "8": "data",
                    "1": "value_to_update",
                    "4": "input_param"
                },
                "update_data_0800066c": {
                    "1": "update_data_helper",
                    "21": "update_data"
                },
                "data_pointer": {
                    "1": "ptr_data",
                    "2": "data_ptr"
                },
                "unknown": {
                    "1": "data_type"
                },
                "new_value": {
                    "5": "value",
                    "1": "new_data"
                },
                "limit": {
                    "5": "data_limit",
                    "1": "maximum_limit"
                },
                "additional_data": {
                    "1": "data",
                    "6": "extra_data"
                },
                "unknown new_value": {
                    "1": "value"
                },
                "unknown additional_data": {
                    "1": "extra_data"
                }
            }
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "process_modbus_data_08000690",
            "code": "\nvoid process_modbus_data_08000690(int status,int value,undefined4 unused_param_1,undefined4 data)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    send_modbus_request(&DAT_20000124,1,0,0,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "process_modbus_data_08000690",
                "param_1": "status",
                "param_2": "value",
                "param_3": "unused_param_1",
                "param_4": "data",
                "Modbus": "send_modbus_request"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000690": {
                    "2": "process_param",
                    "1": "process_modbus_response",
                    "3": "check_and_execute_modbus",
                    "5": "handle_modbus_request",
                    "12": "process_modbus_data"
                },
                "param_1": {
                    "2": "condition",
                    "1": "command_number",
                    "3": "request_type",
                    "13": "status"
                },
                "param_2": {
                    "1": "value2",
                    "2": "error_code",
                    "15": "value",
                    "3": "modbus_value"
                },
                "param_3": {
                    "2": "param_3",
                    "3": "unused_param_1",
                    "1": "value3"
                },
                "param_4": {
                    "6": "data",
                    "1": "result",
                    "2": "modbus_address",
                    "3": "unused_param_2"
                },
                "Modbus": {
                    "1": "execute_modbus_request",
                    "3": "send_modbus_data",
                    "4": "send_modbus_request",
                    "2": "execute_modbus"
                },
                "FUN_08000682": {
                    "1": "initialize_modbus"
                },
                "DAT_20000124": {
                    "1": "modbus_data"
                }
            }
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint process_data_080006b4(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  int result;\n  byte index;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    disable_pin(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    is_overflow = false;\n    while (result = (**(function_ptr **)(**data + 8))(), result != 0) {\n      index = *(byte *)((int)data + 0x49);\n      result = (**(function_ptr **)(**data + 0xc))();\n      *(undefined *)((int)data + index + 9) = result;\n      index = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = index;\n      if (0x3f < index) {\n        is_overflow = true;\n      }\n    }\n  }\n  else {\n    is_overflow = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "result",
                "iVar3": "result",
                "bVar4": "index",
                "digitalWrite": "disable_pin",
                "code": "function_ptr"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080006b4": {
                    "1": "reverse_and_update_data",
                    "21": "process_data"
                },
                "param_1": {
                    "1": "input_data",
                    "14": "data",
                    "7": "data_ptr",
                    "2": "param1"
                },
                "bVar1": {
                    "1": "exceed_limit",
                    "9": "is_full",
                    "3": "exceeded_limit",
                    "12": "is_overflow"
                },
                "uVar2": {
                    "1": "new_data",
                    "3": "return_value",
                    "6": "value",
                    "2": "data_value",
                    "12": "result",
                    "4": "byte_value"
                },
                "iVar3": {
                    "10": "return_value",
                    "1": "result_code",
                    "3": "status",
                    "11": "result"
                },
                "bVar4": {
                    "1": "byte_value",
                    "4": "byte_count",
                    "2": "current_index",
                    "9": "index"
                },
                "FUN_080041bc": {
                    "1": "process_input_data",
                    "2": "sub_function",
                    "6": "process_sub_function"
                },
                "digitalWrite": {
                    "1": "turn_off_pin"
                },
                "param_2": {
                    "3": "param2",
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_2",
                    "3": "param3"
                },
                "param_4": {
                    "1": "param_3",
                    "3": "param4"
                },
                "code": {
                    "1": "function_ptr"
                },
                "**param_1": {
                    "1": "dereference_param_pointer"
                },
                "*(byte *)(paramPointer + 6)": {
                    "1": "byte_value"
                },
                "**(code **)(**param_1 + 8)": {
                    "1": "function_pointer1"
                },
                "**(code **)(**param_1 + 0xc)": {
                    "1": "function_pointer2"
                },
                "*(byte *)(paramPointer + 0x49)": {
                    "1": "byte_value2"
                },
                "*(char *)(paramPointer + 0x49)": {
                    "1": "char_value"
                }
            }
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculate_checksum_08000728(int data_address,int data_length)\n\n{\n  byte bit_index;\n  uint checksum;\n  uint bit;\n  uint i;\n  \n  checksum = 0xffff;\n  for (i = 0; (int)i < data_length; i = i + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data_address + i + 9);\n    for (bit_index = 1; bit_index < 9; bit_index = bit_index + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "i",
                "bVar1": "bit_index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000728": {
                    "5": "calculate_crc16",
                    "1": "crc16",
                    "2": "crc16_checksum",
                    "17": "calculate_checksum"
                },
                "param_1": {
                    "1": "data_start_index",
                    "5": "data_start_address",
                    "4": "data_start",
                    "16": "data_address"
                },
                "param_2": {
                    "3": "data_size",
                    "25": "data_length",
                    "1": "message_length"
                },
                "uVar2": {
                    "1": "xor_result",
                    "4": "crc",
                    "2": "crc_result",
                    "5": "crc_value",
                    "19": "checksum"
                },
                "uVar3": {
                    "2": "lsb",
                    "1": "is_lsb_set",
                    "4": "bit_value",
                    "20": "bit"
                },
                "uVar4": {
                    "1": "byte_index",
                    "15": "index"
                },
                "bVar1": {
                    "7": "bit_counter",
                    "1": "bit_count",
                    "10": "bit_index",
                    "3": "j",
                    "4": "bit"
                }
            }
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_and_send_data_0800076c",
            "code": "\nvoid update_and_send_data_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 crc_value;\n  int result;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  crc_value = calculate_crc(data,index,param3,param4,param4);\n  *(char *)((int)data + index + 9) = (char)((ushort)crc_value >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)crc_value;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    set_pin_state(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    set_pin_state(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = get_current_time();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_and_send_data_0800076c",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "crc_value",
                "iVar2": "result",
                "uVar3": "index",
                "calcCRC": "calculate_crc",
                "digitalWrite": "set_pin_state",
                "millis": "get_current_time"
            },
            "calling": [
                "FUN_08000998",
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000a00",
                "FUN_08000b04",
                "FUN_080008e2"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800076c": {
                    "1": "calculate_crc_and_set_values",
                    "2": "update_data_and_perform_operations"
                },
                "param_1": {
                    "25": "data",
                    "1": "param"
                },
                "param_2": {
                    "18": "param2",
                    "1": "crc_param",
                    "2": "value1",
                    "5": "param1"
                },
                "param_3": {
                    "1": "arg2",
                    "5": "param2",
                    "18": "param3",
                    "2": "value2"
                },
                "param_4": {
                    "1": "arg3",
                    "18": "param4",
                    "5": "param3",
                    "2": "value3"
                },
                "uVar1": {
                    "7": "crc_result",
                    "5": "calculated_crc",
                    "1": "calc_crc_value",
                    "10": "crc_value"
                },
                "iVar2": {
                    "2": "status",
                    "1": "temp_variable",
                    "20": "result"
                },
                "uVar3": {
                    "1": "crc_value",
                    "2": "data_length",
                    "3": "byte_value",
                    "13": "index"
                },
                "calcCRC": {
                    "1": "calculate_checksum",
                    "16": "calculate_crc"
                },
                "digitalWrite": {
                    "1": "toggle_pin_state",
                    "4": "set_digital_output",
                    "2": "set_pin",
                    "6": "set_pin_state"
                },
                "millis": {
                    "2": "get_milliseconds",
                    "1": "get_millis",
                    "10": "get_current_time",
                    "5": "current_millis"
                },
                "FUN_080041bc": {
                    "1": "calculate_checksum"
                },
                "FUN_08000728": {
                    "1": "get_data"
                },
                "FUN_08004204": {
                    "1": "reset"
                },
                "*(char *)((int)param_1 + uVar3 + 9)": {
                    "1": "checksum_byte2"
                },
                "*(char *)((int)param_1 + 0x49)": {
                    "1": "checksum_index"
                },
                "*(byte *)((int)param_1 + 6)": {
                    "1": "digital_pin"
                },
                "*(byte *)((int)param_1 + 5)": {
                    "1": "threshold"
                },
                "(int)param_1 + 9": {
                    "1": "offset"
                },
                "(int)param_1 + 0x49": {
                    "1": "index_offset"
                },
                "(int)param_1 + 6": {
                    "1": "digital_pin_offset"
                },
                "(int)param_1 + 5": {
                    "1": "threshold_offset"
                },
                "(int)param_1 + 0x56": {
                    "1": "time_offset"
                },
                "(int)param_1 + 0x52": {
                    "1": "count_offset"
                }
            }
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_condition_080007f0",
            "code": "\nundefined4 check_condition_080007f0(int input,undefined4 value,uint value,undefined4 param4)\n\n{\n  bool is_match;\n  byte result;\n  char result1;\n  char result2;\n  int value1;\n  uint counter;\n  int value2;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n        return 1;\n      }\n      value2 = *(byte *)(input + 10) - 1;\n      switch(*(byte *)(input + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switch_case1_result;\n      case 3:\n      case 4:\n      case 0x10:\n        result1 = combine_bytes(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,value2,\n                         param4);\n        result2 = combine_bytes(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n        if (*(byte *)(input + 0x60) < (byte)(result2 + result1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        value2 = combine_bytes(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,value2,\n                         param4);\n        if ((uint)*(byte *)(input + 0x60) < (uint)(value2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = combine_bytes(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,value2,\n                         param4);\n        if (*(byte *)(input + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(input + 10);\n    if ((byte)(&DAT_08005a10)[counter] == value) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitch_case1_result:\n  value2 = combine_bytes(*(undefined *)(input + 0xb),*(undefined *)(input + 0xc),value,value2,param4\n                  );\n  value1 = combine_bytes(*(undefined *)(input + 0xd),*(undefined *)(input + 0xe));\n  if ((uint)*(byte *)(input + 0x60) <\n      (((uint)(value2 << 0xc) >> 0x10) + ((uint)(value1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_condition_080007f0",
                "param_1": "input",
                "param_2": "value",
                "param_3": "value",
                "param_4": "param4",
                "bVar1": "is_match",
                "bVar2": "result",
                "cVar3": "result1",
                "cVar4": "result2",
                "iVar5": "value1",
                "uVar6": "counter",
                "iVar7": "value2",
                "switchD_08000816_caseD_1": "switch_case1_result",
                "makeWord": "combine_bytes"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080007f0": {
                    "2": "check_validity",
                    "1": "perform_operation",
                    "6": "check_conditions",
                    "7": "check_condition"
                },
                "param_1": {
                    "13": "input",
                    "2": "data",
                    "1": "input_param",
                    "3": "input_data"
                },
                "param_2": {
                    "4": "flag",
                    "5": "param2",
                    "1": "config_data",
                    "2": "param",
                    "9": "value"
                },
                "param_3": {
                    "1": "user_input",
                    "3": "data",
                    "6": "value"
                },
                "param_4": {
                    "3": "data",
                    "1": "result",
                    "2": "index",
                    "6": "param4"
                },
                "bVar1": {
                    "3": "is_matched",
                    "5": "found_match",
                    "2": "is_valid",
                    "4": "condition_met",
                    "1": "is_matching",
                    "7": "is_match"
                },
                "bVar2": {
                    "1": "word",
                    "2": "byte_value",
                    "17": "result"
                },
                "cVar3": {
                    "2": "first_byte",
                    "1": "char_result1",
                    "3": "word1",
                    "4": "first_char",
                    "8": "result1"
                },
                "cVar4": {
                    "1": "value2",
                    "2": "result_2",
                    "4": "second_char",
                    "8": "result2",
                    "3": "word2"
                },
                "iVar5": {
                    "4": "first_value",
                    "1": "temp1",
                    "2": "word1",
                    "5": "value1"
                },
                "uVar6": {
                    "1": "count",
                    "3": "i",
                    "15": "counter",
                    "2": "loop_index",
                    "9": "index"
                },
                "iVar7": {
                    "4": "second_value",
                    "1": "result",
                    "5": "value2",
                    "2": "result2"
                },
                "switchD_08000816_caseD_1": {
                    "1": "switch_case1_result"
                },
                "makeWord": {
                    "1": "combine_bytes"
                }
            }
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copy_and_modify_data_080008cc(int data_address,undefined new_value)\n\n{\n  *(undefined *)(data_address + 9) = *(undefined *)(data_address + 4);\n  *(byte_value *)(data_address + 10) = *(byte_value *)(data_address + 10) ^ 0x80;\n  *(undefined *)(data_address + 0xb) = new_value;\n  *(undefined *)(data_address + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "data_address",
                "param_2": "new_value",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080008cc": {
                    "1": "copy_and_toggle_byte",
                    "2": "copy_data_and_toggle_flag",
                    "17": "copy_and_modify_data"
                },
                "param_1": {
                    "1": "target_address",
                    "2": "data_offset",
                    "3": "data_pointer",
                    "4": "source_address",
                    "7": "data_address"
                },
                "param_2": {
                    "2": "source_value",
                    "15": "new_value",
                    "1": "source_byte",
                    "3": "value",
                    "4": "new_data"
                },
                "9": {
                    "1": "destination_offset",
                    "3": "destination_address"
                },
                "4": {
                    "1": "original_value"
                },
                "10": {
                    "2": "flag_address",
                    "1": "xor_index"
                },
                "0xb": {
                    "1": "value_address",
                    "2": "new_value_address"
                },
                "0x49": {
                    "1": "flag_value",
                    "3": "constant_value"
                },
                "3": {
                    "1": "modified_value"
                },
                "*(undefined *)(param_1 + 9)": {
                    "2": "data_copy",
                    "1": "copied_value"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "data_source",
                    "2": "source"
                },
                "*(byte *)(param_1 + 10)": {
                    "1": "original_bitwise_data",
                    "2": "byte_value"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "new_byte",
                    "2": "new_value_address"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "flag_value",
                    "4": "constant_value"
                },
                "param_1 + 9": {
                    "1": "destination",
                    "2": "destination_address"
                },
                "param_1 + 4": {
                    "1": "source_address"
                },
                "param_1 + 10": {
                    "1": "byte_to_mask"
                },
                "param_1 + 0xb": {
                    "1": "new_value_address"
                },
                "param_1 + 0x49": {
                    "1": "constant"
                },
                "param_3": {
                    "1": "src"
                },
                "param_4": {
                    "1": "unused_param2"
                },
                "byte": {
                    "1": "byte_value"
                },
                "sourceAddress": {
                    "1": "source_addr"
                },
                "newValue": {
                    "1": "new_val"
                },
                "byteValue": {
                    "1": "byte_val"
                },
                "param_5": {
                    "1": "return_address",
                    "2": "constant"
                },
                "param_6": {
                    "1": "new_data_index"
                },
                "temp_1": {
                    "1": "temp_byte"
                },
                "destinationAddress": {
                    "1": "result_address"
                },
                "sourceValue": {
                    "1": "value_to_copy"
                },
                "flagAddress": {
                    "1": "flag_value"
                },
                "extraDataAddress": {
                    "1": "extra_data_value"
                },
                "constantAddress": {
                    "1": "constant_value"
                },
                "param_7": {
                    "1": "byte_value_to_xor"
                }
            }
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint process_data_080008e2(int data_buffer,int data,undefined4 param3,undefined4 param4)\n\n{\n  int word_value;\n  uint word_value2;\n  uint index;\n  uint bit_index;\n  char bit_value;\n  int address;\n  \n  word_value = combine_bytes(*(undefined *)(data_buffer + 0xb),*(undefined *)(data_buffer + 0xc),param3,param4,\n                   param4);\n  word_value2 = combine_bytes(*(undefined *)(data_buffer + 0xd),*(undefined *)(data_buffer + 0xe));\n  bit_value = (char)((word_value2 << 0x15) >> 0x18);\n  if ((word_value2 & 7) != 0) {\n    bit_value = bit_value + '\\x01';\n  }\n  *(char *)(data_buffer + 0xb) = bit_value;\n  *(undefined *)(data_buffer + 0x49) = 3;\n  bit_index = 0;\n  for (index = 0; (int)index < (int)word_value2; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(data + ((index + word_value) * 0x100000 >> 0x18) * 2) >>\n         (index + word_value & 0xf) & 1U) == 0) {\n      address = (uint)*(byte *)(data_buffer + 0x49) + data_buffer;\n      *(byte *)(address + 9) = *(byte *)(address + 9) & ~(byte)(1 << bit_index);\n    }\n    else {\n      address = (uint)*(byte *)(data_buffer + 0x49) + data_buffer;\n      *(byte *)(address + 9) = *(byte *)(address + 9) | (byte)(1 << bit_index);\n    }\n    bit_index = bit_index + 1 & 0xff;\n    if (7 < bit_index) {\n      *(char *)(data_buffer + 0x49) = *(char *)(data_buffer + 0x49) + '\\x01';\n      bit_index = 0;\n    }\n  }\n  if ((word_value2 & 7) != 0) {\n    *(char *)(data_buffer + 0x49) = *(char *)(data_buffer + 0x49) + '\\x01';\n  }\n  bit_value = *(char *)(data_buffer + 0x49);\n  send_transmission_buffer(data_buffer);\n  return (int)(char)(bit_value + '\\x02');\n}\n\n",
            "renaming": {
                "param_1": "data_buffer",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "word_value",
                "uVar2": "word_value2",
                "uVar3": "index",
                "uVar4": "bit_index",
                "cVar5": "bit_value",
                "iVar6": "address",
                "FUN_080008e2": "process_data_080008e2",
                "sendTxBuffer": "send_transmission_buffer",
                "makeWord": "combine_bytes"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "3": "input_data",
                    "1": "data_pointer",
                    "6": "data_buffer",
                    "4": "data_ptr",
                    "5": "buffer",
                    "2": "data_address"
                },
                "param_2": {
                    "5": "lookup_table",
                    "7": "data",
                    "3": "buffer",
                    "2": "buffer_address",
                    "1": "buffer_pointer",
                    "4": "buffer_ptr"
                },
                "param_3": {
                    "3": "param_3",
                    "1": "var3",
                    "5": "param1",
                    "22": "param3"
                },
                "param_4": {
                    "5": "param2",
                    "22": "param4",
                    "1": "var4",
                    "3": "param_4"
                },
                "iVar1": {
                    "2": "word_index",
                    "6": "word1",
                    "1": "word_value1",
                    "11": "word_value",
                    "3": "word_result",
                    "4": "word"
                },
                "uVar2": {
                    "1": "num_words",
                    "3": "word_value",
                    "10": "word_value2"
                },
                "uVar3": {
                    "2": "loop_index",
                    "1": "counter1",
                    "7": "counter",
                    "14": "index"
                },
                "uVar4": {
                    "9": "bit_counter",
                    "1": "bit_count",
                    "18": "bit_index"
                },
                "cVar5": {
                    "1": "bit",
                    "6": "shifted_byte",
                    "4": "shifted_value",
                    "12": "bit_value"
                },
                "iVar6": {
                    "5": "address",
                    "2": "index",
                    "1": "temp2",
                    "3": "byte_index",
                    "4": "offset"
                },
                "FUN_08004640": {
                    "6": "make_word"
                },
                "FUN_0800076c": {
                    "6": "send_tx_buffer"
                },
                "FUN_080008e2": {
                    "1": "improve_code",
                    "10": "process_data",
                    "2": "update_data"
                },
                "sendTxBuffer": {
                    "1": "send_transmission_buffer"
                },
                "makeWord": {
                    "1": "combine_bytes"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "byte1"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "byte2"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "byte3"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "byte4"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "byte_value"
                },
                "*(char *)(param_1 + 0xb)": {
                    "1": "updated_byte1"
                },
                "*(byte *)(iVar6 + 9)": {
                    "1": "updated_byte"
                },
                "*(ushort *)(param_2 + ((uVar3 + iVar1) * 0x100000 >> 0x18) * 2)": {
                    "1": "buffer_value"
                },
                "*(char *)(param_1 + 0x49)": {
                    "1": "updated_byte_value"
                }
            }
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data_buffer,int buffer,undefined4 param3,undefined4 param4)\n\n{\n  byte byte_var1;\n  char temp_char;\n  byte word1;\n  byte word2;\n  uint counter;\n  uint next_index;\n  \n  word1 = combine_bytes(*(undefined *)(data_buffer + 0xb),*(undefined *)(data_buffer + 0xc),param3,param4,\n                   param4);\n  word2 = combine_bytes(*(undefined *)(data_buffer + 0xd),*(undefined *)(data_buffer + 0xe));\n  *(byte *)(data_buffer + 0xb) = word2 << 1;\n  *(undefined *)(data_buffer + 0x49) = 3;\n  for (counter = (uint)word1; counter < (uint)word1 + (uint)word2; counter = counter + 1 & 0xff) {\n    byte_var1 = *(byte *)(data_buffer + 0x49);\n    *(char *)(data_buffer + (uint)byte_var1 + 9) = (char)((ushort)*(undefined2 *)(buffer + counter * 2) >> 8)\n    ;\n    next_index = byte_var1 + 1 & 0xff;\n    temp_char = (char)next_index;\n    *(char *)(data_buffer + 0x49) = temp_char;\n    *(undefined *)(data_buffer + next_index + 9) = *(undefined *)(buffer + counter * 2);\n    *(char *)(data_buffer + 0x49) = temp_char + '\\x01';\n  }\n  temp_char = *(char *)(data_buffer + 0x49);\n  transmit_buffer(data_buffer);\n  return (int)(char)(temp_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_buffer",
                "param_2": "buffer",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byte_var1",
                "cVar2": "temp_char",
                "bVar3": "word1",
                "bVar4": "word2",
                "uVar5": "counter",
                "uVar6": "next_index",
                "makeWord": "combine_bytes",
                "sendTxBuffer": "transmit_buffer"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000998": {
                    "1": "update_buffer_with_values",
                    "3": "extract_and_send_data",
                    "13": "process_data",
                    "2": "reverse_and_send_buffer"
                },
                "param_1": {
                    "4": "input_buffer",
                    "5": "buffer",
                    "1": "data_address",
                    "6": "data_buffer",
                    "3": "buffer_address"
                },
                "param_2": {
                    "1": "data_buffer_ptr",
                    "4": "data_address",
                    "2": "source_buffer",
                    "5": "buffer",
                    "3": "input_data"
                },
                "param_3": {
                    "18": "param3",
                    "1": "parameter3",
                    "2": "param_a",
                    "5": "param_3"
                },
                "param_4": {
                    "2": "value2",
                    "18": "param4",
                    "1": "val2",
                    "5": "param_4"
                },
                "bVar1": {
                    "1": "byte_val",
                    "2": "counter",
                    "4": "temp_byte",
                    "9": "byte_var1",
                    "3": "index",
                    "5": "byte_value"
                },
                "cVar2": {
                    "1": "current_index",
                    "5": "char_value",
                    "8": "temp_char",
                    "2": "char_val",
                    "3": "char_var2",
                    "4": "char_var1"
                },
                "bVar3": {
                    "1": "header",
                    "12": "word1",
                    "4": "byte_var2",
                    "5": "byte_var3",
                    "2": "first_byte"
                },
                "bVar4": {
                    "1": "byte_param",
                    "12": "word2",
                    "5": "byte_var4",
                    "2": "second_byte",
                    "4": "byte_var3"
                },
                "uVar5": {
                    "1": "count_var",
                    "3": "index",
                    "2": "uint_var5",
                    "6": "counter",
                    "5": "loop_index"
                },
                "uVar6": {
                    "1": "updated_buffer_index",
                    "2": "temp_counter",
                    "3": "new_index",
                    "8": "next_index"
                },
                "makeWord": {
                    "2": "combine_bytes"
                },
                "sendTxBuffer": {
                    "1": "send_transmit_buffer",
                    "2": "transmit_buffer"
                }
            }
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_bit_in_buffer_08000a00",
            "code": "\nundefined4 update_bit_in_buffer_08000a00(int buffer_address,int buffer_ptr,undefined4 param3,undefined4 param4)\n\n{\n  uint word;\n  uint index;\n  \n  word = create_word(*(undefined *)(buffer_address + 0xb),*(undefined *)(buffer_address + 0xc),param3,param4,\n                   param4);\n  index = (word << 0x14) >> 0x18;\n  if (*(char *)(buffer_address + 0xd) == -1) {\n    *(ushort *)(buffer_ptr + index * 2) =\n         (ushort)(1 << (word & 0xf)) | *(ushort *)(buffer_ptr + index * 2);\n  }\n  else {\n    *(ushort *)(buffer_ptr + index * 2) =\n         *(ushort *)(buffer_ptr + index * 2) & ~(ushort)(1 << (word & 0xf));\n  }\n  *(undefined *)(buffer_address + 0x49) = 6;\n  transmit_buffer(buffer_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_bit_in_buffer_08000a00",
                "param_1": "buffer_address",
                "param_2": "buffer_ptr",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "word",
                "uVar2": "index",
                "sendTxBuffer": "transmit_buffer",
                "makeWord": "create_word"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a00": {
                    "1": "update_data_and_send",
                    "5": "update_tx_buffer",
                    "4": "update_bit",
                    "7": "update_bit_in_buffer",
                    "2": "update_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "3": "data_pointer",
                    "2": "input_address",
                    "9": "buffer_address"
                },
                "param_2": {
                    "3": "buffer_address",
                    "2": "buffer",
                    "4": "buffer_pointer",
                    "1": "output_buffer"
                },
                "param_3": {
                    "1": "byte_data",
                    "16": "param3",
                    "3": "value1",
                    "2": "param_a"
                },
                "param_4": {
                    "1": "flag2",
                    "16": "param4",
                    "2": "param_b",
                    "3": "value2"
                },
                "uVar1": {
                    "2": "combined_value",
                    "1": "word_from_buffer",
                    "11": "word_value",
                    "15": "word"
                },
                "uVar2": {
                    "10": "shifted_value",
                    "1": "shift_count",
                    "4": "shifted_index"
                },
                "PTR_FUN_08004640": {
                    "1": "shift_bits"
                },
                "PTR_FUN_0800076c": {
                    "1": "send_buffer"
                },
                "sendTxBuffer": {
                    "2": "transmit_data",
                    "1": "send_transmission_buffer",
                    "3": "transmit_buffer"
                },
                "*(undefined *)(param_1 + 0xb)": {
                    "1": "value1",
                    "2": "byte1"
                },
                "*(undefined *)(param_1 + 0xc)": {
                    "1": "value2",
                    "2": "byte2"
                },
                "*(char *)(param_1 + 0xd)": {
                    "1": "byte3_value"
                },
                "*(ushort *)(param_2 + uVar2 * 2)": {
                    "2": "buffer_value",
                    "1": "current_value"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "buffer_status"
                },
                "param_2 + uVar2 * 2": {
                    "1": "buffer_offset"
                },
                "(1 << (uVar1 & 0xf))": {
                    "1": "mask"
                },
                "return 8": {
                    "1": "return_value"
                },
                "FUN_08004640": {
                    "2": "make_word"
                },
                "FUN_0800076c": {
                    "2": "send_tx_buffer"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "flag"
                },
                "makeWord": {
                    "1": "create_word"
                },
                "DAT_08000a00": {
                    "1": "constant_6"
                },
                "param_1 + 0xb": {
                    "1": "byte1_addr"
                },
                "param_1 + 0xc": {
                    "1": "byte2_addr"
                },
                "*(ushort *)(param_2 + uVar2 * 2) & ~(ushort)(1 << (uVar1 & 0xf))": {
                    "1": "updated_buffer_value"
                }
            }
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_tx_buffer_08000a4e",
            "code": "\nundefined4 update_tx_buffer_08000a4e(int buffer_address,int tx_buffer_address)\n\n{\n  byte word1;\n  undefined2 word2;\n  \n  word1 = makeWord(*(undefined *)(buffer_address + 0xb),*(undefined *)(buffer_address + 0xc));\n  word2 = makeWord(*(undefined *)(buffer_address + 0xd),*(undefined *)(buffer_address + 0xe));\n  *(undefined2 *)(tx_buffer_address + (uint)word1 * 2) = word2;\n  *(undefined *)(buffer_address + 0x49) = 6;\n  send_buffer(buffer_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_tx_buffer_08000a4e",
                "param_1": "buffer_address",
                "param_2": "tx_buffer_address",
                "bVar1": "word1",
                "uVar2": "word2",
                "sendTxBuffer": "send_buffer"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a4e": {
                    "18": "update_tx_buffer",
                    "1": "process_and_send_data",
                    "2": "extract_and_send_data"
                },
                "param_1": {
                    "2": "source_buffer",
                    "1": "input_data",
                    "11": "buffer_address"
                },
                "param_2": {
                    "1": "result_pointer",
                    "2": "destination_buffer",
                    "9": "tx_buffer_address",
                    "3": "output_buffer"
                },
                "bVar1": {
                    "1": "data_byte",
                    "13": "word1",
                    "3": "byte_value",
                    "7": "high_byte",
                    "2": "first_byte"
                },
                "uVar2": {
                    "7": "low_byte",
                    "1": "data_word",
                    "4": "word_value",
                    "13": "word2",
                    "2": "second_byte"
                },
                "sendTxBuffer": {
                    "1": "send_buffer"
                }
            }
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "process_data_08000a7a",
            "code": "\nundefined4 process_data_08000a7a(int buffer_address,int output_buffer,undefined4 param3,undefined4 param4)\n\n{\n  int word1;\n  int word2;\n  uint counter;\n  uint bit_counter;\n  uint bit_position;\n  uint byte_index;\n  uint byte_index;\n  \n  word1 = combine_bytes(*(undefined *)(buffer_address + 0xb),*(undefined *)(buffer_address + 0xc),param3,param4,\n                   param4);\n  word2 = combine_bytes(*(undefined *)(buffer_address + 0xd),*(undefined *)(buffer_address + 0xe));\n  bit_counter = 0;\n  byte_index = 7;\n  for (counter = 0; (int)counter < word2; counter = counter + 1 & 0xffff) {\n    byte_index = (counter + word1) * 0x100000 >> 0x18;\n    bit_position = counter + word1 & 0xf;\n    if (((int)(uint)*(byte_value *)(buffer_address + byte_index + 9) >> bit_counter & 1U) == 0) {\n      *(ushort *)(output_buffer + byte_index * 2) = *(ushort *)(output_buffer + byte_index * 2) & ~(ushort)(1 << bit_position);\n    }\n    else {\n      *(ushort *)(output_buffer + byte_index * 2) = (ushort)(1 << bit_position) | *(ushort *)(output_buffer + byte_index * 2);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      byte_index = byte_index + 1 & 0xff;\n      bit_counter = 0;\n    }\n  }\n  *(undefined *)(buffer_address + 0x49) = 6;\n  transmit_buffer(buffer_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "process_data_08000a7a",
                "param_1": "buffer_address",
                "param_2": "output_buffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "word1",
                "iVar2": "word2",
                "uVar3": "counter",
                "uVar4": "bit_counter",
                "uVar5": "bit_position",
                "uVar6": "byte_index",
                "uVar7": "byte_index",
                "makeWord": "combine_bytes",
                "byte": "byte_value",
                "sendTxBuffer": "transmit_buffer"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000a7a": {
                    "2": "reverse_bits_and_send",
                    "1": "update_bitwise_flags",
                    "4": "process_data",
                    "3": "reverse_and_send_data"
                },
                "param_1": {
                    "3": "input_data",
                    "1": "input_data_addr",
                    "5": "data_buffer",
                    "2": "data_ptr",
                    "6": "buffer_address",
                    "4": "buffer"
                },
                "param_2": {
                    "1": "output",
                    "2": "output_data",
                    "4": "output_address",
                    "11": "output_buffer"
                },
                "param_3": {
                    "23": "param3",
                    "1": "param_offset1",
                    "2": "param_3",
                    "3": "param_a"
                },
                "param_4": {
                    "1": "param_offset2",
                    "23": "param4",
                    "3": "param_b",
                    "2": "param_4"
                },
                "iVar1": {
                    "1": "word_a",
                    "28": "word1"
                },
                "iVar2": {
                    "1": "word_b",
                    "28": "word2"
                },
                "uVar3": {
                    "7": "loop_counter",
                    "2": "loop_index",
                    "1": "iterator",
                    "9": "counter",
                    "8": "index"
                },
                "uVar4": {
                    "15": "bit_counter",
                    "1": "bit",
                    "12": "bit_index"
                },
                "uVar5": {
                    "1": "index",
                    "2": "word_index",
                    "14": "bit_position",
                    "9": "bit_index"
                },
                "uVar6": {
                    "2": "output_index",
                    "1": "address_offset",
                    "11": "byte_index",
                    "8": "buffer_index"
                },
                "uVar7": {
                    "1": "data_offset",
                    "4": "offset",
                    "2": "data_index",
                    "16": "byte_index"
                },
                "makeWord": {
                    "1": "combine_bytes"
                },
                "byte": {
                    "1": "byte_value"
                },
                "sendTxBuffer": {
                    "1": "transmit_buffer"
                }
            }
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "reverse_and_send_data_08000b04",
            "code": "\nint reverse_and_send_data_08000b04(int data_address,int output_buffer)\n\n{\n  byte first_byte;\n  byte second_byte;\n  char result;\n  undefined2 word_value;\n  uint index;\n  \n  first_byte = *(byte *)(data_address + 0xc);\n  second_byte = *(byte *)(data_address + 0xe);\n  *(undefined *)(data_address + 0xd) = 0;\n  *(byte *)(data_address + 0xe) = second_byte;\n  *(undefined *)(data_address + 0x49) = 6;\n  for (index = 0; index < second_byte; index = index + 1 & 0xff) {\n    word_value = create_word(*(undefined *)(index * 2 + data_address + 0x10),\n                     *(undefined *)(data_address + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_buffer + (first_byte + index) * 2) = word_value;\n  }\n  result = *(char *)(data_address + 0x49);\n  send_transmit_buffer(data_address);\n  return (int)(char)(result + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "reverse_and_send_data_08000b04",
                "param_1": "data_address",
                "param_2": "output_buffer",
                "bVar1": "first_byte",
                "bVar2": "second_byte",
                "cVar3": "result",
                "uVar4": "word_value",
                "uVar5": "index",
                "makeWord": "create_word",
                "sendTxBuffer": "send_transmit_buffer"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000b04": {
                    "4": "process_data",
                    "1": "process_input_data",
                    "5": "reverse_and_send_data",
                    "2": "extract_data_and_send"
                },
                "param_1": {
                    "4": "data_buffer",
                    "1": "data_buffer_pointer",
                    "2": "input_data",
                    "6": "data_address"
                },
                "param_2": {
                    "1": "output_buffer_pointer",
                    "2": "output_data",
                    "7": "output_address",
                    "10": "output_buffer"
                },
                "bVar1": {
                    "1": "start_offset",
                    "3": "byte1",
                    "2": "current_byte",
                    "11": "first_byte"
                },
                "bVar2": {
                    "5": "num_bytes",
                    "1": "length",
                    "2": "byte_value2",
                    "3": "num_elements",
                    "11": "second_byte"
                },
                "cVar3": {
                    "1": "new_byte",
                    "6": "char_value",
                    "2": "char1",
                    "3": "result_char",
                    "7": "result"
                },
                "uVar4": {
                    "1": "new_word",
                    "2": "word_var",
                    "9": "word_value",
                    "8": "word"
                },
                "uVar5": {
                    "6": "counter",
                    "2": "byte_index",
                    "4": "loop_index",
                    "7": "index",
                    "1": "current_index"
                },
                "makeWord": {
                    "2": "combine_bytes",
                    "4": "create_word"
                },
                "sendTxBuffer": {
                    "2": "transmit_buffer",
                    "1": "transmit_data_buffer"
                },
                "*(byte *)(param_1 + 0xc)": {
                    "1": "counter1_byte"
                },
                "*(byte *)(param_1 + 0xe)": {
                    "1": "data_buffer[14]"
                },
                "*(undefined *)(param_1 + 0xd)": {
                    "1": "zero_value"
                },
                "*(undefined *)(param_1 + 0x49)": {
                    "1": "six_value"
                },
                "*(undefined *)(uVar5 * 2 + param_1 + 0x10)": {
                    "1": "byte1"
                },
                "*(undefined *)(param_1 + (uVar5 + 4) * 2 + 9)": {
                    "1": "byte2"
                }
            }
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_request_08000b54",
            "code": "\nint process_request_08000b54(int **request,int *data,undefined4 param)\n\n{\n  byte result;\n  int validation_result;\n  uint error_code;\n  int return_value;\n  \n  param_array[19] = data;\n  *(char *)(request + 0x18) = (char)param;\n  if (*(byte *)((int)request + 5) < 4) {\n    result = (**(code **)(**request + 8))();\n    error_code = (uint)result;\n  }\n  if (error_code == 0) {\n    return_value = 0;\n  }\n  else if ((int)error_code < 8) {\n    return_value = 0;\n  }\n  else {\n    return_value = retrieve_data(request);\n    *(char *)(request + 2) = (char)return_value;\n    if (*(char *)((int)request + 9) == *(char *)(request + 1)) {\n      validation_result = validate_request(request);\n      if (validation_result < 1) {\n        validation_result = get_current_time();\n        timeout = (int *)((uint)*(ushort *)((int)request + 0x56) + validation_result);\n        *(undefined *)(request + 2) = 0;\n        switch(*(undefined *)((int)request + 10)) {\n        case 1:\n        case 2:\n          return_value = process_function_code1(request,data,param);\n          break;\n        case 3:\n        case 4:\n          return_value = process_function_code3(request,data,param);\n          break;\n        case 5:\n          return_value = process_function_code5(request,data,param);\n          break;\n        case 6:\n          return_value = process_function_code6(request,data,param);\n          break;\n        case 0xf:\n          return_value = process_function_code15(request,data,param);\n          break;\n        case 0x10:\n          return_value = process_function_code16(request,data,param);\n        }\n      }\n      else {\n        if (validation_result != 0xff) {\n          create_exception(request,validation_result);\n          send_data(request);\n        }\n        *(char *)(request + 2) = (char)validation_result;\n        return_value = (int)(char)validation_result;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_request_08000b54",
                "param_1": "request",
                "param_2": "data",
                "param_3": "param",
                "bVar1": "result",
                "iVar2": "validation_result",
                "unaff_r5": "error_code",
                "iVar3": "return_value",
                "getRxBuffer": "retrieve_data",
                "validateRequest": "validate_request",
                "millis": "get_current_time",
                "param_1[0x17]": "timeout",
                "process_FC1": "process_function_code1",
                "process_FC3": "process_function_code3",
                "process_FC5": "process_function_code5",
                "process_FC6": "process_function_code6",
                "process_FC15": "process_function_code15",
                "process_FC16": "process_function_code16",
                "buildException": "create_exception",
                "sendTxBuffer": "send_data",
                "param_1[0x13]": "param_array[19]"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000a7a",
                "FUN_080006b4",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_080008e2",
                "FUN_0800076c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000b54": {
                    "1": "process_command",
                    "26": "process_request"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "request_params",
                    "3": "param_array",
                    "10": "request"
                },
                "param_2": {
                    "1": "command_list",
                    "8": "data",
                    "2": "param_ptr",
                    "6": "buffer"
                },
                "param_3": {
                    "5": "param",
                    "4": "param_value",
                    "1": "code_type",
                    "3": "param3",
                    "2": "size"
                },
                "bVar1": {
                    "1": "result_code",
                    "3": "byte_var",
                    "2": "byte_val",
                    "11": "result",
                    "5": "byte_value"
                },
                "iVar2": {
                    "7": "result",
                    "1": "int_variable1",
                    "15": "validation_result"
                },
                "unaff_r5": {
                    "1": "temp_uint",
                    "8": "error_code",
                    "4": "result_code",
                    "2": "value"
                },
                "iVar3": {
                    "1": "output",
                    "20": "return_value",
                    "6": "result"
                },
                "FUN_080008cc": {
                    "1": "build_exception"
                },
                "FUN_08000998": {
                    "1": "validate_request"
                },
                "FUN_08000a7a": {
                    "1": "millis"
                },
                "FUN_080006b4": {
                    "1": "get_rx_buffer"
                },
                "FUN_08000a4e": {
                    "1": "process_fc1"
                },
                "FUN_080007f0": {
                    "1": "process_fc3"
                },
                "FUN_08000a00": {
                    "1": "process_fc5"
                },
                "FUN_08000b04": {
                    "1": "process_fc6"
                },
                "FUN_08004204": {
                    "1": "process_fc15"
                },
                "FUN_080008e2": {
                    "1": "process_fc16"
                },
                "FUN_0800076c": {
                    "1": "send_tx_buffer"
                },
                "getRxBuffer": {
                    "1": "retrieve_input_buffer",
                    "2": "retrieve_data"
                },
                "validateRequest": {
                    "2": "check_request_validity",
                    "1": "validate_protocol_request",
                    "3": "validate_request"
                },
                "millis": {
                    "2": "get_milliseconds",
                    "6": "get_current_time"
                },
                "param_1[0x17]": {
                    "2": "timeout",
                    "1": "param1_index17"
                },
                "*(undefined *)(param_1 + 2)": {
                    "1": "temp_undefined"
                },
                "*(undefined *)((int)param_1 + 10)": {
                    "1": "command"
                },
                "process_FC1": {
                    "3": "process_function1",
                    "5": "process_function_code1"
                },
                "process_FC3": {
                    "5": "process_function_code3",
                    "3": "process_function3"
                },
                "process_FC5": {
                    "3": "process_function5",
                    "5": "process_function_code5"
                },
                "process_FC6": {
                    "5": "process_function_code6",
                    "3": "process_function6"
                },
                "process_FC15": {
                    "5": "process_function_code15",
                    "3": "process_function15"
                },
                "process_FC16": {
                    "5": "process_function_code16",
                    "3": "process_function16"
                },
                "buildException": {
                    "5": "create_exception",
                    "2": "build_exception",
                    "1": "build_protocol_exception"
                },
                "sendTxBuffer": {
                    "1": "send_data_from_buffer"
                },
                "*(char *)(param_1 + 2)": {
                    "1": "exception_flag"
                },
                "FUC_08000b54": {
                    "1": "process_request"
                },
                "param_1[0x13]": {
                    "1": "response+0x34"
                },
                "param_2[0]": {
                    "1": "request_data_size"
                },
                "param_1[0x18]": {
                    "1": "response[0x48]"
                },
                "(*(byte *)((int)param_1 + 5)": {
                    "1": "(char)(response[5])"
                },
                "(*(code **)(**(undefined4 ***)param_1 + 8))()": {
                    "1": "get_response_code(response_data)"
                },
                "param_1[2]": {
                    "1": "response+8"
                },
                "(char *)((int)param_1 + 9)": {
                    "1": "(char)(response+9)"
                },
                "*((ushort *)((int)param_1 + 0x56)": {
                    "1": "response[0x58]"
                },
                "switch(*(undefined *)((int)param_1 + 10))": {
                    "1": "switch(response[0x88])"
                }
            }
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_forkserver_08000c4c",
            "code": "\nvoid initialize_forkserver_08000c4c(void)\n\n{\n  startForkserver(0);\n  initialize_device(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_forkserver_08000c4c",
                "initialize_device_08000600": "initialize_device"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c4c": {
                    "1": "initialize_and_start_fork_server",
                    "24": "initialize_forkserver"
                },
                "execute_afl_call_080005e4": {
                    "24": "execute_afl_call",
                    "1": "perform_afl_call"
                },
                "initialize_device_08000600": {
                    "1": "set_device_parameters",
                    "30": "initialize_device"
                },
                "input_param": {
                    "5": "input",
                    "1": "input_param"
                },
                "unused_param": {
                    "2": "unused1",
                    "1": "unused_param"
                },
                "unused_param2": {
                    "1": "unused_param2",
                    "4": "unused2"
                },
                "output_param": {
                    "1": "param4",
                    "4": "output"
                },
                "param": {
                    "1": "param",
                    "2": "device_param"
                },
                "device": {
                    "1": "device_pointer"
                }
            }
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "poll_data_08000c64",
            "code": "\nvoid poll_data_08000c64(void)\n\n{\n  undefined4 unused;\n  \n  wait_for_input(&DAT_20000124,&DAT_20000004,0x10,unused,unused);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "poll_data_08000c64",
                "poll": "wait_for_input",
                "in_r3": "unused"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c64": {
                    "4": "poll_devices",
                    "1": "poll_device",
                    "15": "poll_data"
                },
                "param_1": {
                    "2": "input_data",
                    "1": "input_param",
                    "3": "pointer_array",
                    "4": "input_array"
                },
                "param_2": {
                    "3": "data",
                    "1": "output_buffer",
                    "2": "output_array"
                },
                "param_3": {
                    "1": "parameters_3",
                    "2": "param",
                    "7": "size",
                    "3": "parameter"
                },
                "FUN_08000b54": {
                    "1": "poll",
                    "2": "sub_function",
                    "4": "process_input",
                    "8": "process_data"
                },
                "@in_r3": {
                    "1": "unused_param"
                },
                "poll": {
                    "1": "wait_for_input"
                },
                "in_r3": {
                    "1": "param_four",
                    "3": "timeout",
                    "5": "unused"
                },
                "DAT_20000124": {
                    "1": "data_address_1",
                    "2": "polling_data1"
                },
                "DAT_20000004": {
                    "1": "data_address_2",
                    "2": "polling_data2"
                },
                "int **param_1": {
                    "1": "pointer_array"
                },
                "int *param_2": {
                    "1": "pointer"
                },
                "undefined4 param_3": {
                    "1": "param"
                }
            }
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint hclk_freq;\n  undefined4 oscillator_config;\n  undefined4 power_config;\n  undefined4 clock_config;\n  undefined4 clock_source_config;\n  undefined4 priority_config;\n  undefined4 sys_tick_config;\n  undefined4 systick_clk_config;\n  undefined4 priority_config;\n  undefined4 clock_config_param1;\n  undefined4 clock_config_param2;\n  undefined4 voltage_scale;\n  undefined4 clock_config10;\n  undefined4 clock_config11;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscillator_config = 1;\n  power_config = 0x50000;\n  clock_config = 2;\n  clock_source_config = 0x400000;\n  priority_config = 8;\n  sys_tick_config = 0x150;\n  systick_clk_config = 2;\n  priority_config = 7;\n  configure_oscillator(&oscillator_config);\n  enable_over_drive();\n  clock_config_param1 = 0xf;\n  clock_config_param2 = 2;\n  voltage_scale = 0;\n  clock_config10 = 0x1400;\n  clock_config11 = 0x1000;\n  configure_clock(&clock_config_param1,5);\n  hclk_freq = get_hclk_frequency();\n  configure_sys_tick(hclk_freq / 1000);\n  configure_sys_tick_clock_source(4);\n  set_priority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "oscillator_config",
                "local_50": "power_config",
                "local_3c": "clock_config",
                "local_38": "clock_source_config",
                "local_34": "priority_config",
                "local_30": "sys_tick_config",
                "local_2c": "systick_clk_config",
                "local_28": "priority_config",
                "local_24": "clock_config_param1",
                "local_20": "clock_config_param2",
                "local_14": "clock_config11",
                "local_1c": "voltage_scale",
                "local_18": "clock_config10",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "HAL_PWREx_EnableOverDrive": "enable_over_drive",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_NVIC_SetPriority": "set_priority",
                "uVar1": "hclk_freq"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000c8c": {
                    "1": "initialize_clock",
                    "4": "initialize_hardware",
                    "23": "initialize_system"
                },
                "local_54": {
                    "1": "oscillator_parameters",
                    "2": "osc_config_param1",
                    "3": "config_value1",
                    "16": "oscillator_config"
                },
                "local_50": {
                    "2": "clock_source",
                    "1": "variable2",
                    "3": "config_value2",
                    "11": "power_config"
                },
                "local_3c": {
                    "2": "clock_config1",
                    "1": "voltage_scale",
                    "3": "config_value3",
                    "11": "clock_config"
                },
                "local_38": {
                    "1": "clock_config_parameters",
                    "2": "clock_config2",
                    "6": "clock_source_config",
                    "3": "config_value4"
                },
                "local_34": {
                    "2": "flash_latency",
                    "1": "config_var5",
                    "3": "priority_config"
                },
                "local_30": {
                    "1": "config_var6",
                    "2": "priority_config",
                    "3": "sys_tick_config"
                },
                "local_2c": {
                    "1": "interrupt_config",
                    "2": "priority_group"
                },
                "local_28": {
                    "1": "priority_group",
                    "2": "config_value8",
                    "3": "priority_config"
                },
                "local_24": {
                    "2": "clock_source_config",
                    "1": "hclk_config",
                    "3": "clock_config_param1"
                },
                "local_20": {
                    "1": "apb1_divider",
                    "2": "hclk_prescaler",
                    "3": "clock_config_param2"
                },
                "local_14": {
                    "1": "nvic_config4",
                    "2": "clock_config_param5"
                },
                "local_1c": {
                    "1": "nvic_config3",
                    "2": "pclk1_prescaler"
                },
                "local_18": {
                    "1": "nvic_config4",
                    "2": "pclk2_prescaler"
                },
                "FUN_08002488": {
                    "1": "configure_flash",
                    "5": "configure_oscillator"
                },
                "FUN_0800201c": {
                    "3": "configure_power",
                    "1": "configure_pwr"
                },
                "FUN_08001f9c": {
                    "1": "enable_overdrive",
                    "5": "enable_over_drive"
                },
                "FUN_08000e60": {
                    "3": "configure_clock",
                    "1": "config_clock"
                },
                "FUN_08000f2c": {
                    "3": "set_priority",
                    "1": "configure_nvic"
                },
                "FUN_080025e0": {
                    "5": "get_hclk_freq",
                    "2": "get_hclk_frequency"
                },
                "FUN_08000ee0": {
                    "1": "configure_clock",
                    "3": "set_priority"
                },
                "param_1": {
                    "1": "ptr_value1"
                },
                "param_2": {
                    "1": "param_value2"
                },
                "param_3": {
                    "1": "param_value3"
                },
                "_DAT_40023840": {
                    "1": "register1"
                },
                "_DAT_40007000": {
                    "1": "register2"
                },
                "HAL_RCC_OscConfig": {
                    "2": "configure_oscillator"
                },
                "HAL_PWREx_EnableOverDrive": {
                    "2": "enable_over_drive"
                },
                "HAL_RCC_ClockConfig": {
                    "2": "configure_clock"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "2": "get_hclk_frequency"
                },
                "HAL_SYSTICK_Config": {
                    "2": "configure_sys_tick"
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "2": "configure_sys_tick_clock_source"
                },
                "HAL_NVIC_SetPriority": {
                    "2": "set_priority"
                },
                "uVar1": {
                    "2": "hclk_freq"
                }
            }
        },
        "FUN_08000d3c": {
            "entrypoint": "0x08000d3c",
            "current_name": "initialize_system_08000d3c",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initialize_system_08000d3c(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000104; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8006034);\n  }\n  for (ptr = &DAT_20000104; ptr < &DAT_20000678; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x8000d72;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d3c": "initialize_system_08000d3c",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000d3c": {
                    "1": "copy_data_to_memory",
                    "19": "initialize_system",
                    "6": "initialize_program"
                },
                "iVar1": {
                    "1": "loop_counter",
                    "4": "offset",
                    "3": "counter",
                    "19": "index"
                },
                "puVar2": {
                    "1": "current_pointer",
                    "3": "data_ptr",
                    "2": "pointer",
                    "4": "data_pointer",
                    "16": "ptr"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "2": "unrecovered_jump_table",
                    "22": "jump_table",
                    "1": "jumptable"
                },
                "FUN_08004658": {
                    "1": "initialize_data",
                    "2": "copy_data_to_memory"
                },
                "FUN_08004884": {
                    "6": "clear_memory",
                    "1": "reset_memory"
                },
                "FUN_080035bc": {
                    "3": "initialize_system",
                    "1": "setup_system",
                    "2": "system_initialization"
                },
                "VAR_iVar1": {
                    "1": "index"
                },
                "VAR_puVar2": {
                    "1": "pointer"
                },
                "FUN_0800d72": {
                    "1": "execute_jump_table"
                }
            }
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_hardware_configuration_08000d8e",
            "code": "\nvoid initialize_hardware_configuration_08000d8e(void)\n\n{\n  initialize_hardware_configuration_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_hardware_configuration_08000d8e",
                "hw_config_init": "initialize_hardware_configuration"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000d8e": {
                    "1": "initialize_hw_config",
                    "16": "initialize_hardware_configuration",
                    "7": "initialize_hardware",
                    "6": "initialize_hardware_config"
                },
                "FUN_080034ce": {
                    "7": "configure_hardware",
                    "1": "configure_hw",
                    "5": "perform_additional_configuration",
                    "3": "perform_additional_tasks",
                    "2": "initialize_hw_config"
                },
                "hw_config_init": {
                    "1": "initialize_hardware_config",
                    "2": "initialize_hardware_configuration"
                }
            }
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "configure_sys_tick_08000d98",
            "code": "\nundefined4 configure_sys_tick_08000d98(uint priority_level)\n\n{\n  int config_result;\n  \n  config_result = configure_sys_tick_08000d98_frequency(DAT_2000002c / (1000 / DAT_20000024));\n  if (config_result != 0) {\n    return 1;\n  }\n  if (0xf < priority_level) {\n    return 1;\n  }\n  set_interrupt_priority(0xffffffff,priority_level,0);\n  DAT_20000028 = priority_level;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "configure_sys_tick_08000d98",
                "param_1": "priority_level",
                "iVar1": "config_result",
                "HAL_SYSTICK_Config": "configure_sys_tick_frequency",
                "HAL_NVIC_SetPriority": "set_interrupt_priority"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000d98": {
                    "1": "configure_sys_tick_and_priority",
                    "14": "configure_sys_tick",
                    "2": "initialize_system_tick",
                    "7": "initialize_systick"
                },
                "param_1": {
                    "10": "priority",
                    "21": "priority_level"
                },
                "iVar1": {
                    "11": "config_result",
                    "2": "status",
                    "1": "error_status",
                    "6": "systick_config_result",
                    "4": "result"
                },
                "HAL_SYSTICK_Config": {
                    "1": "configure_sys_tick_interval"
                },
                "DAT_2000002c": {
                    "1": "clock_speed"
                },
                "DAT_20000024": {
                    "1": "systick_tick_rate"
                },
                "HAL_NVIC_SetPriority": {
                    "3": "set_interrupt_priority",
                    "2": "set_priority",
                    "1": "set_irq_priority"
                },
                "DAT_20000028": {
                    "2": "interrupt_priority",
                    "3": "current_priority",
                    "1": "current_priority_level"
                },
                "param_2": {
                    "1": "divider"
                },
                "param_3": {
                    "1": "frequency"
                }
            }
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_hardware_08000de4",
            "code": "\n\n\nundefined4 initialize_hardware_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  set_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_msp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_hardware_08000de4",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_msp"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000e3c",
                "FUN_08000d96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000de4": {
                    "16": "initialize_hardware",
                    "7": "initialize_system",
                    "1": "initialize_hal_components",
                    "6": "initialize_hal"
                },
                "DAT_40023c00": {
                    "1": "hardware_config"
                },
                "FUN_08000d98": {
                    "1": "configure_priority",
                    "3": "process_data",
                    "5": "set_priority",
                    "2": "configure_peripheral"
                },
                "FUN_08000e3c": {
                    "1": "configure_peripheral",
                    "8": "initialize_tick",
                    "2": "set_timer"
                },
                "FUNC_08000d96": {
                    "1": "reverse_something",
                    "5": "initialize_peripheral",
                    "3": "initialize_periph",
                    "2": "initialize_hal"
                },
                "param_1": {
                    "1": "config_param",
                    "2": "parameter"
                },
                "FUN_08000d96": {
                    "1": "initialize_periph"
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "4": "set_priority_grouping",
                    "1": "configure_priority_grouping",
                    "3": "set_interrupt_priority_grouping"
                },
                "HAL_InitTick": {
                    "1": "initialize_system_tick",
                    "7": "initialize_tick",
                    "2": "init_tick"
                },
                "HAL_MspInit": {
                    "6": "initialize_msp",
                    "2": "initialize_peripheral",
                    "1": "initialize_periph"
                }
            }
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "addition_function_08000e18",
            "code": "\nvoid addition_function_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "addition_function_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e18": {
                    "1": "addition_of_data",
                    "2": "accumulate_values",
                    "3": "addition",
                    "4": "addition_function"
                },
                "DAT_20000670": {
                    "1": "total",
                    "2": "accumulated_sum",
                    "8": "sum",
                    "13": "result"
                },
                "DAT_20000024": {
                    "10": "input",
                    "1": "data_to_add",
                    "3": "value",
                    "6": "input_value"
                }
            }
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_08000e30",
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c",
                "FUN_0800346c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e30": {
                    "4": "get_data_from_memory",
                    "2": "get_global_value",
                    "1": "get_data_from_constant",
                    "9": "get_data_value",
                    "12": "get_data"
                },
                "DAT_20000670": {
                    "11": "data",
                    "2": "global_variable",
                    "1": "returned_data"
                }
            }
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_configuration_08000e3c",
            "code": "\n\n\nvoid update_configuration_08000e3c(uint input_value)\n\n{\n  _DAT_e000ed0c = (input_value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_configuration_08000e3c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e3c": {
                    "1": "update_register_values",
                    "2": "update_data",
                    "6": "update_register_value"
                },
                "param_1": {
                    "2": "config_value",
                    "1": "value",
                    "18": "input_value",
                    "4": "config_flags"
                },
                "_DAT_e000ed0c": {
                    "1": "configuration",
                    "2": "memory_value",
                    "4": "data_register",
                    "7": "register_value"
                },
                "newConfigFlags": {
                    "1": "updated_value"
                },
                "_DAT_e000ed0c & 0xf8ff | 0x5fa0000": {
                    "1": "updated_value"
                }
            }
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_memory_08000e60",
            "code": "\n\n\nvoid update_memory_08000e60(uint address,uint mask,uint data)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (mask & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & data;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shift_amount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_memory_08000e60",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000e60": {
                    "1": "apply_transformation",
                    "4": "update_character"
                },
                "param_1": {
                    "13": "address",
                    "1": "register_value",
                    "2": "memory_address",
                    "4": "character_index"
                },
                "param_2": {
                    "6": "mask",
                    "3": "mask1",
                    "1": "current_value",
                    "2": "value1",
                    "4": "bit_mask"
                },
                "param_3": {
                    "3": "value",
                    "5": "mask",
                    "2": "value2",
                    "1": "bits_to_clear"
                },
                "uVar1": {
                    "1": "byte_value",
                    "2": "shift_value",
                    "6": "shifted_bits",
                    "12": "shift_amount",
                    "4": "result"
                },
                "uVar2": {
                    "1": "max_offset",
                    "11": "remaining_bits",
                    "2": "shifted_value",
                    "3": "shifted_bits"
                },
                "uVar3": {
                    "1": "shifted_mask1"
                },
                "uVar4": {
                    "1": "mask_one"
                },
                "uVar5": {
                    "1": "shifted_data"
                },
                "uVar6": {
                    "1": "shifted_value"
                },
                "uVar1_copy": {
                    "1": "shift_copy"
                },
                "uVar2_copy": {
                    "1": "bits_to_shift_copy"
                },
                "uVar1_after_check": {
                    "1": "shift_after_check"
                },
                "uVar1_final": {
                    "1": "shift_final"
                },
                "uVar2_final": {
                    "1": "bits_to_shift_final"
                },
                "uVar1_bit_masked": {
                    "1": "shift_bit_masked"
                },
                "uVar1_shifted": {
                    "1": "masked_character_flags"
                },
                "uVar1_result": {
                    "1": "bits_result"
                },
                "param_1 & 0xf": {
                    "1": "address_offset"
                },
                "param_1 + 0xe000e400": {
                    "1": "output_address_option2"
                },
                "uVar1_minus_3": {
                    "1": "shifted_difference_minus_3"
                },
                "uVar1_and_param_3": {
                    "1": "updated_character_data"
                },
                "uVar1_new": {
                    "1": "shifted_mask"
                },
                "uVar2_new": {
                    "1": "clipped_bits"
                },
                "uVar1_shifted_complement": {
                    "1": "mask2"
                },
                "uVar1_shifted_and_param2": {
                    "1": "result1"
                },
                "uVar1_and_param3": {
                    "1": "result2"
                },
                "uVar2_shifted": {
                    "1": "updated_value"
                },
                "*(char *)param_1": {
                    "1": "register_address"
                },
                "uVar1_original": {
                    "1": "original_shift_amount"
                },
                "uVar2_original": {
                    "1": "original_shifted_value"
                },
                "(param_1 & 0xf) + 0xe000ed14": {
                    "1": "output_address_option1"
                }
            }
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid set_bit_08000ec4(uarray bit_index)\n\n{\n  if (-1 < is_valid_index) {\n    *(array *)((bit_index >> 5) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bit_index",
                "int": "array",
                "(int)param_1": "is_valid_index"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ec4": {
                    "8": "set_bit",
                    "7": "set_bit_at_position",
                    "1": "set_bit_in_integer",
                    "2": "set_bit_value",
                    "3": "set_bit_at_index",
                    "6": "set_bit_in_array"
                },
                "param_1": {
                    "1": "offset",
                    "4": "bit_position",
                    "10": "bit_index",
                    "7": "index"
                },
                "<param_1>": {
                    "1": "<position>"
                },
                "<param_1<<5>": {
                    "1": "<position_shifted>"
                },
                "<param_1 & 0x1f>": {
                    "1": "<bit_position>"
                },
                "<PTR_* or DAT_* variables>": {
                    "1": "<unchanged>"
                },
                "param_1 >> 5": {
                    "1": "shifted"
                },
                "1 << (param_1 & 0x1f)": {
                    "2": "bit_value",
                    "4": "bit_mask"
                },
                "*(int *)((param_1 >> 5) * 4 + -0x1fff1f00)": {
                    "1": "target_address",
                    "4": "bit_array"
                },
                "param_1 & 0x1f": {
                    "1": "bit_index"
                },
                "param_2": {
                    "2": "array"
                },
                "param_3": {
                    "2": "array_size"
                },
                "param_4": {
                    "1": "bit_value"
                },
                "param_5": {
                    "1": "bit_position"
                },
                "int": {
                    "1": "array"
                },
                "-1": {
                    "1": "invalid_index"
                },
                "(int)param_1": {
                    "1": "is_valid_index"
                },
                "(param_1 >> 5) * 4 + -0x1fff1f00": {
                    "1": "array_index"
                },
                "-(int)param_1": {
                    "1": "is_positive_index"
                },
                "new_variable_name_1": {
                    "1": "array"
                },
                "new_variable_name_2": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_data_08000ee0",
            "code": "\n\n\nundefined4 initialize_data_08000ee0(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    result 0;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_data_08000ee0",
                "param_1": "input_value",
                "return": "result"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000ee0": {
                    "1": "update_parameters",
                    "2": "initialize_settings",
                    "3": "initialize_memory",
                    "13": "initialize_data"
                },
                "param_1": {
                    "3": "input",
                    "13": "input_value",
                    "1": "data_size"
                },
                "_DAT_e000e014": {
                    "1": "result",
                    "2": "memory_address",
                    "3": "adjusted_value",
                    "4": "updated_value"
                },
                "DAT_e000ed23": {
                    "3": "constant",
                    "1": "register2",
                    "8": "status",
                    "6": "constant_value"
                },
                "_DAT_e000e018": {
                    "1": "system_flag",
                    "3": "initialized_value",
                    "12": "counter",
                    "2": "variable1"
                },
                "_DAT_e000e010": {
                    "10": "flag",
                    "1": "system_mode",
                    "2": "variable2"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "return": {
                    "2": "result"
                },
                "0xf0": {
                    "1": "initial_status"
                },
                "0": {
                    "1": "initial_flag"
                },
                "7": {
                    "1": "initial_value"
                },
                "<insert_function_name_here>": {
                    "1": "set_initial_values"
                },
                "<param_1>": {
                    "1": "input_value"
                },
                "0x1000000": {
                    "1": "max_value"
                }
            }
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_08000f0c",
            "code": "\nvoid set_bit_08000f0c(uinteger bit_index)\n\n{\n  if (-1 < (integer)bit_index) {\n    *(integer *)(((bit_index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bit_index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_08000f0c",
                "param_1": "bit_index",
                "int": "integer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f0c": {
                    "10": "set_bit_in_array",
                    "4": "set_bit_at_position",
                    "5": "set_bit_in_memory",
                    "1": "set_bit_at_index"
                },
                "param_1": {
                    "1": "array_index",
                    "5": "bit_position",
                    "10": "index",
                    "4": "position"
                },
                "param_2": {
                    "1": "bit_value"
                },
                "PTR_": {
                    "1": "ptr"
                },
                "DAT_": {
                    "1": "dat"
                },
                "((param_1 >> 5) + 0x60)": {
                    "1": "byte_index"
                },
                "(param_1 & 0x1f)": {
                    "1": "bit_mask"
                },
                "*(int *)(((param_1 >> 5) + 0x60) * 4 + -0x1fff1f00)": {
                    "1": "target_location",
                    "2": "bit_array"
                },
                "1 << (param_1 & 0x1f)": {
                    "1": "bit_value",
                    "3": "bit_mask"
                },
                "int": {
                    "2": "integer"
                },
                "1": {
                    "1": "one"
                },
                "0x60": {
                    "1": "base_address"
                },
                "0x1fff1f00": {
                    "1": "offset"
                },
                "0x1f": {
                    "1": "mask"
                },
                "1 << (position & 0x1f)": {
                    "1": "bit_value"
                },
                "param_3": {
                    "1": "array"
                },
                "param_4": {
                    "1": "array_size"
                },
                "newBitValue": {
                    "1": "1"
                },
                "param_1 >> 5": {
                    "1": "group_index"
                },
                "param_1 & 0x1f": {
                    "2": "bit_offset"
                }
            }
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "set_flag_08000f2c",
            "code": "\n\n\nvoid set_flag_08000f2c(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flag_value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f2c": {
                    "1": "update_status_register",
                    "4": "update_control_register",
                    "2": "update_register_flag",
                    "7": "set_flag"
                },
                "param_1": {
                    "2": "status",
                    "1": "mode",
                    "9": "value",
                    "12": "flag_value"
                },
                "_DAT_e000e010": {
                    "1": "flag_value",
                    "2": "register_flag",
                    "3": "control_register",
                    "7": "flag_register",
                    "6": "register_value"
                },
                "DAT_e000e010": {
                    "1": "control_register"
                },
                "param_1 != 4": {
                    "1": "is_not_flag_set"
                }
            }
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "handle_sys_tick_interrupt_08000f4e",
            "code": "\nvoid handle_sys_tick_interrupt_08000f4e(void)\n\n{\n  handle_system_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "handle_sys_tick_interrupt_08000f4e",
                "HAL_SYSTICK_Callback": "handle_system_tick"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f4e": {
                    "2": "update_system_tick",
                    "1": "update_system_tick_callback",
                    "3": "execute_systick_callback",
                    "4": "initialize_system_tick",
                    "5": "handle_sys_tick_interrupt"
                },
                "FUNC_08000f4c": {
                    "1": "handle_sys_tick_interrupt",
                    "2": "initialize_sys_tick"
                },
                "HAL_SYSTICK_Callback": {
                    "6": "handle_system_tick",
                    "1": "handle_systick_callback",
                    "2": "systick_callback",
                    "3": "perform_sys_tick_callback"
                }
            }
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_dac_08000f56",
            "code": "\nvoid4 initialize_dac_08000f56(int dac_ptr)\n\n{\n  if (dac_ptr != 0) {\n    *(void *)(dac_ptr + 4) = 2;\n    initialize_dac_08000f56;\n    *(void4 *)(dac_ptr + 0x10) = 0;\n    *(void *)(dac_ptr + 4) = 0;\n    *(void *)(dac_ptr + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_dac_08000f56",
                "param_1": "dac_ptr",
                "HAL_DAC_MspDeInit": "deinitialize_dac",
                "HAL_DAC_MspDeInit()": "initialize_dac",
                "undefined": "void"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f56": {
                    "2": "reset_dac",
                    "1": "deinitialize_dac",
                    "18": "initialize_dac"
                },
                "param_1": {
                    "2": "device_handle",
                    "3": "dac_instance",
                    "1": "param_1",
                    "6": "dac_ptr"
                },
                "HAL_DAC_MspDeInit": {
                    "1": "deinitialize_hal_dac",
                    "2": "deinitialize_dac_peripherals",
                    "4": "deinitialize_dac_msp",
                    "13": "deinitialize_dac"
                },
                "*(undefined *)(param_1 + 4)": {
                    "1": "dac_value_ptr",
                    "8": "dac_status",
                    "4": "dac_value"
                },
                "*(undefined4 *)(param_1 + 0x10)": {
                    "2": "flag",
                    "1": "current_value",
                    "3": "status_register",
                    "4": "dac_value"
                },
                "*(undefined *)(param_1 + 5)": {
                    "3": "flag",
                    "2": "unused_variable",
                    "1": "flag_value"
                },
                "0": {
                    "3": "success"
                },
                "1": {
                    "2": "failure"
                },
                "PTR_FUN_080033c8": {
                    "1": "reset_relevant_variables"
                },
                "HAL_DAC_MspDeInit()": {
                    "1": "initialize_dac"
                },
                "undefined": {
                    "1": "void"
                },
                "2": {
                    "2": "initialized"
                },
                "4": {
                    "1": "status_offset"
                },
                "0x10": {
                    "1": "delay_offset"
                },
                "5": {
                    "1": "flag_offset"
                },
                "DAT_080033c8": {
                    "1": "buffer_cleanup"
                },
                "param_1 + 4": {
                    "1": "dac_register_1"
                },
                "param_1 + 0x10": {
                    "1": "dac_instance->value"
                },
                "FUN_080033c8": {
                    "1": "some_subfunction"
                }
            }
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nreturn_type clear_bit_and_set_flag_08000f72(uint **bit_array,uint bit_position)\n\n{\n  **bit_array = **bit_array & ~(1 << (bit_position & 0xff));\n  *(undefined *)(bit_array + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f72": {
                    "1": "clear_bit_in_value",
                    "2": "clear_bit_and_set_one",
                    "23": "clear_bit_and_set_flag"
                },
                "param_1": {
                    "1": "ptr_array",
                    "5": "data",
                    "3": "data_pointer",
                    "2": "input_pointer",
                    "7": "bit_array"
                },
                "param_2": {
                    "21": "bit_position",
                    "9": "bit_index",
                    "1": "bit_number"
                },
                "param_1 + 1": {
                    "1": "flag_pointer"
                },
                "*(undefined *)(param_1 + 1)": {
                    "1": "set_output_status"
                },
                "1": {
                    "1": "flag"
                },
                "0xff": {
                    "1": "mask"
                },
                "param_1[0][0]": {
                    "1": "data"
                },
                "param_1[1]": {
                    "1": "flag_pointer"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "**param_1": {
                    "1": "value"
                },
                "(param_1 + 1)": {
                    "1": "flag_pointer"
                },
                "new_variable_name_1": {
                    "1": "bit_mask"
                },
                "new_variable_name_2": {
                    "1": "flag_pointer"
                }
            }
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_08000f8c",
            "code": "\nundefined4 update_param_08000f8c(uint **param)\n\n{\n  if (*(char *)(address + 0x35) != '\\x02') {\n    param[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)(address + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "param",
                "param_1[0x15]": "param[21]",
                "(int)param_1": "address"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000f8c": {
                    "4": "update_param",
                    "3": "update_data",
                    "2": "update_parameter_value",
                    "1": "update_array"
                },
                "param_1": {
                    "1": "input_data",
                    "4": "parameters",
                    "2": "parameter",
                    "7": "param"
                },
                "input_data": {
                    "1": "input_data"
                },
                "param_1[0x15]": {
                    "1": "value_ptr",
                    "4": "param[21]",
                    "2": "result"
                },
                "*(char *)((int)input_data + 0x35)": {
                    "1": "flag"
                },
                "*(undefined *)((int)input_data + 0x35)": {
                    "1": "flag"
                },
                "**param_1": {
                    "1": "value_in_array",
                    "2": "param_value",
                    "13": "value",
                    "3": "pointer_value"
                },
                "**param_1 & 0xfffffffe": {
                    "1": "clear_bit(pointer_value)"
                },
                "*(char *)((int)param_1 + 0x35)": {
                    "6": "flag",
                    "1": "current_value",
                    "2": "status_flag",
                    "7": "status"
                },
                "*(char *)((int)param + 0x35)": {
                    "1": "param_flag"
                },
                "*(undefined *)((int)param + 0x35)": {
                    "1": "updated_flag"
                },
                "**param": {
                    "1": "value"
                },
                "0x80": {
                    "1": "new_initial_value"
                },
                "0xfffffffe": {
                    "3": "bit_mask",
                    "1": "bitwise_mask"
                },
                "*(undefined *)((int)param_1 + 0x35)": {
                    "4": "flag",
                    "1": "config.flag",
                    "2": "updated_status",
                    "3": "status"
                },
                "(uint *)0x80": {
                    "1": "default_result"
                },
                "0x35": {
                    "2": "flag_offset"
                },
                "*param_1": {
                    "1": "value"
                },
                "*(char*)((int)param_1 + 0x35)": {
                    "1": "flag"
                },
                "*(undefined*)((int)param_1 + 0x35)": {
                    "1": "updated_flag"
                },
                "(int)param_1": {
                    "1": "address"
                },
                "return value": {
                    "1": "success"
                },
                "param_1[0]": {
                    "1": "value"
                },
                "(*param_1)[0]": {
                    "1": "value"
                },
                "(int)param_1 + 0x35": {
                    "1": "flag_address"
                },
                "'\\x02'": {
                    "1": "expected_flag_value"
                },
                "(undefined *)((int)param_1 + 0x35)": {
                    "1": "flag_pointer"
                },
                "5": {
                    "1": "new_flag_value"
                }
            }
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid update_registers_08000fb4(uint *registers,uint *input_data)\n\n{\n  uint temp1;\n  uint temp2;\n  uint index;\n  uint bit_mask;\n  uint value;\n  int index1;\n  uint temp_var7;\n  int index2;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    temp2 = 1 << (index & 0xff);\n    bit_mask = temp2 & *input_data;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == bit_mask) {\n      if ((input_data[1] == 2) || (input_data[1] == 0x12)) {\n        index1 = (index >> 3) + 8;\n        index2 = (index & 7) << 2;\n        registers[index1] = registers[index1] & ~(0xf << index2) | input_data[4] << index2;\n      }\n      temp_var7 = index << 1;\n      temp1 = ~(3 << (temp_var7 & 0xff));\n      *registers = *registers & temp1 | (input_data[1] & 3) << (temp_var7 & 0xff);\n      value = input_data[1];\n      if (((value - 1 < 2) || (value == 0x11)) || (value == 0x12)) {\n        registers[2] = registers[2] & temp1 | input_data[3] << (temp_var7 & 0xff);\n        registers[1] = registers[1] & ~temp2 | ((input_data[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      registers[3] = temp1 & registers[3] | input_data[2] << (temp_var7 & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((input_data[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (index & 3) << 2;\n        if (registers == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registers == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registers == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registers == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registers == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registers == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registers == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registers == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registers == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registers == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        temp1 = ~bit_mask;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((input_data[1] & 0x10000) != 0) {\n          temp2 = bit_mask | _DAT_40013c00;\n        }\n        value = temp1 & _DAT_40013c04;\n        if ((input_data[1] & 0x20000) != 0) {\n          value = bit_mask | _DAT_40013c04;\n        }\n        temp_var7 = temp1 & _DAT_40013c08;\n        if ((input_data[1] & 0x100000) != 0) {\n          temp_var7 = bit_mask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = value;\n        _DAT_40013c08 = temp_var7;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((input_data[1] & 0x200000) != 0) {\n          temp1 = bit_mask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registers",
                "param_2": "input_data",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "index",
                "uVar4": "bit_mask",
                "uVar5": "value",
                "iVar6": "index1",
                "uVar7": "temp_var7",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08000fb4": {
                    "1": "update_values",
                    "3": "update_memory",
                    "2": "update_param_values",
                    "18": "update_registers"
                },
                "param_1": {
                    "8": "registers",
                    "1": "register1",
                    "2": "output_array",
                    "3": "register_array1"
                },
                "param_2": {
                    "2": "values",
                    "1": "register2",
                    "3": "register_array2",
                    "4": "input_array",
                    "7": "input_data"
                },
                "uVar1": {
                    "5": "mask",
                    "1": "current_value",
                    "8": "temp1",
                    "2": "register_value",
                    "6": "temp_var1"
                },
                "uVar2": {
                    "2": "temp_2",
                    "1": "shifted_bit",
                    "6": "bit_mask",
                    "8": "temp2",
                    "3": "bit"
                },
                "uVar3": {
                    "3": "loop_counter",
                    "1": "position",
                    "2": "counter",
                    "4": "loop_index",
                    "14": "index"
                },
                "uVar4": {
                    "1": "source_bit",
                    "3": "mask",
                    "2": "temp3",
                    "5": "bit_check",
                    "13": "bit_mask"
                },
                "uVar5": {
                    "1": "param2_value1",
                    "2": "temp_3",
                    "6": "temp_var5",
                    "7": "value",
                    "3": "temp4"
                },
                "iVar6": {
                    "1": "block_index",
                    "6": "index1",
                    "2": "reg_index",
                    "4": "row_index",
                    "5": "register_index"
                },
                "uVar7": {
                    "3": "temp5",
                    "2": "temp4",
                    "1": "u_var7",
                    "5": "temp_var7"
                },
                "iVar8": {
                    "4": "bit_offset",
                    "6": "index2",
                    "1": "index_3",
                    "2": "shift",
                    "5": "bit_shift"
                },
                "_DAT_40013c0c": {
                    "1": "register_c"
                },
                "registerA": {
                    "1": "register_a"
                },
                "registerB": {
                    "1": "register_b"
                },
                "index": {
                    "1": "index"
                },
                "bitMask": {
                    "1": "bit_mask"
                },
                "temp1": {
                    "1": "temp1"
                },
                "temp2": {
                    "1": "temp2"
                },
                "value": {
                    "1": "value"
                },
                "regIndex": {
                    "1": "reg_index"
                },
                "bitShift": {
                    "1": "bit_shift"
                }
            }
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid set_param_value_08001198(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001198": {
                    "1": "assign_value",
                    "3": "set_param",
                    "2": "update_param",
                    "18": "set_param_value"
                },
                "param_1": {
                    "1": "base_addr",
                    "16": "object_address",
                    "4": "base_address",
                    "3": "object"
                },
                "param_2": {
                    "1": "value_to_store",
                    "20": "value",
                    "9": "new_value"
                },
                "param_3": {
                    "1": "is_high",
                    "5": "shift_flag",
                    "6": "shift_value",
                    "2": "shift",
                    "13": "is_shifted"
                },
                "param_1 + 0x18": {
                    "1": "data_struct_ptr",
                    "2": "address_to_update"
                },
                "*(int *)(param_1 + 0x18)": {
                    "2": "object_value",
                    "1": "value_ptr"
                },
                "value << 0x10": {
                    "1": "value_shifted"
                },
                "*(int *)(targetAddress)": {
                    "1": "target_value"
                },
                "param_3 == 0": {
                    "1": "is_shifted"
                },
                "param_2 << 0x10": {
                    "4": "shifted_value"
                }
            }
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_gpio_exti_080011a4",
            "code": "\n\n\nvoid update_gpio_exti_080011a4(uint input_value)\n\n{\n  if ((_DAT_40013c14 & input_value) != 0) {\n    _DAT_40013c14 = input_value;\n    handle_gpio_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_gpio_exti_080011a4",
                "param_1": "input_value",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011a4": {
                    "1": "update_gpio_callback",
                    "5": "update_gpio_exti_callback",
                    "2": "update_gpio_on_interrupt",
                    "3": "update_gpio_interrupt"
                },
                "param_1": {
                    "2": "new_value",
                    "1": "updated_value",
                    "5": "input_value",
                    "3": "new_state"
                },
                "HAL_GPIO_EXTI_Callback": {
                    "1": "handle_gpio_exti_callback",
                    "9": "handle_gpio_interrupt"
                },
                "_DAT_40013c14": {
                    "1": "gpio_exti_reg",
                    "3": "gpio_register",
                    "4": "gpio_exti_state",
                    "2": "gpio_status"
                }
            }
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_param_080011c0",
            "code": "\nundefined4 update_param_080011c0(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (flag == 0) {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & mask2 | 1;\n    }\n  }\n  else if (condition2 == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = value & mask2 | 1;\n    }\n  }\n  else if (flag == 0) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag == 1) {\n    *(uint *)(*data + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_param_080011c0",
                "param_1": "data",
                "param_1[0x14]": "flag",
                "param_1[4]": "condition2",
                "param_1[0x11]": "value",
                "0xffU": "mask2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080011c0": {
                    "1": "set_permissions",
                    "4": "update_param",
                    "2": "update_status",
                    "3": "update_flag"
                },
                "param_1": {
                    "4": "data",
                    "1": "permissions",
                    "2": "input_array",
                    "3": "input"
                },
                "param_1[0x14]": {
                    "4": "flag",
                    "1": "array[20]",
                    "2": "value1",
                    "3": "condition1"
                },
                "param_1[4]": {
                    "1": "flag_value",
                    "2": "param[4]",
                    "3": "condition2"
                },
                "param_1[0x11]": {
                    "1": "value_in_array17",
                    "2": "value2",
                    "7": "value",
                    "3": "flag_value"
                },
                "*param_1": {
                    "1": "control_ptr",
                    "3": "ptr"
                },
                "*param_1 + 0x10": {
                    "1": "flags"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_var1",
                    "2": "character_at_offset",
                    "3": "char1"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_variable2",
                    "2": "character2",
                    "3": "char2"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "status_value",
                    "2": "control_bit",
                    "5": "result"
                },
                "data[0x14]": {
                    "1": "flag"
                },
                "data[0x11]": {
                    "1": "value"
                },
                "*(uint *)(*data + 0x10)": {
                    "1": "status"
                },
                "*(char *)((int)data + 0x3e)": {
                    "1": "symbol"
                },
                "*(char *)((int)data + 0x3d)": {
                    "1": "character"
                },
                "param_1 + 0x3e": {
                    "1": "condition1"
                },
                "condition1 == '@'": {
                    "1": "is_condition1_met"
                },
                "param_1 + 0x3d": {
                    "1": "condition2"
                },
                "condition2 == '!'": {
                    "1": "is_condition2_met"
                },
                "(uint *)(*param_1 + 0x10)": {
                    "1": "settings.address"
                },
                "0": {
                    "1": "null"
                },
                "0x4000": {
                    "1": "constant"
                },
                "0xfe": {
                    "1": "mask1"
                },
                "0xffU": {
                    "1": "mask2"
                },
                "1": {
                    "1": "bit1"
                },
                "(uint)(param_1[0x11] << 0x10) >> 0x17": {
                    "1": "shifted_value"
                },
                "6": {
                    "1": "mask3"
                },
                "0xf0": {
                    "1": "flag1"
                },
                "0xf1": {
                    "1": "flag2"
                },
                "char1": {
                    "1": "character1"
                },
                "char2": {
                    "1": "character2"
                },
                "uint1": {
                    "1": "unsigned1"
                },
                "uint2": {
                    "1": "unsigned2"
                },
                "input": {
                    "1": "input"
                },
                "input[0x14]": {
                    "1": "condition1"
                },
                "input[4]": {
                    "1": "condition2"
                },
                "input[0x11]": {
                    "1": "value"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "char_ptr1"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "char_ptr2"
                }
            }
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_parameter_0800124a",
            "code": "\nundefined4 update_parameter_0800124a(int *parameter_array)\n\n{\n  *(uint *)(*parameter_array + 0x10) = parameter_value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_parameter_0800124a",
                "param_1": "parameter_array",
                "param_1[0x11]": "parameter_value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800124a": {
                    "1": "set_value_in_memory",
                    "3": "set_byte_value",
                    "2": "update_value"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "array_ptr",
                    "5": "memory_address",
                    "3": "input_array"
                },
                "*param_1": {
                    "1": "value_ptr"
                },
                "param_1[0x11]": {
                    "1": "byte_value",
                    "2": "parameter_value"
                },
                "*param_1 + 0x10": {
                    "1": "destination_pointer"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "pointer_value",
                    "2": "memory_location"
                },
                "& 0xff": {
                    "1": "get_byte_from_value"
                },
                "0xff": {
                    "2": "mask",
                    "1": "bit_mask"
                },
                "param_1[0x11] & 0xff": {
                    "2": "extracted_byte",
                    "1": "source_value"
                }
            }
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_08001256",
            "code": "\nundefined4 update_flags_08001256(uint **parameters)\n\n{\n  uint *ptr1;\n  \n  ptr1 = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((params[20] != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint *)0x0) && (constant == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      params[20] = (uint *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (ptr1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          ptr1 = *parameters;\n          if ((p_var[1] & 0x800) == 0) {\n            *ptr1 = *ptr1 | 0x200;\n          }\n          else {\n            *ptr1 = *ptr1 & 0xfffffbff;\n          }\n        }\n        else if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) ||\n                (params[12] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (params[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        ptr1 = *parameters;\n        if ((p_var[1] & 0x800) != 0) {\n          p_var[1] = p_var[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        ptr1 = *parameters;\n        if ((p_var[1] & 0x800) != 0) {\n          p_var[1] = p_var[1] | 0x1000;\n        }\n      }\n      params[20] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "puVar1": "ptr1",
                "param_1[0x14]": "params[20]",
                "param_1[4]": "constant",
                "param_1[0xc]": "params[12]",
                "param_1[0xb]": "params[11]",
                "(int)param_1": "(int)params",
                "(int)param_1[0x14]": "(int)params[20]",
                "puVar1[1]": "p_var[1]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001256": {
                    "1": "handle_flag_checks",
                    "2": "process_params",
                    "5": "process_flags",
                    "10": "update_flags",
                    "3": "update_permissions"
                },
                "param_1": {
                    "1": "input_params",
                    "7": "params",
                    "2": "param",
                    "15": "parameters"
                },
                "puVar1": {
                    "2": "value",
                    "1": "p_var",
                    "3": "ptr1"
                },
                "<original_function_name>": {
                    "1": "set_flags"
                },
                "<param_1>": {
                    "1": "param_array"
                },
                "<puVar1>": {
                    "1": "pointer_1"
                },
                "<*(char *)((int)param_1 + 0x3d)>": {
                    "1": "char_1"
                },
                "<(*(char *)((int)param_1 + 0x3e) != '@')>": {
                    "1": "char_2_not_equal_at"
                },
                "<param_1[0x14]>": {
                    "1": "param_array[0x14]"
                },
                "<param_1[4]>": {
                    "1": "param_array[4]"
                },
                "<*(short *)((int)param_1 + 0x2a)>": {
                    "1": "short_num"
                },
                "<(puVar1[1] & 0x800) == 0>": {
                    "1": "pointer_2_bitwise_and_0x800"
                },
                "<param_1[0xc]>": {
                    "1": "param_array[0xc]"
                },
                "<(puVar1 == (uint *)0x4) || (puVar1 == (uint *)0x8) || (param_1[0xc] == (uint *)0x12)>": {
                    "1": "pointer_1_equal_4_or_8_or_param_0xc_equal_0x12"
                },
                "<param_1[0xb]>": {
                    "1": "param_array[0xb]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "2": "char_value",
                    "1": "char_var1",
                    "3": "first_char"
                },
                "param_1[0x14]": {
                    "1": "parameter_value",
                    "2": "params[20]"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char2",
                    "3": "char_value2"
                },
                "param_1[4]": {
                    "1": "address_value",
                    "2": "constant"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "8": "short_value",
                    "1": "short_check"
                },
                "(uint *)0xffff0000": {
                    "1": "comparison_value1"
                },
                "(uint *)0x4": {
                    "1": "flag2"
                },
                "(uint *)0x8": {
                    "1": "flag3"
                },
                "param_1[0xc]": {
                    "1": "comparison",
                    "2": "parameters[12]"
                },
                "(uint *)0x12": {
                    "1": "special_value5"
                },
                "(uint *)0x2": {
                    "1": "special_value6"
                },
                "(uint *)0x0": {
                    "1": "null_value1"
                },
                "(uint *)0xc000": {
                    "1": "null_value2"
                },
                "**param_1": {
                    "1": "param1_value"
                },
                "param_1[0xb]": {
                    "1": "array_value3",
                    "2": "parameters[11]"
                },
                "*param_1": {
                    "1": "pointer_value"
                },
                "(*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value_1"
                },
                "(*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value_2"
                },
                "(int)param_1": {
                    "1": "(int)params"
                },
                "(int)param_1[0x14]": {
                    "1": "(int)params[20]"
                },
                "uint *puVar1": {
                    "1": "ptr_var"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_value_pos"
                },
                "(int)param_1 + 0x3e": {
                    "1": "char_offset"
                },
                "uint *param_1": {
                    "1": "params[0]"
                },
                "puVar1[1]": {
                    "1": "p_var[1]"
                },
                "param_1->param_1->value": {
                    "1": "parameters->parameters->value"
                },
                "param_1->param_1": {
                    "1": "parameters->parameters"
                },
                "param_1->param_1[1]": {
                    "1": "parameters->parameters[1]"
                },
                "param_1[1]": {
                    "1": "parameters[1]"
                },
                "!(param_1[0x14] == (uint *)0x0)": {
                    "1": "is_flag_not_null"
                },
                "(int)param_1 + 0x2a": {
                    "1": "short_value"
                }
            }
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 update_data_08001420(int *data)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)byte_array;\n    byte_array = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "param_1[9]": "byte_array"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001420": {
                    "1": "update_and_decrement_counter",
                    "2": "update_pointer",
                    "6": "update_value",
                    "8": "update_data"
                },
                "param_1": {
                    "1": "offset_list",
                    "9": "data",
                    "5": "array",
                    "2": "pointer",
                    "3": "input_array"
                },
                "pbVar1": {
                    "5": "current_byte",
                    "15": "byte_pointer",
                    "1": "byte_value",
                    "4": "byte_array"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "3": "short_value",
                    "4": "count",
                    "1": "remaining_bytes"
                },
                "param_1[9]": {
                    "1": "byte_array"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "memory_location",
                    "2": "target"
                },
                "PTR_DAT_00102400": {
                    "1": "data_pointer"
                },
                "(int)(pbVar1 + 1)": {
                    "1": "updated_pointer"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "2": "updated_count",
                    "1": "updated_short_value"
                },
                "*param_1": {
                    "1": "value_ptr"
                },
                "*param_1 + 0x10": {
                    "1": "target_address"
                },
                "(int)param_1 + 0x2a": {
                    "1": "param_offset"
                }
            }
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_data_08001440",
            "code": "\nundefined4 update_data_08001440(int *array)\n\n{\n  undefined *pointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    pointer = (undefined *)array;\n    array = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "array",
                "puVar1": "pointer",
                "param_1[9]": "array"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001440": {
                    "1": "update_character",
                    "2": "update_value_in_array",
                    "4": "update_parameter",
                    "3": "update_array_value",
                    "5": "update_data"
                },
                "param_1": {
                    "7": "data",
                    "9": "array",
                    "1": "short_array",
                    "2": "param_array",
                    "4": "parameter"
                },
                "puVar1": {
                    "2": "ptr_data",
                    "3": "ptr_to_value",
                    "1": "current_value",
                    "4": "ptr",
                    "5": "pointer"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "3": "count",
                    "1": "length"
                },
                "*(undefined4 *)(*param_1 + 0x10)": {
                    "2": "char_value",
                    "1": "source_value"
                },
                "param_1[9]": {
                    "1": "ptr_data_array",
                    "2": "array"
                },
                "*puVar1": {
                    "1": "current_value",
                    "3": "value",
                    "2": "updated_value"
                },
                "*(short *)((int)parameter + 0x2a)": {
                    "2": "short_value"
                },
                "*(undefined4 *)(*parameter + 0x10)": {
                    "1": "undefined_value"
                },
                "*(short *)((int)param_1 + 0x2a) + -1": {
                    "1": "updated_count"
                },
                "(undefined4 *)(*param_1 + 0x10)": {
                    "1": "value_to_be_copied"
                },
                "(int)param_1 + 0x2a": {
                    "1": "ptr_to_short"
                },
                "(puVar1 + 1)": {
                    "1": "updated_pointer"
                },
                "*(short *)((int)parameter + 0x2a) + -1": {
                    "1": "updated_short_value"
                },
                "*param_1": {
                    "1": "data_ptr_value"
                },
                "*(short *)((int)valueList + 0x2a)": {
                    "1": "value_count"
                },
                "*(undefined4 *)(*valueList + 0x10)": {
                    "1": "new_value"
                },
                "puVar1 + 1": {
                    "1": "next_element_ptr"
                }
            }
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_input_08001460",
            "code": "\nundefined4 validate_input_08001460(uint **input_data,uint *param_ptr,int input_size,uint *output_array)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (param_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x29;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      arg_1_plus_0x10 = (uint *)0x0;\n      arg_1_plus_9 = param_ptr;\n      *(short *)((int)input_data + 0x2a) = (short)input_size;\n      arg_1_plus_0xb = output_array;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_input_08001460",
                "param_1": "input_data",
                "param_2": "param_ptr",
                "param_3": "input_size",
                "param_4": "output_array",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "arg_1_plus_0x10",
                "param_1[9]": "arg_1_plus_9",
                "param_1[0xb]": "arg_1_plus_0xb"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001460": {
                    "2": "parse_arguments",
                    "1": "handle_parenthesis_check",
                    "3": "initialize_parameters",
                    "5": "validate_input"
                },
                "param_1": {
                    "3": "data",
                    "2": "parameter_array",
                    "1": "input",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "param2",
                    "4": "param_ptr"
                },
                "param_3": {
                    "2": "data_size",
                    "1": "param3_size",
                    "4": "input_size",
                    "3": "length"
                },
                "param_4": {
                    "1": "data_pointer2",
                    "2": "result"
                },
                "uVar1": {
                    "3": "status",
                    "20": "result",
                    "7": "return_value"
                },
                "puVar2": {
                    "1": "temp_pointer",
                    "3": "pointer",
                    "2": "temp_ptr",
                    "5": "ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_at_index"
                },
                "*(char *)(param_1 + 0xf)": {
                    "1": "char_at_index_2"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_at_arg_1_plus_0xf"
                },
                "*param_1": {
                    "1": "dereferenced_arg_1"
                },
                "*puVar2": {
                    "1": "dereferenced_ptr"
                },
                "**(param_1)": {
                    "1": "double_dereferenced_arg_1"
                },
                "**(param_1) & 0xfffff7ff": {
                    "1": "masked_double_dereferenced_arg_1"
                },
                "param_1[0x10]": {
                    "1": "arg_1_plus_0x10"
                },
                "param_1[9]": {
                    "1": "array_element_9"
                },
                "param_1[0xb]": {
                    "1": "updated_param1_b"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_at_arg_1_plus_0x2a"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "updated_undefined2"
                },
                "(*param_1)[1]": {
                    "1": "dereferenced_arg_1_plus_1"
                },
                "*puVar2 & 1": {
                    "1": "bitwise_and_result"
                },
                "**param_1": {
                    "1": "double_dereference"
                },
                "**(uint **)(param_1 + 0x40)": {
                    "1": "double_dereference_2"
                },
                "**(uint **)(param_1 + 0x40) & 0xfffff7ff": {
                    "1": "final_bitwise_and_result"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_char"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_char_2"
                },
                "(int)param_1 + 0x3d": {
                    "1": "char_at_0x3d"
                },
                "(char *)(param_1 + 0xf)": {
                    "1": "char_at_0xf"
                },
                "(undefined *)(param_1 + 0xf)": {
                    "1": "undefined_at_0xf"
                },
                "(short *)((int)param_1 + 0x2a)": {
                    "1": "short_at_0x2a"
                }
            }
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "process_input_080014ec",
            "code": "\nundefined4 process_input_080014ec(uint **input_data,uint *data_ptr,int size,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      param_ptr_plus10 = (uint *)0x0;\n      param_ptr_plus9 = data_ptr;\n      *(short *)((int)input_data + 0x2a) = (short)size;\n      param_ptr_plus_b = output_data;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "process_input_080014ec",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "param_ptr_plus10",
                "param_1[9]": "param_ptr_plus9",
                "param_1[0xb]": "param_ptr_plus_b"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080014ec": {
                    "1": "initialize_process",
                    "6": "process_input",
                    "4": "process_data",
                    "5": "process_params",
                    "2": "initialize_data"
                },
                "param_1": {
                    "2": "parameters",
                    "1": "input_pointer",
                    "3": "data_pointer",
                    "8": "input_data"
                },
                "param_2": {
                    "1": "input_pointer",
                    "2": "input_data",
                    "4": "data_ptr"
                },
                "param_3": {
                    "3": "param_count",
                    "2": "output_size",
                    "1": "length",
                    "4": "size"
                },
                "param_4": {
                    "1": "param_c",
                    "6": "output_data",
                    "2": "output_param"
                },
                "uVar1": {
                    "2": "status",
                    "1": "result_status",
                    "16": "result",
                    "10": "return_value"
                },
                "puVar2": {
                    "3": "pointer_var",
                    "1": "ptr_var",
                    "4": "temp_ptr",
                    "2": "ptr_value",
                    "8": "ptr"
                },
                "**param_1": {
                    "1": "ptr_value1"
                },
                "*(undefined *)(param_1 + 0xf)": {
                    "1": "byte_var",
                    "2": "flag_value"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "4": "char_value",
                    "1": "condition"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_var1"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value3"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "4": "short_value",
                    "1": "short_var"
                },
                "*(undefined2 *)(param_1 + 10)": {
                    "1": "value"
                },
                "(*param_1)[1]": {
                    "1": "value2"
                },
                "(*puVar2 & 1)": {
                    "1": "bitwise_check"
                },
                "*(char *)(((int)dataPtr) + 0x3d)": {
                    "1": "data_flag"
                },
                "*(char *)(dataPtr + 0xf)": {
                    "1": "data_flag2"
                },
                "*(short *)(((int)dataPtr) + 0x2a)": {
                    "1": "short_value"
                },
                "*(char *)(param_1 + 0xf)": {
                    "4": "flag",
                    "1": "flag_value"
                },
                "param_1[0x10]": {
                    "1": "pointer1"
                },
                "param_1[9]": {
                    "1": "param_ptr_plus9"
                },
                "param_1[0xb]": {
                    "1": "pointer3"
                },
                "*puVar2 & 1": {
                    "1": "pointer_value"
                },
                "param_1[10]": {
                    "1": "temp_pointer2"
                },
                "*param_1": {
                    "1": "deref_param1"
                },
                "*puVar2": {
                    "1": "pointer_value"
                },
                "param_1 + 0xf": {
                    "1": "flag_ptr"
                }
            }
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initialize_data_08001578(uint **data_pointer)\n\n{\n  uint *first_element;\n  \n  if (*(char *)((int)data_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data_pointer + 0x3d) = 0x28;\n  first_element = *data_pointer;\n  if ((*first_element & 1) == 0) {\n    *first_element = *first_element | 1;\n  }\n  **data_pointer = **data_pointer | 0x400;\n  (*data_pointer)[1] = (*data_pointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "data_pointer",
                "puVar1": "first_element"
            },
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001578": {
                    "1": "update_flags_and_settings",
                    "2": "initialize_parameters",
                    "3": "initialize_data_structure",
                    "6": "initialize_data"
                },
                "param_1": {
                    "5": "data",
                    "1": "flags",
                    "6": "data_pointer",
                    "3": "parameter",
                    "4": "parameters",
                    "2": "param"
                },
                "puVar1": {
                    "1": "first_parameter",
                    "6": "first_element",
                    "3": "ptr"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "2": "char_value",
                    "1": "flag_character"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "updated_char"
                },
                "*puVar1 & 1": {
                    "1": "is_first_element_modified"
                },
                "*puVar1": {
                    "1": "updated_flag",
                    "2": "first_element_value"
                },
                "**param_1": {
                    "1": "flag_value",
                    "2": "first_element_value"
                },
                "(*param_1)[1]": {
                    "1": "value_at_index1",
                    "3": "second_element_value"
                },
                "*param_1": {
                    "1": "dereferenced_param_array",
                    "2": "pointer_to_parameters"
                },
                "(int)param_1 + 0x3d": {
                    "1": "offset_plus3_d"
                },
                "(*puVar1 & 1)": {
                    "1": "is_flag_bit_set"
                },
                "*(char *)((int)dataStructure + 0x3d)": {
                    "1": "value_at_offset"
                },
                "**dataStructure": {
                    "1": "value_pointed_at_by_data_structure"
                },
                "(*dataStructure)[1]": {
                    "1": "second_value_in_data_structure"
                },
                "0x28": {
                    "1": "updated_flag_char_value"
                },
                "1": {
                    "1": "flag_bit"
                },
                "0x400": {
                    "1": "flag_bit_value"
                },
                "0x300": {
                    "1": "secondary_flag_value"
                }
            }
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 process_data_080015bc(int *data)\n\n{\n  char character;\n  byte *byte_pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)byte_array;\n    byte_array = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      value = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_transmit_complete();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "byte_pointer",
                "HAL_I2C_SlaveTxCpltCallback": "handle_i2_c_transmit_complete",
                "param_1[9]": "byte_array",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080015bc": {
                    "1": "update_param_array",
                    "2": "parse_and_process_data",
                    "24": "process_data"
                },
                "param_1": {
                    "3": "input",
                    "23": "data",
                    "1": "input_data"
                },
                "cVar1": {
                    "9": "char_value",
                    "16": "character",
                    "2": "char_val",
                    "1": "closing_parenthesis"
                },
                "pbVar2": {
                    "11": "byte_ptr",
                    "16": "byte_pointer",
                    "2": "byte_array",
                    "1": "byte_data"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "1": "handle_i2_c_transmission_completion",
                    "2": "handle_i2_c_transmit_complete"
                },
                "*param_1": {
                    "1": "param_ptr"
                },
                "param_1[9]": {
                    "1": "byte_array"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "result"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "count"
                },
                "*(uint *)(*param_1 + 4)": {
                    "1": "flag"
                },
                "param_1[0xc]": {
                    "1": "value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "character"
                },
                "FUNC_080015ba": {
                    "1": "initialize_i2c_callback"
                }
            }
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 process_data_0800160e(int *data)\n\n{\n  char char_value;\n  undefined *ptr;\n  \n  char_value = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char_value == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handle_i2_c_receive_complete();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "char_value",
                "puVar2": "ptr",
                "HAL_I2C_SlaveRxCpltCallback": "handle_i2_c_receive_complete"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800160e": {
                    "1": "update_data",
                    "21": "process_data"
                },
                "param_1": {
                    "1": "parameters",
                    "19": "data",
                    "2": "input_data"
                },
                "cVar1": {
                    "3": "last_char",
                    "10": "char_value",
                    "8": "character",
                    "1": "first_character",
                    "2": "char_var"
                },
                "puVar2": {
                    "2": "byte_ptr",
                    "1": "undefined_ptr",
                    "3": "data_ptr",
                    "5": "pointer",
                    "9": "ptr"
                },
                "HAL_I2C_SlaveRxCpltCallback": {
                    "4": "handle_i2_c_receive_complete",
                    "1": "handle_i2_c_receive_complete_callback",
                    "2": "handle_i2_c_rx_cplt_callback"
                },
                "FUC_0800160c": {
                    "1": "process_receive_complete"
                },
                "FUNC_0800160c": {
                    "1": "callback"
                }
            }
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "i2c_address_callback_0800165a",
            "code": "\nundefined4 i2c_address_callback_0800165a(int *i2c_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 address;\n  uint flags;\n  \n  flags = *(uint *)(*i2c_data + 0x18);\n  if ((flags & 0x80) == 0) {\n    address = *(undefined2 *)(i2c_data + 3);\n  }\n  else {\n    address = *(undefined2 *)(i2c_data + 6);\n  }\n  invoke_address_callback(i2c_data,(*(uint *)(*i2c_data + 0x18) & 4) == 0,address,flags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "i2c_address_callback_0800165a",
                "param_1": "i2c_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "address",
                "uVar2": "flags",
                "HAL_I2C_AddrCallback": "invoke_address_callback"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800165a": {
                    "1": "process_i2_c_callback",
                    "3": "perform_i2_c_address_callback",
                    "8": "i2c_address_callback",
                    "2": "perform_i2_c_operation"
                },
                "param_1": {
                    "1": "i2c_device",
                    "14": "i2c_data",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "arg2",
                    "21": "param2",
                    "2": "callback_param1"
                },
                "param_3": {
                    "1": "arg3",
                    "2": "callback_param2",
                    "21": "param3"
                },
                "param_4": {
                    "2": "callback_param3",
                    "22": "param4",
                    "1": "value2"
                },
                "uVar1": {
                    "7": "address",
                    "1": "i2c_address",
                    "6": "selected_value",
                    "5": "selected_address",
                    "2": "callback_value"
                },
                "uVar2": {
                    "4": "flag",
                    "2": "data_value",
                    "1": "i2c_status",
                    "3": "address_value",
                    "5": "flags"
                },
                "HAL_I2C_AddrCallback": {
                    "1": "perform_i2_c_address_callback"
                }
            }
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "handle_i2_c_event_08001684",
            "code": "\nundefined4 handle_i2_c_event_08001684(uint **event_data)\n\n{\n  if (((data[11] == (uint *)0x4) || (data[11] == (uint *)0x8)) &&\n     (*(char *)(event_data_addr + 0x3d) == '(')) {\n    data[11] = (uint *)0xffff0000;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    data[12] = (uint *)0x0;\n    *(undefined *)(event_data_addr + 0x3d) = 0x20;\n    *(undefined *)(event_data_addr + 0x3e) = 0;\n    perform_listen_callback;\n  }\n  else if (*(char *)(event_data_addr + 0x3d) == '!') {\n    data[11] = (uint *)0xffff0000;\n    data[12] = (uint *)0x21;\n    *(undefined *)(event_data_addr + 0x3d) = 0x20;\n    *(undefined *)(event_data_addr + 0x3e) = 0;\n    (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n    (*event_data)[5] = 0xfffffbff;\n    **event_data = **event_data & 0xfffffbff;\n    perform_tx_callback;\n  }\n  else {\n    (*event_data)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "handle_i2_c_event_08001684",
                "param_1": "event_data",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]",
                "HAL_I2C_ListenCpltCallback": "handle_listen_complete",
                "HAL_I2C_SlaveTxCpltCallback": "perform_slave_tx_complete_callback",
                "HAL_I2C_ListenCpltCallback()": "perform_listen_callback",
                "HAL_I2C_SlaveTxCpltCallback()": "perform_tx_callback",
                "(int)param_1": "event_data_addr"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001684": {
                    "1": "perform_operation",
                    "3": "process_i2_c_data",
                    "2": "process_i2_c_event",
                    "9": "handle_i2_c_event"
                },
                "param_1": {
                    "3": "param",
                    "10": "event_data",
                    "4": "param_array",
                    "1": "operation_params",
                    "2": "input_data"
                },
                "param_1[0xb]": {
                    "1": "condition_check",
                    "2": "event_data[11]"
                },
                "param_1[0xc]": {
                    "1": "param[12]",
                    "2": "data[12]"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_check"
                },
                "(*param_1)[1]": {
                    "1": "i2c_params->second_element",
                    "2": "value1"
                },
                "(*param_1)[5]": {
                    "1": "param_1_5",
                    "2": "value2"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "3": "handle_listen_complete",
                    "2": "handle_i2_c_listen_complete",
                    "1": "i2c_listen_complete_callback"
                },
                "HAL_I2C_SlaveTxCpltCallback": {
                    "2": "perform_slave_tx_complete_callback",
                    "1": "i2c_slave_tx_complete_callback"
                },
                "$param_1": {
                    "1": "$event"
                },
                "FUN_080015ba": {
                    "1": "handle_listen_complete"
                },
                "FUN_080038d0": {
                    "1": "handle_slave_tx_complete"
                },
                "*(char *)((int)param_array + 0x3d)": {
                    "1": "char_value"
                },
                "*(undefined *)((int)param_array + 0x3d)": {
                    "1": "undefined_value"
                },
                "*(undefined *)((int)param_array + 0x3e)": {
                    "1": "undefined_zero_value"
                },
                "(*param_array)[1]": {
                    "1": "array_value1"
                },
                "(*param_array)[5]": {
                    "1": "array_value2"
                },
                "**param_array": {
                    "1": "pointer_value"
                },
                "**param_1": {
                    "1": "data3"
                },
                "(int)param_1 + 0x3d": {
                    "1": "param_array[13]"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "param_array[13]"
                },
                "(int)param_1 + 0x3e": {
                    "1": "param_array[14]"
                },
                "input_data": {
                    "1": "input_data"
                },
                "HAL_I2C_ListenCpltCallback()": {
                    "1": "perform_listen_callback"
                },
                "HAL_I2C_SlaveTxCpltCallback()": {
                    "1": "perform_tx_callback"
                },
                "(*param_1)": {
                    "1": "param_1"
                },
                "(int)param_1": {
                    "1": "event_data_addr"
                },
                "(uint *)0x4": {
                    "1": "data4"
                },
                "(uint *)0x8": {
                    "1": "data8"
                },
                "(uint *)0xffff0000": {
                    "1": "error_value"
                },
                "(undefined *)0x20": {
                    "1": "space_char"
                },
                "(uint *)0x0": {
                    "1": "null_data"
                },
                "(char *)((int)param_1 + 0x3d)": {
                    "1": "event_char"
                },
                "(char *)((int)param_1 + 0x3e)": {
                    "1": "null_terminator"
                },
                "(uint *)0x21": {
                    "1": "const_data"
                },
                "(HAL_I2C_ListenCpltCallback)": {
                    "1": "handle_listen_complete"
                },
                "(HAL_I2C_SlaveTxCpltCallback)": {
                    "1": "handle_slave_tx_complete"
                },
                "**(uint **)(param_1)": {
                    "1": "event_data_value"
                },
                "inputData[0xb]": {
                    "1": "action_code"
                },
                "inputData[0xc]": {
                    "1": "error_status"
                },
                "*param_1": {
                    "1": "param_1_deref"
                },
                "0xb": {
                    "1": "event_status"
                },
                "0xc": {
                    "1": "callback_status"
                }
            }
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 process_data_0800171a(uint **data)\n\n{\n  char character;\n  uint *ptr;\n  \n  character = *(char *)((int)data + 0x3d);\n  ptr = ptr_value2;\n  if ((*(short *)(data + 10) == 0) && (character == '!')) {\n    if ((ptr == (uint *)0x4) || ((ptr == (uint *)0x8 || (ptr == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      ptr_value3 = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_mem_tx_cplt();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        handle_master_tx_cplt();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      ptr_value3 = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      handle_master_tx_cplt();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (ptr_value4 == (uint *)0x0) {\n        if (ptr_value5 == (uint *)0x1) {\n          (*data)[4] = (uint)ptr_value6 & 0xff;\n          ptr_value4 = (uint *)((int)ptr_value4 + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)ptr_value6 << 0x10) >> 0x18;\n          ptr_value4 = (uint *)((int)ptr_value4 + 1);\n        }\n      }\n      else if (ptr_value4 == (uint *)0x1) {\n        (*data)[4] = (uint)ptr_value6 & 0xff;\n        ptr_value4 = (uint *)((int)ptr_value4 + 1);\n      }\n      else if (ptr_value4 == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptr = data[9];\n          data[9] = (uint *)((int)ptr + 1);\n          (*data)[4] = (uint)*(byte *)ptr;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "ptr",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt",
                "param_1[0xb]": "ptr_value2",
                "param_1[0xc]": "ptr_value3",
                "param_1[0x14]": "ptr_value4",
                "param_1[0x13]": "ptr_value5",
                "param_1[0x12]": "ptr_value6"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800171a": {
                    "1": "process_param",
                    "5": "process_i2_c_data",
                    "21": "process_data"
                },
                "param_1": {
                    "1": "input_param",
                    "22": "data",
                    "2": "input_data"
                },
                "cVar1": {
                    "1": "char_check",
                    "3": "char_value",
                    "9": "character",
                    "4": "first_char",
                    "2": "char_var",
                    "6": "char1"
                },
                "puVar2": {
                    "5": "pointer_var",
                    "2": "ptr_val",
                    "1": "temp_pointer",
                    "7": "pointer",
                    "9": "ptr",
                    "4": "ptr_value"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "1": "mem_tx_completion_callback",
                    "2": "mem_tx_complete_callback",
                    "18": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "18": "handle_master_tx_cplt",
                    "1": "execute_master_transfer_complete_callback",
                    "2": "master_tx_complete_callback"
                },
                "(*param_1)": {
                    "1": "data_value"
                },
                "(**param_1)": {
                    "1": "data_value2"
                },
                "param_1[0xb]": {
                    "1": "ptr_value2"
                },
                "param_1[0xc]": {
                    "1": "ptr_value3"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "char_value2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "char_value3"
                },
                "param_1[0x14]": {
                    "1": "ptr_value4"
                },
                "param_1[0x13]": {
                    "1": "ptr_value5"
                },
                "param_1[0x12]": {
                    "1": "ptr_value6"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "char_value4"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "short_value"
                },
                "FUNC_08001718": {
                    "1": "function_a"
                },
                "FUNC_080015b6": {
                    "1": "function_b"
                },
                "memTxCompleteCallback": {
                    "1": "mem_tx_callback"
                },
                "masterTxCompleteCallback": {
                    "1": "master_tx_callback"
                }
            }
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_data_08001864",
            "code": "\nundefined4 process_data_08001864(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        ptr_value3 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          mem_tx_cplt_callback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          master_tx_cplt_callback();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        ptr_value3 = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        master_tx_cplt_callback();\n      }\n    }\n    else {\n      value = ptr_value4;\n      ptr_value4 = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data",
                "puVar1": "value",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_cplt",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_cplt",
                "param_1[0xc]": "ptr_value3",
                "HAL_I2C_MemTxCpltCallback()": "mem_tx_cplt_callback()",
                "HAL_I2C_MasterTxCpltCallback()": "master_tx_cplt_callback()",
                "param_1[9]": "ptr_value4"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001864": {
                    "1": "update_data",
                    "2": "handle_i2_c_event",
                    "15": "process_data"
                },
                "param_1": {
                    "14": "data",
                    "1": "config_params",
                    "3": "input_data"
                },
                "puVar1": {
                    "2": "current_value",
                    "1": "pointer1",
                    "9": "value",
                    "4": "ptr",
                    "3": "ptr_value"
                },
                "HAL_I2C_MemTxCpltCallback": {
                    "2": "handle_mem_tx_cplt_callback",
                    "4": "handle_mem_tx_complete",
                    "1": "handle_memory_transmission_complete",
                    "13": "handle_mem_tx_cplt"
                },
                "HAL_I2C_MasterTxCpltCallback": {
                    "2": "handle_master_tx_cplt_callback",
                    "13": "handle_master_tx_cplt",
                    "1": "master_tx_complete_callback",
                    "4": "handle_master_tx_complete"
                },
                "FUNC_08001718": {
                    "1": "helper_function1"
                },
                "FUNC_080015b6": {
                    "1": "helper_function2"
                },
                "*(char *)((int)param_1 + 0x3d)": {
                    "1": "condition_char"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "condition_short"
                },
                "(*param_1)[1]": {
                    "1": "ptr_value1"
                },
                "**param_1": {
                    "1": "ptr_value2"
                },
                "param_1[0xc]": {
                    "1": "ptr_value3"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "char_value"
                },
                "HAL_I2C_MemTxCpltCallback()": {
                    "1": "handle_mem_tx_cplt_callback"
                },
                "HAL_I2C_MasterTxCpltCallback()": {
                    "1": "handle_master_tx_cplt_callback"
                },
                "param_1[9]": {
                    "1": "ptr_value4"
                },
                "(*param_1)[4]": {
                    "1": "ptr_value5"
                }
            }
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_data_08001904",
            "code": "\nundefined4 process_data_08001904(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) < 2) {\n        **data = **data & 0xfffffbff;\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        temp_ptr = data[9];\n        data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_mem_rx_cplt;\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handle_master_rx_cplt;\n        }\n      }\n    }\n    else {\n      temp_ptr = data[9];\n      data[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n      if (*(short *)((int)data + 0x2a) == 3) {\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_data_08001904",
                "param_1": "data",
                "puVar1": "temp_ptr",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt",
                "HAL_I2C_MemRxCpltCallback()": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback()": "handle_master_rx_cplt"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001904": {
                    "1": "update_param_data",
                    "20": "process_data",
                    "2": "process_param"
                },
                "param_1": {
                    "1": "input_data",
                    "22": "data",
                    "2": "param"
                },
                "puVar1": {
                    "3": "temp_var",
                    "1": "ptr_char",
                    "12": "temp_ptr",
                    "5": "ptr",
                    "2": "temp_pointer"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "2": "handle_i2_c_mem_rx_cplt",
                    "1": "handle_memory_receive_complete",
                    "16": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "16": "handle_master_rx_cplt",
                    "2": "handle_i2_c_master_rx_cplt",
                    "1": "on_i2_c_master_read_complete"
                },
                "HAL_I2C_MemRxCpltCallback()": {
                    "1": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback()": {
                    "1": "handle_master_rx_cplt"
                }
            }
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 process_data_080019a0(uint **data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    temp_ptr = memory_pointer;\n    memory_pointer = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    temp_ptr = memory_pointer;\n    memory_pointer = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    temp_ptr = memory_pointer;\n    memory_pointer = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    temp_ptr = memory_pointer;\n    memory_pointer = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    memory_pointer2 = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_mem_rx_cplt();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_master_rx_cplt();\n    }\n  }\n  else {\n    temp_ptr = memory_pointer;\n    memory_pointer = (uint *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "temp_ptr",
                "HAL_I2C_MemRxCpltCallback": "handle_mem_rx_cplt",
                "HAL_I2C_MasterRxCpltCallback": "handle_master_rx_cplt",
                "param_1[9]": "memory_pointer",
                "param_1[0xc]": "memory_pointer2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080019a0": {
                    "2": "process_parameter",
                    "23": "process_data",
                    "1": "process_command"
                },
                "param_1": {
                    "17": "data",
                    "1": "param",
                    "3": "data_ptr",
                    "2": "parameter"
                },
                "puVar1": {
                    "1": "pointer_variable",
                    "6": "temp",
                    "10": "temp_ptr",
                    "4": "temp_var",
                    "2": "temp_pointer"
                },
                "HAL_I2C_MemRxCpltCallback": {
                    "3": "handle_i2_c_mem_rx_cplt",
                    "2": "handle_memory_receive_complete",
                    "7": "handle_mem_rx_cplt"
                },
                "HAL_I2C_MasterRxCpltCallback": {
                    "7": "handle_master_rx_cplt",
                    "3": "handle_i2_c_master_rx_cplt",
                    "2": "handle_master_rx_cplt_callback"
                },
                "FUNC_08001902": {
                    "1": "callback_function_a"
                },
                "FUNC_080015b8": {
                    "1": "function2"
                },
                "*(short *)((int)param_1 + 0x2a)": {
                    "1": "parameter_value"
                },
                "(*param_1)[1]": {
                    "1": "value1"
                },
                "(*param_1)[4]": {
                    "1": "value2"
                },
                "param_1[9]": {
                    "1": "memory_pointer"
                },
                "*(char *)puVar1": {
                    "1": "char_value"
                },
                "*(short *)((int)param_1 + 0x3e)": {
                    "1": "char_value2"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "undefined_value"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "undefined_value2"
                },
                "param_1[0xc]": {
                    "1": "memory_pointer2"
                }
            }
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "handle_i2_c_event_08001ab0",
            "code": "\nvoid handle_i2_c_event_08001ab0(uint **event_data)\n\n{\n  int result;\n  uint *char_ptr;\n  uint *event_ptr;\n  \n  if (*(byte *)((int)event_data + 0x3d) - 0x29 < 2) {\n    param_1_c = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)event_data + 0x3d) != '`') && (((*event_data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n    }\n    param_1_c = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n  }\n  **event_data = **event_data & 0xfffff7ff;\n  event_ptr = *event_data;\n  if ((event_ptr[1] & 0x800) == 0) {\n    if (*(char *)((int)event_data + 0x3d) == '`') {\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n      param_1_10 = (uint *)0x0;\n      if ((event_ptr[5] & 0x40) != 0) {\n        char_ptr = event_data[9];\n        event_data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)event_ptr[4];\n      }\n      **event_data = **event_data & 0xfffffffe;\n      handle_i2_c_abort_complete(event_data);\n    }\n    else {\n      if ((event_ptr[5] & 0x40) != 0) {\n        char_ptr = event_data[9];\n        event_data[9] = (uint *)((int)char_ptr + 1);\n        *(char *)char_ptr = (char)event_ptr[4];\n      }\n      handle_i2_c_error(event_data);\n    }\n  }\n  else {\n    event_ptr[1] = event_ptr[1] & 0xfffff7ff;\n    if (*(char *)((int)dma_data1 + 0x35) == '\\x01') {\n      alt_dma_abort_callback_address = (uint)&dma_callback;\n      result = abort_dma_it_event_data_e;\n      if (result != 0) {\n        if (((*event_data)[5] & 0x40) != 0) {\n          event_ptr = event_data[9];\n          event_data[9] = (uint *)((int)event_ptr + 1);\n          *(char *)event_ptr = (char)(*event_data)[4];\n        }\n        **event_data = **event_data & 0xfffffffe;\n        *(undefined *)((int)event_data + 0x3d) = 0x20;\n        (*(code *)alt_dma_abort_callback_address)();\n      }\n    }\n    else {\n      dma_abort_callback_address = (uint)&dma_callback;\n      result = abort_dma_it_event_data_d;\n      if (result != 0) {\n        **event_data = **event_data & 0xfffffffe;\n        *(undefined *)((int)event_data + 0x3d) = 0x20;\n        (*(code *)dma_abort_callback_address)();\n      }\n    }\n  }\n  if ((*(char *)((int)event_data + 0x3d) == '(') && (((uint)param_1_10 & 4) != 0)) {\n    some_value_pointer = (uint *)0xffff0000;\n    param_1_c = (uint *)0x0;\n    *(undefined *)((int)event_data + 0x3d) = 0x20;\n    *(undefined *)((int)event_data + 0x3e) = 0;\n    handle_i2_c_listen_complete;\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "event_data",
                "iVar1": "result",
                "puVar2": "char_ptr",
                "puVar3": "event_ptr",
                "FUN_08001ab0": "handle_i2_c_event_08001ab0",
                "HAL_I2C_AbortCpltCallback": "handle_i2_c_abort_complete",
                "HAL_I2C_ErrorCallback": "handle_i2_c_error",
                "param_1[0xd]": "dma_data1",
                "param_1[0xe]": "dma_data2",
                "LAB_08001f3c_1": "dma_callback",
                "HAL_DMA_Abort_IT": "abort_dma",
                "param_1[0xb]": "some_value_pointer",
                "HAL_I2C_ListenCpltCallback": "handle_i2_c_listen_complete",
                "param_1[0xd][0x14]": "dma_abort_callback_address",
                "param_1[0xe][0x14]": "alt_dma_abort_callback_address",
                "param_1[0xc]": "param_1_c",
                "HAL_DMA_Abort_IT(param_1[0xe])": "abort_dma_it_event_data_e",
                "HAL_DMA_Abort_IT(param_1[0xd])": "abort_dma_it_event_data_d",
                "param_1[0x10]": "param_1_10",
                "HAL_I2C_ListenCpltCallback(param_1)": "handle_i2_c_listen_complete"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08003900",
                "FUN_08000f8c",
                "FUN_08001aac",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "4": "data",
                    "2": "input_data",
                    "13": "event_data",
                    "1": "event_data_ptr"
                },
                "iVar1": {
                    "1": "dma_error",
                    "5": "return_value",
                    "3": "index",
                    "2": "status",
                    "13": "result"
                },
                "puVar2": {
                    "1": "pu_var_temp",
                    "4": "ptr2",
                    "5": "char_ptr",
                    "2": "pointer_1",
                    "3": "temp_ptr1"
                },
                "puVar3": {
                    "1": "i2c_reg",
                    "2": "ptr2",
                    "3": "temp_ptr2",
                    "6": "event_ptr",
                    "4": "ptr3"
                },
                "FUN_08001ab0": {
                    "3": "process_i2_c_data",
                    "2": "process_i2_c_event",
                    "1": "handle_i2_c_operation",
                    "15": "handle_i2_c_event"
                },
                "HAL_I2C_AbortCpltCallback": {
                    "4": "handle_i2_c_abort_complete",
                    "2": "on_i2_c_abort_complete"
                },
                "HAL_I2C_ErrorCallback": {
                    "4": "handle_i2_c_error",
                    "2": "on_i2_c_error"
                },
                "param_1[0xd]": {
                    "1": "param_1_d"
                },
                "param_1[0xe]": {
                    "1": "dma_data2"
                },
                "LAB_08001f3c_1": {
                    "1": "callback_function"
                },
                "HAL_DMA_Abort_IT": {
                    "5": "abort_dma"
                },
                "(*param_1)[4]": {
                    "1": "some_value"
                },
                "(*(code *)param_1[0xe][0x14])()": {
                    "1": "execute_alt_dma_abort_callback"
                },
                "(*(code *)param_1[0xd][0x14])()": {
                    "1": "execute_dma_abort_callback"
                },
                "param_1[0xb]": {
                    "1": "param_1_b"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "3": "handle_i2_c_listen_complete",
                    "2": "on_i2_c_listen_complete"
                },
                "param_1[0xd][0x14]": {
                    "1": "dma_abort_callback_address"
                },
                "param_1[0xe][0x14]": {
                    "1": "alt_dma_abort_callback_address"
                },
                "param_1[0xc]": {
                    "1": "param_1_c"
                },
                "*(undefined *)((int)param_1 + 0x3d)": {
                    "1": "event_status_new"
                },
                "*(undefined *)((int)param_1 + 0x3e)": {
                    "1": "flag_new"
                },
                "**(param_1)": {
                    "1": "event_data_content"
                },
                "*(char *)((int)param_1 + 0x3e)": {
                    "1": "event_character"
                },
                "*(char *)((int)param_1[0xd] + 0x35)": {
                    "1": "flag2"
                },
                "HAL_DMA_Abort_IT(param_1[0xe])": {
                    "1": "abort_dma_it_event_data_e"
                },
                "HAL_DMA_Abort_IT(param_1[0xd])": {
                    "1": "abort_dma_it_event_data_d"
                },
                "param_1[0x10]": {
                    "1": "param_1_10"
                },
                "HAL_I2C_ListenCpltCallback(param_1)": {
                    "1": "handle_i2_c_listen_complete"
                }
            }
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_data_08001bfc",
            "code": "\nundefined4 process_data_08001bfc(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_listen_complete();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handle_slave_rx_complete();\n    }\n  }\n  else {\n    handle_i2c_error();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2",
                "FUN_08001bfc": "process_data_08001bfc",
                "HAL_I2C_ListenCpltCallback": "handle_listen_complete",
                "HAL_I2C_SlaveRxCpltCallback": "handle_slave_rx_complete",
                "I2C_ITError": "handle_i2c_error"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "13": "data",
                    "1": "input_pointer",
                    "2": "parameters",
                    "4": "i2c_data"
                },
                "cVar1": {
                    "3": "char_value",
                    "13": "character",
                    "8": "first_char",
                    "1": "char_var1"
                },
                "puVar2": {
                    "1": "ptr_data",
                    "2": "pointer_1",
                    "9": "pointer1"
                },
                "puVar3": {
                    "9": "pointer2",
                    "1": "pointer_var3",
                    "2": "temp_param",
                    "4": "ptr2"
                },
                "FUN_08001bfc": {
                    "7": "process_i2_c_data",
                    "12": "process_data",
                    "1": "improve_and_process_i2_c_data"
                },
                "FUN_08001ab0": {
                    "1": "process_i2_c_data"
                },
                "FUNC_0800160c": {
                    "1": "i2_c_it_error"
                },
                "FUN_080038d0": {
                    "1": "i2_c_it_error_callback"
                },
                "HAL_I2C_ListenCpltCallback": {
                    "1": "handle_listen_complete"
                },
                "HAL_I2C_SlaveRxCpltCallback": {
                    "1": "handle_slave_rx_complete"
                },
                "I2C_ITError": {
                    "1": "handle_i2c_error"
                }
            }
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_i2_c_operation_08001d00",
            "code": "\nvoid process_i2_c_operation_08001d00(int *event_data)\n\n{\n  int data;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  data = *event_data;\n  flag3 = *(uint *)(data + 0x18);\n  flag1 = *(uint *)(data + 0x14);\n  flag2 = *(uint *)(data + 4);\n  if ((*(char *)((int)event_data + 0x3e) == '\\x10') || (*(char *)((int)event_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          handle_master_address(event_data);\n        }\n      }\n      else {\n        handle_master_add10(event_data);\n      }\n    }\n    else {\n      handle_master_sb(event_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        handle_master_receive_rxne(event_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        handle_master_receive_btf(event_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        handle_master_transmit_txe(event_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        master_transmit_btf(event_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      i2c_process_slave_address;\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      handle_slave_stopf(event_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        handle_slave_receive_rxne(event_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        handle_slave_receive_btf(event_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        handle_slave_transmit_txe(event_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        handle_slave_transmit_btf(event_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_i2_c_operation_08001d00",
                "param_1": "event_data",
                "iVar1": "data",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3",
                "I2C_Slave_ADDR()": "i2c_process_slave_address",
                "I2C_Master_ADDR": "handle_master_address",
                "I2C_Master_ADD10": "handle_master_add10",
                "I2C_Master_SB": "handle_master_sb",
                "I2C_MasterReceive_RXNE": "handle_master_receive_rxne",
                "I2C_MasterReceive_BTF": "handle_master_receive_btf",
                "I2C_MasterTransmit_TXE": "handle_master_transmit_txe",
                "I2C_MasterTransmit_BTF": "master_transmit_btf",
                "I2C_Slave_ADDR": "handle_slave_address",
                "I2C_Slave_STOPF": "handle_slave_stopf",
                "I2C_SlaveReceive_RXNE": "handle_slave_receive_rxne",
                "I2C_SlaveReceive_BTF": "handle_slave_receive_btf",
                "I2C_SlaveTransmit_TXE": "handle_slave_transmit_txe",
                "I2C_SlaveTransmit_BTF": "handle_slave_transmit_btf"
            },
            "calling": [],
            "called": [
                "FUN_08001904",
                "FUN_08001440",
                "FUN_080011c0",
                "FUN_0800160e",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800171a",
                "FUN_08001864",
                "FUN_0800124a",
                "FUN_08001bfc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_080019a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001d00": {
                    "1": "handle_i2_c_interrupt",
                    "2": "process_i2_c",
                    "5": "process_i2_c_event",
                    "4": "handle_i2_c_event"
                },
                "param_1": {
                    "3": "data",
                    "1": "interrupt_data",
                    "7": "event_data",
                    "2": "i2c_data",
                    "6": "data_ptr"
                },
                "iVar1": {
                    "5": "data",
                    "2": "value",
                    "1": "data_value",
                    "4": "event"
                },
                "uVar2": {
                    "1": "i2c_status1",
                    "2": "event_flags",
                    "7": "flag1"
                },
                "uVar3": {
                    "1": "bits2",
                    "2": "status2",
                    "7": "flag2",
                    "3": "status_reg"
                },
                "uVar4": {
                    "1": "status_flags3",
                    "7": "flag3",
                    "3": "control_reg",
                    "2": "status_flag3"
                },
                "I2C_Master_ADDR()": {
                    "1": "i2c_process_master_address"
                },
                "I2C_Master_ADD10()": {
                    "1": "i2c_process_master_add10"
                },
                "I2C_Master_SB()": {
                    "1": "i2c_process_master_sb"
                },
                "I2C_MasterReceive_RXNE()": {
                    "1": "i2c_process_master_receive_rxne"
                },
                "I2C_MasterReceive_BTF()": {
                    "1": "i2c_process_master_receive_btf"
                },
                "I2C_MasterTransmit_TXE()": {
                    "1": "i2c_process_master_transmit_txe"
                },
                "I2C_MasterTransmit_BTF()": {
                    "1": "i2c_process_master_transmit_btf"
                },
                "I2C_Slave_ADDR()": {
                    "1": "i2c_process_slave_address"
                },
                "I2C_Slave_STOPF()": {
                    "1": "i2c_process_slave_stopf"
                },
                "I2C_SlaveReceive_RXNE()": {
                    "1": "i2c_process_slave_receive_rxne"
                },
                "I2C_SlaveReceive_BTF()": {
                    "1": "i2c_process_slave_receive_btf"
                },
                "I2C_SlaveTransmit_TXE()": {
                    "1": "i2c_process_slave_transmit_txe"
                },
                "I2C_SlaveTransmit_BTF()": {
                    "1": "i2c_process_slave_transmit_btf"
                },
                "I2C_Master_ADDR": {
                    "2": "handle_master_address",
                    "1": "master_address"
                },
                "I2C_Master_ADD10": {
                    "1": "master_address10",
                    "2": "handle_master_add10"
                },
                "I2C_Master_SB": {
                    "1": "master_sb_interrupt",
                    "2": "handle_master_sb"
                },
                "I2C_MasterReceive_RXNE": {
                    "1": "process_master_receive_rxne",
                    "2": "handle_master_receive_rxne"
                },
                "I2C_MasterReceive_BTF": {
                    "2": "handle_master_receive_btf",
                    "1": "master_receive_btf_interrupt"
                },
                "I2C_MasterTransmit_TXE": {
                    "1": "process_master_transmit_txe",
                    "2": "handle_master_transmit_txe"
                },
                "I2C_MasterTransmit_BTF": {
                    "1": "handle_master_transmit_btf"
                },
                "I2C_Slave_ADDR": {
                    "1": "slave_address_interrupt",
                    "2": "handle_slave_address"
                },
                "I2C_Slave_STOPF": {
                    "1": "process_slave_stopf",
                    "2": "handle_slave_stopf"
                },
                "I2C_SlaveReceive_RXNE": {
                    "1": "slave_receive_rxne",
                    "2": "handle_slave_receive_rxne"
                },
                "I2C_SlaveReceive_BTF": {
                    "1": "process_slave_receive_btf",
                    "2": "handle_slave_receive_btf"
                },
                "I2C_SlaveTransmit_TXE": {
                    "1": "slave_transmit_txe_interrupt",
                    "2": "handle_slave_transmit_txe"
                },
                "I2C_SlaveTransmit_BTF": {
                    "1": "slave_transmit_btf_interrupt",
                    "2": "handle_slave_transmit_btf"
                },
                "FUNK_08001d00": {
                    "1": "process_i2_c_status"
                }
            }
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_i2_c_status_08001e68",
            "code": "\nvoid update_i2_c_status_08001e68(uint **params)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *params;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 2);\n    (*params)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)params + 0x3d);\n    if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (params[0xc] == (uint *)0x21)))))) {\n      handle_i2_c_slave_af(params);\n    }\n    else {\n      params[0x10] = (uint *)((uint)params[0x10] | 4);\n      if (*(char *)((int)params + 0x3e) == '\\x10') {\n        **params = **params | 0x200;\n      }\n      (*params)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    params[0x10] = (uint *)((uint)params[0x10] | 8);\n    (*params)[5] = 0xfffff7ff;\n  }\n  if (params[0x10] != (uint *)0x0) {\n    handle_i2_cit_error(params);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_i2_c_status_08001e68",
                "param_1": "params",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2",
                "I2C_Slave_AF": "handle_i2_c_slave_af",
                "I2C_ITError": "handle_i2_cit_error"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001e68": {
                    "1": "update_flags",
                    "2": "process_flags",
                    "3": "update_status",
                    "10": "update_i2_c_status"
                },
                "param_1": {
                    "1": "flags",
                    "4": "parameters",
                    "3": "param",
                    "2": "i2c_status"
                },
                "cVar1": {
                    "2": "current_char",
                    "7": "char_value",
                    "9": "character",
                    "1": "value_c",
                    "3": "char1",
                    "4": "char_var"
                },
                "puVar2": {
                    "1": "pointer_value",
                    "3": "param_ptr",
                    "12": "ptr"
                },
                "uVar3": {
                    "1": "state_value1",
                    "4": "status1",
                    "2": "status_value",
                    "3": "status_flag",
                    "6": "value1"
                },
                "uVar4": {
                    "2": "var2",
                    "1": "state_value2",
                    "4": "status2",
                    "6": "value2",
                    "3": "flag2"
                },
                "I2C_Slave_AF": {
                    "1": "handle_i2_c_error",
                    "4": "handle_i2_c_slave_af"
                },
                "I2C_ITError": {
                    "2": "handle_i2_c_error",
                    "1": "handle_i2_c_it_error",
                    "3": "handle_it_error"
                },
                "*param_1": {
                    "1": "i2c_state"
                },
                "FUN_08001ab0": {
                    "1": "handle_slave_af"
                },
                "FUN_08001684": {
                    "1": "handle_it_error"
                }
            }
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "initialize_system_08001f9c",
            "code": "\n\n\nundefined4 initialize_system_08001f9c(void)\n\n{\n  int start_time;\n  int current_time;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  start_time = get_system_time();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      start_time = get_system_time();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_time = get_system_time();\n      } while ((uint)(current_time - start_time) < 0x3e9);\n      return 3;\n    }\n    current_time = get_system_time();\n  } while ((uint)(current_time - start_time) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "initialize_system_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "HAL_GetTick": "get_system_time"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08001f9c": {
                    "1": "poll_for_event",
                    "4": "check_system_status",
                    "6": "initialize_system",
                    "2": "check_status"
                },
                "iVar1": {
                    "1": "current_time",
                    "2": "start_tick",
                    "23": "start_time",
                    "3": "start_ticks"
                },
                "iVar2": {
                    "3": "current_ticks",
                    "2": "current_tick",
                    "24": "current_time",
                    "1": "current_tick_count"
                },
                "_DAT_40023840": {
                    "1": "system_status"
                },
                "_DAT_420e0040": {
                    "1": "register2"
                },
                "_DAT_40007004": {
                    "1": "register2"
                },
                "_DAT_420e0044": {
                    "1": "flag2"
                },
                "HAL_GetTick": {
                    "1": "get_system_time"
                }
            }
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_control_0800201c",
            "code": "\n\n\nundefined4 check_and_control_0800201c(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if (flags == (uint *)0x0) {\n    return 1;\n  }\n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = get_tick_count();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_time = get_tick_count();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_tick_count();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_time = get_tick_count();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      start_time = get_tick_count();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_time = get_tick_count();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      start_time = get_tick_count();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_time = get_tick_count();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | flags[4] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      start_time = get_tick_count();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_time = get_tick_count();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      start_time = get_tick_count();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_time = get_tick_count();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_40023840 & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_tick_count();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_tick_count();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (flags[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (flags[2] == 0) {\n      start_time = get_tick_count();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_time = get_tick_count();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_tick_count();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_time = get_tick_count();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (flags[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[6] == 2) {\n    _DAT_42470060 = 0;\n    start_time = get_tick_count();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             flags[7] | flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 |\n             flags[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        start_time = get_tick_count();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_tick_count();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_tick_count();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    start_time = get_tick_count();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_tick_count();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_control_0800201c",
                "param_1": "flags",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "is_flag_set",
                "HAL_GetTick": "get_tick_count"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800201c": {
                    "1": "handle_parameter",
                    "3": "check_and_control",
                    "2": "execute_operation"
                },
                "param_1": {
                    "1": "settings",
                    "2": "param",
                    "3": "operation_params",
                    "4": "flags"
                },
                "iVar1": {
                    "1": "init_time",
                    "28": "start_time"
                },
                "iVar2": {
                    "28": "current_time",
                    "1": "curr_time"
                },
                "uVar3": {
                    "1": "status",
                    "21": "result",
                    "4": "return_value"
                },
                "bVar4": {
                    "6": "is_condition_met",
                    "1": "is_bit_set",
                    "2": "is_set",
                    "10": "is_flag_set"
                },
                "HAL_GetTick": {
                    "2": "get_current_time",
                    "1": "get_elapsed_time",
                    "4": "get_tick_count"
                },
                "_DAT_40023808": {
                    "1": "reg_a",
                    "4": "register1"
                },
                "_DAT_40023804": {
                    "1": "some_register_2",
                    "4": "register_2",
                    "3": "register2"
                },
                "_DAT_40023800": {
                    "3": "register3",
                    "1": "register2"
                },
                "_DAT_42470000": {
                    "1": "control_register2",
                    "2": "data_register1"
                },
                "_DAT_42470e80": {
                    "1": "register_5",
                    "2": "data_register2"
                },
                "_DAT_40023874": {
                    "1": "register_4"
                },
                "_DAT_40023840": {
                    "1": "register_4"
                },
                "_DAT_40007000": {
                    "1": "register_4"
                },
                "_DAT_40023870": {
                    "2": "control_register4",
                    "1": "reg_f"
                },
                "_DAT_42470060": {
                    "1": "reg_i",
                    "2": "register_9"
                },
                "Fruit": {
                    "1": "temporary_variable1"
                },
                "Apple": {
                    "1": "temporary_variable2"
                },
                "Banana": {
                    "1": "temporary_variable3"
                },
                "Pear": {
                    "1": "temporary_variable4"
                },
                "100": {
                    "1": "time_threshold_1"
                },
                "2": {
                    "1": "time_threshold_2"
                },
                "3": {
                    "1": "time_threshold_3"
                },
                "5000": {
                    "1": "time_threshold_4"
                },
                "register_1": {
                    "1": "value_1"
                },
                "register_3": {
                    "1": "value_2"
                },
                "input_data[0]": {
                    "1": "mask_1"
                },
                "input_data[1]": {
                    "1": "mask_2"
                },
                "input_data[2]": {
                    "1": "mask_3"
                },
                "input_data[3]": {
                    "1": "mask_4"
                },
                "input_data[4]": {
                    "1": "mask_5"
                },
                "input_data[5]": {
                    "1": "mask_6"
                },
                "input_data[6]": {
                    "1": "mask_7"
                },
                "input_data[7]": {
                    "1": "value_a"
                },
                "input_data[8]": {
                    "1": "value_b"
                },
                "input_data[9]": {
                    "1": "value_c"
                },
                "input_data[10]": {
                    "1": "value_d"
                },
                "input_data[11]": {
                    "1": "value_e"
                },
                "_DAT_40023860": {
                    "1": "register_6"
                },
                "_DAT_40023888": {
                    "1": "register_7"
                },
                "_DAT_40023868": {
                    "1": "register_8"
                },
                "FUN_08000e30": {
                    "1": "initialize_config"
                }
            }
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 param1;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = divide_and_modulo(result * 16000000,\n                             (((uint)(result * 0x20 < result) * -0x3f -\n                              (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                             (uint)check_carry(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                             _DAT_40023804 & 0x3f,0,param1);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = divide_and_modulo(result * 8000000,\n                             (((uint)(result * 0x20 < result) * -0x3f -\n                              (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                             (uint)check_carry(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,\n                             param1);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "param1",
                "uVar1": "result",
                "__aeabi_uldivmod": "divide_and_modulo",
                "CARRY4": "check_carry"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080023b4": {
                    "1": "calculate_time",
                    "15": "calculate_frequency",
                    "6": "calculate_clock_frequency"
                },
                "in_r3": {
                    "1": "unused_param",
                    "2": "input",
                    "4": "input_parameter"
                },
                "uVar1": {
                    "8": "frequency",
                    "1": "clock_value",
                    "2": "clock_frequency",
                    "15": "result",
                    "4": "clock_speed"
                },
                "_DAT_40023808": {
                    "4": "data1",
                    "1": "register_a",
                    "5": "register_value1",
                    "7": "register1",
                    "3": "register_value_1"
                },
                "_DAT_40023804": {
                    "4": "data2",
                    "1": "register2_value",
                    "5": "register_value2",
                    "3": "register_value_2",
                    "7": "register2"
                },
                "param_1": {
                    "1": "unused_param_1"
                },
                "param_2": {
                    "1": "register_value"
                },
                "param_3": {
                    "1": "carry_flag"
                },
                "param_4": {
                    "1": "unused_param_4"
                },
                "__aeabi_uldivmod": {
                    "1": "divide_and_mod",
                    "3": "divide_and_modulo"
                },
                "CARRY4": {
                    "2": "carry_check",
                    "1": "has_carry",
                    "4": "check_carry"
                },
                "CARRY5": {
                    "1": "has_carry_plus_one"
                },
                "param1": {
                    "1": "param1"
                },
                "param2": {
                    "1": "param2"
                },
                "param3": {
                    "1": "param3"
                },
                "param4": {
                    "1": "param4"
                }
            }
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_system_08002488",
            "code": "\n\n\nundefined4 initialize_system_08002488(uint *config_params,uint config_size)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  \n  if (config_params == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < config_size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    if ((*config_params & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config_params & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | config_option_2;\n  }\n  if ((*config_params & 1) != 0) {\n    sys_clock_freq = config_option_1;\n    if (sys_clock_freq == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (sys_clock_freq - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = sys_clock_freq | _DAT_40023808 & 0xfffffffc;\n    start_time = get_current_time;\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == config_option_1 * 4) break;\n      current_time = get_current_time;\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  if (config_size < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_size);\n    if (config_size != (config_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config_option_3;\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config_option_4 << 3;\n  }\n  sys_clock_freq = get_sys_clock_freq;\n  DAT_2000002c = sys_clock_freq >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initialize_tick;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_system_08002488",
                "param_1": "config_params",
                "param_2": "config_size",
                "uVar3": "sys_clock_freq",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "HAL_GetTick": "get_tick",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_freq",
                "HAL_InitTick": "initialize_tick",
                "HAL_GetTick()": "get_current_time",
                "HAL_RCC_GetSysClockFreq()": "get_sys_clock_freq",
                "HAL_InitTick(0xf)": "initialize_tick",
                "param_1[1]": "config_option_1",
                "param_1[2]": "config_option_2",
                "param_1[3]": "config_option_3",
                "param_1[4]": "config_option_4"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002488": {
                    "2": "configure_hardware",
                    "3": "configure_device",
                    "9": "initialize_system",
                    "8": "initialize_device",
                    "1": "init_and_configure_device"
                },
                "param_1": {
                    "1": "configuration",
                    "7": "config",
                    "5": "device_config",
                    "2": "config_flags",
                    "9": "config_params"
                },
                "param_2": {
                    "2": "num_settings",
                    "10": "config_size",
                    "1": "setting_count",
                    "3": "config_length",
                    "5": "num_params"
                },
                "uVar3": {
                    "1": "clock_frequency",
                    "3": "system_clock_freq",
                    "21": "sys_clock_freq"
                },
                "iVar1": {
                    "27": "start_time",
                    "2": "start_tick"
                },
                "iVar2": {
                    "27": "current_time",
                    "2": "current_tick"
                },
                "HAL_GetTick": {
                    "1": "get_current_time",
                    "2": "get_tick"
                },
                "HAL_RCC_GetSysClockFreq": {
                    "2": "get_system_clock_frequency"
                },
                "HAL_InitTick": {
                    "3": "initialize_tick",
                    "1": "initialize_system_tick"
                },
                "HAL_GetTick()": {
                    "1": "get_current_time"
                },
                "HAL_RCC_GetSysClockFreq()": {
                    "1": "system_clock_frequency"
                },
                "DAT_40023c00_1": {
                    "1": "upper_bits"
                },
                "_DAT_40023c00": {
                    "1": "device_status"
                },
                "_DAT_40023808": {
                    "1": "register_2"
                },
                "_DAT_40023800": {
                    "1": "system_status"
                },
                "HAL_InitTick(0xf)": {
                    "1": "initialize_tick"
                },
                "DAT_2000002c": {
                    "1": "sys_clock_freq_divider"
                },
                "FUN_08000e30": {
                    "1": "perform_initialization"
                },
                "FUN_08000d98": {
                    "1": "check_hardware_status"
                },
                "FUN_080023b4": {
                    "1": "get_system_status"
                },
                "param_1[0]": {
                    "1": "config_flags"
                },
                "param_1[1]": {
                    "1": "config_option_1"
                },
                "param_1[2]": {
                    "1": "config_option_2"
                },
                "param_1[3]": {
                    "1": "config_option_3"
                },
                "param_1[4]": {
                    "1": "config_option_4"
                },
                "CONCAT31(DAT_40023c00_1,(char)param_2)": {
                    "1": "new_device_config"
                },
                "(_DAT_40023808 & 0xc)": {
                    "1": "config_in_progress"
                },
                "(&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c]": {
                    "1": "sys_clock_freq_index"
                }
            }
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_080025e0",
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "calling": [
                "FUN_080025ec",
                "FUN_08000c8c",
                "FUN_0800260c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025e0": {
                    "1": "get_constant_value",
                    "10": "get_data_value",
                    "12": "get_data",
                    "2": "get_dat_value"
                },
                "DAT_2000002c": {
                    "11": "data",
                    "1": "data_offset",
                    "2": "data_value"
                }
            }
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_adjusted_hclk_freq_080025ec",
            "code": "\n\n\nuint get_adjusted_hclk_freq_080025ec(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq();\n  return hclk_freq >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_adjusted_hclk_freq_080025ec",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "uVar1": "hclk_freq"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080025ec": {
                    "1": "get_adjusted_hclk_frequency",
                    "4": "get_adjusted_clock_frequency",
                    "15": "get_adjusted_hclk_freq",
                    "3": "get_hclk_frequency"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "2": "get_current_hclk_freq",
                    "9": "get_hclk_freq",
                    "3": "get_hclk_frequency",
                    "1": "get_current_hclk_frequency"
                },
                "_DAT_40023808": {
                    "1": "input_data",
                    "3": "some_value",
                    "4": "register_value",
                    "2": "data_value"
                },
                "&DAT_08005e0c": {
                    "1": "array_address",
                    "2": "shift_table"
                },
                "uVar1": {
                    "3": "adjusted_hclk_freq",
                    "1": "adjusted_frequency",
                    "15": "hclk_freq"
                },
                "DAT_08005e0c": {
                    "6": "shift_values",
                    "1": "clock_frequency_shift",
                    "2": "shift_table"
                },
                "DAT_40023808": {
                    "1": "dat1"
                },
                "FUN_080025e0": {
                    "2": "get_hclk_freq",
                    "1": "get_hclk_frequency"
                },
                "var_1D": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_adjusted_hclk_freq_0800260c",
            "code": "\n\n\nuint get_adjusted_hclk_freq_0800260c(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq();\n  return hclk_freq >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_adjusted_hclk_freq_0800260c",
                "uVar1": "hclk_freq",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800260c": {
                    "1": "get_divided_hclk_freq",
                    "3": "get_adjusted_frequency",
                    "2": "get_adjusted_clock_frequency",
                    "15": "get_adjusted_hclk_freq"
                },
                "uVar1": {
                    "5": "hclk_frequency",
                    "1": "original_frequency",
                    "2": "clock_frequency",
                    "9": "hclk_freq"
                },
                "_DAT_40023808": {
                    "1": "multiplier",
                    "3": "some_value",
                    "12": "input_value"
                },
                "&DAT_08005e0c": {
                    "2": "shift_table",
                    "1": "frequency_divisor"
                },
                "FUN_080025e0": {
                    "3": "get_hclk_freq",
                    "2": "get_hclk_frequency",
                    "1": "undefined_func"
                },
                "HAL_RCC_GetHCLKFreq": {
                    "1": "get_original_hclk_freq",
                    "8": "get_hclk_freq",
                    "4": "get_current_hclk_freq"
                },
                "DAT_08005e0c": {
                    "1": "shift_values_table",
                    "2": "shift_amount"
                },
                "&(DAT_08005e0c)": {
                    "1": "lookup_table"
                }
            }
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "handle_alarm_events_0800262c",
            "code": "\n\n\nvoid handle_alarm_events_0800262c(int *alarm_data)\n\n{\n  if (((*(uint *)(*alarm_data + 0xc) & 0x100) != 0) && ((*(uint *)(*alarm_data + 8) & 0x1000) != 0)) {\n    handle_alarm_a_callback();\n    *(uint *)(*alarm_data + 0xc) = *(uint *)(*alarm_data + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*alarm_data + 0xc) & 0x200) != 0) && ((*(uint *)(*alarm_data + 8) & 0x2000) != 0)) {\n    handle_alarm_b_event(alarm_data);\n    *(uint *)(*alarm_data + 0xc) = *(uint *)(*alarm_data + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)alarm_data + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "handle_alarm_events_0800262c",
                "param_1": "alarm_data",
                "HAL_RTC_AlarmAEventCallback": "handle_alarm_a_event",
                "HAL_RTCEx_AlarmBEventCallback": "handle_alarm_b_event",
                "HAL_RTC_AlarmAEventCallback()": "handle_alarm_a_callback()"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800262c": {
                    "1": "configure_alarm",
                    "2": "handle_alarm_event",
                    "5": "update_alarm_settings",
                    "8": "handle_alarm_events"
                },
                "param_1": {
                    "1": "alarm_event_param",
                    "5": "alarm_params",
                    "3": "settings",
                    "13": "alarm_data"
                },
                "HAL_RTC_AlarmAEventCallback": {
                    "15": "handle_alarm_a_event",
                    "1": "handle_event_a",
                    "11": "handle_alarm_a_callback"
                },
                "HAL_RTCEx_AlarmBEventCallback": {
                    "1": "handle_alarm_b",
                    "15": "handle_alarm_b_event",
                    "11": "handle_alarm_b_callback"
                },
                "_DAT_40013c14": {
                    "1": "global_status",
                    "2": "some_constant"
                },
                "*(undefined *)((int)param_1 + 0x1d)": {
                    "1": "settings.some_flag"
                },
                "DAT_40013c14": {
                    "1": "some_constant"
                },
                "<int>param_1+0x1d": {
                    "1": "alarm_enabled"
                },
                "(int)param_1 + 0x1d": {
                    "1": "alarm_enabled"
                },
                "PTR_08003594": {
                    "1": "function_1"
                },
                "FUNC_0800268c": {
                    "1": "handle_rtc_alarm_b"
                },
                "HAL_RTC_AlarmAEventCallback()": {
                    "1": "handle_alarm_a_callback()"
                },
                "HAL_RTCEx_AlarmBEventCallback()": {
                    "1": "handle_alarm_b_callback()"
                },
                "FUN_08003594": {
                    "1": "handle_rtc_alarm_a"
                }
            }
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "deinit_pwm_0800268e",
            "code": "\nvoid deinit_pwm_0800268e(uint **p_pwm)\n\n{\n  uint *p_pwm_data;\n  \n  *(unknown *)((int)p_pwm + 0x39) = 2;\n  p_pwm_data = *p_pwm;\n  if ((p_pwm_data[8] & 0x1111) == 0) {\n    if ((p_pwm_data[8] & 0x444) == 0) {\n      *p_pwm_data = *p_pwm_data & 0xfffffffe;\n    }\n  }\n  deinit_hal_tim_pwm(p_pwm);\n  *(unknown *)((int)p_pwm + 0x39) = 0;\n  *(unknown *)(p_pwm + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "deinit_pwm_0800268e",
                "param_1": "p_pwm",
                "puVar1": "p_pwm_data",
                "HAL_TIM_PWM_MspDeInit": "deinit_hal_tim_pwm",
                "undefined": "unknown"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800268e": {
                    "13": "deinit_pwm",
                    "1": "reset_pwm_config",
                    "4": "deinitialize_pwm"
                },
                "param_1": {
                    "1": "pwm_signal_ptr",
                    "2": "pwm_config",
                    "4": "p_pwm",
                    "3": "timer"
                },
                "puVar1": {
                    "1": "config_ptr",
                    "2": "ptr",
                    "4": "p_pwm_data"
                },
                "HAL_TIM_PWM_MspDeInit": {
                    "1": "deinit_pwm_support",
                    "3": "deinitialize_tim_pwm",
                    "2": "deinitialize_pwm"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "flag_value"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "counter_value"
                },
                "undefined": {
                    "1": "unknown"
                },
                "*param_1": {
                    "1": "param"
                }
            }
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_timers_080026ce",
            "code": "\nvoid process_timers_080026ce(int *timer_data)\n\n{\n  int timer_value;\n  \n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 2) != 0) && ((*(uint *)(timer_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffd;\n    *(undefined *)(timer_data + 6) = 1;\n    if ((*(uint *)(*timer_data + 0x18) & 3) == 0) {\n      handle_oc_delay_elapsed_callback();\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback();\n    }\n    *(undefined *)(timer_data + 6) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 4) != 0) && ((*(uint *)(timer_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffb;\n    *(undefined *)(timer_data + 6) = 2;\n    if ((*(uint *)(*timer_data + 0x18) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 6) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 8) != 0) && ((*(uint *)(timer_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffff7;\n    *(undefined *)(timer_data + 6) = 4;\n    if ((*(uint *)(*timer_data + 0x1c) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 6) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x10) != 0) && ((*(uint *)(timer_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffef;\n    *(undefined *)(timer_data + 6) = 8;\n    if ((*(uint *)(*timer_data + 0x1c) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 6) = 0;\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 1) != 0) && ((*(uint *)(timer_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xfffffffe;\n    handle_period_elapsed_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x80) != 0) && ((*(uint *)(timer_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffff7f;\n    handle_break_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x40) != 0) && ((*(uint *)(timer_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffbf;\n    handle_trigger_callback(timer_data);\n  }\n  timer_value = *timer_data;\n  if (((*(uint *)(timer_value + 0x10) & 0x20) != 0) && ((*(uint *)(timer_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(timer_value + 0x10) = 0xffffffdf;\n    handle_commutation_callback(timer_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_timers_080026ce",
                "param_1": "timer_data",
                "iVar1": "timer_value",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed_callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished_callback",
                "HAL_TIM_IC_CaptureCallback": "handle_ic_capture_callback",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed_callback",
                "HAL_TIMEx_BreakCallback": "handle_break_callback",
                "HAL_TIM_TriggerCallback": "handle_trigger_callback",
                "HAL_TIMEx_CommutationCallback": "handle_commutation_callback"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_080026c8",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080026ce": {
                    "1": "update_timer_state",
                    "2": "handle_tim_callback",
                    "7": "process_timers"
                },
                "param_1": {
                    "1": "tim_pointer",
                    "7": "timer_data",
                    "3": "timers",
                    "2": "timer",
                    "5": "tim_handle"
                },
                "iVar1": {
                    "2": "timer",
                    "3": "temp_var",
                    "11": "timer_value",
                    "1": "current_value"
                },
                "HAL_TIM_OC_DelayElapsedCallback": {
                    "4": "handle_oc_delay_elapsed",
                    "1": "handle_oc_timer_delay_elapsed",
                    "3": "handle_delay_elapsed_callback",
                    "8": "handle_oc_delay_elapsed_callback"
                },
                "HAL_TIM_PWM_PulseFinishedCallback": {
                    "9": "handle_pwm_pulse_finished_callback",
                    "1": "handle_pwm_timer_pulse_finished",
                    "4": "handle_pwm_pulse_finished"
                },
                "HAL_TIM_IC_CaptureCallback": {
                    "1": "handle_ic_timer_capture",
                    "2": "handle_capture_callback",
                    "9": "handle_ic_capture_callback",
                    "4": "handle_ic_capture"
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "4": "handle_period_elapsed",
                    "11": "handle_period_elapsed_callback",
                    "1": "handle_timer_period_elapsed"
                },
                "HAL_TIMEx_BreakCallback": {
                    "1": "handle_ex_break",
                    "3": "handle_break",
                    "9": "handle_break_callback",
                    "2": "handle_ex_break_callback"
                },
                "HAL_TIM_TriggerCallback": {
                    "1": "trigger_callback",
                    "11": "handle_trigger_callback",
                    "4": "handle_trigger"
                },
                "HAL_TIMEx_CommutationCallback": {
                    "1": "handle_tim_ex_commutation_callback",
                    "4": "handle_commutation",
                    "2": "handle_ex_commutation_callback",
                    "9": "handle_commutation_callback"
                },
                "FUNC_0800293c": {
                    "1": "hal_tim_trigger_callback",
                    "5": "hal_tim_oc_delay_elapsed_callback"
                },
                "FUNC_080026cc": {
                    "1": "hal_tim_ex_commutation_callback",
                    "5": "hal_tim_pwm_pulse_finished_callback"
                },
                "FUN_08003754": {
                    "5": "hal_tim_ic_capture_callback",
                    "1": "hal_tim_pwm_pulse_finished_callback"
                },
                "FUN_0800376e": {
                    "1": "hal_tim_ic_capture_callback",
                    "5": "hal_tim_period_elapsed_callback"
                },
                "FUNC_080026ca": {
                    "1": "hal_tim_oc_delay_elapsed_callback",
                    "5": "hal_tim_ex_break_callback"
                },
                "FUNC_080026c8": {
                    "5": "hal_tim_trigger_callback",
                    "1": "hal_tim_period_elapsed_callback"
                },
                "FUNC_0800293e": {
                    "5": "hal_tim_ex_commutation_callback",
                    "1": "hal_tim_ex_break_callback"
                },
                "*(undefined4 *)(iVar1 + 0x10)": {
                    "1": "timer_flag"
                },
                "*(undefined *)(param_1 + 6)": {
                    "1": "callback_status"
                },
                "*(uint *)(iVar1 + 0x10)": {
                    "1": "timer_flag_value"
                },
                "*(uint *)(iVar1 + 0xc)": {
                    "1": "timer_control_value"
                },
                "*(uint *)(*param_1 + 0x18)": {
                    "1": "timer_resolution_value1"
                },
                "*(uint *)(*param_1 + 0x1c)": {
                    "1": "timer_resolution_value2"
                }
            }
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_08002848",
            "code": "\nvoid update_bit_08002848(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_08002848",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002848": {
                    "1": "update_value_at_bit_position",
                    "4": "update_bitwise_value",
                    "3": "set_bit",
                    "12": "update_bit",
                    "5": "update_bit_value"
                },
                "param_1": {
                    "4": "address",
                    "5": "data",
                    "1": "base_addr",
                    "17": "base_address"
                },
                "param_2": {
                    "25": "bit_position",
                    "5": "bit_index",
                    "1": "position"
                },
                "param_3": {
                    "3": "value",
                    "14": "new_value",
                    "13": "bit_value",
                    "1": "new_bit_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "1": "current_value"
                },
                "param_2 & 0xff": {
                    "1": "bit_mask"
                },
                "value << (param_2 & 0xff)": {
                    "1": "new_value"
                }
            }
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "configure_tim_channel_08002864",
            "code": "\nundefined4 configure_tim_channel_08002864(uint **channel_ptr,undefined4 channel_number)\n\n{\n  bool is_special_channel;\n  uint *timer_address;\n  \n  improve_tim_c_cx_channel_cmd(*channel_ptr,channel_number,0);\n  timer_address = *channel_ptr;\n  if (timer_address == (uint *)0x40010000) {\n    is_special_channel = true;\n  }\n  else if (timer_address == (uint *)0x40010400) {\n    is_special_channel = true;\n  }\n  else {\n    is_special_channel = false;\n  }\n  if (((is_special_channel) && ((timer_address[8] & 0x1111) == 0)) && ((timer_address[8] & 0x444) == 0)) {\n    timer_address[0x11] = timer_address[0x11] & 0xffff7fff;\n  }\n  timer_address = *channel_ptr;\n  if (((timer_address[8] & 0x1111) == 0) && ((timer_address[8] & 0x444) == 0)) {\n    *timer_address = *timer_address & 0xfffffffe;\n  }\n  *(undefined *)((int)channel_ptr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "configure_tim_channel_08002864",
                "param_1": "channel_ptr",
                "param_2": "channel_number",
                "bVar1": "is_special_channel",
                "puVar2": "timer_address",
                "TIM_CCxChannelCmd": "improve_tim_c_cx_channel_cmd"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002864": {
                    "2": "initialize_timers",
                    "1": "initialize_timer",
                    "3": "configure_timer_channel",
                    "7": "configure_tim_channel",
                    "5": "initialize_timer_channel",
                    "6": "configure_tim_c_cx_channel"
                },
                "param_1": {
                    "1": "timer",
                    "3": "channel",
                    "2": "timer_array",
                    "5": "channel_ptr"
                },
                "param_2": {
                    "3": "param_value",
                    "2": "channel_config",
                    "1": "channel_parameter",
                    "5": "channel"
                },
                "bVar1": {
                    "2": "is_special_timer",
                    "1": "is_matching_address",
                    "4": "is_special_case",
                    "5": "is_valid_address"
                },
                "puVar2": {
                    "2": "channel_pointer",
                    "1": "p_var",
                    "3": "timer_address"
                },
                "FUN_08002848": {
                    "1": "configure_channel"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "param3"
                },
                "0x40010000": {
                    "1": "addr1"
                },
                "0x40010400": {
                    "1": "timer2_base_address"
                },
                "*puVar2": {
                    "1": "base_address_value"
                },
                "TIM_CCxChannelCmd": {
                    "1": "improve_tim_c_cx_channel_cmd"
                },
                "PTR_FUN_08002848": {
                    "1": "check_channel_conditions"
                }
            }
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_value_080028d4",
            "code": "\nvoid update_value_080028d4(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(4 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_value_080028d4",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028d4": {
                    "1": "update_bitwise_values",
                    "3": "update_bitwise_operation",
                    "4": "update_bit_value"
                },
                "param_1": {
                    "2": "address",
                    "1": "ptr",
                    "3": "object_address",
                    "5": "register_address",
                    "17": "base_address"
                },
                "param_2": {
                    "8": "bit_offset",
                    "1": "offset",
                    "19": "bit_position"
                },
                "param_3": {
                    "16": "new_value",
                    "1": "data_to_set",
                    "2": "value",
                    "10": "bit_value"
                },
                "*(uint *)(param_1 + 0x20)": {
                    "2": "target_value",
                    "1": "config_value"
                },
                "4 << (param_2 & 0xff)": {
                    "2": "bit_mask",
                    "1": "bit_shifted_mask"
                },
                "param_3 << (param_2 & 0xff)": {
                    "1": "shifted_bits"
                },
                "param_1 + 0x20": {
                    "1": "address_plus_offset"
                },
                "param_2 & 0xff": {
                    "1": "bit_mask"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "param_5": {
                    "1": "bitwise_shift_value"
                }
            }
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "configure_tim_c_cx_n_channel_080028f0",
            "code": "\nundefined4 configure_tim_c_cx_n_channel_080028f0(uint **timer_config,undefined4 channel)\n\n{\n  uint *channel_data;\n  \n  configure_channel_command(*timer_config,channel,0);\n  channel_data = *timer_config;\n  if (((channel_flags & 0x1111) == 0) && ((channel_flags & 0x444) == 0)) {\n    other_value = other_value & 0xffff7fff;\n  }\n  channel_data = *timer_config;\n  if (((channel_flags & 0x1111) == 0) && ((channel_flags & 0x444) == 0)) {\n    *channel_data = *channel_data & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "configure_tim_c_cx_n_channel_080028f0",
                "param_1": "timer_config",
                "param_2": "channel",
                "puVar1": "channel_data",
                "TIM_CCxNChannelCmd": "configure_channel_command",
                "puVar1[8]": "channel_flags",
                "puVar1[0x11]": "other_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080028f0": {
                    "1": "configure_tim",
                    "3": "configure_timer_channel",
                    "11": "configure_tim_c_cx_n_channel",
                    "4": "configure_tim_channel",
                    "2": "initialize_tim_c_cx_n_channel"
                },
                "param_1": {
                    "1": "config_ptr",
                    "2": "channel",
                    "4": "timer_config",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "channel_config",
                    "3": "param_2",
                    "4": "channel_number",
                    "2": "param",
                    "7": "channel"
                },
                "puVar1": {
                    "1": "timer_register",
                    "4": "channel_data",
                    "2": "channel",
                    "3": "channel_ptr"
                },
                "TIM_CCxNChannelCmd": {
                    "2": "configure_channel_command",
                    "1": "configure_channel"
                },
                "0x1111": {
                    "1": "mask_a"
                },
                "0x444": {
                    "1": "mask_b"
                },
                "puVar1[8]": {
                    "1": "timer_status"
                },
                "puVar1[0x11]": {
                    "1": "config[17]"
                },
                "*puVar1": {
                    "1": "channel_value"
                },
                "FUN_080028d4": {
                    "1": "configure_channel"
                },
                "param_3": {
                    "1": "helper_param_3",
                    "3": "param_3"
                },
                "param_1[8]": {
                    "1": "channel_data[8]"
                },
                "param_1[0x11]": {
                    "1": "channel_data[17]"
                },
                "param_1[0]": {
                    "1": "channel_data[0]"
                }
            }
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_flags_08002940",
            "code": "\nvoid clear_flags_08002940(integer *input_array)\n\n{\n  *(unsigned_int *)(*input_array + 0xc) = *(unsigned_int *)(*input_array + 0xc) & 0xfffffedf;\n  *(unsigned_int *)(*input_array + 0x14) = *(unsigned_int *)(*input_array + 0x14) & 0xfffffffe;\n  *(byte *)((int)flags + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "param_1": "input_array",
                "uint": "unsigned_int",
                "undefined": "byte",
                "int": "integer",
                "(int)param_1": "(int)flags"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002940": {
                    "1": "update_values",
                    "4": "update_data",
                    "8": "clear_flags"
                },
                "param_1": {
                    "3": "input_array",
                    "1": "memory_address",
                    "2": "parameters"
                },
                "*param_1": {
                    "2": "data",
                    "1": "input_pointer"
                },
                "*param_1 + 0xc": {
                    "1": "config->value1"
                },
                "*param_1 + 0x14": {
                    "1": "config->value2"
                },
                "(int)param_1 + 0x3a": {
                    "1": "config->flag"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "value_at_offset_c",
                    "4": "value1"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "access_flags_value2",
                    "4": "value2"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "2": "flag",
                    "1": "flag_value"
                },
                "*(uint *)(*parameters + 0xc)": {
                    "1": "value1"
                },
                "*(uint *)(*parameters + 0x14)": {
                    "1": "value2"
                },
                "uint": {
                    "2": "unsigned_int"
                },
                "undefined": {
                    "1": "char",
                    "2": "byte"
                },
                "0xc": {
                    "1": "mask1_offset",
                    "2": "mask1"
                },
                "0x14": {
                    "3": "mask2",
                    "1": "mask2_offset"
                },
                "0xfffffedf": {
                    "1": "flag_mask",
                    "2": "mask1"
                },
                "0xfffffffe": {
                    "2": "mask2",
                    "1": "flag_mask2"
                },
                "0x3a": {
                    "1": "space"
                },
                "0x20": {
                    "1": "space_char"
                },
                "int": {
                    "1": "integer"
                },
                "(int)param_1": {
                    "1": "(int)flags"
                },
                "*(uint *)(*pointer + 0xc)": {
                    "1": "flag1"
                },
                "*(uint *)(*pointer + 0x14)": {
                    "1": "flag2"
                }
            }
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 process_data_0800295c(int *data)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (input_data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)byte_data & 0x1ff;\n    if (input_data[4] == 0) {\n      byte_data = byte_data + 2;\n    }\n    else {\n      byte_data = byte_data + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)byte_data;\n    byte_data = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "byte_ptr",
                "param_1[2]": "input_data[2]",
                "param_1[4]": "input_data[4]",
                "param_1[8]": "byte_data"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800295c": {
                    "4": "parse_data",
                    "1": "reverse_and_update_data",
                    "15": "process_data",
                    "2": "decode_data"
                },
                "param_1": {
                    "19": "data",
                    "2": "data_array",
                    "1": "param",
                    "4": "input_data"
                },
                "sVar1": {
                    "2": "updated_value",
                    "9": "remaining_iterations",
                    "11": "count",
                    "4": "counter",
                    "1": "remaining_steps"
                },
                "pbVar2": {
                    "14": "byte_ptr",
                    "1": "data_pointer",
                    "5": "byte_pointer",
                    "3": "byte_data"
                },
                "(*param_1 + 4)": {
                    "1": "pointer_data"
                },
                "(*param_1 + 0xc)": {
                    "1": "control_register"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "param_1[57]"
                },
                "param_1[2]": {
                    "1": "input_data[2]"
                },
                "*(ushort *)param_1[8]": {
                    "1": "short_data"
                },
                "param_1[4]": {
                    "1": "is_zero"
                },
                "param_1[8]": {
                    "1": "byte_data"
                },
                "*(uint *)(*param_1 + 4)": {
                    "2": "result"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "index"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "attribute"
                }
            }
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_clock_frequency_080029c8",
            "code": "\nvoid calculate_clock_frequency_080029c8(int *clock_params)\n\n{\n  int pclk1_freq;\n  int pclk1_freq2;\n  int pclk1_freq3;\n  int pclk1_freq4;\n  int pclk1_freq5;\n  int param1_1;\n  int param1_2;\n  int param1_3;\n  int param1_4;\n  int base_address;\n  \n  *(uint *)(*clock_params + 0x10) = *(uint *)(*clock_params + 0x10) & 0xffffcfff | clock_params[3];\n  *(uint *)(*clock_params + 0xc) =\n       *(uint *)(*clock_params + 0xc) & 0xffff69f3 | clock_params[2] | clock_params[4] | clock_params[5] | clock_params[7];\n  *(uint *)(*clock_params + 0x14) = *(uint *)(*clock_params + 0x14) & 0xfffffcff | clock_params[6];\n  if (clock_params[7] == 0x8000) {\n    base_address = *clock_params;\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      pclk1_freq = get_pclk1_frequency;\n      param1_1 = clock_params[1];\n      pclk1_freq2 = get_pclk1_frequency;\n      param1_2 = clock_params[1];\n      pclk1_freq3 = get_pclk1_frequency;\n      param1_3 = clock_params[1];\n      pclk1_freq4 = get_pclk1_frequency;\n      param1_4 = clock_params[1];\n      pclk1_freq5 = get_pclk1_frequency;\n      *(uint *)(base_address + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(pclk1_freq4 * 0x19) / (uint)(param1_4 << 1) +\n                          (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) /\n                                (ulonglong)(uint)(clock_params[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(pclk1_freq2 * 0x19) / (uint)(param1_2 << 1) +\n             (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(param1_3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(param1_1 << 1)) / 100) * 0x10;\n      return;\n    }\n    pclk1_freq = get_pclk2_frequency;\n    param1_1 = clock_params[1];\n    pclk1_freq2 = get_pclk2_frequency;\n    param1_2 = clock_params[1];\n    pclk1_freq3 = get_pclk2_frequency;\n    param1_3 = clock_params[1];\n    pclk1_freq4 = get_pclk2_frequency;\n    param1_4 = clock_params[1];\n    pclk1_freq5 = get_pclk2_frequency;\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_freq4 * 0x19) / (uint)(param1_4 << 1) +\n                        (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) / (ulonglong)(uint)(clock_params[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(pclk1_freq2 * 0x19) / (uint)(param1_2 << 1) +\n           (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(param1_3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(param1_1 << 1)) / 100) * 0x10;\n    return;\n  }\n  base_address = *clock_params;\n  if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n    pclk1_freq = get_pclk1_frequency;\n    param1_1 = clock_params[1];\n    pclk1_freq2 = get_pclk1_frequency;\n    param1_2 = clock_params[1];\n    pclk1_freq3 = get_pclk1_frequency;\n    param1_3 = clock_params[1];\n    pclk1_freq4 = get_pclk1_frequency;\n    param1_4 = clock_params[1];\n    pclk1_freq5 = get_pclk1_frequency;\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_freq4 * 0x19) / (uint)(param1_4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1_freq2 * 0x19) / (uint)(param1_2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(param1_3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(param1_1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk1_freq = get_pclk2_frequency;\n  param1_1 = clock_params[1];\n  pclk1_freq2 = get_pclk2_frequency;\n  param1_2 = clock_params[1];\n  pclk1_freq3 = get_pclk2_frequency;\n  param1_3 = clock_params[1];\n  pclk1_freq4 = get_pclk2_frequency;\n  param1_4 = clock_params[1];\n  pclk1_freq5 = get_pclk2_frequency;\n  *(uint *)(base_address + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(pclk1_freq4 * 0x19) / (uint)(param1_4 << 2) +\n                      (int)(((ulonglong)(uint)(pclk1_freq5 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(pclk1_freq2 * 0x19) / (uint)(param1_2 << 2) +\n         (int)(((ulonglong)(uint)(pclk1_freq3 * 0x19) / (ulonglong)(uint)(param1_3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(param1_1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_clock_frequency_080029c8",
                "param_1": "clock_params",
                "iVar1": "pclk1_freq",
                "iVar2": "pclk1_freq2",
                "iVar3": "pclk1_freq3",
                "iVar4": "pclk1_freq4",
                "iVar5": "pclk1_freq5",
                "iVar6": "param1_1",
                "iVar7": "param1_2",
                "iVar8": "param1_3",
                "iVar9": "param1_4",
                "iVar10": "base_address",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency",
                "HAL_RCC_GetPCLK1Freq()": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq()": "get_pclk2_frequency"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080029c8": {
                    "1": "calculate_pclk_value",
                    "3": "calculate_clock_divider",
                    "10": "calculate_clock_frequency",
                    "2": "calculate_clock_value",
                    "7": "calculate_clock_configuration"
                },
                "param_1": {
                    "1": "frequency_offsets",
                    "5": "input_params",
                    "11": "clock_params",
                    "2": "config_params"
                },
                "iVar1": {
                    "1": "pclk1freq",
                    "3": "pclk_freq1",
                    "15": "pclk1_freq",
                    "7": "pclk1_freq1"
                },
                "iVar2": {
                    "3": "pclk_freq2",
                    "11": "pclk1_freq2",
                    "2": "pclk1_2",
                    "1": "pclk1_frequency2",
                    "7": "pclk1_freq"
                },
                "iVar3": {
                    "1": "pclk1freq3",
                    "3": "pclk_freq3",
                    "2": "pclk1_3",
                    "11": "pclk1_freq3",
                    "8": "pclk1_freq"
                },
                "iVar4": {
                    "1": "pclk1_frequency4",
                    "3": "pclk_freq4",
                    "2": "pclk1",
                    "11": "pclk1_freq4",
                    "7": "pclk1_freq"
                },
                "iVar5": {
                    "2": "pclk1",
                    "11": "pclk1_freq5",
                    "1": "pclk1_freq_4",
                    "3": "pclk_freq5",
                    "8": "pclk1_freq"
                },
                "iVar6": {
                    "1": "pclk2freq",
                    "2": "param1_val1",
                    "3": "param1",
                    "7": "param1_1"
                },
                "iVar7": {
                    "3": "pclk2_freq2",
                    "1": "pclk1_freq",
                    "7": "param1_2",
                    "2": "param1_value2"
                },
                "iVar8": {
                    "1": "frequency_offsets[1]",
                    "7": "param1_3",
                    "2": "param1_value3",
                    "3": "pclk2_freq3"
                },
                "iVar9": {
                    "2": "param1_value4",
                    "1": "pclk1_freq",
                    "3": "pclk2_freq4",
                    "7": "param1_4"
                },
                "iVar10": {
                    "1": "result",
                    "2": "clock_addr",
                    "9": "base_address"
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "8": "get_pclk1_frequency",
                    "1": "get_pclk1_freq"
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "1": "get_pclk2_freq",
                    "8": "get_pclk2_frequency"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "reg1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "reg2"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "reg3"
                },
                "HAL_RCC_GetPCLK1Freq()": {
                    "1": "get_pclk1_frequency"
                },
                "HAL_RCC_GetPCLK2Freq()": {
                    "1": "get_pclk2_frequency"
                },
                "FUN_080025ec": {
                    "1": "calculate_value1"
                },
                "FUN_0800260c": {
                    "1": "calculate_value2"
                }
            }
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_parameters_08002d0c",
            "code": "\nundefined4 check_parameters_08002d0c(uint **param_array,uint mask,uint expected_result,int start_time,uint timeout)\n\n{\n  int current_time;\n  \n  do {\n    if (((mask & ~**param_array) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = HAL_GetTick(), (uint)(current_time - start_time) <= timeout))));\n  (*param_array)[3] = (*param_array)[3] & 0xfffffe5f;\n  (*param_array)[5] = (*param_array)[5] & 0xfffffffe;\n  *(undefined *)((int)param_array + 0x39) = 0x20;\n  *(undefined *)((int)param_array + 0x3a) = 0x20;\n  *(undefined *)(param_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_parameters_08002d0c",
                "param_1": "param_array",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "start_time",
                "param_5": "timeout",
                "iVar1": "current_time"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d0c": {
                    "1": "check_parameter_validity",
                    "2": "validate_parameters",
                    "7": "check_parameters"
                },
                "param_1": {
                    "1": "permissions",
                    "3": "parameter_array",
                    "2": "data_ptr",
                    "4": "param_array"
                },
                "param_2": {
                    "5": "flag",
                    "6": "mask",
                    "1": "arg2",
                    "4": "bitmask",
                    "2": "value"
                },
                "param_3": {
                    "1": "is_flag_set",
                    "7": "expected_result",
                    "4": "is_valid",
                    "6": "condition",
                    "2": "flag2"
                },
                "param_4": {
                    "2": "initial_tick",
                    "9": "start_time",
                    "1": "timestamp",
                    "3": "reference_time"
                },
                "param_5": {
                    "1": "arg5",
                    "20": "timeout",
                    "3": "time_limit",
                    "2": "max_duration"
                },
                "iVar1": {
                    "14": "current_time",
                    "11": "current_tick",
                    "1": "tick_value",
                    "2": "current_timestamp"
                },
                "(*param_1)[3]": {
                    "1": "array_element3"
                },
                "(*param_1)[5]": {
                    "1": "array_element5"
                }
            }
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_uart_08002d72",
            "code": "\nundefined4 initialize_uart_08002d72(int *uart_config)\n\n{\n  if (uart_config != (int *)0x0) {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      initialize_uart_08002d72_peripherals();\n    }\n    *(undefined *)((int)uart_config + 0x39) = 0x24;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_config);\n    *(uint *)(*uart_config + 0x10) = *(uint *)(*uart_config + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_config + 0x14) = *(uint *)(*uart_config + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) | 0x2000;\n    uart_initialized = 0;\n    *(undefined *)((int)uart_config + 0x39) = 0x20;\n    *(undefined *)((int)uart_config + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "param_1": "uart_config",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "set_uart_configuration",
                "param_1[0xf]": "uart_initialized"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002d72": {
                    "1": "initialize_uart_settings",
                    "29": "initialize_uart"
                },
                "param_1": {
                    "15": "uart_config",
                    "1": "uart_info",
                    "9": "uart_handle",
                    "5": "uart_instance"
                },
                "HAL_UART_MspInit": {
                    "3": "initialize_uart_msp",
                    "1": "configure_uart_peripheral",
                    "17": "initialize_uart_peripherals"
                },
                "UART_SetConfig": {
                    "14": "set_uart_configuration",
                    "5": "set_uart_config",
                    "7": "configure_uart",
                    "1": "set_uart_config_value"
                },
                "param_1[0xf]": {
                    "1": "uart_error_state"
                },
                "FUN_080029c8": {
                    "1": "initialize_uart_instance",
                    "2": "configure_uart",
                    "10": "initialize_uart"
                },
                "FUNC_08002d70": {
                    "1": "reconfigure_uart",
                    "2": "unused_function",
                    "3": "initialize_uart_peripherals"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "config_flag",
                    "2": "uart_initialized"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "uart_enable"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "uart_ccr_register"
                },
                "*(uint *)(*param_1 + 0x10)": {
                    "1": "uart_cr2_reg"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "uart_gtp_register"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "padding_byte"
                },
                "0x0": {
                    "1": "null"
                },
                "0xe": {
                    "1": "some_constant"
                },
                "0x39": {
                    "1": "uart_status_code"
                },
                "0x24": {
                    "1": "initialized_value"
                },
                "0xc": {
                    "1": "uart_register1"
                },
                "0xffffdfff": {
                    "1": "bit_mask1"
                },
                "0x10": {
                    "1": "uart_register2"
                },
                "0xffffb7ff": {
                    "1": "bit_mask2"
                },
                "0x14": {
                    "1": "uart_register3"
                },
                "0xffffffd5": {
                    "1": "bit_mask3"
                },
                "0x2000": {
                    "1": "bit_mask4"
                },
                "0x20": {
                    "1": "value1"
                },
                "0x3a": {
                    "1": "value2"
                },
                "*(char *)((int)uart_config + 0x39)": {
                    "1": "uart_config->is_initialized"
                },
                "*(undefined *)(uart_config + 0xe)": {
                    "1": "uart_config->is_configured"
                },
                "*(uint *)(*uart_config + 0xc)": {
                    "1": "uart_config->register1"
                },
                "*(uint *)(*uart_config + 0x10)": {
                    "1": "uart_config->register2"
                },
                "*(uint *)(*uart_config + 0x14)": {
                    "1": "uart_config->register3"
                },
                "FUC_08002d70": {
                    "1": "reset_variables"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "uart_config.flag1"
                },
                "param_1[0xe]": {
                    "1": "uart_handle[14]"
                }
            }
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 process_data_08002dd0(int *data_buffer,ushort *data,int data_length,undefined4 timeout)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)data_buffer + 0x39) == ' ') {\n    if (data == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_buffer + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_buffer + 0xe) = 1;\n      data_buffer[0xf] = 0;\n      *(undefined *)((int)data_buffer + 0x39) = 0x21;\n      return_value = get_tick();\n      *(short *)(data_buffer + 9) = (short)data_length;\n      *(short *)((int)data_buffer + 0x26) = (short)data_length;\n      while (*(short *)((int)data_buffer + 0x26) != 0) {\n        *(short *)((int)data_buffer + 0x26) = *(short *)((int)data_buffer + 0x26) + -1;\n        if (data_buffer[2] == 0x1000) {\n          result = wait_for_flag_until_timeout(data_buffer,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = *data & 0x1ff;\n          if (data_buffer[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = wait_for_flag_until_timeout(data_buffer,0x80,0,return_value,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_buffer + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = wait_for_flag_until_timeout(data_buffer,0x40,0,return_value,timeout);\n      if (result == 0) {\n        *(undefined *)((int)data_buffer + 0x39) = 0x20;\n        *(undefined *)(data_buffer + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_buffer",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "return_value",
                "HAL_GetTick": "get_tick",
                "UART_WaitOnFlagUntilTimeout": "wait_for_flag_until_timeout"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002dd0": {
                    "30": "process_data"
                },
                "param_1": {
                    "8": "data",
                    "11": "data_buffer",
                    "1": "input_data",
                    "2": "data_ptr",
                    "3": "data_pointer"
                },
                "param_2": {
                    "8": "data",
                    "1": "byte_param",
                    "7": "buffer"
                },
                "param_3": {
                    "1": "stream_length",
                    "4": "buffer_size",
                    "7": "data_length",
                    "3": "length",
                    "2": "packet_size"
                },
                "param_4": {
                    "1": "parameter",
                    "3": "param4",
                    "20": "timeout"
                },
                "iVar1": {
                    "2": "wait_result",
                    "1": "status_code",
                    "23": "result"
                },
                "uVar2": {
                    "1": "return_val",
                    "9": "status",
                    "15": "return_value",
                    "5": "result"
                },
                "param_1 + 0xe": {
                    "1": "state_flag"
                },
                "(int)param_1 + 0x39": {
                    "1": "status_flag"
                },
                "HAL_GetTick": {
                    "1": "get_tick_count",
                    "2": "get_tick"
                },
                "param_1 + 9": {
                    "1": "data_remaining"
                },
                "(int)param_1 + 0x26": {
                    "1": "data_index"
                },
                "UART_WaitOnFlagUntilTimeout": {
                    "3": "wait_on_flag_until_timeout",
                    "4": "wait_for_flag_until_timeout",
                    "1": "wait_for_flag_with_timeout"
                },
                "*param_1": {
                    "1": "uart_ptr"
                },
                "*param_2": {
                    "1": "data"
                },
                "sVar3": {
                    "1": "flag"
                },
                "(ushort)((uint)*(byte *)param_2)": {
                    "1": "byte_value"
                },
                "FriendlyCommunication": {
                    "1": "process_communication"
                },
                "cmd": {
                    "1": "task"
                },
                "len": {
                    "1": "task_length"
                },
                "responseCode": {
                    "1": "task_response_code"
                },
                "tick": {
                    "1": "current_tick"
                },
                "index": {
                    "1": "task_index"
                }
            }
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_input_08002eb2",
            "code": "\nundefined4 validate_input_08002eb2(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(data + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[15]",
                "(int)param_1": "(int)input_array"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002eb2": {
                    "1": "update_parameters",
                    "2": "process_data",
                    "9": "validate_input",
                    "4": "initialize_data",
                    "3": "update_data"
                },
                "param_1": {
                    "1": "configuration",
                    "8": "data",
                    "4": "array",
                    "3": "param_array",
                    "6": "input_array",
                    "2": "input_data"
                },
                "param_2": {
                    "1": "param2",
                    "2": "size",
                    "7": "value_1",
                    "19": "value1"
                },
                "param_3": {
                    "1": "param3",
                    "2": "value",
                    "7": "value_2",
                    "19": "value2"
                },
                "0x39": {
                    "2": "flag"
                },
                "0xe": {
                    "1": "check_flag"
                },
                "0x26": {
                    "1": "option3"
                },
                "0xf": {
                    "1": "counter"
                },
                "initializeData": {
                    "1": "new_data"
                },
                "data": {
                    "1": "data_ptr"
                },
                "value1": {
                    "1": "first_value",
                    "2": "value1"
                },
                "value2": {
                    "1": "second_value",
                    "2": "value2"
                },
                "flag": {
                    "1": "space_flag"
                },
                "checkFlag": {
                    "1": "flag_check"
                },
                "shortValue": {
                    "1": "short_val"
                },
                "zero": {
                    "1": "zero_count"
                },
                "*(char *)((int)param_1 + 0x39)": {
                    "1": "param_array[0x39]"
                },
                "*(char *)(param_1 + 0xe)": {
                    "3": "flag",
                    "1": "char2",
                    "2": "flag_check"
                },
                "param_1[8]": {
                    "1": "data_value1",
                    "2": "result1",
                    "4": "input_array[8]"
                },
                "*(short *)(param_1 + 9)": {
                    "1": "array_value_2",
                    "2": "short_value1"
                },
                "*(short *)((int)param_1 + 0x26)": {
                    "1": "array_value3",
                    "2": "short_value2"
                },
                "param_1[0xf]": {
                    "1": "value_3",
                    "3": "input_array[15]",
                    "2": "result4"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "1": "array_character_new"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "flag_check_updated"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "ptr_value",
                    "2": "pointer_value"
                },
                "param_1 + 0x39": {
                    "1": "data_char"
                },
                "(int)param_1 + 0x26": {
                    "1": "result3"
                },
                "*param_1": {
                    "1": "ptr_value"
                },
                "*param_1 + 0xc": {
                    "1": "ptr_value_plus_c"
                },
                "8": {
                    "1": "option1"
                },
                "9": {
                    "1": "option2"
                },
                "0x21": {
                    "1": "new_flag"
                },
                "0xc": {
                    "1": "address"
                },
                "0x80": {
                    "1": "bit_7"
                },
                "param_2 == 0": {
                    "1": "is_value_1_zero"
                },
                "param_3 == 0": {
                    "1": "is_value_2_zero"
                },
                "param_1 + 0xe": {
                    "1": "flag_ptr"
                },
                " *(char *)((int)param_1 + 0x39)": {
                    "1": "status_char"
                },
                " *(char *)(param_1 + 0xe)": {
                    "1": "flag_char"
                },
                " *(short *)(param_1 + 9)": {
                    "1": "input_data_value1"
                },
                " *(short *)((int)param_1 + 0x26)": {
                    "1": "input_data_value2"
                },
                "char *((int)data + 0x39)": {
                    "1": "flag"
                },
                "param_1 + 9": {
                    "1": "result2"
                },
                "param_1[0xe]": {
                    "1": "input_array[14]"
                },
                "(int)param_1": {
                    "1": "(int)input_array"
                },
                "parameters": {
                    "1": "parameters"
                },
                "*((int)param_1 + 0x39)": {
                    "1": "character3"
                },
                "data[8]": {
                    "1": "data_offset"
                },
                "data[9]": {
                    "1": "short_value"
                },
                "data[0xf]": {
                    "1": "flag"
                },
                "*(char *)((int)data + 0x39)": {
                    "1": "check_char"
                },
                "*(char *)(data + 0xe)": {
                    "1": "check_char2"
                },
                "*(undefined *)((int)data + 0x39)": {
                    "1": "updated_char"
                },
                "*(undefined *)(data + 0xe)": {
                    "1": "updated_char2"
                },
                "*(uint *)(*data + 0xc)": {
                    "1": "flag_value"
                },
                "array": {
                    "1": "array"
                }
            }
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "update_data_08002efa",
            "code": "\nundefined4 update_data_08002efa(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(data + 0xb) = (short)value2;\n    *(short *)((int)data + 0x2e) = (short)value2;\n    data[15] = 0;\n    *(undefined *)((int)data + 0x3a) = 0x22;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) | 1;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "update_data_08002efa",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "data[15]"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002efa": {
                    "2": "validate_parameters",
                    "1": "update_parameters",
                    "4": "validate_input",
                    "5": "initialize_data",
                    "6": "update_data"
                },
                "param_1": {
                    "1": "user_array",
                    "11": "data",
                    "3": "input_array",
                    "2": "data_array"
                },
                "param_2": {
                    "8": "value_1",
                    "1": "size",
                    "21": "value1"
                },
                "param_3": {
                    "8": "value_2",
                    "1": "input2",
                    "21": "value2"
                },
                "*(char *)((int)param_1 + 0x3a)": {
                    "1": "char_in_buffer",
                    "3": "char_at_index_58"
                },
                "*(char *)(param_1 + 0xe)": {
                    "4": "flag",
                    "1": "flag_check",
                    "3": "char_at_index_14"
                },
                "param_1[10]": {
                    "2": "data[10]",
                    "1": "data_value1",
                    "3": "input_array[10]"
                },
                "*(short *)(param_1 + 0xb)": {
                    "1": "value_1_short",
                    "3": "short_at_index_11"
                },
                "*(short *)((int)param_1 + 0x2e)": {
                    "1": "short_at_index_30",
                    "2": "short_at_index_46",
                    "3": "short_value2"
                },
                "param_1[0xf]": {
                    "2": "data_pointer[15]",
                    "3": "input_array[15]",
                    "1": "parameter15"
                },
                "*(undefined *)((int)param_1 + 0x3a)": {
                    "1": "undefined_at_index42",
                    "3": "undefined_at_index_58"
                },
                "*(undefined *)(param_1 + 0xe)": {
                    "1": "data[14]",
                    "3": "undefined_at_index_14"
                },
                "*(uint *)(*param_1 + 0x14)": {
                    "1": "config_ptr1"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "ptr_offset2"
                },
                "param_1 + 0x3a": {
                    "1": "data_pointer[58]"
                },
                "param_1 + 0xe": {
                    "1": "data[14]"
                },
                "param_1 + 0xb": {
                    "1": "data_pointer[11]"
                },
                "(int)param_1 + 0x2e": {
                    "1": "data_pointer[46]"
                },
                "(int)param_1 + 0x3a": {
                    "1": "data_pointer[58]"
                },
                "input": {
                    "1": "input"
                },
                "value1": {
                    "2": "value1"
                },
                "value2": {
                    "2": "value2"
                },
                "*(char*)param_1 + 0x3a": {
                    "1": "char_value"
                },
                "*(short*)(param_1 + 0xb)": {
                    "1": "short_value1"
                },
                "*(short*)((int)param_1 + 0x2e)": {
                    "1": "short_value2"
                },
                "*(undefined*)((int)param_1 + 0x3a)": {
                    "1": "undefined_value"
                },
                "*(undefined*)(param_1 + 0xe)": {
                    "1": "undefined_value2"
                },
                "*(uint*)(*param_1 + 0x14)": {
                    "1": "uint_value1"
                },
                "*(uint*)(*param_1 + 0xc)": {
                    "1": "uint_value2"
                },
                "0x3a": {
                    "1": "char_value"
                },
                "0xe": {
                    "1": "flag"
                },
                "10": {
                    "1": "index1"
                },
                "0xb": {
                    "1": "index2"
                },
                "0x2e": {
                    "1": "index3"
                },
                "0xf": {
                    "1": "count"
                },
                "0x22": {
                    "1": "new_char_value"
                },
                "*param_1": {
                    "1": "ptr_data"
                },
                "0x14": {
                    "1": "mask1"
                },
                "0xc": {
                    "1": "mask2"
                },
                "input_data + 0x3a": {
                    "1": "input_data_flag2"
                },
                "input_data + 0xe": {
                    "1": "input_data_field2"
                },
                "input_data[10]": {
                    "1": "input_data_value1"
                },
                "input_data + 0xb": {
                    "1": "input_data_value2"
                },
                "input_data + 0x2e": {
                    "1": "input_data_value3"
                },
                "input_data[0xf]": {
                    "1": "input_data_value4"
                },
                "*param_1 + 0x14": {
                    "1": "some_data_field1"
                },
                "*param_1 + 0xc": {
                    "1": "some_data_field2"
                },
                "parameters": {
                    "1": "parameters"
                },
                "parameters + 0xe": {
                    "1": "parameters[14]"
                },
                "param_1 + 0x2e": {
                    "1": "parameters[46]"
                },
                "parameters + 0x3a": {
                    "1": "parameters[58]"
                },
                "param_1 + 0x14": {
                    "1": "parameters[20]"
                },
                "param_1 + 0xc": {
                    "1": "parameters[12]"
                }
            }
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_uart_config_08002f4c",
            "code": "\nundefined4 update_uart_config_08002f4c(int *config_ptr)\n\n{\n  *(uint *)(*config_ptr + 0xc) = *(uint *)(*config_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)config_ptr + 0x39) = 0x20;\n  transmission_complete_callback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_uart_config_08002f4c",
                "param_1": "config_ptr",
                "HAL_UART_TxCpltCallback": "transmission_complete_callback"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f4c": {
                    "1": "update_uart_tx_complete_flag",
                    "2": "update_uart_configuration",
                    "4": "update_uart_config",
                    "3": "update_uart_settings"
                },
                "param_1": {
                    "1": "uart_handle",
                    "2": "input_array",
                    "5": "config_ptr"
                },
                "HAL_UART_TxCpltCallback": {
                    "1": "execute_uart_callback",
                    "2": "handle_uart_tx_complete",
                    "6": "transmission_complete_callback"
                },
                "*(uint *)(*param_1 + 0xc)": {
                    "1": "register_value"
                },
                "*(undefined *)((int)param_1 + 0x39)": {
                    "2": "flag",
                    "1": "uart_parameter->another_value"
                },
                "*param_1": {
                    "1": "uart_params"
                }
            }
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_data_08002f66",
            "code": "\nundefined4 process_data_08002f66(int *data)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefined_ptr = (undefined *)data[10];\n    data[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    byte_ptr = (byte *)data[10];\n    data[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  handle_uart_receive;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "counter",
                "puVar3": "undefined_ptr",
                "HAL_UART_RxCpltCallback": "handle_uart_callback",
                "HAL_UART_RxCpltCallback()": "handle_uart_receive"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002f66": {
                    "2": "process_input_data",
                    "6": "process_input",
                    "1": "parse_string",
                    "11": "process_data",
                    "4": "parse_input"
                },
                "param_1": {
                    "1": "parameter",
                    "13": "data",
                    "6": "input_array",
                    "7": "input_data"
                },
                "pbVar1": {
                    "20": "byte_ptr",
                    "1": "dest_byte",
                    "6": "byte_pointer",
                    "2": "byte_buffer"
                },
                "sVar2": {
                    "2": "short_var",
                    "1": "count_var",
                    "8": "count",
                    "13": "counter"
                },
                "puVar3": {
                    "1": "dest_ptr",
                    "5": "undefined_pointer",
                    "2": "ptr",
                    "16": "undefined_ptr"
                },
                "HAL_UART_RxCpltCallback": {
                    "2": "handle_uart_callback"
                },
                "HAL_UART_RxCpltCallback()": {
                    "1": "handle_uart_receive"
                }
            }
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **param)\n\n{\n  int result;\n  uint value1;\n  uint *ptr;\n  uint value2;\n  uint value3;\n  \n  ptr = *param;\n  value3 = *ptr;\n  value1 = ptr[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    receive_data(param);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = ptr[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      transmit_data(param);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      end_transmit_data(param);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      transfer_state = (uint *)((uint)transfer_state | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      transfer_state = (uint *)((uint)transfer_state | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      transfer_state = (uint *)((uint)transfer_state | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      transfer_state = (uint *)((uint)transfer_state | 8);\n    }\n    if (transfer_state != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        receive_data(param);\n      }\n      if ((((uint)transfer_state & 8) == 0) && (((*param)[5] & 0x40) == 0)) {\n        handle_uart_error(signals);\n        transfer_state = (uint *)0x0;\n        return;\n      }\n      end_receive_transfer(param);\n      ptr = *param;\n      if ((ptr[5] & 0x40) == 0) {\n        handle_uart_error(signals);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (dma_ptr == (uint *)0x0) {\n        handle_uart_error(signals);\n        return;\n      }\n      dma_ptr[0x14] = (uint)&some_data;\n      result = abort_dma(dma_ptr);\n      if (result != 0) {\n        (*(code *)dma_ptr[0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "value1",
                "puVar3": "ptr",
                "uVar4": "value2",
                "uVar5": "value3",
                "UART_Receive_IT": "receive_data",
                "UART_Transmit_IT": "transmit_data",
                "UART_EndTransmit_IT": "end_transmit_data",
                "param_1[0xf]": "transfer_state",
                "HAL_UART_ErrorCallback": "handle_error",
                "UART_EndRxTransfer": "end_receive_transfer",
                "param_1[0xd]": "dma_ptr",
                "HAL_DMA_Abort_IT": "abort_dma",
                "LAB_0800311c_1": "some_data",
                "HAL_UART_ErrorCallback(param_1)": "handle_uart_error(signals)"
            },
            "calling": [],
            "called": [
                "FUN_0800295c",
                "FUN_08000f8c",
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002f4c",
                "FUN_08002940"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08002ffc": {
                    "1": "handle_data_transfer",
                    "2": "handle_uart_operation",
                    "7": "process_data",
                    "4": "handle_uart_operations",
                    "6": "process_flags"
                },
                "param_1": {
                    "1": "input_data",
                    "5": "data",
                    "2": "data_ptr",
                    "7": "param"
                },
                "iVar1": {
                    "3": "status",
                    "2": "dma_abort_result",
                    "1": "dma_status",
                    "16": "result"
                },
                "uVar2": {
                    "1": "flag_value",
                    "8": "value1",
                    "2": "flags",
                    "6": "value2",
                    "3": "flag2"
                },
                "puVar3": {
                    "1": "ptr_data",
                    "5": "pointer",
                    "11": "ptr",
                    "2": "ptr_value"
                },
                "uVar4": {
                    "4": "value4",
                    "1": "flag2",
                    "2": "flag4",
                    "8": "value2"
                },
                "uVar5": {
                    "1": "flag2",
                    "2": "value1",
                    "4": "value5",
                    "8": "value3"
                },
                "UART_Receive_IT": {
                    "3": "receive_data",
                    "1": "receive_uart_signal"
                },
                "UART_Transmit_IT": {
                    "3": "transmit_data",
                    "1": "uart_transmit"
                },
                "UART_EndTransmit_IT": {
                    "1": "uart_end_transmit",
                    "2": "end_transmit_data"
                },
                "param_1[0xf]": {
                    "1": "status"
                },
                "HAL_UART_ErrorCallback": {
                    "1": "handle_uart_error",
                    "4": "handle_error"
                },
                "UART_EndRxTransfer": {
                    "1": "uart_end_rx_transfer",
                    "3": "end_receive_transfer"
                },
                "param_1[0xd]": {
                    "1": "dma_channel",
                    "2": "dma_ptr"
                },
                "HAL_DMA_Abort_IT": {
                    "1": "abort_transfer",
                    "3": "abort_dma"
                },
                "LAB_0800311c_1": {
                    "1": "callback_function"
                },
                "HAL_UART_ErrorCallback(param_1)": {
                    "1": "handle_uart_error(signals)"
                },
                "(*param_1)[5]": {
                    "1": "dma_value"
                },
                "FUN_0800295c": {
                    "1": "function1"
                },
                "FUN_08000f8c": {
                    "1": "function2"
                },
                "FUNC_08003f94": {
                    "1": "function3"
                },
                "FUN_08002f66": {
                    "1": "function4"
                },
                "FUN_08002f4c": {
                    "1": "function5"
                },
                "FUN_08002940": {
                    "1": "function6"
                }
            }
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nresult combine_bytes_0800312c(int input)\n\n{\n  return *(result *)(input + 0x3a) | *(result *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input",
                "byte": "result"
            },
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800312c": {
                    "1": "bitwise_or_of_adjacent_bytes",
                    "30": "combine_bytes"
                },
                "param_1": {
                    "18": "input",
                    "8": "address",
                    "1": "input_value",
                    "2": "offset"
                },
                "*(byte *)(param_1 + 0x3a)": {
                    "14": "byte1",
                    "1": "byte_at_index_a"
                },
                "*(byte *)(param_1 + 0x39)": {
                    "1": "byte_value_2",
                    "14": "byte2"
                },
                "byte": {
                    "2": "result"
                },
                "param_1 + 0x3a": {
                    "1": "input_offset_a"
                },
                "param_1 + 0x39": {
                    "1": "input_offset_b"
                },
                "0x3a": {
                    "2": "offset1"
                },
                "0x39": {
                    "2": "offset2"
                },
                "var_1": {
                    "1": "offset"
                },
                "var_2": {
                    "1": "byte1"
                },
                "var_3": {
                    "1": "byte2"
                },
                "*(_byte_ *)(param_1 + 0x3a)": {
                    "1": "byte1"
                },
                "*(_byte_ *)(param_1 + 0x39)": {
                    "1": "byte2"
                },
                "(param_1 + 0x3a)": {
                    "1": "offset1"
                },
                "(param_1 + 0x39)": {
                    "1": "offset2"
                },
                "PTR_x39": {
                    "1": "first_byte"
                },
                "PTR_x3a": {
                    "1": "second_byte"
                },
                "PTR_39": {
                    "1": "byte1"
                },
                "PTR_3a": {
                    "1": "byte2"
                }
            }
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint get_bit_value_08003138(uint value,int array_address)\n\n{\n  return *(uint *)(array_address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "value",
                "param_2": "array_address"
            },
            "calling": [
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003138": {
                    "1": "retrieve_bit_from_memory",
                    "3": "extract_bit",
                    "9": "get_bit_value",
                    "2": "extract_bit_from_uint"
                },
                "param_1": {
                    "1": "source_value",
                    "8": "input_value",
                    "11": "value",
                    "6": "index"
                },
                "param_2": {
                    "3": "array_ptr",
                    "1": "array_start",
                    "5": "array",
                    "6": "array_address"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4) >> (param_1 & 0xf) & 1": {
                    "1": "bit_value"
                },
                "param_3": {
                    "1": "length"
                },
                "ptr_x": {
                    "1": "array_pointer"
                },
                "ptr_y": {
                    "1": "bit_mask"
                },
                "param_4": {
                    "1": "bit_mask"
                },
                "param_5": {
                    "1": "shift"
                },
                "param_6": {
                    "1": "bit_offset"
                },
                "param_7": {
                    "1": "result"
                },
                "param_1 << 0x18": {
                    "1": "shifted_value"
                },
                "shifted_value >> 0x1c": {
                    "1": "array_index"
                },
                "param_1 & 0xf": {
                    "2": "bit_offset",
                    "1": "bit_position"
                },
                "*(uint *)(param_2 + (array_index * 4))": {
                    "1": "target_value"
                },
                "target_value >> bit_offset": {
                    "1": "result"
                },
                "result & 1": {
                    "1": "bit_value"
                },
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": {
                    "1": "target_element"
                },
                "(param_1 << 0x18) >> 0x1c": {
                    "1": "shifted_value"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_position"
                },
                "1": {
                    "1": "bit_value"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "DAT_": {
                    "1": "dat_"
                },
                "param_1 << 0x18 >> 0x1c": {
                    "1": "shifted_value"
                }
            }
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid set_bit_in_array_0800314e(uint bit_position,int array)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800314e": {
                    "7": "set_bit",
                    "1": "update_bit_value",
                    "3": "set_bit_in_memory",
                    "16": "set_bit_in_array",
                    "2": "update_bit_in_array"
                },
                "param_1": {
                    "4": "input",
                    "1": "value_to_set",
                    "10": "bit_position",
                    "8": "bit_index",
                    "2": "value",
                    "3": "index"
                },
                "param_2": {
                    "1": "bit_array",
                    "13": "array",
                    "3": "memory_address",
                    "9": "array_address"
                },
                "uVar1": {
                    "4": "byte_offset",
                    "7": "shifted_index",
                    "1": "offset",
                    "8": "index",
                    "2": "array_index"
                }
            }
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_0800316c",
            "code": "\nvoid update_bit_0800316c(uint bit_position,int array_address)\n\n{\n  uint index;\n  \n  index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + index * 4) = *(uint *)(array_address + index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800316c": {
                    "3": "update_bitwise_value",
                    "2": "update_bit_value",
                    "1": "set_bit_in_array",
                    "10": "update_bit",
                    "5": "update_bit_in_array"
                },
                "param_1": {
                    "1": "index",
                    "2": "data",
                    "4": "value",
                    "14": "bit_position",
                    "3": "bit_index"
                },
                "param_2": {
                    "2": "array_pointer",
                    "7": "array",
                    "1": "array_ptr",
                    "3": "memory_address",
                    "10": "array_address"
                },
                "uVar1": {
                    "3": "byte_offset",
                    "1": "upper_bits",
                    "6": "shifted_index",
                    "2": "shifted_position",
                    "7": "index"
                },
                "param_1 << 0x18 >> 0x1c": {
                    "1": "bit_chunk"
                },
                "*(uint *)(param_2 + uVar1 * 4)": {
                    "1": "element"
                },
                "param_1 & 0xf": {
                    "1": "bit_offset"
                },
                "(1 << (param_1 & 0xf))": {
                    "1": "bit"
                },
                "0x18": {
                    "1": "shift_amount1"
                },
                "0x1c": {
                    "1": "shift_amount2"
                },
                "(param_1 & 0xf)": {
                    "1": "bit_mask"
                }
            }
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 get_memory_address_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    address 0x40020000;\n  case 1:\n    address 0x40020400;\n  case 2:\n    address 0x40020800;\n  case 3:\n    address 0x40020c00;\n  case 4:\n    address 0x40021000;\n  case 5:\n    address 0x40021400;\n  case 6:\n    address 0x40021800;\n  case 7:\n    address 0x40021c00;\n  case 8:\n    address 0x40022000;\n  case 9:\n    address 0x40022400;\n  case 10:\n    address 0x40022800;\n  default:\n    address 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input",
                "return": "address"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800318c": {
                    "1": "get_address_from_index",
                    "2": "map_param_to_value",
                    "23": "get_memory_address"
                },
                "param_1": {
                    "10": "input",
                    "3": "input_value",
                    "1": "input_param",
                    "2": "param",
                    "9": "index"
                },
                "0": {
                    "1": "memory_address_1",
                    "2": "base_address",
                    "5": "0x40020000",
                    "3": "memory_address_0"
                },
                "1": {
                    "1": "address1",
                    "5": "0x40020400",
                    "3": "memory_address_1"
                },
                "2": {
                    "5": "0x40020800",
                    "1": "memory_address_3",
                    "3": "memory_address_2"
                },
                "3": {
                    "1": "memory_address_4",
                    "5": "0x40020c00",
                    "3": "memory_address_3"
                },
                "4": {
                    "1": "base_address4",
                    "3": "memory_address_4",
                    "5": "0x40021000"
                },
                "5": {
                    "5": "0x40021400",
                    "1": "address_offset_5",
                    "3": "memory_address_5"
                },
                "6": {
                    "1": "address_offset_6",
                    "3": "memory_address_6",
                    "5": "0x40021800"
                },
                "7": {
                    "1": "memory_address_8",
                    "3": "memory_address_7",
                    "5": "0x40021c00"
                },
                "8": {
                    "1": "address_offset_8",
                    "5": "0x40022000",
                    "3": "memory_address_8"
                },
                "9": {
                    "1": "addr_09",
                    "3": "memory_address_9",
                    "5": "0x40022400"
                },
                "10": {
                    "1": "memory_address_11",
                    "5": "0x40022800",
                    "3": "memory_address_10"
                },
                "default": {
                    "1": "0"
                },
                "case 0": {
                    "1": "memory_address0"
                },
                "case 1": {
                    "1": "return_address_1"
                },
                "case 2": {
                    "1": "return_address2"
                },
                "case 3": {
                    "1": "return_address_3"
                },
                "case 4": {
                    "1": "return_address_4"
                },
                "case 5": {
                    "1": "return_address5"
                },
                "case 6": {
                    "1": "return_address6"
                },
                "case 7": {
                    "1": "return_address_7"
                },
                "case 8": {
                    "1": "return_address8"
                },
                "case 9": {
                    "1": "return_address9"
                },
                "case 10": {
                    "1": "return_address_10"
                },
                "return": {
                    "1": "mapped_value"
                },
                "return 0x40020000;": {
                    "1": "return_address1"
                },
                "return 0x40020400;": {
                    "1": "return_address2"
                },
                "return 0x40020800;": {
                    "1": "return_address3"
                },
                "return 0x40020c00;": {
                    "1": "return_address4"
                },
                "return 0x40021000;": {
                    "1": "return_address5"
                },
                "return 0x40021400;": {
                    "1": "return_address6"
                },
                "return 0x40021800;": {
                    "1": "return_address7"
                },
                "return 0x40021c00;": {
                    "1": "return_address8"
                },
                "return 0x40022000;": {
                    "1": "return_address9"
                },
                "return 0x40022400;": {
                    "1": "return_address10"
                },
                "return 0x40022800;": {
                    "1": "return_address11"
                }
            }
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_flag_and_return_address_080031fc",
            "code": "\n\n\nundefined4 set_flag_and_return_address_080031fc(undefined4 flag)\n\n{\n  undefined4 address;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    address = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    address = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    address = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    address = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    address = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    address = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    address = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    address = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    address = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    address = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    address = 0x40022800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_flag_and_return_address_080031fc",
                "param_1": "flag",
                "uVar1": "address"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080031fc": {
                    "1": "set_memory_address_flag",
                    "5": "set_flag_and_return_address",
                    "2": "set_device_flag"
                },
                "param_1": {
                    "8": "flag",
                    "1": "register_index",
                    "2": "index",
                    "5": "address_index"
                },
                "uVar1": {
                    "7": "address",
                    "3": "return_value",
                    "1": "result",
                    "5": "base_address",
                    "4": "memory_address"
                },
                "_DAT_40023830": {
                    "1": "memory_address",
                    "2": "memory_value"
                },
                "0": {
                    "1": "set_memory_option_1"
                },
                "1": {
                    "1": "set_memory_option_2"
                },
                "2": {
                    "1": "set_memory_option_3"
                },
                "3": {
                    "1": "set_memory_option_4"
                },
                "4": {
                    "1": "set_memory_option_5"
                },
                "5": {
                    "1": "set_memory_option_6"
                },
                "6": {
                    "1": "set_memory_option_7"
                },
                "7": {
                    "1": "set_memory_option_8"
                },
                "8": {
                    "1": "set_memory_option_9"
                },
                "9": {
                    "1": "set_memory_option_10"
                },
                "10": {
                    "1": "set_memory_option_11"
                }
            }
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_pinmap_08003380",
            "code": "\nundefined4 check_pinmap_08003380(undefined4 pin,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = pinmap_function(pin,&DAT_08005a18,param_3,param_4,param_4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_pinmap_08003380",
                "param_1": "pin",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003380": {
                    "8": "check_pinmap",
                    "1": "check_pin_function",
                    "2": "check_pin_validity",
                    "3": "validate_pin",
                    "6": "check_pinmap_function"
                },
                "param_1": {
                    "1": "input1",
                    "5": "device",
                    "9": "pin",
                    "2": "input_param"
                },
                "param_3": {
                    "1": "map_param_1",
                    "7": "param3",
                    "13": "param_3"
                },
                "param_4": {
                    "1": "input4",
                    "7": "param4",
                    "13": "param_4"
                },
                "iVar1": {
                    "24": "result",
                    "5": "pinmap_result"
                },
                "FUN_0800354a": {
                    "1": "get_pinmap_value"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "param2",
                    "2": "pin",
                    "7": "param_2"
                }
            }
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "pinmap_check_0800339c",
            "code": "\nundefined4 pinmap_check_0800339c(undefined4 input_param,undefined4 unused_param,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(input_param,&DAT_08005a3c,param_3,param_4,param_4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "pinmap_check_0800339c",
                "param_1": "input_param",
                "param_2": "unused_param",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800339c": {
                    "1": "pinmap_analysis",
                    "3": "pinmap_reverse",
                    "6": "pinmap_check",
                    "2": "map_pin_to_value"
                },
                "param_1": {
                    "1": "input_param_1",
                    "3": "input_1",
                    "2": "input1",
                    "4": "pin",
                    "7": "input_param"
                },
                "param_2": {
                    "3": "param2",
                    "2": "arg2",
                    "1": "value_2",
                    "8": "unused_param",
                    "5": "param_2"
                },
                "param_3": {
                    "1": "data_array",
                    "4": "param3",
                    "5": "param_3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "func_param_2",
                    "2": "arg4",
                    "5": "param_4",
                    "4": "param4"
                },
                "iVar1": {
                    "1": "pin_mapping_result",
                    "8": "pinmap_result",
                    "20": "result"
                },
                "uVar2": {
                    "25": "shifted_result",
                    "1": "shifted_and_masked_result",
                    "5": "shifted_value"
                }
            }
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_flags_080033c8",
            "code": "\n\n\nvoid clear_flags_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_flags_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033c8": {
                    "1": "clear_bit_in_memory_address",
                    "2": "clear_bit_in_memory",
                    "3": "clear_flags"
                },
                "_DAT_40023840": {
                    "3": "data_register",
                    "6": "data",
                    "2": "data_flag",
                    "1": "memory_register"
                },
                "DAT_40023840": {
                    "1": "memory_flag"
                },
                "0xdfffffff": {
                    "1": "clear_mask"
                }
            }
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "stop_and_deinit_dac_080033d8",
            "code": "\nvoid stop_and_deinit_dac_080033d8(undefined4 peripheral)\n\n{\n  int dac_channel;\n  int peripheral_array [5];\n  \n  pinmap_result = pinmap_peripheral(peripheral,&DAT_08005a18);\n  if ((pinmap_result != 0) && ((dac_channel = get_dac_channel(peripheral), dac_channel == 0 || (dac_channel == 0x10)))) {\n    stop_dac(peripheral_array,dac_channel);\n    de_init_dac(peripheral_array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "stop_and_deinit_dac_080033d8",
                "param_1": "peripheral",
                "local_1c": "peripheral_array",
                "HAL_DAC_Stop": "stop_dac",
                "HAL_DAC_DeInit": "de_init_dac",
                "iVar1": "dac_channel",
                "local_1c[0]": "pinmap_result"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08000f72",
                "FUN_08003380"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080033d8": {
                    "3": "stop_and_deinitialize_dac",
                    "1": "stop_and_deinit_dac_channel",
                    "15": "stop_and_deinit_dac",
                    "10": "stop_and_de_init_dac"
                },
                "param_1": {
                    "23": "peripheral",
                    "1": "input_param",
                    "2": "device",
                    "3": "peripheral_address"
                },
                "local_1c": {
                    "1": "peripheral_mapping",
                    "6": "peripheral_info",
                    "4": "pinmap_results",
                    "2": "pinmap_result"
                },
                "pinmap_peripheral": {
                    "1": "<unchanged>"
                },
                "DAT_08005a18": {
                    "1": "peripheral_data"
                },
                "get_dac_channel": {
                    "5": "get_dac_channel",
                    "1": "<unchanged>"
                },
                "HAL_DAC_Stop": {
                    "6": "stop_dac",
                    "1": "<unchanged>"
                },
                "HAL_DAC_DeInit": {
                    "4": "de_init_dac",
                    "1": "<unchanged>",
                    "3": "deinit_dac"
                },
                "iVar1": {
                    "1": "channel",
                    "14": "dac_channel"
                },
                "local_1c[0]": {
                    "1": "peripheral_result",
                    "2": "pinmap_result"
                },
                "FUN_08000f56": {
                    "3": "pinmap_peripheral"
                },
                "FUN_080034f4": {
                    "2": "get_dac_channel"
                },
                "&DAT_08005a18": {
                    "1": "pinmap_data"
                }
            }
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "disable_timer_clock_0800340c",
            "code": "\nvoid disable_timer_clock_0800340c(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800340c": {
                    "23": "disable_timer_clock",
                    "1": "disable_clock",
                    "7": "disable_timer"
                },
                "FUN_080035fc": {
                    "8": "process_parameter",
                    "2": "update_param",
                    "6": "process_data",
                    "1": "process_timer"
                },
                "param_1": {
                    "3": "data_array",
                    "1": "input_param",
                    "2": "timer_data"
                },
                "timer_disable_clock": {
                    "1": "timer_disable_clock"
                },
                "*param_1": {
                    "1": "parameter_contents"
                }
            }
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "stop_pwm_peripheral_08003414",
            "code": "\nvoid stop_pwm_peripheral_08003414(undefined4 peripheral)\n\n{\n  int pwm_channel;\n  uint function_result;\n  int pwm_channels [16];\n  \n  channel = get_peripheral_pin(peripheral,&DAT_08005a3c);\n  if ((channel != 0) &&\n     ((((pwm_channel = get_pwm_channel(peripheral), pwm_channel == 0 || (pwm_channel == 4)) || (pwm_channel == 8)) ||\n      ((pwm_channel == 0xc || (pwm_channel == 0x18)))))) {\n    function_result = get_pin_function(peripheral,&DAT_08005a3c);\n    if ((function_result & 0x100000) == 0) {\n      stop_pwm(pwm_channels,pwm_channel);\n    }\n    else {\n      stop_pwm_channel_ex(pwm_channels,pwm_channel);\n    }\n    deinitialize_pwm(pwm_channels);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "stop_pwm_peripheral_08003414",
                "param_1": "peripheral",
                "local_4c": "pwm_channels",
                "pinmap_peripheral": "get_peripheral_pin",
                "HAL_TIM_PWM_Stop": "stop_pwm",
                "HAL_TIMEx_PWMN_Stop": "stop_pwm_channel_ex",
                "HAL_TIM_PWM_DeInit": "deinitialize_pwm",
                "pinmap_function": "get_pin_function",
                "iVar1": "pwm_channel",
                "local_4c[0]": "channel",
                "uVar2": "function_result"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_080028f0",
                "FUN_0800268e",
                "FUN_0800339c",
                "FUN_08002864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003414": {
                    "7": "stop_pwm_peripheral",
                    "1": "stop_timers",
                    "2": "stop_pwm_if_valid",
                    "4": "stop_pwm"
                },
                "param_1": {
                    "1": "input_param",
                    "16": "peripheral",
                    "2": "channel",
                    "3": "pin"
                },
                "local_4c": {
                    "2": "pinmap_results",
                    "1": "channel_list",
                    "3": "pwm_handle",
                    "4": "pwm_channel_array",
                    "5": "pwm_channels"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_pin"
                },
                "DAT_08005a3c": {
                    "1": "pin_config"
                },
                "get_pwm_channel": {
                    "2": "get_channel_pwm",
                    "3": "get_pwm_channel"
                },
                "HAL_TIM_PWM_Stop": {
                    "1": "stop_timpwm",
                    "2": "stop_pwm"
                },
                "HAL_TIMEx_PWMN_Stop": {
                    "1": "stop_pwm_channel_ex"
                },
                "HAL_TIM_PWM_DeInit": {
                    "1": "deinitialize_tim_pwm",
                    "3": "deinitialize_pwm"
                },
                "pinmap_function": {
                    "1": "get_pin_function"
                },
                "iVar1": {
                    "1": "pwm_channel_result",
                    "2": "channel",
                    "13": "pwm_channel"
                },
                "FUN_080034f4": {
                    "1": "pinmap_peripheral"
                },
                "FUN_0800354a": {
                    "1": "get_pwm_channel"
                },
                "FUN_080028f0": {
                    "2": "hal_tim_pwm_stop"
                },
                "FUN_0800268e": {
                    "2": "hal_tim_ex_pwmn_stop"
                },
                "local_4c[0]": {
                    "1": "peripheral"
                },
                "uVar2": {
                    "1": "function",
                    "3": "function_mapping",
                    "2": "pin_function"
                },
                "FUN_0800339c": {
                    "1": "hal_tim_pwm_de_init"
                },
                "FUN_08002864": {
                    "1": "pinmap_function"
                },
                "&DAT_08005a3c": {
                    "1": "peripheral_mapping"
                }
            }
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "get_current_tick_0800346c",
            "code": "\nvoid get_current_tick_0800346c(void)\n\n{\n  get_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "get_current_tick_0800346c",
                "HAL_GetTick": "get_tick"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800346c": {
                    "1": "get_elapsed_time",
                    "16": "get_current_tick",
                    "11": "get_current_time"
                },
                "FUN_08000e30": {
                    "1": "get_current_state",
                    "2": "get_tick",
                    "5": "initialize_system",
                    "3": "retrieve_data"
                },
                "HAL_GetTick": {
                    "1": "get_current_time",
                    "2": "get_tick"
                }
            }
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "handle_sys_tick_interrupt_08003476",
            "code": "\nvoid handle_sys_tick_interrupt_08003476(void)\n\n{\n  increment_tick();\n  process_sys_tick_interrupt();\n  handle_no_os_sys_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "handle_sys_tick_interrupt_08003476",
                "HAL_IncTick": "increment_tick",
                "HAL_SYSTICK_IRQHandler": "process_sys_tick_interrupt",
                "noOsSystickHandler": "handle_no_os_sys_tick"
            },
            "calling": [],
            "called": [
                "FUN_08003474",
                "FUN_08000f4e",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003476": {
                    "1": "update_and_handle_sys_tick",
                    "4": "handle_system_tick",
                    "2": "handle_tick_and_interrupt",
                    "3": "update_system_tick",
                    "7": "handle_sys_tick_interrupt"
                },
                "FUNC_08003474": {
                    "1": "increment_sys_tick",
                    "3": "update_tick",
                    "8": "increment_system_tick",
                    "2": "increment_tick_count",
                    "9": "increment_tick"
                },
                "FUN_08000f4e": {
                    "1": "increment_tick",
                    "10": "handle_sys_tick_irq",
                    "7": "handle_sys_tick_interrupt"
                },
                "FUN_08000e18": {
                    "5": "no_os_systick_handler",
                    "1": "no_os_system_tick_handler",
                    "2": "custom_sys_tick_handler",
                    "11": "handle_no_os_systick"
                },
                "HAL_IncTick": {
                    "1": "increment_tick_counter",
                    "3": "increment_tick"
                },
                "HAL_SYSTICK_IRQHandler": {
                    "1": "handle_sys_tick_interrupt"
                },
                "noOsSystickHandler": {
                    "2": "handle_no_os_sys_tick",
                    "1": "handle_no_os_systick"
                }
            }
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_gpio_08003486",
            "code": "\nvoid initialize_gpio_08003486(uint pin_number,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  \n  gpio_port = get_gpio_port_clock((pin_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  local_param_4 = 2;\n  local_param_2 = param2;\n  local_param_3 = param3;\n  init_gpio(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_gpio_08003486",
                "param_1": "pin_number",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpio_port",
                "local_24": "pin_mask",
                "local_20": "local_param_2",
                "local_1c": "local_param_3",
                "local_18": "local_param_4",
                "set_GPIO_Port_Clock": "get_gpio_port_clock",
                "HAL_GPIO_Init": "init_gpio"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003486": {
                    "11": "initialize_gpio_port",
                    "1": "configure_gpio_port",
                    "2": "initialize_gpio_pin",
                    "17": "initialize_gpio"
                },
                "param_1": {
                    "1": "port",
                    "2": "pin",
                    "26": "pin_number"
                },
                "param_2": {
                    "15": "param2",
                    "1": "parameter_2",
                    "2": "configuration_1",
                    "11": "param_2"
                },
                "param_3": {
                    "1": "config_param3",
                    "15": "param3",
                    "11": "param_3",
                    "2": "configuration_2"
                },
                "uVar1": {
                    "2": "clock_value",
                    "5": "gpio_port_clock",
                    "1": "port_clock_setting",
                    "15": "gpio_port",
                    "4": "port_clock"
                },
                "local_24": {
                    "1": "pin_bit_mask",
                    "28": "pin_mask"
                },
                "local_20": {
                    "2": "param2_copy",
                    "3": "local_var2",
                    "1": "local_config_1",
                    "7": "local_param2",
                    "9": "local_param_2"
                },
                "local_1c": {
                    "1": "local_var_1c",
                    "2": "param3_copy",
                    "7": "local_param3",
                    "9": "local_param_3",
                    "3": "local_var3"
                },
                "local_18": {
                    "1": "local_param1",
                    "2": "local_var1",
                    "5": "local_param_4",
                    "4": "local_variable"
                },
                "set_GPIO_Port_Clock": {
                    "1": "get_gpio_port_clock"
                },
                "HAL_GPIO_Init": {
                    "1": "init_gpio"
                }
            }
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "write_pin_080034b6",
            "code": "\nvoid write_pin_080034b6(undefined4 gpio_port,undefined2 gpio_pin,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    write_pin_080034b6(gpio_port,gpio_pin,0,param,param);\n    return;\n  }\n  write_pin_080034b6(gpio_port,gpio_pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "write_pin_080034b6",
                "param_1": "gpio_port",
                "param_2": "gpio_pin",
                "param_3": "state",
                "param_4": "param",
                "HAL_GPIO_WritePin": "write_pin"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034b6": {
                    "2": "set_pin_state",
                    "3": "set_gpio_pin_state",
                    "1": "toggle_pin_state",
                    "7": "write_pin",
                    "4": "write_pin_based_on_condition"
                },
                "param_1": {
                    "1": "gpio_pin",
                    "6": "port",
                    "3": "gpio",
                    "2": "pin",
                    "16": "gpio_port"
                },
                "param_2": {
                    "1": "pin_state",
                    "3": "pin_number",
                    "14": "gpio_pin",
                    "9": "pin"
                },
                "param_3": {
                    "1": "status",
                    "2": "pin_state",
                    "5": "condition",
                    "17": "state"
                },
                "param_4": {
                    "2": "data",
                    "6": "param4",
                    "1": "unknown_param",
                    "4": "arg1",
                    "8": "param"
                },
                "HAL_GPIO_WritePin": {
                    "1": "set_gpio_pin_state",
                    "9": "write_pin"
                },
                "PTR_08001198": {
                    "1": "reverse_data"
                },
                "undefined4 param_1": {
                    "1": "port"
                },
                "undefined2 param_2": {
                    "1": "pin"
                },
                "int param_3": {
                    "1": "condition"
                },
                "undefined4 param_4": {
                    "1": "value"
                },
                "FUN_08001198": {
                    "1": "helper_function"
                },
                "0": {
                    "1": "low"
                },
                "1": {
                    "1": "high"
                }
            }
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initialize_system_080034ce(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034ce": {
                    "1": "initialize_and_configure_system_clock",
                    "27": "initialize_system",
                    "2": "initialize_hardware"
                },
                "HAL_Init": {
                    "2": "initialize_hardware",
                    "16": "initialize_hal"
                },
                "SystemClock_Config": {
                    "1": "configure_clock",
                    "17": "configure_system_clock"
                },
                "FUN_08000c8c": {
                    "1": "perform_operation",
                    "4": "configure_hal",
                    "3": "perform_task",
                    "5": "initialize_hal"
                },
                "FUN_08000de4": {
                    "1": "calculate_system_clock",
                    "7": "configure_system_clock",
                    "2": "get_system_clock_configuration"
                }
            }
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) exit_loop;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "target_value",
                "param_2": "array",
                "break": "exit_loop"
            },
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034da": {
                    "3": "find_value",
                    "13": "find_value_index",
                    "1": "find_value_position",
                    "11": "find_value_in_array"
                },
                "param_1": {
                    "4": "value_to_find",
                    "17": "target_value",
                    "8": "value",
                    "1": "target"
                },
                "param_2": {
                    "1": "input_array",
                    "17": "array",
                    "3": "array_ptr",
                    "2": "short_array"
                },
                "param_2+6": {
                    "2": "next_array_element"
                },
                "*param_2": {
                    "2": "current_element",
                    "9": "current_value"
                },
                "*param_2 == -1": {
                    "1": "current_value_is_negative_one"
                },
                "*param_2 == param_1": {
                    "1": "current_value_equals_value"
                },
                "*(undefined4 *)(param_2 + 2)": {
                    "2": "found_value",
                    "1": "get_next_value(array)",
                    "3": "result"
                },
                "param_2 + 6": {
                    "3": "next_array_element",
                    "1": "next_element"
                },
                "param_2[0]": {
                    "1": "current_value"
                },
                "param_2[1]": {
                    "1": "array[1]"
                },
                "param_2[2]": {
                    "1": "array[2]"
                },
                "param_2[3]": {
                    "1": "array[3]"
                },
                "param_2[4]": {
                    "1": "array[4]"
                },
                "param_2[5]": {
                    "1": "array[5]"
                },
                "param_2 = param_2 + 6": {
                    "1": "move_to_next_element"
                },
                "param_2[6]": {
                    "1": "next_value"
                },
                "ptr_1": {
                    "1": "value_index"
                },
                "break": {
                    "1": "exit_loop"
                },
                "+ 6": {
                    "1": "next_element"
                },
                "+ 2": {
                    "1": "result"
                },
                "(param_2 + 2)": {
                    "1": "result"
                }
            }
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_peripheral_080034f4",
            "code": "\nundefined4 find_peripheral_080034f4(int input_value)\n\n{\n  undefined4 peripheral;\n  \n  if (input_value != -1) {\n    peripheral = pinmap_find_peripheral_080034f4();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_peripheral_080034f4",
                "param_1": "input_value",
                "uVar1": "peripheral"
            },
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080034f4": {
                    "28": "find_peripheral",
                    "2": "find_peripheral_address",
                    "1": "find_valid_peripheral"
                },
                "param_1": {
                    "2": "input_param",
                    "1": "peripheral_index",
                    "21": "input_value"
                },
                "uVar1": {
                    "11": "peripheral",
                    "1": "peripheral_value",
                    "8": "peripheral_found",
                    "4": "result"
                },
                "FUN_080034da": {
                    "1": "search_peripheral",
                    "2": "pinmap_find_peripheral"
                },
                "param_2": {
                    "1": "short_array",
                    "2": "peripheral_list"
                }
            }
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint find_value_in_array_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800351e",
                "FUN_08003506"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003506": {
                    "1": "find_integer",
                    "3": "find_value_by_index",
                    "4": "find_value_index",
                    "10": "find_value_in_array",
                    "2": "find_param_value"
                },
                "param_1": {
                    "3": "value_to_find",
                    "1": "value_index",
                    "8": "target_value",
                    "9": "value",
                    "2": "index",
                    "4": "target"
                },
                "param_2": {
                    "3": "short_array",
                    "20": "array",
                    "1": "values",
                    "4": "array_ptr"
                },
                "*(int *)(param_2 + 2)": {
                    "1": "array_element",
                    "2": "array_value",
                    "5": "current_value"
                },
                "*param_2": {
                    "1": "current_value",
                    "2": "found_value",
                    "4": "result"
                },
                "param_2+2": {
                    "1": "current_value"
                },
                "*param_2+2": {
                    "1": "next_element"
                },
                "return -1": {
                    "1": "element_not_found"
                },
                "param_2 + 6": {
                    "1": "next_array_offset"
                },
                "(int)*param_2": {
                    "1": "found_value"
                },
                "param_2+6": {
                    "1": "next_array_element"
                },
                "local_var_1": {
                    "1": "size"
                },
                "local_var_2": {
                    "1": "current_element"
                },
                "param_2 + 2": {
                    "2": "current_element",
                    "1": "data_array_offset"
                },
                "*param_2 + 2": {
                    "1": "element_value"
                },
                "*param_2 + 6": {
                    "1": "next_element"
                },
                "*current_element": {
                    "1": "result"
                },
                "param_3": {
                    "1": "array_length"
                },
                "param_4": {
                    "1": "current_element"
                },
                "param_5": {
                    "1": "step_size"
                },
                "value": {
                    "1": "value_to_find"
                },
                "array": {
                    "1": "data_array"
                },
                "array_length": {
                    "1": "data_array_length"
                },
                "current_element": {
                    "1": "current_value"
                },
                "step_size": {
                    "1": "step"
                },
                "param_2 = param_2 + 6": {
                    "1": "advance_array_pointer"
                }
            }
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_pin_or_default_0800351e",
            "code": "\nundefined4 find_pin_or_default_0800351e(int pin_id)\n\n{\n  undefined4 pin_result;\n  \n  if (pin_id != 0) {\n    pin_result = pinmap_find_pin();\n    return pin_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_pin_or_default_0800351e",
                "param_1": "pin_id",
                "uVar1": "pin_result"
            },
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800351e": {
                    "9": "find_pin_or_default",
                    "1": "find_pin_with_param",
                    "2": "find_pin_or_fail",
                    "6": "find_pin_or_error",
                    "4": "find_pin"
                },
                "param_1": {
                    "1": "pin_param",
                    "5": "pin_value",
                    "2": "input_param",
                    "10": "pin_id"
                },
                "uVar1": {
                    "10": "pin_result",
                    "1": "pin",
                    "4": "pin_value",
                    "8": "found_pin",
                    "5": "result"
                },
                "FUN_08003506": {
                    "1": "find_pin_mapping"
                },
                "param_2": {
                    "1": "pin_mapping_array"
                }
            }
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_in_array_0800352e",
            "code": "\nundefined4 find_value_in_array_0800352e(int value_to_find,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      found_value 0xffffffff;\n    }\n    if (*array == value_to_find) found_value;\n    array = array + 6;\n  }\n  found_value *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value_to_find",
                "param_2": "array",
                "break": "found_value",
                "return": "found_value"
            },
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800352e": {
                    "2": "find_parameter_value",
                    "5": "find_value",
                    "1": "find_value_by_index",
                    "10": "find_value_in_array"
                },
                "param_1": {
                    "11": "value",
                    "1": "index",
                    "7": "target_value"
                },
                "param_2": {
                    "1": "short_array",
                    "26": "array"
                },
                "param_2[0]": {
                    "2": "current_value"
                },
                "PTR_XXXX": {
                    "1": "new_variable_name"
                },
                "*param_2": {
                    "1": "array[cur]",
                    "6": "current_value"
                },
                "param_2 + 6": {
                    "1": "next_value_ptr",
                    "2": "next_value",
                    "4": "next_array_element"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "1": "next_value",
                    "4": "found_value",
                    "5": "result"
                },
                "return 0xffffffff": {
                    "1": "return_not_found"
                },
                "return *(undefined4 *)(param_2 + 4)": {
                    "1": "return_element_value"
                },
                "*param_2 == -1": {
                    "1": "reached_end_of_array"
                },
                "*param_2 == param_1": {
                    "1": "found_target_value"
                },
                "param_2 = param_2 + 6": {
                    "1": "advance_to_next_element"
                },
                "param_2[6]": {
                    "1": "next_element"
                },
                "param_2+6": {
                    "1": "next_array_entry"
                },
                "break": {
                    "1": "found_value"
                },
                "array[cur]": {
                    "1": "current_value"
                },
                "return": {
                    "1": "found_value"
                },
                "break_label": {
                    "1": "found_value"
                },
                "local_1": {
                    "1": "current_value"
                },
                "local_2": {
                    "1": "array_ptr"
                },
                "local_3": {
                    "1": "next_array_index"
                },
                "param_2[i]": {
                    "1": "current_value"
                },
                "PTR_": {
                    "1": ""
                },
                "DAT_": {
                    "1": ""
                }
            }
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_function_result_0800354a",
            "code": "\nundefined4 find_function_result_0800354a(int input_value)\n\n{\n  undefined4 function_result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  function_result = pinmap_find_function();\n  return function_result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_function_result_0800354a",
                "param_1": "input_value",
                "uVar1": "function_result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_08003380",
                "FUN_0800339c",
                "FUN_08003978"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800354a": {
                    "1": "find_pin",
                    "3": "find_function_in_pinmap",
                    "2": "find_pin_function",
                    "4": "find_function"
                },
                "param_1": {
                    "1": "pin_index",
                    "20": "input_value",
                    "3": "pin_id",
                    "6": "input_param"
                },
                "uVar1": {
                    "2": "function_found",
                    "15": "function_result",
                    "7": "result"
                }
            }
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short_array *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) exit_loop\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array",
                "break;": "exit_loop",
                "param": "value",
                "short": "short_array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800355e": {
                    "1": "find_integer_in_array",
                    "5": "find_value",
                    "3": "check_value_in_array",
                    "15": "find_value_in_array"
                },
                "param_1": {
                    "5": "value_to_find",
                    "2": "value1",
                    "4": "target_value",
                    "1": "target_integer",
                    "15": "value"
                },
                "param_2": {
                    "1": "ptr_array",
                    "18": "array",
                    "2": "value_list",
                    "3": "values_array"
                },
                "*param_2": {
                    "1": "current_element",
                    "6": "current_value"
                },
                "param_2 + 6": {
                    "1": "next_value"
                },
                "param_1 == -1": {
                    "1": "value_to_check_equals_negative_one"
                },
                "*param_2 == -1": {
                    "1": "current_value_equals_negative_one"
                },
                "param_1 == *param_2": {
                    "1": "value_to_check_equals_current_value"
                },
                "break;": {
                    "1": "exit_loop"
                },
                "param": {
                    "1": "value"
                },
                "ptr_array": {
                    "1": "array_ptr"
                },
                "short": {
                    "1": "short_array"
                },
                "new_variable_name_1": {
                    "1": "array_value"
                }
            }
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_smaller_08003582",
            "code": "\nint compare_and_return_smaller_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_smaller_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003582": {
                    "1": "compare_and_return_first_non_zero",
                    "3": "find_nonzero",
                    "10": "compare_and_return_smaller",
                    "2": "find_common_value"
                },
                "param_1": {
                    "1": "first_param",
                    "4": "input_1",
                    "8": "value_1",
                    "12": "value1"
                },
                "param_2": {
                    "1": "second_param",
                    "8": "value_2",
                    "4": "input_2",
                    "12": "value2"
                },
                "return_val": {
                    "1": "common_number"
                }
            }
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid execute_callback_function_08003594(void)\n\n{\n  if (DAT_20000188 != (callback_function *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594",
                "code": "callback_function"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003594": {
                    "17": "execute_callback_function",
                    "1": "execute_function",
                    "13": "execute_callback"
                },
                "code": {
                    "4": "callback_function"
                },
                "executeCallbackFunction": {
                    "1": "execute_callback_function",
                    "2": "execute_callback"
                },
                "callbackFunction": {
                    "1": "callback_function"
                },
                "DAT_20000188": {
                    "1": "callback_pointer",
                    "5": "callback_function_pointer",
                    "2": "callback_function_ptr",
                    "15": "callback_function"
                },
                "DAT_200001ac": {
                    "8": "callback_data",
                    "1": "parameter",
                    "3": "callback_function_argument",
                    "6": "callback_parameter",
                    "4": "callback_argument"
                },
                "executeCallback": {
                    "1": "execute"
                },
                "execute_callback_function": {
                    "1": "call_callback_function"
                }
            }
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_system_080035bc",
            "code": "\n\n\nvoid initialize_system_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_system_080035bc"
            },
            "calling": [
                "FUN_08000d3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035bc": {
                    "2": "initialize_hardware",
                    "6": "initialize_registers",
                    "1": "initialize_device",
                    "13": "initialize_system",
                    "8": "initialize_memory"
                },
                "_DAT_40023800": {
                    "2": "register3",
                    "1": "device_control",
                    "17": "control_register"
                },
                "_DAT_e000ed08": {
                    "5": "interrupt_register",
                    "1": "debug_core_control",
                    "2": "register5",
                    "3": "interrupt_control_register"
                },
                "": {
                    "1": ""
                },
                "_DAT_40023804": {
                    "1": "base_memory_address",
                    "2": "register2",
                    "11": "base_address",
                    "4": "memory_address"
                },
                "_DAT_4002380c": {
                    "1": "status_register",
                    "2": "register4"
                },
                "_DAT_40023808": {
                    "1": "device_status",
                    "2": "register1"
                },
                "new_variable_1": {
                    "1": "system_status"
                },
                "new_variable_2": {
                    "1": "timer_control"
                }
            }
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "clear_flags_080035fc",
            "code": "\n\n\nvoid clear_flags_080035fc(int *register_value)\n\n{\n  if (*register_value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*register_value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*register_value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*register_value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*register_value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*register_value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*register_value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*register_value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*register_value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*register_value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*register_value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*register_value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*register_value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*register_value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  void;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "clear_flags_080035fc",
                "param_1": "register_value",
                "return": "void"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080035fc": {
                    "1": "clear_status_flags",
                    "2": "update_data_registers",
                    "3": "update_settings",
                    "7": "clear_flags"
                },
                "param_1": {
                    "2": "data_ptr",
                    "1": "data_value",
                    "3": "param",
                    "4": "register_value"
                },
                "_DAT_40023844": {
                    "1": "config_mask2",
                    "2": "flag2",
                    "4": "flag_register1",
                    "3": "register1"
                },
                "_DAT_40023840": {
                    "1": "peripheral_register1",
                    "2": "flags1",
                    "4": "flag_register2",
                    "3": "register2"
                },
                "*param_1": {
                    "1": "param"
                },
                "param_1 (dereferenced)": {
                    "1": "status"
                },
                "param_1_value": {
                    "1": "flag_value"
                },
                "flagValue": {
                    "1": "flag_value"
                },
                "0x40010000": {
                    "1": "flag_0"
                },
                "0x40000000": {
                    "1": "flag_1"
                },
                "0x40000400": {
                    "1": "flag_2"
                },
                "0x40000800": {
                    "1": "flag_3"
                },
                "0x40000c00": {
                    "1": "flag_4"
                },
                "0x40001000": {
                    "1": "flag_5"
                },
                "0x40001400": {
                    "1": "flag_6"
                },
                "0x40010400": {
                    "1": "flag_7"
                },
                "0x40014000": {
                    "1": "flag_8"
                },
                "0x40014400": {
                    "1": "flag_9"
                },
                "0x40014800": {
                    "1": "flag_10"
                },
                "0x40001800": {
                    "1": "flag_11"
                },
                "0x40001c00": {
                    "1": "flag_12"
                },
                "0x40002000": {
                    "1": "flag_13"
                },
                "return": {
                    "1": "void"
                }
            }
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_value)\n\n{\n  result input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_value",
                "return": "result"
            },
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003750": {
                    "29": "subtract_four",
                    "2": "subtract_by_four"
                },
                "param_1": {
                    "7": "input_number",
                    "11": "input_value",
                    "1": "num",
                    "2": "output",
                    "3": "result"
                },
                "return": {
                    "1": "result"
                },
                "param_2": {
                    "1": "new_parameter_name_2"
                },
                "param_3": {
                    "1": "new_param_3"
                },
                "param_4": {
                    "1": "new_param_4"
                },
                "param_5": {
                    "1": "new_param_5"
                },
                "param_6": {
                    "1": "new_param_6"
                },
                "param_7": {
                    "1": "new_param_7"
                },
                "param_8": {
                    "1": "new_param_8"
                },
                "param_9": {
                    "1": "new_param_9"
                },
                "param_10": {
                    "1": "new_param_10"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "variable_name_1": {
                    "1": "result"
                },
                "variable_name_2": {
                    "1": "new_variable_name_2"
                },
                "variable_name_n": {
                    "1": "new_variable_name_n"
                }
            }
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_timer_function_08003754",
            "code": "\nvoid execute_timer_function_08003754(int timer_index)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if ((*(function_pointer **)(timer_obj + 0x48) != (function_pointer *)0x0) && (*(char *)(timer_index + 0x18) == '\\x01')) {\n    (**(function_pointer **)(timer_obj + 0x48))(timer_obj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_timer_function_08003754",
                "param_1": "timer_index",
                "iVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003754": {
                    "1": "execute_timed_function",
                    "10": "execute_timer_callback",
                    "4": "execute_timer_action",
                    "12": "execute_timer_function"
                },
                "param_1": {
                    "4": "timer_id",
                    "1": "input_param",
                    "13": "timer_index",
                    "6": "timer_object",
                    "3": "timer_obj"
                },
                "iVar1": {
                    "1": "timer_pointer",
                    "3": "timer_handle",
                    "2": "timer",
                    "5": "timer_object",
                    "14": "timer_obj"
                },
                "get_timer_obj": {
                    "1": "get_current_timer_object",
                    "4": "get_current_timer_obj",
                    "2": "retrieve_timer_obj",
                    "5": "get_timer_object"
                },
                "(code **)": {
                    "2": "function_pointer"
                },
                "(char *)": {
                    "1": "flags"
                },
                "FUN_08003750": {
                    "1": "check_flags",
                    "6": "get_timer_obj",
                    "2": "get_timer_object"
                },
                "(iVar1 + 0x48)": {
                    "1": "event_function"
                },
                "(param_1 + 0x18)": {
                    "1": "timer_flag"
                },
                "*(code **)(iVar1 + 0x48)": {
                    "1": "callback_function"
                },
                "*(char *)(param_1 + 0x18)": {
                    "1": "is_timer_valid"
                },
                "VAR_1": {
                    "1": "callback"
                },
                "param_1 + 0x18": {
                    "2": "timer_flag",
                    "1": "timer_enabled"
                },
                "(code **) iVar1 + 0x48": {
                    "1": "timer_callback"
                },
                "FUN_08003750_param_1": {
                    "1": "index"
                },
                "timerObj + 0x48": {
                    "1": "timer_func_ptr"
                },
                "code *": {
                    "1": "function_pointer"
                },
                "char *": {
                    "1": "character_pointer"
                },
                "FUn_08003750": {
                    "1": "get_timer_obj"
                },
                "code": {
                    "1": "timer_function",
                    "2": "function_pointer"
                },
                "PTR_08003748": {
                    "1": "timer_func_ptr"
                }
            }
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_timer_function_0800376e",
            "code": "\nvoid execute_timer_function_0800376e(void)\n\n{\n  int timer_obj;\n  \n  timer_obj = get_timer_object();\n  if (*(function_pointer **)(timer_obj + 0x44) != (function_pointer *)0x0) {\n    (**(function_pointer **)(timer_obj + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_timer_function_0800376e",
                "iVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800376e": {
                    "1": "execute_timer_code",
                    "7": "execute_timer_callback",
                    "21": "execute_timer_function"
                },
                "iVar1": {
                    "1": "timer_obj_ptr",
                    "12": "timer_object",
                    "17": "timer_obj"
                },
                "get_timer_obj": {
                    "1": "get_current_timer_obj",
                    "2": "retrieve_timer_object",
                    "7": "get_timer_object"
                },
                "param_1": {
                    "1": "timer_obj",
                    "2": "timer_index",
                    "3": "input_param"
                },
                "*(code **)(iVar1 + 0x44)": {
                    "1": "timer_code"
                },
                "(code *)0x0": {
                    "1": "null_callback",
                    "2": "null"
                },
                "FUN_08003750": {
                    "1": "calculate_timer_value",
                    "12": "get_timer_obj",
                    "3": "get_timer_object"
                },
                "code": {
                    "1": "function_ptr",
                    "2": "function_pointer"
                },
                "*(code **)(timer_obj + 0x44)": {
                    "1": "callback_func"
                },
                "*iVar1 + 0x44": {
                    "1": "timer_callback_function"
                },
                "0x44": {
                    "1": "function_pointer_offset"
                },
                "(code **)(timer_obj + 0x44)": {
                    "1": "function_pointer"
                },
                "(*(code **)(iVar1 + 0x44))": {
                    "1": "timer_function"
                },
                "(code **)": {
                    "1": "function_pointer"
                },
                "(code *)": {
                    "1": "function"
                },
                "**(code **)(iVar1 + 0x44)": {
                    "1": "call_timer_callback"
                },
                "timer_object": {
                    "1": "timer"
                },
                "input_param": {
                    "1": "param"
                },
                "iVar1 + 0x44": {
                    "1": "timer_function_ptr"
                }
            }
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "handle_tim_interrupts_0800377c",
            "code": "\nvoid handle_tim_interrupts_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    handle_timer_interrupt();\n  }\n  if (DAT_200001d4 != 0) {\n    handle_timer_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "handle_tim_interrupts_0800377c",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800377c": {
                    "2": "handle_tim_irq",
                    "1": "handle_tim_irq_handler",
                    "9": "handle_timer_interrupts",
                    "6": "handle_timers",
                    "11": "handle_tim_interrupts"
                },
                "FUN_080026ce": {
                    "4": "update_parameter",
                    "1": "process_timer",
                    "3": "process_param",
                    "2": "process_interrupt"
                },
                "param_1": {
                    "3": "parameter",
                    "1": "param"
                },
                "DAT_200001b0": {
                    "1": "timer_interrupt_flag_1",
                    "4": "flag_1"
                },
                "DAT_200001d4": {
                    "1": "is_timer2_active",
                    "4": "flag_2"
                },
                "HAL_TIM_IRQHandler": {
                    "1": "handle_tim_interrupts"
                },
                "*param_1": {
                    "1": "timer_array"
                }
            }
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int result)\n\n{\n  result result + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "result",
                "return": "result"
            },
            "calling": [
                "FUN_08003900",
                "FUN_08003880",
                "FUN_080038d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800387c": {
                    "1": "decrement_by_four",
                    "29": "subtract_four"
                },
                "param_1": {
                    "7": "input_value",
                    "1": "output",
                    "2": "num",
                    "8": "result"
                },
                "<new_variable_name>": {
                    "1": "<original_variable_name>"
                },
                "param_2": {
                    "1": "new_param_2"
                },
                "param_n": {
                    "1": "new_param_n"
                },
                "var_1": {
                    "1": "result"
                },
                "var_2": {
                    "1": "temp"
                },
                "var_n": {
                    "1": "value"
                },
                "return": {
                    "1": "result"
                },
                "VAR_1": {
                    "1": "result"
                }
            }
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "transmit_or_receive_data_08003880",
            "code": "\nvoid transmit_or_receive_data_08003880(int data_buffer,int is_transmit,int data_length,undefined4 callback_function)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2_c_object();\n  if (data_length == *(int *)(data_buffer + 0xc)) {\n    if (is_transmit == 0) {\n      *(undefined *)(i2c_obj + 0x88) = 0;\n      *(undefined *)(i2c_obj + 0x5e) = 0;\n      if (*(code **)(i2c_obj + 100) != (code *)0x0) {\n        (**(code **)(i2c_obj + 100))();\n      }\n      transmit_data(data_buffer,i2c_obj + 0x68,*(undefined *)(i2c_obj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2c_obj + 0x5e) = 1;\n    receive_data(data_buffer,i2c_obj + 0x68,0x20,8,callback_function);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "transmit_or_receive_data_08003880",
                "param_1": "data_buffer",
                "param_2": "is_transmit",
                "param_3": "data_length",
                "param_4": "callback_function",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2_c_object",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmit_data",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receive_data"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003880": {
                    "1": "perform_i2_c_operation",
                    "2": "perform_i2_c_communication",
                    "4": "transmit_data",
                    "18": "transmit_or_receive_data"
                },
                "param_1": {
                    "1": "param_addr",
                    "4": "device_address",
                    "2": "i2c_object",
                    "10": "data_buffer"
                },
                "param_2": {
                    "1": "input_parameter2",
                    "13": "is_transmit",
                    "2": "operation_type",
                    "4": "is_receive",
                    "3": "is_transmitting"
                },
                "param_3": {
                    "1": "offset",
                    "3": "expected_length",
                    "2": "expected_size",
                    "6": "data_length"
                },
                "param_4": {
                    "9": "callback",
                    "2": "user_data",
                    "1": "result_ptr",
                    "3": "callback_func",
                    "11": "callback_function"
                },
                "iVar1": {
                    "1": "i2c_device_object",
                    "11": "i2c_object",
                    "18": "i2c_obj"
                },
                "get_i2c_obj": {
                    "1": "get_i2c_obj",
                    "4": "get_i2c_object",
                    "16": "get_i2_c_object"
                },
                "HAL_I2C_Slave_Sequential_Transmit_IT": {
                    "1": "transmit_data_using_i2_c",
                    "6": "transmit_data",
                    "2": "transmit_data_it"
                },
                "HAL_I2C_Slave_Sequential_Receive_IT": {
                    "1": "perform_sequential_receive",
                    "6": "receive_data",
                    "2": "receive_data_it"
                },
                "*(int *)(param_1 + 0xc)": {
                    "1": "param1_c_value"
                },
                "*(undefined *)(iVar1 + 0x88)": {
                    "1": "data_value1"
                },
                "*(undefined *)(iVar1 + 0x5e)": {
                    "1": "receive_flag"
                },
                "*(code **)(iVar1 + 100)": {
                    "1": "callback_pointer"
                },
                "(code *)0x0": {
                    "1": "null_callback_function_ptr"
                },
                "(**callbackFuncPtr)()": {
                    "1": "invoke_callback_function"
                },
                "param_1 + 0x68": {
                    "1": "i2c_receive_buffer"
                },
                "param_1 + 0xc": {
                    "1": "data_buffer_length"
                },
                "iVar1 + 0x88": {
                    "1": "transmit_buffer"
                },
                "iVar1 + 0x5e": {
                    "1": "receive_buffer"
                },
                "iVar1 + 100": {
                    "1": "callback_function_ptr"
                },
                "*(undefined *)(iVar1 + 0x88),8": {
                    "1": "transmit_data_length"
                },
                "iVar1 + 0x68,0x20": {
                    "1": "receive_data_length"
                },
                "FUN_080014ec": {
                    "1": "process_data"
                },
                "FUN_08001460": {
                    "1": "process_data"
                },
                "FUN_0800387c": {
                    "1": "get_i2_c_object"
                }
            }
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "enable_i2c_and_listen_080038d0",
            "code": "\nvoid enable_i2c_and_listen_080038d0(undefined4 param)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object();\n  if (((*(function_pointer **)(i2c_obj + 0x60) != (function_pointer *)0x0) && (*(char *)(i2c_obj + 0x5e) == '\\x01')) &&\n     (*(char *)(i2c_obj + 0x2c) != ' ')) {\n    (**(function_pointer **)(i2c_obj + 0x60))(i2c_obj + 0x68);\n  }\n  enable_i2c_listen_interrupt(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "enable_i2c_and_listen_080038d0",
                "param_1": "param",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt",
                "code": "function_pointer"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001bfc",
                "FUN_08001684"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080038d0": {
                    "1": "enable_i2c_and_check_conditions",
                    "6": "enable_i2c_and_listen",
                    "3": "enable_i2c_listen",
                    "2": "enable_i2c_and_set_listen_interrupt"
                },
                "param_1": {
                    "2": "parameter",
                    "1": "listen_object",
                    "5": "i2c_handle",
                    "8": "param"
                },
                "iVar1": {
                    "5": "i2c_object",
                    "25": "i2c_obj",
                    "1": "i2c_object_handle"
                },
                "FUN_08001578": {
                    "2": "process_i2c_data",
                    "1": "process_i2c_object",
                    "4": "get_i2c_obj"
                },
                "FUN_0800387c": {
                    "3": "check_i2c_conditions",
                    "1": "execute_i2c_callback",
                    "2": "check_condition"
                },
                "get_i2c_obj": {
                    "1": "retrieve_i2c_obj",
                    "17": "get_i2c_object"
                },
                "HAL_I2C_EnableListen_IT": {
                    "1": "enable_i2_c_listen_interrupt",
                    "3": "enable_i2c_listen_it",
                    "10": "enable_i2c_listen_interrupt"
                },
                "code": {
                    "1": "callback_function",
                    "2": "function_pointer"
                },
                "*(code **)(iVar1 + 0x60)": {
                    "1": "i2c_obj_func_ptr"
                },
                "*(char *)(iVar1 + 0x5e)": {
                    "1": "is_enabled"
                },
                "*(char *)(iVar1 + 0x2c)": {
                    "1": "i2c_obj_char"
                },
                "FUND_08001578": {
                    "1": "get_i2_c_object"
                },
                "param_2": {
                    "1": "param_1"
                },
                "param_3": {
                    "1": "param_2"
                },
                "(code **)": {
                    "1": "function_ptr"
                },
                "(iVar1 + 0x60)": {
                    "1": "execute_listen_function"
                },
                "(char *)": {
                    "1": "character_ptr"
                },
                "(iVar1 + 0x5e)": {
                    "1": "listen_condition_ptr"
                },
                "(iVar1 + 0x2c)": {
                    "1": "space_check_ptr"
                },
                "' '": {
                    "1": "space_char"
                },
                "(iVar1 + 0x68)": {
                    "1": "listen_function_argument"
                },
                "FUNCHUNK_08001578": {
                    "1": "get_i2c_obj"
                }
            }
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "enable_i2c_listen_08003900",
            "code": "\nvoid enable_i2c_listen_08003900(undefined4 i2c_object)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object_address();\n  if (*(char *)(i2c_obj + 0x5f) == '\\0') {\n    enable_i2c_listen_08003900_interrupt(i2c_obj_address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "enable_i2c_listen_08003900",
                "param_1": "i2c_object",
                "iVar1": "i2c_obj",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt",
                "get_i2c_obj()": "get_i2c_object_address()",
                "HAL_I2C_EnableListen_IT(param_1)": "enable_i2c_listen_interrupt(i2c_obj_address)",
                "get_i2c_obj": "get_i2_c_object"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003900": {
                    "4": "enable_i2_c_listen",
                    "1": "enable_i2_c_listening",
                    "9": "enable_i2c_listen",
                    "5": "enable_i2c_listen_interrupt",
                    "7": "enable_i2_c_listen_interrupt"
                },
                "param_1": {
                    "2": "i2c_instance",
                    "1": "param_obj",
                    "3": "param",
                    "5": "i2c_handle"
                },
                "iVar1": {
                    "2": "i2c_object_address",
                    "3": "i2c_object",
                    "1": "i2c_obj_var",
                    "20": "i2c_obj"
                },
                "HAL_I2C_EnableListen_IT": {
                    "1": "enable_i2_c_listening_interrupt",
                    "6": "enable_i2c_listen_interrupt",
                    "3": "enable_i2_c_listen_interrupt",
                    "2": "enable_i2_c_listen_interrupt_it"
                },
                "get_i2c_obj()": {
                    "1": "get_i2c_object()"
                },
                "*(char *)(iVar1 + 0x5f)": {
                    "1": "is_listen_mode_enabled",
                    "2": "i2c_listen_flag"
                },
                "HAL_I2C_EnableListen_IT(param_1)": {
                    "1": "enable_i2c_listen_interrupt(i2c_obj_address)"
                },
                "get_i2c_obj": {
                    "3": "get_i2c_object",
                    "1": "get_i2_c_obj",
                    "6": "get_i2_c_object"
                },
                "HAL_I2C_EnableListen_IT()": {
                    "1": "enable_i2c_listen_it()"
                },
                "FUN_08001578": {
                    "1": "get_i2c_obj"
                },
                "FUN_0800387c": {
                    "1": "check_i2c_status"
                }
            }
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "initialize_uart_pins_08003978",
            "code": "\n\n\nvoid initialize_uart_pins_08003978(int *pins)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpio_clock1;\n  uint pin_function;\n  uint pin_mask1;\n  uint pin_config1;\n  uint gpio_mode1;\n  undefined4 pin_config3;\n  uint gpio_pull1;\n  \n  if (pins != (int *)0x0) {\n    peripheral1 = map_peripheral((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n    peripheral2 = map_peripheral((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      print_error_message(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = merge_peripheral(peripheral1);\n      *pins = peripheral1;\n      if (peripheral1 == 0) {\n        print_error_message(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)(pins + 0x17) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)(pins + 0x17) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)(pins + 0x17) = 0x27;\n        }\n        else if (peripheral1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pins + 0x11) = 3;\n          *(undefined *)(pins + 0x17) = 0x34;\n        }\n        else if (peripheral1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pins + 0x11) = 4;\n          *(undefined *)(pins + 0x17) = 0x35;\n        }\n        else if (peripheral1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pins + 0x11) = 5;\n          *(undefined *)(pins + 0x17) = 0x47;\n        }\n        else if (peripheral1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pins + 0x11) = 6;\n          *(undefined *)(pins + 0x17) = 0x52;\n        }\n        else if (peripheral1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pins + 0x11) = 7;\n          *(undefined *)(pins + 0x17) = 0x53;\n        }\n        gpio_clock1 = set_gpio_port_clock((uint)((int)*(short *)((int)pins + 0x5a) << 0x18) >> 0x1c);\n        pin_function = map_function((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n        pin_mask1 = 1 << (*(ushort *)((int)pins + 0x5a) & 0xf) & 0xffff;\n        pin_config1 = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        gpio_mode1 = (pin_function << 0x1a) >> 0x1e;\n        gpio_pull1 = (pin_function << 0x11) >> 0x19;\n        pin_config3 = 3;\n        initialize_gpio(gpio_clock1,&pin_mask1);\n        gpio_clock1 = set_gpio_port_clock((uint)((int)*(short *)(pins + 0x16) << 0x18) >> 0x1c);\n        pin_function = map_function((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n        pin_mask1 = 1 << (*(ushort *)(pins + 0x16) & 0xf) & 0xffff;\n        pin_config1 = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        gpio_mode1 = (pin_function << 0x1a) >> 0x1e;\n        initialize_gpio(gpio_clock1,&pin_mask1);\n        (&DAT_200002b4)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        initialize_uart(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "initialize_uart_pins_08003978",
                "param_1": "pins",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpio_clock1",
                "uVar4": "pin_function",
                "local_2c": "pin_mask1",
                "local_28": "pin_config1",
                "local_24": "gpio_mode1",
                "local_20": "pin_config3",
                "local_1c": "gpio_pull1",
                "set_GPIO_Port_Clock": "set_gpio_port_clock",
                "pinmap_peripheral": "map_peripheral",
                "pinmap_function": "map_function",
                "iprintf": "print_error_message",
                "HAL_GPIO_Init": "initialize_gpio",
                "HAL_UART_Init": "initialize_uart",
                "pinmap_merge_peripheral": "merge_peripheral"
            },
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003978": {
                    "14": "initialize_uart_pins",
                    "2": "initialize_uart_pin",
                    "9": "configure_uart_pins",
                    "1": "configure_serial_interface"
                },
                "param_1": {
                    "1": "param_serial",
                    "8": "pins",
                    "5": "uart_pins",
                    "3": "uart_config",
                    "7": "pin_config",
                    "2": "pin_configuration"
                },
                "iVar1": {
                    "1": "uart_pin1_periph",
                    "2": "peripheral_1",
                    "4": "uart1_peripheral",
                    "10": "peripheral1",
                    "3": "uart_peripheral1"
                },
                "iVar2": {
                    "1": "uart_pin2_periph",
                    "2": "uart2_pin",
                    "10": "peripheral2",
                    "4": "uart2_peripheral",
                    "3": "uart_peripheral2"
                },
                "uVar3": {
                    "3": "gpio_port",
                    "1": "gpio_result1",
                    "2": "gpio_port_clock",
                    "7": "gpio_port_clock1"
                },
                "uVar4": {
                    "4": "gpio_function1",
                    "2": "gpio_port_clock2",
                    "1": "function",
                    "6": "gpio_function",
                    "7": "pin_function"
                },
                "local_2c": {
                    "1": "pin1",
                    "4": "pin_mask",
                    "8": "pin_mask1",
                    "5": "gpio_pin1",
                    "2": "gpio_pin",
                    "3": "gpio_pin_mask1"
                },
                "local_28": {
                    "2": "gpio_mode",
                    "1": "init_value1",
                    "5": "pin_config1",
                    "4": "gpio_config1"
                },
                "local_24": {
                    "2": "gpio_pin_mode1",
                    "1": "gpio_pin3",
                    "3": "gpio_mode1"
                },
                "local_20": {
                    "1": "gpio_type1",
                    "2": "gpio_mode"
                },
                "local_1c": {
                    "1": "pin_config_4",
                    "4": "gpio_pull1",
                    "2": "pin_config4"
                },
                "DAT_08005ca0": {
                    "1": "uart2_pinmap"
                },
                "DAT_08005c10": {
                    "1": "gpio_map2"
                },
                "set_GPIO_Port_Clock": {
                    "2": "set_gpio_port_clock",
                    "1": "setup_gpio_port_clock"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral",
                    "2": "map_peripheral"
                },
                "pinmap_function": {
                    "2": "map_function",
                    "1": "get_pin_function"
                },
                "iprintf": {
                    "2": "print_error_message"
                },
                "_DAT_40023824": {
                    "1": "register1"
                },
                "_DAT_40023844": {
                    "1": "register2"
                },
                "HAL_GPIO_Init": {
                    "1": "gpio_init",
                    "4": "initialize_gpio"
                },
                "HAL_UART_Init": {
                    "1": "initialize_uart_peripheral",
                    "2": "initialize_uart"
                },
                "FUN_080034f4": {
                    "4": "pinmap_peripheral"
                },
                "FUN_0800354a": {
                    "1": "iprintf",
                    "3": "pinmap_merge_peripheral"
                },
                "FUN_08002d72": {
                    "3": "set_gpio_port_clock",
                    "1": "pinmap_merge_peripheral"
                },
                "FUN_08000fb4": {
                    "1": "set_gpio_port_clock",
                    "3": "pinmap_function"
                },
                "FUN_08003582": {
                    "2": "hal_gpio_init",
                    "1": "pinmap_function"
                },
                "FUN_08004fdc": {
                    "1": "hal_gpio_init",
                    "2": "hal_uart_init"
                },
                "FUN_080031fc": {
                    "2": "iprintf"
                },
                "param_1 + 0x16": {
                    "1": "param_uart_pin_1"
                },
                "(int)param_1 + 0x5a": {
                    "1": "param_uart_pin_2"
                },
                "FUNK_08003978": {
                    "1": "initialize_uart_pin"
                },
                "pinmap_merge_peripheral": {
                    "2": "merge_peripheral"
                },
                "DAT_40023824": {
                    "1": "uart_reg1"
                },
                "DAT_40023844": {
                    "1": "uart_reg2"
                },
                "DAT_40023820": {
                    "1": "uart_reg3"
                },
                "DAT_40023840": {
                    "1": "uart_reg4"
                }
            }
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int result;\n  undefined4 peripheral_id;\n  \n  result = get_peripheral_address(0x38,&DAT_08005ca0);\n  if (result != 0) {\n    peripheral_id = get_peripheral_address(0x38,&DAT_08005ca0);\n    DAT_2000008a = get_pin_address(peripheral_id,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    initialize_uart_08003cc8(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "result",
                "uVar2": "peripheral_id",
                "pinmap_peripheral": "get_peripheral_address",
                "pinmap_pin": "get_pin_address",
                "uart_init": "initialize_uart"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800351e",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003cc8": {
                    "1": "initialize_peripherals",
                    "25": "initialize_uart",
                    "4": "initialize_peripheral"
                },
                "iVar1": {
                    "4": "peripheral_status",
                    "2": "pinmap_result",
                    "10": "peripheral_result",
                    "11": "result",
                    "1": "pinmap_return_value"
                },
                "uVar2": {
                    "3": "peripheral_result_2",
                    "2": "peripheral_address",
                    "1": "peripheral_result",
                    "4": "peripheral_id"
                },
                "DAT_2000008a": {
                    "5": "pin_number",
                    "1": "pin_id",
                    "4": "pin"
                },
                "DAT_20000088": {
                    "1": "peripheral_register",
                    "9": "peripheral_address",
                    "2": "peripheral_value"
                },
                "DAT_20000078": {
                    "1": "some_value1",
                    "11": "baud_rate",
                    "2": "data_1"
                },
                "DAT_20000084": {
                    "9": "data_bits",
                    "1": "parity",
                    "2": "data_2"
                },
                "DAT_2000007c": {
                    "1": "variable_2",
                    "9": "stop_bits",
                    "2": "data_3"
                },
                "DAT_20000080": {
                    "1": "variable_2",
                    "2": "data_4",
                    "6": "parity"
                },
                "DAT_20000030": {
                    "1": "uart_registers",
                    "4": "uart_config"
                },
                "FUN_080034f4": {
                    "1": "pinmap_peripheral"
                },
                "FUN_0800351e": {
                    "1": "pinmap_peripheral"
                },
                "FUN_08003978": {
                    "1": "uart_init_wrapper"
                },
                "pinmap_peripheral": {
                    "1": "get_peripheral_address"
                },
                "pinmap_pin": {
                    "1": "find_pin"
                },
                "uart_init": {
                    "1": "initialize_uart_module",
                    "4": "initialize_uart"
                },
                "param_1": {
                    "2": "pin_number",
                    "1": "peripheral_id"
                },
                "DAT_08005ca0": {
                    "1": "peripheral_info"
                },
                "DAT_08005c10": {
                    "1": "pin_data"
                }
            }
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "transmit_data_08003d18",
            "code": "\nuint transmit_data_08003d18(undefined4 data,uint length)\n\n{\n  int start_time;\n  int peripheral;\n  uint index;\n  \n  start_time = get_current_time();\n  peripheral = check_peripheral(0x38,&DAT_08005ca0);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (peripheral = check_peripheral(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (initialize_uart_debug(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    peripheral = send_uart_data((&DAT_200002b4)[index],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = get_current_time();\n  } while ((uint)(peripheral - start_time) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "transmit_data_08003d18",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_time",
                "iVar2": "peripheral",
                "uVar3": "index",
                "HAL_GetTick": "get_current_time",
                "pinmap_peripheral": "check_peripheral",
                "uart_debug_init": "initialize_uart_debug",
                "HAL_UART_Transmit": "send_uart_data"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_08003cc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003d18": {
                    "29": "transmit_data",
                    "1": "send_data"
                },
                "param_1": {
                    "26": "data",
                    "1": "data_ptr",
                    "3": "data_buffer"
                },
                "param_2": {
                    "4": "data_length",
                    "20": "length",
                    "2": "data_size",
                    "5": "size"
                },
                "iVar1": {
                    "1": "current_time",
                    "17": "start_time",
                    "12": "start_tick"
                },
                "iVar2": {
                    "13": "peripheral",
                    "1": "peripheral_value",
                    "3": "pinmap_result",
                    "4": "peripheral_id",
                    "2": "peripheral_result"
                },
                "uVar3": {
                    "1": "i",
                    "26": "index"
                },
                "DAT_08005ca0": {
                    "2": "peripheral_address",
                    "1": "pin_data",
                    "5": "peripheral_data"
                },
                "DAT_200002b4": {
                    "1": "uart_transmit_data",
                    "3": "uart_array"
                },
                "DAT_20000074": {
                    "1": "uart_size",
                    "3": "uart_count",
                    "2": "uart_handle_count"
                },
                "FriendlyTransmitData": {
                    "1": "transmit_data"
                },
                "&DAT_200002b4": {
                    "1": "peripheral_mapping"
                },
                "HAL_GetTick": {
                    "1": "get_current_time"
                },
                "pinmap_peripheral": {
                    "1": "check_peripheral"
                },
                "uart_debug_init": {
                    "1": "initialize_uart_debug"
                },
                "HAL_UART_Transmit": {
                    "1": "send_uart_data"
                }
            }
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_uart_state_08003dd0",
            "code": "\nbool check_uart_state_08003dd0(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_200002b4)[*(byte_value *)(input_value + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_uart_state_08003dd0",
                "param_1": "input_value",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_uart_state",
                "byte": "byte_value"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003dd0": {
                    "1": "check_uart_status",
                    "4": "is_uart_state_error",
                    "14": "check_uart_state",
                    "2": "is_uart_state_ready",
                    "5": "is_uart_state_valid"
                },
                "param_1": {
                    "4": "input",
                    "1": "uart_instance",
                    "8": "input_value",
                    "2": "uart_index",
                    "5": "input_param"
                },
                "uVar1": {
                    "1": "state",
                    "30": "uart_state"
                },
                "HAL_UART_GetState": {
                    "11": "get_uart_state"
                },
                "byte": {
                    "2": "byte",
                    "3": "byte_value"
                },
                "*DAT_200002b4": {
                    "1": "uart_data"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "(uVar1 & 0x22)": {
                    "1": "state_check"
                },
                "(byte *)(param_1 + 0x44)": {
                    "1": "byte_ptr"
                },
                "*(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "uart_state_ptr"
                },
                "FUN_0800312c": {
                    "2": "get_uart_state",
                    "1": "get_byte"
                },
                "*byte_(param_1 + 0x44)": {
                    "1": "byte_offset"
                }
            }
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_uart_state_08003df4",
            "code": "\nbool check_uart_state_08003df4(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = get_uart_state((&DAT_200002b4)[*(byte_value *)(input_value + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_uart_state_08003df4",
                "param_1": "input_value",
                "uVar1": "uart_state",
                "byte": "byte_value",
                "HAL_UART_GetState": "get_uart_state"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003df4": {
                    "1": "is_uart_transmitting_data",
                    "11": "check_uart_state",
                    "2": "is_uart_transmitting",
                    "5": "is_uart_state_valid"
                },
                "param_1": {
                    "1": "uart_handle",
                    "4": "uart_index",
                    "3": "device_index",
                    "2": "data_index"
                },
                "uVar1": {
                    "31": "uart_state"
                },
                "byte": {
                    "1": "byte_val",
                    "4": "byte_value"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_offset",
                    "2": "index"
                },
                "HAL_UART_GetState": {
                    "7": "get_uart_state"
                },
                "&DAT_200002b4": {
                    "1": "uart_array"
                },
                "0x21": {
                    "1": "uart_state_valid_mask"
                },
                "FUN_0800312c": {
                    "4": "get_uart_state"
                },
                "int param_1": {
                    "1": "index"
                }
            }
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "receive_data_08003e18",
            "code": "\nundefined4 receive_data_08003e18(int data_buffer,undefined *received_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_serial_rx_active;\n  \n  if (data_buffer == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = check_serial_rx_active();\n  if (is_serial_rx_active == 0) {\n    *received_data = *(undefined *)(data_buffer + 0x45);\n    receive_uart_data((&DAT_200002b4)[*(byte *)(data_buffer + 0x44)],data_buffer + 0x45,1,&DAT_200002b4,\n                        param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "receive_data_08003e18",
                "param_1": "data_buffer",
                "param_2": "received_data",
                "iVar1": "is_serial_rx_active",
                "serial_rx_active": "check_serial_rx_active",
                "HAL_UART_Receive_IT": "receive_uart_data"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003e18": {
                    "1": "receive_and_store_byte_from_serial",
                    "5": "receive_serial_data",
                    "21": "receive_data"
                },
                "param_1": {
                    "1": "data_offset",
                    "2": "data",
                    "3": "data_ptr",
                    "4": "serial_port",
                    "6": "data_buffer"
                },
                "param_2": {
                    "2": "output_buffer",
                    "17": "received_data",
                    "1": "output",
                    "3": "data_buffer"
                },
                "param_3": {
                    "1": "param_error",
                    "6": "param3",
                    "2": "status",
                    "18": "param_3"
                },
                "param_4": {
                    "3": "callback",
                    "6": "param4",
                    "14": "param_4",
                    "1": "callback_function"
                },
                "iVar1": {
                    "2": "is_serial_active",
                    "13": "is_serial_rx_active",
                    "10": "is_rx_active",
                    "3": "is_active"
                },
                "serial_rx_active": {
                    "1": "get_serial_rx_activity_status",
                    "4": "check_serial_rx_active",
                    "2": "is_serial_rx_active"
                },
                "*param_2": {
                    "1": "received_data_val"
                },
                "*(undefined *)(param_1 + 0x45)": {
                    "1": "data_address"
                },
                "HAL_UART_Receive_IT": {
                    "3": "receive_uart_data",
                    "1": "uart_receive_interrupt"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "2": "byte_value",
                    "1": "selected_port"
                },
                "(&DAT_200002b4)[*(byte *)(param_1 + 0x44)]": {
                    "1": "uart_array_element"
                },
                "1": {
                    "1": "data_size"
                },
                "HAL_UART_Receive_IT((&DAT_200002b4)[*(byte *)(param_1 + 0x44)],param_1 + 0x45,1,&DAT_200002b4,param_4);": {
                    "1": "start_uart_receive"
                },
                "FUN_08002efa": {
                    "1": "function_with_signature_fun_08002efa"
                },
                "FUN_08003dd0": {
                    "1": "function_with_signature_fun_08003dd0"
                },
                "(param_1 + 0x45)": {
                    "1": "data_address"
                },
                "DAT_200002b4": {
                    "1": "uart_data_array"
                },
                "&DAT_200002b4": {
                    "1": "uart_data_ptr"
                }
            }
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "initialize_serial_communication_08003e54",
            "code": "\nvoid initialize_serial_communication_08003e54(int serial_port,undefined4 data,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_serial_rx_active;\n  uint serial_port_index;\n  \n  if (serial_port != 0) {\n    is_serial_rx_active = is_serial_rx_active();\n    if (is_serial_rx_active == 0) {\n      serial_port_index = (uint)*(byte *)(serial_port + 0x44);\n      *(undefined4 *)(&DAT_20000214 + serial_port_index * 4) = data;\n      *(int *)(&DAT_2000023c + serial_port_index * 4) = serial_port;\n      set_interrupt_priority((int)*(char *)(serial_port + 0x5c),0,1,serial_port_index,param_4);\n      enable_interrupt((int)*(char *)(serial_port + 0x5c));\n      receive_data_interrupt((&DAT_200002b4)[*(byte *)(serial_port + 0x44)],serial_port + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "initialize_serial_communication_08003e54",
                "param_1": "serial_port",
                "param_2": "data",
                "iVar1": "is_serial_rx_active",
                "uVar2": "serial_port_index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Receive_IT": "receive_data_interrupt",
                "serial_rx_active": "is_serial_rx_active"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08000ec4",
                "FUN_08000e60",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003e54": {
                    "2": "initialize_serial_port",
                    "1": "handle_serial_event",
                    "7": "initialize_serial",
                    "12": "initialize_serial_communication"
                },
                "param_1": {
                    "1": "serial_device_address",
                    "2": "serial_device",
                    "18": "serial_port"
                },
                "param_2": {
                    "19": "data",
                    "1": "config_value1",
                    "2": "priority",
                    "6": "baud_rate"
                },
                "param_3": {
                    "1": "irq_priority",
                    "4": "param3",
                    "10": "param_3"
                },
                "param_4": {
                    "4": "param4",
                    "1": "unused2",
                    "7": "param_4",
                    "3": "priority",
                    "5": "interrupt_priority"
                },
                "iVar1": {
                    "3": "serial_active",
                    "2": "is_rx_active",
                    "19": "is_serial_rx_active",
                    "1": "is_serial_active"
                },
                "uVar2": {
                    "1": "port_num",
                    "6": "serial_port_index",
                    "5": "index"
                },
                "DAT_20000214": {
                    "1": "pointer_array1"
                },
                "DAT_2000023c": {
                    "1": "pointer_array2"
                },
                "HAL_NVIC_SetPriority": {
                    "6": "set_interrupt_priority",
                    "1": "configure_interrupt_priority",
                    "2": "set_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "6": "enable_interrupt",
                    "1": "enable_irq_interrupt",
                    "2": "enable_irq"
                },
                "HAL_UART_Receive_IT": {
                    "1": "receive_uart_interrupt",
                    "2": "receive_interrupt"
                },
                "FUN_08002efa": {
                    "3": "serial_rx_active"
                },
                "FUN_08000ec4": {
                    "1": "hal_nvic_set_priority",
                    "2": "set_priority"
                },
                "FUN_08000e60": {
                    "1": "enable_irq"
                },
                "FUN_08003dd0": {
                    "1": "receive_it"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "byte_value"
                },
                "*(undefined4 *)(&DAT_20000214 + uVar2 * 4)": {
                    "1": "data_ptr"
                },
                "*(int *)(&DAT_2000023c + uVar2 * 4)": {
                    "1": "serial_event_ptr"
                },
                "(int)*(char *)(param_1 + 0x5c)": {
                    "1": "interrupt_char"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "byte_value"
                },
                "(int *)(&DAT_2000023c + uVar2 * 4)": {
                    "1": "serial_event_ptr"
                },
                "HAL_NVIC_EnableIRQ((int)*(char *)(param_1 + 0x5c))": {
                    "1": "enable_interrupt_irq(interrupt_char)"
                },
                "serial_rx_active": {
                    "1": "is_serial_rx_active"
                }
            }
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "initialize_peripheral_08003eac",
            "code": "\nvoid initialize_peripheral_08003eac(int device_address,undefined4 interrupt_priority)\n\n{\n  byte peripheral_index;\n  \n  if (device_address != 0) {\n    peripheral_index = *(byte *)(device_address + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)peripheral_index * 4) = interrupt_priority;\n    *(int *)(&DAT_2000028c + (uint)peripheral_index * 4) = device_address;\n    set_interrupt_priority((int)*(char *)(device_address + 0x5c),0,2);\n    enable_interrupt((int)*(char *)(device_address + 0x5c));\n    transmit_data\n              ((&DAT_200002b4)[*(byte *)(device_address + 0x44)],\n               *(int *)(device_address + 0x68) + (uint)*(ushort *)(device_address + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "initialize_peripheral_08003eac",
                "param_1": "device_address",
                "param_2": "interrupt_priority",
                "bVar1": "peripheral_index",
                "HAL_NVIC_SetPriority": "set_interrupt_priority",
                "HAL_NVIC_EnableIRQ": "enable_interrupt",
                "HAL_UART_Transmit_IT": "transmit_data"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000ec4",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003eac": {
                    "3": "initialize_interrupt",
                    "1": "initialize_communication",
                    "5": "initialize_component",
                    "4": "initialize_device",
                    "2": "transmit_data"
                },
                "param_1": {
                    "1": "uart_handle",
                    "8": "device_address",
                    "3": "component_address",
                    "2": "config_ptr",
                    "6": "peripheral_address"
                },
                "param_2": {
                    "2": "parameter_value",
                    "1": "transmit_size",
                    "3": "value"
                },
                "bVar1": {
                    "2": "component_index",
                    "1": "irq_number",
                    "4": "byte_value",
                    "3": "index",
                    "5": "peripheral_index"
                },
                "HAL_NVIC_SetPriority": {
                    "8": "set_interrupt_priority",
                    "1": "set_priority_level",
                    "2": "set_priority"
                },
                "HAL_NVIC_EnableIRQ": {
                    "9": "enable_interrupt",
                    "2": "enable_irq"
                },
                "HAL_UART_Transmit_IT": {
                    "1": "transmit_data_async",
                    "7": "transmit_data"
                },
                "param_3": {
                    "1": "transmit_data_size"
                },
                "FUN_08002eb2": {
                    "3": "process_data",
                    "1": "reverse_data"
                },
                "FUN_08000ec4": {
                    "1": "execute_operation",
                    "2": "perform_action"
                },
                "FUN_08000e60": {
                    "1": "configure_nvicirq",
                    "2": "enable_irq"
                },
                "param_1 + 0x44": {
                    "1": "device_control_register"
                },
                "&DAT_20000264": {
                    "1": "module_init"
                },
                "DAT_2000028c": {
                    "1": "array_of_addresses"
                },
                "param_1 + 0x5c": {
                    "1": "interrupt_source"
                },
                "DAT_200002b4 + module_id": {
                    "1": "uart_data"
                },
                "param_1 + 0x68": {
                    "1": "uart_buffer"
                },
                "param_1 + 0x6e": {
                    "1": "uart_buffer_size"
                },
                "&DAT_2000028c": {
                    "1": "device_address_registry"
                },
                "&DAT_200002b4": {
                    "1": "transmit_buffer"
                },
                "*(byte *)(param_1 + 0x44)": {
                    "1": "interrupt_handler"
                },
                "*(int *)(param_1 + 0x5c)": {
                    "1": "interrupt_priority"
                },
                "*(int *)(param_1 + 0x68)": {
                    "1": "transmit_buffer"
                },
                "*(ushort *)(param_1 + 0x6e)": {
                    "1": "transmit_length"
                },
                "DAT_20000264": {
                    "1": "array_of_params"
                },
                "*(int *)(&DAT_2000028c + (uint)bVar1 * 4)": {
                    "1": "component_mapped_address"
                },
                "*(char *)(param_1 + 0x5c)": {
                    "1": "irq_number"
                },
                "(*(byte *)(param_1 + 0x44))": {
                    "1": "component_index"
                },
                "(*(int *)(param_1 + 0x68) + (uint)(*(ushort *)(param_1 + 0x6e)))": {
                    "1": "transmit_buffer_address"
                }
            }
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_value_index_08003f00",
            "code": "\nuint find_value_index_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        matched_index index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  matched_index index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_value_index_08003f00",
                "param_1": "value",
                "uVar1": "index",
                "return": "matched_index"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003f24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f00": {
                    "1": "find_number_index",
                    "2": "find_index_of_value",
                    "7": "find_value_index",
                    "4": "find_index",
                    "6": "find_number_in_array"
                },
                "param_1": {
                    "1": "input_param",
                    "5": "input_value",
                    "2": "input_number",
                    "11": "value",
                    "7": "number"
                },
                "uVar1": {
                    "2": "result",
                    "1": "match_index",
                    "25": "index"
                },
                "return": {
                    "1": "matched_index"
                },
                "<original_function_name>": {
                    "1": "get_number_from_array"
                }
            }
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_uart_function_08003f24",
            "code": "\nvoid execute_uart_function_08003f24(void)\n\n{\n  uint uart_index;\n  \n  uart_index = uart_index();\n  if (uart_index < 10) {\n    (**(code **)(&DAT_20000214 + uart_index * 4))(*(undefined4 *)(&DAT_2000023c + uart_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_uart_function_08003f24",
                "uVar1": "uart_index"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f24": {
                    "11": "execute_uart_function",
                    "5": "process_uart_data",
                    "1": "execute_uart_index",
                    "7": "execute_uart_command",
                    "3": "execute_uart_operation"
                },
                "uVar1": {
                    "1": "uart_index_value",
                    "6": "uart_index_result",
                    "2": "index",
                    "17": "uart_index"
                },
                "param_1": {
                    "1": "uart_index",
                    "11": "index"
                },
                "DAT_20000214": {
                    "1": "uart_commands_base_address",
                    "2": "function_table"
                },
                "DAT_2000023c": {
                    "1": "uart_argument_table"
                },
                "FUN_08003f00": {
                    "1": "get_uart_command",
                    "11": "get_uart_index"
                },
                "**(code **)(&DAT_20000214 + uVar1 * 4)": {
                    "1": "function_to_execute"
                },
                "*(undefined4 *)(&DAT_2000023c + uVar1 * 4)": {
                    "1": "function_parameter"
                }
            }
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "transmit_uart_data_08003f48",
            "code": "\nvoid transmit_uart_data_08003f48(void)\n\n{\n  uint uart_index;\n  int result;\n  int uart_data;\n  \n  uart_index = uart_index();\n  uart_data = *(int *)(&DAT_2000028c + uart_index * 4);\n  if ((uart_index < 10) && (result = (**(code **)(&DAT_20000264 + uart_index * 4))(uart_data), result != -1)) {\n    transmit_uart_data_08003f48_it\n              ((&DAT_200002b4)[*(byte *)(uart_data + 0x44)],\n               *(int *)(uart_data + 0x68) + (uint)*(ushort *)(uart_data + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "transmit_uart_data_08003f48",
                "uVar1": "uart_index",
                "iVar2": "result",
                "iVar3": "uart_data",
                "HAL_UART_Transmit_IT": "transmit_uart_data_it"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08003f48": {
                    "1": "transmit_data_if_needed",
                    "15": "transmit_uart_data",
                    "2": "transmit_data_over_uart",
                    "12": "transmit_data"
                },
                "uVar1": {
                    "30": "uart_index"
                },
                "iVar2": {
                    "1": "transmit_result",
                    "26": "result"
                },
                "iVar3": {
                    "6": "uart_config",
                    "2": "uart_instance",
                    "1": "uart_data_ptr",
                    "7": "uart_data",
                    "3": "uart_pointer"
                },
                "HAL_UART_Transmit_IT": {
                    "1": "transmit_data_interrupt",
                    "3": "transmit_uart_data_it",
                    "2": "transmit_data_it"
                },
                "FUN_08002eb2": {
                    "5": "process_uart_data",
                    "8": "process_data",
                    "1": "perform_operation"
                },
                "FUN_08003f00": {
                    "1": "get_uart_data_length",
                    "3": "get_uart_data",
                    "4": "get_uart_config",
                    "5": "get_uart_index"
                },
                "UART_INDEX": {
                    "1": "uart_index"
                },
                "param_1": {
                    "1": "config_index"
                },
                "param_2": {
                    "1": "start_address"
                },
                "param_3": {
                    "1": "value2"
                },
                "*(int *)(&DAT_2000028c + uVar1 * 4)": {
                    "1": "uart_data_array[uart_index]"
                },
                "**(code **)(&DAT_20000264 + uVar1 * 4)": {
                    "1": "uart_function"
                },
                "(uint)*(ushort *)(iVar3 + 0x6e)": {
                    "1": "some_value"
                },
                "DAT_2000028c": {
                    "1": "uart_device_array"
                },
                "DAT_20000264": {
                    "1": "function_array"
                },
                "DAT_200002b4": {
                    "1": "uart_byte"
                },
                "PTR_": {
                    "1": "ptr_"
                },
                "(**(code **)(&DAT_20000264 + uVar1 * 4))": {
                    "1": "callback_function"
                },
                "*(byte *)(uart_data + 0x44)": {
                    "1": "some_byte_value"
                },
                "*(int *)(uart_data + 0x68) + (uint)*(ushort *)(uart_data + 0x6e)": {
                    "1": "transmit_data_length"
                },
                "uVar1 < 10": {
                    "1": "is_index_valid"
                },
                "(uVar1 < 10) && (iVar2 = (**(code **)(&DAT_20000264 + uVar1 * 4))(iVar3), iVar2 != -1)": {
                    "1": "is_index_valid_and_successful"
                },
                "(&DAT_200002b4)[*(byte *)(iVar3 + 0x44)]": {
                    "1": "transmit_data_buffer"
                },
                "*(int *)(iVar3 + 0x68) + (uint)*(ushort *)(iVar3 + 0x6e)": {
                    "1": "transmit_data_length"
                }
            }
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocate_memory_08004094(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocated_memory = DAT_200002dc;\n  if (DAT_200002dc + size <= end_of_stack) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocated_memory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "stack0x00000000": "stack_end",
                "&stack0x00000000": "end_of_stack"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004094": {
                    "1": "reserve_memory",
                    "28": "allocate_memory"
                },
                "param_1": {
                    "3": "num_bytes",
                    "27": "size",
                    "1": "block_size"
                },
                "puVar1": {
                    "2": "ptr",
                    "1": "allocated_block",
                    "25": "allocated_memory"
                },
                "DAT_200002dc": {
                    "2": "current_block",
                    "1": "current_allocated_memory",
                    "3": "current_pointer",
                    "9": "current_memory"
                },
                "stack0x00000000": {
                    "1": "end_of_stack",
                    "3": "stack_boundary",
                    "4": "stack_end"
                },
                "DAT_20000678": {
                    "1": "stack_limit",
                    "5": "initial_memory",
                    "2": "initial_pointer"
                },
                "DAT_20000674": {
                    "1": "error_flag",
                    "18": "error_code"
                },
                "&DAT_20000678": {
                    "1": "initial_memory_address",
                    "2": "initial_memory"
                },
                "&stack0x00000000": {
                    "1": "stack_start",
                    "2": "end_of_stack"
                }
            }
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_error_code_080040d0",
            "code": "\nuint32_t get_error_code_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040d0": {
                    "1": "get_failure_value",
                    "7": "get_default_value",
                    "11": "get_error_code",
                    "5": "initialize_return_value"
                },
                "undefined4": {
                    "1": "unsigned_integer",
                    "2": "void",
                    "3": "uint32_t"
                },
                "PTR_XXXXXXXX": {
                    "1": "new_variable"
                },
                "<original_variable_name>": {
                    "1": "error_code"
                }
            }
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_page_size_080040d6",
            "code": "\nreturn_type set_memory_page_size_080040d6(return_type param_1,int memory_address)\n\n{\n  *(return_type *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_page_size_080040d6",
                "param_2": "memory_address",
                "undefined4": "return_type"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040d6": {
                    "1": "set_memory_access",
                    "3": "set_memory_flag",
                    "7": "set_memory_page_size",
                    "6": "initialize_memory"
                },
                "param_1": {
                    "2": "arg1",
                    "1": "param_addr",
                    "3": "param",
                    "5": "param_1",
                    "4": "param1"
                },
                "param_2": {
                    "4": "address",
                    "2": "buffer_address",
                    "1": "base_addr",
                    "10": "memory_address",
                    "3": "buffer"
                },
                "undefined4": {
                    "1": "return_type"
                },
                "param_2 + 4": {
                    "1": "buffer_offset"
                },
                "*(undefined4 *)(param_2 + 4)": {
                    "2": "page_size",
                    "1": "page_flags"
                },
                "0x2000": {
                    "1": "value"
                },
                "<param_2 + 4>": {
                    "1": "new_page_size"
                },
                "param2": {
                    "1": "destination"
                },
                "destination": {
                    "1": "destination"
                },
                "param_3": {
                    "1": "size"
                }
            }
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "get_status_080040e0",
            "code": "\nint get_status_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "get_status_080040e0",
                "undefined4": "int"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e0": {
                    "1": "check_if_binary_supported",
                    "4": "initialize",
                    "5": "get_status",
                    "3": "initialize_flag",
                    "2": "check_success"
                },
                "<original_variable_name>": {
                    "1": "status"
                },
                "undefined4": {
                    "4": "int",
                    "1": "flag_value",
                    "3": "status",
                    "2": "bool"
                },
                "result": {
                    "1": "status"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "return": {
                    "1": "return"
                },
                "1": {
                    "1": "success"
                },
                "return_value": {
                    "1": "status"
                },
                "RETURN": {
                    "1": "status"
                },
                "<unnamed_return_value>": {
                    "1": "status"
                }
            }
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nvoid initialize_080040e4(void)\n\n{\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4",
                "undefined4": "void",
                "return": "result"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e4": {
                    "1": "get_zero",
                    "16": "initialize",
                    "2": "get_return_value",
                    "4": "initialize_application"
                },
                "undefined4": {
                    "6": "void",
                    "1": "uint32_t"
                },
                "return": {
                    "1": "return_value"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "return value": {
                    "1": "success"
                },
                "registers": {
                    "1": "counter"
                },
                "new_parameter_name_1": {
                    "1": "parameter1"
                },
                "new_parameter_name_2": {
                    "1": "parameter2"
                },
                "": {
                    "1": ""
                },
                "<unnamed_parameter>": {
                    "1": "<new_parameter_name>"
                },
                "<unnamed_variable>": {
                    "1": "<new_variable_name>"
                }
            }
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nvoid initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040e8": {
                    "1": "initialize_value",
                    "14": "initialize",
                    "2": "get_zero",
                    "3": "initialize_program"
                },
                "undefined4": {
                    "11": "void",
                    "1": "int"
                },
                "<new_parameter_name_1>": {
                    "1": "<original_parameter_name_1>"
                },
                "<new_parameter_name_2>": {
                    "1": "<original_parameter_name_2>"
                },
                "<new_parameter_name_n>": {
                    "1": "<original_parameter_name_n>"
                },
                "<original_variable_name>": {
                    "1": "result"
                },
                "original_variable_name_1": {
                    "1": "status"
                },
                "original_variable_name_2": {
                    "1": "result"
                }
            }
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "write_debug_message_080040ec",
            "code": "\nvoid write_debug_message_080040ec(undefined4 unused_param,undefined4 data_ptr,undefined4 data_2,undefined4 data_3)\n\n{\n  uart_debug_write(data_ptr,data_2,data_2,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "write_debug_message_080040ec",
                "param_1": "unused_param",
                "param_2": "data_ptr",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040ec": {
                    "2": "write_debug_info",
                    "1": "print_debug_message",
                    "4": "write_debug_output",
                    "16": "write_debug_message"
                },
                "param_1": {
                    "2": "undefined_param_1",
                    "1": "param",
                    "10": "unused_param",
                    "6": "param_1"
                },
                "param_2": {
                    "3": "message_param",
                    "1": "arg2",
                    "5": "data_1",
                    "4": "message",
                    "2": "length"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "message_length",
                    "7": "length",
                    "4": "size"
                },
                "param_4": {
                    "3": "unused_param",
                    "1": "param_2",
                    "5": "param_4",
                    "7": "data_3"
                },
                "FUN_08003d18": {
                    "1": "perform_operation",
                    "2": "reverse_data",
                    "3": "calculate_checksum"
                },
                "uint": {
                    "1": "return_type"
                }
            }
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infinite_loop_080040f8(void)\n\n{\n  infinite-loop {\n                    /* none: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8",
                "do": "infinite-loop",
                "WARNING": "none"
            },
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040f8": {
                    "1": "endless_loop",
                    "24": "infinite_loop",
                    "3": "infinite_loop_function"
                },
                "PTR_XXXXX": {
                    "1": "ptr_variable"
                },
                "DAT_XXXXX": {
                    "1": "dat_variable"
                },
                "PTR_": {
                    "2": "",
                    "1": "unchanged"
                },
                "DAT_": {
                    "2": "",
                    "1": "unchanged"
                },
                "do": {
                    "1": "do"
                },
                "PTR_____": {
                    "1": "infinite_loop_ptr"
                },
                "true": {
                    "1": "true"
                },
                "PTR_XXXX": {
                    "1": "xxxx"
                },
                "DAT_XXXX": {
                    "1": "xxxx"
                },
                "PTR_1": {
                    "1": "new_pointer1"
                },
                "PTR_2": {
                    "1": "new_pointer2"
                },
                "DAT_1": {
                    "1": "new_data1"
                },
                "DAT_2": {
                    "1": "new_data2"
                },
                "WARNING": {
                    "1": "none"
                },
                "DAT_080040f8": {
                    "1": "do_nothing_block"
                },
                "PTR_12345678": {
                    "1": "unchanged"
                },
                "DAT_abcdefg": {
                    "1": "unchanged"
                }
            }
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initialize_data_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080040fc": {
                    "1": "set_default_value",
                    "17": "initialize_data",
                    "3": "set_initial_value",
                    "5": "initialize_value"
                },
                "DAT_20000674": {
                    "1": "constant_value",
                    "2": "value",
                    "4": "initial_value",
                    "12": "data_value"
                },
                "return value": {
                    "3": "status"
                },
                "<FUN_080040fc>": {
                    "1": "initialize_data"
                },
                "<DAT_20000674>": {
                    "1": "data_variable"
                },
                "return_value": {
                    "1": "status"
                }
            }
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "get_return_value_0800410c",
            "code": "\nint get_return_value_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "get_return_value_0800410c",
                "return": "result",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800410c": {
                    "1": "initialize_value",
                    "6": "initialize",
                    "3": "get_one",
                    "7": "get_return_value"
                },
                "return": {
                    "4": "result",
                    "2": "return_value"
                },
                "undefined4": {
                    "6": "int",
                    "1": "uint32_t",
                    "2": "status",
                    "4": "void"
                },
                "returnValue": {
                    "1": "result"
                },
                "1": {
                    "1": "result"
                },
                "<no parameters>": {
                    "1": ""
                },
                "PTR_08004114": {
                    "1": ""
                },
                "DAT_08004118": {
                    "1": ""
                },
                "PTR_0800411c": {
                    "1": ""
                },
                "RESULT": {
                    "1": ""
                },
                "<unnamed_return>": {
                    "1": "result"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "getReturnValue": {
                    "1": "int"
                },
                "return value": {
                    "1": "status"
                }
            }
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "configure_pin_08004110",
            "code": "\nvoid configure_pin_08004110(uint pin_index,undefined4 pin_mode,undefined4 param_3,undefined *pin_config)\n\n{\n  int is_configured;\n  undefined *pin_map;\n  int pin_index;\n  \n  if (pin_index < 0x60) {\n    pin_index = (int)*(short *)(&DAT_08005d3c + pin_index * 2);\n    pin_map = &DAT_08005d3c;\n  }\n  else {\n    pin_index = -1;\n    pin_map = pin_config;\n  }\n  if (pin_index != -1) {\n    is_configured = is_pin_already_configured(pin_index,&DAT_200002e0,param_3,pin_map,pin_config);\n    if (is_configured != 0) {\n      is_configured = check_pin_in_pinmap(pin_index,&DAT_08005a18);\n      if (is_configured == 0) {\n        is_configured = check_pin_in_pinmap(pin_index,&DAT_08005a3c);\n        if (is_configured != 0) {\n          stop_pwm(pin_index);\n        }\n      }\n      else {\n        stop_dac(pin_index);\n      }\n      reset_pin_configuration(pin_index,&DAT_200002e0);\n    }\n    switch(pin_mode) {\n    case 0:\n      initialize_digital_io(pin_index,0);\n      break;\n    case 1:\n      initialize_digital_io(pin_index,1,0);\n      break;\n    case 2:\n      initialize_digital_io(pin_index,0,1);\n      break;\n    case 3:\n      initialize_digital_io(pin_index,0,2);\n    }\n    set_pin_configuration(pin_index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "configure_pin_08004110",
                "param_1": "pin_index",
                "param_2": "pin_mode",
                "param_4": "pin_config",
                "iVar1": "is_configured",
                "iVar3": "pin_index",
                "puVar2": "pin_map",
                "is_pin_configured": "is_pin_already_configured",
                "pin_in_pinmap": "check_pin_in_pinmap",
                "pwm_stop": "stop_pwm",
                "dac_stop": "stop_dac",
                "reset_pin_configured": "reset_pin_configuration",
                "digital_io_init": "initialize_digital_io",
                "set_pin_configured": "set_pin_configuration"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_080033d8",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004110": {
                    "3": "configure_and_initialize_pin",
                    "1": "initialize_pin_config",
                    "2": "configure_io_pin",
                    "7": "initialize_pin",
                    "17": "configure_pin"
                },
                "param_1": {
                    "5": "pin_id",
                    "17": "pin_index",
                    "9": "pin_number"
                },
                "param_2": {
                    "1": "io_type",
                    "8": "io_mode",
                    "11": "pin_mode",
                    "5": "mode",
                    "2": "operation_mode"
                },
                "param_3": {
                    "2": "param",
                    "1": "unknown_param",
                    "5": "param3",
                    "11": "param_3"
                },
                "param_4": {
                    "1": "pinmap",
                    "3": "pin_config_data",
                    "6": "pin_map",
                    "8": "pin_config",
                    "2": "pin_data"
                },
                "iVar1": {
                    "3": "pin_configured",
                    "2": "is_pin_configured_result",
                    "8": "result",
                    "1": "pin_map_result"
                },
                "iVar3": {
                    "1": "mapped_pin_id",
                    "7": "pin_index",
                    "5": "pin_config_index",
                    "2": "pin_data_index",
                    "6": "pin_value",
                    "4": "pin_mapping"
                },
                "puVar2": {
                    "7": "pin_map_ptr",
                    "10": "pin_map",
                    "1": "pin_config",
                    "2": "pin_config_ptr",
                    "5": "pin_data",
                    "3": "pin_address"
                },
                "FUN_080033d8": {
                    "1": "digital_io_init"
                },
                "FUN_0800316c": {
                    "1": "initialize_digital_pin"
                },
                "FUN_08003414": {
                    "1": "decompiled_func_3"
                },
                "FUN_08003486": {
                    "1": "check_pin_in_pinmap_callback"
                },
                "FUN_0800314e": {
                    "1": "check_pin_in_pinmap_extended"
                },
                "FUN_08003138": {
                    "1": "decompiled_func_6"
                },
                "FUN_0800355e": {
                    "1": "decompiled_func_7"
                },
                "DAT_08005d3c": {
                    "1": "pin_map_data"
                },
                "DAT_200002e0": {
                    "1": "param3_data"
                },
                "DAT_08005a18": {
                    "1": "pin_map1_data"
                },
                "DAT_08005a3c": {
                    "1": "pin_map2_data"
                },
                "DAT_2000030c": {
                    "1": "pin_configured_data"
                },
                "is_pin_configured": {
                    "3": "is_pin_configured",
                    "2": "check_pin_configuration",
                    "1": "check_if_pin_configured"
                },
                "pin_in_pinmap": {
                    "2": "is_pin_in_pin_map",
                    "5": "check_pin_in_pinmap",
                    "1": "pin_in_pinmap",
                    "3": "is_pin_in_pinmap"
                },
                "pwm_stop": {
                    "1": "pwm_stop",
                    "10": "stop_pwm"
                },
                "dac_stop": {
                    "10": "stop_dac",
                    "1": "dac_stop"
                },
                "reset_pin_configured": {
                    "5": "reset_pin_configured",
                    "6": "reset_pin_configuration"
                },
                "digital_io_init": {
                    "10": "initialize_digital_io",
                    "1": "init_digital_io"
                },
                "set_pin_configured": {
                    "5": "set_pin_configured",
                    "6": "set_pin_configuration"
                },
                "&DAT_200002e0": {
                    "1": "config_array"
                },
                "&DAT_08005a18": {
                    "1": "pin_map1"
                },
                "&DAT_08005a3c": {
                    "1": "pin_map2"
                },
                "&DAT_08005d3c": {
                    "1": "pin_map3"
                },
                "&DAT_2000030c": {
                    "1": "configured_pin_array"
                }
            }
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "configure_pin_080041bc",
            "code": "\nvoid configure_pin_080041bc(uint pin_index,undefined4 value,undefined4 param_3,undefined *pin_data)\n\n{\n  int is_configured;\n  undefined4 gpio_port;\n  undefined *pin_data_ptr;\n  uint pin_value;\n  \n  if (pin_index < 0x60) {\n    pin_value = (uint)*(short *)(&DAT_08005d3c + pin_index * 2);\n    pin_data_ptr = &DAT_08005d3c;\n  }\n  else {\n    pin_value = 0xffffffff;\n    pin_data_ptr = pin_data;\n  }\n  if ((pin_value != 0xffffffff) &&\n     (is_configured = check_pin_configuration(pin_value,&DAT_2000030c,param_3,pin_data_ptr,pin_data), is_configured != 0)) {\n    gpio_port = get_gpio_port((pin_value << 0x18) >> 0x1c);\n    write_to_gpio(gpio_port,1 << (pin_value & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "configure_pin_080041bc",
                "param_1": "pin_index",
                "param_2": "value",
                "param_4": "pin_data",
                "iVar1": "is_configured",
                "uVar2": "gpio_port",
                "puVar3": "pin_data_ptr",
                "uVar4": "pin_value",
                "is_pin_configured": "check_pin_configuration",
                "get_GPIO_Port": "get_gpio_port",
                "digital_io_write": "write_to_gpio"
            },
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080041bc": {
                    "1": "configure_pin_and_write_signal",
                    "9": "configure_pin",
                    "8": "configure_and_write_pin",
                    "6": "configure_and_write_gpio",
                    "2": "configure_pin_and_write"
                },
                "param_1": {
                    "1": "pin_num",
                    "20": "pin_index",
                    "10": "pin_number"
                },
                "param_2": {
                    "5": "data",
                    "1": "signal_value",
                    "3": "output_value",
                    "6": "pin_value",
                    "12": "value",
                    "4": "pin_state"
                },
                "param_3": {
                    "3": "config_param",
                    "1": "param_port",
                    "13": "param_3",
                    "2": "param"
                },
                "param_4": {
                    "2": "param4",
                    "1": "param_data",
                    "5": "pin_data",
                    "3": "base_address"
                },
                "iVar1": {
                    "3": "config_result",
                    "14": "is_configured",
                    "7": "pin_config_result",
                    "2": "pin_configured",
                    "1": "result",
                    "4": "is_pin_configured_result"
                },
                "uVar2": {
                    "6": "port",
                    "25": "gpio_port"
                },
                "puVar3": {
                    "1": "config_ptr",
                    "3": "pin_data",
                    "2": "pin_config",
                    "4": "pin_data_ptr"
                },
                "uVar4": {
                    "1": "config_param",
                    "4": "pin_config",
                    "12": "pin_value",
                    "3": "gpio_pin",
                    "5": "pin_config_value"
                },
                "is_pin_configured": {
                    "1": "is_pin_configured",
                    "2": "check_if_pin_configured",
                    "6": "check_pin_configuration"
                },
                "get_GPIO_Port": {
                    "3": "get_gpio_port",
                    "1": "get_gpio_port_from_pin_config",
                    "2": "get_port_from_pin"
                },
                "digital_io_write": {
                    "1": "write_to_port",
                    "2": "write_digital_io"
                },
                "FUN_080034b6": {
                    "1": "check_pin_configuration"
                },
                "FUN_08003138": {
                    "1": "get_gpio_port"
                },
                "FUN_0800318c": {
                    "1": "configure_gpio_pin"
                },
                "DAT_2000030c": {
                    "1": "pin_configuration_table"
                }
            }
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "get_current_milliseconds_08004204",
            "code": "\nvoid get_current_milliseconds_08004204(void)\n\n{\n  get_current_milliseconds_08004204();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "get_current_milliseconds_08004204",
                "GetCurrentMilli": "get_current_milliseconds"
            },
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004204": {
                    "1": "get_current_time_milliseconds",
                    "19": "get_current_milliseconds",
                    "4": "get_current_milli"
                },
                "FUN_0800346c": {
                    "4": "do_something",
                    "1": "print_report",
                    "2": "some_sub_function",
                    "3": "initialize_data",
                    "5": "initialize_system"
                },
                "GetCurrentMilli": {
                    "1": "get_current_milliseconds"
                }
            }
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nuushort calculate_offset_08004240(int base_address)\n\n{\n  return (*(ushort *)(base_address + 0x138) + 0x40) - *(ushort *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "short": "ushort"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004240": {
                    "1": "calculate_modified_value",
                    "2": "calculate_difference",
                    "11": "calculate_offset",
                    "8": "calculate_checksum"
                },
                "param_1": {
                    "2": "offset",
                    "1": "memory_address",
                    "9": "input_value",
                    "10": "base_address",
                    "5": "data_address"
                },
                "*(short *)(param_1 + 0x138)": {
                    "6": "first_value",
                    "1": "first_offset",
                    "3": "offset1",
                    "4": "value1"
                },
                "*(short *)(param_1 + 0x13a)": {
                    "1": "data2",
                    "6": "second_value",
                    "3": "offset2",
                    "4": "value2"
                },
                "short": {
                    "2": "ushort"
                },
                "0x138": {
                    "3": "offset1",
                    "1": "data_offset"
                },
                "0x40": {
                    "1": "offset"
                },
                "0x13a": {
                    "2": "second_offset",
                    "3": "offset2",
                    "1": "subtract_value_offset"
                },
                "0x3f": {
                    "1": "bit_mask"
                },
                "(short *)(param_1 + 0x138)": {
                    "1": "pointer_to_value1"
                },
                "(short *)(param_1 + 0x13a)": {
                    "1": "pointer_to_value2"
                },
                "(short *)param_1 + 0x138": {
                    "1": "offset1"
                },
                "(short *)param_1 + 0x13a": {
                    "1": "offset2"
                },
                "(offset1 + 0x40) - offset2 & 0x3f": {
                    "1": "result"
                },
                "& 0x3f": {
                    "1": "apply_mask"
                },
                "param_1 + 0x138": {
                    "1": "offset_1_address"
                },
                "param_1 + 0x13a": {
                    "1": "offset_2_address"
                },
                "*offset_1_address": {
                    "1": "offset_value_1"
                },
                "*offset_2_address": {
                    "1": "offset_value_2"
                },
                "PTR_XXX": {
                    "1": "ignore_this"
                },
                "DAT_XXX": {
                    "1": "ignore_this"
                },
                "result": {
                    "1": "modified_value"
                }
            }
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "process_uart_input_080042ac",
            "code": "\nvoid process_uart_input_080042ac(int uart_device)\n\n{\n  int input_status;\n  ushort new_index;\n  undefined received_byte;\n  \n  input_status = uart_getc(uart_device,&received_byte);\n  if ((input_status == 0) &&\n     (new_index = *(short *)(uart_device + 100) + 1U & 0x3f, new_index != *(ushort *)(uart_device + 0x66))) {\n    *(undefined *)(*(int *)(uart_device + 0x60) + (uint)*(ushort *)(uart_device + 100)) = received_byte;\n    *(ushort *)(uart_device + 100) = new_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "process_uart_input_080042ac",
                "param_1": "uart_device",
                "iVar1": "input_status",
                "uVar2": "new_index",
                "local_9": "received_byte"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042ac": {
                    "4": "process_input",
                    "1": "update_character_buffer",
                    "15": "process_uart_input"
                },
                "param_1": {
                    "6": "uart_handle",
                    "3": "uart_instance",
                    "1": "serial_port",
                    "2": "uart_controller",
                    "8": "uart_device"
                },
                "iVar1": {
                    "1": "result_code",
                    "4": "read_result",
                    "5": "result",
                    "2": "uart_read_result",
                    "6": "input_status",
                    "3": "input_result"
                },
                "uVar2": {
                    "1": "current_index",
                    "24": "new_index"
                },
                "local_9": {
                    "5": "received_char",
                    "1": "data_byte",
                    "9": "received_byte",
                    "3": "input_byte",
                    "4": "input_data"
                },
                "param_2": {
                    "1": "unknown_param"
                },
                "param_3": {
                    "1": "arg3"
                },
                "param_4": {
                    "1": "unknown_param"
                }
            }
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_and_send_data_080042e8",
            "code": "\nundefined4 initialize_and_send_data_080042e8(int data_struct,undefined data)\n\n{\n  byte byte_value;\n  byte masked_value;\n  int incremented_value;\n  \n  *(undefined *)(data_struct + 0x10) = 1;\n  incremented_value = *(ushort *)(data_struct + 0x140) + 1;\n  byte_value = (byte)incremented_value;\n  masked_value = byte_value & 0x7f;\n  if (incremented_value == 0) {\n    masked_value = -(-byte_value & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(data_struct + 0x142) == (ushort)masked_value);\n  *(undefined *)(*(int *)(data_struct + 0x13c) + (uint)*(ushort *)(data_struct + 0x140)) = data;\n  *(ushort *)(data_struct + 0x140) = (ushort)masked_value;\n  incremented_value = is_serial_tx_active(data_struct + 0xd4);\n  if (incremented_value == 0) {\n    attach_tx_callback(data_struct + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_and_send_data_080042e8",
                "param_1": "data_struct",
                "param_2": "data",
                "bVar1": "byte_value",
                "bVar2": "masked_value",
                "iVar3": "incremented_value",
                "serial_tx_active": "is_serial_tx_active",
                "uart_attach_tx_callback": "attach_tx_callback"
            },
            "calling": [],
            "called": [
                "FUN_08003df4",
                "FUN_08003eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080042e8": {
                    "1": "update_data",
                    "4": "update_and_transmit_data",
                    "3": "set_and_send_data",
                    "2": "initialize_data",
                    "5": "initialize_and_send_data"
                },
                "param_1": {
                    "1": "flag_container",
                    "2": "data_struct_ptr",
                    "10": "data_struct",
                    "7": "data_ptr",
                    "3": "data_struct_address"
                },
                "param_2": {
                    "12": "data",
                    "2": "data_value",
                    "1": "byte_data",
                    "5": "value",
                    "4": "new_data"
                },
                "bVar1": {
                    "1": "unsigned_value",
                    "2": "lower_byte",
                    "4": "incremented_value",
                    "13": "byte_value"
                },
                "bVar2": {
                    "1": "masked_byte_value",
                    "2": "modified_byte_value",
                    "7": "masked_value",
                    "3": "masked_byte"
                },
                "iVar3": {
                    "1": "uart_buffer_index",
                    "2": "temp_int",
                    "7": "counter",
                    "11": "incremented_value"
                },
                "serial_tx_active": {
                    "5": "is_serial_tx_active",
                    "1": "is_serial_transmit_active"
                },
                "uart_attach_tx_callback": {
                    "1": "attach_transmission_callback",
                    "5": "attach_tx_callback"
                }
            }
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_08004364",
            "code": "\nvoid initialize_data_08004364(int base_address)\n\n{\n  *(int *)(base_address + 0x134) = base_address + 0x11;\n  *(undefined2 *)(base_address + 0x138) = 0;\n  *(undefined2 *)(base_address + 0x13a) = 0;\n  *(int *)(base_address + 0x13c) = base_address + 0x51;\n  *(undefined2 *)(base_address + 0x140) = 0;\n  *(undefined2 *)(base_address + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004364": {
                    "4": "set_initial_values",
                    "1": "update_parameters",
                    "2": "initialize_data_structures",
                    "5": "initialize_parameters",
                    "10": "initialize_data"
                },
                "param_1": {
                    "1": "param",
                    "2": "data_address",
                    "19": "base_address",
                    "3": "data_pointer"
                },
                "*(int *)(param_1 + 0x134)": {
                    "1": "data_structure1",
                    "2": "var1"
                },
                "*(undefined2 *)(param_1 + 0x138)": {
                    "1": "memory_offset2",
                    "3": "value1",
                    "2": "var2"
                },
                "*(undefined2 *)(param_1 + 0x13a)": {
                    "2": "var3",
                    "1": "data_structure3",
                    "3": "value2"
                },
                "*(int *)(param_1 + 0x13c)": {
                    "1": "memory_offset4",
                    "2": "var4"
                },
                "*(undefined2 *)(param_1 + 0x140)": {
                    "1": "data_structure5",
                    "2": "var5",
                    "3": "value3"
                },
                "*(undefined2 *)(param_1 + 0x142)": {
                    "2": "var6",
                    "1": "memory_offset6",
                    "3": "value4"
                },
                "* (int *)(param_1 + 0x134)": {
                    "1": "ptr_offset1"
                },
                "* (undefined2 *)(param_1 + 0x138)": {
                    "1": "ptr_offset2"
                },
                "* (undefined2 *)(param_1 + 0x13a)": {
                    "1": "ptr_offset3"
                },
                "* (int *)(param_1 + 0x13c)": {
                    "1": "ptr_offset4"
                },
                "* (undefined2 *)(param_1 + 0x140)": {
                    "1": "ptr_offset5"
                },
                "* (undefined2 *)(param_1 + 0x142)": {
                    "1": "ptr_offset6"
                },
                "0x134": {
                    "1": "value_offset",
                    "6": "offset1"
                },
                "0x138": {
                    "3": "value1",
                    "1": "null_value1_offset"
                },
                "0x13a": {
                    "1": "updated_param3",
                    "3": "value2"
                },
                "0x13c": {
                    "1": "updated_param4",
                    "3": "offset4"
                },
                "0x140": {
                    "1": "updated_param5",
                    "3": "value3"
                },
                "0x142": {
                    "1": "updated_param6",
                    "3": "value4"
                },
                "param_1 + 0x134": {
                    "1": "data_struct.ptr1",
                    "2": "address1"
                },
                "param_1 + 0x13c": {
                    "1": "parameter4_address",
                    "2": "address2"
                },
                "dataPointer + 0x11": {
                    "1": "data_size"
                },
                "dataPointer + 0x51": {
                    "1": "data_start"
                },
                "param_1 + 0x11": {
                    "1": "initial_address1"
                },
                "param_1 + 0x138": {
                    "1": "param1_storage2",
                    "2": "value1"
                },
                "param_1 + 0x13a": {
                    "1": "structure.field3",
                    "2": "value2"
                },
                "param_1 + 0x51": {
                    "1": "value2",
                    "2": "offset2"
                },
                "param_1 + 0x140": {
                    "1": "data_struct.val3",
                    "2": "value3"
                },
                "param_1 + 0x142": {
                    "1": "struct_field_f",
                    "2": "value4"
                },
                "0x11": {
                    "1": "new_offset1"
                },
                "0x51": {
                    "1": "initial_value2"
                },
                "inputValue": {
                    "1": "new_input_value"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                }
            }
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_port_08004388",
            "code": "\nvoid initialize_serial_port_08004388(int serial_port,undefined4 baud_rate,byte config)\n\n{\n  uint temp;\n  byte config_bits;\n  int config_value;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x144) = config;\n  config_bits = config & 7;\n  if (config_bits == 4) {\n    config_value = 7;\n  }\n  else if (config_bits == 6) {\n    config_value = 8;\n  }\n  else if (config_bits == 2) {\n    config_value = 6;\n  }\n  else {\n    config_value = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    config_value = config_value + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    config_value = config_value + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (config_value == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (config_value == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    config_value = 0;\n  }\n  if (config_value != 0) {\n    initialize_uart(serial_port + 0xd4);\n    attach_rx_callback(serial_port + 0xd4,0x80042ad);\n    return;\n  }\n  jump_table = (code *)0x8004432;\n  assert_function(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (temp < 0x60) {\n    uart_status = *(undefined2 *)(&DAT_08005d3c + temp * 2);\n  }\n  else {\n    uart_status = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_port_08004388",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "config",
                "bVar1": "config_bits",
                "iVar2": "config_value",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uart_init": "initialize_uart",
                "uart_attach_rx_callback": "attach_rx_callback",
                "extraout_r1": "temp",
                "__assert_func": "assert_function",
                "uRam0000012e": "uart_status"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003e54",
                "FUN_08003978",
                "FUN_08004808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004388": {
                    "2": "initialize_hardware_serial",
                    "6": "initialize_serial_port",
                    "1": "set_serial_configuration",
                    "3": "configure_serial_port",
                    "5": "initialize_uart",
                    "4": "initialize_serial_communication"
                },
                "param_1": {
                    "2": "serial_device",
                    "4": "port_address",
                    "14": "serial_port",
                    "1": "base_addr"
                },
                "param_2": {
                    "1": "baudrate",
                    "28": "baud_rate"
                },
                "param_3": {
                    "6": "config",
                    "2": "mode",
                    "1": "port_settings",
                    "3": "options",
                    "5": "configuration"
                },
                "bVar1": {
                    "1": "port_settings_mask",
                    "4": "config_mask",
                    "2": "config_bit",
                    "5": "config_bits"
                },
                "iVar2": {
                    "1": "uart_index",
                    "4": "config_count",
                    "11": "config_value",
                    "2": "config_index"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jumptable_func",
                    "13": "jump_table",
                    "3": "jump_table_address",
                    "2": "jmp_table"
                },
                "uart_init": {
                    "1": "initialize_uart_callback",
                    "3": "initialize_uart"
                },
                "uart_attach_rx_callback": {
                    "3": "attach_rx_callback",
                    "1": "attach_receive_callback"
                },
                "extraout_r1": {
                    "1": "config_index"
                },
                "__assert_func": {
                    "1": "assert_function"
                },
                "uRam0000012e": {
                    "1": "local_variable"
                }
            }
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_return_value_08004444",
            "code": "\nvoid set_return_value_08004444(int output_address,uint input_value)\n\n{\n  undefined2 return_value;\n  code *jump_table;\n  \n  if (input_value < 0x60) {\n    return_value = *(undefined2 *)(&DAT_08005d3c + input_value * 2);\n  }\n  else {\n    return_value = 0xffff;\n  }\n  *(undefined2 *)(output_address + 0x12e) = return_value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_return_value_08004444",
                "param_1": "output_address",
                "param_2": "input_value",
                "uVar1": "return_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004444": {
                    "1": "set_threshold",
                    "2": "set_return_value_based_on_param",
                    "7": "set_return_value"
                },
                "param_1": {
                    "2": "input_address",
                    "1": "parameter_address",
                    "7": "output_address",
                    "4": "base_address",
                    "3": "target_address"
                },
                "param_2": {
                    "3": "param_value",
                    "1": "value_index",
                    "11": "input_value",
                    "4": "value",
                    "7": "index"
                },
                "uVar1": {
                    "1": "status_value",
                    "3": "value",
                    "11": "return_value",
                    "2": "result"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_function",
                    "8": "jump_table"
                }
            }
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_parameter_value_08004460",
            "code": "\nvoid set_parameter_value_08004460(int base_address,uint index)\n\n{\n  undefined2 value;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_parameter_value_08004460",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004460": {
                    "1": "set_value_in_memory",
                    "6": "set_parameter_value",
                    "2": "set_default_value",
                    "3": "update_data",
                    "4": "set_param_value"
                },
                "param_1": {
                    "1": "function_address",
                    "3": "memory_address",
                    "2": "target_address",
                    "13": "base_address",
                    "4": "data_address"
                },
                "param_2": {
                    "2": "value_index",
                    "1": "param_index",
                    "6": "offset",
                    "17": "index"
                },
                "uVar1": {
                    "1": "memory_value",
                    "5": "new_value",
                    "2": "default_value",
                    "13": "value",
                    "3": "parameter_value"
                },
                "300": {
                    "1": "offset"
                },
                "0x60": {
                    "1": "max_index"
                }
            }
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_device_0800447c",
            "code": "\nundefined4 *\ninitialize_device_0800447c(undefined4 *device,undefined4 pin,undefined4 value,undefined4 param4)\n\n{\n  undefined2 pin_value;\n  \n  device_ptr[1] = 0;\n  device_ptr[2] = 1000;\n  *device = &PTR_FUN_080042e8_1_08005ed4;\n  if (device == &DAT_20000338) {\n    set_receive_parameters(&DAT_20000338,0x4c,value,&DAT_20000338,param4);\n    set_transmit_parameters(&DAT_20000338,0x4d);\n  }\n  else {\n    pin_value = get_pin(pin,&DAT_08005c10);\n    *(undefined2 *)((int)device + 0x12e) = pin_value;\n    pin_value = get_pin(pin,&DAT_08005ca0);\n    *(undefined2 *)(device + 0x4b) = pin_value;\n  }\n  initialize(device);\n  return device;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_device_0800447c",
                "param_1": "device",
                "param_2": "pin",
                "param_3": "value",
                "param_4": "param4",
                "uVar1": "pin_value",
                "pinmap_pin": "get_pin",
                "init": "initialize",
                "setRx": "set_receive_parameters",
                "setTx": "set_transmit_parameters",
                "param_1[1]": "device_ptr[1]",
                "param_1[2]": "device_ptr[2]"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004444",
                "FUN_08004364",
                "FUN_0800351e",
                "FUN_08004460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800447c": {
                    "1": "setup_communication",
                    "2": "initialize_parameters",
                    "10": "initialize_communication",
                    "18": "initialize_device"
                },
                "param_1": {
                    "2": "device_data",
                    "3": "communication_params",
                    "1": "parameters",
                    "5": "communication_data",
                    "10": "device"
                },
                "param_2": {
                    "13": "pin",
                    "1": "pin_num",
                    "2": "pin_config"
                },
                "param_3": {
                    "1": "rx_pin",
                    "3": "rx_config",
                    "6": "value",
                    "2": "rx_data"
                },
                "param_4": {
                    "1": "access_mode",
                    "2": "parameter4",
                    "6": "param4",
                    "3": "tx_config"
                },
                "FUN_08004444": {
                    "1": "configure_pin",
                    "12": "set_rx"
                },
                "FUN_08004364": {
                    "1": "reset",
                    "12": "set_tx"
                },
                "FUN_0800351e": {
                    "1": "get_pin_value",
                    "10": "init",
                    "3": "pinmap_pin"
                },
                "FUN_08004460": {
                    "3": "init",
                    "1": "configure_tx",
                    "9": "pinmap_pin"
                },
                "uVar1": {
                    "2": "pin_mapped_value",
                    "6": "pin_result",
                    "1": "pin_mapping",
                    "8": "pin_value"
                },
                "pinmap_pin": {
                    "1": "find_pin_mapping",
                    "2": "get_pin"
                },
                "init": {
                    "7": "initialize"
                },
                "setRx": {
                    "2": "configure_rx",
                    "1": "set_receive_pin"
                },
                "setTx": {
                    "1": "set_transmit_pin",
                    "2": "set_transmit_parameters"
                },
                "param_1[1]": {
                    "1": "device_ptr[1]"
                },
                "param_1[2]": {
                    "1": "device_ptr[2]"
                }
            }
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_hardware_serial_080044d8",
            "code": "\nvoid initialize_hardware_serial_080044d8(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    configure_serial_port(&DAT_20000338,0x40004800,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_hardware_serial_080044d8",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "HardwareSerial": "configure_serial_port"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080044d8": {
                    "2": "initialize_serial_connection",
                    "1": "initialize_hw_serial_connection",
                    "10": "initialize_serial_communication",
                    "14": "initialize_hardware_serial"
                },
                "param_1": {
                    "4": "flag",
                    "1": "input_param",
                    "2": "device_type",
                    "12": "status",
                    "3": "mode"
                },
                "param_2": {
                    "2": "flag",
                    "1": "param",
                    "18": "value"
                },
                "param_3": {
                    "1": "data_bits",
                    "6": "param3",
                    "2": "config1",
                    "5": "arg1"
                },
                "param_4": {
                    "1": "input4",
                    "6": "param4",
                    "2": "config2",
                    "5": "arg2"
                },
                "HardwareSerial": {
                    "2": "configure_serial_port",
                    "1": "start_serial_communication"
                },
                "FUN_0800447c": {
                    "1": "initialize_serial_settings"
                },
                "DAT_20000338": {
                    "1": "serial_data"
                }
            }
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initialize_data_08004544(undefined4 *data_pointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data_pointer = &DAT_08005f28;\n  *(undefined *)(data_pointer + 1) = value1;\n  *(undefined *)((int)data_pointer + 5) = value2;\n  *(undefined *)((int)data_pointer + 6) = value3;\n  *(undefined *)((int)data_pointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "data_pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004544": {
                    "4": "set_data",
                    "1": "set_memory_values",
                    "2": "initialize_parameters",
                    "18": "initialize_data"
                },
                "param_1": {
                    "4": "output_ptr",
                    "1": "output_buffer",
                    "3": "output_pointer",
                    "12": "data_pointer",
                    "2": "output_data",
                    "6": "output"
                },
                "param_2": {
                    "1": "input1",
                    "2": "param2",
                    "5": "value_1",
                    "19": "value1"
                },
                "param_3": {
                    "1": "parameter2",
                    "2": "param3",
                    "5": "value_2",
                    "19": "value2"
                },
                "param_4": {
                    "2": "param4",
                    "1": "param5",
                    "19": "value3",
                    "5": "value_3"
                },
                "param_5": {
                    "5": "value_4",
                    "1": "input4",
                    "2": "param5",
                    "19": "value4"
                }
            }
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_ip_address_08004560",
            "code": "\nvoid initialize_ip_address_08004560(int value1,int value2)\n\n{\n  if ((value1 == 1) && (value2 == 0xffff)) {\n    set_ip_address(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_ip_address_08004560",
                "param_1": "value1",
                "param_2": "value2",
                "IPAddress": "set_ip_address"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004560": {
                    "1": "set_ip_address_if_valid",
                    "29": "initialize_ip_address"
                },
                "param_1": {
                    "1": "first_param",
                    "5": "value1",
                    "4": "flag1",
                    "2": "status",
                    "3": "param1"
                },
                "param_2": {
                    "3": "param2",
                    "1": "value_two",
                    "5": "value2",
                    "4": "flag2"
                },
                "IPAddress": {
                    "3": "set_ip_address"
                }
            }
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combine_values_08004640(int value1,uint value2)\n\n{\n  combined_result value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2",
                "return": "combined_result"
            },
            "calling": [
                "FUN_08000998",
                "FUN_08000a7a",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_08000a00",
                "FUN_08000b04",
                "FUN_080008e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004640": {
                    "1": "combine_shift_and_or",
                    "2": "combine_and_shift",
                    "15": "combine_values",
                    "6": "combine_params"
                },
                "param_1": {
                    "2": "input",
                    "1": "input_param",
                    "5": "input_value",
                    "12": "value1",
                    "4": "input1"
                },
                "param_2": {
                    "1": "param",
                    "4": "input2",
                    "2": "bitwise_value",
                    "3": "value",
                    "12": "value2"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "param_3": {
                    "1": "shifted_value"
                },
                "param_n": {
                    "1": "new_parameter_name"
                },
                "param_2_unchanged": {
                    "1": "result"
                },
                "param_1 << 8": {
                    "1": "shifted_value"
                },
                "param_2 | param_1 << 8": {
                    "1": "combined"
                },
                "return": {
                    "1": "combined_result"
                }
            }
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_hardware_08004648",
            "code": "\nvoid initialize_hardware_08004648(void)\n\n{\n  HAL_NVIC_SetPriorityGrouping(3);\n  initialize_hardware_08004648_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_hardware_08004648",
                "initialize_hardware_configuration_08000d8e": "initialize_hardware_configuration"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004648": {
                    "8": "configure_hardware",
                    "1": "initialize_and_set_priority_group",
                    "9": "initialize_system"
                },
                "initialize_hardware_configuration_08000d8e": {
                    "1": "initialize_hardware_config",
                    "2": "configure_hardware",
                    "19": "initialize_hardware_configuration",
                    "6": "initialize_hardware"
                },
                "update_configuration_08000e3c": {
                    "2": "update_config",
                    "12": "update_hardware_configuration",
                    "16": "update_configuration"
                },
                "input_value": {
                    "1": "config_value"
                }
            }
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "main_loop_08004658",
            "code": "\nvoid main_loop_08004658(void)\n\n{\n  initialize_variant();\n  setup_environment();\n  do {\n    execute_loop();\n    run_serial_event();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "main_loop_08004658",
                "initVariant": "initialize_variant",
                "setup": "setup_environment",
                "loop": "execute_loop",
                "serialEventRun": "run_serial_event"
            },
            "calling": [
                "FUN_08000d3c"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08004646",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004658": {
                    "1": "initiate_main_loop",
                    "5": "initialize_and_run",
                    "3": "run_program",
                    "2": "start_program",
                    "15": "main_loop"
                },
                "FUN_08000c4c": {
                    "15": "init_variant",
                    "1": "perform_action",
                    "11": "initialize_variant"
                },
                "FUNC_08004338": {
                    "1": "setup_program",
                    "24": "setup"
                },
                "FUNC_08004646": {
                    "1": "reverse_something",
                    "17": "loop",
                    "6": "execute_loop",
                    "2": "main_loop"
                },
                "FUN_08000c64": {
                    "8": "run_serial_event",
                    "2": "serial_event_runner",
                    "1": "reversed_operation3",
                    "11": "serial_event_run"
                },
                "initVariant": {
                    "4": "initialize_variant"
                },
                "setup": {
                    "2": "setup_environment",
                    "1": "configure_system"
                },
                "loop": {
                    "1": "perform_actions",
                    "2": "execute_loop"
                },
                "serialEventRun": {
                    "2": "handle_serial_events"
                },
                "void FUN_08000c4c": {
                    "1": "init_variant"
                }
            }
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar count_set_bits_08004678(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004678": {
                    "5": "count_bits_set",
                    "21": "count_set_bits"
                },
                "param_1": {
                    "6": "input",
                    "1": "n",
                    "3": "input_number",
                    "9": "num",
                    "12": "number"
                },
                "cVar1": {
                    "3": "bits_count",
                    "2": "count",
                    "26": "bit_count"
                }
            }
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initialize_data_080046b4(int flag,int value,undefined4 unused1,undefined4 unused2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    register_exit_handler(0,exit_handler_function,&DAT_20000000,&DAT_20000488,unused2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "__aeabi_atexit": "register_exit_handler",
                "LAB_0800468c_1": "exit_function",
                "&LAB_0800468c_1": "exit_handler_function"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080046b4": {
                    "1": "initialize_config",
                    "2": "initialize_constants",
                    "9": "initialize_parameters",
                    "16": "initialize_data"
                },
                "param_1": {
                    "10": "flag",
                    "1": "data_flag",
                    "2": "input_flag",
                    "6": "condition",
                    "8": "status"
                },
                "param_2": {
                    "2": "flag",
                    "1": "input_param",
                    "22": "value"
                },
                "param_3": {
                    "8": "unused1",
                    "2": "unused_param_1",
                    "1": "arg3",
                    "5": "unused_param"
                },
                "param_4": {
                    "2": "unused_param2",
                    "1": "unknown_param2",
                    "3": "callback",
                    "8": "unused2"
                },
                "__aeabi_atexit": {
                    "3": "register_exit_function",
                    "2": "register_cleanup_function",
                    "8": "register_exit_handler"
                },
                "FUN_080047fe": {
                    "2": "sub_function",
                    "1": "perform_cleanup"
                },
                "LAB_0800468c_1": {
                    "1": "exit_handler_fn",
                    "2": "cleanup_function"
                },
                "initializeData": {
                    "1": "initialize_data"
                },
                "registerExitHandler": {
                    "1": "register_exit_handler"
                },
                "exitHandler": {
                    "1": "exit_handler"
                },
                "&LAB_0800468c_1": {
                    "1": "exit_handler_function"
                }
            }
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_function_080047c0",
            "code": "\nvoid execute_function_080047c0(int input)\n\n{\n  int pin_id;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pin_id = get_pin_id();\n  if ((&DAT_20000494)[pin_id * 5] != 0) {\n    execute_function_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "input",
                "iVar1": "pin_id"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047c0": {
                    "1": "execute_or_throw",
                    "2": "execute_function_or_throw_error",
                    "3": "handle_function_call",
                    "9": "execute_function",
                    "4": "process_function"
                },
                "param_1": {
                    "6": "input_param",
                    "2": "param",
                    "1": "function_handle"
                },
                "iVar1": {
                    "28": "pin_id",
                    "3": "pin_index"
                },
                "FUN_08005760": {
                    "1": "execute_operation",
                    "3": "execute_sub_function"
                },
                "get_pin_id()": {
                    "1": "get_pin_id()"
                }
            }
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_operator_080047d0",
            "code": "\nvoid check_and_execute_operator_080047d0(void)\n\n{\n  int pin_id;\n  \n  pin_id = retrieve_pin_id();\n  if ((&DAT_20000494)[pin_id * 5] != 0) {\n    execute_operator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_operator_080047d0",
                "get_pin_id": "retrieve_pin_id",
                "operator()": "execute_operator",
                "iVar1": "pin_id",
                "operator": "call_operator"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047d0": {
                    "1": "check_and_execute_pin_operation",
                    "2": "check_and_invoke_operator",
                    "7": "check_and_call_operator",
                    "8": "check_and_execute_operator",
                    "3": "check_pin_and_call_operator"
                },
                "FUN_080047c0": {
                    "4": "get_pin_id",
                    "1": "check_data",
                    "2": "set_pin_id"
                },
                "FUN_08004678": {
                    "1": "get_data",
                    "3": "operator"
                },
                "get_pin_id": {
                    "3": "get_pin_id",
                    "10": "retrieve_pin_id",
                    "1": "get_pin_identifier",
                    "2": "get_current_pin_id"
                },
                "operator()": {
                    "4": "execute_operator",
                    "1": "perform_operation",
                    "2": "execute_operation"
                },
                "iVar1": {
                    "20": "pin_id",
                    "7": "pin_index"
                },
                "param_1": {
                    "1": "data_index",
                    "8": "pin_id"
                },
                "DAT_20000494": {
                    "1": "pin_status_array"
                },
                "&DAT_20000494": {
                    "2": "pin_status_array",
                    "4": "pin_data_array",
                    "1": "operation_flags"
                },
                "PTR_20000494": {
                    "1": "pin_status_array"
                },
                "operator": {
                    "1": "call_operator"
                },
                "* 5": {
                    "1": "element_size"
                },
                "get_pin_id()": {
                    "1": "get_pin_id()"
                }
            }
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "register_exit_function_080047fe",
            "code": "\nvoid register_exit_function_080047fe(undefined4 handler_function,undefined4 cleanup_parameter)\n\n{\n  __cxa_atexit(cleanup_parameter,handler_function);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "register_exit_function_080047fe",
                "param_1": "handler_function",
                "param_2": "cleanup_parameter"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080047fe": {
                    "9": "register_exit_function",
                    "4": "register_at_exit_handler",
                    "1": "register_at_exit",
                    "8": "register_exit_handler",
                    "6": "register_cleanup_function"
                },
                "param_1": {
                    "3": "cleanup_function",
                    "2": "exit_function",
                    "1": "exit_function_pointer",
                    "4": "handler_function"
                },
                "param_2": {
                    "1": "num_bits",
                    "4": "cleanup_parameter",
                    "2": "size",
                    "3": "param2"
                },
                "FUN_08004844": {
                    "2": "perform_action",
                    "1": "calculate_result",
                    "4": "calculate_checksum",
                    "7": "perform_operation"
                },
                "undefined4 param_1": {
                    "1": "callback_function"
                },
                "undefined4 param_2": {
                    "1": "exit_function_pointer"
                },
                "uint param_2": {
                    "1": "calc_value"
                }
            }
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "print_assertion_error_08004808",
            "code": "\nvoid print_assertion_error_08004808(undefined4 file_name,undefined4 line_number,char *function_name,undefined4 function_name)\n\n{\n  undefined4 file_pointer;\n  char *additional_info;\n  undefined8 abort_result;\n  undefined4 function_name_copy;\n  \n  file_pointer = *(undefined4 *)(DAT_200000a0 + 0xc);\n  function_name_copy = function_name;\n  if (function_name == (char *)0x0) goto LAB_0800482c;\n  additional_info = \", function: \";\n  do {\n    fiprintf(file_pointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file_name,line_number,\n             additional_info,function_name,function_name_copy);\n    abort_result = abort();\n    line_number = (undefined4)((ulonglong)abort_result >> 0x20);\n    file_pointer = (undefined4)abort_result;\nLAB_0800482c:\n    function_name = \"\";\n    additional_info = function_name;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "print_assertion_error_08004808",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "function_name",
                "param_4": "function_name",
                "uVar1": "file_pointer",
                "pcVar2": "additional_info",
                "uVar3": "abort_result",
                "uVar4": "function_name_copy"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08004860",
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004808": {
                    "1": "assertion_failed",
                    "4": "print_assertion_failure",
                    "6": "print_assertion_failed_message",
                    "7": "print_assertion_error",
                    "2": "print_assertion_failed"
                },
                "param_1": {
                    "1": "condition",
                    "19": "file_name",
                    "9": "file"
                },
                "param_2": {
                    "1": "file",
                    "7": "line",
                    "21": "line_number"
                },
                "param_3": {
                    "1": "assertion_failed",
                    "5": "assertion_message",
                    "2": "message",
                    "12": "function_name",
                    "3": "function"
                },
                "param_4": {
                    "1": "additional_info",
                    "4": "function",
                    "2": "line_number",
                    "9": "function_name"
                },
                "uVar1": {
                    "1": "print_stream",
                    "7": "file_pointer",
                    "2": "file_handle",
                    "6": "file_descriptor",
                    "3": "file",
                    "5": "file_ptr"
                },
                "pcVar2": {
                    "4": "additional_message",
                    "2": "message",
                    "1": "delimiter",
                    "7": "additional_info"
                },
                "uVar3": {
                    "2": "return_value",
                    "16": "abort_result",
                    "3": "abort_return_value",
                    "1": "abort_function_result",
                    "8": "result"
                },
                "uVar4": {
                    "1": "msg_ptr",
                    "2": "assertion_message2",
                    "3": "assertion_copy",
                    "4": "function_name_copy"
                },
                "FUN_08004860": {
                    "1": "print_to_file"
                },
                "FUN_080051ac": {
                    "1": "reset_application_state"
                }
            }
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left_by32_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nunsigned_long_long shift_left_by32_bits_08004844(undefined4 input,uint value)\n\n{\n  return (result)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left_by32_bits_08004844",
                "param_1": "input",
                "param_2": "value",
                "ulonglong": "result",
                "longlong": "unsigned_long_long"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004844": {
                    "1": "left_shift64",
                    "2": "shift_left64_bits",
                    "6": "shift_left_by32_bits",
                    "3": "shift_left_by32"
                },
                "param_1": {
                    "5": "flags",
                    "1": "start_value",
                    "3": "param",
                    "2": "param_1",
                    "4": "param1"
                },
                "param_2": {
                    "2": "bits_to_shift",
                    "4": "input_value",
                    "1": "param_2",
                    "13": "value"
                },
                "ulonglong": {
                    "1": "longlong"
                },
                "param_3": {
                    "1": "new_param_3"
                },
                "param_n": {
                    "1": "new_parameter_name_n"
                },
                "longlong": {
                    "1": "unsigned_long_long"
                }
            }
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "print_data_08004860",
            "code": "\nvoid print_data_08004860(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  print_formatted_output(DAT_200000a0,format_string,arg1,&arg2_copy,format_string,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "print_data_08004860",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "_vfiprintf_r": "print_formatted_output"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004860": {
                    "1": "print_with_parameters",
                    "3": "print_formatted_data",
                    "5": "print_data",
                    "4": "print_formatted_output",
                    "2": "print_and_format"
                },
                "param_1": {
                    "31": "format_string"
                },
                "param_2": {
                    "1": "param1",
                    "18": "arg1",
                    "4": "param_2",
                    "2": "value1"
                },
                "param_3": {
                    "2": "param_3",
                    "1": "value2",
                    "4": "arg_2",
                    "15": "arg2"
                },
                "param_4": {
                    "1": "value2",
                    "2": "stack_value2",
                    "15": "arg3",
                    "4": "arg_3"
                },
                "uStack_8": {
                    "1": "temp_param_1",
                    "2": "arg_2_copy",
                    "6": "arg2_copy"
                },
                "uStack_4": {
                    "2": "arg5",
                    "1": "value4",
                    "6": "arg3_copy"
                },
                "_vfiprintf_r": {
                    "1": "print_formatted"
                },
                "FUN_08004a84": {
                    "1": "process_data"
                }
            }
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid execute_functions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  _init();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08000d3c"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004884": {
                    "1": "execute_function_queue",
                    "2": "execute_sub_functions",
                    "24": "execute_functions"
                },
                "FUN_08004648": {
                    "3": "perform_task1",
                    "1": "perform_operation1",
                    "2": "function_a"
                },
                "FUNC_080059f8": {
                    "1": "execute_special_function",
                    "2": "function_2",
                    "3": "perform_task2"
                },
                "iVar1": {
                    "2": "iteration",
                    "15": "index",
                    "1": "iteration_count",
                    "7": "counter"
                },
                "&DAT_08006008": {
                    "1": "function_pointers"
                },
                "F_UN_08004884": {
                    "1": "execute_functions"
                }
            }
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_080048cc",
            "code": "\nvoid fill_memory_080048cc(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_080048cc",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_08005400",
                "FUN_08005374",
                "FUN_0800532c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080048cc": {
                    "1": "fill_memory_with",
                    "15": "fill_memory",
                    "4": "memset",
                    "5": "initialize_memory",
                    "3": "fill_memory_with_byte"
                },
                "param_1": {
                    "12": "destination",
                    "2": "array",
                    "8": "memory",
                    "5": "dest",
                    "1": "memory_address"
                },
                "param_2": {
                    "1": "initial_value",
                    "28": "value",
                    "2": "byte_to_fill"
                },
                "param_3": {
                    "2": "num_bytes",
                    "1": "num_elements",
                    "20": "size",
                    "5": "length"
                },
                "puVar1": {
                    "1": "end_of_memory",
                    "2": "end_addr",
                    "10": "end_address",
                    "6": "end_pointer"
                },
                "*param_1": {
                    "1": "current_memory"
                }
            }
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid update_linked_list_080048dc(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int *temp;\n  int **temp_ptr;\n  int **current_ptr;\n  int **current_ptr;\n  int **prev_ptr;\n  int **new_node;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  lock_memory_allocation();\n  current_ptr = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_ptr = temp_ptr;\n    DAT_200005c8 = new_node;\n  }\n  else {\n    current_ptr = DAT_200005c8;\n    if (new_node < DAT_200005c8) {\n      current_ptr = (int **)*new_node;\n      current_ptr = (int **)((int)new_node + (int)current_ptr);\n      is_equal = DAT_200005c8 == current_ptr;\n      if (is_equal) {\n        current_ptr = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      new_node[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = new_node;\n      if (is_equal) {\n        current_ptr = (int **)((int)current_ptr + (int)current_ptr);\n        *new_node = (int *)current_ptr;\n      }\n    }\n    else {\n      do {\n        prev_ptr = current_ptr;\n        current_ptr = (int **)prev_ptr[1];\n        if (current_ptr == (int **)0x0) break;\n      } while (current_ptr <= new_node);\n      current_ptr = (int **)*prev_ptr;\n      if ((int **)((int)prev_ptr + (int)current_ptr) == new_node) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_node);\n        *prev_ptr = (int *)current_ptr;\n        if (current_ptr == (int **)((int)prev_ptr + (int)current_ptr)) {\n          temp = *current_ptr;\n          current_ptr = (int **)current_ptr[1];\n          prev_ptr[1] = (int *)current_ptr;\n          current_ptr = (int **)((int)current_ptr + (int)temp);\n          *prev_ptr = (int *)current_ptr;\n        }\n      }\n      else if (new_node < (int **)((int)prev_ptr + (int)current_ptr)) {\n        *result = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_node + (int)*new_node);\n        is_equal = current_ptr == current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)*current_ptr;\n          current_ptr = (int **)current_ptr[1];\n        }\n        new_node[1] = (int *)current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)((int)current_ptr + (int)*new_node);\n          *new_node = (int *)current_ptr;\n        }\n        prev_ptr[1] = (int *)new_node;\n      }\n    }\n  }\n  unlock_memory_allocation(result,current_ptr,current_ptr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "temp",
                "extraout_r1": "temp_ptr",
                "ppiVar2": "current_ptr",
                "ppiVar3": "current_ptr",
                "ppiVar4": "prev_ptr",
                "ppiVar5": "new_node",
                "bVar6": "is_equal",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_memory_allocation"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080048dc": {
                    "1": "add_to_linked_list",
                    "2": "insert_into_linked_list",
                    "8": "update_linked_list",
                    "3": "allocate_memory"
                },
                "param_1": {
                    "3": "output",
                    "2": "result_ptr",
                    "1": "result_pointer",
                    "10": "result"
                },
                "param_2": {
                    "1": "block_size",
                    "2": "data",
                    "23": "size"
                },
                "param_3": {
                    "7": "param3",
                    "1": "unused_param_1",
                    "2": "unused_param",
                    "3": "param_3",
                    "8": "arg3"
                },
                "param_4": {
                    "1": "arg2",
                    "7": "param4",
                    "3": "param_4",
                    "8": "arg4",
                    "2": "unused_param"
                },
                "piVar1": {
                    "1": "temp_int1",
                    "6": "temp_ptr",
                    "3": "current_size",
                    "2": "temp_var1"
                },
                "extraout_r1": {
                    "3": "extra_out_ptr",
                    "1": "next_block_offset_ptr",
                    "2": "temp_ptr1",
                    "4": "temp_ptr"
                },
                "ppiVar2": {
                    "2": "temp3",
                    "1": "temp1",
                    "4": "current_ptr",
                    "3": "current"
                },
                "ppiVar3": {
                    "1": "temp4",
                    "4": "current_ptr",
                    "3": "current",
                    "2": "prev_ptr"
                },
                "ppiVar4": {
                    "3": "previous_ptr",
                    "1": "temp_pointer",
                    "4": "prev_ptr"
                },
                "ppiVar5": {
                    "5": "new_ptr",
                    "1": "new_chunk_ptr",
                    "3": "new_pointer",
                    "2": "new_block",
                    "11": "new_node"
                },
                "bVar6": {
                    "1": "is_end_of_list",
                    "3": "is_head",
                    "2": "is_same_block",
                    "6": "is_equal"
                },
                "__malloc_lock": {
                    "2": "lock_memory",
                    "4": "lock_memory_allocation"
                },
                "DAT_200005c8": {
                    "1": "global_list_pointer"
                },
                "__malloc_unlock": {
                    "2": "unlock_memory",
                    "4": "unlock_memory_allocation"
                },
                "FUNC_0800557c": {
                    "2": "function_a",
                    "1": "function_one"
                },
                "FUNC_0800557e": {
                    "1": "function_two",
                    "2": "function_b"
                },
                "ppiVar1": {
                    "1": "temp_ptr"
                },
                "*ppiVar5": {
                    "1": "address_difference"
                },
                "*ppiVar4": {
                    "1": "current_pointer_data"
                }
            }
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocate_memory_08004978(undefined4 *size,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size = 0xc;\n  }\n  else {\n    lock_memory_allocation();\n    current_block = DAT_200005c8;\n    new_block = DAT_200005c8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          new_block = (uint *)((int)previous_block + difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = sbrk(size);\n    }\n    current_block = (uint *)sbrk(size,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = sbrk(size,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      unlock_memory_allocation(size);\n      allocated_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size = 0xc;\n    unlock_memory_allocation(size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "size",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "uVar6": "allocated_size",
                "_sbrk_r": "sbrk",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_memory_allocation"
            },
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800500c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004978": {
                    "29": "allocate_memory",
                    "2": "allocate_memory_block"
                },
                "param_1": {
                    "1": "size_out",
                    "3": "result",
                    "4": "size_ptr",
                    "9": "size",
                    "2": "out_ptr"
                },
                "param_2": {
                    "1": "min_size",
                    "8": "alignment",
                    "18": "size",
                    "3": "requested_size"
                },
                "puVar1": {
                    "18": "current_block",
                    "2": "current",
                    "1": "pointer",
                    "6": "current_chunk"
                },
                "iVar2": {
                    "1": "chunk_size",
                    "5": "offset",
                    "10": "remaining_space",
                    "3": "difference",
                    "2": "block_size"
                },
                "puVar3": {
                    "4": "prev_block",
                    "1": "temp_block",
                    "11": "previous_block",
                    "3": "previous_chunk",
                    "2": "previous"
                },
                "uVar4": {
                    "3": "block_diff",
                    "2": "block_size",
                    "5": "block_difference",
                    "1": "space_difference",
                    "12": "difference"
                },
                "puVar5": {
                    "1": "previous",
                    "2": "previous_chunk",
                    "3": "previous_block",
                    "12": "new_block"
                },
                "uVar6": {
                    "1": "block_size",
                    "2": "requested_size",
                    "3": "total_size",
                    "18": "allocated_size"
                },
                "DAT_200005c8": {
                    "4": "first_block",
                    "1": "chunk_list"
                },
                "DAT_200005cc": {
                    "1": "sbrk_result",
                    "4": "heap_end"
                },
                "_sbrk_r": {
                    "1": "allocate_heap",
                    "3": "sbrk"
                },
                "__malloc_lock": {
                    "2": "lock"
                },
                "__malloc_unlock": {
                    "2": "unlock_memory_allocation"
                },
                "FUNC_0800557c": {
                    "2": "function1",
                    "1": "function_1"
                },
                "FUN_0800500c": {
                    "2": "function2",
                    "1": "function_2"
                },
                "FUNC_0800557e": {
                    "1": "function_c",
                    "2": "function3"
                }
            }
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int arg1,byte byte_value,byte **buffer)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = buffer[2] + -1;\n  buffer[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)buffer[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *buffer;\n    *buffer = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    initialize;\n  }\n  if (buffer == (byte **)&DAT_08005fc0) {\n    buffer = *(byte ***)(arg1 + 4);\n  }\n  else if (buffer == (byte **)&DAT_08005fe0) {\n    buffer = *(byte ***)(arg1 + 8);\n  }\n  else if (buffer == (byte **)&DAT_08005fa0) {\n    buffer = *(byte ***)(arg1 + 0xc);\n  }\n  buffer[2] = buffer[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(buffer + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = buffer[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = setup_stream(arg1,buffer,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    temp_var1 = (int)*buffer - (int)buffer[4];\n    result = (uint)byte_value;\n    if ((temp_var1 < (int)buffer[5]) || (temp_var1 = flush_r(arg1,buffer), temp_var1 == 0)) {\n      buffer[2] = buffer[2] + -1;\n      temp_var2 = *buffer;\n      *buffer = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = flush_r(arg1,buffer);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "arg1",
                "param_2": "byte_value",
                "param_3": "buffer",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_r",
                "__sinit()": "initialize"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a34": {
                    "1": "parse_input",
                    "16": "process_input",
                    "2": "process_input_byte"
                },
                "param_1": {
                    "1": "context",
                    "5": "arg1",
                    "2": "input_param",
                    "3": "param"
                },
                "param_2": {
                    "1": "byte_val",
                    "5": "input_byte",
                    "3": "byte_to_write",
                    "13": "byte_value",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "input_ptr",
                    "2": "buffer_pointer",
                    "5": "buffer"
                },
                "iVar1": {
                    "1": "pointer_offset",
                    "3": "temp_var_1",
                    "2": "temp1",
                    "5": "result",
                    "7": "temp_var1"
                },
                "pbVar2": {
                    "3": "temp_var_2",
                    "1": "temp_byte_1",
                    "2": "temp2",
                    "6": "temp_var2",
                    "4": "current_byte"
                },
                "pbVar3": {
                    "6": "temp_var3",
                    "1": "temp_byte2",
                    "2": "temp3",
                    "3": "temp_var_3"
                },
                "uVar4": {
                    "1": "temp_var4",
                    "7": "return_value",
                    "17": "result"
                },
                "__sinit": {
                    "1": "__sinit",
                    "6": "initialize",
                    "2": "initialize_stream"
                },
                "__swsetup_r": {
                    "3": "setup_r",
                    "1": "setup_read_write"
                },
                "_fflush_r": {
                    "1": "flush_output",
                    "2": "flush_stream",
                    "3": "flush_r"
                },
                "FUN_080050d0": {
                    "1": "initialize_input_buffer"
                },
                "FUN_080052cc": {
                    "1": "helper2"
                },
                "FUN_080053a0": {
                    "1": "perform_flush"
                },
                "DAT_08005fc0": {
                    "1": "data_const1",
                    "2": "data_1"
                },
                "DAT_08005fe0": {
                    "1": "global_data_2",
                    "2": "data_2"
                },
                "DAT_08005fa0": {
                    "1": "data_const3",
                    "2": "data_3"
                },
                "__sinit()": {
                    "1": "initialize_stream"
                },
                "__swsetup_r()": {
                    "1": "setup_sw_r"
                },
                "_fflush_r()": {
                    "1": "flush_r"
                },
                "*(int *)(param_1 + 0x18)": {
                    "1": "stream_initialized"
                },
                "DAT_080050d0": {
                    "1": "dat_080050d0"
                },
                "DAT_080052cc": {
                    "1": "dat_080052cc"
                },
                "DAT_080053a0": {
                    "1": "dat_080053a0"
                }
            }
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "write_to_stream_08004a60",
            "code": "\nint write_to_stream_08004a60(undefined4 stream,undefined4 character,undefined *buffer,int length)\n\n{\n  int result;\n  undefined *end_of_buffer;\n  int remaining_length;\n  \n  end_of_buffer = buffer + length;\n  remaining_length = length;\n  do {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    result = put_character_to_stream(stream,*buffer,character,length,remaining_length);\n    length = result + 1;\n    buffer = buffer + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "write_to_stream_08004a60",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_buffer",
                "iVar3": "remaining_length",
                "__sfputc_r": "put_character_to_stream"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a60": {
                    "1": "write_buffer",
                    "12": "write_to_stream",
                    "2": "write_to_file",
                    "3": "write_data_to_stream"
                },
                "param_1": {
                    "23": "stream",
                    "1": "file",
                    "2": "file_stream",
                    "4": "file_descriptor"
                },
                "param_2": {
                    "1": "byte_value",
                    "16": "character",
                    "2": "buffer",
                    "3": "byte"
                },
                "param_3": {
                    "1": "source_buffer",
                    "7": "data",
                    "2": "string",
                    "17": "buffer"
                },
                "param_4": {
                    "2": "data_length",
                    "4": "buffer_length",
                    "1": "array_size",
                    "3": "size",
                    "9": "length"
                },
                "iVar1": {
                    "1": "character_count",
                    "2": "write_result",
                    "3": "bytes_written",
                    "17": "result"
                },
                "puVar2": {
                    "1": "buffer_end",
                    "15": "end_of_buffer",
                    "5": "end_of_data",
                    "2": "end_buffer"
                },
                "iVar3": {
                    "1": "remaining_data_length",
                    "3": "current_length",
                    "4": "remaining_size",
                    "2": "remaining_data_size",
                    "6": "remaining_length"
                },
                "F_UND_08004a60": {
                    "1": "copy_bytes_to_stream"
                },
                "FUN_08004a34": {
                    "1": "write_byte_to_stream"
                },
                "__sfputc_r": {
                    "1": "put_character",
                    "2": "write_byte_to_file"
                },
                "F_08004a60": {
                    "1": "write_to_stream"
                }
            }
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_printf_format_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_printf_format_08004a84(int format_string,undefined4 *format,byte *output_buffer,int *arg_list)\n\n{\n  int result;\n  int *arg_ptr;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int temp_var;\n  int *arg_list;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined zero_flag;\n  undefined4 padding;\n  \n  arg_list = arg_list;\n  if ((format_string != 0) && (*(int *)(format_string + 0x18) == 0)) {\n    initialize_stream;\n  }\n  if (format == &DAT_08005fc0) {\n    format = *(undefined4 **)(format_string + 4);\n  }\n  else if (format == (undefined4 *)&DAT_08005fe0) {\n    format = *(undefined4 **)(format_string + 8);\n  }\n  else if (format == (undefined4 *)&DAT_08005fa0) {\n    format = *(undefined4 **)(format_string + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (temp_var = setup_buffered_stream(format_string,format), temp_var != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = output_buffer;\nLAB_08004ac6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_var = (int)next_char - (int)output_buffer;\n  if (temp_var != 0) {\n    result = write_string_to_stream(format_string,format,output_buffer,temp_var);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + temp_var;\n  }\n  if (*next_char == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  width = 0;\n  zero_flag = 0;\n  padding = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp_var = memchr(\"#-0+ \",*current_char);\n    output_buffer = current_char + 1;\n    if (temp_var == 0) break;\n    flags = 1 << (temp_var + 0xf7ffa094U & 0xff) | flags;\n    current_char = output_buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    zero_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    zero_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    arg_ptr = arg_list + 1;\n    temp_var = *arg_list;\n    arg_list = arg_ptr;\n    if (temp_var < 0) {\n      width = -temp_var;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_digit = false;\n    temp_var = width;\n    output_buffer = current_char;\n    while( true ) {\n      if (9 < *output_buffer - 0x30) break;\n      temp_var = temp_var * 10 + (*output_buffer - 0x30);\n      is_digit = true;\n      output_buffer = output_buffer + 1;\n    }\n    if (!is_digit) goto LAB_08004bae;\n  }\n  width = temp_var;\nLAB_08004bae:\n  if (*output_buffer == 0x2e) {\n    if (output_buffer[1] == 0x2a) {\n      precision = *arg_list;\n      if (precision < 0) {\n        precision = -1;\n      }\n      output_buffer = output_buffer + 2;\n      arg_list = arg_list + 1;\n    }\n    else {\n      is_digit = false;\n      precision = 0;\n      temp_var = 0;\n      while( true ) {\n        output_buffer = output_buffer + 1;\n        if (9 < *output_buffer - 0x30) break;\n        temp_var = temp_var * 10 + (*output_buffer - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = memchr(&DAT_08005f72,*output_buffer,3);\n  if (temp_var != 0) {\n    flags = flags | 0x40 << (temp_var + 0xf7ffa08eU & 0xff);\n    output_buffer = output_buffer + 1;\n  }\n  conversion_specifier = *output_buffer;\n  output_buffer = output_buffer + 1;\n  temp_var = memchr(\"efgEFG\",conversion_specifier,6);\n  if (temp_var == 0) {\n    unaff_r9 = process_float_specifier(format_string,&flags,format,0x8004a61,&arg_list);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    arg_list = (int *)(((int)arg_list + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_r9;\n  current_char = output_buffer;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_printf_format_08004a84",
                "param_1": "format_string",
                "param_2": "format",
                "param_3": "output_buffer",
                "param_4": "arg_list",
                "iVar1": "result",
                "piVar2": "arg_ptr",
                "bVar3": "is_digit",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "iVar6": "temp_var",
                "local_8c": "arg_list",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "zero_flag",
                "local_30": "padding",
                "__sinit()": "initialize_stream",
                "__swsetup_r": "setup_buffered_stream",
                "__sfputs_r": "write_string_to_stream",
                "_printf_i": "process_float_specifier",
                "__sinit": "initialize_stream"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_08000230",
                "FUN_080050d0",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004a84": {
                    "1": "print_formatted",
                    "2": "process_printf_string",
                    "4": "print_formatted_string",
                    "5": "process_printf_format"
                },
                "param_1": {
                    "3": "format_specifier",
                    "1": "format_buffer",
                    "7": "format_string",
                    "2": "file_descriptor"
                },
                "param_2": {
                    "1": "arg2",
                    "3": "arg_list",
                    "5": "format_specifier",
                    "2": "arg_pointer",
                    "6": "format",
                    "4": "format_string"
                },
                "param_3": {
                    "1": "arg3",
                    "4": "format_string",
                    "2": "output",
                    "9": "output_buffer"
                },
                "param_4": {
                    "1": "total_characters",
                    "2": "bytes_written",
                    "3": "output_size",
                    "8": "arg_list"
                },
                "iVar1": {
                    "4": "write_result",
                    "1": "sfputs_result",
                    "3": "status",
                    "16": "result"
                },
                "piVar2": {
                    "3": "int_ptr",
                    "1": "current_argument",
                    "2": "temp_pointer",
                    "4": "arg_ptr"
                },
                "bVar3": {
                    "8": "is_digit",
                    "6": "is_number",
                    "1": "has_num",
                    "3": "is_numeric",
                    "2": "found_number"
                },
                "pbVar4": {
                    "1": "current_byte",
                    "15": "current_char",
                    "4": "ptr",
                    "2": "format_ptr"
                },
                "pbVar5": {
                    "2": "current_char",
                    "1": "byte_pointer2",
                    "9": "next_char"
                },
                "unaff_r9": {
                    "1": "arg_size",
                    "5": "unaff_r9",
                    "2": "temp_var"
                },
                "iVar6": {
                    "1": "result",
                    "2": "temp_var2",
                    "7": "temp_var"
                },
                "local_8c": {
                    "1": "arg_ptr_list",
                    "4": "arg_list_ptr",
                    "2": "arg_pointer"
                },
                "local_88": {
                    "1": "flag_value",
                    "2": "flag_bits",
                    "21": "flags"
                },
                "local_84": {
                    "1": "precision_value",
                    "4": "width",
                    "24": "precision"
                },
                "local_80": {
                    "1": "conversion_specifier",
                    "3": "precision",
                    "2": "field_width",
                    "7": "width"
                },
                "local_7c": {
                    "1": "number_of_digits",
                    "2": "arg_num",
                    "13": "width",
                    "3": "arg_width",
                    "6": "field_width"
                },
                "local_74": {
                    "4": "total_chars_written",
                    "3": "total_written",
                    "1": "chars_written",
                    "6": "total_length"
                },
                "local_70": {
                    "1": "conversion_char",
                    "5": "specifier",
                    "19": "conversion_specifier"
                },
                "local_6f": {
                    "2": "local_6f",
                    "1": "space_char",
                    "3": "space",
                    "14": "space_flag"
                },
                "local_6e": {
                    "1": "zero_pad",
                    "2": "zero_flag",
                    "3": "plus",
                    "12": "plus_flag"
                },
                "local_45": {
                    "1": "zero_pad",
                    "3": "sign_flag",
                    "2": "alignment",
                    "5": "zero_flag"
                },
                "local_30": {
                    "1": "arg_ptr",
                    "2": "padding"
                },
                "__sinit()": {
                    "1": "initialize"
                },
                "&DAT_08005fc0": {
                    "1": "default_float"
                },
                "&DAT_08005fe0": {
                    "1": "double"
                },
                "&DAT_08005fa0": {
                    "1": "long_double"
                },
                "*param_2": {
                    "1": "conversion_specifier"
                },
                "__swsetup_r()": {
                    "1": "setup_r"
                },
                "__sfputs_r()": {
                    "1": "puts_r"
                },
                "memchr()": {
                    "1": "find_character"
                },
                "_printf_i()": {
                    "1": "write_formatted_string"
                },
                "fprintf()": {
                    "1": "print_formatted"
                },
                "FUN_08000230": {
                    "1": "find_next_format_specifier"
                },
                "FUN_080050d0": {
                    "1": "get_first_argument"
                },
                "FUN_08004d9c": {
                    "1": "process_specifier"
                },
                "FUN_080053a0": {
                    "1": "safely_init_buffer"
                },
                "FUN_08004a60": {
                    "1": "handle_invalid_format"
                },
                "__swsetup_r": {
                    "1": "setup_stream"
                },
                "__sfputs_r": {
                    "1": "write_string_to_stream"
                },
                "_printf_i": {
                    "1": "handle_integer"
                },
                "0x8004a61": {
                    "1": "default_specifier_error_handler"
                },
                "__sinit": {
                    "1": "initialize_stream"
                },
                "_printf_e": {
                    "1": "handle_float"
                },
                "_printf_g": {
                    "1": "handle_float"
                },
                "&param_2[3]": {
                    "1": "spec_size"
                },
                "&param_2[4]": {
                    "1": "spec_value"
                }
            }
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocess_data_08004cb0(undefined4 data,uint *data_array,uint *output,undefined4 param4,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint count;\n  bool is_condition_met;\n  \n  max_value = data_array[4];\n  if (max_offset < min_offset) {\n    max_value = data_array[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output); index = index + 1) {\n      result = (*callback)(data,param4,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_value + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_value = max_value + 2;\n  }\n  index = (*callback)(data,param4,(int)data_array + 0x43,max_value);\n  if (index != -1) {\n    max_value = data_array[3];\n    is_condition_met = (*data_array & 6) == 4;\n    if (is_condition_met) {\n      max_value = max_value - *output;\n    }\n    if (is_condition_met) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    else {\n      max_value = 0;\n    }\n    if (max_offset < min_offset) {\n      max_value = max_value + (data_array[2] - data_array[4]);\n    }\n    count = 0;\n    while( true ) {\n      if (max_value == count) {\n        return 0;\n      }\n      index = (*callback)(data,param4,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "data",
                "param_2": "data_array",
                "param_3": "output",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_value",
                "uVar4": "count",
                "bVar5": "is_condition_met",
                "(int)param_2[4]": "max_offset",
                "(int)param_2[2]": "min_offset"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004cb0": {
                    "2": "calculate_output_size",
                    "1": "extract_and_process_data",
                    "19": "process_data"
                },
                "param_1": {
                    "6": "input_data",
                    "7": "data",
                    "1": "input_val",
                    "4": "input_value",
                    "3": "param1",
                    "2": "input1"
                },
                "param_2": {
                    "1": "input_data",
                    "7": "data_array",
                    "4": "data",
                    "2": "buffer",
                    "3": "metadata"
                },
                "param_3": {
                    "1": "output_count",
                    "7": "output",
                    "4": "output_length",
                    "2": "output_value",
                    "6": "result"
                },
                "param_4": {
                    "1": "constant",
                    "9": "param_4",
                    "2": "input3",
                    "4": "param"
                },
                "param_5": {
                    "1": "process_data",
                    "20": "callback",
                    "4": "callback_func",
                    "5": "callback_function"
                },
                "iVar1": {
                    "2": "loop_index",
                    "1": "inner_loop_counter",
                    "12": "index"
                },
                "iVar2": {
                    "1": "loop_counter_2",
                    "2": "status",
                    "4": "callback_result",
                    "12": "result"
                },
                "uVar3": {
                    "1": "maximum_length",
                    "3": "max_length",
                    "7": "max_value",
                    "2": "max_output_size",
                    "6": "max_size"
                },
                "uVar4": {
                    "2": "temp2",
                    "1": "temp_var2",
                    "10": "count",
                    "9": "counter"
                },
                "bVar5": {
                    "3": "condition",
                    "1": "should_process_data",
                    "2": "is_true",
                    "8": "is_condition_met",
                    "5": "is_flag_set"
                },
                "*(char *)((int)param_2 + 0x43)": {
                    "1": "has_extra_flag"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x43)": {
                    "1": "extra_flag1"
                },
                "*(undefined *)((int)param_2 + uVar3 + 0x44)": {
                    "1": "extra_flag2"
                },
                "*(undefined *)((int)param_2 + 0x45)": {
                    "1": "extra_flag3"
                },
                "(int)(*param_2 << 0x1a)": {
                    "1": "shifted_input"
                },
                "(int)(param_2[3] - *param_3)": {
                    "1": "loop_iterations"
                },
                "(int)param_2[4]": {
                    "1": "max_offset"
                },
                "(*param_2 & 6)": {
                    "1": "offset_check"
                },
                "(int)param_2[2]": {
                    "1": "min_offset"
                }
            }
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "print_formatted_output_08004d9c",
            "code": "\nuint print_formatted_output_08004d9c(undefined4 format_string,uint *args,undefined4 width,code *print_func,uint **arg_ptr)\n\n{\n  byte byte_val;\n  int index;\n  uint *ptr;\n  int result;\n  char *hex_chars;\n  uint base;\n  uint **ptr_ptr;\n  char **char_ptr_ptr;\n  uint value;\n  uint temp;\n  char *char_ptr2;\n  char *char_ptr3;\n  uint local_array [2];\n  \n  byte_val = *(byte *)(args + 6);\n  char_ptr3 = (char *)((int)args + 0x43);\n  if (byte_val != 0x6e) {\n    if (byte_val < 0x6f) {\n      if (byte_val != 99) {\n        if (byte_val < 100) {\n          if (byte_val == 0) goto LAB_08004f56;\n          if (byte_val != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *args;\n          ptr = *arg_ptr;\n          *arg_ptr = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *args = base | 0x20;\n          }\n          if (value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byte_val != 100) && (byte_val != 0x69)) goto LAB_08004dcc;\n          value = *args;\n          ptr = *arg_ptr;\n          if ((value & 0x80) == 0) {\n            *arg_ptr = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *arg_ptr = ptr + 1;\nLAB_08004dec:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp = args[1];\n        args[2] = temp;\n        char_ptr2 = char_ptr3;\n        if ((int)temp < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)args + 0x42) = *hex_chars;\n          char_ptr2 = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (value == 0) {\n            if (temp != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp = value / base;\n              char_ptr2 = char_ptr2 + -1;\n              *char_ptr2 = hex_chars[value - base * temp];\n              value = temp;\n            } while (temp != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          char_ptr2[-1] = '0';\n          char_ptr2 = char_ptr2 + -1;\n        }\n        args[4] = (int)char_ptr3 - (int)char_ptr2;\n        char_ptr3 = char_ptr2;\n        goto LAB_08004ec2;\n      }\n      ptr = *arg_ptr;\n      *arg_ptr = ptr + 1;\n      *(char *)((int)args + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      char_ptr3 = (char *)((int)args + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_val != 0x73) {\n        if (byte_val < 0x74) {\n          if (byte_val == 0x6f) {\nLAB_08004e52:\n            value = *args;\n            ptr = *arg_ptr;\n            if ((value & 0x80) == 0) {\n              *arg_ptr = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *arg_ptr = ptr + 1;\nLAB_08004e60:\n              value = *ptr;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            if (byte_val == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_val == 0x70) {\n            *args = *args | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)args + 0x45) = 0x78;\n            hex_chars = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_val == 0x75) goto LAB_08004e52;\n          if (byte_val == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)args + 0x42) = byte_val;\n        goto LAB_08004e2c;\n      }\n      char_ptr_ptr = (char **)*arg_ptr;\n      *arg_ptr = (uint *)(char_ptr_ptr + 1);\n      char_ptr3 = *char_ptr_ptr;\n      index = find_null_char(char_ptr3,0,args[1]);\n      if (index != 0) {\n        args[1] = index - (int)char_ptr3;\n      }\n      value = args[1];\n    }\n    args[4] = value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *args;\n  ptr_ptr = (uint **)*arg_ptr;\n  base = args[5];\n  if ((value & 0x80) == 0) {\n    *arg_ptr = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *arg_ptr = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_08004f42:\n    *ptr = base;\n  }\nLAB_08004f56:\n  args[4] = 0;\nLAB_08004ec2:\n  index = format_common(format_string,args,local_array,width,print_func);\n  if ((index == -1) || (index = (*print_func)(format_string,width,char_ptr3,args[4]), index == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (index = 0; index < (int)(args[3] - local_array[0]); index = index + 1) {\n        result = (*print_func)(format_string,width,(int)args + 0x19,1);\n        if (result == -1) goto LAB_08004ed6;\n      }\n    }\n    value = args[3];\n    if ((int)args[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "print_formatted_output_08004d9c",
                "param_1": "format_string",
                "param_2": "args",
                "param_3": "width",
                "param_4": "print_func",
                "param_5": "arg_ptr",
                "bVar1": "byte_val",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hex_chars",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "temp",
                "pcVar11": "char_ptr2",
                "pcVar12": "char_ptr3",
                "local_24": "local_array",
                "ppuVar7": "ptr_ptr",
                "ppcVar8": "char_ptr_ptr",
                "_printf_common": "format_common",
                "_printf": "formatted_output",
                "memchr": "find_null_char"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004d9c": {
                    "1": "printf_and_format",
                    "4": "print_formatted_data",
                    "10": "print_formatted_output",
                    "8": "print_formatted_string",
                    "2": "print_formatted"
                },
                "param_1": {
                    "1": "arg1",
                    "3": "param1",
                    "26": "format_string"
                },
                "param_2": {
                    "1": "arg2",
                    "5": "format_args",
                    "2": "param2",
                    "12": "args",
                    "3": "arguments"
                },
                "param_3": {
                    "3": "arg_count",
                    "1": "stdout",
                    "6": "width",
                    "4": "num_args"
                },
                "param_4": {
                    "2": "put_character",
                    "4": "print_func",
                    "3": "write_function",
                    "1": "printer"
                },
                "param_5": {
                    "1": "arg_table",
                    "3": "num_written",
                    "7": "arg_ptr"
                },
                "bVar1": {
                    "2": "first_byte",
                    "1": "format_char",
                    "4": "byte_var",
                    "3": "first_char",
                    "5": "byte_value",
                    "8": "byte_val"
                },
                "iVar2": {
                    "1": "format_result",
                    "2": "i",
                    "8": "result",
                    "3": "int_var"
                },
                "puVar3": {
                    "1": "buffer",
                    "4": "ptr_var",
                    "2": "next_arg",
                    "8": "ptr",
                    "3": "arg_ptr"
                },
                "iVar4": {
                    "1": "output_result",
                    "3": "write_result",
                    "2": "loop_index",
                    "7": "result"
                },
                "pcVar5": {
                    "2": "char_ptr1",
                    "1": "digit_table",
                    "8": "hex_chars",
                    "5": "hex_digits",
                    "4": "char_ptr",
                    "3": "digits"
                },
                "uVar6": {
                    "1": "num3",
                    "2": "format_flags",
                    "16": "base"
                },
                "uVar9": {
                    "1": "digit",
                    "2": "length",
                    "6": "value",
                    "3": "num",
                    "4": "result"
                },
                "uVar10": {
                    "1": "tmp",
                    "2": "copy_length"
                },
                "pcVar11": {
                    "1": "char_pointer_2",
                    "4": "str",
                    "6": "char_ptr2",
                    "2": "output_string"
                },
                "pcVar12": {
                    "1": "output_buffer",
                    "4": "char_ptr3",
                    "2": "formatted_string"
                },
                "local_24": {
                    "1": "arg_size",
                    "2": "temp_buffer",
                    "6": "local_array",
                    "5": "local_variables",
                    "3": "local_arr"
                },
                "ppuVar7": {
                    "3": "ptr_ptr",
                    "1": "ptr_to_next_arg",
                    "2": "pptr"
                },
                "ppcVar8": {
                    "2": "str_ptr",
                    "1": "pointer_to_char_pointer"
                },
                "_printf_common": {
                    "1": "printf_common"
                },
                "_printf": {
                    "1": "formatted_output"
                },
                "memchr": {
                    "1": "find_null_char"
                },
                "*ppcVar8": {
                    "1": "str_ptr"
                }
            }
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "print_formatted_output_08004fdc",
            "code": "\nvoid print_formatted_output_08004fdc(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int data_address;\n  undefined4 format_string_copy;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  data_address = DAT_200000a0;\n  format_string_copy = format_string;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data(DAT_200000a0);\n  }\n  formatted_output_printf(data_address,*(undefined4 *)(data_address + 8),format_string,&arg1_copy,format_string_copy,&arg1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "print_formatted_output_08004fdc",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "data_address",
                "uVar2": "format_string_copy",
                "uStack_c": "arg1_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy",
                "_vfiprintf_r": "formatted_output_printf",
                "__sinit": "initialize_data"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08004fdc": {
                    "2": "printf_wrapper",
                    "1": "print_with_format_specifier",
                    "11": "print_formatted_output",
                    "9": "print_formatted_string"
                },
                "param_1": {
                    "1": "output_buffer",
                    "2": "output_stream",
                    "27": "format_string"
                },
                "param_2": {
                    "26": "arg1",
                    "2": "arg_1",
                    "1": "param_2"
                },
                "param_3": {
                    "1": "value2",
                    "2": "arg_2",
                    "26": "arg2"
                },
                "param_4": {
                    "1": "value3",
                    "26": "arg3",
                    "2": "arg_3"
                },
                "iVar1": {
                    "1": "stream_ptr",
                    "5": "data_ptr",
                    "8": "data_pointer",
                    "11": "data_address"
                },
                "uVar2": {
                    "1": "variable2",
                    "2": "format_string",
                    "9": "format_string_copy"
                },
                "uStack_c": {
                    "1": "temp_var1",
                    "12": "arg1_copy"
                },
                "uStack_8": {
                    "1": "arg2",
                    "12": "arg2_copy"
                },
                "uStack_4": {
                    "1": "arg3_ptr",
                    "12": "arg3_copy"
                },
                "_vfiprintf_r": {
                    "1": "formatted_output_printf"
                },
                "__sinit": {
                    "1": "initialize_data"
                },
                "DAT_200000a0": {
                    "1": "data_address"
                },
                "FUN_08004a84": {
                    "1": "reverse_integer_array"
                },
                "FUN_080053a0": {
                    "1": "initialize_data"
                }
            }
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_memory_0800500c",
            "code": "\nvoid allocate_memory_0800500c(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000674 = 0;\n  allocation_result = request_memory(size);\n  if ((allocation_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocation_result",
                "_sbrk": "request_memory"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800500c": {
                    "1": "set_memory_block",
                    "4": "initialize_memory",
                    "23": "allocate_memory"
                },
                "param_1": {
                    "3": "output_ptr",
                    "1": "memory_ptr",
                    "4": "result_pointer",
                    "5": "result_ptr",
                    "2": "memory_address",
                    "9": "result"
                },
                "param_2": {
                    "2": "allocation_size",
                    "5": "memory_size",
                    "1": "required_size",
                    "22": "size"
                },
                "iVar1": {
                    "1": "memory_allocation_result",
                    "3": "allocated_size",
                    "13": "allocation_result",
                    "2": "allocated_address",
                    "5": "result"
                },
                "_sbrk": {
                    "2": "request_memory",
                    "1": "increase_memory"
                },
                "FUN_08004094": {
                    "1": "get_data_pointer"
                },
                "*param_1": {
                    "1": "assigned_address"
                }
            }
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint process_data_080050d0(undefined4 *output_buffer,undefined4 *input_buffer)\n\n{\n  int data_ptr;\n  uint result;\n  ushort_value flags;\n  \n  data_ptr = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data(DAT_200000a0);\n  }\n  if (input_buffer == &DAT_08005fc0) {\n    input_buffer = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_08005fe0) {\n    input_buffer = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_08005fa0) {\n    input_buffer = *(undefined4 **)(data_ptr + 0xc);\n  }\n  flags = *(ushort_value *)(input_buffer + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_buffer = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)pointer_to_data != (undefined4 *)0x0) {\n        if ((undefined4 *)pointer_to_data != input_buffer + 0x11) {\n          free_memory(output_buffer);\n        }\n        pointer_to_data = 0;\n      }\n      *(ushort_value *)(input_buffer + 3) = *(ushort_value *)(input_buffer + 3) & 0xffdb;\n      some_value = 0;\n      *input_buffer = buffer_data_pointer;\n    }\n    *(ushort_value *)(input_buffer + 3) = *(ushort_value *)(input_buffer + 3) | 8;\n  }\n  if ((buffer_data_pointer == 0) && ((*(ushort_value *)(input_buffer + 3) & 0x280) != 0x200)) {\n    make_buffer(output_buffer,input_buffer);\n  }\n  flags = *(ushort_value *)(input_buffer + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = buffer_data_size;\n    }\n    buffer_flag_a = result;\n  }\n  else {\n    buffer_flag_a = 0;\n    buffer_flag_b = -buffer_data_size;\n  }\n  if (buffer_data_pointer == 0) {\n    flags = *(ushort_value *)(input_buffer + 3);\n    result = (int)(short_value)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort_value *)(input_buffer + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "flags",
                "__sinit": "initialize_data",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "short": "short_value",
                "param_2[4]": "buffer_data_pointer",
                "param_2[5]": "buffer_data_size",
                "param_2[2]": "buffer_flag_a",
                "param_2[6]": "buffer_flag_b",
                "param_2[0xd]": "pointer_to_data",
                "param_2[1]": "some_value"
            },
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080054fc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080050d0": {
                    "2": "process_param",
                    "16": "process_data",
                    "1": "decode_and_process_data"
                },
                "param_1": {
                    "4": "output_ptr",
                    "3": "output",
                    "1": "buffer_1",
                    "9": "output_param",
                    "11": "output_buffer"
                },
                "param_2": {
                    "10": "input_buffer",
                    "3": "input_array",
                    "4": "input_ptr",
                    "1": "value_ptr",
                    "9": "input_param"
                },
                "iVar1": {
                    "1": "dat_200000a0",
                    "11": "data_ptr",
                    "3": "data_offset",
                    "5": "data_address"
                },
                "uVar2": {
                    "1": "temp_variable",
                    "2": "data_value",
                    "25": "result"
                },
                "uVar3": {
                    "3": "flag",
                    "1": "param_2_value",
                    "2": "short_value",
                    "5": "value",
                    "10": "flags"
                },
                "__sinit": {
                    "10": "initialize_data",
                    "7": "initialize",
                    "1": "initialize_data_struct"
                },
                "&DAT_08005fc0": {
                    "2": "constant_1",
                    "1": "data_1"
                },
                "&DAT_08005fe0": {
                    "1": "constant_2",
                    "2": "constant2"
                },
                "&DAT_08005fa0": {
                    "1": "static_data_3",
                    "2": "constant3"
                },
                "_free_r": {
                    "9": "free_memory",
                    "4": "release_memory",
                    "2": "free_data",
                    "1": "free_resources"
                },
                "__smakebuf_r": {
                    "1": "make_buffer_r",
                    "7": "create_buffer",
                    "11": "make_buffer"
                },
                "output_param": {
                    "1": "output"
                },
                "input_param": {
                    "1": "input"
                },
                "data_address": {
                    "1": "data_addr"
                },
                "data": {
                    "1": "data_value"
                },
                "FUN_080048dc": {
                    "1": "process_data_block"
                },
                "FUN_080054fc": {
                    "3": "calculate_value",
                    "1": "calculate_data",
                    "2": "calculate_checksum"
                },
                "FUN_080053a0": {
                    "1": "cleanup_data",
                    "3": "cleanup"
                },
                "short": {
                    "1": "short_value"
                },
                "param_1[0xd]": {
                    "1": "buffer_metadata"
                },
                "param_2 + 0x11": {
                    "1": "pointer_to_next_data"
                },
                "param_2[4]": {
                    "1": "data_value"
                },
                "param_2[5]": {
                    "1": "buffer_data_size"
                },
                "param_2[2]": {
                    "1": "buffer_flag_a"
                },
                "param_2[6]": {
                    "1": "data_ptr[6]"
                },
                "DAT_200000a0": {
                    "1": "data_structure"
                },
                "(undefined4 *)&DAT_08005fe0": {
                    "1": "constant_2"
                },
                "(undefined4 *)&DAT_08005fa0": {
                    "1": "constant_3"
                },
                "param_2 + 3": {
                    "1": "input_buffer_flags"
                },
                "&DAT_08005fb0": {
                    "1": "constant_4"
                },
                "&DAT_0800412c": {
                    "1": "constant_5"
                },
                "uVar2 = -1;": {
                    "1": "set_result_to_minus_1"
                },
                "&DAT_08004357": {
                    "1": "constant_6"
                },
                "param_2[0xd]": {
                    "1": "pointer_to_data"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "current_flags_value"
                },
                "&DAT_08005fdf": {
                    "1": "constant_7"
                },
                "*(ushort *)(param_2 + 3) & 0xffdb": {
                    "1": "reset_flag_bit"
                },
                "&DAT_08005fe7": {
                    "1": "constant_8"
                },
                "param_2[1]": {
                    "1": "some_value"
                },
                "*param_2": {
                    "1": "data_ptr[0]"
                },
                "*(ushort *)(param_2 + 3) & 0x280": {
                    "1": "check_flag_bit"
                },
                "uVar2 = (int)(short)uVar3 & 0x80;": {
                    "1": "check_flag_bit2"
                },
                "iVar_1": {
                    "1": "data_ptr"
                },
                "uVar_2": {
                    "1": "result"
                },
                "uVar_3": {
                    "1": "value"
                },
                "*(__sinit(DAT_200000a0))": {
                    "1": "initialize(dat_200000a0)"
                },
                "*(undefined4 **)(iVar1 + 4)": {
                    "1": "data_ptr[1]"
                },
                "*(undefined4 **)(iVar1 + 8)": {
                    "1": "data_ptr[2]"
                },
                "*(undefined4 **)(iVar1 + 0xc)": {
                    "1": "data_ptr[3]"
                },
                "*((undefined4 *)param_2[0xd])": {
                    "1": "param_2[13]"
                },
                "*param_1": {
                    "1": "output_value"
                },
                "__BIT_MASK_1C": {
                    "1": "bit_mask_1_c"
                },
                "__BIT_MASK_1B": {
                    "1": "bit_mask_1_b"
                },
                "__BIT_MASK_1D": {
                    "1": "bit_mask_1_d"
                },
                "output_buffer": {
                    "1": "output"
                },
                "input_buffer": {
                    "1": "input"
                },
                "data_ptr": {
                    "1": "data"
                },
                "constant_1": {
                    "1": "constant_value_1"
                },
                "constant_2": {
                    "1": "constant_value_2"
                },
                "constant_3": {
                    "1": "constant_value_3"
                },
                "bit_mask_1C": {
                    "1": "mask_1_c"
                },
                "bit_mask_1B": {
                    "1": "mask_1_b"
                },
                "bit_mask_1D": {
                    "1": "mask_1_d"
                }
            }
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_binary_080051ac",
            "code": "\nvoid process_binary_080051ac(void)\n\n{\n  uint *pointer_to_uint;\n  int integer_variable;\n  int *pointer_array;\n  int *pointer_to_var4;\n  uint ushort_value;\n  ushort flags;\n  int temp_var;\n  code *function_pointer;\n  int loop_counter;\n  uint temp_value;\n  code *jump_table;\n  bool is_zero;\n  undefined8 result;\n  \n  raise(6);\n  jump_table = (code *)0x80051bb;\n  result = _exit(1);\n  pointer_array = (int *)((ulonglong)result >> 0x20);\n  pointer_to_uint = (uint *)result;\n  flags = *(ushort *)(pointer_array + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    integer_variable = pointer_array[4];\n    if (integer_variable != 0) {\n      temp_var = ushort_value << 0x1e;\n      is_zero = temp_var == 0;\n      loop_counter = *pointer_array;\n      if (is_zero) {\n        temp_var = pointer_array[5];\n      }\n      *pointer_array = integer_variable;\n      if (!is_zero) {\n        temp_var = 0;\n      }\n      pointer_array[2] = temp_var;\n      for (loop_counter = loop_counter - integer_variable; 0 < loop_counter; loop_counter = loop_counter - temp_var) {\n        temp_var = (*(code *)pointer_array[10])(pointer_to_uint,pointer_array[8],integer_variable,loop_counter);\n        if (temp_var < 1) {\n          flags = *(ushort *)(pointer_array + 3);\n          goto LAB_080052b2;\n        }\n        integer_variable = integer_variable + temp_var;\n      }\n    }\n  }\n  else if (((0 < pointer_array[1]) || (0 < pointer_array[0x10])) &&\n          (function_pointer = (code *)pointer_array[0xb], function_pointer != (code *)0x0)) {\n    temp_value = *pointer_to_uint;\n    *pointer_to_uint = 0;\n    if ((flags & 0x1000) == 0) {\n      integer_variable = (*function_pointer)(pointer_to_uint,pointer_array[8],ushort_value & 0x1000,1);\n      if ((integer_variable == -1) && (ushort_value = *pointer_to_uint, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(pointer_array + 3) = *(ushort *)(pointer_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table)();\n          return;\n        }\n        *pointer_to_uint = temp_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      integer_variable = pointer_array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer_array + 3) << 0x1d) < 0) &&\n       (integer_variable = integer_variable - pointer_array[1], pointer_array[0xd] != 0)) {\n      integer_variable = integer_variable - pointer_array[0x10];\n    }\n    integer_variable = (*(code *)pointer_array[0xb])(pointer_to_uint,pointer_array[8],integer_variable,0);\n    flags = *(ushort *)(pointer_array + 3);\n    if ((integer_variable == -1) &&\n       ((0x1d < *pointer_to_uint || (-1 < (int)((0x20400001U >> (*pointer_to_uint & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(pointer_array + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    pointer_array[1] = 0;\n    *pointer_array = pointer_array[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((integer_variable != -1 || (*pointer_to_uint == 0)))) {\n      pointer_array[0x15] = integer_variable;\n    }\n    pointer_to_var4 = (int *)pointer_array[0xd];\n    *pointer_to_uint = temp_value;\n    if (pointer_to_var4 != (int *)0x0) {\n      if (pointer_to_var4 != pointer_array + 0x11) {\n        _free_r(pointer_to_uint);\n      }\n      pointer_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "piVar3": "pointer_array",
                "puVar1": "pointer_to_uint",
                "uVar5": "ushort_value",
                "uVar6": "flags",
                "iVar2": "integer_variable",
                "piVar4": "pointer_to_var4",
                "iVar7": "temp_var",
                "iVar9": "loop_counter",
                "pcVar8": "function_pointer",
                "uVar10": "temp_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "is_zero",
                "uVar12": "result",
                "FUN_080051ac": "process_binary_080051ac"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080040f8",
                "FUN_080048dc",
                "FUN_080055d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "piVar3": {
                    "1": "pointer_to_data_array",
                    "2": "pointer_to_var3",
                    "4": "pointer_array"
                },
                "puVar1": {
                    "1": "return_array",
                    "4": "pointer",
                    "2": "pointer_to_var1",
                    "5": "pointer_to_uint"
                },
                "uVar5": {
                    "1": "ushort_var",
                    "5": "ushort_value",
                    "2": "ushort_to_uint"
                },
                "uVar6": {
                    "1": "var_5",
                    "3": "ushort_variable",
                    "2": "ushort_var",
                    "4": "flags"
                },
                "iVar2": {
                    "2": "counter",
                    "1": "variable2",
                    "4": "integer_variable"
                },
                "piVar4": {
                    "1": "additional_pointer_array",
                    "2": "pointer_to_var4"
                },
                "iVar7": {
                    "1": "offset",
                    "2": "var7",
                    "3": "temp_var"
                },
                "iVar9": {
                    "2": "yet_another_integer_variable",
                    "1": "var_3",
                    "4": "loop_counter"
                },
                "pcVar8": {
                    "1": "function_ptr_var",
                    "8": "function_pointer",
                    "2": "pointer_to_var8",
                    "3": "pointer_to_code"
                },
                "uVar10": {
                    "1": "unsigned_var3",
                    "2": "temp_value"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "1": "jump_table_pointer",
                    "10": "jump_table",
                    "4": "unrecovered_jump_table"
                },
                "bVar11": {
                    "1": "boolean",
                    "2": "bool_var11",
                    "3": "bool_var",
                    "8": "is_zero",
                    "6": "boolean_variable"
                },
                "uVar12": {
                    "2": "undefined8_value",
                    "3": "exit_value",
                    "1": "unsigned_var12",
                    "5": "result"
                },
                "FUN_080040f8": {
                    "1": "initialize_resources",
                    "3": "initialize"
                },
                "FUN_080048dc": {
                    "2": "allocate_memory",
                    "3": "process_data"
                },
                "FUN_080055d0": {
                    "1": "check_flag",
                    "2": "check_condition"
                },
                "FUN_080051ac": {
                    "1": "process_function",
                    "2": "process_binary"
                },
                "param_1": {
                    "1": "status"
                },
                "param_2": {
                    "1": "size"
                },
                "param_3": {
                    "1": "flag1"
                },
                "param_4": {
                    "1": "flag2"
                }
            }
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 process_data_080052cc(uint *input_array,int *param_array)\n\n{\n  undefined4 result;\n  int temp_var;\n  int *pointer_var;\n  uint ushort_var;\n  ushort ushort_value;\n  int temp_var;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  function_pointer *function_pointer;\n  int var8;\n  uint var9;\n  function_pointer *jump_table;\n  bool bool_var;\n  \n  if (value1 != 0) {\n    if ((input_array != (uint *)0x0) && (check_constant == 0)) {\n      __sinit();\n    }\n    if (param_array == &DAT_08005fc0) {\n      param_array = (int *)input_array[1];\n    }\n    else if (param_array == (int *)&DAT_08005fe0) {\n      param_array = (int *)input_array[2];\n    }\n    else if (param_array == (int *)&DAT_08005fa0) {\n      param_array = (int *)input_array[3];\n    }\n    if (*(short *)(param_array + 3) != 0) {\n      ushort_value = *(ushort *)(param_array + 3);\n      ushort_var = temp11;\n      if ((int)(ushort_var << 0x1c) < 0) {\n        temp_var = value1;\n        if (temp_var != 0) {\n          temp_var = ushort_var << 0x1e;\n          bool_var = temp_var == 0;\n          var8 = *param_array;\n          if (bool_var) {\n            temp_var = param_array[5];\n          }\n          *param_array = temp_var;\n          if (!bool_var) {\n            temp_var = 0;\n          }\n          param_array[2] = temp_var;\n          for (var8 = var8 - temp_var; 0 < var8; var8 = var8 - temp_var) {\n            temp_var = (*(function_pointer *)param_array[10])(input_array,param_array[8],temp_var,var8,unaff_r4,unaff_r5);\n            if (temp_var < 1) {\n              ushort_value = *(ushort *)(param_array + 3);\n              goto LAB_080052b2;\n            }\n            temp_var = temp_var + temp_var;\n          }\n        }\n      }\n      else if (((0 < value2) || (0 < value3)) &&\n              (function_pointer = (function_pointer *)param_array[0xb], function_pointer != (function_pointer *)0x0)) {\n        var9 = *input_array;\n        *input_array = 0;\n        if ((ushort_value & 0x1000) == 0) {\n          temp_var = (*function_pointer)(input_array,param_array[8],ushort_var & 0x1000,1);\n          if ((temp_var == -1) && (ushort_var = *input_array, ushort_var != 0)) {\n            if ((ushort_var != 0x1d) && (ushort_var != 0x16)) {\n              *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *input_array = var9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          temp_var = value4;\n        }\n        if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n           (temp_var = temp_var - value2, recovery_function2 != 0)) {\n          temp_var = temp_var - value3;\n        }\n        temp_var = (*(function_pointer *)param_array[0xb])(input_array,param_array[8],temp_var,0);\n        ushort_value = *(ushort *)(param_array + 3);\n        if ((temp_var == -1) &&\n           ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_array + 3) = ushort_value | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        value2 = 0;\n        *param_array = value1;\n        if (((int)(temp11 << 0x13) < 0) && ((temp_var != -1 || (*input_array == 0)))) {\n          value4 = temp_var;\n        }\n        pointer_var = (int *)recovery_function2;\n        *input_array = var9;\n        if (pointer_var != (int *)0x0) {\n          if (pointer_var != param_array + 0x11) {\n            _free_r(input_array);\n          }\n          recovery_function2 = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "param_1": "input_array",
                "param_2": "param_array",
                "uVar1": "result",
                "iVar2": "temp_var",
                "piVar3": "pointer_var",
                "uVar4": "ushort_var",
                "uVar5": "ushort_value",
                "iVar6": "temp_var",
                "pcVar7": "function_pointer",
                "iVar8": "var8",
                "uVar9": "var9",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "bool_var",
                "FUN_080052cc": "process_data_080052cc",
                "code": "function_pointer",
                "param_2[4]": "value1",
                "param_1[6]": "check_constant",
                "param_2[1]": "value2",
                "param_2[0x10]": "value3",
                "param_2[0xd]": "recovery_function2",
                "param_2[0x15]": "value4",
                "(uint)uVar5": "temp11"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "param_1": {
                    "1": "input_param",
                    "2": "data_ptr",
                    "5": "param_array",
                    "8": "input_array",
                    "3": "uint_array"
                },
                "param_2": {
                    "1": "info_array",
                    "2": "output_array",
                    "4": "param_array",
                    "3": "int_array"
                },
                "uVar1": {
                    "16": "result",
                    "13": "return_value",
                    "1": "function_result"
                },
                "iVar2": {
                    "1": "iteration_count",
                    "2": "var2",
                    "4": "var1",
                    "3": "index"
                },
                "piVar3": {
                    "1": "pointer3",
                    "4": "pointer_var",
                    "3": "temp_ptr"
                },
                "uVar4": {
                    "1": "temp4",
                    "3": "ushort_value",
                    "2": "u_var4",
                    "5": "ushort_var"
                },
                "uVar5": {
                    "3": "flag",
                    "2": "var5",
                    "1": "value",
                    "4": "ushort_value"
                },
                "iVar6": {
                    "1": "inner_loop_var",
                    "3": "var6",
                    "2": "loop_counter",
                    "4": "temp_var"
                },
                "unaff_r4": {
                    "1": "var_unaff1",
                    "7": "unaff_r4",
                    "2": "unaffected_register4",
                    "3": "register4"
                },
                "unaff_r5": {
                    "2": "unused_var2",
                    "1": "register2",
                    "3": "register5",
                    "7": "unaff_r5"
                },
                "pcVar7": {
                    "2": "callback",
                    "13": "function_pointer",
                    "1": "function",
                    "7": "function_ptr"
                },
                "iVar8": {
                    "1": "temp3",
                    "2": "temp_var",
                    "3": "var8"
                },
                "uVar9": {
                    "2": "temp_var2",
                    "1": "value6",
                    "3": "var9"
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "17": "jump_table",
                    "1": "function_jumptable",
                    "2": "jumptable"
                },
                "bVar10": {
                    "1": "bool_temp",
                    "6": "bool_var",
                    "2": "is_zero"
                },
                "uVar10": {
                    "1": "bool_variable",
                    "2": "boolean_var"
                },
                "unaf_r4": {
                    "1": "register_var4"
                },
                "unaf_r5": {
                    "1": "register_var5"
                },
                "FUN_080052cc": {
                    "1": "decode_and_process_data",
                    "5": "process_data",
                    "4": "process_function"
                },
                "iVar11": {
                    "1": "temp_var2"
                },
                "code": {
                    "1": "function_pointer"
                },
                "param_2[4]": {
                    "1": "value1"
                },
                "param_1[6]": {
                    "1": "check_constant"
                },
                "&DAT_08005fc0": {
                    "1": "data_ptr1"
                },
                "&DAT_08005fe0": {
                    "1": "data_ptr2"
                },
                "&DAT_08005fa0": {
                    "1": "data_ptr3"
                },
                "*(short *)(param_2 + 3)": {
                    "1": "flag_value"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "flag"
                },
                "*(code *)param_2[10]": {
                    "1": "callback_function"
                },
                "((int)((uint)*(ushort *)(param_2 + 3) << 0x1d)": {
                    "1": "temp7"
                },
                "param_2[1]": {
                    "1": "value2"
                },
                "param_2[0x10]": {
                    "1": "value3"
                },
                "(code *)param_2[0xb]": {
                    "1": "recovery_function1"
                },
                "iVar2 - param_2[1]": {
                    "1": "temp8"
                },
                "param_2[0xd]": {
                    "1": "recovery_function2"
                },
                "(*UNRECOVERED_JUMPTABLE_00)": {
                    "1": "recovery_function3"
                },
                "0xffffffff": {
                    "1": "temp9"
                },
                "param_2[0x15]": {
                    "1": "value4"
                },
                "(int)((uint)uVar5 << 0x13)": {
                    "1": "temp10"
                },
                "(code *)param_2[0xb])": {
                    "1": "recovery_function4"
                },
                "(uVar5 & 0x1000)": {
                    "1": "check_flag"
                },
                "(uint)uVar5": {
                    "1": "temp11"
                },
                "(uVar4 & 0x1000)": {
                    "1": "temp12"
                },
                "bVar11": {
                    "1": "condition_result"
                }
            }
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_params_0800532c",
            "code": "\nvoid initialize_params_0800532c(undefined4 *params,undefined2 value1,undefined2 value2)\n\n{\n  *params = 0;\n  params[1] = 0;\n  params[2] = 0;\n  *(undefined2 *)(params + 3) = value1;\n  params[25] = 0;\n  *(undefined2 *)((int)params + 0xe) = value2;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  initialize_memory(params + 0x17,0,8);\n  params[9] = 0x8005609;\n  params[10] = 0x800562b;\n  params[11] = 0x8005663;\n  params[8] = params;\n  params[12] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_params_0800532c",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_08005686_1": "label1",
                "param_1[1]": "params[1]",
                "param_1[2]": "params[2]",
                "param_1[0x19]": "params[25]",
                "param_1[4]": "params[4]",
                "param_1[5]": "params[5]",
                "param_1[6]": "params[6]",
                "param_1[9]": "params[9]",
                "param_1[10]": "params[10]",
                "param_1[0xb]": "params[11]",
                "param_1[8]": "params[8]",
                "param_1[0xc]": "params[12]",
                "memset": "initialize_memory"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800532c": {
                    "7": "initialize_params",
                    "1": "initialize_function",
                    "6": "initialize_data",
                    "5": "initialize_parameters",
                    "3": "initialize_data_struct"
                },
                "param_1": {
                    "5": "data",
                    "1": "data_struct_ptr",
                    "6": "params",
                    "2": "output_buffer",
                    "4": "data_structure",
                    "3": "parameters"
                },
                "param_2": {
                    "3": "param2",
                    "1": "param_2",
                    "2": "value_1",
                    "23": "value1"
                },
                "param_3": {
                    "1": "param_3",
                    "3": "param3",
                    "2": "value_2",
                    "23": "value2"
                },
                "LAB_08005686_1": {
                    "1": "label_1",
                    "4": "some_label"
                },
                "param_1[1]": {
                    "1": "params[1]"
                },
                "param_1[2]": {
                    "1": "params[2]"
                },
                "param_1[0x19]": {
                    "1": "params[25]"
                },
                "param_1[4]": {
                    "1": "data_structure[4]"
                },
                "param_1[5]": {
                    "1": "data_structure[5]"
                },
                "param_1[6]": {
                    "1": "params[6]"
                },
                "param_1[9]": {
                    "1": "params[9]"
                },
                "param_1[10]": {
                    "1": "data_structure[10]"
                },
                "param_1[0xb]": {
                    "1": "data_structure[0xb]"
                },
                "param_1[8]": {
                    "1": "params[8]"
                },
                "param_1[0xc]": {
                    "1": "data_structure[0xc]"
                },
                "FUN_080048cc": {
                    "1": "set_value_in_array"
                },
                "memset": {
                    "1": "initialize_memory"
                }
            }
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_memory_08005374",
            "code": "\nundefined4 * allocate_memory_08005374(undefined4 size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08005374(size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_memory_08005374",
                "param_1": "size",
                "param_2": "num_elements",
                "iVar2": "total_size",
                "puVar1": "allocated_memory",
                "_malloc_r": "allocate_memory",
                "memset": "initialize_memory"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005374": {
                    "1": "allocate_memory_for_structure",
                    "8": "allocate_and_initialize_array",
                    "2": "allocate_and_initialize",
                    "3": "allocate_memory_and_initialize",
                    "10": "allocate_memory"
                },
                "param_1": {
                    "1": "size_of_allocation",
                    "3": "size_of_element",
                    "12": "size"
                },
                "param_2": {
                    "4": "array_length",
                    "1": "size_of_structure",
                    "7": "count",
                    "10": "num_elements"
                },
                "iVar2": {
                    "1": "memory_block_size",
                    "2": "total_array_size",
                    "14": "total_size",
                    "3": "memory_size",
                    "6": "array_size"
                },
                "puVar1": {
                    "2": "allocated_array",
                    "1": "buffer",
                    "9": "allocated_memory",
                    "6": "ptr",
                    "7": "array_ptr"
                },
                "_malloc_r": {
                    "1": "custom_malloc_function"
                },
                "memset": {
                    "1": "initialize_array_elements",
                    "4": "initialize_memory"
                },
                "FUN_080048cc": {
                    "1": "set_array_element",
                    "4": "initialize_element",
                    "3": "initialize_memory"
                },
                "param_3": {
                    "1": "size_of_structure",
                    "2": "size_of_memory",
                    "3": "size"
                },
                "FUN_08004978": {
                    "2": "memset_memory",
                    "1": "iterate_array"
                }
            }
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initialize_data_080053a0(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data_pointer[6] == 0) {\n    data_array[18] = 0;\n    data_array[19] = 0;\n    data_array[20] = 0;\n    pointer = &DAT_200000a4;\n    data_array[10] = function_pointer;\n    if (parameters == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000a4) {\n      data_pointer[6] = pointer;\n    }\n    result = calculate_sfp;\n    data_array[1] = result;\n    result = get_float_value(parameters);\n    data_array[2] = result;\n    result = get_float_value(parameters);\n    data_array[3] = result;\n    standardize_data(data_array[1],4,0);\n    standardize_data(data_array[2],9,1);\n    standardize_data(data_array[3],0x12,2);\n    data_pointer[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "parameters",
                "uVar1": "result",
                "puVar2": "pointer",
                "__sfp": "get_float_value",
                "std_isra_0": "standardize_data",
                "__sfp()": "calculate_sfp",
                "param_1[6]": "data_pointer[6]",
                "param_1[0x12]": "data_array[18]",
                "param_1[0x13]": "data_array[19]",
                "param_1[0x14]": "data_array[20]",
                "param_1[10]": "data_array[10]",
                "param_1[1]": "data_array[1]",
                "param_1[2]": "data_array[2]",
                "param_1[3]": "data_array[3]",
                "LAB_08005320_1": "default_function",
                "&LAB_08005320_1": "function_pointer"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080053a0": {
                    "2": "initialize_params",
                    "1": "initialize_values",
                    "11": "initialize_parameters",
                    "16": "initialize_data"
                },
                "param_1": {
                    "9": "data",
                    "2": "data_pointer",
                    "1": "subroutine_data",
                    "3": "params",
                    "10": "parameters"
                },
                "uVar1": {
                    "6": "return_value",
                    "1": "float_result",
                    "2": "temp_var",
                    "21": "result"
                },
                "puVar2": {
                    "1": "data_pointer",
                    "4": "temp_ptr",
                    "10": "pointer",
                    "2": "pointer_variable",
                    "8": "temp_pointer"
                },
                "FUN_08005400": {
                    "1": "update_data",
                    "2": "process_param",
                    "8": "process_data"
                },
                "FUN_0800532c": {
                    "2": "set_parameters",
                    "1": "update_subroutine",
                    "6": "set_values",
                    "3": "update_data"
                },
                "param_2": {
                    "2": "param_a",
                    "1": "parameter2",
                    "3": "param1",
                    "6": "value1"
                },
                "param_3": {
                    "3": "param2",
                    "2": "param_b",
                    "1": "val2",
                    "6": "value2"
                },
                "param_4": {
                    "5": "param4",
                    "1": "param_c",
                    "2": "param3",
                    "6": "value3"
                },
                "__sfp": {
                    "3": "calculate_value",
                    "1": "calculate_sfp",
                    "2": "get_float_pointer",
                    "5": "get_float_value"
                },
                "std_isra_0": {
                    "1": "perform_operation",
                    "3": "standardize"
                },
                "__sfp()": {
                    "1": "calculate_sfp"
                },
                "std_isra_0()": {
                    "1": "set_standard"
                },
                "param_1[6]": {
                    "1": "data_ptr[6]"
                },
                "param_1[0x12]": {
                    "1": "data_ptr[18]"
                },
                "param_1[0x13]": {
                    "1": "data_ptr[19]"
                },
                "param_1[0x14]": {
                    "1": "data_array[20]"
                },
                "param_1[10]": {
                    "1": "data_ptr[10]"
                },
                "param_1[1]": {
                    "1": "data_ptr[1]"
                },
                "param_1[2]": {
                    "1": "data_array[2]"
                },
                "param_1[3]": {
                    "1": "data_array[3]"
                },
                "DAT_200000a4": {
                    "1": "default_value"
                },
                "LAB_08005320_1": {
                    "1": "constant_label"
                },
                "&LAB_08005320_1": {
                    "1": "function_pointer"
                }
            }
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structure_08005400",
            "code": "\nint * initialize_data_structure_08005400(uint *error_code,uint param_2,uint param_3,uint param_4)\n\n{\n  int *current_pointer;\n  int *current_element;\n  int **array_list;\n  \n  if (DAT_200000bc == 0) {\n    initialize_static_data(&DAT_200000a4);\n  }\n  array_list = (int **)&DAT_200000ec;\n  do {\n    current_element = array_list[2];\n    current_pointer = array_list[1];\n    while (current_pointer = (int *)((int)current_pointer + -1), -1 < (int)current_pointer) {\n      if (*(short *)(current_element + 3) == 0) {\n        *(ushort *)((int)current_element + 0xe) = 0xffff;\n        *(ushort *)(current_element + 3) = 1;\n        value_1 = 0;\n        *current_element = 0;\n        value_3 = 0;\n        value_4 = 0;\n        value_5 = 0;\n        value_6 = 0;\n        value_7 = 0;\n        set_memory(current_element + 0x17,0,8,1,param_4);\n        value_8 = 0;\n        value_9 = 0;\n        value_10 = 0;\n        value_11 = 0;\n        return current_element;\n      }\n      current_element = current_element + 0x1a;\n    }\n    if (*array_list == (int *)0x0) {\n      current_pointer = (int *)allocate_memory;\n      *array_list = current_pointer;\n      if (current_pointer == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    array_list = (int **)*array_list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structure_08005400",
                "param_1": "error_code",
                "piVar1": "current_pointer",
                "piVar2": "current_element",
                "ppiVar3": "array_list",
                "__sinit": "initialize_static_data",
                "__sfmoreglue": "allocate_memory",
                "memset": "set_memory",
                "piVar2[0x19]": "value_1",
                "piVar2[2]": "value_3",
                "piVar2[1]": "value_4",
                "piVar2[4]": "value_5",
                "piVar2[5]": "value_6",
                "piVar2[6]": "value_7",
                "piVar2[0xd]": "value_8",
                "piVar2[0xe]": "value_9",
                "piVar2[0x12]": "value_10",
                "piVar2[0x13]": "value_11",
                "__sfmoreglue(param_1,4)": "allocate_memory",
                "undefined2": "ushort",
                "undefined4": "uint"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08005374",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005400": {
                    "1": "initialize_objects",
                    "2": "initialize_array",
                    "8": "initialize_data_structure",
                    "4": "initialize_data_structures",
                    "7": "initialize_data"
                },
                "param_1": {
                    "2": "status",
                    "1": "ptr_error_code",
                    "3": "result",
                    "7": "error_code"
                },
                "param_2": {
                    "5": "arg2",
                    "1": "input_2",
                    "2": "input1",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "arg2",
                    "2": "input2",
                    "5": "arg3",
                    "9": "param_3"
                },
                "param_4": {
                    "1": "arg3",
                    "5": "arg4",
                    "10": "param_4",
                    "2": "input3"
                },
                "piVar1": {
                    "1": "temp_pointer",
                    "2": "inner_pointer1",
                    "4": "current_ptr",
                    "5": "current_pointer",
                    "3": "current_array"
                },
                "piVar2": {
                    "4": "current_element",
                    "1": "nested_array_element_ptr",
                    "2": "inner_pointer2"
                },
                "ppiVar3": {
                    "1": "data_structure_pointer",
                    "2": "nested_array"
                },
                "__sinit": {
                    "1": "initialize_subsystem",
                    "4": "initialize_static_data",
                    "2": "initialize_global_data"
                },
                "__sfmoreglue": {
                    "1": "alloc_memory",
                    "5": "allocate_memory"
                },
                "memset": {
                    "1": "initialize_memory_block",
                    "3": "set_memory",
                    "2": "clear_memory"
                },
                "*ppiVar3": {
                    "1": "current_data_structure"
                },
                "*param_1": {
                    "1": "error_code_ptr"
                },
                "*piVar2": {
                    "1": "inner_data_ptr"
                },
                "DAT_200000bc": {
                    "2": "data_flag",
                    "1": "initialized_check",
                    "3": "initialized_flag"
                },
                "DAT_200000a4": {
                    "1": "global_init_data",
                    "2": "initialized_data",
                    "3": "static_data"
                },
                "DAT_200000ec": {
                    "1": "pointer_array",
                    "2": "array_list_head"
                },
                "FUN_080048cc": {
                    "1": "initialization_function"
                },
                "FUN_08005374": {
                    "1": "process_sub_function_b",
                    "3": "allocate_memory"
                },
                "FUN_080053a0": {
                    "2": "free_memory",
                    "1": "clean_up_memory"
                },
                "&DAT_200000a4": {
                    "1": "initial_data"
                },
                "&DAT_200000ec": {
                    "1": "data_structure"
                },
                "*(short *)(piVar2 + 3)": {
                    "1": "item_status"
                },
                "*(undefined2 *)((int)piVar2 + 0xe)": {
                    "1": "status_code"
                },
                "*(undefined2 *)(piVar2 + 3)": {
                    "1": "item_flag"
                },
                "piVar2[0x19]": {
                    "1": "value_1"
                },
                "piVar2[2]": {
                    "1": "value_3"
                },
                "piVar2[1]": {
                    "1": "value_4"
                },
                "piVar2[4]": {
                    "1": "value_5"
                },
                "piVar2[5]": {
                    "1": "value_6"
                },
                "piVar2[6]": {
                    "1": "value_7"
                },
                "piVar2 + 0x17": {
                    "1": "values_block"
                },
                "piVar2[0xd]": {
                    "1": "value_8"
                },
                "piVar2[0xe]": {
                    "1": "value_9"
                },
                "piVar2[0x12]": {
                    "1": "value_10"
                },
                "piVar2[0x13]": {
                    "1": "value_11"
                },
                "__sfmoreglue(param_1,4)": {
                    "1": "allocate_memory"
                },
                "PTR_DAT_200000bc": {
                    "1": "static_data_flag"
                },
                "PTR_DAT_200000ec": {
                    "1": "data_ptr_array"
                },
                "undefined2": {
                    "1": "ushort"
                },
                "undefined4": {
                    "1": "uint"
                },
                "int": {
                    "1": "int"
                },
                "undefined": {
                    "1": "undefined"
                },
                "short": {
                    "1": "short"
                },
                "0xffff": {
                    "1": "max_value"
                },
                "0x0": {
                    "1": "null"
                },
                "0xc": {
                    "1": "error_code"
                }
            }
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_file_permissions_080054b4",
            "code": "\nundefined4 check_file_permissions_080054b4(undefined4 file_descriptor,int file_info,undefined4 *permission_flag,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission;\n  undefined stack_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stack_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_080054f4:\n  *permission_flag = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_file_permissions_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "permission_flag",
                "param_4": "is_executable",
                "iVar1": "status",
                "auStack_4c": "stack_buffer",
                "local_48": "file_mode",
                "uVar2": "permission"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054b4": {
                    "1": "get_file_type",
                    "3": "get_file_permission",
                    "22": "check_file_permissions"
                },
                "param_1": {
                    "2": "fd",
                    "1": "param_a",
                    "28": "file_descriptor"
                },
                "param_2": {
                    "19": "file_info",
                    "1": "stat_buffer",
                    "5": "file_stat"
                },
                "param_3": {
                    "5": "permission_flags",
                    "1": "file_permissions",
                    "2": "access_mode",
                    "8": "permission_flag",
                    "3": "result"
                },
                "param_4": {
                    "1": "file_type",
                    "21": "is_executable",
                    "2": "result"
                },
                "iVar1": {
                    "2": "fstat_result",
                    "1": "stat_result",
                    "13": "status",
                    "9": "result"
                },
                "auStack_4c": {
                    "2": "auxiliary_stack",
                    "1": "temporary_buffer",
                    "6": "stack_buffer",
                    "3": "stack_variable",
                    "5": "stat_buffer"
                },
                "local_48": {
                    "24": "file_mode",
                    "4": "file_permissions",
                    "1": "file_type"
                },
                "uVar2": {
                    "1": "new_permission_flag",
                    "2": "return_value",
                    "3": "result",
                    "6": "permission"
                }
            }
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "parse_data_080054fc",
            "code": "\nvoid parse_data_080054fc(int buffer_size,int *data)\n\n{\n  ushort result;\n  int allocated_memory;\n  int length;\n  int *temp_buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    length = buffer_size;\n    temp_buffer = data;\n    result = extract_data(buffer_size,data,&length,&temp_buffer);\n    allocated_memory = allocate_memory(buffer_size,length);\n    if (allocated_memory != 0) {\n      *(undefined **)(buffer_size + 0x28) = function_pointer;\n      *data = allocated_memory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      input_length = length;\n      allocated_data = allocated_memory;\n      if ((temp_buffer != (int *)0x0) &&\n         (allocated_memory = check_if_terminal(buffer_size,(int)*(short *)((int)data + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  allocated_data = (int)data + 0x47;\n  input_length = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "parse_data_080054fc",
                "param_1": "buffer_size",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "allocated_memory",
                "local_18": "length",
                "local_14": "temp_buffer",
                "_malloc_r": "allocate_memory",
                "_isatty_r": "check_if_terminal",
                "__swhatbuf_r": "extract_data",
                "LAB_08005320_1": "whatever_label",
                "param_2[4]": "allocated_data",
                "param_2[5]": "input_length",
                "&LAB_08005320_1": "function_pointer"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080054fc": {
                    "2": "decode_and_allocate_memory",
                    "1": "parse_and_allocate_buffer",
                    "7": "process_data",
                    "3": "parse_input",
                    "8": "parse_data"
                },
                "param_1": {
                    "1": "param_addr",
                    "3": "data_size",
                    "5": "buffer_size",
                    "2": "input",
                    "4": "context"
                },
                "param_2": {
                    "8": "data",
                    "1": "output_buffer",
                    "2": "params"
                },
                "uVar1": {
                    "1": "updated_value",
                    "2": "flags",
                    "5": "status",
                    "14": "result"
                },
                "iVar2": {
                    "1": "buffer",
                    "6": "malloc_result",
                    "15": "allocated_memory",
                    "2": "allocated_buffer"
                },
                "local_18": {
                    "3": "param_value",
                    "1": "temp_buffer_size",
                    "2": "local_size",
                    "4": "size",
                    "5": "length"
                },
                "local_14": {
                    "2": "optional_data",
                    "1": "decoded_data",
                    "4": "temp_buffer",
                    "3": "local_ptr"
                },
                "_malloc_r": {
                    "4": "allocate_memory"
                },
                "_isatty_r": {
                    "2": "check_if_terminal",
                    "1": "check_if_tty"
                },
                "__swhatbuf_r": {
                    "1": "extract_data"
                },
                "LAB_08005320_1": {
                    "1": "whatever_label"
                },
                "*param_2": {
                    "1": "data_pointer"
                },
                "*(ushort *)(param_2 + 3)": {
                    "1": "status"
                },
                "param_2[4]": {
                    "1": "param2_index4"
                },
                "param_2[5]": {
                    "1": "param2_index5"
                },
                "(int)param_2 + 0x47": {
                    "1": "default_data_pointer"
                },
                "(int)*(short *)((int)param_2 + 0xe)": {
                    "1": "short_value"
                },
                "&LAB_08005320_1": {
                    "1": "placeholder"
                },
                "*(short *)((int)param_2 + 0xe)": {
                    "1": "param2_short_value"
                },
                "return": {
                    "1": "return"
                },
                "*(undefined **)(param_1 + 0x28)": {
                    "1": "function_pointer"
                },
                "FUN_080056f8": {
                    "1": "read_data"
                },
                "FUN_080054b4": {
                    "1": "process_data"
                },
                "FUN_08004978": {
                    "1": "allocate_memory"
                }
            }
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "kill_process_080055d0",
            "code": "\nint kill_process_080055d0(uint input_value)\n\n{\n  int *signal_array;\n  undefined4 process_id;\n  int result;\n  code *function_pointer;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *pointer_variable;\n  \n  signal_array = DAT_200000a0;\n  pointer_variable = &DAT_200000a0;\n  if (0x1f < input_value) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  result = DAT_200000a0[0x11];\n  if ((result != 0) && (function_pointer = *(code **)(result + input_value * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(result + input_value * 4) = 0;\n      (*function_pointer)(input_value);\n    }\n    return 0;\n  }\n  process_id = get_process_id(DAT_200000a0);\n  DAT_20000674 = 0;\n  result = kill_process_080055d0(process_id,input_value,input_value,0,pointer_variable,unaff_r4,unaff_r5,in_lr);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *signal_array = DAT_20000674;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "kill_process_080055d0",
                "param_1": "input_value",
                "piVar1": "signal_array",
                "uVar2": "process_id",
                "iVar3": "result",
                "pcVar4": "function_pointer",
                "puVar5": "pointer_variable",
                "_getpid_r": "get_process_id",
                "_kill": "kill_process"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040fc",
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080055d0": {
                    "5": "process_signal",
                    "3": "check_and_execute_function",
                    "2": "handle_signal",
                    "1": "pid_kill_wrapper",
                    "6": "kill_process"
                },
                "param_1": {
                    "6": "signal_number",
                    "1": "param",
                    "7": "input_value",
                    "4": "process_id"
                },
                "piVar1": {
                    "1": "pid_address",
                    "3": "array_ptr",
                    "2": "signal_handlers"
                },
                "uVar2": {
                    "1": "pid_result",
                    "15": "process_id",
                    "11": "pid"
                },
                "iVar3": {
                    "2": "value",
                    "1": "handler_ptr",
                    "5": "result"
                },
                "pcVar4": {
                    "1": "callback_func",
                    "10": "function_pointer",
                    "3": "signal_handler",
                    "8": "function_ptr",
                    "2": "handler_function"
                },
                "puVar5": {
                    "1": "array_ptr_copy",
                    "2": "pointer_variable"
                },
                "unaff_r4": {
                    "1": "unaff_return1",
                    "3": "unaff_r4"
                },
                "unaff_r5": {
                    "1": "unused_register_5",
                    "3": "unaff_r5"
                },
                "in_lr": {
                    "3": "return_address",
                    "1": "unused_link_register",
                    "4": "in_lr",
                    "2": "link_register"
                },
                "DAT_200000a0": {
                    "1": "signal_array_pointer"
                },
                "DAT_20000674": {
                    "1": "exit_code",
                    "3": "error_code"
                },
                "_getpid_r": {
                    "3": "get_process_id"
                },
                "_kill": {
                    "1": "terminate_process",
                    "2": "kill_process"
                },
                "FUN_080040fc": {
                    "1": "get_process_id"
                }
            }
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "FUN_08005604",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_data_08005608",
            "code": "\nvoid update_data_08005608(undefined4 file_descriptor,int data_address)\n\n{\n  int read_result;\n  uint updated_value;\n  bool is_read_successful;\n  \n  read_result = _read_r(file_descriptor,(int)*(short *)(data_address + 0xe));\n  is_read_successful = -1 < read_result;\n  if (is_read_successful) {\n    updated_value = *(int *)(data_address + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(data_address + 0xc) & 0xffffefff;\n  }\n  if (is_read_successful) {\n    *(uint *)(data_address + 0x54) = updated_value;\n  }\n  if (!is_read_successful) {\n    *(short *)(data_address + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_data_08005608",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "read_result",
                "uVar2": "updated_value",
                "bVar3": "is_read_successful"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005608": {
                    "8": "process_data",
                    "4": "read_and_update_value",
                    "1": "read_and_update_counter",
                    "16": "update_data"
                },
                "param_1": {
                    "1": "buffer",
                    "3": "data_buffer",
                    "18": "file_descriptor"
                },
                "param_2": {
                    "3": "data_offset",
                    "1": "buffer_data",
                    "5": "data_address",
                    "2": "offset"
                },
                "iVar1": {
                    "1": "read_count",
                    "22": "read_result",
                    "2": "result"
                },
                "uVar2": {
                    "2": "new_data",
                    "26": "updated_value",
                    "1": "new_data_value"
                },
                "bVar3": {
                    "2": "is_positive_read",
                    "1": "success",
                    "7": "is_read_successful",
                    "5": "is_successful",
                    "3": "read_success"
                }
            }
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "write_to_file_0800562a",
            "code": "\nvoid write_to_file_0800562a(int *file_descriptor,int buffer_address,undefined4 data,undefined4 size)\n\n{\n  int write_result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    move_file_pointer(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  write_result = write_to_file_0800562a((int)*(short *)(buffer_address + 0xe),data,size,size,size,unused1,unused2,\n                 unused3);\n  if ((write_result == -1) && (DAT_20000674 != 0)) {\n    *file_descriptor = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "write_to_file_0800562a",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "write_result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "_lseek_r": "move_file_pointer",
                "_write": "write_to_file"
            },
            "calling": [],
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800562a": {
                    "2": "write_data",
                    "15": "write_to_file",
                    "12": "write_data_to_file",
                    "1": "write_if_negative"
                },
                "param_1": {
                    "1": "file_descriptor_ptr",
                    "29": "file_descriptor"
                },
                "param_2": {
                    "1": "info_struct",
                    "3": "buffer",
                    "2": "header_offset",
                    "7": "buffer_address"
                },
                "param_3": {
                    "13": "data",
                    "1": "data_pointer",
                    "4": "data_address",
                    "10": "buffer"
                },
                "param_4": {
                    "1": "num_bytes",
                    "9": "data_size",
                    "3": "buffer_size",
                    "2": "count",
                    "16": "size"
                },
                "iVar1": {
                    "22": "write_result",
                    "2": "result"
                },
                "unaff_r4": {
                    "2": "unused_var1",
                    "1": "unused_variable_1"
                },
                "unaff_r5": {
                    "1": "unused_param2",
                    "2": "unused2"
                },
                "in_lr": {
                    "1": "unused_lr",
                    "2": "unused_var3"
                },
                "_lseek_r": {
                    "1": "file_seek",
                    "3": "move_file_pointer"
                },
                "_write": {
                    "1": "file_write",
                    "5": "write_to_file"
                },
                "DAT_20000674": {
                    "1": "write_error"
                },
                "FUN_08005718": {
                    "1": "move_file_pointer"
                },
                "FUN_080040ec": {
                    "1": "unused_function"
                }
            }
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "seek_and_set_flag_08005662",
            "code": "\nvoid seek_and_set_flag_08005662(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort flag;\n  bool is_error;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  is_error = seek_result == -1;\n  if (is_error) {\n    flag = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(struct_address + 0x54) = seek_result;\n    flag = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(struct_address + 0xc) = flag;\n  }\n  if (!is_error) {\n    *(ushort *)(struct_address + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "seek_and_set_flag_08005662",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005662": {
                    "1": "extract_information",
                    "2": "seek_and_update_flag",
                    "4": "file_seek",
                    "7": "seek_and_set_flag"
                },
                "param_1": {
                    "31": "file_descriptor"
                },
                "param_2": {
                    "2": "buffer",
                    "1": "context",
                    "15": "struct_address",
                    "7": "struct_pointer"
                },
                "iVar1": {
                    "1": "seek_position",
                    "3": "result",
                    "26": "seek_result"
                },
                "uVar2": {
                    "10": "flag",
                    "3": "modified_flags",
                    "1": "status_flags",
                    "8": "flags",
                    "2": "updated_flag"
                },
                "bVar3": {
                    "10": "is_seek_error",
                    "1": "is_seek_failed",
                    "11": "is_error",
                    "8": "seek_failed"
                }
            }
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "get_file_status_080056d4",
            "code": "\nvoid get_file_status_080056d4(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_20000674 = 0;\n  status = get_file_status_080056d4(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "get_file_status_080056d4",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size",
                "iVar1": "status",
                "_fstat": "get_file_status"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080056d4": {
                    "3": "get_file_size",
                    "1": "get_file_stats",
                    "4": "get_file_status",
                    "2": "get_file_stat"
                },
                "param_1": {
                    "3": "output",
                    "1": "result_pointer",
                    "2": "output_value",
                    "12": "result"
                },
                "param_2": {
                    "2": "fd",
                    "29": "file_descriptor"
                },
                "param_3": {
                    "1": "buffer",
                    "2": "buf",
                    "3": "stat_buf",
                    "14": "stat_buffer"
                },
                "param_4": {
                    "1": "buffer",
                    "13": "buffer_size",
                    "4": "stat_buffer_size",
                    "2": "flags"
                },
                "iVar1": {
                    "3": "result",
                    "1": "fstat_result",
                    "5": "stat_result",
                    "10": "status"
                },
                "_fstat": {
                    "3": "get_file_status"
                },
                "DAT_20000674": {
                    "1": "error_flag"
                }
            }
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_set_tty_value_080056f8",
            "code": "\nvoid check_and_set_tty_value_080056f8(int *output_value,undefined4 file_descriptor)\n\n{\n  int is_tty;\n  \n  DAT_20000674 = 0;\n  is_tty = check_if_terminal(file_descriptor);\n  if ((is_tty == -1) && (DAT_20000674 != 0)) {\n    *output_value = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_set_tty_value_080056f8",
                "param_1": "output_value",
                "param_2": "file_descriptor",
                "iVar1": "is_tty",
                "_isatty": "check_if_terminal",
                "isatty": "check_if_terminal"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_080056f8": {
                    "1": "check_and_assign_console",
                    "2": "check_and_assign_tty"
                },
                "param_1": {
                    "2": "output",
                    "1": "result_pointer",
                    "5": "output_pointer",
                    "9": "output_value",
                    "7": "result"
                },
                "param_2": {
                    "2": "input",
                    "1": "fd",
                    "5": "input_value",
                    "21": "file_descriptor"
                },
                "iVar1": {
                    "1": "result",
                    "6": "is_terminal",
                    "12": "is_tty",
                    "2": "isatty_result"
                },
                "DAT_20000674": {
                    "1": "stdin_value",
                    "2": "saved_value"
                },
                "_isatty": {
                    "2": "check_if_terminal",
                    "1": "check_tty"
                },
                "VAR_DAT_20000674": {
                    "1": "saved_value"
                },
                "*param_1": {
                    "1": "terminal_value"
                },
                "isatty": {
                    "1": "check_if_terminal"
                }
            }
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "seek_and_assign_error_08005718",
            "code": "\nvoid seek_and_assign_error_08005718(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_20000674 = 0;\n  seek_result = file_seek(file_descriptor,offset,whence,whence,whence);\n  if ((seek_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "seek_and_assign_error_08005718",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seek_result",
                "_lseek": "file_seek"
            },
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005718": {
                    "1": "reposition_file_cursor",
                    "5": "seek_and_assign_error",
                    "3": "seek_and_assign_value",
                    "2": "seek_and_assign"
                },
                "param_1": {
                    "1": "result_pointer",
                    "2": "file_descriptor",
                    "3": "output",
                    "17": "result"
                },
                "param_2": {
                    "1": "file_descriptor_value",
                    "30": "file_descriptor"
                },
                "param_3": {
                    "2": "seek_offset",
                    "29": "offset"
                },
                "param_4": {
                    "6": "origin",
                    "23": "whence",
                    "2": "seek_mode"
                },
                "iVar1": {
                    "3": "result",
                    "21": "seek_result",
                    "2": "lseek_result"
                },
                "_lseek": {
                    "1": "file_seek"
                },
                "DAT_20000674": {
                    "1": "error_code"
                }
            }
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "read_and_assign_0800573c",
            "code": "\nvoid read_and_assign_0800573c(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_20000674 = 0;\n  read_result = _read(file_descriptor,buffer,count,count,count);\n  if ((read_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "read_and_assign_0800573c",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "read_result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0800573c": {
                    "1": "read_input",
                    "2": "read_and_assign_error_code",
                    "3": "read_and_store_error",
                    "4": "read_and_assign_error",
                    "6": "read_and_assign"
                },
                "param_1": {
                    "2": "error_pointer",
                    "1": "result_ptr",
                    "5": "output",
                    "15": "result"
                },
                "param_2": {
                    "1": "input_fd",
                    "26": "file_descriptor"
                },
                "param_3": {
                    "1": "read_buffer",
                    "28": "buffer"
                },
                "param_4": {
                    "1": "read_buffer_size",
                    "20": "count",
                    "7": "size"
                },
                "iVar1": {
                    "26": "read_result",
                    "1": "return_value",
                    "2": "read_status"
                }
            }
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initialize_data_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = initialize_data_08005760;\n  abort();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_08005760": {
                    "1": "abort_and_initialize",
                    "2": "initialize_variables",
                    "15": "initialize_data"
                },
                "process_binary_080051ac": {
                    "18": "process_binary",
                    "10": "process_binary_data",
                    "1": "execute_specific_processing_function"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "7": "jump_table",
                    "3": "jumptable"
                }
            }
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 677109,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d3c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000682",
            "FUN_08000c4c",
            "FUN_08004648"
        ],
        [
            "FUN_080047c0",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}