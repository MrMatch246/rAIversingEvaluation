{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_params_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_params_080001ac(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_params_080001ac",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_080001f8",
            "code": "\nvoid initialize_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  execute_init_functions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_080001f8",
                "execute_init_functions_08000210": "execute_init_functions"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "execute_init_functions_08000210",
            "code": "\nvoid execute_init_functions_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "execute_init_functions_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "handle_param_08000220",
            "code": "\nvoid handle_param_08000220(char input_param)\n\n{\n  if (input_param != DAT_20000468) {\n    execute_alarm_loop();\n    if (input_param == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input_param;\n    }\n    else if (input_param == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input_param;\n    }\n    else {\n      execute_initialization();\n      DAT_20000468 = input_param;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "handle_param_08000220",
                "param_1": "input_param",
                "process_alarm_loop_08002fd4": "execute_alarm_loop",
                "execute_init_functions_08000210": "execute_initialization"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_value_08000268",
            "code": "\n\n\nint calculateAdjustedValue_08000268(void)\n\n{\n  int dataValue;\n  \n  dataValue = getData();\n  return (dataValue + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "get_data_08005a84": "getData",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "wait_for_data_080002a0",
            "code": "\nvoid waitForData_080002a0(undefined4 inputParameter)\n\n{\n  waitForInputData(inputParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "wait_for_data_080002a0",
                "param_1": "inputParameter",
                "wait_for_data_08005a98": "waitForInputData"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "find_adjusted_value_080002b6",
            "code": "\nvoid findAdjustedValue_080002b6(uint inputValue)\n\n{\n  uint adjustedValue;\n  uint comparisonValue;\n  bool isComparisonTrue;\n  longlong adjustedSum;\n  undefined8 tempValue;\n  \n  adjustedSum = calculate_adjusted_value_08000268();\n  comparisonValue = (uint)(adjustedSum + (ulonglong)inputValue >> 0x20);\n  do {\n    tempValue = calculate_adjusted_value_08000268();\n    adjustedValue = (uint)((ulonglong)tempValue >> 0x20);\n    isComparisonTrue = comparisonValue <= adjustedValue;\n    if (adjustedValue == comparisonValue) {\n      isComparisonTrue = (uint)(adjustedSum + (ulonglong)inputValue) <= (uint)tempValue;\n    }\n  } while (!isComparisonTrue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "find_adjusted_value_080002b6",
                "param_1": "inputValue",
                "uVar1": "adjustedValue",
                "uVar2": "comparisonValue",
                "bVar3": "isComparisonTrue",
                "lVar4": "adjustedSum",
                "uVar5": "tempValue"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_pattern_080002f0",
            "code": "\nvoid initializeMemoryPattern_080002f0(void)\n\n{\n  fill_memory_with_pattern_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_pattern_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_memory_pattern_08000310",
            "code": "\nundefined getMemoryPattern_08000310(uint input)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemoryPattern();\n  }\n  return (&DAT_20000470)[input & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_memory_pattern_08000310",
                "param_1": "input",
                "initialize_memory_pattern_080002f0": "initializeMemoryPattern"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemoryPattern();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_memory_pattern_080002f0": "initializeMemoryPattern"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "store_data_with_checksum_08000374",
            "code": "\nvoid store_data_with_checksum_08000374(int address,char *data,int length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_address;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = length;\n  current_data = data;\n  current_address = address;\n  if (DAT_2000046c == 0) {\n    initialize_memory_pattern_080002f0();\n    current_data = data;\n    current_address = address;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    store_data_08000340(current_address,*current_data);\n    current_data = current_data + 1;\n    current_address = current_address + 1;\n  }\n  store_data_08000340(current_address,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "store_data_with_checksum_08000374",
                "param_1": "address",
                "param_2": "data",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_data",
                "local_14": "current_address",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_memory_pattern_080003ec",
            "code": "\nbool check_memory_pattern_080003ec(char *buffer,int start_index,int length)\n\n{\n  char current_char;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *current_char_ptr;\n  byte char_sum;\n  \n  char_sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_char_ptr = buffer;\n  if (DAT_2000046c == 0) {\n    initialize_memory_pattern();\n    current_index = start_index;\n    current_char_ptr = buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = get_next_memory_pattern(current_index);\n    char_sum = current_char + (char_sum != 0);\n    *current_char_ptr = current_char;\n    current_index = current_index + 1;\n    current_char_ptr = current_char_ptr + 1;\n  }\n  uVar2 = get_next_memory_pattern(current_index);\n  return char_sum == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_memory_pattern_080003ec",
                "param_1": "buffer",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_char_ptr",
                "local_9": "char_sum",
                "cVar1": "current_char",
                "initialize_memory_pattern_080002f0": "initialize_memory_pattern",
                "get_memory_pattern_08000310": "get_next_memory_pattern"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_display_error_message_080004ac",
            "code": "\nvoid initializeAndDisplayErrorMessage_080004ac(void)\n\n{\n  int returnValue;\n  \n  fill_memory_with_pattern_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeData(0,1,2);\n  DAT_20000e74 = 1;\n  returnValue = checkAndStoreData(DAT_20000e8c,&DAT_20000e90);\n  if (returnValue == 0) {\n    displayErrorMessage(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_display_error_message_080004ac",
                "iVar1": "returnValue",
                "initialize_data_08000478": "initializeData",
                "check_and_store_data_08004d7c": "checkAndStoreData",
                "display_error_message_08004030": "displayErrorMessage"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_reverse_results_080004fc",
            "code": "\nvoid calculate_and_reverse_results_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 calculated_result;\n  \n  calculated_result = calculate_result_08008e44(input1);\n  DAT_20000e7c = reverse_float_08009054(calculated_result,DAT_20000ebc);\n  calculated_result = calculate_result_08008e44(input2);\n  DAT_20000e80 = reverse_float_08009054(calculated_result,DAT_20000ec0);\n  calculated_result = calculate_result_08008e44(input3);\n  DAT_20000e84 = reverse_float_08009054(calculated_result,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_reverse_results_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "calculated_result"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_unsigned_int_0800056c",
            "code": "\nundefined4 convertToUnsignedInt_0800056c(undefined4 input)\n\n{\n  undefined8 reversedInput;\n  \n  if (DAT_20000e73 != '\\0') {\n    reversedInput = reverse_bits_08008590(input);\n    reversedInput = calculate_bitwise_difference_08008640((int)reversedInput,(int)((ulonglong)reversedInput >> 0x20),0x66666666,0x40396666);\n    input = float_to_uint_08008c30((int)reversedInput,(int)((ulonglong)reversedInput >> 0x20));\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_unsigned_int_0800056c",
                "param_1": "input",
                "uVar1": "reversedInput"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "FUNC_080005b4",
            "code": "\nchar FUNC_080005b4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  char cVar3;\n  uint uVar4;\n  undefined4 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined local_45;\n  uint local_44;\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  uint local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    cVar3 = '\\f';\n  }\n  else {\n    local_51 = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = 0xbf800000;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    fill_memory_with_pattern_0800b430(auStack_70 + 3,0,0xc);\n    fill_memory_with_pattern_0800b430(auStack_70,0,0xc);\n    DAT_20000e70 = '\\0';\n    local_2f = 0;\n    while (iVar1 = check_and_update_character_0800184c(&local_52,auStack_70 + 6,param_1,&local_51), iVar1 != 0) {\n      uVar6 = reverse_bits_08008590(local_58);\n      uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      local_24 = calculate_shifted_value_08008ba0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          initialize_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar2 = calculate_floating_point_08008eec(local_58,0x41200000);\n          uVar6 = reverse_bits_08008590(uVar2);\n          uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          local_24 = calculate_shifted_value_08008ba0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)local_24 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          uVar2 = calculate_floating_point_08008eec(local_58,0x41200000);\n          uVar6 = reverse_bits_08008590(uVar2);\n          uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          local_24 = calculate_shifted_value_08008ba0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        local_2f = 0;\n      }\n    }\n    cVar3 = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51 = 0;\nswitchD_08000d18_caseD_47:\n      iVar1 = check_and_update_character_0800184c(&local_52,auStack_70 + 6,param_1,&local_51);\n      if (iVar1 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar1 = check_concatenation_result_0800923c(local_58,0);\n          if (iVar1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = convert_to_unsigned_int_0800056c(local_58);\n          }\n          else {\n            local_2c = convert_to_unsigned_int_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar4 = (uint)local_52;\n          uVar2 = convert_to_unsigned_int_0800056c(local_58);\n          auStack_70[uVar4 - 0x49] = uVar2;\n          break;\n        case 0x4c:\n          uVar6 = reverse_bits_08008590(local_58);\n          uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          local_39 = check_param_validity_08008bf0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = convert_to_unsigned_int_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar1 = check_if_concatenation_empty_08009228(local_58,0);\n          if (iVar1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          iVar1 = check_if_concatenation_empty_08009228(local_58,0);\n          if (iVar1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          uVar6 = reverse_bits_08008590(local_58);\n          uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          DAT_20000e88 = check_param_validity_08008bf0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          break;\n        case 0x58:\n          auStack_70[3] = convert_to_unsigned_int_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = convert_to_unsigned_int_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = convert_to_unsigned_int_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      cVar3 = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_parameter_0800525c((int)DAT_20000e76);\n          handle_param_08000220(DAT_20000e77);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar1 = check_and_store_data_08004d7c(DAT_20000e8c,&local_7c);\n          if (iVar1 == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = local_7c;\n          DAT_20000e94 = uStack_78;\n          DAT_20000e98 = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar1 = check_if_concatenation_empty_08009228(local_34,0);\n          if (iVar1 == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_handling_08002408(local_34);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          uVar6 = reverse_bits_08008590(local_34);\n          uVar6 = calculate_shifted_value_08009798((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          local_24 = calculate_shifted_value_08008ba0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)DAT_20000e8c;\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar1 = check_and_store_data_08004d7c(local_24 & 0xff,local_94);\n              if (iVar1 == 0) {\n                return '\\n';\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar4 = (uint)local_3a;\n                    uVar2 = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_3a + 2) * 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar4] = uVar2;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              store_data_with_checksum_08004bf4(local_24 & 0xff,local_94);\n              if (local_24 == DAT_20000e8c) {\n                DAT_20000e90 = local_94[0];\n                DAT_20000e94 = local_94[1];\n                DAT_20000e98 = local_94[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] = *(undefined4 *)(&DAT_20000e74 + (local_3b + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                uVar4 = (uint)local_3b;\n                uVar2 = floating_point_addition_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3b + 2) * 4));\n                auStack_70[uVar4 + 3] = uVar2;\n              }\n              else {\n                uVar5 = auStack_70[local_3b + 3];\n                uVar2 = floating_point_addition_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3b + 10) * 4));\n                uVar4 = (uint)local_3b;\n                uVar2 = floating_point_addition_08008cdc(uVar5,uVar2);\n                auStack_70[uVar4 + 3] = uVar2;\n              }\n            }\n            process_alarm_and_calculate_results_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],DAT_20000ed0,0);\n          }\n          if (local_2e == '\\x05') {\n            iVar1 = check_and_store_data_08004d7c(7,local_94 + 3);\n            if (iVar1 == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            iVar1 = check_and_store_data_08004d7c(6,local_94 + 3);\n            if (iVar1 == 0) {\n              return '\\n';\n            }\n          }\n          process_alarm_and_calculate_results_08001e98(local_94[3],local_84,local_80,DAT_20000ed0,0);\n          DAT_20000e7c = local_94[3];\n          DAT_20000e80 = local_84;\n          DAT_20000e84 = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            store_data_with_checksum_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            store_data_with_checksum_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar2 = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_3c + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (local_3c + 8) * 4));\n                uVar4 = (uint)local_3c;\n                uVar2 = calculate_float_08008cd8(uVar2,auStack_70[local_3c + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (uVar4 + 10) * 4) = uVar2;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          fill_memory_with_pattern_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((iVar1 = check_if_concatenation_empty_08009228(local_2c,0), iVar1 != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((local_2d != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (local_3d = 0; local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(&DAT_20000e74 + (local_3d + 2) * 4);\n            }\n            else if (local_2d == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                uVar4 = (uint)local_3d;\n                uVar2 = floating_point_addition_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3d + 2) * 4));\n                auStack_70[uVar4 + 3] = uVar2;\n              }\n              else {\n                uVar5 = auStack_70[local_3d + 3];\n                uVar2 = floating_point_addition_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3d + 10) * 4));\n                uVar4 = (uint)local_3d;\n                uVar2 = floating_point_addition_08008cdc(uVar5,uVar2);\n                auStack_70[uVar4 + 3] = uVar2;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (local_27 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_alarm_and_calculate_results_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (local_27 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              uVar2 = local_2c;\n              if (DAT_20000e72 == '\\0') {\n                uVar2 = DAT_20000e78;\n              }\n              process_alarm_and_calculate_results_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],uVar2,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            local_27 = local_27 & ~(byte)(1 << DAT_20000e8b);\n            if ((local_27 == 0) ||\n               (((iVar1 = check_if_params_concatenated_08009214(local_38,0), iVar1 != 0 &&\n                 (iVar1 = check_if_params_concatenated_08009214(auStack_70[DAT_20000e89],0), iVar1 != 0)) &&\n                (iVar1 = check_if_params_concatenated_08009214(auStack_70[DAT_20000e8a],0), iVar1 != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              iVar1 = check_if_params_concatenated_08009214(local_38,0);\n              if (iVar1 == 0) {\n                local_4c = calculate_float_08008cd8(auStack_70[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                local_50 = calculate_float_08008cd8(auStack_70[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_with_pattern_0800b430(auStack_70,0,0xc);\n                uVar2 = calculate_floating_point_08008eec(local_38,0x40800000);\n                uVar2 = calculate_floating_point_08008eec(uVar2,local_38);\n                uVar5 = calculate_floating_point_08008eec(local_4c,local_4c);\n                uVar2 = calculate_float_08008cd8(uVar2,uVar5);\n                uVar5 = calculate_floating_point_08008eec(local_50,local_50);\n                local_44 = calculate_float_08008cd8(uVar2,uVar5);\n                iVar1 = check_if_concatenation_empty_08009228(local_44,0);\n                if (iVar1 != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                uVar6 = reverse_bits_08008590(local_44);\n                uVar6 = process_data_080098d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n                uVar7 = reverse_bits_08008590(local_4c);\n                uVar8 = reverse_bits_08008590(local_50);\n                uVar7 = calculate_and_store_hypotenuse_0800981c((int)uVar7,(int)((ulonglong)uVar7 >> 0x20),(int)uVar8,\n                                     (int)((ulonglong)uVar8 >> 0x20));\n                uVar6 = calculate_floating_point_08008894((int)uVar6,(uint)((ulonglong)uVar6 >> 0x20) ^ 0x80000000,\n                                     (int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n                local_44 = float_to_uint_08008c30((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  local_44 = local_44 ^ 0x80000000;\n                }\n                iVar1 = check_if_concatenation_empty_08009228(local_38,0);\n                if (iVar1 != 0) {\n                  local_44 = local_44 ^ 0x80000000;\n                  local_38 = local_38 ^ 0x80000000;\n                }\n                uVar2 = calculate_floating_point_08008eec(local_50,local_44);\n                uVar2 = calculate_float_08008cd8(local_4c,uVar2);\n                uVar4 = (uint)DAT_20000e89;\n                uVar2 = calculate_floating_point_08008eec(uVar2,0x3f000000);\n                auStack_70[uVar4] = uVar2;\n                uVar2 = calculate_floating_point_08008eec(local_4c,local_44);\n                uVar2 = floating_point_addition_08008cdc(uVar2,local_50);\n                uVar4 = (uint)DAT_20000e8a;\n                uVar2 = calculate_floating_point_08008eec(uVar2,0x3f000000);\n                auStack_70[uVar4] = uVar2;\n              }\n              else {\n                uVar6 = reverse_bits_08008590(auStack_70[DAT_20000e89]);\n                uVar7 = reverse_bits_08008590(auStack_70[DAT_20000e8a]);\n                uVar6 = calculate_and_store_hypotenuse_0800981c((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                                     (int)((ulonglong)uVar7 >> 0x20));\n                local_38 = float_to_uint_08008c30((int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n              }\n              local_45 = DAT_20000e71 == '\\x02';\n              uVar2 = local_2c;\n              if (DAT_20000e72 == '\\0') {\n                uVar2 = DAT_20000e78;\n              }\n              calculate_results_08001f00(&DAT_20000e7c,auStack_70 + 3,auStack_70,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,uVar2,DAT_20000e72,local_38,local_45);\n            }\n            break;\n          case '\\x04':\n            if (local_27 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = auStack_70[3];\n          DAT_20000e80 = auStack_70[4];\n          DAT_20000e84 = auStack_70[5];\n        }\n        cVar3 = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_alarm_loop_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_flags_080025e8();\n            cVar3 = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            cVar3 = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return cVar3;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_character_0800184c",
            "code": "\nundefined4 checkAndUpdateCharacter_0800184c(byte *outputCharacter,undefined4 conversionParam,int conversionTable,byte *inputCharacter)\n\n{\n  int conversionStatus;\n  undefined4 returnStatus;\n  \n  if (*(char *)(conversionTable + (uint)*inputCharacter) == '\\0') {\n    returnStatus = 0;\n  }\n  else {\n    *outputCharacter = *(byte *)(conversionTable + (uint)*inputCharacter);\n    if ((*outputCharacter < 0x41) || (0x5a < *outputCharacter)) {\n      DAT_20000e70 = 2;\n      returnStatus = 0;\n    }\n    else {\n      *inputCharacter = *inputCharacter + 1;\n      conversionStatus = parse_and_convert_08002638(conversionTable,inputCharacter,conversionParam);\n      if (conversionStatus == 0) {\n        DAT_20000e70 = 1;\n        returnStatus = 0;\n      }\n      else {\n        returnStatus = 1;\n      }\n    }\n  }\n  return returnStatus;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_character_0800184c",
                "param_1": "outputCharacter",
                "param_2": "conversionParam",
                "param_3": "conversionTable",
                "param_4": "inputCharacter",
                "iVar1": "conversionStatus",
                "uVar2": "returnStatus"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_080018cc",
            "code": "\n\n\nvoid updateData_080018cc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "combine_param_with_value_080018fc",
            "code": "\n\n\nvoid combineParamWithValue_080018fc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "combine_param_with_value_080018fc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_flag_from_input_0800192c",
            "code": "\nvoid extractFlagFromInput_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_flag_from_input_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_flags_0800195c",
            "code": "\nvoid initialize_and_check_flags_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_flags_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_flags_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "process_data_08001994",
            "code": "\nvoid processData_08001994(byte flags,char condition1,char condition2,undefined4 data)\n\n{\n  undefined4 result1;\n  uint maxValue;\n  undefined8 value1;\n  undefined8 value2;\n  byte flag;\n  uint value3;\n  uint value4;\n  uint value5;\n  ushort value6;\n  uint shiftedValue;\n  int validity;\n  undefined4 floatToUint;\n  uint minValue;\n  uint combinedValue;\n  ushort updatedValue;\n  uint counter;\n  uint sum;\n  int shiftDifference;\n  int value7;\n  int value8;\n  int value9;\n  ushort value10;\n  uint limit;\n  char count;\n  \n  count = '\\0';\n  fill_memory_with_pattern_0800b430(&value3,0,0xc);\n  if ((flags & 1) != 0) {\n    count = count + '\\x01';\n    value1 = reverse_bits_08008590(DAT_20000ebc);\n    value3 = calculate_shifted_value_080095b8((int)value1,(int)((ulonglong)value1 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    count = count + '\\x01';\n    value1 = reverse_bits_08008590(DAT_20000ec0);\n    value4 = calculate_shifted_value_080095b8((int)value1,(int)((ulonglong)value1 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    count = count + '\\x01';\n    value1 = reverse_bits_08008590(DAT_20000ec4);\n    value5 = calculate_shifted_value_080095b8((int)value1,(int)((ulonglong)value1 >> 0x20));\n  }\n  maxValue = value5;\n  if (value5 < value4) {\n    maxValue = value4;\n  }\n  minValue = value3;\n  if (value3 < maxValue) {\n    minValue = maxValue;\n  }\n  value1 = shift_and_concatenate_0800854c(minValue);\n  value2 = shift_and_concatenate_0800854c(count);\n  value2 = process_data_080098d0((int)value2,(int)((ulonglong)value2 >> 0x20));\n  value1 = calculate_floating_point_08008894((int)value1,(int)((ulonglong)value1 >> 0x20),(int)value2,\n                       (int)((ulonglong)value2 >> 0x20));\n  floatToUint = float_to_uint_08008c30((int)value1,(int)((ulonglong)value1 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000edc,floatToUint);\n  result1 = reverse_float_08009054(result1,0x453b8000);\n  value1 = reverse_bits_08008590(result1);\n  value1 = calculate_float_08009318((int)value1,(int)((ulonglong)value1 >> 0x20));\n  validity = check_param_validity_08008bf0((int)value1,(int)((ulonglong)value1 >> 0x20));\n  value1 = shift_and_concatenate_0800854c(count);\n  value1 = process_data_080098d0((int)value1,(int)((ulonglong)value1 >> 0x20));\n  value2 = reverse_bits_08008590(data);\n  value1 = calculate_bitwise_difference_08008640((int)value1,(int)((ulonglong)value1 >> 0x20),(int)value2,\n                       (int)((ulonglong)value2 >> 0x20));\n  result1 = float_to_uint_08008c30((int)value1,(int)((ulonglong)value1 >> 0x20));\n  result1 = calculate_floating_point_08008eec(floatToUint,result1);\n  result1 = reverse_float_08009054(0x4c64e1c0,result1);\n  value1 = reverse_bits_08008590(result1);\n  shiftedValue = calculate_shifted_value_080095b8((int)value1,(int)((ulonglong)value1 >> 0x20));\n  limit = 75000;\n  if (shiftedValue < 75000) {\n    limit = shiftedValue;\n  }\n  value6 = DAT_20000ed4;\n  value10 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (condition1 == '\\0') {\n    value10 = value10 ^ 0xaa0;\n  }\n  combine_param_with_value_080018fc(value10);\n  update_data_080018cc(value6);\n  value7 = -(minValue >> 1);\n  shiftDifference = limit - DAT_20000ec9;\n  sum = 0;\n  counter = 10000;\n  flag = flags;\n  value8 = value7;\n  value9 = value7;\n  while( true ) {\n    updatedValue = value6;\n    combinedValue = combine_values_080078f4();\n    if (condition2 == '\\0') {\n      combinedValue = combinedValue ^ 0x1e;\n    }\n    if (((flag & 1) != 0) && (value9 = value9 + value3, 0 < value9)) {\n      if ((combinedValue & 0x10) == 0) {\n        flag = flag & 0xfe;\n      }\n      else {\n        updatedValue = updatedValue ^ 0x10;\n      }\n      value9 = value9 - minValue;\n    }\n    if (((flag & 2) != 0) && (value8 = value8 + value4, 0 < value8)) {\n      if ((combinedValue & 8) == 0) {\n        flag = flag & 0xfd;\n      }\n      else {\n        updatedValue = updatedValue ^ 0x440;\n      }\n      value8 = value8 - minValue;\n    }\n    if (((flag & 4) != 0) && (value7 = value7 + value5, 0 < value7)) {\n      if ((combinedValue & 4) == 0) {\n        flag = flag & 0xfb;\n      }\n      else {\n        updatedValue = updatedValue ^ 0x100;\n      }\n      value7 = value7 - minValue;\n    }\n    if ((flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_080018cc(updatedValue);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_080018cc(value6);\n    FUNC_08002828(shiftDifference);\n    if ((shiftedValue < limit) && (counter = limit + counter, 20000 < counter)) {\n      counter = counter - 20000;\n      sum = validity + sum;\n      limit = 60000000 / sum;\n      if (limit < shiftedValue) {\n        limit = shiftedValue;\n      }\n      shiftDifference = limit - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "flags",
                "param_2": "condition1",
                "param_3": "condition2",
                "param_4": "data",
                "uVar1": "result1",
                "uVar2": "maxValue",
                "uVar3": "value1",
                "uVar4": "value2",
                "local_61": "flag",
                "local_5c": "value3",
                "local_58": "value4",
                "local_54": "value5",
                "local_4e": "value6",
                "local_4c": "shiftedValue",
                "local_48": "validity",
                "local_44": "floatToUint",
                "local_40": "minValue",
                "local_3c": "combinedValue",
                "local_36": "updatedValue",
                "local_34": "counter",
                "local_30": "sum",
                "local_2c": "shiftDifference",
                "local_28": "value7",
                "local_24": "value8",
                "local_20": "value9",
                "local_1a": "value10",
                "local_18": "limit",
                "local_11": "count"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_process_data_08001d4c",
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char temp;\n  char counter;\n  \n  initialize_global_values();\n  process_data(4,1,0,DAT_20000eec);\n  process_data(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    temp = counter + -1;\n    if (counter == '\\0') break;\n    process_data(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    counter = temp;\n    if ('\\0' < temp) {\n      process_data(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initialize_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "local_9": "counter",
                "cVar1": "temp",
                "initialize_global_values_08005790": "initialize_global_values",
                "process_data_08001994": "process_data",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "run_application_08001ddc",
            "code": "\nvoid runApplication_08001ddc(void)\n\n{\n  FUNC_08008244();\n  checkAndInitializeMemory();\n  initializeApplication();\n  fillMemoryWithPattern(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initializeMemory();\n      initializeAndDisplayErrorMessage();\n      initializeGRBL();\n      initializeData();\n      initialize();\n      extractFlagFromInput();\n      initializeMemory();\n      initializeAndCalculateResults();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        displayStatusMessage(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        validateAndDisplayMemory();\n      }\n    }\n    processAlarm();\n    processUserInput();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "run_application_08001ddc",
                "check_and_initialize_memory_080051b4": "checkAndInitializeMemory",
                "initialize_application_0800583c": "initializeApplication",
                "fill_memory_with_pattern_0800b430": "fillMemoryWithPattern",
                "initialize_memory_08002f24": "initializeMemory",
                "initialize_and_display_error_message_080004ac": "initializeAndDisplayErrorMessage",
                "initialize_grbl_080039a0": "initializeGRBL",
                "initialize_data_08005238": "initializeData",
                "initialize_080001f8": "initialize",
                "extract_flag_from_input_0800192c": "extractFlagFromInput",
                "initialize_memory_08005814": "initializeMemory",
                "initialize_and_calculate_results_0800283a": "initializeAndCalculateResults",
                "display_status_message_080041a0": "displayStatusMessage",
                "validate_and_display_memory_080039bc": "validateAndDisplayMemory",
                "process_alarm_08003a74": "processAlarm",
                "process_user_input_08003f34": "processUserInput"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_alarm_and_calculate_results_08001e98",
            "code": "\nvoid process_alarm_and_calculate_results_08001e98(undefined4 data_1,undefined4 data_2,undefined4 data_3,undefined4 data_4,\n                 undefined data_5)\n\n{\n  int is_data_equal;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarm_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      is_data_equal = are_equal_data_08002fac();\n    } while (is_data_equal != 0);\n    calculate_results_08003004(data_1,data_2,data_3,data_4,data_5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_global_values_if_needed_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_alarm_and_calculate_results_08001e98",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "iVar1": "is_data_equal"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_results_08001f00",
            "code": "\nvoid calculateResults_08001f00(int inputPtr1,undefined4 *inputPtr2,int inputPtr3,byte byteParam1,byte byteParam2,byte byteParam3\n                 ,undefined4 floatParam1,char charParam1,undefined4 floatParam2,char charParam2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int checkResult;\n  uint calculateResult;\n  undefined8 reverseResult1;\n  undefined8 reverseResult2;\n  uint floatArray [4];\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  undefined4 tempResult3;\n  undefined4 tempResult4;\n  undefined4 tempResult5;\n  undefined4 reverseResult3;\n  ushort ushortResult;\n  undefined4 floatResult;\n  undefined4 tempResult6;\n  undefined4 tempResult7;\n  uint uintResult1;\n  undefined4 uintResult2;\n  undefined4 localResult1;\n  char charResult;\n  ushort ushortResult2;\n  undefined4 floatResult2;\n  uint uintResult3;\n  uint uintResult4;\n  \n  localResult1 = floating_point_addition_08008cdc(*(undefined4 *)((uint)byteParam1 * 4 + inputPtr1),\n                          *(undefined4 *)((uint)byteParam1 * 4 + inputPtr3));\n  uintResult2 = floating_point_addition_08008cdc(*(undefined4 *)((uint)byteParam2 * 4 + inputPtr1),\n                          *(undefined4 *)((uint)byteParam2 * 4 + inputPtr3));\n  uintResult1 = calculate_float_08008cd8(inputPtr2[byteParam3],*(undefined4 *)((uint)byteParam3 * 4 + inputPtr1));\n  uintResult4 = *(uint *)((uint)byteParam1 * 4 + inputPtr3) ^ 0x80000000;\n  uintResult3 = *(uint *)((uint)byteParam2 * 4 + inputPtr3) ^ 0x80000000;\n  tempResult7 = calculate_float_08008cd8(inputPtr2[byteParam1],localResult1);\n  tempResult6 = calculate_float_08008cd8(inputPtr2[byteParam2],uintResult2);\n  result1 = calculate_floating_point_08008eec(uintResult4,tempResult6);\n  result2 = calculate_floating_point_08008eec(uintResult3,tempResult7);\n  result1 = calculate_float_08008cd8(result1,result2);\n  reverseResult1 = reverse_bits_08008590(result1);\n  result1 = calculate_floating_point_08008eec(uintResult4,tempResult7);\n  result2 = calculate_floating_point_08008eec(uintResult3,tempResult6);\n  result1 = floating_point_addition_08008cdc(result1,result2);\n  reverseResult2 = reverse_bits_08008590(result1);\n  reverseResult1 = calculate_result_thunk_08009990((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),(int)reverseResult2,\n                             (int)((ulonglong)reverseResult2 >> 0x20));\n  floatResult2 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n  if (charParam2 == '\\0') {\n    checkResult = check_concatenation_result_0800923c(floatResult2,0);\n    if (checkResult != 0) {\n      reverseResult1 = reverse_bits_08008590(floatResult2);\n      reverseResult1 = calculate_unsigned_division_080082d4((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),0x54442d18,0x401921fb);\n      floatResult2 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    }\n  }\n  else {\n    checkResult = check_concatenated_params_08009250(floatResult2,0);\n    if (checkResult != 0) {\n      reverseResult1 = reverse_bits_08008590(floatResult2);\n      reverseResult1 = calculate_080082d0((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),0x54442d18,0x401921fb);\n      floatResult2 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    }\n  }\n  result1 = calculate_floating_point_08008eec(floatResult2,floatParam2);\n  reverseResult1 = reverse_bits_08008590(result1);\n  reverseResult2 = reverse_bits_08008590(uintResult1 & 0x7fffffff);\n  reverseResult1 = calculate_and_store_hypotenuse_0800981c((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),(int)reverseResult2,\n                       (int)((ulonglong)reverseResult2 >> 0x20));\n  floatResult = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n  checkResult = check_if_params_concatenated_08009214(floatResult,0);\n  if (checkResult == 0) {\n    result1 = reverse_float_08009054(floatResult,DAT_20000ed8);\n    reverseResult1 = reverse_bits_08008590(result1);\n    reverseResult1 = calculate_result_080094c0((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    ushortResult = check_param_validity_08008bf0((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    if (charParam1 != '\\0') {\n      result1 = calculate_result_08008e44(ushortResult);\n      floatParam1 = calculate_floating_point_08008eec(floatParam1,result1);\n    }\n    result1 = calculate_result_08008e44(ushortResult);\n    reverseResult3 = reverse_float_08009054(floatResult2,result1);\n    result1 = calculate_result_08008e44(ushortResult);\n    tempResult5 = reverse_float_08009054(uintResult1,result1);\n    reverseResult1 = reverse_bits_08008590(reverseResult3);\n    reverseResult1 = calculate_bitwise_difference_08008640((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),0,0x3fe00000);\n    reverseResult2 = reverse_bits_08008590(reverseResult3);\n    reverseResult1 = calculate_bitwise_difference_08008640((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20),(int)reverseResult2,\n                         (int)((ulonglong)reverseResult2 >> 0x20));\n    reverseResult1 = calculate_080082d0(0,0x3ff00000,(int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    tempResult4 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n    tempResult3 = reverseResult3;\n    charResult = '\\0';\n    floatArray[byteParam3] = *(uint *)(inputPtr1 + (uint)byteParam3 * 4);\n    for (ushortResult2 = 1; ushortResult2 < ushortResult; ushortResult2 = ushortResult2 + 1) {\n      if ((int)charResult < (int)(uint)DAT_20000efa) {\n        result1 = calculate_floating_point_08008eec(uintResult4,tempResult3);\n        result2 = calculate_floating_point_08008eec(uintResult3,tempResult4);\n        floatArray[3] = floating_point_addition_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(uintResult4,tempResult4);\n        result2 = calculate_floating_point_08008eec(uintResult3,tempResult3);\n        uintResult4 = calculate_float_08008cd8(result1,result2);\n        uintResult3 = floatArray[3];\n        charResult = charResult + '\\x01';\n      }\n      else {\n        result1 = calculate_result_08008e44(ushortResult2);\n        result1 = calculate_floating_point_08008eec(result1,reverseResult3);\n        reverseResult1 = reverse_bits_08008590(result1);\n        reverseResult1 = calculate_result_08009410((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n        tempResult2 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n        result1 = calculate_result_08008e44(ushortResult2);\n        result1 = calculate_floating_point_08008eec(result1,reverseResult3);\n        reverseResult1 = reverse_bits_08008590(result1);\n        reverseResult1 = calculate_and_update_value_080096e8((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n        tempResult1 = float_to_uint_08008c30((int)reverseResult1,(int)((ulonglong)reverseResult1 >> 0x20));\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)byteParam1 * 4 + inputPtr3) ^ 0x80000000,tempResult2);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)byteParam2 * 4 + inputPtr3),tempResult1);\n        uintResult4 = floating_point_addition_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)byteParam1 * 4 + inputPtr3) ^ 0x80000000,tempResult1);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)byteParam2 * 4 + inputPtr3),tempResult2);\n        uintResult3 = calculate_float_08008cd8(result1,result2);\n        charResult = '\\0';\n      }\n      calculateResult = floating_point_addition_08008cdc(localResult1,uintResult4);\n      floatArray[byteParam1] = calculateResult;\n      calculateResult = floating_point_addition_08008cdc(uintResult2,uintResult3);\n      floatArray[byteParam2] = calculateResult;\n      calculateResult = floating_point_addition_08008cdc(floatArray[byteParam3],tempResult5);\n      floatArray[byteParam3] = calculateResult;\n      process_alarm_and_calculate_results_08001e98(floatArray[0],floatArray[1],floatArray[2],floatParam1,charParam1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_alarm_and_calculate_results_08001e98(*inputPtr2,inputPtr2[1],inputPtr2[2],floatParam1,charParam1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_results_08001f00",
                "param_1": "inputPtr1",
                "param_2": "inputPtr2",
                "param_3": "inputPtr3",
                "param_4": "byteParam1",
                "param_5": "byteParam2",
                "param_6": "byteParam3",
                "param_7": "floatParam1",
                "param_8": "charParam1",
                "param_9": "floatParam2",
                "param_10": "charParam2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "checkResult",
                "uVar4": "calculateResult",
                "uVar5": "reverseResult1",
                "uVar6": "reverseResult2",
                "local_6c": "floatArray",
                "local_5c": "tempResult1",
                "local_58": "tempResult2",
                "local_54": "tempResult3",
                "local_50": "tempResult4",
                "local_4c": "tempResult5",
                "local_48": "reverseResult3",
                "local_42": "ushortResult",
                "local_40": "floatResult",
                "local_3c": "tempResult6",
                "local_38": "tempResult7",
                "local_34": "uintResult1",
                "local_30": "uintResult2",
                "local_2c": "localResult1",
                "local_27": "charResult",
                "local_26": "ushortResult2",
                "local_24": "floatResult2",
                "local_20": "uintResult3",
                "local_1c": "uintResult4"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_handling_08002408",
            "code": "\nvoid process_data_handling_08002408(undefined4 input_data)\n\n{\n  undefined2 result;\n  undefined4 float_value;\n  undefined4 calc_result;\n  undefined8 reversed_bits;\n  ushort iteration_count;\n  \n  float_value = calculate_floating_point_08008eec(input_data,0x41a00000);\n  reversed_bits = reverse_bits_08008590(float_value);\n  reversed_bits = calculate_result_080094c0((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  iteration_count = check_param_validity_08008bf0((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  process_alarm_loop_08002fd4();\n  float_value = calculate_floating_point_08008eec(input_data,0x447a0000);\n  calc_result = calculate_result_08008e44((uint)iteration_count * 0x32);\n  float_value = calculate_float_08008cd8(float_value,calc_result);\n  reversed_bits = reverse_bits_08008590(float_value);\n  reversed_bits = calculate_result_080094c0((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  result = check_param_validity_08008bf0((int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  FUNC_08002814(result);\n  while ((iteration_count != 0 && (process_alarm_08003a74(), DAT_20000ea8 == '\\0'))) {\n    wait_for_data_080002a0(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_handling_08002408",
                "param_1": "input_data",
                "uVar1": "result",
                "uVar2": "float_value",
                "uVar3": "calc_result",
                "uVar4": "reversed_bits",
                "local_12": "iteration_count"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_data_and_process_080024c4",
            "code": "\nvoid initializeDataAndProcess_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char flag1;\n  char flag2;\n  char flag3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndProcessData();\n  processAlarm();\n  if (DAT_20000ea8 == '\\0') {\n    fillMemoryWithPattern(&DAT_20000eac,0,0xc);\n    initializeAndCalculateResults();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      flag3 = -1;\n    }\n    else {\n      flag3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      flag2 = -1;\n    }\n    else {\n      flag2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      flag1 = -1;\n    }\n    else {\n      flag1 = '\\x01';\n    }\n    uVar1 = calculateResult((int)flag3);\n    uVar1 = calculateFloatingPoint(uVar1,DAT_20000ef4);\n    uVar2 = calculateResult((int)flag2);\n    uVar2 = calculateFloatingPoint(uVar2,DAT_20000ef4);\n    uVar3 = calculateResult((int)flag1);\n    uVar3 = calculateFloatingPoint(uVar3,DAT_20000ef4);\n    processAlarmAndCalculateResults(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeGlobalValuesIfNeeded();\n    processAlarmLoop();\n    initializeAndCalculateResults();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_data_and_process_080024c4",
                "local_13": "flag1",
                "local_12": "flag2",
                "local_11": "flag3",
                "initialize_and_process_data_08001d4c": "initializeAndProcessData",
                "process_alarm_08003a74": "processAlarm",
                "fill_memory_with_pattern_0800b430": "fillMemoryWithPattern",
                "initialize_and_calculate_results_0800283a": "initializeAndCalculateResults",
                "calculate_result_08008e44": "calculateResult",
                "calculate_floating_point_08008eec": "calculateFloatingPoint",
                "process_alarm_and_calculate_results_08001e98": "processAlarmAndCalculateResults",
                "initialize_global_values_if_needed_0800585c": "initializeGlobalValuesIfNeeded",
                "process_alarm_loop_08002fd4": "processAlarmLoop"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_flags_080025e8",
            "code": "\nvoid initialize_and_check_flags_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    execute_initialization_08005250();\n    execute_init_functions_08000210();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initialize_flags_080057e4();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_flags_080025e8"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_and_convert_08002638",
            "code": "\nundefined4 parseAndConvert_08002638(int baseAddress,byte *inputString,uint *outputValue)\n\n{\n  byte digit;\n  bool negative;\n  bool decimal;\n  int concatenated;\n  char *currentChar;\n  char *nextChar;\n  undefined4 returnValue;\n  undefined8 tempValue;\n  uint convertedValue;\n  byte digitCount;\n  char decimalCount;\n  int intValue;\n  char currentDigit;\n  char *remainingString;\n  \n  nextChar = (char *)(baseAddress + (uint)*inputString);\n  currentChar = nextChar + 1;\n  currentDigit = *nextChar;\n  negative = false;\n  if (currentDigit == '-') {\n    negative = true;\n    currentDigit = *currentChar;\n    remainingString = nextChar + 2;\n  }\n  else {\n    remainingString = currentChar;\n    if (currentDigit == '+') {\n      remainingString = nextChar + 2;\n      currentDigit = *currentChar;\n    }\n  }\n  intValue = 0;\n  decimalCount = '\\0';\n  digitCount = 0;\n  decimal = false;\n  do {\n    digit = currentDigit - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (decimal) {\n          decimalCount = decimalCount + -1;\n        }\n        intValue = (uint)digit + intValue * 10;\n      }\n      else if (!decimal) {\n        decimalCount = decimalCount + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (decimal)) {\n        if (digitCount == 0) {\n          returnValue = 0;\n        }\n        else {\n          convertedValue = calculate_unsigned_value_08008e3c(intValue);\n          concatenated = check_if_params_concatenated_08009214(convertedValue,0);\n          if (concatenated == 0) {\n            for (; decimalCount < -1; decimalCount = decimalCount + '\\x02') {\n              tempValue = reverse_bits_08008590(convertedValue);\n              tempValue = calculate_bitwise_difference_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              convertedValue = float_to_uint_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            if (decimalCount < '\\0') {\n              tempValue = reverse_bits_08008590(convertedValue);\n              tempValue = calculate_bitwise_difference_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              convertedValue = float_to_uint_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimalCount; decimalCount = decimalCount + -1) {\n                convertedValue = calculate_floating_point_08008eec(convertedValue,0x41200000);\n              }\n            }\n          }\n          if (negative) {\n            *outputValue = convertedValue ^ 0x80000000;\n          }\n          else {\n            *outputValue = convertedValue;\n          }\n          *inputString = ((char)remainingString - (char)baseAddress) - 1;\n          returnValue = 1;\n        }\n        return returnValue;\n      }\n      decimal = true;\n    }\n    currentDigit = *remainingString;\n    remainingString = remainingString + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_and_convert_08002638",
                "param_1": "baseAddress",
                "param_2": "inputString",
                "param_3": "outputValue",
                "bVar1": "digit",
                "bVar2": "negative",
                "bVar3": "decimal",
                "iVar4": "concatenated",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "returnValue",
                "uVar8": "tempValue",
                "local_1c": "convertedValue",
                "local_16": "digitCount",
                "local_15": "decimalCount",
                "local_14": "intValue",
                "local_d": "currentDigit",
                "local_c": "remainingString"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_results_0800283a",
            "code": "\nvoid initialize_and_calculate_results_0800283a(void)\n\n{\n  initialize_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_reverse_results_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_results_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_limit_08002870",
            "code": "\nchar increment_and_check_limit_08002870(char input_value)\n\n{\n  char result;\n  \n  result = input_value + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "param_1": "input_value",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "transform_char_08002896",
            "code": "\nchar transformChar_08002896(char inputChar)\n\n{\n  char resultChar;\n  \n  resultChar = inputChar;\n  if (inputChar == '\\0') {\n    resultChar = '\\x12';\n  }\n  return resultChar + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "transform_char_08002896",
                "param_1": "inputChar",
                "local_9": "resultChar"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_reversed_sum_080028bc",
            "code": "\nundefined4 calculate_reversed_sum_080028bc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = calculate_floating_point_08008eec(input2,input2);\n  result2 = calculate_floating_point_08008eec(input1,input1);\n  result1 = calculate_float_08008cd8(result1,result2);\n  result2 = floating_point_addition_08008cdc(input3,input3);\n  result1 = reverse_float_08009054(result1,result2);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_reversed_sum_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = floating_point_addition_08008cdc(input_3,input_3);\n  result_1 = calculate_floating_point_08008eec(result_1,input_4);\n  result_2 = calculate_floating_point_08008eec(input_1,input_1);\n  result_1 = calculate_float_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(input_2,input_2);\n  result_1 = floating_point_addition_08008cdc(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(input_3,0x40800000);\n  result_1 = reverse_float_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_final_result_08002978",
            "code": "\nundefined4 calculate_final_result_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined8 reversed_result;\n  \n  result_1 = calculate_floating_point_08008eec(input_2,input_2);\n  result_2 = floating_point_addition_08008cdc(input_1,input_1);\n  result_2 = calculate_floating_point_08008eec(result_2,input_3);\n  result_1 = calculate_float_08008cd8(result_1,result_2);\n  reversed_result = reverse_bits_08008590(result_1);\n  reversed_result = process_data_080098d0((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  result_1 = float_to_uint_08008c30((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_final_result_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "reversed_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "concatenate_and_update_params_080029d8",
            "code": "\nvoid concatenateAndUpdateParams_080029d8(undefined4 param1,int concatenatedParam,int concatenationResultParam)\n\n{\n  int concatenationCheck;\n  undefined4 finalResult;\n  undefined4 checkResult;\n  \n  if (((concatenatedParam != 0) && (concatenationResultParam != 0)) &&\n     (concatenationCheck = checkParamsConcatenated(*(undefined4 *)(concatenatedParam + 0x18),*(undefined4 *)(concatenatedParam + 0x1c)),\n     concatenationCheck == 0)) {\n    if ((*(char *)(concatenatedParam + 0x25) == '\\0') &&\n       (concatenationCheck = checkConcatenationResult(*(undefined4 *)(concatenatedParam + 0x1c),*(undefined4 *)(concatenationResultParam + 0x18)),\n       concatenationCheck != 0)) {\n      checkResult = *(undefined4 *)(concatenatedParam + 0x1c);\n      finalResult = calculateFinalResult(DAT_20000edc ^ 0x80000000,*(undefined4 *)(concatenationResultParam + 0x18),\n                           *(undefined4 *)(concatenatedParam + 0x20));\n      concatenationCheck = checkConcatenationEmpty(checkResult,finalResult);\n      if (concatenationCheck == 0) {\n        finalResult = calculateFinalResult(DAT_20000edc ^ 0x80000000,*(undefined4 *)(concatenationResultParam + 0x18),\n                             *(undefined4 *)(concatenatedParam + 0x20));\n      }\n      else {\n        finalResult = *(undefined4 *)(concatenatedParam + 0x1c);\n      }\n      *(undefined4 *)(concatenatedParam + 0x18) = finalResult;\n    }\n    else {\n      *(undefined4 *)(concatenatedParam + 0x18) = *(undefined4 *)(concatenatedParam + 0x1c);\n    }\n    *(undefined *)(concatenatedParam + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "concatenate_and_update_params_080029d8",
                "param_1": "param1",
                "param_2": "concatenatedParam",
                "param_3": "concatenationResultParam",
                "iVar1": "concatenationCheck",
                "uVar2": "finalResult",
                "uVar3": "checkResult",
                "check_if_params_concatenated_08009214": "checkParamsConcatenated",
                "check_concatenation_result_08009264": "checkConcatenationResult",
                "calculate_final_result_08002978": "calculateFinalResult",
                "check_if_concatenation_empty_08009228": "checkConcatenationEmpty"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "transform_and_concatenate_08002a94",
            "code": "\nvoid transformAndConcatenate_08002a94(void)\n\n{\n  undefined *oldCurrentParam;\n  undefined *previousParam;\n  undefined *currentParam;\n  byte currentChar;\n  \n  currentChar = DAT_20000cf0;\n  previousParam = (undefined *)0x0;\n  currentParam = (undefined *)0x0;\n  while (oldCurrentParam = currentParam, currentChar != DAT_20000cf1) {\n    currentChar = transform_char_08002896(currentChar);\n    currentParam = previousParam;\n    concatenate_and_update_params_080029d8(&DAT_20000870 + (uint)currentChar * 0x40,previousParam,oldCurrentParam);\n    previousParam = &DAT_20000870 + (uint)currentChar * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "transform_and_concatenate_08002a94",
                "local_18": "previousParam",
                "local_14": "currentParam",
                "local_9": "currentChar",
                "puVar1": "oldCurrentParam"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "concatenation_check_08002afc",
            "code": "\nvoid concatenation_check_08002afc(int input_1,int input_2)\n\n{\n  int result;\n  undefined4 final_result;\n  undefined4 concatenated_result;\n  \n  if (((input_1 != 0) && (*(char *)(input_1 + 0x25) == '\\0')) &&\n     (result = check_if_concatenation_empty_08009228(*(undefined4 *)(input_1 + 0x18),*(undefined4 *)(input_2 + 0x18)),\n     result != 0)) {\n    concatenated_result = *(undefined4 *)(input_2 + 0x18);\n    final_result = calculate_final_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_1 + 0x18),\n                         *(undefined4 *)(input_1 + 0x20));\n    result = check_if_concatenation_empty_08009228(concatenated_result,final_result);\n    if (result == 0) {\n      final_result = calculate_final_result_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input_1 + 0x18),\n                           *(undefined4 *)(input_1 + 0x20));\n    }\n    else {\n      final_result = *(undefined4 *)(input_2 + 0x18);\n    }\n    result = check_if_params_concatenated_08009214(final_result,*(undefined4 *)(input_2 + 0x18));\n    if (result == 0) {\n      *(undefined4 *)(input_2 + 0x18) = final_result;\n      *(undefined *)(input_2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "concatenation_check_08002afc",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "uVar2": "final_result",
                "uVar3": "concatenated_result"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "concatenate_strings_08002ba8",
            "code": "\nvoid concatenateStrings_08002ba8(void)\n\n{\n  uint index;\n  undefined *prevString;\n  undefined *prevString2;\n  undefined *currentString;\n  undefined *nextString;\n  byte byteValue;\n  \n  currentString = (undefined *)0x0;\n  nextString = (undefined *)0x0;\n  byteValue = DAT_20000cf1;\n  prevString2 = (undefined *)0x0;\n  while (prevString = currentString, byteValue != DAT_20000cf0) {\n    currentString = nextString;\n    index = (uint)byteValue;\n    checkAndConcatenate(prevString,nextString,&DAT_20000870 + index * 0x40);\n    byteValue = incrementAndCheckLimit(byteValue);\n    prevString2 = prevString;\n    nextString = &DAT_20000870 + index * 0x40;\n  }\n  checkAndConcatenate(currentString,nextString,0,currentString,prevString2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "concatenate_strings_08002ba8",
                "puVar2": "prevString",
                "puVar3": "prevString2",
                "local_14": "currentString",
                "local_10": "nextString",
                "local_9": "byteValue",
                "uVar1": "index",
                "concatenation_check_08002afc": "checkAndConcatenate",
                "increment_and_check_limit_08002870": "incrementAndCheckLimit"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_shifted_sum_08002c18",
            "code": "\nvoid calculate_shifted_sum_08002c18(int input,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined4 unsigned_value_1;\n  int shifted_value;\n  undefined4 unsigned_value_2;\n  undefined4 result_1;\n  undefined4 result_2;\n  uint shifted_value_2;\n  undefined8 reversed_float;\n  int result;\n  uint shifted_sum;\n  \n  unsigned_value_1 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x3c));\n  unsigned_value_1 = calculate_floating_point_08008eec(unsigned_value_1,value_1);\n  reversed_float = reverse_bits_08008590(unsigned_value_1);\n  reversed_float = calculate_float_08009318((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  unsigned_value_1 = check_param_validity_08008bf0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  *(undefined4 *)(input + 0x28) = unsigned_value_1;\n  unsigned_value_1 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x3c));\n  unsigned_value_1 = calculate_floating_point_08008eec(unsigned_value_1,value_2);\n  reversed_float = reverse_bits_08008590(unsigned_value_1);\n  reversed_float = calculate_float_08009318((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  unsigned_value_1 = check_param_validity_08008bf0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  *(undefined4 *)(input + 0x2c) = unsigned_value_1;\n  reversed_float = calculate_shifted_value_0800856c(*(int *)(input + 0x30) * 0x32);\n  reversed_float = calculate_bitwise_difference_08008640((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20),0,0x404e0000);\n  shifted_value = calculate_shifted_value_08008ba0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  unsigned_value_1 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x28));\n  unsigned_value_2 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x3c));\n  result_1 = calculate_result_08008e44(shifted_value);\n  unsigned_value_1 = calculate_reversed_sum_080028bc(unsigned_value_1,unsigned_value_2,result_1);\n  reversed_float = reverse_bits_08008590(unsigned_value_1);\n  reversed_float = calculate_float_08009318((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  shifted_sum = calculate_shifted_value_08008ba0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  unsigned_value_1 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x3c));\n  unsigned_value_2 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x2c));\n  result_1 = calculate_result_08008e44(-shifted_value);\n  unsigned_value_1 = calculate_reversed_sum_080028bc(unsigned_value_1,unsigned_value_2,result_1);\n  reversed_float = reverse_bits_08008590(unsigned_value_1);\n  reversed_float = calculate_result_080094c0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  result = calculate_shifted_value_08008ba0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n  result = (*(int *)(input + 0x10) - shifted_sum) - result;\n  if (result < 0) {\n    unsigned_value_1 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x28));\n    unsigned_value_2 = calculate_unsigned_value_08008e3c(*(undefined4 *)(input + 0x2c));\n    result_1 = calculate_result_08008e44(shifted_value);\n    result_2 = calculate_result_08008e44(*(undefined4 *)(input + 0x10));\n    unsigned_value_1 = calculate_result_08002908(unsigned_value_1,unsigned_value_2,result_1,result_2);\n    reversed_float = reverse_bits_08008590(unsigned_value_1);\n    reversed_float = calculate_float_08009318((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n    shifted_value_2 = calculate_shifted_value_08008ba0((int)reversed_float,(int)((ulonglong)reversed_float >> 0x20));\n    shifted_value_2 = shifted_value_2 & ~((int)shifted_value_2 >> 0x1f);\n    shifted_sum = *(uint *)(input + 0x10);\n    if ((int)shifted_value_2 <= (int)*(uint *)(input + 0x10)) {\n      shifted_sum = shifted_value_2;\n    }\n    result = 0;\n  }\n  *(uint *)(input + 0x34) = shifted_sum;\n  *(uint *)(input + 0x38) = result + shifted_sum;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_shifted_sum_08002c18",
                "param_1": "input",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "unsigned_value_1",
                "iVar2": "shifted_value",
                "uVar3": "unsigned_value_2",
                "uVar4": "result_1",
                "uVar5": "result_2",
                "uVar6": "shifted_value_2",
                "uVar7": "reversed_float",
                "local_20": "result",
                "local_1c": "shifted_sum"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_shifted_sum_08002e08",
            "code": "\nvoid calculate_shifted_sum_08002e08(void)\n\n{\n  undefined4 reverse_float_result_1;\n  undefined4 reverse_float_result_2;\n  int index;\n  undefined *ptr_data;\n  byte byte_limit;\n  \n  ptr_data = (undefined *)0x0;\n  byte_limit = DAT_20000cf1;\n  while (byte_limit != DAT_20000cf0) {\n    index = (uint)byte_limit * 0x40;\n    if ((ptr_data != (undefined *)0x0) &&\n       ((ptr_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      reverse_float_result_1 = reverse_float_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n      reverse_float_result_2 = reverse_float_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(ptr_data + 0x14));\n      calculate_shifted_sum_08002e08_08002c18(ptr_data,reverse_float_result_1,reverse_float_result_2);\n      ptr_data[0x24] = 0;\n    }\n    byte_limit = increment_and_check_limit_08002870(byte_limit);\n    ptr_data = &DAT_20000870 + index;\n  }\n  reverse_float_result_1 = reverse_float_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n  reverse_float_result_2 = reverse_float_08009054(0,*(undefined4 *)(ptr_data + 0x14));\n  calculate_shifted_sum_08002e08_08002c18(ptr_data,reverse_float_result_1,reverse_float_result_2);\n  ptr_data[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_shifted_sum_08002e08",
                "local_18": "ptr_data",
                "local_11": "byte_limit",
                "iVar3": "index",
                "uVar1": "reverse_float_result_1",
                "uVar2": "reverse_float_result_2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "transform_and_concatenate_strings_08002edc",
            "code": "\nvoid transform_and_concatenate_strings_08002edc(void)\n\n{\n  transform_and_concatenate();\n  concatenate_strings();\n  calculate_shifted_sum();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "transform_and_concatenate_strings_08002edc",
                "transform_and_concatenate_08002a94": "transform_and_concatenate",
                "concatenate_strings_08002ba8": "concatenate_strings",
                "calculate_shifted_sum_08002e08": "calculate_shifted_sum"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_and_check_limit_08002ef0",
            "code": "\nvoid update_and_check_limit_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_and_check_limit_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initialize_memory_08002f24(void)\n\n{\n  update_and_check_limit();\n  fill_memory_with_pattern(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "update_and_check_limit_08002ef0": "update_and_check_limit",
                "fill_memory_with_pattern_0800b430": "fill_memory_with_pattern"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_dat_20000cf1_if_not_equal_dat_20000cf0_08002f40",
            "code": "\nvoid update_dat_20000cf1_if_not_equal_dat_20000cf0_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check_limit(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_dat_20000cf1_if_not_equal_dat_20000cf0_08002f40",
                "increment_and_check_limit_08002870": "increment_and_check_limit"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_current_item_08002f74",
            "code": "\nundefined * get_current_item_08002f74(void)\n\n{\n  undefined *current_item;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    current_item = (undefined *)0x0;\n  }\n  else {\n    current_item = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return current_item;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_current_item_08002f74",
                "puVar1": "current_item"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_equal_data_08002fac",
            "code": "\nbool areEqualData_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_equal_data_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_alarm_loop_08002fd4",
            "code": "\nvoid process_alarm_loop_08002fd4(void)\n\n{\n  int current_item;\n  \n  while ((current_item = get_current_item(), current_item != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarm();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_alarm_loop_08002fd4",
                "iVar1": "current_item",
                "get_current_item_08002f74": "get_current_item",
                "process_alarm_08003a74": "process_alarm"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_results_08003004",
            "code": "\nvoid calculateResults_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char isFloatInput)\n\n{\n  undefined4 floatValue1;\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  undefined4 floatValue2;\n  undefined4 floatValue3;\n  undefined4 result1;\n  undefined4 result2;\n  uint maxValue;\n  int index;\n  ushort *ptr;\n  int absDifference;\n  uint maxDifference;\n  undefined8 processedData1;\n  undefined8 processedData2;\n  undefined8 shiftedValue4;\n  undefined4 concatenatedResult;\n  undefined4 floatValue4;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  ptr = (ushort *)(&DAT_20000870 + index);\n  floatValue1 = calculate_floating_point_08008eec(DAT_20000ebc,input1);\n  processedData1 = reverse_bits_08008590(floatValue1);\n  shiftedValue1 = calculate_shifted_value_080095b8((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n  floatValue1 = calculate_floating_point_08008eec(DAT_20000ec0,input2);\n  processedData1 = reverse_bits_08008590(floatValue1);\n  shiftedValue2 = calculate_shifted_value_080095b8((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n  floatValue1 = calculate_floating_point_08008eec(DAT_20000ec4,input3);\n  processedData1 = reverse_bits_08008590(floatValue1);\n  shiftedValue3 = calculate_shifted_value_080095b8((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n  *ptr = 0;\n  if (shiftedValue1 < DAT_20000cf4) {\n    *ptr = *ptr | 0x20;\n  }\n  if (shiftedValue2 < DAT_20000cf8) {\n    *ptr = *ptr | 0x880;\n  }\n  if (shiftedValue3 < DAT_20000cfc) {\n    *ptr = *ptr | 0x200;\n  }\n  absDifference = shiftedValue1 - DAT_20000cf4;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_20000874 + index) = absDifference;\n  absDifference = shiftedValue2 - DAT_20000cf8;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_20000878 + index) = absDifference;\n  absDifference = shiftedValue3 - DAT_20000cfc;\n  if (absDifference < 0) {\n    absDifference = -absDifference;\n  }\n  *(int *)(&DAT_2000087c + index) = absDifference;\n  maxValue = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    maxValue = *(uint *)(&DAT_20000878 + index);\n  }\n  maxDifference = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < maxValue) {\n    maxDifference = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + index) = maxDifference;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    floatValue1 = calculate_result_08008e44(shiftedValue1 - DAT_20000cf4);\n    floatValue1 = reverse_float_08009054(floatValue1,DAT_20000ebc);\n    floatValue2 = calculate_result_08008e44(shiftedValue2 - DAT_20000cf8);\n    floatValue2 = reverse_float_08009054(floatValue2,DAT_20000ec0);\n    floatValue3 = calculate_result_08008e44(shiftedValue3 - DAT_20000cfc);\n    floatValue3 = reverse_float_08009054(floatValue3,DAT_20000ec4);\n    result1 = calculate_floating_point_08008eec(floatValue1,floatValue1);\n    result2 = calculate_floating_point_08008eec(floatValue2,floatValue2);\n    result1 = floating_point_addition_08008cdc(result1,result2);\n    result2 = calculate_floating_point_08008eec(floatValue3,floatValue3);\n    result1 = floating_point_addition_08008cdc(result1,result2);\n    processedData1 = reverse_bits_08008590(result1);\n    processedData1 = process_data_080098d0((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    result1 = float_to_uint_08008c30((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = result1;\n    result1 = reverse_float_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (isFloatInput == '\\0') {\n      floatValue4 = calculate_floating_point_08008eec(input4,result1);\n    }\n    else {\n      floatValue4 = reverse_float_08009054(0x3f800000,input4);\n    }\n    result2 = calculate_floating_point_08008eec(*(undefined4 *)(&DAT_20000890 + index),floatValue4);\n    *(undefined4 *)(&DAT_20000884 + index) = result2;\n    result2 = calculate_result_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result2 = calculate_floating_point_08008eec(result2,floatValue4);\n    processedData1 = reverse_bits_08008590(result2);\n    processedData1 = calculate_float_08009318((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    result2 = check_param_validity_08008bf0((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = result2;\n    result2 = calculate_result_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    result2 = calculate_floating_point_08008eec(result2,result1);\n    result2 = calculate_floating_point_08008eec(result2,DAT_20000edc);\n    result2 = reverse_float_08009054(result2,0x453b8000);\n    processedData1 = reverse_bits_08008590(result2);\n    processedData1 = calculate_float_08009318((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    result2 = calculate_shifted_value_08008ba0((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = result2;\n    maxValue = calculate_floating_point_08008eec(floatValue1,result1);\n    floatValue1 = calculate_floating_point_08008eec(floatValue2,result1);\n    floatValue2 = calculate_floating_point_08008eec(floatValue3,result1);\n    concatenatedResult = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (absDifference = check_concatenation_result_08009264(DAT_20000d0c,0), absDifference != 0)) {\n      floatValue3 = calculate_floating_point_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      result1 = calculate_floating_point_08008eec(DAT_20000d04,floatValue1);\n      floatValue3 = calculate_float_08008cd8(floatValue3,result1);\n      result1 = calculate_floating_point_08008eec(DAT_20000d08,floatValue2);\n      floatValue3 = calculate_float_08008cd8(floatValue3,result1);\n      processedData1 = reverse_bits_08008590(floatValue3);\n      absDifference = is_null_character_present_08008b24((int)processedData1,(int)((ulonglong)processedData1 >> 0x20),0x66666666,0x3fee6666);\n      if (absDifference != 0) {\n        absDifference = check_if_concatenation_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        concatenatedResult = DAT_20000d0c;\n        if (absDifference == 0) {\n          concatenatedResult = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        processedData1 = reverse_bits_08008590(floatValue3);\n        absDifference = is_input_empty_08008b60((int)processedData1,(int)((ulonglong)processedData1 >> 0x20),0x66666666,0xbfee6666);\n        if (absDifference != 0) {\n          processedData1 = reverse_bits_08008590(floatValue3);\n          processedData1 = calculate_080082d0(0,0x3ff00000,(int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n          processedData1 = calculate_bitwise_difference_08008640((int)processedData1,(int)((ulonglong)processedData1 >> 0x20),0,0x3fe00000);\n          processedData1 = process_data_080098d0((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n          floatValue3 = float_to_uint_08008c30((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n          processedData1 = reverse_bits_08008590(concatenatedResult);\n          result1 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n          result1 = calculate_floating_point_08008eec(result1,floatValue3);\n          processedData2 = reverse_bits_08008590(result1);\n          shiftedValue4 = reverse_bits_08008590(floatValue3);\n          shiftedValue4 = calculate_080082d0(0,0x3ff00000,(int)shiftedValue4,(int)((ulonglong)shiftedValue4 >> 0x20));\n          processedData2 = calculate_floating_point_08008894((int)processedData2,(int)((ulonglong)processedData2 >> 0x20),(int)shiftedValue4,\n                                (int)((ulonglong)shiftedValue4 >> 0x20));\n          processedData2 = process_data_080098d0((int)processedData2,(int)((ulonglong)processedData2 >> 0x20));\n          absDifference = is_null_character_present_08008b24((int)processedData1,(int)((ulonglong)processedData1 >> 0x20),(int)processedData2,\n                                (int)((ulonglong)processedData2 >> 0x20));\n          if (absDifference == 0) {\n            result1 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n            result1 = calculate_floating_point_08008eec(result1,floatValue3);\n            processedData1 = reverse_bits_08008590(result1);\n            processedData2 = reverse_bits_08008590(floatValue3);\n            processedData2 = calculate_080082d0(0,0x3ff00000,(int)processedData2,(int)((ulonglong)processedData2 >> 0x20));\n            processedData1 = calculate_floating_point_08008894((int)processedData1,(int)((ulonglong)processedData1 >> 0x20),(int)processedData2,\n                                  (int)((ulonglong)processedData2 >> 0x20));\n            processedData1 = process_data_080098d0((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n            concatenatedResult = float_to_uint_08008c30((int)processedData1,(int)((ulonglong)processedData1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = concatenatedResult;\n    result1 = calculate_final_result_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    absDifference = check_if_concatenation_empty_08009228(concatenatedResult,result1);\n    floatValue3 = result1;\n    if (absDifference != 0) {\n      floatValue3 = concatenatedResult;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = floatValue3;\n    absDifference = check_concatenated_params_08009250(result1,*(undefined4 *)(&DAT_20000884 + index));\n    if (absDifference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = floatValue1;\n    DAT_20000d08 = floatValue2;\n    DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = shiftedValue1;\n    DAT_20000cf8 = shiftedValue2;\n    DAT_20000cfc = shiftedValue3;\n    transform_and_concatenate_strings_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_results_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "isFloatInput",
                "uVar1": "floatValue1",
                "iVar2": "shiftedValue1",
                "iVar3": "shiftedValue2",
                "iVar4": "shiftedValue3",
                "uVar5": "floatValue2",
                "uVar6": "floatValue3",
                "uVar7": "result1",
                "uVar8": "result2",
                "uVar9": "maxValue",
                "iVar10": "index",
                "puVar11": "ptr",
                "iVar12": "absDifference",
                "uVar13": "maxDifference",
                "uVar14": "processedData1",
                "uVar15": "processedData2",
                "uVar16": "shiftedValue4",
                "local_20": "concatenatedResult",
                "local_1c": "floatValue4"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_parameters_080035ec",
            "code": "\nvoid initializeParameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_data_and_transform_strings_08003618",
            "code": "\nvoid updateDataAndTransformStrings_08003618(undefined4 inputData)\n\n{\n  undefined4 result1;\n  int offset;\n  undefined4 value1;\n  \n  offset = (uint)DAT_20000cf1 * 0x40;\n  value1 = *(undefined4 *)(&DAT_20000890 + offset);\n  result1 = calculateResult(inputData);\n  result1 = calculateFloatingPoint(value1,result1);\n  value1 = calculateResult(*(undefined4 *)(&DAT_20000880 + offset));\n  result1 = reverseFloat(result1,value1);\n  *(undefined4 *)(&DAT_20000890 + offset) = result1;\n  *(undefined4 *)(&DAT_20000880 + offset) = inputData;\n  *(undefined4 *)(&DAT_20000888 + offset) = 0;\n  *(undefined4 *)(&DAT_2000088c + offset) = 0;\n  (&DAT_20000895)[offset] = 0;\n  (&DAT_20000894)[offset] = 1;\n  transformAndConcatenateStrings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_data_and_transform_strings_08003618",
                "param_1": "inputData",
                "uVar1": "result1",
                "iVar2": "offset",
                "uVar3": "value1",
                "calculate_result_08008e44": "calculateResult",
                "calculate_floating_point_08008eec": "calculateFloatingPoint",
                "reverse_float_08009054": "reverseFloat",
                "transform_and_concatenate_strings_08002edc": "transformAndConcatenateStrings"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "write_string_bytes_0800369c",
            "code": "\nvoid write_string_bytes_0800369c(char *input_string)\n\n{\n  char *current_character;\n  \n  current_character = input_string;\n  while (*current_character != '\\0') {\n    write_byte_to_register_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "write_string_bytes_0800369c",
                "param_1": "input_string",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "write_string_to_register_080036c6",
            "code": "\nvoid write_string_to_register_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    write_byte_to_register_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "write_string_to_register_080036c6",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "bitwise_print_080036f0",
            "code": "\nvoid bitwisePrint_080036f0(uint value,int numBits)\n\n{\n  undefined4 bitValue;\n  int bitIndex;\n  uint bitMask;\n  \n  bitMask = 1 << (numBits - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < numBits; bitIndex = bitIndex + 1) {\n    if ((bitMask & value) == 0) {\n      bitValue = 0x30;\n    }\n    else {\n      bitValue = 0x31;\n    }\n    write_byte_to_register_08008250(bitValue);\n    bitMask = bitMask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "bitwise_print_080036f0",
                "param_1": "value",
                "param_2": "numBits",
                "local_10": "bitIndex",
                "local_c": "bitMask",
                "uVar1": "bitValue"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_bits_08003740",
            "code": "\nvoid print_bits_08003740(undefined data)\n\n{\n  print_bits_08003740(data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_bits_08003740",
                "param_1": "data",
                "bitwise_print_080036f0": "print_bits"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_param_bits_0800375c",
            "code": "\nvoid printParamBits_0800375c(undefined2 param)\n\n{\n  printBits(param,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_param_bits_0800375c",
                "param_1": "param",
                "bitwise_print_080036f0": "printBits"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "write_number_to_register_08003778",
            "code": "\nvoid write_number_to_register_08003778(uint number)\n\n{\n  uint counter;\n  uint remaining;\n  char digit_buffer [12];\n  byte num_digits;\n  \n  num_digits = 0;\n  remaining = number;\n  if (number == 0) {\n    write_byte_to_register(0x30);\n  }\n  else {\n    for (; remaining != 0; remaining = remaining / 10) {\n      counter = (uint)num_digits;\n      num_digits = num_digits + 1;\n      digit_buffer[counter + 1] = (char)(remaining % 10) + '0';\n    }\n    for (; num_digits != 0; num_digits = num_digits - 1) {\n      write_byte_to_register(digit_buffer[num_digits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "write_number_to_register_08003778",
                "param_1": "number",
                "uVar1": "counter",
                "local_1c": "remaining",
                "acStack_15": "digit_buffer",
                "local_9": "num_digits",
                "write_byte_to_register_08008250": "write_byte_to_register"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int value)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = value;\n  if (value < 0) {\n    write_byte_to_register_08008250(0x2d);\n    absoluteValue = -value;\n  }\n  write_number_to_register_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_and_print_float_08003826",
            "code": "\nvoid convert_and_print_float_08003826(uint input_float)\n\n{\n  int is_empty;\n  undefined4 result;\n  byte temp_byte;\n  uint temp_uint;\n  uint modified_input;\n  char result_string [13];\n  uint converted_value;\n  byte index;\n  byte loop_counter;\n  \n  is_empty = check_if_concatenation_empty_08009228(input_float,0);\n  modified_input = input_float;\n  if (is_empty != 0) {\n    write_byte_to_register_08008250(0x2d);\n    modified_input = input_float ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    modified_input = calculate_floating_point_08008eec(modified_input,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    modified_input = calculate_floating_point_08008eec(modified_input,0x41200000);\n  }\n  result = floating_point_addition_08008cdc(modified_input,0x3f000000);\n  index = 0;\n  converted_value = extract_and_convert_value_08009278(result);\n  result_string[DAT_20000ef9 + 1] = '.';\n  for (; converted_value != 0; converted_value = converted_value / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    temp_uint = (uint)index;\n    index = index + 1;\n    result_string[temp_uint + 1] = (char)(converted_value % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    temp_uint = (uint)index;\n    index = index + 1;\n    result_string[temp_uint + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    result_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    write_byte_to_register_08008250(result_string[index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_and_print_float_08003826",
                "param_1": "input_float",
                "iVar1": "is_empty",
                "uVar2": "result",
                "bVar3": "temp_byte",
                "uVar4": "temp_uint",
                "local_24": "modified_input",
                "acStack_1d": "result_string",
                "local_10": "converted_value",
                "local_a": "index",
                "local_9": "loop_counter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_grbl_080039a0",
            "code": "\nvoid initialize_grbl_080039a0(void)\n\n{\n  initialize_data();\n  display_version_info();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_grbl_080039a0",
                "initialize_data_08003980": "initialize_data",
                "display_grbl_version_info_08004228": "display_version_info"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "validate_and_display_memory_080039bc",
            "code": "\nvoid validate_and_display_memory_080039bc(void)\n\n{\n  int validation_result;\n  undefined4 error_code;\n  byte loop_counter;\n  \n  for (loop_counter = 0; loop_counter < 2; loop_counter = loop_counter + 1) {\n    validation_result = validate_memory_pattern_08004d2c(loop_counter,&DAT_20000d10);\n    if (validation_result == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      write_string_bytes_0800369c(&DAT_20000d10);\n      error_code = FUNC_080005b4(&DAT_20000d10);\n      display_error_message_08004030(error_code);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "validate_and_display_memory_080039bc",
                "iVar1": "validation_result",
                "uVar2": "error_code",
                "local_9": "loop_counter"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "check_flag_status_08003a18",
            "code": "\nvoid checkFlagStatus_08003a18(uint flag)\n\n{\n  if ((flag & 0x80) == 0) {\n    if ((flag & 0x40) == 0) {\n      if ((flag & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initializeAndCheckFlags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "check_flag_status_08003a18",
                "param_1": "flag",
                "initialize_and_check_flags_080025e8": "initializeAndCheckFlags"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_alarm_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processAlarm_08003a74(void)\n\n{\n  byte currentAlarm;\n  \n  currentAlarm = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        displayAlarmMessage(0xffffffff);\n        displayStatusMessage(1);\n        do {\n        } while( true );\n      }\n      displayAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((currentAlarm & 0x10) == 0) {\n      if ((currentAlarm & 1) != 0) {\n        printStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((currentAlarm & 8) != 0) {\n        updateStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((currentAlarm & 4) != 0) {\n        initializeData();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((currentAlarm & 2) != 0) {\n        initializeGlobalValuesIfNeeded();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_alarm_08003a74",
                "bVar1": "currentAlarm",
                "display_alarm_message_08004148": "displayAlarmMessage",
                "display_status_message_080041a0": "displayStatusMessage",
                "print_status_08004940": "printStatus",
                "update_status_0800587c": "updateStatus",
                "initialize_data_080058a0": "initializeData",
                "initialize_global_values_if_needed_0800585c": "initializeGlobalValuesIfNeeded"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint processCommand_08003b98(char *commandString)\n\n{\n  byte firstChar;\n  int returnValue;\n  undefined4 convertedValue;\n  uint updateResult;\n  undefined8 shiftedValue;\n  undefined4 secondValue;\n  undefined4 parameter;\n  byte currentIndex;\n  byte secondIndex;\n  \n  if (*commandString != '$') {\n    updateResult = FUNC_080005b4(commandString);\n    return updateResult;\n  }\n  currentIndex = 1;\n  secondIndex = '\\0';\n  firstChar = commandString[1];\n  if (firstChar == 0) {\n    print_grbl_commands_0800423c();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    currentIndex = 2;\n    if (commandString[2] != '\\0') {\n      return 3;\n    }\n    convert_coordinates_and_print_080044e8();\n    break;\n  case 0x24:\n    currentIndex = 2;\n    if (commandString[2] != '\\0') {\n      return 3;\n    }\n    print_configuration_settings_08004250();\n    break;\n  case 0x43:\n    currentIndex = 2;\n    if (commandString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_flags_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    currentIndex = 2;\n    if (commandString[2] != '\\0') {\n      return 3;\n    }\n    print_register_info_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_data_and_process_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      validate_and_display_memory_080039bc();\n    }\n    break;\n  case 0x4e:\n    currentIndex = 2;\n    if (commandString[2] == '\\0') {\n      for (secondIndex = 0; secondIndex < 2; secondIndex = secondIndex + 1) {\n        returnValue = validate_memory_pattern_08004d2c(secondIndex,commandString);\n        if (returnValue == 0) {\n          display_error_message_08004030(10);\n        }\n        else {\n          print_absolute_value_08004900(secondIndex,commandString);\n        }\n      }\n      return 0;\n    }\n    secondIndex = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = parse_and_convert_08002638(commandString,&currentIndex,&parameter);\n    if (returnValue == 0) {\n      return 1;\n    }\n    firstChar = currentIndex + 1;\n    if (commandString[currentIndex] != '=') {\n      return 3;\n    }\n    currentIndex = firstChar;\n    if (secondIndex == '\\0') {\n      returnValue = parse_and_convert_08002638(commandString,&currentIndex,&secondValue);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (commandString[currentIndex] == '\\0') {\n        convertedValue = extract_and_convert_value_08009278(parameter);\n        updateResult = update_param_data_08004e30(convertedValue,secondValue);\n        return updateResult;\n      }\n      return 3;\n    }\n    do {\n      commandString[(uint)currentIndex - (uint)firstChar] = commandString[currentIndex];\n      updateResult = (uint)currentIndex;\n      currentIndex = currentIndex + 1;\n    } while (commandString[updateResult] != '\\0');\n    secondIndex = firstChar;\n    secondIndex = FUNC_080005b4(commandString);\n    if (secondIndex != 0) {\n      return (uint)secondIndex;\n    }\n    shiftedValue = reverse_bits_08008590(parameter);\n    shiftedValue = calculate_shifted_value_08009798((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n    secondIndex = check_param_validity_08008bf0((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n    store_data_with_checksum_08004bc0(secondIndex,commandString);\n    break;\n  case 0x58:\n    currentIndex = 2;\n    if (commandString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "commandString",
                "bVar1": "firstChar",
                "iVar2": "returnValue",
                "uVar3": "convertedValue",
                "uVar4": "updateResult",
                "uVar5": "shiftedValue",
                "local_14": "secondValue",
                "local_10": "parameter",
                "local_a": "currentIndex",
                "local_9": "secondIndex"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_user_input_08003f34",
            "code": "\nvoid process_user_input_08003f34(void)\n\n{\n  byte byteRead;\n  undefined4 returnValue;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      byteRead = check_flag_and_process_byte_08008286();\n      if (byteRead == 0xff) {\n        return;\n      }\n      if ((byteRead == 10) || (byteRead == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < byteRead) && (byteRead != 0x2f)) {\n          if (byteRead == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            display_error_message(0xd);\n            initialize_data();\n          }\n          else if ((byteRead < 0x61) || (0x7a < byteRead)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteRead;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteRead - 0x20;\n          }\n        }\n      }\n      else if (byteRead == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_alarm();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      display_error_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      returnValue = process_command(&DAT_20000d10);\n      display_error_message(returnValue);\n    }\n    initialize_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_user_input_08003f34",
                "bVar1": "byteRead",
                "uVar2": "returnValue",
                "uVar3": "index",
                "process_alarm_08003a74": "process_alarm",
                "display_error_message_08004030": "display_error_message",
                "initialize_data_08003980": "initialize_data",
                "process_command_08003b98": "process_command"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    write_string_to_register_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    write_string_to_register_080036c6(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      write_string_to_register_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      write_string_to_register_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      write_string_to_register_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      write_string_to_register_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      write_string_to_register_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      write_string_to_register_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      write_string_to_register_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      write_string_to_register_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      write_string_to_register_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      write_string_to_register_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      write_string_to_register_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      write_string_to_register_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      write_string_to_register_080036c6(\"Line overflow\");\n    }\n    write_string_to_register_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  writeToRegister(\"ALARM: \");\n  if (errorCode == -2) {\n    writeToRegister(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    writeToRegister(\"Hard limit\");\n  }\n  writeToRegister(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined status)\n\n{\n  writeToRegister(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    writeToRegister(\"Reset to continue\");\n    break;\n  case 2:\n    writeToRegister(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    writeToRegister(\"Caution: Unlocked\");\n    break;\n  case 4:\n    writeToRegister(\"Enabled\");\n    break;\n  case 5:\n    writeToRegister(\"Disabled\");\n  }\n  writeToRegister(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "display_grbl_version_info_08004228",
            "code": "\nvoid displayGrblVersionInfo_08004228(void)\n\n{\n  writeStringToRegister(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "display_grbl_version_info_08004228",
                "write_string_to_register_080036c6": "writeStringToRegister"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_commands_0800423c",
            "code": "\nvoid printGrblCommands_0800423c(void)\n\n{\n  writeToRegister(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_commands_0800423c",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_settings_08004250",
            "code": "\nvoid printConfigurationSettings_08004250(void)\n\n{\n  undefined4 accelerationAsFloat;\n  \n  write_string_to_register_080036c6(&DAT_0800b8b8);\n  convert_and_print_float_08003826(DAT_20000ebc);\n  write_string_to_register_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  convert_and_print_float_08003826(DAT_20000ec0);\n  write_string_to_register_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  convert_and_print_float_08003826(DAT_20000ec4);\n  write_string_to_register_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  print_absolute_value_080037fc(DAT_20000ec9);\n  write_string_to_register_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  convert_and_print_float_08003826(DAT_20000ecc);\n  write_string_to_register_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_and_print_float_08003826(DAT_20000ed0);\n  write_string_to_register_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  print_absolute_value_080037fc(DAT_20000ed4);\n  write_string_to_register_080036c6(\" (step port invert mask, int:\");\n  print_param_bits_0800375c(DAT_20000ed4);\n  write_string_to_register_080036c6(\")\\r\\n$7=\");\n  print_absolute_value_080037fc(DAT_20000ef8);\n  write_string_to_register_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  accelerationAsFloat = reverse_float_08009054(DAT_20000edc,0x45610000);\n  convert_and_print_float_08003826(accelerationAsFloat);\n  write_string_to_register_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_and_print_float_08003826(DAT_20000ee0);\n  write_string_to_register_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_and_print_float_08003826(DAT_20000ed8);\n  write_string_to_register_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  print_absolute_value_080037fc(DAT_20000efa);\n  write_string_to_register_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  print_absolute_value_080037fc(DAT_20000ef9);\n  write_string_to_register_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 1) != 0);\n  write_string_to_register_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 2) != 0);\n  write_string_to_register_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 4) != 0);\n  write_string_to_register_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 8) != 0);\n  write_string_to_register_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 0x10) != 0);\n  write_string_to_register_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  print_absolute_value_080037fc(DAT_20000ee6);\n  write_string_to_register_080036c6(\" (homing dir invert mask, int:\");\n  print_param_bits_0800375c(DAT_20000ee6);\n  write_string_to_register_080036c6(\")\\r\\n$19=\");\n  convert_and_print_float_08003826(DAT_20000ee8);\n  write_string_to_register_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_and_print_float_08003826(DAT_20000eec);\n  write_string_to_register_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_absolute_value_080037fc(DAT_20000ef0);\n  write_string_to_register_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_and_print_float_08003826(DAT_20000ef4);\n  write_string_to_register_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_absolute_value_080037fc(DAT_20000ed6);\n  write_string_to_register_080036c6(\" (dir port invert mask, int:\");\n  print_param_bits_0800375c(DAT_20000ed6);\n  write_string_to_register_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_settings_08004250",
                "uVar1": "accelerationAsFloat"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "convert_coordinates_and_print_080044e8",
            "code": "\nvoid convertCoordinatesAndPrint_080044e8(void)\n\n{\n  int dataCheckResult;\n  undefined4 convertedFloat;\n  undefined8 reversedBits;\n  undefined4 dataStack [3];\n  byte iteration;\n  byte count;\n  \n  count = 0;\n  while( true ) {\n    if (7 < count) {\n      write_string_to_register_080036c6(\"[G92:\");\n      for (iteration = 0; iteration < 3; iteration = iteration + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_and_print_float_08003826(*(undefined4 *)(&DAT_20000e74 + (iteration + 10) * 4));\n        }\n        else {\n          reversedBits = reverse_bits_08008590(*(undefined4 *)(&DAT_20000e74 + (iteration + 10) * 4));\n          reversedBits = calculate_bitwise_difference_08008640((int)reversedBits,(int)((ulonglong)reversedBits >> 0x20),0x57e16865,0x3fa42851);\n          convertedFloat = float_to_uint_08008c30((int)reversedBits,(int)((ulonglong)reversedBits >> 0x20));\n          convert_and_print_float_08003826(convertedFloat);\n        }\n        if (iteration < 2) {\n          write_string_to_register_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          write_string_to_register_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    dataCheckResult = check_and_store_data_08004d7c(count,dataStack);\n    if (dataCheckResult == 0) break;\n    write_string_to_register_080036c6(&DAT_0800bb98);\n    switch(count) {\n    case 0:\n      write_string_to_register_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      write_string_to_register_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      write_string_to_register_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      write_string_to_register_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      write_string_to_register_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      write_string_to_register_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      write_string_to_register_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      write_string_to_register_080036c6(&DAT_0800bbb8);\n    }\n    for (iteration = 0; iteration < 3; iteration = iteration + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_and_print_float_08003826(dataStack[iteration]);\n      }\n      else {\n        reversedBits = reverse_bits_08008590(dataStack[iteration]);\n        reversedBits = calculate_bitwise_difference_08008640((int)reversedBits,(int)((ulonglong)reversedBits >> 0x20),0x57e16865,0x3fa42851);\n        convertedFloat = float_to_uint_08008c30((int)reversedBits,(int)((ulonglong)reversedBits >> 0x20));\n        convert_and_print_float_08003826(convertedFloat);\n      }\n      if (iteration < 2) {\n        write_string_to_register_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        write_string_to_register_080036c6(&DAT_0800b764);\n      }\n    }\n    count = count + 1;\n  }\n  display_error_message_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "convert_coordinates_and_print_080044e8",
                "iVar1": "dataCheckResult",
                "uVar2": "convertedFloat",
                "uVar3": "reversedBits",
                "auStack_18": "dataStack",
                "local_a": "iteration",
                "local_9": "count"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_register_info_080046d0",
            "code": "\nvoid printRegisterInfo_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    writeStringToRegister(&DAT_0800bbc8);\n    break;\n  case 1:\n    writeStringToRegister(&DAT_0800bbcc);\n    break;\n  case 2:\n    writeStringToRegister(&DAT_0800bbd0);\n    break;\n  case 3:\n    writeStringToRegister(&DAT_0800bbd4);\n    break;\n  case 4:\n    writeStringToRegister(&DAT_0800bbd8);\n  }\n  writeStringToRegister(&DAT_0800bbe0);\n  printAbsValue(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      writeStringToRegister(&DAT_0800bbe4);\n    }\n    else {\n      writeStringToRegister(&DAT_0800bbec);\n    }\n  }\n  else {\n    writeStringToRegister(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    writeStringToRegister(&DAT_0800bc04);\n  }\n  else {\n    writeStringToRegister(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    writeStringToRegister(&DAT_0800bc14);\n  }\n  else {\n    writeStringToRegister(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    writeStringToRegister(&DAT_0800bc24);\n  }\n  else {\n    writeStringToRegister(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    writeStringToRegister(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      writeStringToRegister(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      writeStringToRegister(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    writeStringToRegister(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      writeStringToRegister(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      writeStringToRegister(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    writeStringToRegister(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      writeStringToRegister(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      writeStringToRegister(&DAT_0800bc48);\n    }\n  }\n  writeStringToRegister(&DAT_0800bc50);\n  printAbsValue(DAT_20000e88);\n  writeStringToRegister(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convertAndPrintFloat(DAT_20000e78);\n  }\n  else {\n    uVar2 = reverseBits(DAT_20000e78);\n    uVar2 = calculateBitwiseDiff((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = floatToUint((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    convertAndPrintFloat(uVar1);\n  }\n  writeStringToRegister(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_register_info_080046d0",
                "write_string_to_register_080036c6": "writeStringToRegister",
                "print_absolute_value_080037fc": "printAbsValue",
                "convert_and_print_float_08003826": "convertAndPrintFloat",
                "reverse_bits_08008590": "reverseBits",
                "calculate_bitwise_difference_08008640": "calculateBitwiseDiff",
                "float_to_uint_08008c30": "floatToUint"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_absolute_value_08004900",
            "code": "\nvoid printAbsoluteValue_08004900(undefined value,undefined4 bytes)\n\n{\n  registerWriteString(&DAT_0800bc58);\n  printAbsValue(value);\n  registerWriteString(&DAT_0800bc5c);\n  writeStringBytes(bytes);\n  registerWriteString(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_absolute_value_08004900",
                "param_1": "value",
                "param_2": "bytes",
                "write_string_to_register_080036c6": "registerWriteString",
                "print_absolute_value_080037fc": "printAbsValue",
                "write_string_bytes_0800369c": "writeStringBytes"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid printStatus_08004940(void)\n\n{\n  undefined4 result;\n  uint temp;\n  undefined4 tempResult;\n  undefined8 tempValue1;\n  undefined8 tempValue2;\n  undefined4 statusData [6];\n  byte index;\n  \n  statusData[3] = DAT_20000eac;\n  statusData[4] = DAT_20000eb0;\n  statusData[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    write_string_to_register_080036c6(\"<Idle\");\n    break;\n  case 2:\n    write_string_to_register_080036c6(\"<Queue\");\n    break;\n  case 3:\n    write_string_to_register_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    write_string_to_register_080036c6(\"<Hold\");\n    break;\n  case 5:\n    write_string_to_register_080036c6(\"<Home\");\n    break;\n  case 6:\n    write_string_to_register_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    write_string_to_register_080036c6(\"<Check\");\n  }\n  write_string_to_register_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    result = calculate_result_08008e44(statusData[index + 3]);\n    temp = (uint)index;\n    result = reverse_float_08009054(result,(&DAT_20000ebc)[index]);\n    statusData[temp] = result;\n    if ((DAT_20000ee4 & 1) != 0) {\n      tempValue1 = reverse_bits_08008590(statusData[index]);\n      tempValue1 = calculate_bitwise_difference_08008640((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),0x57e16865,0x3fa42851);\n      temp = (uint)index;\n      result = float_to_uint_08008c30((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n      statusData[temp] = result;\n    }\n    convert_and_print_float_08003826(statusData[index]);\n    write_string_to_register_080036c6(&DAT_0800bbbc);\n  }\n  write_string_to_register_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      tempResult = statusData[index];\n      result = floating_point_addition_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      temp = (uint)index;\n      result = calculate_float_08008cd8(tempResult,result);\n      statusData[temp] = result;\n    }\n    else {\n      tempValue1 = reverse_bits_08008590(statusData[index]);\n      result = floating_point_addition_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      tempValue2 = reverse_bits_08008590(result);\n      tempValue2 = calculate_bitwise_difference_08008640((int)tempValue2,(int)((ulonglong)tempValue2 >> 0x20),0x57e16865,0x3fa42851);\n      tempValue1 = calculate_080082d0((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20),(int)tempValue2,\n                           (int)((ulonglong)tempValue2 >> 0x20));\n      temp = (uint)index;\n      result = float_to_uint_08008c30((int)tempValue1,(int)((ulonglong)tempValue1 >> 0x20));\n      statusData[temp] = result;\n    }\n    convert_and_print_float_08003826(statusData[index]);\n    if (index < 2) {\n      write_string_to_register_080036c6(&DAT_0800bbbc);\n    }\n  }\n  write_string_to_register_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "statusData",
                "local_11": "index",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "tempResult",
                "uVar4": "tempValue1",
                "uVar5": "tempValue2"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "store_data_with_checksum_08004bc0",
            "code": "\nvoid storeDataWithChecksum_08004bc0(byte inputByte,undefined4 inputValue)\n\n{\n  store_data_with_checksum_08000374((ushort)inputByte * 0x101 + 0x300,inputValue,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "store_data_with_checksum_08004bc0",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "store_data_with_checksum_08004bf4",
            "code": "\nvoid store_data_with_checksum_08004bf4(byte data_byte,undefined4 data)\n\n{\n  store_data_with_checksum_08004bf4_08000374((ushort)data_byte * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "store_data_with_checksum_08004bf4",
                "param_1": "data_byte",
                "param_2": "data"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  store_data_08000340(0,5);\n  store_data_with_checksum_08000374(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_param)\n\n{\n  if (input_param != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c48_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "validate_memory_pattern_08004d2c",
            "code": "\nbool validateMemoryPattern_08004d2c(byte byteValue,undefined *memoryPointer)\n\n{\n  int isValidPattern;\n  \n  isValidPattern = check_memory_pattern_080003ec(memoryPointer,(ushort)byteValue * 0x101 + 0x300,0x100);\n  if (isValidPattern == 0) {\n    *memoryPointer = 0;\n    store_data_with_checksum_08004bc0(byteValue,memoryPointer);\n  }\n  return isValidPattern != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "validate_memory_pattern_08004d2c",
                "param_1": "byteValue",
                "param_2": "memoryPointer",
                "iVar1": "isValidPattern"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_store_data_08004d7c",
            "code": "\nbool checkAndStoreData_08004d7c(byte data,undefined4 memory)\n\n{\n  int patternCheckResult;\n  \n  patternCheckResult = check_memory_pattern_080003ec(memory,(ushort)data * 0xd + 0x200,0xc);\n  if (patternCheckResult == 0) {\n    fill_memory_with_pattern_0800b430(memory,0,0xc);\n    store_data_with_checksum_08004bf4(data,memory);\n  }\n  return patternCheckResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_store_data_08004d7c",
                "param_1": "data",
                "param_2": "memory",
                "iVar1": "patternCheckResult"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_memory_and_initialize_08004dd2",
            "code": "\nundefined4 check_memory_and_initialize_08004dd2(void)\n\n{\n  byte memory_pattern;\n  int memory_check_result;\n  \n  memory_pattern = get_memory_pattern_08000310(0);\n  if (memory_pattern == 5) {\n    memory_check_result = check_memory_pattern_080003ec(&DAT_20000ebc,1,0x40);\n    if (memory_check_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memory_pattern) {\n      return 0;\n    }\n    memory_check_result = check_memory_pattern_080003ec(&DAT_20000ebc,1,0x28);\n    if (memory_check_result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_memory_and_initialize_08004dd2",
                "bVar1": "memory_pattern",
                "iVar2": "memory_check_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_param_data_08004e30",
            "code": "\nundefined4 updateParamData_08004e30(int paramCode,uint paramValue)\n\n{\n  undefined4 result;\n  int checkResult;\n  undefined8 convertedValue;\n  \n  switch(paramCode) {\n  case 0:\n  case 1:\n  case 2:\n    checkResult = check_concatenation_result_0800923c(paramValue,0);\n    if (checkResult != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[paramCode] = paramValue;\n    break;\n  case 3:\n    checkResult = check_if_concatenation_empty_08009228(paramValue,0x40400000);\n    if (checkResult != 0) {\n      return 9;\n    }\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_combined_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = paramValue;\n    break;\n  case 5:\n    DAT_20000ed0 = paramValue;\n    break;\n  case 6:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_combined_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_08008eec(paramValue,0x42700000);\n    DAT_20000edc = calculate_floating_point_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = paramValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = paramValue;\n    break;\n  case 0xb:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_combined_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_combined_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    checkResult = check_if_params_concatenated_08009214(paramValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    checkResult = check_if_params_concatenated_08009214(paramValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    checkResult = check_if_params_concatenated_08009214(paramValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    checkResult = check_if_params_concatenated_08009214(paramValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    extract_flag_from_input_0800192c();\n    break;\n  case 0x11:\n    checkResult = check_if_params_concatenated_08009214(paramValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = paramValue;\n    break;\n  case 0x14:\n    DAT_20000eec = paramValue;\n    break;\n  case 0x15:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_combined_value_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = paramValue;\n    break;\n  case 0x17:\n    convertedValue = reverse_bits_08008590(paramValue);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = check_param_validity_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_param_data_08004e30",
                "param_1": "paramCode",
                "param_2": "paramValue",
                "uVar1": "result",
                "iVar2": "checkResult",
                "uVar3": "convertedValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_initialize_memory_080051b4",
            "code": "\nvoid check_and_initialize_memory_080051b4(void)\n\n{\n  int result;\n  undefined dataBuffer [15];\n  byte counter;\n  \n  result = check_memory_and_initialize_08004dd2();\n  if (result == 0) {\n    display_error_message_08004030(10);\n    initialize_data_08004c48(1);\n    print_configuration_settings_08004250();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = check_and_store_data_08004d7c(counter,dataBuffer);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_initialize_memory_080051b4",
                "iVar1": "result",
                "auStack_18": "dataBuffer",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_data_08005238",
            "code": "\nvoid initialize_data_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  execute_initialization_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_data_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "execute_initialization_08005250",
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_parameter_0800525c",
            "code": "\nvoid process_parameter_0800525c(byte input_param)\n\n{\n  if ((int)(char)input_param != (uint)DAT_20000e12) {\n    handle_alarm();\n    if (input_param == 0) {\n      initialize_system();\n      DAT_20000e12 = input_param;\n    }\n    else {\n      if ((char)input_param < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_param;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_parameter_0800525c",
                "param_1": "input_param",
                "process_alarm_loop_08002fd4": "handle_alarm",
                "execute_initialization_08005250": "initialize_system"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_flags_in_memory_080052ac",
            "code": "\n\n\nvoid updateFlagsInMemory_080052ac(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_flags_in_memory_080052ac",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_status_bits_080052dc",
            "code": "\n\n\nvoid updateStatusBits_080052dc(uint status)\n\n{\n  _DAT_40021014 = status | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_status_bits_080052dc",
                "param_1": "status"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_and_update_minimum_value_08005324",
            "code": "\nvoid calculateAndUpdateMinimumValue_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_minimum_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_and_update_minimum_value_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_and_check_threshold_08005360",
            "code": "\nbool updateCounterAndCheckThreshold_08005360(void)\n\n{\n  bool exceedsThreshold;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  exceedsThreshold = 420000 < DAT_20000e2c;\n  if (exceedsThreshold) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return exceedsThreshold;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_and_check_threshold_08005360",
                "bVar1": "exceedsThreshold"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_status_080053a0",
            "code": "\nvoid updateStatus_080053a0(void)\n\n{\n  int iVar1;\n  \n  update_status_bits_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getCurrentItem();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      initializeFlags();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculateAndUpdateMinimumValue(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculateAndUpdateMinimumValue(DAT_20000e30);\n          }\n          else {\n            initializeFlags();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculateAndUpdateMinimumValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculateAndUpdateMinimumValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = updateCounterAndCheckThreshold();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculateAndUpdateMinimumValue(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      updateData();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_status_080053a0",
                "get_current_item_08002f74": "getCurrentItem",
                "initialize_flags_080057e4": "initializeFlags",
                "calculate_and_update_minimum_value_08005324": "calculateAndUpdateMinimumValue",
                "update_counter_and_check_threshold_08005360": "updateCounterAndCheckThreshold",
                "update_dat_20000cf1_if_not_equal_dat_20000cf0_08002f40": "updateData"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_flags_in_memory_08005760",
            "code": "\nvoid update_flags_in_memory_08005760(void)\n\n{\n  update_flags_in_memory_08005760_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_flags_in_memory_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "update_flags_in_memory_08005778",
            "code": "\nvoid update_flags_in_memory_08005778(void)\n\n{\n  update_flags_in_memory_08005778_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "update_flags_in_memory_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_global_values_08005790",
            "code": "\nvoid initializeGlobalValues_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setGlobalValue(0x69);\n    setGlobalVariable((DAT_20000ec9 + 5) * 0x15);\n    setFlagsAndValues();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_global_values_08005790",
                "set_global_value_08007c40": "setGlobalValue",
                "set_global_variable_08007c5e": "setGlobalVariable",
                "set_flags_and_values_08007b70": "setFlagsAndValues"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "initialize_flags_080057e4",
            "code": "\nvoid initialize_flags_080057e4(void)\n\n{\n  clear_flags();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "initialize_flags_080057e4",
                "clear_flags_08007bc2": "clear_flags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_memory_08005814",
            "code": "\nvoid initializeMemory_08005814(void)\n\n{\n  fill_memory_with_pattern_0800b430(&DAT_20000e14,0,0x24);\n  calculateAndUpdateMinimumValue(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_memory_08005814",
                "calculate_and_update_minimum_value_08005324": "calculateAndUpdateMinimumValue"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_application_0800583c",
            "code": "\nvoid initialize_application_0800583c(void)\n\n{\n  update_flags_in_memory(DAT_20000ed4);\n  initialize_global_values();\n  initialize_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_application_0800583c",
                "update_flags_in_memory_080052ac": "update_flags_in_memory",
                "initialize_global_values_08005790": "initialize_global_values",
                "initialize_flags_080057e4": "initialize_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_global_values_if_needed_0800585c",
            "code": "\nvoid initialize_global_values_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_global_values();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_global_values_if_needed_0800585c",
                "initialize_global_values_08005790": "initialize_global_values"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initializeData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    updateDataAndTransformStrings(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateAndUpdateMinimumValue(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "update_data_and_transform_strings_08003618": "updateDataAndTransformStrings",
                "calculate_and_update_minimum_value_08005324": "calculateAndUpdateMinimumValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 processByte_08005900(byte byteValue)\n\n{\n  if (byteValue == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byteValue < 0x7f) {\n    if (byteValue == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byteValue < 0x40) {\n      if (byteValue == 0x18) {\n        initialize_and_check_flags_080025e8();\n        return 1;\n      }\n      if (byteValue == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_interrupt_if_not_executed_08005984",
            "code": "\nundefined4 execute_interrupt_if_not_executed_08005984(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_software_interrupt_0800597c(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_interrupt_if_not_executed_08005984",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_memory_080059b4",
            "code": "\n\n\nundefined4 initializeMemory_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  updateMemorySize(16000);\n  configureMemory(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_memory_080059b4",
                "update_memory_08006d72": "updateMemorySize",
                "configure_memory_08006ce0": "configureMemory"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_08005a84",
            "code": "\nundefined4 get_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "wait_for_data_08005a98",
            "code": "\nvoid waitForData_08005a98(int targetValue)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = get_data_08005a84();\n  do {\n    currentValue = get_data_08005a84();\n  } while (currentValue < (uint)(targetValue + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "wait_for_data_08005a98",
                "param_1": "targetValue",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_value_08005bdc",
            "code": "\nvoid writeValue_08005bdc(byte byteValue,uint bitValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((bitValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((bitValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_value_08005bdc",
                "param_1": "byteValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_param_08005c30",
            "code": "\n\n\nbool checkAndSetParam_08005c30(int input)\n\n{\n  bool isInRange;\n  \n  isInRange = input - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = input + -1;\n    writeValue(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_param_08005c30",
                "param_1": "input",
                "bVar1": "isInRange",
                "write_value_08005bdc": "writeValue"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_conditions_08005cec",
            "code": "\n\n\nundefined4 check_conditions_08005cec(uint *params)\n\n{\n  int counter;\n  uint value;\n  \n  if ((*params & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (params[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      counter = get_data();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        value = get_data();\n        if (counter + 5000U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)params[1],_DAT_40023800));\n      if (params[1] == 1) {\n        counter = get_data();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          value = get_data();\n          if (counter + 5000U <= value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        counter = get_data();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          value = get_data();\n          if (counter + 5000U <= value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*params & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (params[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (params[3] == 0) {\n      _DAT_42470000 = 0;\n      counter = get_data();\n      while ((_DAT_40023800 & 2) != 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      counter = get_data();\n      while ((_DAT_40023800 & 2) == 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = params[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*params & 8) != 0) {\n    if (params[5] == 0) {\n      _DAT_42470e80 = 0;\n      counter = get_data();\n      while ((_DAT_40023874 & 2) != 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      counter = get_data();\n      while ((_DAT_40023874 & 2) == 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*params & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    counter = get_data();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      value = get_data();\n      if (counter + 100U <= value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    counter = get_data();\n    while ((_DAT_40023870 & 2) != 0) {\n      value = get_data();\n      if (counter + 5000U <= value) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)params[2]);\n    if (params[2] == 1) {\n      counter = get_data();\n      while ((_DAT_40023870 & 2) == 0) {\n        value = get_data();\n        if (counter + 5000U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      counter = get_data();\n      while ((_DAT_40023870 & 2) != 0) {\n        value = get_data();\n        if (counter + 5000U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (params[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (params[6] == 2) {\n      _DAT_42470060 = 0;\n      counter = get_data();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           params[0xb] << 0x18 |\n           params[8] | params[9] << 6 | ((params[10] >> 1) - 1) * 0x10000 | params[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      counter = get_data();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      counter = get_data();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value = get_data();\n        if (counter + 100U <= value) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_conditions_08005cec",
                "param_1": "params",
                "iVar1": "counter",
                "uVar2": "value",
                "get_data_08005a84": "get_data"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_clock_speed_0800618c",
            "code": "\n\n\nundefined4 initializeClockSpeed_0800618c(uint *configParams,uint paramLength)\n\n{\n  int dataValue;\n  uint currentValue;\n  uint thresholdValue;\n  undefined8 clockSpeed;\n  \n  if ((_DAT_40023c00 & 0xf) < paramLength) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramLength);\n    if (paramLength != (paramLength & 0xf)) {\n      return 1;\n    }\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configParams[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getData();\n      thresholdValue = dataValue + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (configParams[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      dataValue = getData();\n      thresholdValue = dataValue + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentValue = getData();\n          if (thresholdValue <= currentValue) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramLength);\n    if (paramLength != (paramLength & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40023808 = configParams[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40023808 = configParams[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40023808 = configParams[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockSpeed = calculateClockSpeed();\n  checkAndSetParameter((uint)clockSpeed / 1000,(int)((ulonglong)clockSpeed >> 0x20),(uint)clockSpeed * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_clock_speed_0800618c",
                "param_1": "configParams",
                "param_2": "paramLength",
                "iVar1": "dataValue",
                "uVar2": "currentValue",
                "uVar3": "thresholdValue",
                "uVar4": "clockSpeed",
                "get_data_08005a84": "getData",
                "calculate_and_set_clock_speed_08006628": "calculateClockSpeed",
                "check_and_set_param_08005c30": "checkAndSetParameter"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_registers_with_params_0800640c",
            "code": "\n\n\nvoid updateRegistersWithParams_0800640c(int paramCondition,uint registerValue1,uint registerValue2)\n\n{\n  undefined4 registerValue3;\n  undefined4 registerValue4;\n  undefined4 registerValue5;\n  undefined4 registerValue6;\n  undefined4 registerValue7;\n  \n  if (paramCondition == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    registerValue3 = 0x100;\n    registerValue4 = 2;\n    registerValue6 = 3;\n    registerValue5 = 0;\n    registerValue7 = 0;\n    update_registers_08006e88(0x40020000,&registerValue3);\n    _DAT_40023808 = registerValue2 | registerValue1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    registerValue3 = 0x200;\n    registerValue4 = 2;\n    registerValue6 = 3;\n    registerValue5 = 0;\n    registerValue7 = 0;\n    update_registers_08006e88(0x40020800,&registerValue3);\n    _DAT_40023808 = registerValue1 | registerValue2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_registers_with_params_0800640c",
                "param_1": "paramCondition",
                "param_2": "registerValue1",
                "param_3": "registerValue2",
                "local_1c": "registerValue3",
                "local_18": "registerValue4",
                "local_14": "registerValue5",
                "local_10": "registerValue6",
                "local_c": "registerValue7"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculateClockSpeed_080064ec(void)\n\n{\n  uint clockConfig;\n  uint clockSpeed;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockSpeed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "uVar1": "clockConfig",
                "local_c": "clockSpeed"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_and_set_clock_speed_08006628",
            "code": "\n\n\nuint calculateAndSetClockSpeed_08006628(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_clock_speed_080064ec();\n  DAT_20000000 = clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_and_set_clock_speed_08006628",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_adjusted_clock_speed_08006680",
            "code": "\n\n\nuint calculateAdjustedClockSpeed_08006680(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_set_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_adjusted_clock_speed_08006680",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_speed_080066cc",
            "code": "\n\n\nuint calculateClockSpeed_080066cc(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_set_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_speed_080066cc",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_memory_configuration_08006950",
            "code": "\n\n\nvoid setMemoryConfiguration_08006950(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_memory_configuration_08006950",
                "param_1": "configuration"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_bits_08006998",
            "code": "\n\n\nuint getShiftedBits_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_offset_080069e4",
            "code": "\nvoid setBitAtOffset_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_offset_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteToCheck)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteToCheck >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteToCheck & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteToCheck"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_value_08006a58",
            "code": "\nvoid setBitValue_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_value_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_at_position_08006a8c",
            "code": "\nvoid setBitAtPosition_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_at_position_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte byteValue,uint bitValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((bitValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((bitValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "byteValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extractedByte_08006b54(byte inputByte)\n\n{\n  byte resultByte;\n  \n  if ((char)inputByte < '\\0') {\n    resultByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    resultByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return resultByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "resultByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "extract_bits_08006ba0",
            "code": "\nuint extract_bits_08006ba0(uint bit_offset,uint source,uint destination)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  return destination & (1 << (bit_offset & 0xff)) - 1U |\n         ((1 << (shift_amount & 0xff)) - 1U & source) << (bit_offset & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "extract_bits_08006ba0",
                "param_1": "bit_offset",
                "param_2": "source",
                "param_3": "destination",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "mask_and_shift_bits_08006c04",
            "code": "\nvoid maskAndShiftBits_08006c04(uint inputValue,uint bitPosition,uint *outputValue1,uint *outputValue2)\n\n{\n  uint remainingBits;\n  \n  bitPosition = bitPosition & 7;\n  remainingBits = 7 - bitPosition;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (bitPosition + 4 < 7) {\n    bitPosition = 0;\n  }\n  else {\n    bitPosition = bitPosition - 3;\n  }\n  *outputValue1 = (1 << (remainingBits & 0xff)) - 1U & inputValue >> (bitPosition & 0xff);\n  *outputValue2 = (1 << (bitPosition & 0xff)) - 1U & inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "mask_and_shift_bits_08006c04",
                "param_1": "inputValue",
                "param_2": "bitPosition",
                "param_3": "outputValue1",
                "param_4": "outputValue2",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "run_infinite_loop_08006c70",
            "code": "\nvoid runInfiniteLoop_08006c70(void)\n\n{\n  waitForSynchronization(0xf);\n  waitForSynchronization(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "run_infinite_loop_08006c70",
                "DataSynchronizationBarrier": "waitForSynchronization"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_update_memory_08006c9c",
            "code": "\n\n\nbool checkAndUpdateMemory_08006c9c(int inputValue)\n\n{\n  bool isInRange;\n  \n  isInRange = inputValue - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputValue + -1;\n    updateMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_update_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "update_memory_08006b00": "updateMemory"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "configure_memory_08006ce0",
            "code": "\nvoid configureMemory_08006ce0(undefined4 configurationParameter)\n\n{\n  set_memory_configuration_08006950(configurationParameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "configure_memory_08006ce0",
                "param_1": "configurationParameter"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "update_memory_with_shifted_bits_08006cf6",
            "code": "\nvoid updateMemoryWithShiftedBits_08006cf6(char input,undefined4 firstParam,undefined4 secondParam)\n\n{\n  undefined4 shiftedBits;\n  \n  shiftedBits = get_shifted_bits_08006998();\n  shiftedBits = extract_bits_08006ba0(shiftedBits,firstParam,secondParam);\n  update_memory_08006b00((int)input,shiftedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "update_memory_with_shifted_bits_08006cf6",
                "param_1": "input",
                "param_2": "firstParam",
                "param_3": "secondParam",
                "uVar1": "shiftedBits"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char input)\n\n{\n  setMemoryBit((integer)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "input",
                "set_bit_in_memory_080069b4": "setMemoryBit",
                "int": "integer"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_at_offset_08006d4a",
            "code": "\nvoid setBitAtOffset_08006d4a(char value)\n\n{\n  set_bit_at_offset_080069e4((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_at_offset_08006d4a",
                "param_1": "value"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "run_and_repeat_08006d66",
            "code": "\nvoid run_and_repeat_08006d66(void)\n\n{\n  run_infinite_loop_08006c70();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "run_and_repeat_08006d66"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "update_memory_08006d72",
            "code": "\nundefined4 update_memory_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_update_memory_08006d72_08006c9c(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "update_memory_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "shifted_bits_function_08006d8a",
            "code": "\nundefined4 shiftedBitsFunction_08006d8a(void)\n\n{\n  undefined4 shiftedBitsResult;\n  \n  shiftedBitsResult = get_shifted_bits_08006998();\n  return shiftedBitsResult;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "shifted_bits_function_08006d8a",
                "uVar1": "shiftedBitsResult"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "process_character_08006d98",
            "code": "\nvoid processCharacter_08006d98(char character,undefined4 parameter2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  undefined4 characterValue;\n  \n  characterValue = extracted_byte_08006b54((int)character);\n  mask_and_shift_bits_08006c04(characterValue,parameter2,parameter3,parameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "process_character_08006d98",
                "param_1": "character",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "characterValue"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_value_08006dc4",
            "code": "\nvoid setBitValue_08006dc4(char value)\n\n{\n  set_bit_value_08006a58((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_value_08006dc4",
                "param_1": "value"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_08006de0",
            "code": "\nundefined4 checkBit_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006a18((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_at_position_08006dfe",
            "code": "\nvoid set_bit_at_position_08006dfe(char bit_position)\n\n{\n  set_bit_at_position_08006dfe_08006a8c((int)bit_position);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_at_position_08006dfe",
                "param_1": "bit_position"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_08006e1a",
            "code": "\nundefined4 checkBit_08006e1a(char input)\n\n{\n  undefined4 bitStatus;\n  \n  bitStatus = check_bit_08006ac0((int)input);\n  return bitStatus;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "input",
                "uVar1": "bitStatus"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid updateRegisters_08006e88(uint *registerData,uint *inputData)\n\n{\n  uint bitMask;\n  uint bitExtracted;\n  int registerIndex;\n  uint loopIndex;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    bitMask = 1 << (loopIndex & 0xff);\n    bitExtracted = *inputData & bitMask;\n    if (bitExtracted == bitMask) {\n      if ((inputData[1] == 2) || (inputData[1] == 0x12)) {\n        bitMask = inputData[4];\n        registerData[(loopIndex >> 3) + 8] = registerData[(loopIndex >> 3) + 8] & ~(0xf << ((loopIndex & 7) << 2));\n        registerData[(loopIndex >> 3) + 8] = registerData[(loopIndex >> 3) + 8] | bitMask << ((loopIndex & 7) << 2);\n      }\n      *registerData = *registerData & ~(3 << ((loopIndex & 0x7f) << 1));\n      *registerData = *registerData | (inputData[1] & 3) << ((loopIndex & 0x7f) << 1);\n      if ((((inputData[1] == 1) || (inputData[1] == 2)) || (inputData[1] == 0x11)) || (inputData[1] == 0x12)\n         ) {\n        registerData[2] = registerData[2] & ~(3 << ((loopIndex & 0x7f) << 1));\n        registerData[2] = registerData[2] | inputData[3] << ((loopIndex & 0x7f) << 1);\n        registerData[1] = registerData[1] & ~(1 << (loopIndex & 0xff));\n        registerData[1] = registerData[1] | (inputData[1] >> 4 & 1) << (loopIndex & 0xff);\n      }\n      registerData[3] = registerData[3] & ~(3 << ((loopIndex & 0x7f) << 1));\n      registerData[3] = registerData[3] | inputData[2] << ((loopIndex & 0x7f) << 1);\n      if ((inputData[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loopIndex & 3) << 2)) & *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        if (registerData == (uint *)0x40020000) {\n          registerIndex = 0;\n        }\n        else if (registerData == (uint *)0x40020400) {\n          registerIndex = 1;\n        }\n        else if (registerData == (uint *)0x40020800) {\n          registerIndex = 2;\n        }\n        else if (registerData == (uint *)0x40020c00) {\n          registerIndex = 3;\n        }\n        else if (registerData == (uint *)0x40021000) {\n          registerIndex = 4;\n        }\n        else if (registerData == (uint *)0x40021400) {\n          registerIndex = 5;\n        }\n        else if (registerData == (uint *)0x40021800) {\n          registerIndex = 6;\n        }\n        else if (registerData == (uint *)0x40021c00) {\n          registerIndex = 7;\n        }\n        else if (registerData == (uint *)0x40022000) {\n          registerIndex = 8;\n        }\n        else if (registerData == (uint *)0x40022400) {\n          registerIndex = 9;\n        }\n        else {\n          registerIndex = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             registerIndex << ((loopIndex & 3) << 2) | *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitExtracted & _DAT_40013c00;\n        _DAT_40013c04 = ~bitExtracted & _DAT_40013c04;\n        if ((inputData[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitExtracted | _DAT_40013c00;\n        }\n        if ((inputData[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitExtracted | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitExtracted & _DAT_40013c08;\n        _DAT_40013c0c = ~bitExtracted & _DAT_40013c0c;\n        if ((inputData[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitExtracted | _DAT_40013c08;\n        }\n        if ((inputData[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitExtracted | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "registerData",
                "param_2": "inputData",
                "uVar1": "bitMask",
                "uVar2": "bitExtracted",
                "iVar3": "registerIndex",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_value_0800733e",
            "code": "\nvoid setParamValue_0800733e(int targetAddress,undefined2 parameterValue,char useAlternateSlot)\n\n{\n  if (useAlternateSlot == '\\0') {\n    *(undefined2 *)(targetAddress + 0x1a) = parameterValue;\n  }\n  else {\n    *(undefined2 *)(targetAddress + 0x18) = parameterValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "targetAddress",
                "param_2": "parameterValue",
                "param_3": "useAlternateSlot"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_and_call_function_0800738e",
            "code": "\n\n\nvoid updateDataAndCallFunction_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_and_call_function_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_080073d4",
            "code": "\nvoid setBit_080073d4(uint input_value)\n\n{\n  *(short *)(((int)input_value >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input_value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_080073d4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initialize_system_08007436(void)\n\n{\n  int result;\n  undefined4 condition1;\n  undefined4 condition2;\n  undefined4 condition3;\n  undefined4 address1;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 clockParam1;\n  undefined4 clockParam2;\n  undefined4 clockParam3;\n  undefined4 clockParam4;\n  undefined4 clockParam5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  condition1 = 1;\n  condition2 = 1;\n  condition3 = 2;\n  address1 = 0x400000;\n  value1 = 8;\n  value2 = 0x150;\n  value3 = 2;\n  value4 = 7;\n  result = check_conditions_08005cec(&condition1);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  clockParam1 = 0xf;\n  clockParam2 = 2;\n  clockParam3 = 0;\n  clockParam4 = 0x1400;\n  clockParam5 = 0x1000;\n  result = initialize_clock_speed_0800618c(&clockParam1,5);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "condition1",
                "local_48": "condition2",
                "local_34": "condition3",
                "local_30": "address1",
                "local_2c": "value1",
                "local_28": "value2",
                "local_24": "value3",
                "local_20": "value4",
                "local_1c": "clockParam1",
                "local_18": "clockParam2",
                "local_14": "clockParam3",
                "local_10": "clockParam4",
                "local_c": "clockParam5",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid processFlags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    setFlag(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initializeAndCheckFlags();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    checkFlagStatus(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags",
                "set_bit_in_memory_08007402": "setFlag",
                "initialize_and_check_flags_0800195c": "initializeAndCheckFlags",
                "check_flag_status_08003a18": "checkFlagStatus"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_odd_08007520",
            "code": "\nvoid setBitIfOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    set_bit_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_app_08007540",
            "code": "\nundefined4 initialize_app_08007540(void)\n\n{\n  initialize_memory();\n  initialize_system();\n  update_registers_and_params();\n  initialize_all();\n  initialize_memory();\n  initialize_memory();\n  execute_interrupt_if_not_executed(0);\n  run_application();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_app_08007540",
                "initialize_memory_080059b4": "initialize_memory",
                "initialize_system_08007436": "initialize_system",
                "update_registers_and_params_0800778c": "update_registers_and_params",
                "initialize_all_08007e08": "initialize_all",
                "initialize_memory_080079c0": "initialize_memory",
                "initialize_memory_08008190": "initialize_memory",
                "execute_interrupt_if_not_executed_08005984": "execute_interrupt_if_not_executed",
                "run_application_08001ddc": "run_application"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bitwise_operation_080076c8",
            "code": "\nvoid updateBitwiseOperation_080076c8(unsignedInt inputValue)\n\n{\n  *(unsignedInt *)(((int)inputValue >> 4) * 0x400 + 0x40020014) assign\n       *(unsignedInt *)(((int)inputValue >> 4) * 0x400 + 0x40020014) bitwiseXOR 1 << (inputValue bitwiseAND 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bitwise_operation_080076c8",
                "param_1": "inputValue",
                "uint": "unsignedInt",
                "=": "assign",
                "^": "bitwiseXOR",
                "&": "bitwiseAND"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "perform_data_checks_08007756",
            "code": "\nvoid performDataChecks_08007756(void)\n\n{\n  uint data;\n  \n  data = getData();\n  if ((data & 0x1ff) == 0) {\n    performBitwiseOperation(0x3c);\n  }\n  if ((data & 0xf) == 0) {\n    updateFlags();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "perform_data_checks_08007756",
                "uVar1": "data",
                "get_data_08005a84": "getData",
                "update_bitwise_operation_080076c8": "performBitwiseOperation",
                "update_flags_08007930": "updateFlags",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "update_registers_and_params_0800778c",
            "code": "\n\n\nvoid update_registers_and_params_0800778c(void)\n\n{\n  int offset;\n  int registers;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint *data;\n  uint index;\n  \n  for (index = 0; index < 0x11; index = index + 1) {\n    offset = index * 0x18;\n    data = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*data >> 4 & 0xff);\n    registers = 1 << (*data & 0xf);\n    param1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    param2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    param3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    param4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    update_registers_08006e88(((*data >> 4) + 0x100080) * 0x400,&registers);\n    if (-1 < (int)data[5]) {\n      set_param_value_0800733e(((*data >> 4) + 0x100080) * 0x400,1 << (*data & 0xf) & 0xffff,\n                   data[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "update_registers_and_params_0800778c",
                "iVar1": "offset",
                "local_24": "registers",
                "local_20": "param1",
                "local_1c": "param2",
                "local_18": "param3",
                "local_14": "param4",
                "local_10": "data",
                "local_c": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nunsigned_integer check_bit_08007854(unsigned_integer input_value)\n\n{\n  return *(unsigned_integer *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input_value",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_bitmask_flags_08007884",
            "code": "\nuint get_bitmask_flags_08007884(void)\n\n{\n  int bit_0x36;\n  int bit_0x37;\n  int bit_0x38;\n  int bit_0x39;\n  int bit_0xf;\n  uint bit_0x0;\n  \n  bit_0x36 = check_bit_08007854(0x36);\n  bit_0x37 = check_bit_08007854(0x37);\n  bit_0x38 = check_bit_08007854(0x38);\n  bit_0x39 = check_bit_08007854(0x39);\n  bit_0xf = check_bit_08007854(0xf);\n  bit_0x0 = check_bit_08007854(0);\n  return bit_0x0 | bit_0x36 << 4 | bit_0x37 << 3 | bit_0x38 << 2 | bit_0x39 << 1 | bit_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_bitmask_flags_08007884",
                "iVar1": "bit_0x36",
                "iVar2": "bit_0x37",
                "iVar3": "bit_0x38",
                "iVar4": "bit_0x39",
                "iVar5": "bit_0xf",
                "uVar6": "bit_0x0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "combine_values_080078f4",
            "code": "\nuint combineValues_080078f4(void)\n\n{\n  int index;\n  uint combinedResult;\n  \n  combinedResult = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combinedResult = *(uint *)(&DAT_20000e54 + index * 4) | combinedResult;\n  }\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "combine_values_080078f4",
                "local_10": "index",
                "local_c": "combinedResult"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_flags_08007930",
            "code": "\nvoid updateFlags_08007930(void)\n\n{\n  int flagIndex;\n  uint previousFlags;\n  undefined4 newFlags;\n  uint combinedFlags;\n  uint changedFlags;\n  \n  flagIndex = DAT_20000e68;\n  previousFlags = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    newFlags = get_bitmask_flags_08007884();\n    *(undefined4 *)(&DAT_20000e54 + flagIndex * 4) = newFlags;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    combinedFlags = combine_values_080078f4();\n    previousFlags = DAT_20000e64;\n    if (combinedFlags != DAT_20000e64) {\n      changedFlags = ~combinedFlags & DAT_20000e64;\n      if ((~DAT_20000e64 & combinedFlags) != 0) {\n        process_flags_080074c8(~DAT_20000e64 & combinedFlags);\n      }\n      previousFlags = combinedFlags;\n      if (changedFlags != 0) {\n        set_bit_if_odd_08007520(changedFlags);\n      }\n    }\n  }\n  DAT_20000e64 = previousFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_flags_08007930",
                "iVar1": "flagIndex",
                "uVar2": "previousFlags",
                "uVar3": "newFlags",
                "uVar4": "combinedFlags",
                "uVar5": "changedFlags"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_with_pattern_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_at_index_080079e0",
            "code": "\nvoid setBitAtIndex_080079e0(byte byteValue)\n\n{\n  *(int *)((shiftedValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_at_index_080079e0",
                "param_1": "byteValue",
                "(uint)(int)(char)param_1": "shiftedValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "set_flag_based_on_address_08007a10",
            "code": "\n\n\nvoid setFlagBasedOnAddress_08007a10(undefined *address)\n\n{\n  if (address == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (address == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (address == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "set_flag_based_on_address_08007a10",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "update_memory_and_set_bit_08007a70",
            "code": "\nvoid updateMemoryAndSetBit_08007a70(undefined *inputPointer,undefined4 value1,undefined4 value2)\n\n{\n  undefined shiftedBitsValue;\n  \n  if (inputPointer == (undefined *)0x40000000) {\n    shiftedBitsValue = 0x1c;\n  }\n  else if (inputPointer == (undefined *)0x40000400) {\n    shiftedBitsValue = 0x1d;\n  }\n  else {\n    if (inputPointer != &DAT_40000800) {\n      return;\n    }\n    shiftedBitsValue = 0x1e;\n  }\n  update_memory_with_shifted_bits_08006cf6(shiftedBitsValue,value1,value2);\n  set_bit_at_index_080079e0(shiftedBitsValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "update_memory_and_set_bit_08007a70",
                "param_1": "inputPointer",
                "param_2": "value1",
                "param_3": "value2",
                "local_c": "shiftedBitsValue"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  set_flag_based_on_address_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  updateMemoryAndSetBit(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_memory_and_set_bit_08007a70": "updateMemoryAndSetBit"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_and_values_08007b70",
            "code": "\n\n\nvoid setFlagsAndValues_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_and_values_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_minimum_value_08007bf0",
            "code": "\n\n\nvoid update_minimum_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_minimum_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_value_08007c40",
            "code": "\n\n\nvoid setGlobalValue_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_value_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_variable_08007c5e",
            "code": "\n\n\nvoid setGlobalVariable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "clear_flags_and_update_status_08007c7c",
            "code": "\n\n\nvoid clearFlagsAndUpdateStatus_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    updateFlagsInMemory1();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    updateFlagsInMemory2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    updateStatus();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "clear_flags_and_update_status_08007c7c",
                "update_flags_in_memory_08005778": "updateFlagsInMemory1",
                "update_flags_in_memory_08005760": "updateFlagsInMemory2",
                "update_status_080053a0": "updateStatus"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_device_registers_08007d08",
            "code": "\n\n\nvoid initialize_device_registers_08007d08(void)\n\n{\n  set_flag_based_on_address_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_device_registers_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "initialize_flags_08007da8",
            "code": "\n\n\nvoid initializeFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "initialize_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_all_08007e08",
            "code": "\nvoid initialize_all_08007e08(void)\n\n{\n  init_memory();\n  init_registers();\n  init_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_all_08007e08",
                "initialize_memory_08007ad0": "init_memory",
                "initialize_device_registers_08007d08": "init_registers",
                "initialize_flags_08007da8": "init_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "write_byte_to_register_08007e1c",
            "code": "\n\n\nvoid write_byte_to_register_08007e1c(byte byte_to_write)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_write;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "write_byte_to_register_08007e1c",
                "param_1": "byte_to_write"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "set_memory_flags_08007ea4",
            "code": "\n\n\nvoid setMemoryFlags_08007ea4(undefined *memoryAddress)\n\n{\n  if (memoryAddress == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memoryAddress == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memoryAddress == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memoryAddress == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memoryAddress == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memoryAddress == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "set_memory_flags_08007ea4",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_speed_and_set_08007f54",
            "code": "\nvoid calculateClockSpeedAndSet_08007f54(int deviceAddress,int dataValue)\n\n{\n  ulonglong clockSpeed;\n  int adjustedClockSpeed;\n  int adjustedClockSpeed2;\n  undefined8 clockSpeedResult;\n  \n  if ((*(uint *)(deviceAddress + 0xc) & 0x8000) == 0) {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockSpeedResult = calculate_adjusted_clock_speed_08006680();\n      clockSpeed = (ulonglong)(uint)((int)clockSpeedResult * 0x19) / (ulonglong)(uint)(dataValue << 2);\n      adjustedClockSpeed = calculate_adjusted_clock_speed_08006680((int)clockSpeedResult,(int)((ulonglong)clockSpeedResult >> 0x20),(int)(clockSpeed * 0x51eb851f));\n      adjustedClockSpeed2 = calculate_adjusted_clock_speed_08006680();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeed / 100) << 4 |\n           (((uint)(adjustedClockSpeed * 0x19) / (uint)(dataValue << 2) +\n            (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(dataValue << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeedResult = calculate_clock_speed_080066cc();\n    clockSpeed = (ulonglong)(uint)((int)clockSpeedResult * 0x19) / (ulonglong)(uint)(dataValue << 2);\n    adjustedClockSpeed = calculate_clock_speed_080066cc((int)clockSpeedResult,(int)((ulonglong)clockSpeedResult >> 0x20),(int)(clockSpeed * 0x51eb851f));\n    adjustedClockSpeed2 = calculate_clock_speed_080066cc();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeed / 100) << 4 |\n         (((uint)(adjustedClockSpeed * 0x19) / (uint)(dataValue << 2) +\n          (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(dataValue << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockSpeedResult = calculate_adjusted_clock_speed_08006680();\n      clockSpeed = (ulonglong)(uint)((int)clockSpeedResult * 0x19) / (ulonglong)(uint)(dataValue << 1);\n      adjustedClockSpeed = calculate_adjusted_clock_speed_08006680((int)clockSpeedResult,(int)((ulonglong)clockSpeedResult >> 0x20),(int)(clockSpeed * 0x51eb851f));\n      adjustedClockSpeed2 = calculate_adjusted_clock_speed_08006680();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeed / 100) << 4 |\n           (((uint)(adjustedClockSpeed * 0x19) / (uint)(dataValue << 1) +\n            (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(dataValue << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeedResult = calculate_clock_speed_080066cc();\n    clockSpeed = (ulonglong)(uint)((int)clockSpeedResult * 0x19) / (ulonglong)(uint)(dataValue << 1);\n    adjustedClockSpeed = calculate_clock_speed_080066cc((int)clockSpeedResult,(int)((ulonglong)clockSpeedResult >> 0x20),(int)(clockSpeed * 0x51eb851f));\n    adjustedClockSpeed2 = calculate_clock_speed_080066cc();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeed / 100) << 4 |\n         (((uint)(adjustedClockSpeed * 0x19) / (uint)(dataValue << 1) +\n          (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(dataValue << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_speed_and_set_08007f54",
                "param_1": "deviceAddress",
                "param_2": "dataValue",
                "uVar1": "clockSpeed",
                "iVar2": "adjustedClockSpeed",
                "iVar3": "adjustedClockSpeed2",
                "uVar4": "clockSpeedResult"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_08008190",
            "code": "\n\n\nvoid initializeMemory_08008190(void)\n\n{\n  set_memory_flags_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculateClockSpeed(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190",
                "calculate_clock_speed_and_set_08007f54": "calculateClockSpeed"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "write_byte_to_register_08008250",
            "code": "\nvoid write_byte_to_register_08008250(undefined data)\n\n{\n  write_to_register(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "write_byte_to_register_08008250",
                "param_1": "data",
                "write_byte_to_register_08007e1c": "write_to_register"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "write_byte_to_register_0800826a",
            "code": "\nundefined4 writeByteToRegister_0800826a(undefined data)\n\n{\n  writeByteToRegister_0800826a(data);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "write_byte_to_register_0800826a",
                "param_1": "data",
                "write_byte_to_register_08007e1c": "writeByteToRegister"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_flag_and_process_byte_08008286",
            "code": "\nundefined checkFlagAndProcessByte_08008286(void)\n\n{\n  undefined lowestByte;\n  int isFlagSet;\n  \n  isFlagSet = is_flag_set_08007e58();\n  if (isFlagSet != 0) {\n    lowestByte = get_lowest_byte_08007e84();\n    isFlagSet = processByte(lowestByte);\n    if (isFlagSet == 0) {\n      return lowestByte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_flag_and_process_byte_08008286",
                "iVar2": "isFlagSet",
                "uVar1": "lowestByte",
                "process_byte_08005900": "processByte"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_080082d0",
            "code": "\nulonglong calculate_080082d0(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  \n  temp4 = num4 ^ 0x80000000;\n  result1 = num2 << 1;\n  num4 = num4 << 1;\n  isEqual = ((num2 ^ temp4) & 0x7fffffff) == 0;\n  isZero = isEqual && num1 == num3;\n  if (!isEqual || num1 != num3) {\n    isZero = (result1 | num1) == 0;\n  }\n  if (!isZero) {\n    isZero = (num4 | num3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!isZero) {\n    isZero = shift2 == -1;\n  }\n  shift1 = (int)num4 >> 0x15;\n  if (!isZero) {\n    isZero = shift1 == -1;\n  }\n  if (isZero) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp4;\n      result3 = num3;\n      if (shift2 == -1) {\n        result1 = num2;\n        result3 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = result3;\n        temp4 = result1;\n      }\n      isZero = (result3 | result1 << 0xc) == 0;\n      if (isZero) {\n        isZero = (num3 | temp4 << 0xc) == 0;\n      }\n      if (isZero) {\n        isZero = result1 == temp4;\n      }\n      if (!isZero) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((num2 ^ temp4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((result1 | num1) == 0) {\n        num1 = num3;\n        num2 = temp4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      isZero = (num1 & 0x80000000) != 0;\n      temp4 = num2 * 2 + (uint)isZero;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)isZero)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,num1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  num4 = num4 >> 0x15;\n  result3 = num4 - result1;\n  isZero = result3 != 0;\n  if (num4 < result1) {\n    result3 = -result3;\n  }\n  result2 = num1;\n  temp5 = num2;\n  if (isZero && result1 <= num4) {\n    result1 = result1 + result3;\n    result2 = num3;\n    temp5 = temp4;\n    num3 = num1;\n    temp4 = num2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    isZero = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)isZero;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    isZero = num3 != 0;\n    num3 = -num3;\n    temp5 = -temp5 - (uint)isZero;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = num3 << (temp4 & 0xff);\n    num3 = num3 >> (result3 & 0xff);\n    temp1 = result2 + num3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,num3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (num3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  num2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    isZero = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!isZero - temp4;\n    result3 = -(uint)(isZero <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isZero = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      isZero = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)isZero) | num2,\n                    temp4 + isZero);\n  }\n  isEqual = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp4 * 2;\n  isZero = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isEqual;\n  result3 = result3 * 2 + (uint)(isZero || CARRY4(result2,(uint)isEqual));\n  result2 = result1 - 2;\n  if (result1 - 1 != 0 && 0xfffff < result3) goto LAB_080083e0;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  shift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  isNegative = SBORROW4(result3,0x20);\n  temp4 = shift2 - 0x2b;\n  isZero = (int)temp4 < 0;\n  isEqual = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    isNegative = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    isZero = shift2 < 0;\n    isEqual = shift2 == 0;\n    temp4 = result3;\n    if (!isEqual && isZero == isNegative) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isEqual || isZero != isNegative) {\n    result4 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (isEqual || isZero != isNegative) {\n    result1 = result1 | temp5 >> (result4 & 0xff);\n  }\n  if (isEqual || isZero != isNegative) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | num2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(num2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_080082d0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "isEqual",
                "bVar14": "isZero",
                "bVar15": "isNegative"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_unsigned_division_080082d4",
            "code": "\nulonglong calculateUnsignedDivision_080082d4(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int bitShiftAmount1;\n  byte isDividendNegative;\n  uint bitShiftedDividend;\n  uint bitShiftedDivisor;\n  uint tempDivisor;\n  int bitShiftAmount2;\n  uint shiftedDivisor;\n  uint shiftedDividend;\n  uint divisionResult;\n  uint tempResult;\n  uint remainderLow;\n  uint remainderHigh;\n  bool isDivisionPerformed;\n  bool isDivisionResultZero;\n  bool isBitShiftAmountNegative;\n  \n  shiftedDivisor = divisor << 1;\n  divisionResult = remainder << 1;\n  isDivisionPerformed = ((divisor ^ remainder) & 0x7fffffff) == 0;\n  isDivisionResultZero = isDivisionPerformed && dividend == quotient;\n  if (!isDivisionPerformed || dividend != quotient) {\n    isDivisionResultZero = (shiftedDivisor | dividend) == 0;\n  }\n  if (!isDivisionResultZero) {\n    isDivisionResultZero = (divisionResult | quotient) == 0;\n  }\n  bitShiftAmount2 = (int)shiftedDivisor >> 0x15;\n  if (!isDivisionResultZero) {\n    isDivisionResultZero = bitShiftAmount2 == -1;\n  }\n  bitShiftAmount1 = (int)divisionResult >> 0x15;\n  if (!isDivisionResultZero) {\n    isDivisionResultZero = bitShiftAmount1 == -1;\n  }\n  if (isDivisionResultZero) {\n    if (bitShiftAmount2 == -1 || bitShiftAmount1 == -1) {\n      divisionResult = remainder;\n      shiftedDivisor = quotient;\n      if (bitShiftAmount2 == -1) {\n        divisionResult = divisor;\n        shiftedDivisor = dividend;\n      }\n      if (bitShiftAmount2 != -1 || bitShiftAmount1 != -1) {\n        quotient = shiftedDivisor;\n        remainder = divisionResult;\n      }\n      isDivisionResultZero = (shiftedDivisor | divisionResult << 0xc) == 0;\n      if (isDivisionResultZero) {\n        isDivisionResultZero = (quotient | remainder << 0xc) == 0;\n      }\n      if (isDivisionResultZero) {\n        isDivisionResultZero = divisionResult == remainder;\n      }\n      if (!isDivisionResultZero) {\n        divisionResult = divisionResult | 0x80000;\n      }\n      return CONCAT44(divisionResult,shiftedDivisor);\n    }\n    if (((divisor ^ remainder) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((shiftedDivisor | dividend) == 0) {\n        dividend = quotient;\n        divisor = remainder;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != remainder) {\n      return 0;\n    }\n    if (shiftedDivisor >> 0x15 == 0) {\n      isDivisionResultZero = (dividend & 0x80000000) != 0;\n      divisionResult = divisor * 2 + (uint)isDivisionResultZero;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)isDivisionResultZero)) {\n        divisionResult = divisionResult | 0x80000000;\n      }\n      return CONCAT44(divisionResult,dividend << 1);\n    }\n    if (shiftedDivisor < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  shiftedDivisor = shiftedDivisor >> 0x15;\n  divisionResult = divisionResult >> 0x15;\n  tempResult = divisionResult - shiftedDivisor;\n  isDivisionResultZero = tempResult != 0;\n  if (divisionResult < shiftedDivisor) {\n    tempResult = -tempResult;\n  }\n  shiftedDividend = dividend;\n  tempDivisor = divisor;\n  if (isDivisionResultZero && shiftedDivisor <= divisionResult) {\n    shiftedDivisor = shiftedDivisor + tempResult;\n    shiftedDividend = quotient;\n    tempDivisor = remainder;\n    quotient = dividend;\n    remainder = divisor;\n  }\n  if (0x36 < tempResult) {\n    return CONCAT44(tempDivisor,shiftedDividend);\n  }\n  divisionResult = tempDivisor & 0xfffff | 0x100000;\n  if ((tempDivisor & 0x80000000) != 0) {\n    isDivisionResultZero = shiftedDividend != 0;\n    shiftedDividend = -shiftedDividend;\n    divisionResult = -divisionResult - (uint)isDivisionResultZero;\n  }\n  tempDivisor = remainder & 0xfffff | 0x100000;\n  if ((remainder & 0x80000000) != 0) {\n    isDivisionResultZero = quotient != 0;\n    quotient = -quotient;\n    tempDivisor = -tempDivisor - (uint)isDivisionResultZero;\n  }\n  if (shiftedDivisor == tempResult) {\n    tempDivisor = tempDivisor ^ 0x100000;\n    if (shiftedDivisor == 0) {\n      divisionResult = divisionResult ^ 0x100000;\n      shiftedDivisor = 1;\n    }\n    else {\n      tempResult = tempResult - 1;\n    }\n  }\n  remainderHigh = -tempResult + 0x20;\n  if ((int)tempResult < 0x21) {\n    remainderLow = quotient << (remainderHigh & 0xff);\n    quotient = quotient >> (tempResult & 0xff);\n    bitShiftedDividend = shiftedDividend + quotient;\n    bitShiftedDivisor = tempDivisor << (remainderHigh & 0xff);\n    remainderHigh = bitShiftedDividend + bitShiftedDivisor;\n    divisionResult = divisionResult + CARRY4(shiftedDividend,quotient) + ((int)tempDivisor >> (tempResult & 0xff)) +\n            (uint)CARRY4(bitShiftedDividend,bitShiftedDivisor);\n  }\n  else {\n    remainderLow = tempDivisor << (-tempResult + 0x40 & 0xff);\n    if (quotient != 0) {\n      remainderLow = remainderLow | 2;\n    }\n    tempDivisor = (int)tempDivisor >> (tempResult - 0x20 & 0xff);\n    remainderHigh = shiftedDividend + tempDivisor;\n    divisionResult = divisionResult + ((int)tempDivisor >> 0x1f) + (uint)CARRY4(shiftedDividend,tempDivisor);\n  }\n  divisor = divisionResult & 0x80000000;\n  tempResult = divisionResult;\n  if ((int)divisionResult < 0) {\n    isDivisionResultZero = remainderLow == 0;\n    remainderLow = -remainderLow;\n    tempResult = -remainderHigh;\n    remainderHigh = -(uint)!isDivisionResultZero - remainderHigh;\n    tempResult = -(uint)(isDivisionResultZero <= tempResult) - divisionResult;\n  }\n  if (0xfffff < tempResult) {\n    shiftedDividend = shiftedDivisor - 1;\n    if (0x1fffff < tempResult) {\n      divisionResult = tempResult & 1;\n      tempResult = tempResult >> 1;\n      isDividendNegative = (byte)remainderHigh;\n      remainderHigh = (uint)(divisionResult != 0) << 0x1f | remainderHigh >> 1;\n      remainderLow = (uint)(isDividendNegative & 1) << 0x1f | remainderLow >> 1;\n      shiftedDividend = shiftedDivisor;\n      if (0xffbfffff < shiftedDivisor * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isDivisionResultZero = 0x7fffffff < remainderLow;\n    if (remainderLow == 0x80000000) {\n      isDivisionResultZero = (remainderHigh & 1) != 0;\n    }\n    return CONCAT44(tempResult + shiftedDividend * 0x100000 + (uint)CARRY4(remainderHigh,(uint)isDivisionResultZero) | divisor,\n                    remainderHigh + isDivisionResultZero);\n  }\n  isDivisionPerformed = (remainderLow & 0x80000000) != 0;\n  remainderLow = remainderLow << 1;\n  shiftedDividend = remainderHigh * 2;\n  isDivisionResultZero = CARRY4(remainderHigh,remainderHigh);\n  remainderHigh = remainderHigh * 2 + (uint)isDivisionPerformed;\n  tempResult = tempResult * 2 + (uint)(isDivisionResultZero || CARRY4(shiftedDividend,(uint)isDivisionPerformed));\n  shiftedDividend = shiftedDivisor - 2;\n  if (shiftedDivisor - 1 != 0 && 0xfffff < tempResult) goto LAB_080083e0;\n  tempDivisor = remainderHigh;\n  shiftedDivisor = tempResult;\n  if (tempResult == 0) {\n    tempDivisor = 0;\n    shiftedDivisor = remainderHigh;\n  }\n  bitShiftAmount2 = LZCOUNT(shiftedDivisor);\n  if (tempResult == 0) {\n    bitShiftAmount2 = bitShiftAmount2 + 0x20;\n  }\n  remainderHigh = bitShiftAmount2 - 0xb;\n  isBitShiftAmountNegative = SBORROW4(remainderHigh,0x20);\n  tempResult = bitShiftAmount2 - 0x2b;\n  isDivisionResultZero = (int)tempResult < 0;\n  isDivisionPerformed = tempResult == 0;\n  if ((int)remainderHigh < 0x20) {\n    isBitShiftAmountNegative = SCARRY4(tempResult,0xc);\n    bitShiftAmount2 = bitShiftAmount2 + -0x1f;\n    isDivisionResultZero = bitShiftAmount2 < 0;\n    isDivisionPerformed = bitShiftAmount2 == 0;\n    tempResult = remainderHigh;\n    if (!isDivisionPerformed && isDivisionResultZero == isBitShiftAmountNegative) {\n      tempDivisor = shiftedDivisor << (remainderHigh & 0xff);\n      shiftedDivisor = shiftedDivisor >> (0xcU - bitShiftAmount2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isDivisionPerformed || isDivisionResultZero != isBitShiftAmountNegative) {\n    remainderLow = 0x20 - tempResult;\n  }\n  shiftedDivisor = shiftedDivisor << (tempResult & 0xff);\n  if (isDivisionPerformed || isDivisionResultZero != isBitShiftAmountNegative) {\n    shiftedDivisor = shiftedDivisor | tempDivisor >> (remainderLow & 0xff);\n  }\n  if (isDivisionPerformed || isDivisionResultZero != isBitShiftAmountNegative) {\n    tempDivisor = tempDivisor << (tempResult & 0xff);\n  }\nLAB_08008458:\n  if ((int)remainderHigh <= (int)shiftedDividend) {\n    return CONCAT44(shiftedDivisor + (shiftedDividend - remainderHigh) * 0x100000 | divisor,tempDivisor);\n  }\n  tempResult = ~(shiftedDividend - remainderHigh);\n  if ((int)tempResult < 0x1f) {\n    bitShiftAmount2 = tempResult - 0x13;\n    if (bitShiftAmount2 != 0 && bitShiftAmount2 < 0 == SCARRY4(tempResult - 0x1f,0xc)) {\n      return CONCAT44(divisionResult,tempDivisor >> (0x20 - (0xcU - bitShiftAmount2) & 0xff) | shiftedDivisor << (0xcU - bitShiftAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempResult = tempResult + 1;\n    return CONCAT44(divisor | shiftedDivisor >> (tempResult & 0xff),\n                    tempDivisor >> (tempResult & 0xff) | shiftedDivisor << (0x20 - tempResult & 0xff));\n  }\n  return CONCAT44(divisionResult,shiftedDivisor >> (tempResult - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_unsigned_division_080082d4",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "bitShiftAmount1",
                "bVar2": "isDividendNegative",
                "uVar3": "bitShiftedDividend",
                "uVar4": "bitShiftedDivisor",
                "uVar5": "tempDivisor",
                "iVar6": "bitShiftAmount2",
                "uVar7": "shiftedDivisor",
                "uVar8": "shiftedDividend",
                "uVar9": "divisionResult",
                "uVar10": "tempResult",
                "uVar11": "remainderLow",
                "uVar12": "remainderHigh",
                "bVar13": "isDivisionPerformed",
                "bVar14": "isDivisionResultZero",
                "bVar15": "isBitShiftAmountNegative"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "shift_and_concatenate_0800854c",
            "code": "\nulonglong shift_and_concatenate_0800854c(uint input)\n\n{\n  uint upper_word;\n  uint shift_amount;\n  int lzcount_result;\n  uint constant;\n  uint shifted_right;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  upper_word = 0;\n  lzcount_result = LZCOUNT(input);\n  constant = lzcount_result + 0x15;\n  is_borrow = SBORROW4(constant,0x20);\n  shift_amount = lzcount_result - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (constant < 0x20) {\n    is_borrow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = lzcount_result + 1 == 0;\n    shift_amount = constant;\n    if (!is_zero && is_borrow == false) {\n      upper_word = input << constant;\n      input = input >> (0xcU - (lzcount_result + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_borrow) {\n    shifted_right = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_borrow) {\n    input = input | 0U >> (shifted_right & 0xff);\n  }\n  if (is_zero || is_negative != is_borrow) {\n    upper_word = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (constant < 0x433) {\n    return CONCAT44(input + (0x432 - constant) * 0x100000,upper_word);\n  }\n  shift_amount = ~(0x432 - constant);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  lzcount_result = shift_amount - 0x13;\n  if (lzcount_result == 0 || lzcount_result < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    upper_word >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(upper_word >> (0x20 - (0xcU - lzcount_result) & 0xff) | input << (0xcU - lzcount_result & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "shift_and_concatenate_0800854c",
                "param_1": "input",
                "uVar1": "upper_word",
                "uVar2": "shift_amount",
                "iVar3": "lzcount_result",
                "uVar4": "constant",
                "in_r12": "shifted_right",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_borrow"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "calculate_shifted_value_0800856c",
            "code": "\nulonglong calculate_shifted_value_0800856c(uint input_value)\n\n{\n  uint result1;\n  uint shifted_input;\n  uint shift_count;\n  int leading_zeros;\n  uint shift_limit;\n  uint sign_bit;\n  uint bits_to_shift_2;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  shifted_input = input_value;\n  if ((int)sign_bit < 0) {\n    shifted_input = -input_value;\n  }\n  result1 = 0;\n  leading_zeros = count_leading_zeros(shifted_input);\n  shift_limit = leading_zeros + 0x15;\n  is_carry = SBORROW4(shift_limit,0x20);\n  shift_count = leading_zeros - 0xb;\n  is_negative = (int)shift_count < 0;\n  is_zero = shift_count == 0;\n  if (shift_limit < 0x20) {\n    is_carry = subtraction_carry(shift_count,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_count = shift_limit;\n    if (!is_zero && is_carry == false) {\n      result1 = shifted_input << shift_limit;\n      shifted_input = shifted_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    bits_to_shift_2 = 0x20 - shift_count;\n  }\n  shifted_input = shifted_input << (shift_count & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    shifted_input = shifted_input | 0U >> (bits_to_shift_2 & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result1 = 0 << (shift_count & 0xff);\n  }\nLAB_08008458:\n  if (shift_limit < 0x433) {\n    return concatenate_values(shifted_input + (0x432 - shift_limit) * 0x100000 | sign_bit,result1);\n  }\n  shift_count = ~(0x432 - shift_limit);\n  if (0x1e < (int)shift_count) {\n    return concatenate_values(input_value,shifted_input >> (shift_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_count - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry(shift_count - 0x1f,0xc)) {\n    shift_count = shift_count + 1;\n    return concatenate_values(sign_bit | shifted_input >> (shift_count & 0xff),\n                    result1 >> (shift_count & 0xff) | shifted_input << (0x20 - shift_count & 0xff));\n  }\n  return concatenate_values(input_value,result1 >> (0x20 - (0xcU - leading_zeros) & 0xff) | shifted_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "param_1": "input_value",
                "uVar1": "result1",
                "uVar2": "shifted_input",
                "uVar3": "shift_count",
                "iVar4": "leading_zeros",
                "uVar5": "shift_limit",
                "uVar6": "sign_bit",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "in_r12": "bits_to_shift_2",
                "LZCOUNT": "count_leading_zeros",
                "SCARRY4": "subtraction_carry",
                "CONCAT44": "concatenate_values"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverseBits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint signBit;\n  uint tempVar1;\n  uint result1;\n  uint shiftedInput;\n  uint tempVar2;\n  int bitCount;\n  uint shiftedSignBit;\n  uint complement;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  tempVar2 = input << 1;\n  check2 = tempVar2 == 0;\n  signBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)tempVar2 >> 3) >> 1;\n  result1 = signBit | shiftedInput;\n  input = input << 0x1d;\n  if (!check2) {\n    param4 = tempVar2 & 0xff000000;\n    check2 = param4 == 0;\n  }\n  if (!check2) {\n    check2 = param4 == 0xff000000;\n  }\n  if (!check2) {\n    return CONCAT44(result1,input) ^ 0x3800000000000000;\n  }\n  if ((tempVar2 & 0xffffff) == 0) {\n    return CONCAT44(result1,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result1,input) | 0x8000000000000;\n  }\n  tempVar1 = input;\n  tempVar2 = shiftedInput;\n  if (shiftedInput == 0) {\n    tempVar1 = 0;\n    tempVar2 = input;\n  }\n  bitCount = LZCOUNT(tempVar2);\n  if (shiftedInput == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftedSignBit = bitCount - 0xb;\n  check3 = SBORROW4(shiftedSignBit,0x20);\n  shiftedInput = bitCount - 0x2b;\n  check2 = (int)shiftedInput < 0;\n  check1 = shiftedInput == 0;\n  if ((int)shiftedSignBit < 0x20) {\n    check3 = SCARRY4(shiftedInput,0xc);\n    bitCount = bitCount + -0x1f;\n    check2 = bitCount < 0;\n    check1 = bitCount == 0;\n    shiftedInput = shiftedSignBit;\n    if (!check1 && check2 == check3) {\n      tempVar1 = tempVar2 << (shiftedSignBit & 0xff);\n      tempVar2 = tempVar2 >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check1 || check2 != check3) {\n    complement = 0x20 - shiftedInput;\n  }\n  tempVar2 = tempVar2 << (shiftedInput & 0xff);\n  if (check1 || check2 != check3) {\n    tempVar2 = tempVar2 | tempVar1 >> (complement & 0xff);\n  }\n  if (check1 || check2 != check3) {\n    tempVar1 = tempVar1 << (shiftedInput & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftedSignBit < 0x381) {\n    return CONCAT44(tempVar2 + (0x380 - shiftedSignBit) * 0x100000 | signBit,tempVar1);\n  }\n  shiftedInput = ~(0x380 - shiftedSignBit);\n  if (0x1e < (int)shiftedInput) {\n    return CONCAT44(result1,tempVar2 >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftedInput - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftedInput - 0x1f,0xc)) {\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(signBit | tempVar2 >> (shiftedInput & 0xff),\n                    tempVar1 >> (shiftedInput & 0xff) | tempVar2 << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(result1,tempVar1 >> (0x20 - (0xcU - bitCount) & 0xff) | tempVar2 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "signBit",
                "uVar2": "tempVar1",
                "uVar3": "result1",
                "uVar4": "shiftedInput",
                "uVar5": "tempVar2",
                "iVar6": "bitCount",
                "uVar7": "shiftedSignBit",
                "in_r12": "complement",
                "bVar8": "check1",
                "bVar9": "check2",
                "bVar10": "check3"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_bitwise_difference_08008640",
            "code": "\nulonglong calculate_bitwise_difference_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result32bit1;\n  longlong result64bit1;\n  uint maskedInput1;\n  uint maskedInput2;\n  int sum;\n  uint diff;\n  uint maskedInput3;\n  uint result32bit2;\n  uint result32bit3;\n  bool isZero;\n  bool isOverflow1;\n  bool isOverflow2;\n  ulonglong combinedInputs;\n  \n  combinedInputs = CONCAT44(input2,input1);\n  result32bit2 = 0x7ff;\n  maskedInput2 = input2 >> 0x14 & 0x7ff;\n  isZero = maskedInput2 == 0;\n  if (!isZero) {\n    maskedInput3 = input4 >> 0x14 & 0x7ff;\n    isZero = maskedInput3 == 0;\n  }\n  if (!isZero) {\n    isZero = maskedInput2 == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = maskedInput3 == 0x7ff;\n  }\n  if (isZero) {\n    combinedInputs = calculate_bitwise_difference_08008640_0800881c();\n  }\n  maskedInput1 = (uint)(combinedInputs >> 0x20);\n  sum = maskedInput2 + maskedInput3;\n  maskedInput2 = maskedInput1 ^ input4;\n  maskedInput1 = maskedInput1 & ~(result32bit2 << 0x15);\n  input4 = input4 & ~(result32bit2 << 0x15);\n  isZero = ((uint)combinedInputs | maskedInput1 << 0xc) == 0;\n  if (!isZero) {\n    isZero = (input3 | input4 << 0xc) == 0;\n  }\n  maskedInput1 = maskedInput1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (isZero) {\n    input3 = (uint)combinedInputs | input3;\n    input4 = (maskedInput2 & 0x80000000 | maskedInput1) ^ input4;\n    maskedInput2 = result32bit2 >> 1;\n    isOverflow2 = SBORROW4(sum,maskedInput2);\n    diff = sum - maskedInput2;\n    isZero = diff == 0;\n    maskedInput1 = diff;\n    if (!isZero && (int)maskedInput2 <= sum) {\n      isOverflow2 = SBORROW4(result32bit2,diff);\n      maskedInput1 = result32bit2 - diff;\n      isZero = result32bit2 == diff;\n    }\n    if (!isZero && (int)maskedInput1 < 0 == isOverflow2) {\n      input4 = input4 | diff * 0x100000;\n    }\n    if (!isZero && (int)maskedInput1 < 0 == isOverflow2) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    result32bit2 = 0;\n    isOverflow2 = SBORROW4(diff,1);\n    diff = diff - 1;\n    isZero = diff == 0;\n    maskedInput2 = diff;\n  }\n  else {\n    result32bit1 = (combinedInputs & 0xffffffff) * (ulonglong)input3;\n    combinedInputs = (combinedInputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)maskedInput1 * (ulonglong)input3 + (result32bit1 >> 0x20);\n    result32bit3 = (uint)combinedInputs;\n    result64bit1 = (ulonglong)maskedInput1 * (ulonglong)input4 + (combinedInputs >> 0x20);\n    result32bit2 = (uint)result64bit1;\n    maskedInput1 = (uint)((ulonglong)result64bit1 >> 0x20);\n    if ((int)result32bit1 != 0) {\n      result32bit3 = result32bit3 | 1;\n    }\n    diff = (sum + -0x3ff) - (uint)(maskedInput1 < 0x200);\n    if (maskedInput1 < 0x200) {\n      isZero = (result32bit3 & 0x80000000) != 0;\n      result32bit3 = result32bit3 << 1;\n      result64bit1 = CONCAT44(maskedInput1 * 2 + (uint)(CARRY4(result32bit2,result32bit2) || CARRY4(result32bit2 * 2,(uint)isZero)),\n                       result32bit2 * 2 + (uint)isZero);\n    }\n    input4 = maskedInput2 & 0x80000000 | (int)((ulonglong)result64bit1 >> 0x20) << 0xb | (uint)result64bit1 >> 0x15;\n    input3 = (uint)result64bit1 << 0xb | result32bit3 >> 0x15;\n    result32bit2 = result32bit3 * 0x800;\n    isOverflow1 = 0xfc < diff;\n    isOverflow2 = SBORROW4(diff,0xfd);\n    maskedInput1 = diff - 0xfd;\n    isZero = maskedInput1 == 0;\n    maskedInput2 = maskedInput1;\n    if (isOverflow1 && !isZero) {\n      isOverflow1 = 0x6ff < maskedInput1;\n      isOverflow2 = SBORROW4(maskedInput1,0x700);\n      maskedInput2 = diff - 0x7fd;\n      isZero = maskedInput1 == 0x700;\n    }\n    if (!isOverflow1 || isZero) {\n      isZero = 0x7fffffff < result32bit2;\n      if (result32bit2 == 0x80000000) {\n        isZero = (result32bit3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + diff * 0x100000 + (uint)CARRY4(input3,(uint)isZero),input3 + isZero\n                     );\n    }\n  }\n  if (!isZero && (int)maskedInput2 < 0 == isOverflow2) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isOverflow1 = SCARRY4(diff,0x36);\n  isZero = (int)(diff + 0x36) < 0;\n  isOverflow2 = diff == 0xffffffca;\n  if (isOverflow2 || isZero != isOverflow1) {\n    input3 = 0;\n  }\n  if (isOverflow2 || isZero != isOverflow1) {\n    input4 = input4 & 0x80000000;\n  }\n  if (isOverflow2 || isZero != isOverflow1) {\n    return CONCAT44(input4,input3);\n  }\n  maskedInput2 = -diff;\n  maskedInput1 = maskedInput2 - 0x20;\n  if (0x1f < (int)maskedInput2) {\n    diff = input3 >> (maskedInput1 & 0xff) | input4 << (0x20 - maskedInput1 & 0xff);\n    maskedInput2 = (input4 >> (maskedInput1 & 0xff) & ~((input4 & 0x80000000) >> (maskedInput1 & 0xff))) -\n            ((int)diff >> 0x1f);\n    if ((result32bit2 | input3 << (0x20 - maskedInput1 & 0xff) | diff << 1) == 0) {\n      maskedInput2 = maskedInput2 & ~(diff >> 0x1f);\n    }\n    return CONCAT44(input4,maskedInput2) & 0x80000000ffffffff;\n  }\n  sum = maskedInput2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(maskedInput1,0xc)) {\n    result32bit3 = input3 << (diff + 0x20 & 0xff);\n    maskedInput1 = input3 >> (maskedInput2 & 0xff) | input4 << (diff + 0x20 & 0xff);\n    diff = maskedInput1 + -((int)result32bit3 >> 0x1f);\n    if ((result32bit2 | result32bit3 << 1) == 0) {\n      diff = diff & ~(result32bit3 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (maskedInput2 & 0xff)) +\n                    (uint)CARRY4(maskedInput1,-((int)result32bit3 >> 0x1f)),diff);\n  }\n  maskedInput2 = 0xc - sum;\n  diff = input3 << (maskedInput2 & 0xff);\n  maskedInput2 = input3 >> (0x20 - maskedInput2 & 0xff) | input4 << (maskedInput2 & 0xff);\n  maskedInput1 = maskedInput2 + -((int)diff >> 0x1f);\n  if ((result32bit2 | diff << 1) == 0) {\n    maskedInput1 = maskedInput1 & ~(diff >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(maskedInput2,-((int)diff >> 0x1f)),maskedInput1);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_bitwise_difference_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result32bit1",
                "lVar2": "result64bit1",
                "uVar3": "maskedInput1",
                "uVar4": "maskedInput2",
                "iVar5": "sum",
                "uVar6": "diff",
                "unaff_r5": "maskedInput3",
                "uVar7": "result32bit2",
                "uVar8": "result32bit3",
                "bVar9": "isZero",
                "bVar10": "isOverflow1",
                "bVar11": "isOverflow2",
                "uVar12": "combinedInputs"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_difference_0800881c",
            "code": "\nulonglong calculate_bitwise_difference_0800881c(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  bool is_param1_or_param2_zero;\n  \n  temp_var3 = temp_var5 & input_param4 >> 0x14;\n  if (temp_var2 != temp_var5 && temp_var3 != temp_var5) {\n    is_param1_or_param2_zero = (input_param1 | input_param2 << 1) == 0;\n    if (!is_param1_or_param2_zero) {\n      is_param1_or_param2_zero = (input_param3 | input_param4 << 1) == 0;\n    }\n    if (is_param1_or_param2_zero) {\n      return (ulonglong)((input_param2 ^ input_param4) & 0x80000000) << 0x20;\n    }\n    if (temp_var2 == 0) {\n      temp_var4 = input_param2 & 0x80000000;\n      do {\n        temp_var1 = input_param1 & 0x80000000;\n        input_param1 = input_param1 << 1;\n        input_param2 = input_param2 * 2 + (uint)(temp_var1 != 0);\n      } while ((input_param2 & 0x100000) == 0);\n      input_param2 = input_param2 | temp_var4;\n      if (temp_var3 != 0) {\n        return CONCAT44(input_param2,input_param1);\n      }\n    }\n    do {\n      temp_var3 = input_param3 & 0x80000000;\n      input_param3 = input_param3 << 1;\n      input_param4 = input_param4 * 2 + (uint)(temp_var3 != 0);\n    } while ((input_param4 & 0x100000) == 0);\n    return CONCAT44(input_param2,input_param1);\n  }\n  is_param1_or_param2_zero = (input_param1 | input_param2 << 1) == 0;\n  if (is_param1_or_param2_zero) {\n    input_param2 = input_param4;\n    input_param1 = input_param3;\n  }\n  if (!is_param1_or_param2_zero) {\n    is_param1_or_param2_zero = (input_param3 | input_param4 << 1) == 0;\n  }\n  temp_var4 = input_param2;\n  if (((!is_param1_or_param2_zero) && ((temp_var2 != temp_var5 || ((input_param1 | input_param2 << 0xc) == 0)))) &&\n     ((temp_var3 != temp_var5 || (input_param1 = input_param3, temp_var4 = input_param4, (input_param3 | input_param4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param2 ^ input_param4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_var4,input_param1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_difference_0800881c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp_var1",
                "unaff_r4": "temp_var2",
                "uVar2": "temp_var3",
                "uVar3": "temp_var4",
                "in_r12": "temp_var5",
                "bVar4": "is_param1_or_param2_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_floating_point_representation_08008a02();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_floating_point_representation_08008a02",
            "code": "\nulonglong calculateFloatingPointRepresentation_08008a02(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & value4 >> 0x14;\n  bit4 = value2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((value1 | value2 << 0xc) == 0) && (value1 = value3, bit4 = value4, bit3 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      value1 = value3;\n      bit4 = value4;\n      if ((value3 | value4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (value1 | value2 << 1) == 0;\n      if (!isZero) {\n        isZero = (value3 | value4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = value2 & 0x80000000;\n          do {\n            bit1 = value1 & 0x80000000;\n            value1 = value1 << 1;\n            value2 = value2 * 2 + (uint)(bit1 != 0);\n          } while ((value2 & 0x100000) == 0);\n          value2 = value2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(value2,value1);\n          }\n        }\n        do {\n          bit4 = value3 & 0x80000000;\n          value3 = value3 << 1;\n          value4 = value4 * 2 + (uint)(bit4 != 0);\n        } while ((value4 & 0x100000) == 0);\n        return CONCAT44(value2,value1);\n      }\n      if ((value1 | value2 << 1) != 0) goto LAB_08008874;\n      if ((value3 | value4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit4,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_floating_point_representation_08008a02",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_equality_08008a74",
            "code": "\nuint checkEquality_08008a74(uint firstValue,uint secondValue,uint thirdValue,uint fourthValue)\n\n{\n  uint XORResult;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(secondValue << 1) >> 0x15 == -1 || (int)(fourthValue << 1) >> 0x15 == -1) &&\n     ((((int)(secondValue << 1) >> 0x15 == -1 && ((firstValue | secondValue << 0xc) != 0)) ||\n      (((int)(fourthValue << 1) >> 0x15 == -1 && ((thirdValue | fourthValue << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (firstValue | secondValue << 1) == 0;\n  if (isZero) {\n    isZero = (thirdValue | fourthValue << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = secondValue == fourthValue;\n  }\n  if (isZero) {\n    isZero = firstValue == thirdValue;\n  }\n  if (!isZero) {\n    XORResult = secondValue ^ fourthValue;\n    isZero = XORResult == 0;\n    if (-1 < (int)XORResult) {\n      isZero = secondValue == fourthValue;\n    }\n    isNegative = -1 < (int)XORResult && fourthValue <= secondValue;\n    if (isZero) {\n      isNegative = thirdValue <= firstValue;\n    }\n    fourthValue = (int)fourthValue >> 0x1f;\n    if (!isNegative) {\n      fourthValue = ~fourthValue;\n    }\n    return fourthValue | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_equality_08008a74",
                "param_1": "firstValue",
                "param_2": "secondValue",
                "param_3": "thirdValue",
                "param_4": "fourthValue",
                "uVar1": "XORResult",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "execute_and_return_param_08008af0",
            "code": "\nvoid execute_and_return_param_08008af0(undefined4 param_3,undefined4 param_4,undefined4 param_1,undefined4 param_2)\n\n{\n  execute_and_return_param_08008af0_08008b00(param_1,param_2,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "execute_and_return_param_08008af0",
                "param_1": "param_3",
                "param_2": "param_4",
                "param_3": "param_1",
                "param_4": "param_2"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "execute_and_return_param_08008b00",
            "code": "\nundefined4 execute_and_return_param_08008b00(undefined4 input_param)\n\n{\n  perform_equality_check();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "execute_and_return_param_08008b00",
                "param_1": "input_param",
                "check_equality_08008a74": "perform_equality_check"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_execution_result_08008b10",
            "code": "\nbool check_execution_result_08008b10(void)\n\n{\n  char execution_result;\n  \n  execute_and_return_param_08008b00();\n  return execution_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_execution_result_08008b10",
                "in_ZR": "execution_result"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_null_character_present_08008b24",
            "code": "\nbool is_null_character_present_08008b24(void)\n\n{\n  char input_character;\n  \n  execute_and_return_param_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_null_character_present_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_execution_result_08008b4c",
            "code": "\nbool check_execution_result_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  execute_and_return_param_08008af0();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_execution_result_08008b4c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_input_empty_08008b60",
            "code": "\nbool is_input_empty_08008b60(void)\n\n{\n  char input_character;\n  \n  execute_and_return_param_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_input_empty_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_shifted_value_08008ba0",
            "code": "\nuint calculate_shifted_value_08008ba0(uint input_parameter_1,uint input_parameter_2)\n\n{\n  uint shifted_result;\n  int multiplied_value;\n  uint shift_amount;\n  \n  multiplied_value = input_parameter_2 * 2 + 0x200000;\n  if (input_parameter_2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    shifted_result = multiplied_value >> 0x15;\n    shift_amount = -shifted_result - 0x3e1;\n    if (shifted_result < 0xfffffc20 && shift_amount != 0) {\n      shifted_result = (input_parameter_2 << 0xb | 0x80000000 | input_parameter_1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input_parameter_2 & 0x80000000) != 0) {\n        shifted_result = -shifted_result;\n      }\n      return shifted_result;\n    }\n  }\n  else if ((input_parameter_1 | input_parameter_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_parameter_2 = input_parameter_2 & 0x80000000;\n  if (input_parameter_2 == 0) {\n    input_parameter_2 = 0x7fffffff;\n  }\n  return input_parameter_2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_shifted_value_08008ba0",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "uVar1": "shifted_result",
                "iVar2": "multiplied_value",
                "uVar3": "shift_amount"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "check_param_validity_08008bf0",
            "code": "\nuint check_param_validity_08008bf0(uint param1,uint param2)\n\n{\n  int temp1;\n  uint temp2;\n  \n  if ((param2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = param2 * 2 + 0x200000;\n  if (param2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (param2 << 0xb | 0x80000000 | param1 >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((param1 | param2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "check_param_validity_08008bf0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "float_to_uint_08008c30",
            "code": "\nuint float_to_uint_08008c30(uint float_bits,uint float_value)\n\n{\n  uint result;\n  uint shifted_value;\n  uint offset;\n  uint adjusted_value;\n  bool is_zero;\n  bool is_valid;\n  \n  shifted_value = float_value * 2;\n  is_valid = shifted_value < 0x70000000;\n  offset = shifted_value + 0x90000000;\n  result = offset;\n  if (!is_valid) {\n    adjusted_value = shifted_value + 0x8fe00000;\n    result = adjusted_value;\n  }\n  is_zero = result == 0;\n  if (!is_valid && offset >= 0x200000) {\n    is_zero = adjusted_value == 0x1fc00000;\n  }\n  if (((is_valid || offset < 0x200000) || 0x1fc00000 < adjusted_value) || is_zero) {\n    if ((float_value & 0x40000000) != 0) {\n      if (((int)shifted_value >> 0x15 == -1) && ((float_bits | float_value << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return float_value & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_value + 0x92e00000) < 0 != SCARRY4(offset,0x2e00000)) {\n      return float_value & 0x80000000;\n    }\n    shifted_value = 0x18 - (shifted_value + 0x92e00000 >> 0x15);\n    result = float_bits >> (shifted_value & 0xff);\n    if (float_bits << (0x20 - shifted_value & 0xff) != 0) {\n      result = result | 1;\n    }\n    offset = float_value & 0x1fffff | 0x100000;\n    float_bits = result | offset << (0x20 - shifted_value & 0xff);\n    offset = (offset >> (shifted_value & 0xff)) << 1;\n  }\n  result = (float_value & 0x80000000 | float_bits >> 0x1d) + offset * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "float_to_uint_08008c30",
                "param_1": "float_bits",
                "param_2": "float_value",
                "uVar1": "result",
                "uVar2": "shifted_value",
                "uVar3": "offset",
                "in_r12": "adjusted_value",
                "bVar4": "is_zero",
                "bVar5": "is_valid"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_08008cd8",
            "code": "\nuint calculate_float_08008cd8(uint operand_1,uint operand_2,undefined4 undefined_param,uint modifier)\n\n{\n  int operand_1_shift;\n  int operand_2_shift;\n  uint operand_1_temp;\n  uint operand_2_temp;\n  uint result;\n  uint shift_amount;\n  uint difference;\n  bool is_equal;\n  \n  operand_1_temp = operand_2 ^ 0x80000000;\n  result = operand_1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    modifier = operand_2 << 1;\n    is_equal = modifier == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == modifier;\n  }\n  operand_1_shift = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = operand_1_shift == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)modifier >> 0x18 == -1;\n  }\n  if (is_equal) {\n    operand_2_shift = (int)(operand_2 << 1) >> 0x18;\n    if (operand_1_shift == -1 || operand_2_shift == -1) {\n      result = operand_1_temp;\n      if (operand_1_shift == -1) {\n        result = operand_1;\n      }\n      if (operand_1_shift != -1 || operand_2_shift != -1) {\n        operand_1_temp = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (operand_1_temp & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == operand_1_temp;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((operand_1 ^ operand_1_temp) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        operand_1 = operand_1_temp;\n      }\n      return operand_1;\n    }\n    if (operand_1 != operand_1_temp) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      operand_1_temp = operand_1 << 1;\n      if ((operand_1 & 0x80000000) != 0) {\n        operand_1_temp = operand_1_temp | 0x80000000;\n      }\n      return operand_1_temp;\n    }\n    if (result < 0xfe000000) {\n      return operand_1 + 0x800000;\n    }\n    operand_1 = operand_1 & 0x80000000;\nLAB_08008e12:\n    return operand_1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  modifier = modifier >> 0x18;\n  difference = modifier - result;\n  is_equal = difference != 0;\n  shift_amount = result;\n  if (is_equal && result <= modifier) {\n    shift_amount = result + difference;\n  }\n  if (is_equal && result <= modifier) {\n    operand_1_temp = operand_1_temp ^ operand_1;\n  }\n  if (is_equal && result <= modifier) {\n    operand_1 = operand_1 ^ operand_1_temp;\n  }\n  if (is_equal && result <= modifier) {\n    operand_1_temp = operand_1_temp ^ operand_1;\n  }\n  if (modifier < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return operand_1;\n  }\n  result = operand_1 & 0xffffff | 0x800000;\n  if ((operand_1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  operand_2_temp = operand_1_temp & 0xffffff | 0x800000;\n  if ((operand_1_temp & 0x80000000) != 0) {\n    operand_2_temp = -operand_2_temp;\n  }\n  if (shift_amount == difference) {\n    operand_2_temp = operand_2_temp ^ 0x800000;\n    if (shift_amount == 0) {\n      result = result ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)operand_2_temp >> (difference & 0xff));\n  operand_2_temp = operand_2_temp << (0x20 - difference & 0xff);\n  operand_1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = operand_2_temp != 0;\n    operand_2_temp = -operand_2_temp;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    operand_1_temp = operand_2_temp & 0x80000000;\n    operand_2_temp = operand_2_temp << 1;\n    result = result * 2 + (uint)(operand_1_temp != 0);\n    operand_1_temp = shift_amount - 2;\n    if (shift_amount - 1 == 0 || result < 0x800000) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)operand_1_temp < (int)difference) {\n        result = result >> (-(operand_1_temp - difference) & 0xff);\n      }\n      else {\n        result = result + (operand_1_temp - difference) * 0x800000;\n      }\n      return result | operand_1;\n    }\n  }\n  else {\n    operand_1_temp = shift_amount - 1;\n    if (0xffffff < result) {\n      operand_1_temp = result & 1;\n      result = result >> 1;\n      operand_2_temp = (uint)(operand_1_temp != 0) << 0x1f | operand_2_temp >> 1;\n      operand_1_temp = shift_amount;\n      if (0xfd < shift_amount) goto LAB_08008e12;\n    }\n  }\n  result = result + operand_1_temp * 0x800000 + (uint)(0x7fffffff < operand_2_temp);\n  if (operand_2_temp == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | operand_1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "operand_1",
                "param_2": "operand_2",
                "param_3": "undefined_param",
                "param_4": "modifier",
                "iVar1": "operand_1_shift",
                "iVar2": "operand_2_shift",
                "uVar3": "operand_1_temp",
                "uVar4": "operand_2_temp",
                "uVar5": "result",
                "uVar6": "shift_amount",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "floating_point_addition_08008cdc",
            "code": "\nuint floatingPointAddition_08008cdc(uint operand1,uint operand2,undefined4 roundingMode,uint exceptionFlags)\n\n{\n  int exponent1;\n  int exponent2;\n  uint normalizedOperand1;\n  uint normalizedOperand2;\n  uint difference;\n  uint normalizedDifference;\n  bool isZero;\n  \n  normalizedOperand2 = operand1 << 1;\n  isZero = normalizedOperand2 == 0;\n  if (!isZero) {\n    exceptionFlags = operand2 << 1;\n    isZero = exceptionFlags == 0;\n  }\n  if (!isZero) {\n    isZero = normalizedOperand2 == exceptionFlags;\n  }\n  exponent1 = (int)normalizedOperand2 >> 0x18;\n  if (!isZero) {\n    isZero = exponent1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)exceptionFlags >> 0x18 == -1;\n  }\n  if (isZero) {\n    exponent2 = (int)(operand2 << 1) >> 0x18;\n    if (exponent1 == -1 || exponent2 == -1) {\n      normalizedOperand2 = operand2;\n      if (exponent1 == -1) {\n        normalizedOperand2 = operand1;\n      }\n      if (exponent1 != -1 || exponent2 != -1) {\n        operand2 = normalizedOperand2;\n      }\n      isZero = (normalizedOperand2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (operand2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = normalizedOperand2 == operand2;\n      }\n      if (!isZero) {\n        normalizedOperand2 = normalizedOperand2 | 0x400000;\n      }\n      return normalizedOperand2;\n    }\n    if (((operand1 ^ operand2) & 0x7fffffff) != 0) {\n      if (normalizedOperand2 == 0) {\n        operand1 = operand2;\n      }\n      return operand1;\n    }\n    if (operand1 != operand2) {\n      return 0;\n    }\n    if ((normalizedOperand2 & 0xff000000) == 0) {\n      normalizedOperand2 = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        normalizedOperand2 = normalizedOperand2 | 0x80000000;\n      }\n      return normalizedOperand2;\n    }\n    if (normalizedOperand2 < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_08008e12:\n    return operand1 | 0x7f800000;\n  }\n  normalizedOperand2 = normalizedOperand2 >> 0x18;\n  exceptionFlags = exceptionFlags >> 0x18;\n  normalizedDifference = exceptionFlags - normalizedOperand2;\n  isZero = normalizedDifference != 0;\n  difference = normalizedOperand2;\n  if (isZero && normalizedOperand2 <= exceptionFlags) {\n    difference = normalizedOperand2 + normalizedDifference;\n  }\n  if (isZero && normalizedOperand2 <= exceptionFlags) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (isZero && normalizedOperand2 <= exceptionFlags) {\n    operand1 = operand1 ^ operand2;\n  }\n  if (isZero && normalizedOperand2 <= exceptionFlags) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (exceptionFlags < normalizedOperand2) {\n    normalizedDifference = -normalizedDifference;\n  }\n  if (0x19 < normalizedDifference) {\n    return operand1;\n  }\n  normalizedOperand2 = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    normalizedOperand2 = -normalizedOperand2;\n  }\n  normalizedOperand1 = operand2 & 0xffffff | 0x800000;\n  if ((operand2 & 0x80000000) != 0) {\n    normalizedOperand1 = -normalizedOperand1;\n  }\n  if (difference == normalizedDifference) {\n    normalizedOperand1 = normalizedOperand1 ^ 0x800000;\n    if (difference == 0) {\n      normalizedOperand2 = normalizedOperand2 ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      normalizedDifference = normalizedDifference - 1;\n    }\n  }\n  normalizedOperand2 = normalizedOperand2 + ((int)normalizedOperand1 >> (normalizedDifference & 0xff));\n  normalizedOperand1 = normalizedOperand1 << (0x20 - normalizedDifference & 0xff);\n  operand1 = normalizedOperand2 & 0x80000000;\n  if ((int)normalizedOperand2 < 0) {\n    isZero = normalizedOperand1 != 0;\n    normalizedOperand1 = -normalizedOperand1;\n    normalizedOperand2 = -normalizedOperand2 - (uint)isZero;\n  }\n  if (normalizedOperand2 < 0x800000) {\n    normalizedDifference = normalizedOperand1 & 0x80000000;\n    normalizedOperand1 = normalizedOperand1 << 1;\n    normalizedOperand2 = normalizedOperand2 * 2 + (uint)(normalizedDifference != 0);\n    normalizedDifference = difference - 2;\n    if (difference - 1 == 0 || normalizedOperand2 < 0x800000) {\n      difference = leadingZeroCount(normalizedOperand2) - 8;\n      normalizedOperand2 = normalizedOperand2 << (difference & 0xff);\n      if ((int)normalizedDifference < (int)difference) {\n        normalizedOperand2 = normalizedOperand2 >> (-(normalizedDifference - difference) & 0xff);\n      }\n      else {\n        normalizedOperand2 = normalizedOperand2 + (normalizedDifference - difference) * 0x800000;\n      }\n      return normalizedOperand2 | operand1;\n    }\n  }\n  else {\n    normalizedDifference = difference - 1;\n    if (0xffffff < normalizedOperand2) {\n      normalizedDifference = normalizedOperand2 & 1;\n      normalizedOperand2 = normalizedOperand2 >> 1;\n      normalizedOperand1 = (uint)(normalizedDifference != 0) << 0x1f | normalizedOperand1 >> 1;\n      normalizedDifference = difference;\n      if (0xfd < difference) goto LAB_08008e12;\n    }\n  }\n  normalizedOperand2 = normalizedOperand2 + normalizedDifference * 0x800000 + (uint)(0x7fffffff < normalizedOperand1);\n  if (normalizedOperand1 == 0x80000000) {\n    normalizedOperand2 = normalizedOperand2 & 0xfffffffe;\n  }\n  return normalizedOperand2 | operand1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "floating_point_addition_08008cdc",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "roundingMode",
                "param_4": "exceptionFlags",
                "iVar1": "exponent1",
                "iVar2": "exponent2",
                "uVar3": "normalizedOperand1",
                "uVar4": "normalizedOperand2",
                "uVar5": "difference",
                "uVar6": "normalizedDifference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_unsigned_value_08008e3c",
            "code": "\nuint calculateUnsignedValue_08008e3c(uint inputValue)\n\n{\n  uint result;\n  uint shiftAmount;\n  int constantValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result = LZCOUNT(inputValue);\n  shiftAmount = result - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    result = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftAmount = inputValue << result + 0x18;\n  result = constantValue + ((inputValue >> (0x20 - (result + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    result = result & ~(shiftAmount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_unsigned_value_08008e3c",
                "param_1": "inputValue",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_result_08008e44",
            "code": "\nuint calculate_result_08008e44(uint input_number)\n\n{\n  uint leading_zeros;\n  uint shift_value;\n  uint sign_bit;\n  int final_result;\n  \n  sign_bit = input_number & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_number = -input_number;\n  }\n  if (input_number == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_number);\n  shift_value = leading_zeros - 8;\n  final_result = ((sign_bit | 0x4b000000) - 0x800000) + shift_value * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_value & 0xff);\n    sign_bit = final_result + (input_number << (shift_value & 0xff)) +\n            (0U >> (0x20 - shift_value & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_value = input_number << leading_zeros + 0x18;\n  sign_bit = final_result + ((input_number >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_value >> 0x1f));\n  if ((shift_value & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_value >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_result_08008e44",
                "param_1": "input_number",
                "uVar1": "leading_zeros",
                "uVar2": "shift_value",
                "uVar3": "sign_bit",
                "iVar4": "final_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  longlong lVar1;\n  uint result1;\n  uint shift2;\n  int sum1;\n  int diff1;\n  uint mulResult;\n  int diff2;\n  uint mulResultHigh;\n  bool condition1;\n  bool condition2;\n  \n  shift2 = value1 >> 0x17 & 0xff;\n  condition1 = shift2 == 0;\n  if (!condition1) {\n    param4 = value2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = shift2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = value2 >> 0x17 & 0xff;\n    if (shift2 == 0xff || param4 == 0xff) {\n      condition1 = value1 == 0 || value1 == 0x80000000;\n      result1 = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        condition1 = value2 == 0;\n        result1 = value1;\n      }\n      if (!condition1) {\n        condition1 = value2 == 0x80000000;\n      }\n      mulResultHigh = result1;\n      if (((condition1) || ((shift2 == 0xff && ((result1 & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (mulResultHigh = value2, (value2 & 0x7fffff) != 0)))) {\n        return mulResultHigh | 0x7fc00000;\n      }\n      result1 = result1 ^ value2;\n      goto LAB_0800903c;\n    }\n    condition1 = (value1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (value2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    condition1 = shift2 == 0;\n    result1 = value1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        value1 = value1 << 1;\n        condition1 = (value1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      shift2 = shift2 - 1;\n    }\n    value1 = value1 | result1;\n    condition1 = param4 == 0;\n    result1 = value2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        value2 = value2 << 1;\n        condition1 = (value2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      param4 = param4 - 1;\n    }\n    value2 = value2 | result1;\n  }\n  sum1 = shift2 + param4;\n  mulResultHigh = value1 ^ value2;\n  shift2 = value1 << 9;\n  condition1 = shift2 == 0;\n  if (!condition1) {\n    value2 = value2 << 9;\n    condition1 = value2 == 0;\n  }\n  if (condition1) {\n    if (shift2 == 0) {\n      value2 = value2 << 9;\n    }\n    result1 = mulResultHigh & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    condition2 = SBORROW4(sum1,0x7f);\n    diff1 = sum1 + -0x7f;\n    condition1 = diff1 == 0;\n    diff2 = diff1;\n    if (!condition1 && 0x7e < sum1) {\n      condition2 = SBORROW4(0xff,diff1);\n      diff2 = 0xff - diff1;\n      condition1 = diff1 == 0xff;\n    }\n    if (!condition1 && diff2 < 0 == condition2) {\n      result1 = result1 | diff1 * 0x800000;\n    }\n    if (!condition1 && diff2 < 0 == condition2) {\n      return result1;\n    }\n    result1 = result1 | 0x800000;\n    mulResult = 0;\n    condition2 = SBORROW4(diff1,1);\n    mulResultHigh = sum1 - 0x80;\n    condition1 = mulResultHigh == 0;\n    shift2 = mulResultHigh;\n  }\n  else {\n    lVar1 = (ulonglong)(shift2 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    mulResult = (uint)lVar1;\n    result1 = (uint)((ulonglong)lVar1 >> 0x20);\n    condition1 = result1 < 0x800000;\n    if (condition1) {\n      result1 = result1 << 1;\n    }\n    if (condition1) {\n      result1 = result1 | mulResult >> 0x1f;\n      mulResult = mulResult << 1;\n    }\n    result1 = mulResultHigh & 0x80000000 | result1;\n    mulResultHigh = (sum1 + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(mulResultHigh,0xfd);\n    condition1 = mulResultHigh == 0xfd;\n    shift2 = mulResultHigh - 0xfd;\n    if (mulResultHigh < 0xfe) {\n      result1 = result1 + mulResultHigh * 0x800000 + (uint)(0x7fffffff < mulResult);\n      if (mulResult == 0x80000000) {\n        result1 = result1 & 0xfffffffe;\n      }\n      return result1;\n    }\n  }\n  if (condition1 || (int)shift2 < 0 != condition2) {\n    condition1 = (int)(mulResultHigh + 0x19) < 0;\n    if (mulResultHigh == 0xffffffe7 || condition1 != SCARRY4(mulResultHigh,0x19)) {\n      result1 = result1 & 0x80000000;\n    }\n    if (mulResultHigh != 0xffffffe7 && condition1 == SCARRY4(mulResultHigh,0x19)) {\n      shift2 = (result1 << 1) >> (-mulResultHigh & 0xff);\n      mulResultHigh = result1 << (mulResultHigh + 0x20 & 0xff);\n      shift2 = ((uint)((result1 & 0x80000000) != 0) << 0x1f | shift2 >> 1) + (uint)((byte)shift2 & 1);\n      if ((mulResult | mulResultHigh << 1) == 0) {\n        shift2 = shift2 & ~(mulResultHigh >> 0x1f);\n      }\n      return shift2;\n    }\n    return result1;\n  }\nLAB_0800903c:\n  return result1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result1",
                "uVar3": "shift2",
                "uVar8": "mulResultHigh",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "iVar4": "sum1",
                "iVar5": "diff1",
                "iVar7": "diff2",
                "uVar6": "mulResult"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "reverse_float_08009054",
            "code": "\nuint reverseFloat_08009054(uint inputParam1,uint inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZeroCondition;\n  bool comparisonCondition;\n  bool overflowCondition;\n  \n  temp2 = inputParam1 >> 0x17 & 0xff;\n  isZeroCondition = temp2 == 0;\n  if (!isZeroCondition) {\n    inputParam4 = inputParam2 >> 0x17 & 0xff;\n    isZeroCondition = inputParam4 == 0;\n  }\n  if (!isZeroCondition) {\n    isZeroCondition = temp2 == 0xff;\n  }\n  if (!isZeroCondition) {\n    isZeroCondition = inputParam4 == 0xff;\n  }\n  if (isZeroCondition) {\n    inputParam4 = inputParam2 >> 0x17 & 0xff;\n    temp6 = inputParam1;\n    if (temp2 == 0xff) {\n      if (((inputParam1 & 0x7fffff) != 0) || (temp6 = inputParam2, inputParam4 == 0xff)) {\nLAB_0800904a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (inputParam4 == 0xff) {\n        temp6 = inputParam2;\n        if ((inputParam2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (inputParam1 ^ inputParam2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZeroCondition = (inputParam1 & 0x7fffffff) == 0;\n      if (!isZeroCondition) {\n        isZeroCondition = (inputParam2 & 0x7fffffff) == 0;\n      }\n      if (!isZeroCondition) {\n        isZeroCondition = temp2 == 0;\n        temp6 = inputParam1 & 0x80000000;\n        while( true ) {\n          if (isZeroCondition) {\n            inputParam1 = inputParam1 << 1;\n            isZeroCondition = (inputParam1 & 0x800000) == 0;\n          }\n          if (!isZeroCondition) break;\n          temp2 = temp2 - 1;\n        }\n        inputParam1 = inputParam1 | temp6;\n        isZeroCondition = inputParam4 == 0;\n        temp6 = inputParam2 & 0x80000000;\n        while( true ) {\n          if (isZeroCondition) {\n            inputParam2 = inputParam2 << 1;\n            isZeroCondition = (inputParam2 & 0x800000) == 0;\n          }\n          if (!isZeroCondition) break;\n          inputParam4 = inputParam4 - 1;\n        }\n        inputParam2 = inputParam2 | temp6;\n        goto LAB_0800906c;\n      }\n      if ((inputParam1 & 0x7fffffff) == 0) {\n        if ((inputParam2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    inputParam1 = inputParam1 ^ inputParam2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - inputParam4;\n    if (inputParam2 << 9 == 0) {\n      inputParam1 = (inputParam1 ^ inputParam2) & 0x80000000 | inputParam1 & 0x7fffff;\n      overflowCondition = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      isZeroCondition = temp5 < 0;\n      comparisonCondition = temp5 == 0;\n      if (!comparisonCondition && isZeroCondition == overflowCondition) {\n        overflowCondition = SBORROW4(0xff,temp5);\n        isZeroCondition = 0xff - temp5 < 0;\n        comparisonCondition = temp5 == 0xff;\n      }\n      if (!comparisonCondition && isZeroCondition == overflowCondition) {\n        inputParam1 = inputParam1 | temp5 * 0x800000;\n      }\n      if (!comparisonCondition && isZeroCondition == overflowCondition) {\n        return inputParam1;\n      }\n      inputParam1 = inputParam1 | 0x800000;\n      temp2 = 0;\n      comparisonCondition = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      isZeroCondition = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (inputParam2 << 9) >> 4 | 0x10000000;\n      temp2 = (inputParam1 << 9) >> 4 | 0x10000000;\n      inputParam1 = (inputParam1 ^ inputParam2) & 0x80000000;\n      isZeroCondition = temp1 <= temp2;\n      if (!isZeroCondition) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)isZeroCondition;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          inputParam1 = inputParam1 | temp6;\n        }\n        isZeroCondition = temp1 >> 1 <= temp2;\n        if (isZeroCondition) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZeroCondition) {\n          inputParam1 = inputParam1 | temp6 >> 1;\n        }\n        isZeroCondition = temp1 >> 2 <= temp2;\n        if (isZeroCondition) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZeroCondition) {\n          inputParam1 = inputParam1 | temp6 >> 2;\n        }\n        isZeroCondition = temp1 >> 3 <= temp2;\n        if (isZeroCondition) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZeroCondition) {\n          inputParam1 = inputParam1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZeroCondition = temp2 == 0;\n        if (!isZeroCondition) {\n          temp6 = temp6 >> 4;\n          isZeroCondition = temp6 == 0;\n        }\n      } while (!isZeroCondition);\n      comparisonCondition = SBORROW4(temp4,0xfd);\n      isZeroCondition = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        inputParam1 = inputParam1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          inputParam1 = inputParam1 & 0xfffffffe;\n        }\n        return inputParam1;\n      }\n    }\n    if (isZeroCondition || (int)temp6 < 0 != comparisonCondition) {\n      isZeroCondition = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || isZeroCondition != SCARRY4(temp4,0x19)) {\n        inputParam1 = inputParam1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || isZeroCondition != SCARRY4(temp4,0x19)) {\n        return inputParam1;\n      }\n      temp6 = (inputParam1 << 1) >> (-temp4 & 0xff);\n      temp4 = inputParam1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((inputParam1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return inputParam1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "reverse_float_08009054",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "isZeroCondition",
                "bVar8": "comparisonCondition",
                "bVar9": "overflowCondition"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_result;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_result == 0;\n  if (!is_zero) {\n    combined_result = input_1 ^ input_2;\n    is_zero = combined_result == 0;\n  }\n  is_negative = -1 < (int)combined_result;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_result",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_params_080091fc",
            "code": "\nvoid concatenateParams_080091fc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_08009204(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_params_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  calculate_result_0800919c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_params_concatenated_08009214",
            "code": "\nbool check_if_params_concatenated_08009214(void)\n\n{\n  char concatenated_params;\n  \n  concatenate_params_08009204();\n  return concatenated_params != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_params_concatenated_08009214",
                "in_ZR": "concatenated_params"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_concatenation_empty_08009228",
            "code": "\nbool check_if_concatenation_empty_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08009204();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_concatenation_empty_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenation_result_0800923c",
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_params_08009204();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenated_params_08009250",
            "code": "\nbool check_concatenated_params_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_result;\n  \n  concatenate_params_080091fc();\n  return !(bool)is_carry_result || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenated_params_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_concatenation_result_08009264",
            "code": "\nbool check_concatenation_result_08009264(void)\n\n{\n  char input_character;\n  \n  concatenate_params_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_concatenation_result_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "extract_and_convert_value_08009278",
            "code": "\nuint extract_and_convert_value_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference_value;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference_value = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference_value != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference_value & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "extract_and_convert_value_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference_value"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  execute_and_increment_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_app_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_float_08009318",
            "code": "\nlonglong calculate_float_08009318(uint numerator,uint denominator,undefined4 param_3,undefined4 param_4)\n\n{\n  int isInputEmpty;\n  uint shiftAmount;\n  uint mask;\n  bool carryFlag;\n  undefined8 result;\n  longlong finalValue;\n  \n  mask = (denominator << 1) >> 0x15;\n  shiftAmount = mask - 0x3ff;\n  if ((int)shiftAmount < 0x14) {\n    if ((int)shiftAmount < 0) {\n      result = calculate_unsigned_division_080082d4(numerator,denominator,0x8800759c,0x7e37e43c,param_4);\n      isInputEmpty = is_input_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      finalValue = CONCAT44(denominator,numerator);\n      if (isInputEmpty != 0) {\n        if ((int)denominator < 0) {\n          finalValue = -0x8000000000000000;\n        }\n        else if ((numerator | denominator) == 0) {\n          finalValue = 0;\n        }\n        else {\n          finalValue = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shiftAmount & 0xff);\n      finalValue = CONCAT44(denominator,numerator);\n      if ((denominator & mask | numerator) != 0) {\n        result = calculate_unsigned_division_080082d4(numerator,denominator,0x8800759c,0x7e37e43c,param_4);\n        isInputEmpty = is_input_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        finalValue = CONCAT44(denominator,numerator);\n        if (isInputEmpty != 0) {\n          if (0 < (int)denominator) {\n            denominator = denominator + (0x100000 >> (shiftAmount & 0xff));\n          }\n          finalValue = (ulonglong)(denominator & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftAmount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    finalValue = CONCAT44(denominator,numerator);\n    if ((mask & numerator) != 0) {\n      result = calculate_unsigned_division_080082d4(numerator,denominator,0x8800759c,0x7e37e43c,param_4);\n      isInputEmpty = is_input_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      finalValue = CONCAT44(denominator,numerator);\n      if (isInputEmpty != 0) {\n        if (0 < (int)denominator) {\n          if (shiftAmount == 0x14) {\n            denominator = denominator + 1;\n          }\n          else {\n            shiftAmount = 1 << (0x34 - shiftAmount & 0xff);\n            carryFlag = CARRY4(shiftAmount,numerator);\n            numerator = shiftAmount + numerator;\n            if (carryFlag != false) {\n              denominator = denominator + 1;\n            }\n          }\n        }\n        finalValue = CONCAT44(denominator,numerator & ~mask);\n      }\n    }\n  }\n  else {\n    finalValue = CONCAT44(denominator,numerator);\n    if (shiftAmount == 0x400) {\n      finalValue = calculate_unsigned_division_080082d4();\n    }\n  }\n  return finalValue;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_float_08009318",
                "param_1": "numerator",
                "param_2": "denominator",
                "iVar1": "isInputEmpty",
                "uVar2": "shiftAmount",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "result",
                "lVar6": "finalValue"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_value,uint divisor)\n\n{\n  undefined4 result;\n  uint divisor_flag;\n  undefined4 temp_variable_1;\n  undefined4 temp_variable_2;\n  undefined4 temp_variable_3;\n  undefined4 temp_variable_4;\n  \n  if (0x3fe921fb < (divisor & 0x7fffffff)) {\n    if ((divisor & 0x7fffffff) < 0x7ff00000) {\n      divisor_flag = calculate_and_store_divisions_08009d78(input_value,divisor,&temp_variable_1);\n      divisor_flag = divisor_flag & 3;\n      if (divisor_flag == 1) {\n        result = calculate_and_update_value_0800adf0(temp_variable_1,temp_variable_2,temp_variable_3,temp_variable_4,1);\n      }\n      else if (divisor_flag == 2) {\n        result = calculate_shifted_value_0800a348(temp_variable_1,temp_variable_2,temp_variable_3,temp_variable_4);\n      }\n      else if (divisor_flag == 0) {\n        result = calculate_shifted_value_0800a348(temp_variable_1,temp_variable_2,temp_variable_3,temp_variable_4);\n      }\n      else {\n        result = calculate_and_update_value_0800adf0(temp_variable_1,temp_variable_2,temp_variable_3,temp_variable_4,1);\n      }\n    }\n    else {\n      result = calculate_080082d0(input_value,divisor,input_value,divisor);\n    }\n    return result;\n  }\n  result = calculate_shifted_value_0800a348(input_value,divisor,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_value",
                "param_2": "divisor",
                "uVar1": "result",
                "uVar2": "divisor_flag",
                "local_28": "temp_variable_1",
                "uStack_24": "temp_variable_2",
                "local_20": "temp_variable_3",
                "uStack_1c": "temp_variable_4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_1,uint input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int is_empty;\n  uint shifted_bits;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  \n  mask = (input_2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      result = calculate_division(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      is_empty = is_empty_input((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_empty != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      final_result = CONCAT44(input_2,input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        result = calculate_division(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n        is_empty = is_empty_input((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input_2,input_1);\n        if (is_empty != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (shifted_bits & 0xff));\n          }\n          final_result = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input_2,input_1);\n    if ((mask & input_1) != 0) {\n      result = calculate_division(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      is_empty = is_empty_input((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_empty != 0) {\n        if ((int)input_2 < 0) {\n          if (shifted_bits == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shifted_bits = 1 << (0x34 - shifted_bits & 0xff);\n            carry_flag = CARRY4(shifted_bits,input_1);\n            input_1 = shifted_bits + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_2,input_1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_2,input_1);\n    if (shifted_bits == 0x400) {\n      final_result = calculate_division();\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "uVar2": "shifted_bits",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "final_result",
                "iVar1": "is_empty",
                "calculate_unsigned_division_080082d4": "calculate_division",
                "is_input_empty_08008b60": "is_empty_input"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_shifted_value_080095b8",
            "code": "\nint calculate_shifted_value_080095b8(uint value_1,uint value_2)\n\n{\n  uint carry_shift;\n  uint shift_amount;\n  uint result;\n  int sign;\n  uint offset;\n  \n  shift_amount = (value_2 << 1) >> 0x15;\n  offset = shift_amount - 0x3ff;\n  if ((int)value_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = value_2 & 0xfffff | 0x100000;\n  if ((int)offset < 0x14) {\n    if ((int)offset < 0) {\n      if (offset != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (offset & 0xff)) >> (0x14 - offset & 0xff);\n  }\n  else {\n    if (0x1e < offset) {\n      sign = calculate_shifted_value_080095b8_08008ba0();\n      return sign;\n    }\n    if ((int)offset < 0x34) {\n      carry_shift = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (CARRY4(carry_shift,value_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (offset != 0x14) {\n        result = result | carry_shift + value_1 >> (0x34 - offset & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | value_1 << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_shifted_value_080095b8",
                "param_1": "value_1",
                "param_2": "value_2",
                "uVar1": "carry_shift",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "offset"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_combined_value_08009654",
            "code": "\nlonglong calculate_combined_value_08009654(uint input_value_1,uint input_value_2)\n\n{\n  uint shift_amount;\n  uint mask;\n  longlong combined_result;\n  \n  combined_result = CONCAT44(input_value_2,input_value_1);\n  mask = (input_value_2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      input_value_2 = input_value_2 & 0x80000000;\n      if (shift_amount == 0xffffffff) {\n        input_value_2 = input_value_2 | 0x3ff00000;\n      }\n      combined_result = (ulonglong)input_value_2 << 0x20;\n    }\n    else {\n      mask = 0xfffff >> (shift_amount & 0xff);\n      combined_result = CONCAT44(input_value_2,input_value_1);\n      if ((input_value_2 & mask | input_value_1) != 0) {\n        combined_result = (ulonglong)(input_value_2 + (0x80000 >> (shift_amount & 0xff)) & ~mask) << 0x20;\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    if ((input_value_1 & mask) != 0) {\n      shift_amount = 1 << (0x33 - shift_amount & 0xff);\n      if (check_carry(input_value_1,shift_amount) != false) {\n        input_value_2 = input_value_2 + 1;\n      }\n      combined_result = CONCAT44(input_value_2,input_value_1 + shift_amount & ~mask);\n    }\n  }\n  else {\n    combined_result = CONCAT44(input_value_2,input_value_1);\n    if (shift_amount == 0x400) {\n      combined_result = perform_unsigned_division();\n    }\n  }\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_combined_value_08009654",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "shift_amount",
                "uVar2": "mask",
                "lVar3": "combined_result",
                "CARRY4": "check_carry",
                "calculate_unsigned_division_080082d4": "perform_unsigned_division"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_and_update_value_080096e8",
            "code": "\nundefined4 calculateAndUpdateValue_080096e8(undefined4 inputValue,uint unsignedValue)\n\n{\n  undefined4 returnValue;\n  uint divisionResult;\n  undefined4 calculatedValue1;\n  undefined4 calculatedValue2;\n  undefined4 calculatedValue3;\n  undefined4 calculatedValue4;\n  \n  if (0x3fe921fb < (unsignedValue & 0x7fffffff)) {\n    if ((unsignedValue & 0x7fffffff) < 0x7ff00000) {\n      divisionResult = calculate_and_store_divisions_08009d78(inputValue,unsignedValue,&calculatedValue1);\n      divisionResult = divisionResult & 3;\n      if (divisionResult == 1) {\n        returnValue = calculate_shifted_value_0800a348(calculatedValue1,calculatedValue2,calculatedValue3,calculatedValue4);\n      }\n      else if (divisionResult == 2) {\n        returnValue = calculate_and_update_value_0800adf0(calculatedValue1,calculatedValue2,calculatedValue3,calculatedValue4,1);\n      }\n      else if (divisionResult == 0) {\n        returnValue = calculate_and_update_value_0800adf0(calculatedValue1,calculatedValue2,calculatedValue3,calculatedValue4,1);\n      }\n      else {\n        returnValue = calculate_shifted_value_0800a348(calculatedValue1,calculatedValue2,calculatedValue3,calculatedValue4);\n      }\n    }\n    else {\n      returnValue = calculate_080082d0(inputValue,unsignedValue,inputValue,unsignedValue);\n    }\n    return returnValue;\n  }\n  returnValue = calculate_and_update_value_0800adf0(inputValue,unsignedValue,0,0,0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_and_update_value_080096e8",
                "param_1": "inputValue",
                "param_2": "unsignedValue",
                "uVar1": "returnValue",
                "uVar2": "divisionResult",
                "local_28": "calculatedValue1",
                "uStack_24": "calculatedValue2",
                "local_20": "calculatedValue3",
                "uStack_1c": "calculatedValue4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_shifted_value_08009798",
            "code": "\nlonglong calculate_shifted_value_08009798(uint input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  uint shifted_bits;\n  uint shift_amount;\n  longlong result;\n  \n  shift_amount = (input_2 << 1) >> 0x15;\n  shifted_bits = shift_amount - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input_2,input_1 & ~(0xffffffffU >> (shift_amount - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input_2,input_1);\n    }\n    result = calculate_unsigned_division_080082d4(input_1,input_2,input_1,input_2,input_4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_shifted_value_08009798",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "shifted_bits",
                "uVar2": "shift_amount",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_result_thunk_08009990",
            "code": "\nuint calculate_result_thunk_08009990(uint num_1,uint num_2,uint num_3,uint num_4)\n\n{\n  int temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  undefined8 temp_var6;\n  \n  temp_var4 = num_4 & 0x7fffffff;\n  if (((temp_var4 | (-num_3 | num_3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var5 = num_2 & 0x7fffffff, (temp_var5 | (-num_1 | num_1) >> 0x1f) < 0x7ff00001)) {\n    if ((num_4 + 0xc0100000 | num_3) == 0) {\n      temp_var4 = calculate_result_thunk_08009990_0800af78();\n      return temp_var4;\n    }\n    temp_var3 = (int)num_4 >> 0x1e & 2U | num_2 >> 0x1f;\n    if ((temp_var5 | num_1) == 0) {\n      if (temp_var3 == 2) {\n        num_1 = 0x54442d18;\n      }\n      else if (temp_var3 == 3) {\n        num_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var4 | num_3) != 0) {\n        if (temp_var4 == 0x7ff00000) {\n          temp_var3 = temp_var3 - 1;\n          if (temp_var5 == 0x7ff00000) {\n            if (temp_var3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var3 * 8);\n          }\n          return 0;\n        }\n        if (temp_var5 != 0x7ff00000) {\n          temp_var1 = (int)(temp_var5 - temp_var4) >> 0x14;\n          if ((int)(temp_var5 - temp_var4) < 0x3d00000) {\n            if (((int)num_4 < 0) && (temp_var1 + 0x3c < 0 != SCARRY4(temp_var1,0x3c))) {\n              temp_var6 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(num_1,num_2,num_3,num_4,num_4);\n              FUNC_0800b2cc();\n              temp_var6 = calculate_result_thunk_08009990_0800af78();\n            }\n          }\n          else {\n            temp_var6 = 0x3ff921fb54442d18;\n          }\n          temp_var2 = (undefined4)((ulonglong)temp_var6 >> 0x20);\n          temp_var4 = (uint)temp_var6;\n          if (temp_var3 == 1) {\n            return temp_var4;\n          }\n          if (temp_var3 == 2) {\n            temp_var6 = calculate_080082d0(temp_var4,temp_var2,0x33145c07,0x3ca1a626);\n            temp_var4 = calculate_080082d0(0x54442d18,0x400921fb,(int)temp_var6,(int)((ulonglong)temp_var6 >> 0x20));\n            return temp_var4;\n          }\n          if (temp_var3 == 0) {\n            return temp_var4;\n          }\n          temp_var6 = calculate_080082d0(temp_var4,temp_var2,0x33145c07,0x3ca1a626);\n          temp_var4 = calculate_080082d0((int)temp_var6,(int)((ulonglong)temp_var6 >> 0x20),0x54442d18,0x400921fb);\n          return temp_var4;\n        }\n      }\n      if ((int)num_2 < 0) {\n        num_1 = 0x54442d18;\n      }\n      else {\n        num_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    num_1 = calculate_unsigned_division_080082d4(num_3,num_4,num_1,num_2);\n  }\n  return num_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "param_1": "num_1",
                "param_2": "num_2",
                "param_3": "num_3",
                "param_4": "num_4",
                "iVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_and_store_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_and_store_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int *data_value_ptr;\n  undefined8 final_result;\n  undefined4 constant_value;\n  char *function_name;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 start_value;\n  undefined4 end_value;\n  int msb;\n  \n  final_result = calculate_unsigned_division_08009b24();\n  if (DAT_20000014 == -1) {\n    return final_result;\n  }\n  msb = extract_msb_0800b2d4();\n  if (msb != 0) {\n    return final_result;\n  }\n  result = extract_msb_0800b2d4(side_a,side_b);\n  if (result == 0) {\n    return final_result;\n  }\n  result = extract_msb_0800b2d4(side_c,side_d);\n  if (result == 0) {\n    return final_result;\n  }\n  constant_value = 3;\n  function_name = \"hypot\";\n  local_param_1 = side_a;\n  local_param_2 = side_b;\n  local_param_3 = side_c;\n  local_param_4 = side_d;\n  if (DAT_20000014 == '\\0') {\n    start_value = 0xe0000000;\n    end_value = 0x47efffff;\nLAB_080098aa:\n    result = zero_return_function_0800b2e0(&constant_value);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    start_value = 0;\n    end_value = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_ptr = (undefined4 *)get_data_value_0800b3dc();\n  *data_ptr = 0x22;\nLAB_08009896:\n  final_result = CONCAT44(end_value,start_value);\n  if (msb != 0) {\n    data_value_ptr = (int *)get_data_value_0800b3dc();\n    final_result = CONCAT44(end_value,start_value);\n    *data_value_ptr = msb;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_and_store_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "piVar3": "data_value_ptr",
                "uVar4": "final_result",
                "local_50": "constant_value",
                "pcStack_4c": "function_name",
                "local_48": "local_param_1",
                "uStack_44": "local_param_2",
                "local_40": "local_param_3",
                "uStack_3c": "local_param_4",
                "local_38": "start_value",
                "uStack_34": "end_value",
                "local_30": "msb"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 processData_080098d0(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  char cVar1;\n  undefined4 divisionResult;\n  int parameterCheckResult;\n  undefined4 *dataPointer1;\n  int *dataPointer2;\n  undefined4 flag1;\n  undefined *charPointer;\n  undefined4 inputValue1Copy;\n  undefined4 inputValue2Copy;\n  undefined4 inputValue1Copy1;\n  undefined4 inputValue2Copy1;\n  undefined8 floatingPointResult;\n  int zeroReturn;\n  \n  divisionResult = calculate_division_0800a1bc();\n  cVar1 = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (zeroReturn = check_parameters_08008b74(inputValue1,inputValue2,inputValue1,inputValue2), zeroReturn != 0)) ||\n     (parameterCheckResult = is_null_character_present_08008b24(inputValue1,inputValue2,0,0), parameterCheckResult == 0)) {\n    return divisionResult;\n  }\n  flag1 = 1;\n  charPointer = &DAT_0800be5c;\n  inputValue1Copy = inputValue1;\n  inputValue2Copy = inputValue2;\n  inputValue1Copy1 = inputValue1;\n  inputValue2Copy1 = inputValue2;\n  if (cVar1 == '\\0') {\n    floatingPointResult = 0;\nLAB_0800996c:\n    parameterCheckResult = zero_return_function_0800b2e0(&flag1);\n    if (parameterCheckResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    floatingPointResult = calculate_floating_point_08008894(0,0,0,0);\n    if (cVar1 != '\\x02') goto LAB_0800996c;\n  }\n  dataPointer1 = (undefined4 *)get_data_value_0800b3dc();\n  *dataPointer1 = 0x21;\njoined_r0x0800997a:\n  if (zeroReturn != 0) {\n    dataPointer2 = (int *)get_data_value_0800b3dc();\n    *dataPointer2 = zeroReturn;\n  }\n  return (undefined4)floatingPointResult;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar2": "divisionResult",
                "iVar3": "parameterCheckResult",
                "puVar4": "dataPointer1",
                "piVar5": "dataPointer2",
                "local_50": "flag1",
                "local_4c": "charPointer",
                "local_48": "inputValue1Copy",
                "uStack_44": "inputValue2Copy",
                "local_40": "inputValue1Copy1",
                "uStack_3c": "inputValue2Copy1",
                "local_38": "floatingPointResult",
                "local_30": "zeroReturn"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_modified_result_08009990",
            "code": "\nuint calculate_modified_result_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint modifiedParam_4;\n  uint modifiedParam_2;\n  undefined8 tempVar4;\n  \n  modifiedParam_4 = input_4 & 0x7fffffff;\n  if (((modifiedParam_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (modifiedParam_2 = input_2 & 0x7fffffff, (modifiedParam_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      modifiedParam_4 = calculate_result_0800af78();\n      return modifiedParam_4;\n    }\n    tempVar3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((modifiedParam_2 | input_1) == 0) {\n      if (tempVar3 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((modifiedParam_4 | input_3) != 0) {\n        if (modifiedParam_4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (modifiedParam_2 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (modifiedParam_2 != 0x7ff00000) {\n          tempVar1 = (int)(modifiedParam_2 - modifiedParam_4) >> 0x14;\n          if ((int)(modifiedParam_2 - modifiedParam_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar4 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              tempVar4 = calculate_result_0800af78();\n            }\n          }\n          else {\n            tempVar4 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar4 >> 0x20);\n          modifiedParam_4 = (uint)tempVar4;\n          if (tempVar3 == 1) {\n            return modifiedParam_4;\n          }\n          if (tempVar3 == 2) {\n            tempVar4 = calculate_080082d0(modifiedParam_4,tempVar2,0x33145c07,0x3ca1a626);\n            modifiedParam_4 = calculate_080082d0(0x54442d18,0x400921fb,(int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n            return modifiedParam_4;\n          }\n          if (tempVar3 == 0) {\n            return modifiedParam_4;\n          }\n          tempVar4 = calculate_080082d0(modifiedParam_4,tempVar2,0x33145c07,0x3ca1a626);\n          modifiedParam_4 = calculate_080082d0((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20),0x54442d18,0x400921fb);\n          return modifiedParam_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_unsigned_division_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_modified_result_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "modifiedParam_4",
                "uVar5": "modifiedParam_2",
                "uVar6": "tempVar4"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_unsigned_division_08009b24",
            "code": "\nuint calculateUnsignedDivision_08009b24(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  undefined4 temp1;\n  int isNullCharPresent;\n  uint result;\n  int temp2;\n  undefined4 temp4;\n  int temp3;\n  uint temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  int localVar;\n  \n  divisor = divisor & 0x7fffffff;\n  remainder = remainder & 0x7fffffff;\n  result = dividend;\n  temp5 = divisor;\n  if (divisor < remainder) {\n    result = quotient;\n    quotient = dividend;\n    temp5 = remainder;\n    remainder = divisor;\n  }\n  if (0x3c00000 < (int)(temp5 - remainder)) {\n    result = calculate_unsigned_division_080082d4(result,temp5,quotient,remainder);\n    return result;\n  }\n  if (temp5 < 0x5f300001) {\n    localVar = 0;\n  }\n  else {\n    if (0x7fefffff < temp5) {\n      if ((temp5 & 0xfffff | result) != 0) {\n        result = calculate_unsigned_division_080082d4(result,temp5,quotient,remainder);\n      }\n      if ((remainder ^ 0x7ff00000 | quotient) != 0) {\n        return result;\n      }\n      return quotient;\n    }\n    temp5 = temp5 + 0xda800000;\n    remainder = remainder + 0xda800000;\n    localVar = 600;\n  }\n  temp9 = CONCAT44(temp5,result);\n  temp8 = CONCAT44(remainder,quotient);\n  if ((int)remainder < 0x20b00000) {\n    if ((int)remainder < 0x100000) {\n      if ((remainder | quotient) == 0) {\n        return result;\n      }\n      temp8 = calculate_bitwise_difference_08008640(quotient,remainder,0,0x7fd00000);\n      temp9 = calculate_bitwise_difference_08008640(result,temp5,0,0x7fd00000);\n      localVar = localVar + -0x3fe;\n    }\n    else {\n      temp5 = temp5 + 0x25800000;\n      temp9 = CONCAT44(temp5,result);\n      remainder = remainder + 0x25800000;\n      temp8 = CONCAT44(remainder,quotient);\n      localVar = localVar + -600;\n    }\n  }\n  temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n  temp6 = (undefined4)temp9;\n  temp3 = (int)((ulonglong)temp8 >> 0x20);\n  temp4 = (undefined4)temp8;\n  temp8 = calculate_080082d0(temp6,temp7,temp4,temp3);\n  temp2 = (int)((ulonglong)temp8 >> 0x20);\n  temp1 = (undefined4)temp8;\n  isNullCharPresent = is_null_character_present_08008b24(temp4,temp3,temp1,temp2);\n  if (isNullCharPresent == 0) {\n    temp8 = calculate_bitwise_difference_08008640(0,remainder,0);\n    temp9 = calculate_bitwise_difference_08008640(temp1,temp2 + -0x80000000,temp1,temp2);\n    temp10 = calculate_unsigned_division_080082d4(temp6,temp7,temp6,temp7);\n    temp10 = calculate_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp5 + 0x100000);\n    temp10 = calculate_bitwise_difference_08008640((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp4,temp3);\n    temp11 = calculate_080082d0(temp4,temp3,0,remainder);\n    temp11 = calculate_bitwise_difference_08008640((int)temp11,(int)((ulonglong)temp11 >> 0x20),0,temp5 + 0x100000);\n    temp10 = calculate_unsigned_division_080082d4((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                          (int)((ulonglong)temp11 >> 0x20));\n    temp9 = calculate_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                          (int)((ulonglong)temp10 >> 0x20));\n    calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                 (int)((ulonglong)temp9 >> 0x20));\n    temp8 = calculate_division_0800a1bc();\n  }\n  else {\n    temp8 = calculate_bitwise_difference_08008640(0,temp5,0,temp5);\n    temp9 = calculate_bitwise_difference_08008640(temp4,temp3 + -0x80000000,temp4,temp3);\n    temp10 = calculate_unsigned_division_080082d4(temp6,temp7,0,temp5);\n    temp11 = calculate_080082d0(temp6,temp7,0,temp5);\n    temp10 = calculate_bitwise_difference_08008640((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                          (int)((ulonglong)temp11 >> 0x20));\n    temp9 = calculate_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                          (int)((ulonglong)temp10 >> 0x20));\n    calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                 (int)((ulonglong)temp9 >> 0x20));\n    temp8 = calculate_division_0800a1bc();\n  }\n  result = (uint)temp8;\n  if (localVar != 0) {\n    result = calculate_bitwise_difference_08008640(result,(int)((ulonglong)temp8 >> 0x20),0,localVar * 0x100000 + 0x3ff00000);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_unsigned_division_08009b24",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar1": "temp1",
                "iVar2": "isNullCharPresent",
                "uVar3": "result",
                "iVar4": "temp2",
                "iVar6": "temp3",
                "uVar5": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar13": "temp11",
                "local_3c": "localVar"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_and_store_divisions_08009d78",
            "code": "\nint calculate_and_store_divisions_08009d78(undefined4 input_value,uint input_parameter,undefined8 *output_array)\n\n{\n  undefined4 quotient_high;\n  undefined4 quotient_low;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  uint temp_value;\n  int result;\n  undefined8 temp6;\n  undefined8 temp7;\n  undefined8 temp8;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  temp_value = input_parameter & 0x7fffffff;\n  if (temp_value < 0x3fe921fc) {\n    *(undefined4 *)output_array = input_value;\n    *(uint *)((int)output_array + 4) = input_parameter;\n    *(undefined4 *)(output_array + 1) = 0;\n    *(undefined4 *)((int)output_array + 0xc) = 0;\n    return 0;\n  }\n  if (temp_value < 0x4002d97c) {\n    if ((int)input_parameter < 1) {\n      temp6 = calculate_unsigned_division_080082d4(input_value,input_parameter,0x54400000,0x3ff921fb);\n      temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n      quotient_high = (undefined4)temp6;\n      if (temp_value != 0x3ff921fb) {\n        temp6 = calculate_unsigned_division_080082d4(quotient_high,temp1,0x1a626331,0x3dd0b461);\n        *output_array = temp6;\n        temp6 = calculate_080082d0(quotient_high,temp1);\n        temp6 = calculate_unsigned_division_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x1a626331,0x3dd0b461);\n        output_array[1] = temp6;\n        return -1;\n      }\n      temp6 = calculate_unsigned_division_080082d4(quotient_high,temp1,0x1a600000,0x3dd0b461);\n      quotient_high = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp7 = calculate_unsigned_division_080082d4((int)temp6,quotient_high,0x2e037073,0x3ba3198a);\n      *output_array = temp7;\n      temp6 = calculate_080082d0((int)temp6,quotient_high);\n      temp6 = calculate_unsigned_division_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x2e037073,0x3ba3198a);\n      output_array[1] = temp6;\n      return -1;\n    }\n    temp6 = calculate_080082d0();\n    temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n    quotient_high = (undefined4)temp6;\n    if (temp_value != 0x3ff921fb) {\n      temp6 = calculate_080082d0(quotient_high,temp1,0x1a626331,0x3dd0b461);\n      *output_array = temp6;\n      temp6 = calculate_080082d0(quotient_high,temp1);\n      temp6 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x1a626331,0x3dd0b461);\n      output_array[1] = temp6;\n      return 1;\n    }\n    temp6 = calculate_080082d0(quotient_high,temp1,0x1a600000,0x3dd0b461);\n    quotient_high = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp7 = calculate_080082d0((int)temp6,quotient_high,0x2e037073,0x3ba3198a);\n    *output_array = temp7;\n    temp6 = calculate_080082d0((int)temp6,quotient_high);\n    temp6 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x2e037073,0x3ba3198a);\n    output_array[1] = temp6;\n    return 1;\n  }\n  if (0x413921fb < temp_value) {\n    if (0x7fefffff < temp_value) {\n      temp6 = calculate_080082d0(input_value,input_parameter,input_value,input_parameter);\n      output_array[1] = temp6;\n      *output_array = temp6;\n      return 0;\n    }\n    result = ((int)temp_value >> 0x14) + -0x416;\n    calculate_shifted_value_08008ba0();\n    local_var3 = calculate_shifted_value_0800856c();\n    temp6 = calculate_080082d0(input_value,temp_value + result * -0x100000,(int)local_var3,\n                          (int)((ulonglong)local_var3 >> 0x20));\n    temp6 = calculate_bitwise_difference_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x41700000);\n    calculate_shifted_value_08008ba0();\n    local_var4 = calculate_shifted_value_0800856c();\n    temp6 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20));\n    local_var5 = calculate_bitwise_difference_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x41700000);\n    check_execution_result_08008b10((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = calculate_updated_value_0800a5a0(&local_var3,output_array,result);\n    if (-1 < (int)input_parameter) {\n      return result;\n    }\n    *(int *)((int)output_array + 4) = *(int *)((int)output_array + 4) + -0x80000000;\n    *(int *)((int)output_array + 0xc) = *(int *)((int)output_array + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp6 = FUNC_0800b2cc();\n  temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp7 = calculate_bitwise_difference_08008640((int)temp6,temp1,0x6dc9c883,0x3fe45f30);\n  calculate_unsigned_division_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3fe00000);\n  result = calculate_shifted_value_08008ba0();\n  temp7 = calculate_shifted_value_0800856c();\n  temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n  quotient_high = (undefined4)temp7;\n  temp7 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x54400000,0x3ff921fb);\n  temp6 = calculate_080082d0((int)temp6,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n  temp3 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp1 = (undefined4)temp6;\n  temp7 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == temp_value)) {\n    temp8 = calculate_080082d0(temp1,temp3,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    if ((int)((temp_value >> 0x14) - ((uint)((int)((ulonglong)temp8 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp7 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x1a600000,0x3dd0b461);\n    temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp6 = calculate_080082d0(temp1,temp3,(int)temp7,temp4);\n    temp5 = (undefined4)((ulonglong)temp6 >> 0x20);\n    quotient_low = (undefined4)temp6;\n    temp8 = calculate_080082d0(temp1,temp3,quotient_low,temp5);\n    temp7 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,temp4);\n    temp8 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x2e037073,0x3ba3198a);\n    temp7 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n    temp8 = calculate_080082d0(quotient_low,temp5,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    if ((int)(((int)temp_value >> 0x14) - ((uint)((int)((ulonglong)temp8 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp7 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x2e000000,0x3ba3198a);\n    temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp6 = calculate_080082d0(quotient_low,temp5,(int)temp7,temp1);\n    temp8 = calculate_080082d0(quotient_low,temp5);\n    temp7 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,temp1);\n    temp8 = calculate_bitwise_difference_08008640(quotient_high,temp2,0x252049c1,0x397b839a);\n    temp7 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n  }\n  temp8 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                        (int)((ulonglong)temp7 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp6 >> 0x20);\n  local_var1 = (undefined4)temp6;\n  *output_array = temp8;\n  temp6 = calculate_080082d0(local_var1,local_var2);\n  temp6 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                        (int)((ulonglong)temp7 >> 0x20));\n  output_array[1] = temp6;\n  if ((int)input_parameter < 0) {\n    *(int *)output_array = (int)temp8;\n    *(int *)((int)output_array + 4) = (int)((ulonglong)temp8 >> 0x20) + -0x80000000;\n    *(int *)(output_array + 1) = (int)temp6;\n    *(int *)((int)output_array + 0xc) = (int)((ulonglong)temp6 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_and_store_divisions_08009d78",
                "param_1": "input_value",
                "param_2": "input_parameter",
                "param_3": "output_array",
                "uVar1": "quotient_high",
                "uVar2": "quotient_low",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp_value",
                "iVar9": "result",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "local_50": "local_var1",
                "uStack_4c": "local_var2",
                "local_40": "local_var3",
                "local_38": "local_var4",
                "local_30": "local_var5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_division_0800a1bc",
            "code": "\nuint calculate_division_0800a1bc(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int counter;\n  uint mask;\n  undefined4 temp;\n  uint shift;\n  uint remainder;\n  uint dividend_temp;\n  uint bit;\n  uint temp;\n  int bit_shift;\n  uint remainder;\n  uint bit_shift;\n  undefined8 result;\n  \n  if ((~divisor & 0x7ff00000) == 0) {\n    result = calculate_bitwise_difference(dividend,divisor,dividend,divisor);\n    dividend_temp = calculate_unsigned_division((int)result,(int)((ulonglong)result >> 0x20),dividend,divisor);\n    return dividend_temp;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return dividend;\n    }\n    if (divisor != 0) {\n      result = calculate_shift(dividend,divisor,dividend);\n      temp = (undefined4)((ulonglong)result >> 0x20);\n      dividend_temp = calculate_floating_point((int)result,temp,(int)result,temp);\n      return dividend_temp;\n    }\n    do {\n      temp = dividend;\n      dividend_temp = temp >> 0xb;\n      divisor = divisor - 0x15;\n      dividend = temp << 0x15;\n    } while (dividend_temp == 0);\n    quotient = divisor;\n    if (-1 < (int)temp) goto LAB_0800a290;\n    bit_shift = 0x20;\n    shift = 0xffffffff;\n    temp = dividend;\n  }\n  else {\n    quotient = (int)divisor >> 0x14;\n    dividend_temp = divisor;\n    temp = dividend;\n    if (quotient != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp = 0;\n    bit_shift = dividend_temp;\n    do {\n      shift = temp;\n      dividend_temp = bit_shift << 1;\n      bit_shift = bit_shift << 0xc;\n      temp = shift + 1;\n      bit_shift = dividend_temp;\n    } while (-1 < bit_shift);\n    bit_shift = 0x20 - temp;\n    divisor = quotient;\n    temp = dividend << (temp & 0xff);\n  }\n  dividend_temp = dividend >> (bit_shift & 0xff) | dividend_temp;\n  quotient = divisor - shift;\nLAB_0800a1da:\n  dividend_temp = dividend_temp & 0xfffff | 0x100000;\n  if (-1 < (int)(quotient << 0x1f)) {\n    dividend_temp = dividend_temp * 2 - ((int)temp >> 0x1f);\n    temp = temp << 1;\n  }\n  bit_shift = 0;\n  dividend_temp = dividend_temp * 2 - ((int)temp >> 0x1f);\n  temp = temp << 1;\n  quotient = 0;\n  bit_shift = 0x16;\n  shift = 0x200000;\n  do {\n    counter = quotient + shift;\n    if (counter <= (int)dividend_temp) {\n      dividend_temp = dividend_temp - counter;\n      quotient = counter + shift;\n      bit_shift = bit_shift + shift;\n    }\n    bit_shift = bit_shift + -1;\n    dividend_temp = dividend_temp * 2 - ((int)temp >> 0x1f);\n    shift = shift >> 1;\n    temp = temp << 1;\n  } while (bit_shift != 0);\n  counter = 0x20;\n  remainder = 0x80000000;\n  bit_shift = 0;\n  shift = 0;\n  do {\n    mask = remainder + bit_shift;\n    remainder = quotient;\n    if ((int)quotient < (int)dividend_temp) {\n      if ((int)mask < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask + remainder)) {\n          remainder = quotient + 1;\n        }\n      }\n      bit = dividend_temp - quotient;\n      quotient = remainder;\n      if (temp < mask) {\n        bit = bit - 1;\n      }\nLAB_0800a262:\n      bit_shift = mask + remainder;\n      temp = temp - mask;\n      shift = shift + remainder;\n      dividend_temp = bit;\n    }\n    else if ((dividend_temp == quotient) && (mask <= temp)) {\n      if ((int)mask < 0) goto LAB_0800a26a;\n      bit = 0;\n      quotient = dividend_temp;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    remainder = remainder >> 1;\n    dividend_temp = dividend_temp * 2 - ((int)temp >> 0x1f);\n    temp = temp << 1;\n    if (counter == 0) {\n      if ((dividend_temp | temp) == 0) {\n        shift = shift >> 1;\n      }\n      else if (shift == 0xffffffff) {\n        bit_shift = bit_shift + 1;\n        shift = 0;\n      }\n      else {\n        shift = shift + 1 >> 1;\n      }\n      if ((bit_shift & 1) != 0) {\n        shift = shift | 0x80000000;\n      }\n      return shift;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_division_0800a1bc",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "counter",
                "uVar3": "mask",
                "uVar4": "temp",
                "uVar5": "shift",
                "uVar6": "remainder",
                "uVar7": "dividend_temp",
                "uVar8": "bit",
                "uVar9": "temp",
                "iVar10": "bit_shift",
                "uVar11": "remainder",
                "uVar12": "bit_shift",
                "uVar13": "result",
                "calculate_bitwise_difference_08008640": "calculate_bitwise_difference",
                "calculate_unsigned_division_080082d4": "calculate_unsigned_division",
                "calculate_080082d0": "calculate_shift",
                "calculate_floating_point_08008894": "calculate_floating_point"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_shifted_value_0800a348",
            "code": "\nundefined4 calculate_shifted_value_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int shifted_value;\n  undefined4 bitwise_difference_1;\n  undefined4 bitwise_difference_1_hi;\n  uint abs_input_2;\n  undefined8 bitwise_difference_2;\n  undefined8 bitwise_difference_2_alt;\n  undefined8 bitwise_difference_3;\n  undefined4 bitwise_difference_2_lo;\n  undefined4 bitwise_difference_2_hi;\n  undefined4 bitwise_difference_3_lo;\n  undefined4 bitwise_difference_3_hi;\n  \n  abs_input_2 = input_2 & 0x7fffffff;\n  if (abs_input_2 < 0x3e400000) {\n    shifted_value = calculate_shifted_value_0800a348_08008ba0();\n    if (shifted_value == 0) {\n      return 0;\n    }\n    bitwise_difference_2 = calculate_bitwise_difference_08008640(input_1,input_2,input_1,input_2);\n    bitwise_difference_1_hi = (undefined4)((ulonglong)bitwise_difference_2 >> 0x20);\n    bitwise_difference_1 = (undefined4)bitwise_difference_2;\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640(bitwise_difference_1,bitwise_difference_1_hi,0xbe8838d4,0xbda8fae9);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x809c52ad,0x3e927e4f);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x19cb1590,0x3efa01a0);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x16c15177,0x3f56c16c);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x5555554c,0x3fa55555);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n  }\n  else {\n    bitwise_difference_2 = calculate_bitwise_difference_08008640(input_1,input_2,input_1,input_2);\n    bitwise_difference_1_hi = (undefined4)((ulonglong)bitwise_difference_2 >> 0x20);\n    bitwise_difference_1 = (undefined4)bitwise_difference_2;\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640(bitwise_difference_1,bitwise_difference_1_hi,0xbe8838d4,0xbda8fae9);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x809c52ad,0x3e927e4f);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x19cb1590,0x3efa01a0);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x16c15177,0x3f56c16c);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    bitwise_difference_2_alt = calculate_unsigned_division_080082d4((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),0x5555554c,0x3fa55555);\n    bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),bitwise_difference_1,bitwise_difference_1_hi);\n    if (0x3fd33332 < abs_input_2) {\n      if (abs_input_2 < 0x3fe90001) {\n        shifted_value = abs_input_2 - 0x200000;\n        bitwise_difference_2 = calculate_080082d0(0,0x3ff00000,0,shifted_value);\n      }\n      else {\n        shifted_value = 0x3fd20000;\n        bitwise_difference_2 = 0x3fe7000000000000;\n      }\n      bitwise_difference_3_hi = (undefined4)((ulonglong)bitwise_difference_2 >> 0x20);\n      bitwise_difference_3_lo = (undefined4)bitwise_difference_2;\n      bitwise_difference_2 = calculate_bitwise_difference_08008640(bitwise_difference_1,bitwise_difference_1_hi,0,0x3fe00000);\n      bitwise_difference_2 = calculate_080082d0((int)bitwise_difference_2,(int)((ulonglong)bitwise_difference_2 >> 0x20),0,shifted_value);\n      bitwise_difference_2_alt = calculate_bitwise_difference_08008640(bitwise_difference_1,bitwise_difference_1_hi,(int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20));\n      bitwise_difference_3 = calculate_bitwise_difference_08008640(input_1,input_2,input_3,input_4);\n      bitwise_difference_2_alt = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),(int)bitwise_difference_3,\n                           (int)((ulonglong)bitwise_difference_3 >> 0x20));\n      bitwise_difference_2 = calculate_080082d0((int)bitwise_difference_2,(int)((ulonglong)bitwise_difference_2 >> 0x20),(int)bitwise_difference_2_alt,\n                           (int)((ulonglong)bitwise_difference_2_alt >> 0x20));\n      bitwise_difference_1 = calculate_080082d0(bitwise_difference_3_lo,bitwise_difference_3_hi,(int)bitwise_difference_2,(int)((ulonglong)bitwise_difference_2 >> 0x20));\n      return bitwise_difference_1;\n    }\n  }\n  bitwise_difference_2_hi = (undefined4)((ulonglong)bitwise_difference_2_alt >> 0x20);\n  bitwise_difference_2_lo = (undefined4)bitwise_difference_2_alt;\n  bitwise_difference_1 = (undefined4)((ulonglong)bitwise_difference_2 >> 0x20);\n  bitwise_difference_2_alt = calculate_bitwise_difference_08008640((int)bitwise_difference_2,bitwise_difference_1,0,0x3fe00000);\n  bitwise_difference_2 = calculate_bitwise_difference_08008640((int)bitwise_difference_2,bitwise_difference_1,bitwise_difference_2_lo,bitwise_difference_2_hi);\n  bitwise_difference_3 = calculate_bitwise_difference_08008640(input_1,input_2,input_3,input_4);\n  bitwise_difference_2 = calculate_080082d0((int)bitwise_difference_2,(int)((ulonglong)bitwise_difference_2 >> 0x20),(int)bitwise_difference_3,\n                       (int)((ulonglong)bitwise_difference_3 >> 0x20));\n  bitwise_difference_2 = calculate_080082d0((int)bitwise_difference_2_alt,(int)((ulonglong)bitwise_difference_2_alt >> 0x20),(int)bitwise_difference_2,\n                       (int)((ulonglong)bitwise_difference_2 >> 0x20));\n  bitwise_difference_1 = calculate_080082d0(0,0x3ff00000,(int)bitwise_difference_2,(int)((ulonglong)bitwise_difference_2 >> 0x20));\n  return bitwise_difference_1;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_shifted_value_0800a348",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_value",
                "uVar2": "bitwise_difference_1",
                "uVar3": "bitwise_difference_1_hi",
                "uVar4": "abs_input_2",
                "uVar5": "bitwise_difference_2",
                "uVar6": "bitwise_difference_2_alt",
                "uVar7": "bitwise_difference_3",
                "local_30": "bitwise_difference_2_lo",
                "uStack_2c": "bitwise_difference_2_hi",
                "local_28": "bitwise_difference_3_lo",
                "uStack_24": "bitwise_difference_3_hi"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_updated_value_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_updated_value_0800a5a0(int input_value,undefined8 *output_value,int data_length,int shift,int operation_type,int shift_table)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint temp_value;\n  int shift_variable;\n  uint *pointer5;\n  undefined4 uVar6;\n  uint **ppdividend;\n  undefined4 divisor;\n  int dividend_shift;\n  undefined4 *pointer2;\n  undefined4 uVar11;\n  uint modulus;\n  uint *pointer3;\n  int inner_index;\n  int inner_loop_count;\n  undefined8 *pointer4;\n  int division_result;\n  undefined4 *pointer18;\n  undefined8 *pointer19;\n  undefined4 temp4;\n  int shift_result;\n  undefined8 *ptemp6;\n  undefined4 *presult3;\n  bool flag;\n  undefined8 temp7;\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 *temp_array_1;\n  int temp_count;\n  int data_length_shift;\n  int loop_count;\n  uint *pointer_array [2];\n  uint data_array [20];\n  undefined8 temp_register_1;\n  undefined8 temp_array_3;\n  int temp_array_4 [38];\n  undefined8 temp_register_2;\n  \n  inner_loop_count = *(int *)(&DAT_0800c060 + operation_type * 4);\n  dividend_shift = shift + -1;\n  pointer_array[1] = (uint *)output_value;\n  if (data_length + 0x14 < 0 == SCARRY4(data_length,0x14)) {\n    loop_count = (data_length + -3) / 0x18;\n    data_length_shift = (loop_count + 1) * -0x18;\n  }\n  else {\n    data_length_shift = -0x18;\n    loop_count = 0;\n  }\n  data_length_shift = data_length + data_length_shift;\n  division_result = loop_count - dividend_shift;\n  if (-1 < inner_loop_count + dividend_shift) {\n    shift_result = inner_loop_count + dividend_shift + 1 + division_result;\n    pointer4 = &temp_register_1;\n    do {\n      while (division_result < 0) {\n        division_result = division_result + 1;\n        *(undefined4 *)pointer4 = 0;\n        *(undefined4 *)((int)pointer4 + 4) = 0;\n        pointer4 = pointer4 + 1;\n        if (division_result == shift_result) goto LAB_0800a626;\n      }\n      value1 = calculate_shifted_value_0800856c(*(undefined4 *)(shift_table + division_result * 4));\n      division_result = division_result + 1;\n      *pointer4 = value1;\n      pointer4 = pointer4 + 1;\n    } while (division_result != shift_result);\n  }\nLAB_0800a626:\n  pointer2 = (undefined4 *)(input_value + -8);\n  if (-1 < inner_loop_count) {\n    ptemp6 = &temp_register_1 + shift;\n    division_result = dividend_shift;\n    pointer4 = &temp_register_2;\n    do {\n      if (dividend_shift < 0) {\n        value1 = 0;\n      }\n      else {\n        value1 = 0;\n        presult3 = pointer2;\n        pointer19 = ptemp6;\n        do {\n          pointer18 = presult3 + 2;\n          temp7 = calculate_bitwise_difference_08008640(*pointer18,presult3[3],*(undefined4 *)(pointer19 + -1),\n                                *(undefined4 *)((int)pointer19 + -4));\n          value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          presult3 = pointer18;\n          pointer19 = pointer19 + -1;\n        } while (pointer18 != pointer2 + shift * 2);\n      }\n      division_result = division_result + 1;\n      *pointer4 = value1;\n      ptemp6 = ptemp6 + 1;\n      pointer4 = pointer4 + 1;\n    } while (division_result != inner_loop_count + shift);\n  }\n  pointer_array[0] = data_array + inner_loop_count + -1;\n  division_result = inner_loop_count;\n  do {\n    value1 = CONCAT44(*(undefined4 *)((int)&temp_register_2 + division_result * 8 + 4),\n                      *(undefined4 *)(&temp_register_2 + division_result));\n    if (0 < division_result) {\n      pointer4 = &temp_register_2 + division_result;\n      pointer5 = data_array;\n      do {\n        uVar6 = (undefined4)((ulonglong)value1 >> 0x20);\n        calculate_bitwise_difference_08008640((int)value1,uVar6,0,0x3e700000);\n        calculate_shifted_value_08008ba0();\n        temp7 = calculate_shifted_value_0800856c();\n        divisor = (undefined4)((ulonglong)temp7 >> 0x20);\n        value2 = calculate_bitwise_difference_08008640((int)temp7,divisor,0,0x41700000);\n        calculate_080082d0((int)value1,uVar6,(int)value2,(int)((ulonglong)value2 >> 0x20));\n        result = calculate_shifted_value_08008ba0();\n        ptemp6 = pointer4 + -1;\n        uVar6 = *(undefined4 *)ptemp6;\n        uVar11 = *(undefined4 *)((int)pointer4 + -4);\n        *pointer5 = result;\n        value1 = calculate_unsigned_division_080082d4((int)temp7,divisor,uVar6,uVar11);\n        pointer4 = ptemp6;\n        pointer5 = pointer5 + 1;\n      } while (ptemp6 != &temp_register_2);\n    }\n    value1 = calculate_updated_value_0800a5a0_0800b2e8((int)value1,(int)((ulonglong)value1 >> 0x20),data_length_shift);\n    divisor = (undefined4)((ulonglong)value1 >> 0x20);\n    calculate_bitwise_difference_08008640((int)value1,divisor,0,0x3fc00000);\n    temp7 = calculate_result_080094c0();\n    temp7 = calculate_bitwise_difference_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x40200000);\n    value1 = calculate_080082d0((int)value1,divisor,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    result = calculate_shifted_value_08008ba0();\n    temp7 = calculate_shifted_value_0800856c();\n    value1 = calculate_080082d0((int)value1,(int)((ulonglong)value1 >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)value1 >> 0x20);\n    divisor = (undefined4)value1;\n    if (data_length_shift < 1) {\n      if (data_length_shift == 0) {\n        shift_result = (int)data_array[division_result + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      shift_result = check_execution_result_08008b4c(divisor,uVar6,0,0x3fe00000);\n      if (shift_result != 0) {\n        result = result + 1;\n        if (division_result < 1) {\n          value1 = calculate_080082d0(0,0x3ff00000,divisor,uVar6);\n          shift_result = 2;\n          goto LAB_0800a7a4;\n        }\n        shift_result = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      shift_variable = (int)data_array[division_result + -1] >> (0x18U - data_length_shift & 0xff);\n      modulus = data_array[division_result + -1] - (shift_variable << (0x18U - data_length_shift & 0xff));\n      shift_result = (int)modulus >> (0x17U - data_length_shift & 0xff);\n      data_array[division_result + -1] = modulus;\n      result = result + shift_variable;\njoined_r0x0800a8b8:\n      if (0 < shift_result) {\n        result = result + 1;\n        if (division_result < 1) {\n          flag = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (data_array[0] == 0) {\n            flag = false;\n            if (division_result != 1) {\n              pointer5 = data_array;\n              shift_variable = 1;\n              do {\n                pointer5 = pointer5 + 1;\n                if (*pointer5 != 0) {\n                  inner_index = shift_variable + 1;\n                  modulus = *pointer5;\n                  goto LAB_0800a8e2;\n                }\n                shift_variable = shift_variable + 1;\n              } while (shift_variable != division_result);\n              flag = false;\n            }\n          }\n          else {\n            inner_index = 1;\n            shift_variable = 0;\n            modulus = data_array[0];\nLAB_0800a8e2:\n            data_array[shift_variable] = 0x1000000 - modulus;\n            if (inner_index < division_result) {\n              modulus = data_array[inner_index];\n              pointer5 = data_array + inner_index;\n              while( true ) {\n                pointer3 = pointer5 + 1;\n                *pointer5 = 0xffffff - modulus;\n                if (pointer3 == data_array + division_result) break;\n                modulus = *pointer3;\n                pointer5 = pointer3;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < data_length_shift) {\n          if (data_length_shift == 1) {\n            data_array[division_result + -1] = data_array[division_result + -1] & 0x7fffff;\n          }\n          else if (data_length_shift == 2) {\n            data_array[division_result + -1] = data_array[division_result + -1] & 0x3fffff;\n          }\n        }\n        if (shift_result == 2) {\n          value1 = calculate_080082d0(0,0x3ff00000,divisor,uVar6);\n          if (flag) {\n            temp7 = calculate_updated_value_0800a5a0_0800b2e8(0,0x3ff00000,data_length_shift);\n            value1 = calculate_080082d0((int)value1,(int)((ulonglong)value1 >> 0x20),(int)temp7,\n                                  (int)((ulonglong)temp7 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    divisor = (undefined4)((ulonglong)value1 >> 0x20);\n    shift_variable = check_execution_result_08008b10((int)value1,divisor,0,0);\n    if (shift_variable == 0) {\n      value1 = calculate_updated_value_0800a5a0_0800b2e8((int)value1,divisor,-data_length_shift);\n      uVar6 = (undefined4)((ulonglong)value1 >> 0x20);\n      divisor = (undefined4)value1;\n      dividend_shift = check_execution_result_08008b4c(divisor,uVar6,0,0x41700000);\n      if (dividend_shift == 0) {\n        modulus = calculate_shifted_value_08008ba0(divisor,uVar6);\n        data_array[division_result] = modulus;\n        shift_variable = division_result;\n      }\n      else {\n        calculate_bitwise_difference_08008640(divisor,uVar6,0,0x3e700000);\n        modulus = calculate_shifted_value_08008ba0();\n        value1 = calculate_shifted_value_0800856c();\n        value1 = calculate_bitwise_difference_08008640((int)value1,(int)((ulonglong)value1 >> 0x20),0,0x41700000);\n        calculate_080082d0(divisor,uVar6,(int)value1,(int)((ulonglong)value1 >> 0x20));\n        temp_value = calculate_shifted_value_08008ba0();\n        data_length_shift = data_length_shift + 0x18;\n        data_array[division_result] = temp_value;\n        data_array[division_result + 1] = modulus;\n        shift_variable = division_result + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    shift_variable = division_result + -1;\n    if (inner_loop_count <= shift_variable) {\n      modulus = 0;\n      pointer5 = data_array + division_result + 0x3fffffff;\n      do {\n        pointer3 = pointer5 + -1;\n        modulus = modulus | *pointer5;\n        pointer5 = pointer3;\n      } while (pointer3 != pointer_array[0]);\n      if (modulus != 0) break;\n    }\n    if (data_array[inner_loop_count + -1] == 0) {\n      temp_count = 1;\n      ppdividend = pointer_array + inner_loop_count;\n      do {\n        pointer5 = *ppdividend;\n        temp_count = temp_count + 1;\n        ppdividend = ppdividend + -1;\n      } while (pointer5 == (uint *)0x0);\n      temp_count = division_result + temp_count;\n    }\n    else {\n      temp_count = division_result + 1;\n    }\n    shift_result = division_result + 1;\n    presult3 = (undefined4 *)(shift_table + (shift_result + loop_count + 0x3fffffff) * 4);\n    pointer4 = &temp_register_1 + division_result + shift;\n    temp_array_1 = &temp_register_2 + shift_result;\n    do {\n      presult3 = presult3 + 1;\n      value1 = calculate_shifted_value_0800856c(*presult3);\n      *pointer4 = value1;\n      ptemp6 = pointer4 + 1;\n      if (dividend_shift < 0) {\n        temp7 = 0;\n      }\n      else {\n        temp7 = 0;\n        pointer18 = pointer2;\n        while( true ) {\n          pointer4 = pointer4 + -1;\n          pointer1 = pointer18 + 2;\n          value1 = calculate_bitwise_difference_08008640((int)value1,(int)((ulonglong)value1 >> 0x20),*pointer1,pointer18[3]);\n          temp7 = calculate_unsigned_division_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)value1,\n                                (int)((ulonglong)value1 >> 0x20));\n          if (pointer1 == pointer2 + shift * 2) break;\n          value1 = *pointer4;\n          pointer18 = pointer1;\n        }\n      }\n      *temp_array_1 = temp7;\n      shift_result = shift_result + 1;\n      division_result = temp_count;\n      pointer4 = ptemp6;\n      temp_array_1 = temp_array_1 + 1;\n    } while (shift_result <= temp_count);\n  } while( true );\n  data_length_shift = data_length_shift + -0x18;\n  if (data_array[shift_variable] == 0) {\n    pointer5 = data_array + division_result + 0x3ffffffe;\n    do {\n      modulus = *pointer5;\n      shift_variable = shift_variable + -1;\n      data_length_shift = data_length_shift + -0x18;\n      pointer5 = pointer5 + -1;\n    } while (modulus == 0);\n  }\nLAB_0800a9f6:\n  value1 = calculate_updated_value_0800a5a0_0800b2e8(0,0x3ff00000,data_length_shift);\n  if (shift_variable < 0) {\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        value1 = 0;\nLAB_0800abe4:\n        if (shift_result == 0) {\n          *pointer_array[1] = (undefined4)temp_array_3;\n          *(int *)((int)pointer_array[1] + 4) = temp_array_3._4_4_;\n          *(undefined8 *)((int)pointer_array[1] + 0x10) = value1;\n          *(int *)((int)pointer_array[1] + 8) = temp_array_4[0];\n          *(int *)((int)pointer_array[1] + 0xc) = temp_array_4[1];\n          return result & 7;\n        }\n        *(int *)((int)pointer_array[1] + 0x10) = (int)value1;\n        *(int *)((int)pointer_array[1] + 8) = temp_array_4[0];\n        *(int *)((int)pointer_array[1] + 0x14) = (int)((ulonglong)value1 >> 0x20) + -0x80000000;\n        *(int *)((int)pointer_array[1] + 4) = temp_array_3._4_4_ + -0x80000000;\n        *(int *)((int)pointer_array[1] + 0xc) = temp_array_4[1] + -0x80000000;\n        *pointer_array[1] = (undefined4)temp_array_3;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      value1 = 0;\nLAB_0800aafc:\n      dividend_shift = (int)((ulonglong)value1 >> 0x20);\n      if (shift_result != 0) {\n        dividend_shift = dividend_shift + -0x80000000;\n      }\n      *pointer_array[1] = (int)value1;\n      *(int *)((int)pointer_array[1] + 4) = dividend_shift;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    value1 = 0;\n  }\n  else {\n    ptemp6 = &temp_register_2 + shift_variable;\n    pointer5 = data_array + shift_variable + 1;\n    pointer4 = &temp_register_2 + shift_variable + 1;\n    do {\n      divisor = (undefined4)((ulonglong)value1 >> 0x20);\n      pointer5 = pointer5 + -1;\n      temp7 = calculate_shifted_value_0800856c(*pointer5);\n      temp7 = calculate_bitwise_difference_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)value1,divisor);\n      pointer4 = pointer4 + -1;\n      *pointer4 = temp7;\n      value1 = calculate_bitwise_difference_08008640((int)value1,divisor,0,0x3e700000);\n    } while (pointer5 != data_array);\n    dividend_shift = 0;\n    do {\n      if (inner_loop_count < 0) {\n        value1 = 0;\n      }\n      else {\n        divisor = 0x40000000;\n        uVar6 = 0x3ff921fb;\n        value1 = 0;\n        division_result = 0;\n        pointer4 = ptemp6;\n        pointer2 = &DAT_0800c028;\n        while( true ) {\n          temp7 = calculate_bitwise_difference_08008640(*(undefined4 *)pointer4,*(undefined4 *)((int)pointer4 + 4),divisor,uVar6\n                               );\n          value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          division_result = division_result + 1;\n          if ((inner_loop_count < division_result) || (dividend_shift < division_result)) break;\n          divisor = *pointer2;\n          uVar6 = pointer2[1];\n          pointer4 = pointer4 + 1;\n          pointer2 = pointer2 + 2;\n        }\n      }\n      flag = dividend_shift != shift_variable;\n      *(int *)(&temp_array_3 + dividend_shift) = (int)value1;\n      *(int *)((int)&temp_array_3 + (dividend_shift * 2 + 1) * 4) = (int)((ulonglong)value1 >> 0x20);\n      ptemp6 = ptemp6 + -1;\n      dividend_shift = dividend_shift + 1;\n    } while (flag);\n    if (2 < operation_type) {\n      if (operation_type == 3) {\n        if (shift_variable != 0) {\n          pointer4 = &temp_array_3 + shift_variable;\n          value1 = CONCAT44(*(undefined4 *)((int)&temp_array_3 + (shift_variable * 2 + 1) * 4),\n                            *(undefined4 *)pointer4);\n          do {\n            uVar6 = (undefined4)((ulonglong)value1 >> 0x20);\n            divisor = (undefined4)value1;\n            uVar11 = *(undefined4 *)(pointer4 + -1);\n            temp4 = *(undefined4 *)((int)pointer4 + -4);\n            value1 = calculate_unsigned_division_080082d4(divisor,uVar6,uVar11,temp4);\n            temp7 = calculate_080082d0(uVar11,temp4,(int)value1,(int)((ulonglong)value1 >> 0x20));\n            temp7 = calculate_unsigned_division_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),divisor,uVar6);\n            *pointer4 = temp7;\n            pointer4 = pointer4 + -1;\n            *pointer4 = value1;\n          } while (&temp_array_3 != pointer4);\n          if (1 < shift_variable) {\n            pointer4 = &temp_array_3 + shift_variable;\n            value1 = CONCAT44(*(undefined4 *)((int)&temp_array_3 + (shift_variable * 2 + 1) * 4),\n                              *(undefined4 *)pointer4);\n            do {\n              uVar6 = (undefined4)((ulonglong)value1 >> 0x20);\n              divisor = (undefined4)value1;\n              uVar11 = *(undefined4 *)(pointer4 + -1);\n              temp4 = *(undefined4 *)((int)pointer4 + -4);\n              value1 = calculate_unsigned_division_080082d4(divisor,uVar6,uVar11,temp4);\n              temp7 = calculate_080082d0(uVar11,temp4,(int)value1,(int)((ulonglong)value1 >> 0x20));\n              temp7 = calculate_unsigned_division_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),divisor,uVar6);\n              *pointer4 = temp7;\n              pointer4 = pointer4 + -1;\n              *pointer4 = value1;\n            } while (&temp_array_3 + 1 != pointer4);\n            value1 = 0;\n            pointer4 = &temp_array_3 + shift_variable + 1;\n            do {\n              ptemp6 = pointer4 + -1;\n              value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),\n                                    *(undefined4 *)ptemp6,*(undefined4 *)((int)pointer4 + -4));\n              pointer4 = ptemp6;\n            } while (&temp_array_3 + 2 != ptemp6);\n            goto LAB_0800abe4;\n          }\n        }\n        value1 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (operation_type < 1) {\n      if (operation_type != 0) goto LAB_0800ab0e;\n      value1 = 0;\n      pointer4 = &temp_array_3 + shift_variable + 1;\n      do {\n        ptemp6 = pointer4 + -1;\n        value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),*(undefined4 *)ptemp6,\n                              *(undefined4 *)((int)pointer4 + -4));\n        pointer4 = ptemp6;\n      } while (&temp_array_3 != ptemp6);\n      goto LAB_0800aafc;\n    }\n    value1 = 0;\n    pointer4 = &temp_array_3 + shift_variable + 1;\n    do {\n      ptemp6 = pointer4 + -1;\n      value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),*(undefined4 *)ptemp6,\n                            *(undefined4 *)((int)pointer4 + -4));\n      pointer4 = ptemp6;\n    } while (&temp_array_3 != ptemp6);\n  }\n  dividend_shift = (int)((ulonglong)value1 >> 0x20);\n  divisor = (undefined4)value1;\n  if (shift_result == 0) {\n    *(undefined8 *)pointer_array[1] = value1;\n    value1 = calculate_080082d0((undefined4)temp_array_3,temp_array_3._4_4_,divisor,dividend_shift);\n    if (shift_variable < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    dividend_shift = 1;\n    pointer4 = &temp_array_3;\n    do {\n      value1 = calculate_unsigned_division_080082d4((int)value1,(int)((ulonglong)value1 >> 0x20),\n                            *(undefined4 *)(pointer4 + 1),*(undefined4 *)((int)pointer4 + 0xc));\n      dividend_shift = dividend_shift + 1;\n      pointer4 = pointer4 + 1;\n    } while (dividend_shift <= shift_variable);\n    if (shift_result == 0) goto LAB_0800ad26;\n  }\n  else {\n    *pointer_array[1] = divisor;\n    *(int *)((int)pointer_array[1] + 4) = dividend_shift + -0x80000000;\n    value1 = calculate_080082d0((undefined4)temp_array_3,temp_array_3._4_4_,divisor,dividend_shift);\n    if (0 < shift_variable) goto LAB_0800ad04;\n  }\n  value1 = CONCAT44((int)((ulonglong)value1 >> 0x20) + -0x80000000,(int)value1);\nLAB_0800ad26:\n  *(undefined8 *)((int)pointer_array[1] + 8) = value1;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_updated_value_0800a5a0",
                "param_1": "input_value",
                "param_2": "output_value",
                "param_3": "data_length",
                "param_4": "shift",
                "param_5": "operation_type",
                "param_6": "shift_table",
                "uVar2": "result",
                "uVar3": "temp_value",
                "iVar4": "shift_variable",
                "uVar5": "temp1",
                "puVar1": "pointer1",
                "uVar7": "dividend",
                "uVar8": "divisor",
                "iVar9": "dividend_shift",
                "puVar10": "pointer2",
                "uVar12": "modulus",
                "puVar13": "pointer3",
                "iVar14": "inner_index",
                "iVar15": "inner_loop_count",
                "puVar16": "pointer4",
                "iVar17": "division_result",
                "uVar19": "denominator",
                "uVar20": "temp4",
                "uVar22": "temp6",
                "bVar24": "flag",
                "uVar25": "temp7",
                "uVar26": "value1",
                "uVar27": "value2",
                "puVar5": "pointer5",
                "iVar21": "shift_result",
                "local_284": "temp_array_1",
                "local_280": "temp_count",
                "local_270": "data_length_shift",
                "local_26c": "loop_count",
                "local_258": "data_array",
                "local_260": "pointer_array",
                "uStack_208": "temp_register_1",
                "local_168": "temp_array_3",
                "local_160": "temp_array_4",
                "uStack_c8": "temp_register_2"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_and_update_value_0800adf0",
            "code": "\nundefined4\ncalculate_and_update_value_0800adf0(undefined4 input_value,uint threshold,undefined4 param_3,undefined4 param_4,int is_shifted)\n\n{\n  int shifted_value;\n  undefined4 bitwise_diff_1_low;\n  undefined4 bitwise_diff_1_high;\n  undefined4 bitwise_diff_2_low;\n  undefined4 bitwise_diff_2_high;\n  undefined4 div_result_low;\n  undefined8 result;\n  undefined8 bitwise_diff_3_low;\n  \n  if (((threshold & 0x7fffffff) < 0x3e400000) && (shifted_value = calculate_shifted_value_08008ba0(), shifted_value == 0)) {\n    return input_value;\n  }\n  result = calculate_bitwise_difference_08008640(input_value,threshold,input_value);\n  bitwise_diff_2_low = (undefined4)((ulonglong)result >> 0x20);\n  bitwise_diff_1_high = (undefined4)result;\n  result = calculate_bitwise_difference_08008640(input_value,threshold,bitwise_diff_1_high,bitwise_diff_2_low);\n  bitwise_diff_2_high = (undefined4)((ulonglong)result >> 0x20);\n  bitwise_diff_1_low = (undefined4)result;\n  result = calculate_bitwise_difference_08008640(bitwise_diff_1_high,bitwise_diff_2_low,0x5acfd57c,0x3de5d93a);\n  result = calculate_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  result = calculate_bitwise_difference_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_diff_1_high,bitwise_diff_2_low);\n  result = calculate_unsigned_division_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  result = calculate_bitwise_difference_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_diff_1_high,bitwise_diff_2_low);\n  result = calculate_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x19c161d5,0x3f2a01a0);\n  result = calculate_bitwise_difference_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_diff_1_high,bitwise_diff_2_low);\n  result = calculate_unsigned_division_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x1110f8a6,0x3f811111);\n  div_result_low = (undefined4)((ulonglong)result >> 0x20);\n  if (is_shifted != 0) {\n    bitwise_diff_3_low = calculate_bitwise_difference_08008640(param_3,param_4,0,0x3fe00000);\n    result = calculate_bitwise_difference_08008640(bitwise_diff_1_low,bitwise_diff_2_high,(int)result,div_result_low);\n    result = calculate_080082d0((int)bitwise_diff_3_low,(int)((ulonglong)bitwise_diff_3_low >> 0x20),(int)result,\n                         (int)((ulonglong)result >> 0x20));\n    result = calculate_bitwise_difference_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_diff_1_high,bitwise_diff_2_low);\n    result = calculate_080082d0((int)result,(int)((ulonglong)result >> 0x20),param_3,param_4);\n    bitwise_diff_3_low = calculate_bitwise_difference_08008640(bitwise_diff_1_low,bitwise_diff_2_high,0x55555549,0x3fc55555);\n    result = calculate_unsigned_division_080082d4((int)result,(int)((ulonglong)result >> 0x20),(int)bitwise_diff_3_low,\n                         (int)((ulonglong)bitwise_diff_3_low >> 0x20));\n    bitwise_diff_1_high = calculate_080082d0(input_value,threshold,(int)result,(int)((ulonglong)result >> 0x20));\n    return bitwise_diff_1_high;\n  }\n  result = calculate_bitwise_difference_08008640(bitwise_diff_1_high,bitwise_diff_2_low,(int)result,div_result_low);\n  result = calculate_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x55555549,0x3fc55555);\n  result = calculate_bitwise_difference_08008640((int)result,(int)((ulonglong)result >> 0x20),bitwise_diff_1_low,bitwise_diff_2_high);\n  bitwise_diff_1_high = calculate_unsigned_division_080082d4((int)result,(int)((ulonglong)result >> 0x20),input_value,threshold);\n  return bitwise_diff_1_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_and_update_value_0800adf0",
                "param_1": "input_value",
                "param_2": "threshold",
                "param_5": "is_shifted",
                "iVar1": "shifted_value",
                "uVar2": "bitwise_diff_1_low",
                "uVar3": "bitwise_diff_1_high",
                "uVar4": "bitwise_diff_2_low",
                "uVar5": "bitwise_diff_2_high",
                "uVar6": "div_result_low",
                "uVar7": "result",
                "uVar8": "bitwise_diff_3_low"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculate_result_0800af78(int dividend,uint divisor)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int category;\n  undefined4 quotient1;\n  uint unsignedDivisor;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined4 temp3;\n  \n  temp1 = CONCAT44(divisor,dividend);\n  unsignedDivisor = divisor & 0x7fffffff;\n  if (unsignedDivisor < 0x44100000) {\n    if (unsignedDivisor < 0x3fdc0000) {\n      if (unsignedDivisor < 0x3e200000) {\n        temp2 = calculate_unsigned_division_080082d4(dividend,divisor,0x8800759c,0x7e37e43c);\n        category = is_input_empty_08008b60((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3ff00000);\n        if (category != 0) {\n          return dividend;\n        }\n      }\n      category = -1;\n    }\n    else {\n      temp1 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)temp1 >> 0x20);\n      result1 = (undefined4)temp1;\n      if (unsignedDivisor < 0x3ff30000) {\n        if (unsignedDivisor < 0x3fe60000) {\n          temp1 = calculate_unsigned_division_080082d4(result1,result4,result1,result4);\n          temp1 = calculate_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x3ff00000);\n          temp2 = calculate_unsigned_division_080082d4(result1,result4,0,0x40000000);\n          temp1 = calculate_floating_point_08008894((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                               (int)((ulonglong)temp2 >> 0x20));\n          category = 0;\n        }\n        else {\n          temp1 = calculate_080082d0(result1,result4,0,0x3ff00000);\n          temp2 = calculate_unsigned_division_080082d4(result1,result4,0,0x3ff00000);\n          temp1 = calculate_floating_point_08008894((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                               (int)((ulonglong)temp2 >> 0x20));\n          category = 1;\n        }\n      }\n      else if (unsignedDivisor < 0x40038000) {\n        temp1 = calculate_080082d0(result1,result4,0,0x3ff80000);\n        temp2 = calculate_bitwise_difference_08008640(result1,result4,0,0x3ff80000);\n        temp2 = calculate_unsigned_division_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3ff00000);\n        temp1 = calculate_floating_point_08008894((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n        category = 2;\n      }\n      else {\n        temp1 = calculate_floating_point_08008894(0,0xbff00000,result1,result4);\n        category = 3;\n      }\n    }\n    temp3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    quotient1 = (undefined4)temp1;\n    temp1 = calculate_bitwise_difference_08008640(quotient1,temp3,quotient1);\n    result2 = (undefined4)((ulonglong)temp1 >> 0x20);\n    result1 = (undefined4)temp1;\n    temp1 = calculate_bitwise_difference_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    result4 = (undefined4)temp1;\n    temp1 = calculate_bitwise_difference_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),result4,result3);\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),result4,result3);\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),result4,result3);\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x920083ff,0x3fc24924);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),result4,result3);\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x5555550d,0x3fd55555);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = calculate_bitwise_difference_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp2 = calculate_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp2 = calculate_bitwise_difference_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),result4,result3);\n    temp2 = calculate_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp2 = calculate_bitwise_difference_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),result4,result3);\n    temp2 = calculate_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp2 = calculate_bitwise_difference_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),result4,result3);\n    temp2 = calculate_080082d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp2 = calculate_bitwise_difference_08008640((int)temp2,(int)((ulonglong)temp2 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp2 >> 0x20);\n    if (category == -1) {\n      temp1 = calculate_unsigned_division_080082d4((int)temp1,result1,(int)temp2,result4);\n      temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),quotient1,temp3);\n      category = calculate_080082d0(quotient1,temp3,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      return category;\n    }\n    temp1 = calculate_unsigned_division_080082d4((int)temp1,result1,(int)temp2,result4);\n    temp1 = calculate_bitwise_difference_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),quotient1,temp3);\n    temp1 = calculate_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + category * 8),\n                         *(undefined4 *)(&UNK_0800c094 + category * 8));\n    temp1 = calculate_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),quotient1,temp3);\n    category = calculate_080082d0(*(undefined4 *)(&UNK_0800c070 + category * 8),\n                         *(undefined4 *)(&UNK_0800c074 + category * 8),(int)temp1,\n                         (int)((ulonglong)temp1 >> 0x20));\n    if ((int)divisor < 0) {\n      return category;\n    }\n  }\n  else {\n    if ((0x7ff00000 < unsignedDivisor) || ((unsignedDivisor == 0x7ff00000 && (dividend != 0)))) {\n      category = calculate_unsigned_division_080082d4(dividend,divisor,dividend);\n      return category;\n    }\n    category = 0x54442d18;\n  }\n  return category;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "category",
                "uVar6": "quotient1",
                "uVar7": "unsignedDivisor",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "local_2c": "temp3"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "extract_msb_0800b2d4",
            "code": "\nuint extract_msb_0800b2d4(undefined4 ptr_param,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "extract_msb_0800b2d4",
                "param_1": "ptr_param",
                "param_2": "value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "zero_return_function_0800b2e0",
            "code": "\nundefined4 zero_return_function_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "zero_return_function_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_updated_value_0800b2e8",
            "code": "\nuint calculate_updated_value_0800b2e8(uint input_value_1,uint input_value_2,int offset,undefined4 constant_value)\n\n{\n  uint shifted_value;\n  int new_offset;\n  uint upper_part_value;\n  undefined8 combined_value;\n  \n  combined_value = CONCAT44(input_value_2,input_value_1);\n  shifted_value = (input_value_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_value_1 | input_value_2 & 0x7fffffff) == 0) {\n      return input_value_1;\n    }\n    combined_value = calculate_difference(input_value_1,input_value_2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)combined_value >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = calculate_division(input_value_1,input_value_2,input_value_1,input_value_2,constant_value);\n    return shifted_value;\n  }\n  upper_part_value = (uint)((ulonglong)combined_value >> 0x20);\n  new_offset = shifted_value + offset;\n  if (new_offset < 0x7ff) {\n    if (0 < new_offset) {\n      return (uint)combined_value;\n    }\n    if (new_offset + 0x35 < 0 == SCARRY4(new_offset,0x35)) {\n      shifted_value = calculate_difference((uint)combined_value,upper_part_value & 0x800fffff | (new_offset + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (offset < 0xc351) {\n      combined_value = CONCAT44(upper_part_value & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = calculate_difference((int)combined_value,(int)((ulonglong)combined_value >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = calculate_difference(0x8800759c,upper_part_value & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_updated_value_0800b2e8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "offset",
                "param_4": "constant_value",
                "uVar1": "shifted_value",
                "iVar2": "new_offset",
                "uVar3": "upper_part_value",
                "uVar4": "combined_value",
                "calculate_bitwise_difference_08008640": "calculate_difference",
                "calculate_unsigned_division_080082d4": "calculate_division"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_value_0800b3dc",
            "code": "\nundefined4 get_data_value_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_value_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_and_increment_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeAndIncrement_0800b3e8(void)\n\n{\n  int counter;\n  code **functionArrayPtr;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  functionArrayPtr = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**functionArrayPtr)();\n    functionArrayPtr = functionArrayPtr + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_and_increment_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionArrayPtr"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_with_pattern_0800b430",
            "code": "\nvoid fillMemoryWithPattern_0800b430(undefined4 *ptr,undefined pattern,uint length)\n\n{\n  undefined4 *tempPtr1;\n  undefined4 *tempPtr2;\n  uint tempVar1;\n  undefined4 pattern4;\n  bool isLengthZero;\n  \n  if (((uint)ptr & 3) != 0) {\n    tempVar1 = length - 1;\n    tempPtr1 = ptr;\n    if (length == 0) {\n      return;\n    }\n    while( true ) {\n      ptr = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = pattern;\n      length = tempVar1;\n      if (((uint)ptr & 3) == 0) break;\n      isLengthZero = tempVar1 == 0;\n      tempVar1 = tempVar1 - 1;\n      tempPtr1 = ptr;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    pattern4 = CONCAT22(CONCAT11(pattern,pattern),CONCAT11(pattern,pattern));\n    if (0xf < length) {\n      tempPtr1 = ptr + 4;\n      do {\n        tempPtr1[-4] = pattern4;\n        tempPtr1[-3] = pattern4;\n        tempPtr1[-2] = pattern4;\n        tempPtr1[-1] = pattern4;\n        tempPtr1 = tempPtr1 + 4;\n      } while (tempPtr1 != (undefined4 *)((int)ptr + (length - 0x10 & 0xfffffff0) + 0x20));\n      tempVar1 = length & 0xc;\n      ptr = ptr + ((length - 0x10 >> 4) + 1) * 4;\n      length = length & 0xf;\n      if (tempVar1 == 0) goto joined_r0x0800b4a8;\n    }\n    tempPtr1 = (undefined4 *)((length - 4 & 0xfffffffc) + 4 + (int)ptr);\n    do {\n      tempPtr2 = ptr + 1;\n      *ptr = pattern4;\n      ptr = tempPtr2;\n    } while (tempPtr1 != tempPtr2);\n    length = length & 3;\n    ptr = tempPtr1;\n  }\njoined_r0x0800b4a8:\n  if (length != 0) {\n    tempPtr1 = ptr;\n    do {\n      tempPtr2 = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = pattern;\n      tempPtr1 = tempPtr2;\n    } while ((undefined4 *)(length + (int)ptr) != tempPtr2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_with_pattern_0800b430",
                "param_1": "ptr",
                "param_2": "pattern",
                "param_3": "length",
                "puVar1": "tempPtr1",
                "puVar2": "tempPtr2",
                "uVar3": "tempVar1",
                "uVar4": "pattern4",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_entry_0800b524",
            "code": "\nundefined4 updateDataEntry_0800b524(int opCode,undefined4 data,undefined4 param1,undefined4 param2)\n\n{\n  undefined *dataEntry;\n  undefined4 returnValue;\n  uint bitMask;\n  uint entryIndex;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataEntry = DAT_20000168;\n  entryIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)entryIndex < 0x20) {\n    if (opCode != 0) {\n      *(undefined4 *)(DAT_20000168 + entryIndex * 4 + 0x88) = param1;\n      bitMask = 1 << (entryIndex & 0xff);\n      *(uint *)(dataEntry + 0x188) = *(uint *)(dataEntry + 0x188) | bitMask;\n      *(undefined4 *)(dataEntry + entryIndex * 4 + 0x108) = param2;\n      if (opCode == 2) {\n        *(uint *)(dataEntry + 0x18c) = bitMask | *(uint *)(dataEntry + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(dataEntry + 4) = entryIndex + 1;\n    *(undefined4 *)(dataEntry + (entryIndex + 2) * 4) = data;\n    FUNC_0800b520(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_entry_0800b524",
                "param_1": "opCode",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "puVar1": "dataEntry",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "entryIndex"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 210466,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}