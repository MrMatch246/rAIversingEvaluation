{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_completed_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeCompletedFlag_08000188(undefined4 input)\n\n{\n  if ((char)completedFlag == '\\0') {\n    completedFlag._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_completed_flag_08000188",
                "param_1": "input",
                "completed_8911": "completedFlag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "combine_params_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 combineParams_080001ac(undefined4 sourceParam,undefined4 destParam)\n\n{\n  return CONCAT44(destParam,sourceParam);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "combine_params_080001ac",
                "param_1": "sourceParam",
                "param_2": "destParam"
            },
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_coolant_system_080001f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_coolant_system_080001f8(void)\n\n{\n  coolant_mode = '\\0';\n  stop_coolant();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_coolant_system_080001f8",
                "current_coolant_mode": "coolant_mode",
                "coolant_stop": "stop_coolant"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_system_08000210",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turn_off_coolant_system_08000210(void)\n\n{\n  coolant_mist_off();\n  coolant_flood_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_system_08000210"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_mist_off",
                "coolant_flood_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "update_coolant_mode_08000220",
            "code": "\nvoid updateCoolantMode_08000220(uint8_t newMode)\n\n{\n  uint8_t localMode;\n  \n  if (newMode != currentMode) {\n    plan_synchronize();\n    if (newMode == '\\x01') {\n      coolant_flood_on();\n      currentMode = newMode;\n    }\n    else if (newMode == '\\x02') {\n      coolant_mist_on();\n      currentMode = newMode;\n    }\n    else {\n      coolant_stop();\n      currentMode = newMode;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "update_coolant_mode_08000220",
                "mode": "newMode",
                "mode_local": "localMode",
                "current_coolant_mode": "currentMode"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_mist_on",
                "plan_synchronize",
                "coolant_flood_on",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_elapsed_time_08000268",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint64_t calculateElapsedTime_08000268(void)\n\n{\n  uint32_t currentTick;\n  \n  currentTick = HAL_GetTick();\n  return (uint64_t)((currentTick + 1) * 1000 - _DAT_e000e018 / 0xa8);\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_elapsed_time_08000268",
                "uVar1": "currentTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delayFunction_080002a0(uint milliseconds)\n\n{\n  uint milliseconds_local;\n  \n  HAL_Delay(milliseconds);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "_ms": "milliseconds"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "delay_microseconds_080002b6",
            "code": "\nvoid delayMicroseconds_080002b6(uint microseconds)\n\n{\n  uint upperPartTime;\n  bool timeoutReached;\n  uint64_t currentTime;\n  uint64_t checkTime;\n  uint microsecondsLocal;\n  uint64_t endTime;\n  \n  currentTime = get_currentmicrosecondsecs();\n  do {\n    checkTime = get_currentmicrosecondsecs();\n    upperPartTime = (uint)(checkTime >> 0x20);\n    endTime._0_4_ = (uint)(currentTime + microseconds);\n    endTime._4_4_ = (uint)(currentTime + microseconds >> 0x20);\n    timeoutReached = endTime._4_4_ <= upperPartTime;\n    if (upperPartTime == endTime._4_4_) {\n      timeoutReached = (uint)endTime <= (uint)checkTime;\n    }\n  } while (!timeoutReached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "delay_microseconds_080002b6",
                "_us": "microseconds",
                "uVar1": "upperPartTime",
                "bVar2": "timeoutReached",
                "uVar3": "currentTime",
                "uVar4": "checkTime",
                "_us_local": "microsecondsLocal",
                "timeout": "endTime"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_eeprom_080002f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEEPROM_080002f0(void)\n\n{\n  memset(EEPROM,0xff,4);\n  isEEPROMReady = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_eeprom_080002f0",
                "eeprom_data": "EEPROM",
                "eeprom_ready": "isEEPROMReady"
            },
            "calling": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nchar getEEPROMData_08000310(uint address)\n\n{\n  uint localAddress;\n  \n  if (eeprom_ready == 0) {\n    eeprom_init();\n  }\n  return eeprom_data[address & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "addr": "address",
                "addr_local": "localAddress"
            },
            "calling": [
                "read_global_settings",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "write_to_eeprom_08000340",
            "code": "\nvoid writeToEEPROM_08000340(uint address,uchar value)\n\n{\n  uchar localValue;\n  uint localAddress;\n  \n  if (eeprom_ready == 0) {\n    eeprom_init();\n  }\n  eeprom_data[address & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "addr": "address",
                "new_value": "value",
                "new_value_local": "localValue",
                "addr_local": "localAddress"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "copy_and_checksum_08000374",
            "code": "\nvoid copyAndChecksum_08000374(uint dest,char *src,uint length)\n\n{\n  uint lengthLocal;\n  char *srcLocal;\n  uint destLocal;\n  uchar checksum;\n  \n  checksum = '\\0';\n  lengthLocal = length;\n  srcLocal = src;\n  destLocal = dest;\n  if (eeprom_ready == 0) {\n    eeprom_init();\n    srcLocal = src;\n    destLocal = dest;\n  }\n  for (; lengthLocal != 0; lengthLocal = lengthLocal - 1) {\n    checksum = (checksum != '\\0') + *srcLocal;\n    eeprom_put_char(destLocal,*srcLocal);\n    srcLocal = srcLocal + 1;\n    destLocal = destLocal + 1;\n  }\n  eeprom_put_char(destLocal,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "copy_and_checksum_08000374",
                "destination": "dest",
                "source": "src",
                "size": "length",
                "size_local": "lengthLocal",
                "source_local": "srcLocal",
                "destination_local": "destLocal"
            },
            "calling": [
                "write_global_settings",
                "settings_write_coord_data",
                "settings_store_startup_line"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "verify_and_copy_data_080003ec",
            "code": "\nint verify_and_copy_data_080003ec(char *output_buffer,uint input_address,uint num_bytes)\n\n{\n  char cVar1;\n  uint remaining_bytes;\n  uint current_address;\n  char *current_output;\n  uchar input_byte;\n  uchar calculated_checksum;\n  \n  calculated_checksum = '\\0';\n  remaining_bytes = num_bytes;\n  current_address = input_address;\n  current_output = output_buffer;\n  if (eeprom_initialized == 0) {\n    eeprom_init();\n    current_address = input_address;\n    current_output = output_buffer;\n  }\n  for (; remaining_bytes != 0; remaining_bytes = remaining_bytes - 1) {\n    cVar1 = read_byte_from_eeprom(current_address);\n    calculated_checksum = cVar1 + (calculated_checksum != '\\0');\n    *current_output = cVar1;\n    current_address = current_address + 1;\n    current_output = current_output + 1;\n  }\n  cVar1 = read_byte_from_eeprom(current_address);\n  return (uint)((uint)calculated_checksum == (int)cVar1);\n}\n\n",
            "renaming": {
                "FUN_080003ec": "verify_and_copy_data_080003ec",
                "destination": "output_buffer",
                "source": "input_address",
                "size": "num_bytes",
                "size_local": "remaining_bytes",
                "source_local": "current_address",
                "destination_local": "current_output",
                "data": "input_byte",
                "checksum": "calculated_checksum",
                "eeprom_ready": "eeprom_initialized",
                "eeprom_get_char": "read_byte_from_eeprom"
            },
            "calling": [
                "settings_read_startup_line",
                "read_global_settings",
                "settings_read_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "set_plane_axes_08000478",
            "code": "\nvoid setPlaneAxes_08000478(uint8_t planeAxis0,uint8_t planeAxis1,uint8_t planeAxis2)\n\n{\n  uint8_t localAxis2;\n  uint8_t localAxis1;\n  uint8_t localAxis0;\n  \n  gc.plane_planeAxis0 = planeAxis0;\n  gc.plane_planeAxis1 = planeAxis1;\n  gc.plane_planeAxis2 = planeAxis2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "set_plane_axes_08000478",
                "axis_0": "planeAxis0",
                "axis_1": "planeAxis1",
                "axis_2": "planeAxis2",
                "axis_2_local": "localAxis2",
                "axis_1_local": "localAxis1",
                "axis_0_local": "localAxis0"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_coordinates_080004ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeCoordinates_080004ac(void)\n\n{\n  uint8_t coordData;\n  \n  memset(&globalContext,0,0x38);\n  globalContext.feed_rate = settings.default_feed_rate;\n  select_plane('\\0','\\x01','\\x02');\n  globalContext.absolute_mode = '\\x01';\n  coordData = settings_read_coord_data(globalContext.coord_select,globalContext.coord_system);\n  if (coordData == '\\0') {\n    report_status_message('\\n');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_coordinates_080004ac",
                "uVar1": "coordData",
                "gc": "globalContext"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "report_status_message",
                "settings_read_coord_data",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "update_position_080004fc",
            "code": "\nvoid updatePosition_080004fc(int32_t x_input,int32_t y_input,int32_t z_input)\n\n{\n  undefined4 converted_x;\n  int32_t z_input_local;\n  int32_t y_input_local;\n  int32_t x_input_local;\n  \n  converted_x = __floatsisf(x_input);\n  position_x = (float)__aeabi_fdiv(converted_x,steps_per_mm_x);\n  converted_x = __floatsisf(y_input);\n  position_y = (float)__aeabi_fdiv(converted_x,steps_per_mm_y);\n  converted_x = __floatsisf(z_input);\n  position_z = (float)__aeabi_fdiv(converted_x,steps_per_mm_z);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "update_position_080004fc",
                "x": "x_input",
                "y": "y_input",
                "z": "z_input",
                "uVar1": "converted_x",
                "gc.position[0]": "position_x",
                "gc.position[1]": "position_y",
                "gc.position[2]": "position_z",
                "settings.steps_per_mm[0]": "steps_per_mm_x",
                "settings.steps_per_mm[1]": "steps_per_mm_y",
                "settings.steps_per_mm[2]": "steps_per_mm_z"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_inches_0800056c",
            "code": "\nfloat convertToInches_0800056c(float inputValue)\n\n{\n  undefined4 conversionFactor;\n  undefined8 convertedValue;\n  float result;\n  \n  if (gc.inches_mode != '\\0') {\n    convertedValue = __aeabi_f2d(conversionFactor);\n    convertedValue = __muldf3((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0x66666666,0x40396666);\n    inputValue = (float)__truncdfsf2((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_inches_0800056c",
                "value": "inputValue",
                "in_r0": "conversionFactor",
                "uVar1": "convertedValue",
                "value_local": "result"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__truncdfsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_gcode_line_080005b4",
            "code": "\nuint8_t process_gcode_line_080005b4(char_value *gcode_line)\n\n{\n  uint8_t status_code;\n  int result;\n  flocal_flagoat temp_float_1;\n  undefined4 temp_float_2;\n  undefined4 temp_float_3;\n  undefined4 temp_result_1;\n  undefined4 temp_result_2;\n  undefined4 temp_result_3;\n  undefined4 temp_result_4;\n  undefined4 temp_result_5;\n  undefined4 temp_result_6;\n  uint temp_result_7;\n  undefined4 temp_result_8;\n  undefined4 temp_result_9;\n  uint uVar_value6;\n  flocal_flagoat fVar_value7;\n  flocal_flagoat current_value_00;\n  undefined8 temp_double_1;\n  undefined8 temp_double_2;\n  undefined8 temp_double_3;\n  undefined8 temp_double_4;\n  undefined8 temp_double_5;\n  undefined8 temp_double_6;\n  undefined8 temp_double_7;\n  undefined8 temp_double_8;\n  undefined8 temp_double_9;\n  undefined8 temp_double_10;\n  undefined8 temp_double_11;\n  undefined8 temp_double_12;\n  undefined8 temp_double_13;\n  undefined8 temp_double_14;\n  undefined8 temp_double_15;\n  undefined8 temp_double_16;\n  undefined8 temp_double_17;\n  undefined8 temp_double_18;\n  undefined8 temp_double_19;\n  flocal_flagoat temp_y_00;\n  undefined8 temp_double_20;\n  undefined8 temp_double_21;\n  flocal_flagoat etemp_xtr_valueaout_s2;\n  flocal_flagoat etemp_xtr_valueaout_s2_00;\n  flocal_flagoat etemp_xtr_valueaout_s2_01;\n  flocal_flagoat etemp_xtr_valueaout_s2_02;\n  flocal_flagoat etemp_xtr_valueaout_s2_03;\n  flocal_flagoat etemp_xtr_valueaout_s2_04;\n  flocal_flagoat etemp_xtr_valueaout_s2_05;\n  flocal_flagoat etemp_xtr_valueaout_s2_06;\n  flocal_flagoat etemp_xtr_valueaout_s2_07;\n  flocal_flagoat etemp_xtr_valueaout_s2_08;\n  flocal_flagoat etemp_xtr_valueaout_s2_09;\n  flocal_flagoat etemp_xtr_valueaout_s2_10;\n  flocal_flagoat etemp_xtr_valueaout_s2_11;\n  flocal_flagoat etemp_xtr_valueaout_s2_12;\n  flocal_flagoat etemp_xtr_valueaout_s2_13;\n  flocal_flagoat etemp_xtr_valueaout_s2_14;\n  flocal_flagoat etemp_xtr_valueaout_s2_15;\n  flocal_flagoat etemp_xtr_valueaout_s2_16;\n  flocal_flagoat etemp_xtr_valueaout_s2_17;\n  flocal_flagoat etemp_xtr_valueaout_s3;\n  flocal_flagoat etemp_xtr_valueaout_s3_00;\n  flocal_flagoat etemp_xtr_valueaout_s3_01;\n  flocal_flagoat etemp_xtr_valueaout_s3_02;\n  flocal_flagoat etemp_xtr_valueaout_s3_03;\n  flocal_flagoat etemp_xtr_valueaout_s3_04;\n  flocal_flagoat etemp_xtr_valueaout_s3_05;\n  flocal_flagoat etemp_xtr_valueaout_s3_06;\n  flocal_flagoat etemp_xtr_valueaout_s3_07;\n  flocal_flagoat etemp_xtr_valueaout_s3_08;\n  flocal_flagoat etemp_xtr_valueaout_s3_09;\n  flocal_flagoat etemp_xtr_valueaout_s3_10;\n  flocal_flagoat etemp_xtr_valueaout_s3_11;\n  flocal_flagoat etemp_xtr_valueaout_s3_12;\n  flocal_flagoat etemp_xtr_valueaout_s3_13;\n  flocal_flagoat etemp_xtr_valueaout_s3_14;\n  flocal_flagoat etemp_xtr_valueaout_s3_15;\n  flocal_flagoat etemp_xtr_valueaout_s3_16;\n  flocal_flagoat etemp_xtr_valueaout_s3_17;\n  undefined8 temp_result_double_1;\n  undefined4 in_stack_ffffff48;\n  undefined4 in_stack_ffffff4c;\n  undefined4 in_stack_ffffff50;\n  undefined4 in_stack_ffffff54;\n  char_value *gcode_line_local_flagocalocal_flag;\n  flocal_flagoat coordinate_data_2 [3];\n  flocal_flagoat coordinate_data_1 [3];\n  flocal_flagoat coordinate_data [3];\n  flocal_flagoat offset_position [3];\n  flocal_flagoat target_position [3];\n  flocal_flagoat current_value;\n  char_value current_letter;\n  uint8_t index;\n  flocal_flagoat temp_y;\n  flocal_flagoat temp_x;\n  uint8_t isclocal_flagockwise;\n  flocal_flagoat h_value;\n  uint8_t i_3_value;\n  uint8_t i_2_value;\n  uint8_t i_1_value;\n  uint8_t i;\n  uint8_t local_flag;\n  flocal_flagoat r_value;\n  flocal_flagoat p_value;\n  uint8_t gr_valueoup_value_number_value;\n  uint8_t non_modal_action_flag;\n  uint8_t absolute_override_flag;\n  flocal_flagoat feed_rate;\n  uint8_t axis_word_flags;\n  uint16_t modal_word_flags;\n  int int_current_value;\n  \n  if (system_state.state == '\\temp_x06') {\n    status_code = '\\f';\n  }\n  elocal_flagse {\n    index = '\\0';\n    modal_word_flags = 0;\n    axis_word_flags = '\\0';\n    feed_rate = -1.0;\n    absolute_override_flag = '\\0';\n    non_modal_action_flag = '\\0';\n    memset(target_position,0,0temp_xc);\n    memset(offset_position,0,0temp_xc);\n    global_context.status_code = '\\0';\n    gr_valueoup_value_number_value = '\\0';\n    whilocal_flage (result = netemp_xt_statement(&current_letter,&current_value,gcode_line,&index), result != 0) {\n      temp_float_2 = __aeabi_f2d(current_value);\n      tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n      int_current_value = __aeabi_d2iz(temp_float_2,temp_result_1);\n      if (current_letter == 'G') {\n        switch(int_current_value) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0temp_x50:\n          gr_valueoup_value_number_value = '\\temp_x02';\n          br_valueeak;\n        case 4:\n        case 10:\n        case 0temp_x1c:\n        case 0temp_x1e:\n        case 0temp_x35:\n        case 0temp_x5c:\n          gr_valueoup_value_number_value = '\\temp_x01';\n          br_valueeak;\n        case 0temp_x11:\n        case 0temp_x12:\n        case 0temp_x13:\n          gr_valueoup_value_number_value = '\\temp_x03';\n          br_valueeak;\n        case 0temp_x14:\n        case 0temp_x15:\n          gr_valueoup_value_number_value = '\\a';\n          br_valueeak;\n        case 0temp_x36:\n        case 0temp_x37:\n        case 0temp_x38:\n        case 0temp_x39:\n        case 0temp_x3a:\n        case 0temp_x3b:\n          gr_valueoup_value_number_value = '\\t';\n          br_valueeak;\n        case 0temp_x5a:\n        case 0temp_x5b:\n          gr_valueoup_value_number_value = '\\temp_x04';\n          br_valueeak;\n        case 0temp_x5d:\n        case 0temp_x5e:\n          gr_valueoup_value_number_value = '\\temp_x06';\n        }\n        switch(int_current_value) {\n        case 0:\n          global_context.motion_mode = '\\0';\n          br_valueeak;\n        case 1:\n          global_context.motion_mode = '\\temp_x01';\n          br_valueeak;\n        case 2:\n          global_context.motion_mode = '\\temp_x02';\n          br_valueeak;\n        case 3:\n          global_context.motion_mode = '\\temp_x03';\n          br_valueeak;\n        case 4:\n          non_modal_action_flag = '\\temp_x01';\n          br_valueeak;\n        defaulocal_flagt:\n          global_context.status_code = '\\temp_x03';\n          br_valueeak;\n        case 10:\n          non_modal_action_flag = '\\temp_x02';\n          br_valueeak;\n        case 0temp_x11:\n          selocal_flagect_p_valuelocal_flagane('\\0','\\temp_x01','\\temp_x02');\n          br_valueeak;\n        case 0temp_x12:\n          selocal_flagect_p_valuelocal_flagane('\\temp_x02','\\0','\\temp_x01');\n          br_valueeak;\n        case 0temp_x13:\n          selocal_flagect_p_valuelocal_flagane('\\temp_x01','\\temp_x02','\\0');\n          br_valueeak;\n        case 0temp_x14:\n          global_context.inches_mode = '\\temp_x01';\n          br_valueeak;\n        case 0temp_x15:\n          global_context.inches_mode = '\\0';\n          br_valueeak;\n        case 0temp_x1c:\n        case 0temp_x1e:\n          temp_float_2 = __aeabi_fmulocal_flag(current_value,0temp_x41200000);\n          temp_float_2 = __aeabi_f2d(temp_float_2);\n          tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_current_value = __aeabi_d2iz(temp_float_2,temp_result_2);\n          switch(int_current_value) {\n          case 0temp_x118:\n            non_modal_action_flag = '\\temp_x03';\n            br_valueeak;\n          case 0temp_x119:\n            non_modal_action_flag = '\\temp_x04';\n            br_valueeak;\n          defaulocal_flagt:\n            global_context.status_code = '\\temp_x03';\n            br_valueeak;\n          case 300:\n            non_modal_action_flag = '\\temp_x05';\n            br_valueeak;\n          case 0temp_x12d:\n            non_modal_action_flag = '\\temp_x06';\n          }\n          br_valueeak;\n        case 0temp_x35:\n          absolute_override_flag = '\\temp_x01';\n          br_valueeak;\n        case 0temp_x36:\n        case 0temp_x37:\n        case 0temp_x38:\n        case 0temp_x39:\n        case 0temp_x3a:\n        case 0temp_x3b:\n          global_context.coordinate_select = (char_value)int_current_value + 0temp_xca;\n          br_valueeak;\n        case 0temp_x50:\n          global_context.motion_mode = '\\temp_x04';\n          br_valueeak;\n        case 0temp_x5a:\n          global_context.absolocal_flagute_mode = '\\temp_x01';\n          br_valueeak;\n        case 0temp_x5b:\n          global_context.absolocal_flagute_mode = '\\0';\n          br_valueeak;\n        case 0temp_x5c:\n          temp_float_2 = __aeabi_fmulocal_flag(current_value,0temp_x41200000);\n          temp_float_2 = __aeabi_f2d(temp_float_2);\n          tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_current_value = __aeabi_d2iz(temp_float_2,temp_result_3);\n          if (int_current_value == 0temp_x398) {\n            non_modal_action_flag = '\\a';\n          }\n          elocal_flagse if (int_current_value == 0temp_x399) {\n            non_modal_action_flag = '\\b';\n          }\n          elocal_flagse {\n            global_context.status_code = '\\temp_x03';\n          }\n          br_valueeak;\n        case 0temp_x5d:\n          global_context.feed_rate_mode = '\\temp_x01';\n          br_valueeak;\n        case 0temp_x5e:\n          global_context.feed_rate_mode = '\\0';\n        }\n      }\n      elocal_flagse if (current_letter == 'M') {\n        if (int_current_value == 0temp_x1e) {\nLAB_08000b96:\n          gr_valueoup_value_number_value = '\\temp_x05';\n        }\n        elocal_flagse if (int_current_value < 0temp_x1f) {\n          if (int_current_value < 3) {\n            if (-1 < int_current_value) goto LAB_08000b96;\n          }\n          elocal_flagse if (int_current_value - 3U < 3) {\n            gr_valueoup_value_number_value = '\\b';\n          }\n        }\n        switch(int_current_value) {\n        case 0:\n          global_context.p_valuer_valueogr_valueam_flocal_flagow = '\\temp_x01';\n          br_valueeak;\n        case 1:\n          br_valueeak;\n        case 2:\n        case 0temp_x1e:\n          global_context.p_valuer_valueogr_valueam_flocal_flagow = '\\temp_x02';\n          br_valueeak;\n        case 3:\n          global_context.sp_valueindlocal_flage_dir_valueection = '\\temp_x01';\n          br_valueeak;\n        case 4:\n          global_context.sp_valueindlocal_flage_dir_valueection = -1;\n          br_valueeak;\n        case 5:\n          global_context.sp_valueindlocal_flage_dir_valueection = '\\0';\n          br_valueeak;\n        defaulocal_flagt:\n          global_context.status_code = '\\temp_x03';\n          br_valueeak;\n        case 7:\n          global_context.coolocal_flagant_mode = '\\temp_x02';\n          br_valueeak;\n        case 8:\n          global_context.coolocal_flagant_mode = '\\temp_x01';\n          br_valueeak;\n        case 9:\n          global_context.coolocal_flagant_mode = '\\0';\n        }\n      }\n      if (gr_valueoup_value_number_value != '\\0') {\n        if (((int)(uint)modal_word_flags >> gr_valueoup_value_number_value & 1U) == 0) {\n          modal_word_flags = modal_word_flags | (ushor_valuet)(1 << gr_valueoup_value_number_value);\n        }\n        elocal_flagse {\n          global_context.status_code = '\\temp_x05';\n        }\n        gr_valueoup_value_number_value = '\\0';\n      }\n    }\n    status_code = global_context.status_code;\n    if (global_context.status_code == '\\0') {\n      p_value = 0.0;\n      r_value = 0.0;\n      local_flag = '\\0';\n      index = '\\0';\nswitchD_08000d18_caseD_47:\n      result = netemp_xt_statement(&current_letter,&current_value,gcode_line,&index);\n      if (result != 0) {\n        fVar_value7 = (flocal_flagoat)temp_double_1;\n        switch(current_letter) {\n        case 'F':\n          result = __aeabi_fcmp_valuelocal_flage(current_value,0);\n          if (result != 0) {\n            global_context.status_code = '\\temp_x06';\n          }\n          if (global_context.feed_rate_mode == '\\0') {\n            fVar_value7 = current_value;\n            to_milocal_flaglocal_flagimeter_values(current_value_00);\n            global_context.feed_r_valueate = fVar_value7;\n          }\n          elocal_flagse {\n            fVar_value7 = current_value;\n            to_milocal_flaglocal_flagimeter_values(current_value_00);\n            feed_rate = fVar_value7;\n          }\n          br_valueeak;\n        case 'G':\n        case 'M':\n        case 'N':\n          br_valueeak;\n        defaulocal_flagt:\n          global_context.status_code = '\\temp_x03';\n          br_valueeak;\n        case 'I':\n        case 'J':\n        case 'K':\n          uVar_value6 = (uint)(btemp_yte)current_letter;\n          temp_float_1 = current_value;\n          to_milocal_flaglocal_flagimeter_values(fVar_value7);\n          offset_position[uVar_value6 - 0temp_x49] = temp_float_1;\n          br_valueeak;\n        case 'L':\n          temp_float_2 = __aeabi_f2d(current_value);\n          tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          local_flag = __aeabi_d2uiz(temp_float_2,temp_result_4);\n          br_valueeak;\n        case 'P':\n          p_value = current_value;\n          br_valueeak;\n        case 'R':\n          temp_float_1 = current_value;\n          to_milocal_flaglocal_flagimeter_values(fVar_value7);\n          r_value = temp_float_1;\n          br_valueeak;\n        case 'S':\n          result = __aeabi_fcmp_valuelocal_flagt(current_value,0);\n          if (result != 0) {\n            global_context.status_code = '\\temp_x06';\n          }\n          br_valueeak;\n        case 'T':\n          result = __aeabi_fcmp_valuelocal_flagt(current_value,0);\n          if (result != 0) {\n            global_context.status_code = '\\temp_x06';\n          }\n          temp_float_2 = __aeabi_f2d(current_value);\n          tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          global_context.toolocal_flag = __aeabi_d2uiz(temp_float_2,temp_result_5);\n          br_valueeak;\n        case 'X':\n          target_position[0] = current_value;\n          to_milocal_flaglocal_flagimeter_values(fVar_value7);\n          axis_word_flags = axis_word_flags | 1;\n          br_valueeak;\n        case 'Y':\n          target_position[1] = current_value;\n          to_milocal_flaglocal_flagimeter_values(fVar_value7);\n          axis_word_flags = axis_word_flags | 2;\n          br_valueeak;\n        case 'Z':\n          target_position[2] = current_value;\n          to_milocal_flaglocal_flagimeter_values(fVar_value7);\n          axis_word_flags = axis_word_flags | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      status_code = global_context.status_code;\n      if (global_context.status_code == '\\0') {\n        temp_result_double_1 = temp_double_1;\n        fVar_value7 = etemp_xtr_valueaout_s2;\n        temp_float_1 = etemp_xtr_valueaout_s3;\n        if (system_state.state != '\\a') {\n          sp_valueindlocal_flage_r_valueun(global_context.sp_valueindlocal_flage_dir_valueection);\n          coolocal_flagant_r_valueun(global_context.coolocal_flagant_mode);\n          temp_result_double_1 = temp_double_2;\n          fVar_value7 = etemp_xtr_valueaout_s2_00;\n          temp_float_1 = etemp_xtr_valueaout_s3_00;\n        }\n        if ((modal_word_flags & 0temp_x200) != 0) {\n          status_code = settings_r_valueead_coordinate_data(global_context.coordinate_select,coordinate_data);\n          if (status_code == '\\0') {\n            r_valueetur_valuen '\\n';\n          }\n          global_context.coor_valued_system_statetem[0] = coordinate_data[0];\n          global_context.coor_valued_system_statetem[1] = coordinate_data[1];\n          global_context.coor_valued_system_statetem[2] = coordinate_data[2];\n          temp_result_double_1 = temp_double_3;\n          fVar_value7 = etemp_xtr_valueaout_s2_01;\n          temp_float_1 = etemp_xtr_valueaout_s3_01;\n        }\n        switch(non_modal_action_flag) {\n        case '\\temp_x01':\n          result = __aeabi_fcmp_valuelocal_flagt(p_value,0);\n          temp_result_double_1 = temp_double_4;\n          fVar_value7 = etemp_xtr_valueaout_s2_02;\n          temp_float_1 = etemp_xtr_valueaout_s3_02;\n          if (result == 0) {\n            if (system_state.state != '\\a') {\n              mc_dwelocal_flaglocal_flag((flocal_flagoat)temp_double_4);\n              temp_result_double_1 = temp_double_5;\n              fVar_value7 = etemp_xtr_valueaout_s2_03;\n              temp_float_1 = etemp_xtr_valueaout_s3_03;\n            }\n          }\n          elocal_flagse {\n            global_context.status_code = '\\temp_x06';\n          }\n          br_valueeak;\n        case '\\temp_x02':\n          temp_float_2 = __aeabi_f2d(p_value);\n          tr_valueunc((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_current_value = __aeabi_d2iz(temp_float_2,temp_result_6);\n          temp_result_double_1 = temp_double_6;\n          fVar_value7 = etemp_xtr_valueaout_s2_04;\n          temp_float_1 = etemp_xtr_valueaout_s3_04;\n          if ((((local_flag == '\\temp_x02') || (local_flag == '\\temp_x14')) && (-1 < int_current_value)) && (int_current_value < 7)) {\n            if ((axis_word_flags == '\\0') && (local_flag == '\\temp_x02')) {\n              global_context.status_code = '\\temp_x06';\n            }\n            elocal_flagse {\n              if (int_current_value < 1) {\n                int_current_value = (int)global_context.coordinate_select;\n              }\n              elocal_flagse {\n                int_current_value = int_current_value + -1;\n              }\n              status_code = settings_r_valueead_coordinate_data((uint8_t)int_current_value,coordinate_data_2);\n              if (status_code == '\\0') {\n                r_valueetur_valuen '\\n';\n              }\n              for_value (i = '\\0'; i < 3; i = i + '\\temp_x01') {\n                if (((int)(uint)axis_word_flags >> i & 1U) != 0) {\n                  if (local_flag == '\\temp_x14') {\n                    uVar_value6 = (uint)i;\n                    fVar_value7 = (flocal_flagoat)__aeabi_fsub(global_context.p_valueosition[i],target_position[i]);\n                    coordinate_data_2[uVar_value6] = fVar_value7;\n                  }\n                  elocal_flagse {\n                    coordinate_data_2[i] = target_position[i];\n                  }\n                }\n              }\n              settings_wr_valueite_coordinate_data((uint8_t)int_current_value,coordinate_data_2);\n              temp_result_double_1 = temp_double_7;\n              fVar_value7 = etemp_xtr_valueaout_s2_05;\n              temp_float_1 = etemp_xtr_valueaout_s3_05;\n              if (int_current_value == (uint)global_context.coordinate_select) {\n                global_context.coor_valued_system_statetem[0] = coordinate_data_2[0];\n                global_context.coor_valued_system_statetem[1] = coordinate_data_2[1];\n                global_context.coor_valued_system_statetem[2] = coordinate_data_2[2];\n              }\n            }\n          }\n          elocal_flagse {\n            global_context.status_code = '\\temp_x03';\n          }\n          axis_word_flags = '\\0';\n          br_valueeak;\n        case '\\temp_x03':\n        case '\\temp_x05':\n          if (axis_word_flags != '\\0') {\n            for_value (i_1_value = '\\0'; i_1_value < 3; i_1_value = i_1_value + '\\temp_x01') {\n              if (((int)(uint)axis_word_flags >> i_1_value & 1U) == 0) {\n                target_position[i_1_value] = global_context.p_valueosition[i_1_value];\n              }\n              elocal_flagse if (global_context.absolocal_flagute_mode == '\\0') {\n                uVar_value6 = (uint)i_1_value;\n                fVar_value7 = (flocal_flagoat)__addsf3(target_position[i_1_value],global_context.p_valueosition[i_1_value]);\n                target_position[uVar_value6] = fVar_value7;\n                temp_result_double_1 = temp_double_9;\n                fVar_value7 = etemp_xtr_valueaout_s2_07;\n                temp_float_1 = etemp_xtr_valueaout_s3_07;\n              }\n              elocal_flagse {\n                fVar_value7 = target_position[i_1_value];\n                temp_float_2 = __addsf3(global_context.coor_valued_system_statetem[i_1_value],global_context.coor_valued_offset_position[i_1_value]);\n                uVar_value6 = (uint)i_1_value;\n                fVar_value7 = (flocal_flagoat)__addsf3(fVar_value7,temp_float_2);\n                target_position[uVar_value6] = fVar_value7;\n                temp_result_double_1 = temp_double_8;\n                fVar_value7 = etemp_xtr_valueaout_s2_06;\n                temp_float_1 = etemp_xtr_valueaout_s3_06;\n              }\n            }\n            mc_gcode_line((flocal_flagoat)temp_result_double_1,(flocal_flagoat)((ulocal_flagonglocal_flagong)temp_result_double_1 >> 0temp_x20),fVar_value7,temp_float_1,SUB41(target_position[0],0));\n          }\n          if (non_modal_action_flag == '\\temp_x05') {\n            status_code = settings_r_valueead_coordinate_data('\\a',coordinate_data_1);\n            temp_result_double_1 = temp_double_10;\n            fVar_value7 = etemp_xtr_valueaout_s2_08;\n            temp_float_1 = etemp_xtr_valueaout_s3_08;\n            if (status_code == '\\0') {\n              r_valueetur_valuen '\\n';\n            }\n          }\n          elocal_flagse {\n            status_code = settings_r_valueead_coordinate_data('\\temp_x06',coordinate_data_1);\n            temp_result_double_1 = temp_double_11;\n            fVar_value7 = etemp_xtr_valueaout_s2_09;\n            temp_float_1 = etemp_xtr_valueaout_s3_09;\n            if (status_code == '\\0') {\n              r_valueetur_valuen '\\n';\n            }\n          }\n          in_stack_ffffff48 = 0;\n          mc_gcode_line((flocal_flagoat)temp_result_double_1,(flocal_flagoat)((ulocal_flagonglocal_flagong)temp_result_double_1 >> 0temp_x20),fVar_value7,temp_float_1,\n                  SUB41(coordinate_data_1[0],0));\n          global_context.p_valueosition[0] = coordinate_data_1[0];\n          global_context.p_valueosition[1] = coordinate_data_1[1];\n          global_context.p_valueosition[2] = coordinate_data_1[2];\n          axis_word_flags = '\\0';\n          temp_result_double_1 = temp_double_12;\n          fVar_value7 = etemp_xtr_valueaout_s2_10;\n          temp_float_1 = etemp_xtr_valueaout_s3_10;\n          br_valueeak;\n        case '\\temp_x04':\n        case '\\temp_x06':\n          if (non_modal_action_flag == '\\temp_x06') {\n            settings_wr_valueite_coordinate_data('\\a',global_context.p_valueosition);\n            temp_result_double_1 = temp_double_13;\n            fVar_value7 = etemp_xtr_valueaout_s2_11;\n            temp_float_1 = etemp_xtr_valueaout_s3_11;\n          }\n          elocal_flagse {\n            settings_wr_valueite_coordinate_data('\\temp_x06',global_context.p_valueosition);\n            temp_result_double_1 = temp_double_14;\n            fVar_value7 = etemp_xtr_valueaout_s2_12;\n            temp_float_1 = etemp_xtr_valueaout_s3_12;\n          }\n          br_valueeak;\n        case '\\a':\n          if (axis_word_flags == '\\0') {\n            global_context.status_code = '\\temp_x06';\n          }\n          elocal_flagse {\n            for_value (i_2_value = '\\0'; i_2_value < 3; i_2_value = i_2_value + '\\temp_x01') {\n              if (((int)(uint)axis_word_flags >> i_2_value & 1U) != 0) {\n                temp_float_2 = __aeabi_fsub(global_context.p_valueosition[i_2_value],global_context.coor_valued_system_statetem[i_2_value]);\n                uVar_value6 = (uint)i_2_value;\n                fVar_value7 = (flocal_flagoat)__aeabi_fsub(temp_float_2,target_position[i_2_value]);\n                global_context.coor_valued_offset_position[uVar_value6] = fVar_value7;\n                temp_result_double_1 = temp_double_15;\n                fVar_value7 = etemp_xtr_valueaout_s2_13;\n                temp_float_1 = etemp_xtr_valueaout_s3_13;\n              }\n            }\n          }\n          axis_word_flags = '\\0';\n          br_valueeak;\n        case '\\b':\n          memset(global_context.coor_valued_offset_position,0,0temp_xc);\n          temp_result_double_1 = temp_double_16;\n          fVar_value7 = etemp_xtr_valueaout_s2_14;\n          temp_float_1 = etemp_xtr_valueaout_s3_14;\n        }\n        if (((modal_word_flags & 4) != 0) || (axis_word_flags != '\\0')) {\n          if ((global_context.feed_rate_mode != '\\0') &&\n             ((result = __aeabi_fcmp_valuelocal_flagt(feed_rate,0), temp_result_double_1 = temp_double_17,\n              fVar_value7 = etemp_xtr_valueaout_s2_15, temp_float_1 = etemp_xtr_valueaout_s3_15, result != 0 &&\n              (global_context.motion_mode != '\\temp_x04')))) {\n            global_context.status_code = '\\temp_x06';\n          }\n          if (((absolute_override_flag != '\\0') && (global_context.motion_mode != '\\0')) &&\n             (global_context.motion_mode != '\\temp_x01')) {\n            global_context.status_code = '\\temp_x06';\n          }\n          if (global_context.status_code != '\\0') {\n            r_valueetur_valuen global_context.status_code;\n          }\n          for_value (i_3_value = '\\0'; i_3_value < 3; i_3_value = i_3_value + '\\temp_x01') {\n            if (((int)(uint)axis_word_flags >> i_3_value & 1U) == 0) {\n              target_position[i_3_value] = global_context.p_valueosition[i_3_value];\n            }\n            elocal_flagse if (absolute_override_flag == '\\0') {\n              if (global_context.absolocal_flagute_mode == '\\0') {\n                uVar_value6 = (uint)i_3_value;\n                fVar_value7 = (flocal_flagoat)__addsf3(target_position[i_3_value],global_context.p_valueosition[i_3_value]);\n                target_position[uVar_value6] = fVar_value7;\n                temp_result_double_1 = temp_double_19;\n                fVar_value7 = etemp_xtr_valueaout_s2_17;\n                temp_float_1 = etemp_xtr_valueaout_s3_17;\n              }\n              elocal_flagse {\n                fVar_value7 = target_position[i_3_value];\n                temp_float_2 = __addsf3(global_context.coor_valued_system_statetem[i_3_value],global_context.coor_valued_offset_position[i_3_value]);\n                uVar_value6 = (uint)i_3_value;\n                fVar_value7 = (flocal_flagoat)__addsf3(fVar_value7,temp_float_2);\n                target_position[uVar_value6] = fVar_value7;\n                temp_result_double_1 = temp_double_18;\n                fVar_value7 = etemp_xtr_valueaout_s2_16;\n                temp_float_1 = etemp_xtr_valueaout_s3_16;\n              }\n            }\n          }\n          if (global_context.motion_mode < 5) {\n            temp_y_00 = (flocal_flagoat)((ulocal_flagonglocal_flagong)temp_result_double_1 >> 0temp_x20);\n            switch(global_context.motion_mode) {\n            case '\\0':\n              if (axis_word_flags == '\\0') {\n                global_context.status_code = '\\temp_x06';\n              }\n              elocal_flagse {\n                mc_gcode_line((flocal_flagoat)temp_result_double_1,temp_y_00,fVar_value7,temp_float_1,SUB41(target_position[0],0));\n              }\n              br_valueeak;\n            case '\\temp_x01':\n              if (axis_word_flags == '\\0') {\n                global_context.status_code = '\\temp_x06';\n              }\n              elocal_flagse {\n                mc_gcode_line((flocal_flagoat)temp_result_double_1,temp_y_00,fVar_value7,temp_float_1,SUB41(target_position[0],0));\n              }\n              br_valueeak;\n            defaulocal_flagt:\n              axis_word_flags = axis_word_flags & ~(btemp_yte)(1 << global_context.p_valuelocal_flagane_atemp_xis_2);\n              if ((axis_word_flags == 0) ||\n                 (((result = __aeabi_fcmp_valueeq(r_value,0), result != 0 &&\n                   (result = __aeabi_fcmp_valueeq(offset_position[global_context.p_valuelocal_flagane_atemp_xis_0],0), result != 0)) &&\n                  (result = __aeabi_fcmp_valueeq(offset_position[global_context.p_valuelocal_flagane_atemp_xis_1],0), result != 0)))) {\n                global_context.status_code = '\\temp_x06';\n              }\n              elocal_flagse {\n                result = __aeabi_fcmp_valueeq(r_value,0);\n                if (result == 0) {\n                  temp_x = (flocal_flagoat)__aeabi_fsub(target_position[global_context.p_valuelocal_flagane_atemp_xis_0],global_context.p_valueosition[global_context.p_valuelocal_flagane_atemp_xis_0]);\n                  temp_y = (flocal_flagoat)__aeabi_fsub(target_position[global_context.p_valuelocal_flagane_atemp_xis_1],global_context.p_valueosition[global_context.p_valuelocal_flagane_atemp_xis_1]);\n                  memset(offset_position,0,0temp_xc);\n                  temp_float_2 = __aeabi_fmulocal_flag(r_value,0temp_x40800000);\n                  temp_float_2 = __aeabi_fmulocal_flag(temp_float_2,r_value);\n                  temp_float_3 = __aeabi_fmulocal_flag(temp_x,temp_x);\n                  temp_float_2 = __aeabi_fsub(temp_float_2,temp_float_3);\n                  temp_float_3 = __aeabi_fmulocal_flag(temp_y,temp_y);\n                  h_value = (flocal_flagoat)__aeabi_fsub(temp_float_2,temp_float_3);\n                  result = __aeabi_fcmp_valuelocal_flagt(h_value,0);\n                  if (result != 0) {\n                    global_context.status_code = '\\temp_x04';\n                    r_valueetur_valuen '\\temp_x04';\n                  }\n                  temp_float_2 = __aeabi_f2d(h_value);\n                  sqr_valuet((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n                  temp_float_3 = __aeabi_f2d(temp_x);\n                  __aeabi_f2d(temp_y);\n                  htemp_yp_valueot((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48),\n                        (doublocal_flage)CONCAT44(in_stack_ffffff54,in_stack_ffffff50));\n                  temp_result_double_1 = __divdf3(temp_float_2,temp_result_7 ^ 0temp_x80000000,temp_float_3,temp_result_8);\n                  h_value = (flocal_flagoat)__tr_valueuncdfsf2((int)temp_result_double_1,(int)((ulocal_flagonglocal_flagong)temp_result_double_1 >> 0temp_x20));\n                  if (global_context.motion_mode == '\\temp_x03') {\n                    h_value = (flocal_flagoat)((uint)h_value ^ 0temp_x80000000);\n                  }\n                  result = __aeabi_fcmp_valuelocal_flagt(r_value,0);\n                  if (result != 0) {\n                    h_value = (flocal_flagoat)((uint)h_value ^ 0temp_x80000000);\n                    r_value = (flocal_flagoat)((uint)r_value ^ 0temp_x80000000);\n                  }\n                  temp_float_2 = __aeabi_fmulocal_flag(temp_y,h_value);\n                  temp_float_2 = __aeabi_fsub(temp_x,temp_float_2);\n                  uVar_value6 = (uint)global_context.p_valuelocal_flagane_atemp_xis_0;\n                  fVar_value7 = (flocal_flagoat)__aeabi_fmulocal_flag(temp_float_2,0temp_x3f000000);\n                  offset_position[uVar_value6] = fVar_value7;\n                  temp_float_2 = __aeabi_fmulocal_flag(temp_x,h_value);\n                  temp_float_2 = __addsf3(temp_float_2,temp_y);\n                  uVar_value6 = (uint)global_context.p_valuelocal_flagane_atemp_xis_1;\n                  fVar_value7 = (flocal_flagoat)__aeabi_fmulocal_flag(temp_float_2,0temp_x3f000000);\n                  offset_position[uVar_value6] = fVar_value7;\n                  temp_result_double_1 = temp_double_20;\n                }\n                elocal_flagse {\n                  temp_float_2 = __aeabi_f2d(offset_position[global_context.p_valuelocal_flagane_atemp_xis_0]);\n                  __aeabi_f2d(offset_position[global_context.p_valuelocal_flagane_atemp_xis_1]);\n                  htemp_yp_valueot((doublocal_flage)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48),\n                        (doublocal_flage)CONCAT44(in_stack_ffffff54,in_stack_ffffff50));\n                  r_value = (flocal_flagoat)__tr_valueuncdfsf2(temp_float_2,temp_result_9);\n                  temp_result_double_1 = temp_double_21;\n                }\n                isclocal_flagockwise = global_context.motion_mode == '\\temp_x02';\n                fVar_value7 = feed_rate;\n                if (global_context.feed_rate_mode == '\\0') {\n                  fVar_value7 = global_context.feed_r_valueate;\n                }\n                mc_ar_valuec(global_context.p_valueosition,target_position,offset_position,global_context.p_valuelocal_flagane_atemp_xis_0,global_context.p_valuelocal_flagane_atemp_xis_1,global_context.p_valuelocal_flagane_atemp_xis_2,\n                       (flocal_flagoat)temp_result_double_1,SUB41(fVar_value7,0),(flocal_flagoat)((ulocal_flagonglocal_flagong)temp_result_double_1 >> 0temp_x20),\n                       global_context.feed_rate_mode);\n              }\n              br_valueeak;\n            case '\\temp_x04':\n              if (axis_word_flags != '\\0') {\n                global_context.status_code = '\\temp_x06';\n              }\n            }\n          }\n          if (global_context.status_code != '\\0') {\n            r_valueetur_valuen global_context.status_code;\n          }\n          global_context.p_valueosition[0] = target_position[0];\n          global_context.p_valueosition[1] = target_position[1];\n          global_context.p_valueosition[2] = target_position[2];\n        }\n        status_code = global_context.status_code;\n        if (global_context.p_valuer_valueogr_valueam_flocal_flagow != '\\0') {\n          p_valuelocal_flagan_stemp_ynchr_valueonize();\n          system_state.auto_star_valuet = '\\0';\n          if (global_context.p_valuer_valueogr_valueam_flocal_flagow == '\\temp_x02') {\n            mc_r_valueeset();\n            status_code = global_context.status_code;\n          }\n          elocal_flagse {\n            global_context.p_valuer_valueogr_valueam_flocal_flagow = '\\0';\n            status_code = global_context.status_code;\n          }\n        }\n      }\n    }\n  }\n  r_valueetur_valuen status_code;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_gcode_line_080005b4",
                "line": "gcode_line",
                "uVar1": "status_code",
                "iVar2": "result",
                "fVar3": "temp_float_1",
                "uVar4": "temp_float_2",
                "uVar5": "temp_float_3",
                "extraout_r1": "temp_result_1",
                "extraout_r1_00": "temp_result_2",
                "extraout_r1_01": "temp_result_3",
                "extraout_r1_02": "temp_result_4",
                "extraout_r1_03": "temp_result_5",
                "extraout_r1_04": "temp_result_6",
                "extraout_r1_05": "temp_result_7",
                "extraout_r1_06": "temp_result_8",
                "extraout_r1_07": "temp_result_9",
                "extraout_d0": "temp_double_1",
                "extraout_d0_00": "temp_double_2",
                "extraout_d0_01": "temp_double_3",
                "extraout_d0_02": "temp_double_4",
                "extraout_d0_03": "temp_double_5",
                "extraout_d0_04": "temp_double_6",
                "extraout_d0_05": "temp_double_7",
                "extraout_d0_06": "temp_double_8",
                "extraout_d0_07": "temp_double_9",
                "extraout_d0_08": "temp_double_10",
                "extraout_d0_09": "temp_double_11",
                "extraout_d0_10": "temp_double_12",
                "extraout_d0_11": "temp_double_13",
                "extraout_d0_12": "temp_double_14",
                "extraout_d0_13": "temp_double_15",
                "extraout_d0_14": "temp_double_16",
                "extraout_d0_15": "temp_double_17",
                "extraout_d0_16": "temp_double_18",
                "extraout_d0_17": "temp_double_19",
                "extraout_d0_18": "temp_double_20",
                "extraout_d0_19": "temp_double_21",
                "uVar8": "temp_result_double_1",
                "letter": "current_letter",
                "value": "current_value",
                "char_counter": "index",
                "modal_group_words": "modal_word_flags",
                "axis_words": "axis_word_flags",
                "inverse_feed_rate": "feed_rate",
                "absolute_override": "absolute_override_flag",
                "non_modal_action": "non_modal_action_flag",
                "target": "target_position",
                "offset": "offset_position",
                "gc": "global_context",
                "sys": "system_state",
                "coord_select": "coordinate_select",
                "coord_data": "coordinate_data",
                "l": "local_flag",
                "p": "p_value",
                "r": "r_value",
                "h_x2_div_d": "h_value",
                "x": "temp_x",
                "y": "temp_y",
                "i_1": "i_1_value",
                "i_2": "i_2_value",
                "i_3": "i_3_value"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "__truncdfsf2",
                "settings_write_coord_data",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__divdf3",
                "select_plane",
                "trunc",
                "plan_synchronize",
                "to_millimeters",
                "sqrt",
                "settings_read_coord_data",
                "mc_reset",
                "mc_line",
                "coolant_run",
                "next_statement",
                "__aeabi_fsub",
                "__addsf3",
                "mc_dwell",
                "hypot",
                "mc_arc",
                "__aeabi_fmul",
                "__aeabi_d2iz",
                "memset",
                "__aeabi_fcmpeq",
                "spindle_run"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "process_letter_0800184c",
            "code": "\nint process_letter_0800184c(char *current_letter,float *float_pointer,char *input_line,uint8_t *character_count)\n\n{\n  int result;\n  uint8_t *character_count_local;\n  char *input_line_local;\n  float *float_pointer_local;\n  char *current_letter_local;\n  \n  if (input_line[*character_count] == '\\0') {\n    result = 0;\n  }\n  else {\n    *current_letter = input_line[*character_count];\n    if (((byte)*current_letter < 0x41) || (0x5a < (byte)*current_letter)) {\n      gc.status_code = '\\x02';\n      result = 0;\n    }\n    else {\n      *character_count = *character_count + '\\x01';\n      result = read_float(input_line,character_count,float_pointer);\n      if (result == 0) {\n        gc.status_code = '\\x01';\n        result = 0;\n      }\n      else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "process_letter_0800184c",
                "letter": "current_letter",
                "float_ptr": "float_pointer",
                "line": "input_line",
                "char_counter": "character_count",
                "char_counter_local": "character_count_local",
                "line_local": "input_line_local",
                "float_ptr_local": "float_pointer_local",
                "letter_local": "current_letter_local",
                "iVar1": "result"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_register_value_080018cc",
            "code": "\n\n\nvoid updateRegisterValue_080018cc(uint32_t inputValue)\n\n{\n  uint32_t temporaryVariable;\n  uint32_t valueToBeUpdated;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_register_value_080018cc",
                "x": "inputValue",
                "x_local": "temporaryVariable",
                "val": "valueToBeUpdated"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_register_080018fc",
            "code": "\n\n\nvoid updateRegister_080018fc(uint32_t input)\n\n{\n  uint32_t localVariable;\n  uint32_t value;\n  \n  _DAT_40021014 = input | _DAT_40021014 & 0inputfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_register_080018fc",
                "x": "input",
                "x_local": "localVariable",
                "val": "value"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "enable_limits_0800192c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableLimits_0800192c(void)\n\n{\n  isLimitsEnabled = (int)((flags & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "enable_limits_0800192c",
                "settings.flags": "flags",
                "limits_enabled": "isLimitsEnabled"
            },
            "calling": [
                "grbl_main",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "reset_and_flag_execute_0800195c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetAndFlagExecute_0800195c(void)\n\n{\n  if ((systemState != '\\x06') && ((executeState & 0x20) == 0)) {\n    resetMachine();\n    executeState = executeState | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "reset_and_flag_execute_0800195c",
                "sys.state": "systemState",
                "sys.execute": "executeState",
                "mc_reset": "resetMachine"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_steps_and_move_08001994",
            "code": "\n/* WARNING: Variable defined which should be unmapped: homingRate-local */\n\nvoid calculateStepsAndMove_08001994(uint8_t cycleMask,int8_t positionDirection,_Bool invertPin,float homingRate)\n\n{\n  bool invertPinFlag;\n  uint16_t stepInvertMask;\n  undefined4 accelerationFactor;\n  undefined4 accelerationTime;\n  int timeInMicroseconds;\n  uint requiredTimeInMicroseconds;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint32_t maxSteps;\n  undefined4 in_r3;\n  uint32_t steps[0];\n  undefined8 steps[1];\n  float homingRateLocal;\n  undefined tempStack;\n  _Bool invertPinLocal;\n  int8_t positionDirectionLocal;\n  uint8_t cycleMaskLocal;\n  uint32_t stepArray [3];\n  uint16_t stepBits0;\n  uint32_t minimumDt;\n  uint32_t rateDifference;\n  float ds;\n  uint32_t stepEventCount;\n  uint32_t limitState;\n  uint16_t stepBits;\n  uint32_t trapCounter;\n  uint32_t stepRate;\n  uint32_t stepDelay;\n  int32_t counterZ;\n  int32_t counterY;\n  int32_t counterX;\n  uint16_t directionBits;\n  uint32_t delayTime;\n  uint8_t distance;\n  \n  invertPinFlag = !invertPin;\n  memset(stepArray,0,0xc);\n  distance = (cycleMask & 1) != 0;\n  if ((bool)distance) {\n    __aeabi_f2d(settings.stepArray_per_mm[0]);\n    stepArray[0] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))))\n    ;\n  }\n  if ((cycleMask & 2) != 0) {\n    distance = distance + '\\x01';\n    __aeabi_f2d(settings.stepArray_per_mm[1]);\n    stepArray[1] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))))\n    ;\n  }\n  if ((cycleMask & 4) != 0) {\n    distance = distance + '\\x01';\n    __aeabi_f2d(settings.stepArray_per_mm[2]);\n    stepArray[2] = lround((double)CONCAT17(cycleMask,\n                                       CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))))\n    ;\n  }\n  maxSteps = stepArray[2];\n  if (stepArray[2] < stepArray[1]) {\n    maxSteps = stepArray[1];\n  }\n  steps[0] = stepArray[0];\n  if (stepArray[0] < maxSteps) {\n    steps[0] = maxSteps;\n  }\n  steps[1] = __floatunsidf(steps[0]);\n  accelerationFactor = __floatunsidf(distance);\n  sqrt((double)CONCAT17(cycleMask,CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))));\n  steps[1] = __divdf3((int)steps[1],(int)((ulonglong)steps[1] >> 0x20),accelerationFactor,extraout_r1);\n  accelerationFactor = __truncdfsf2((int)steps[1],(int)((ulonglong)steps[1] >> 0x20));\n  accelerationTime = __aeabi_fmul(settings.acceleration,accelerationFactor);\n  accelerationTime = __aeabi_fdiv(accelerationTime,0x453b8000);\n  accelerationTime = __aeabi_f2d(accelerationTime);\n  ceil((double)CONCAT17(cycleMask,CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))));\n  timeInMicroseconds = __aeabi_d2uiz(accelerationTime,extraout_r1_00);\n  accelerationTime = __floatunsidf(distance);\n  sqrt((double)CONCAT17(cycleMask,CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,in_r3)))));\n  steps[1] = __aeabi_f2d(in_r3);\n  steps[1] = __muldf3(accelerationTime,extraout_r1_01,(int)steps[1],(int)((ulonglong)steps[1] >> 0x20));\n  accelerationTime = __truncdfsf2((int)steps[1],(int)((ulonglong)steps[1] >> 0x20));\n  accelerationFactor = __aeabi_fmul(accelerationFactor,accelerationTime);\n  accelerationFactor = __aeabi_fdiv(0x4c64e1c0,accelerationFactor);\n  __aeabi_f2d(accelerationFactor);\n  requiredTimeInMicroseconds = lround((double)CONCAT17(cycleMask,\n                                  CONCAT16(positionDirection,CONCAT15(invertPinFlag,CONCAT14(tempStack,accelerationTime)))));\n  stepInvertMask = settings.step_invert_mask;\n  delayTime = 75000;\n  if (requiredTimeInMicroseconds < 75000) {\n    delayTime = requiredTimeInMicroseconds;\n  }\n  directionBits = settings.dirn_invert_mask ^ settings.homing_dir_mask & 0xaa0;\n  if (positionDirection == '\\0') {\n    directionBits = directionBits ^ 0xaa0;\n  }\n  dirn_wr((uint)directionBits);\n  step_wr((uint)stepInvertMask);\n  counterZ = -(steps[0] >> 1);\n  stepDelay = delayTime - settings.pulse_microseconds;\n  stepRate = 0;\n  trapCounter = 10000;\n  cycleMaskLocal = cycleMask;\n  counterY = counterZ;\n  counterX = counterZ;\n  while( true ) {\n    stepBits = stepInvertMask;\n    limitState = debounce_rd();\n    if (invertPinFlag) {\n      limitState = limitState ^ 0x1e;\n    }\n    if (((cycleMaskLocal & 1) != 0) && (counterX = counterX + stepArray[0], 0 < counterX)) {\n      if ((limitState & 0x10) == 0) {\n        cycleMaskLocal = cycleMaskLocal & 0xfe;\n      }\n      else {\n        stepBits = stepInvertMask ^ 0x10;\n      }\n      counterX = counterX - steps[0];\n    }\n    if (((cycleMaskLocal & 2) != 0) && (counterY = counterY + stepArray[1], 0 < counterY)) {\n      if ((limitState & 8) == 0) {\n        cycleMaskLocal = cycleMaskLocal & 0xfd;\n      }\n      else {\n        stepBits = stepBits ^ 0x440;\n      }\n      counterY = counterY - steps[0];\n    }\n    if (((cycleMaskLocal & 4) != 0) && (counterZ = counterZ + stepArray[2], 0 < counterZ)) {\n      if ((limitState & 4) == 0) {\n        cycleMaskLocal = cycleMaskLocal & 0xfb;\n      }\n      else {\n        stepBits = stepBits ^ 0x100;\n      }\n      counterZ = counterZ - steps[0];\n    }\n    if ((cycleMaskLocal == '\\0') || ((sys.execute & 0x10) != 0)) break;\n    step_wr((uint)stepBits);\n    delay_us((uint)settings.pulse_microseconds);\n    step_wr((uint)stepInvertMask);\n    delay_us(stepDelay);\n    if ((requiredTimeInMicroseconds < delayTime) && (trapCounter = delayTime + trapCounter, 20000 < trapCounter)) {\n      trapCounter = trapCounter - 20000;\n      stepRate = timeInMicroseconds + stepRate;\n      delayTime = 60000000 / stepRate;\n      if (60000000 / stepRate < requiredTimeInMicroseconds) {\n        delayTime = requiredTimeInMicroseconds;\n      }\n      stepDelay = delayTime - settings.pulse_microseconds;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_steps_and_move_08001994",
                "cycle_mask": "cycleMask",
                "pos_dir": "positionDirection",
                "invert_pin": "invertPin",
                "homing_rate": "homingRate",
                "bVar1": "invertPinFlag",
                "uVar2": "stepInvertMask",
                "uVar3": "accelerationFactor",
                "uVar4": "accelerationTime",
                "iVar5": "timeInMicroseconds",
                "uVar6": "requiredTimeInMicroseconds",
                "uVar7": "maxSteps",
                "uVar8": "steps[0]",
                "uVar9": "steps[1]",
                "homing_rate_local": "homingRateLocal",
                "uStack_64": "tempStack",
                "invert_pin_local": "invertPinLocal",
                "pos_dir_local": "positionDirectionLocal",
                "cycle_mask_local": "cycleMaskLocal",
                "steps": "stepArray",
                "step_bits0": "stepBits0",
                "dt_min": "minimumDt",
                "delta_rate": "rateDifference",
                "step_event_count": "stepEventCount",
                "limit_state": "limitState",
                "step_bits": "stepBits",
                "trap_counter": "trapCounter",
                "step_rate": "stepRate",
                "step_delay": "stepDelay",
                "counter_z": "counterZ",
                "counter_y": "counterY",
                "counter_x": "counterX",
                "dirn_bits": "directionBits",
                "dt": "delayTime",
                "dist": "distance"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "__muldf3",
                "delay_us",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "lround",
                "__aeabi_fdiv",
                "__floatunsidf",
                "debounce_rd",
                "__aeabi_f2d",
                "step_wr",
                "dirn_wr",
                "ceil",
                "__aeabi_fmul",
                "__divdf3",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_homing_08001d4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeHoming_08001d4c(void)\n\n{\n  char cVar1;\n  float initialHomingRate;\n  float secondaryHomingRate;\n  float tempValue1;\n  float tempValue2;\n  float tempValue3;\n  float currentHomingRate;\n  int8_t cycleCounter;\n  \n  st_wake_up();\n  homing_cycle('\\x04','\\x01',false,initialHomingRate);\n  homing_cycle('\\x03','\\x01',false,secondaryHomingRate);\n  delay_ms(settings.homing_debounce_delay);\n  cycleCounter = '\\x02';\n  currentHomingRate = tempValue1;\n  while (cVar1 = cycleCounter + -1, cycleCounter != '\\0') {\n    homing_cycle('\\a','\\0',true,currentHomingRate);\n    delay_ms(settings.homing_debounce_delay);\n    currentHomingRate = tempValue2;\n    cycleCounter = cVar1;\n    if ('\\0' < cVar1) {\n      homing_cycle('\\a','\\x01',false,tempValue2);\n      delay_ms(settings.homing_debounce_delay);\n      currentHomingRate = tempValue3;\n    }\n  }\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_homing_08001d4c",
                "homing_rate": "initialHomingRate",
                "homing_rate_00": "secondaryHomingRate",
                "extraout_s0": "tempValue1",
                "homing_rate_01": "tempValue2",
                "extraout_s0_00": "tempValue3",
                "homing_rate_02": "currentHomingRate",
                "n_cycle": "cycleCounter"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "delay_ms",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_and_execute_08001ddc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initialize_and_execute_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  memset(&system_state,0,0x14);\n  system_state.abort = '\\x01';\n  system_state.state = '\\x01';\n  do {\n    if (system_state.abort != '\\0') {\n      reset_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      sync_current_position();\n      system_state.abort = '\\0';\n      system_state.execute = '\\0';\n      if ((settings_flags & 2) != 0) {\n        auto_start = '\\x01';\n      }\n      if ((system_state.state == '\\x01') && ((settings_flags & 0x10) != 0)) {\n        system_state.state = '\\x06';\n      }\n      if (system_state.state == '\\x06') {\n        report_message('\\x02');\n      }\n      else {\n        system_state.state = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_and_execute_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "sys": "system_state",
                "serial_reset_read_buffer": "reset_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "sync_current_position",
                "settings.flags": "settings_flags",
                "sys.auto_start": "auto_start",
                "report_feedback_message": "report_message",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_init",
                "sys_sync_current_position",
                "report_feedback_message",
                "settings_init",
                "spindle_init",
                "protocol_execute_runtime",
                "limits_init",
                "serial_reset_read_buffer",
                "plan_init",
                "st_init",
                "protocol_execute_startup",
                "serial_init",
                "gc_init",
                "protocol_process",
                "coolant_init",
                "memset",
                "st_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_line_08001e98",
            "code": "\nvoid executeLine_08001e98(float posX,float posY,float posZ,float speed,uint8_t invertSpeed)\n\n{\n  uint8_t checkResult;\n  float bufferedPosX;\n  float bufferedPosY;\n  float bufferedPosZ;\n  float bufferedSpeed;\n  float localSpeed;\n  float localZ;\n  float localY;\n  float localX;\n  \n  if (sposYs.state != '\\a') {\n    do {\n      protocol_eposXecute_runtime();\n      if (sposYs.abort != '\\0') {\n        return;\n      }\n      checkResult = plan_check_full_buffer();\n    } while (checkResult != '\\0');\n    plan_buffer_line(bufferedPosX,bufferedPosY,bufferedPosZ,bufferedSpeed,invertSpeed);\n    if (sposYs.state == '\\0') {\n      sposYs.state = '\\posX02';\n    }\n    if (sposYs.auto_start != '\\0') {\n      st_cposYcle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_line_08001e98",
                "x": "posX",
                "y": "posY",
                "z": "posZ",
                "feed_rate": "speed",
                "invert_feed_rate": "invertSpeed",
                "uVar1": "checkResult",
                "x_00": "bufferedPosX",
                "y_00": "bufferedPosY",
                "z_00": "bufferedPosZ",
                "feed_rate_00": "bufferedSpeed",
                "feed_rate_local": "localSpeed",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "mc_go_home",
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_arc_path_08001f00",
            "code": "\n/* WARNING: VarloopIndexable defloopIndexned whloopIndexch should be unmapped: axisPrimary-local */\n\nvoloopIndexd calculateArcPath_08001f00(float *currentPosition,float *targetPosition,float *offset,uloopIndexnt8_t axisPrimary,uloopIndexnt8_t axisSecondary,\n                 uloopIndexnt8_t axisLinear,float feedRate,uloopIndexnt8_t isInvertFeedRate,float arcRadius,\n                 uloopIndexnt8_t isClockwise)\n\n{\n  uloopIndexnt tempVar1;\n  undefloopIndexned4 tempVar2;\n  undefloopIndexned4 tempVar3;\n  undefloopIndexned4 tempVar4;\n  undefloopIndexned4 tempVar5;\n  loopIndexnt tempVar6;\n  float tempVar7;\n  undefloopIndexned4 extraReturnVar1;\n  undefloopIndexned4 extraReturnVar2;\n  undefloopIndexned4 extraReturnVar3;\n  undefloopIndexned4 extraReturnVar4;\n  undefloopIndexned8 extraReturnVar5;\n  undefloopIndexned8 extraReturnVar6;\n  undefloopIndexned8 extraReturnVar7;\n  float extraReturnVar8;\n  float tempVar8;\n  float extraReturnVar9;\n  float extraReturnVar10;\n  float feedRate_00;\n  float extraReturnVar11;\n  float feedRate_01;\n  undefloopIndexned8 tempVar9;\n  undefloopIndexned8 tempVar10;\n  undefloopIndexned3 tempVar11;\n  undefloopIndexned4 tempVar12;\n  char tempVar13;\n  uloopIndexnt tempVar14;\n  undefloopIndexned4 tempVar15;\n  undefloopIndexned3 tempVar16;\n  uloopIndexnt8_t localAxisPrimary;\n  float *localOffset;\n  float *localTarget;\n  float *localPosition;\n  float arcTarget [3];\n  float tempVar17;\n  float tempVar18;\n  float tempVar19;\n  float tempVar20;\n  float tempVar21;\n  float segmentLinear;\n  float segmentTheta;\n  uloopIndexnt16_t numSegments;\n  float mmTravel;\n  float rtAxisSecondary;\n  float rtAxisPrimary;\n  float linearTravel;\n  float centerAxisSecondary;\n  float centerAxisPrimary;\n  loopIndexnt8_t loopCount;\n  uloopIndexnt16_t loopIndex;\n  float angularTravel;\n  float axisSecondaryRotation;\n  float axisPrimaryRotation;\n  \n  _tempVar16 = CONCAT13(axisPrimary,tempVar16);\n  centerAxisPrimary = (float)__addsf3(feedRate,currentPosition[axisPrimary],offset[axisPrimary]);\n  centerAxisSecondary = (float)__addsf3(currentPosition[axisSecondary],offset[axisSecondary]);\n  tempVar1 = __aeabloopIndex_fsub(targetPosition[axisLinear],currentPosition[axisLinear]);\n  axisPrimaryRotation = (float)((uloopIndexnt)offset[axisPrimary] ^ 0x80000000);\n  axisSecondaryRotation = (float)((uloopIndexnt)offset[axisSecondary] ^ 0x80000000);\n  tempVar2 = __aeabloopIndex_fsub(targetPosition[axisPrimary],centerAxisPrimary);\n  tempVar3 = __aeabloopIndex_fsub(targetPosition[axisSecondary],centerAxisSecondary);\n  tempVar4 = __aeabloopIndex_fmul(axisPrimaryRotation,tempVar3);\n  tempVar5 = __aeabloopIndex_fmul(axisSecondaryRotation,tempVar2);\n  tempVar4 = __aeabloopIndex_fsub(tempVar4,tempVar5);\n  tempVar9 = __aeabloopIndex_f2d(tempVar4);\n  tempVar2 = __aeabloopIndex_fmul(axisPrimaryRotation,tempVar2);\n  tempVar3 = __aeabloopIndex_fmul(axisSecondaryRotation,tempVar3);\n  tempVar2 = __addsf3(tempVar2,tempVar3);\n  tempVar10 = __aeabloopIndex_f2d(tempVar2);\n  tempVar9 = atan2((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20),(loopIndexnt)tempVar10,\n                (loopIndexnt)((ulonglong)tempVar10 >> 0x20));\n  angularTravel = (float)__truncdfsf2((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20));\n  loopIndexf (tempVar13 == '\\0') {\n    tempVar6 = __aeabloopIndex_fcmple(angularTravel,0);\n    loopIndexf (tempVar6 != 0) {\n      tempVar9 = __aeabloopIndex_f2d(angularTravel);\n      tempVar9 = __aeabloopIndex_dadd((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20));\n    }\n  }\n  else {\n    tempVar6 = __aeabloopIndex_fcmpge(angularTravel,0);\n    loopIndexf (tempVar6 != 0) {\n      tempVar9 = __aeabloopIndex_f2d(angularTravel);\n      tempVar9 = __subdf3((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20),0x54442d18,0x401921fb);\n      angularTravel = (float)__truncdfsf2((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20));\n    }\n  }\n  tempVar2 = __aeabloopIndex_fmul(angularTravel,tempVar12);\n  tempVar2 = __aeabloopIndex_f2d(tempVar2);\n  __aeabloopIndex_f2d(tempVar1 & 0x7fffffff);\n  hypot((double)CONCAT44(tempVar15,tempVar14),(double)CONCAT44(offset,_tempVar16));\n  tempVar2 = __truncdfsf2(tempVar2,extraReturnVar1);\n  tempVar6 = __aeabloopIndex_fcmpeq(tempVar2,0);\n  loopIndexf (tempVar6 == 0) {\n    tempVar2 = __aeabloopIndex_fdloopIndexv(tempVar2,settloopIndexngs.mm_per_arc_segment);\n    tempVar2 = __aeabloopIndex_f2d(tempVar2);\n    floor((double)CONCAT44(tempVar15,tempVar14));\n    numSegments = __aeabloopIndex_d2uloopIndextempVar8(tempVar2,extraReturnVar2);\n    loopIndexf (isClockwise != '\\0') {\n      tempVar2 = __floatsloopIndexsf(numSegments);\n      __aeabloopIndex_fmul(_isInvertFeedRate,tempVar2);\n    }\n    tempVar2 = __floatsloopIndexsf(numSegments);\n    tempVar20 = (float)__aeabloopIndex_fdloopIndexv(angularTravel,tempVar2);\n    tempVar2 = __floatsloopIndexsf(numSegments);\n    segmentLinear = (float)__aeabloopIndex_fdloopIndexv(tempVar1,tempVar2);\n    tempVar9 = __aeabloopIndex_f2d(tempVar20);\n    tempVar9 = __muldf3((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20),0,0x3fe00000);\n    tempVar10 = __aeabloopIndex_f2d(tempVar20);\n    tempVar9 = __muldf3((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20),(loopIndexnt)tempVar10,\n                     (loopIndexnt)((ulonglong)tempVar10 >> 0x20));\n    tempVar9 = __subdf3(0,0x3ff00000,(loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20));\n    tempVar21 = (float)__truncdfsf2((loopIndexnt)tempVar9,(loopIndexnt)((ulonglong)tempVar9 >> 0x20));\n    loopCount = '\\0';\n    segmentTheta = tempVar20;\n    arcTarget[axisLinear] = currentPosition[axisLinear];\n    tempVar9 = extraReturnVar5;\n    tempVar7 = extraReturnVar8;\n    feedRate_01 = extraReturnVar10;\n    for (loopIndex = 1; loopIndex < numSegments; loopIndex = loopIndex + 1) {\n      loopIndexf ((loopIndexnt)loopCount < (loopIndexnt)(uloopIndexnt)settloopIndexngs.n_arc_correctloopIndexon) {\n        tempVar2 = __aeabloopIndex_fmul(axisPrimaryRotation,tempVar20);\n        tempVar3 = __aeabloopIndex_fmul(axisSecondaryRotation,tempVar21);\n        tempVar7 = (float)__addsf3(tempVar2,tempVar3);\n        tempVar2 = __aeabloopIndex_fmul(axisPrimaryRotation,tempVar21);\n        tempVar3 = __aeabloopIndex_fmul(axisSecondaryRotation,tempVar20);\n        axisPrimaryRotation = (float)__aeabloopIndex_fsub(tempVar2,tempVar3);\n        loopCount = loopCount + '\\x01';\n        axisSecondaryRotation = tempVar7;\n      }\n      else {\n        tempVar2 = __floatsloopIndexsf(loopIndex);\n        tempVar2 = __aeabloopIndex_fmul(tempVar2,segmentTheta);\n        tempVar2 = __aeabloopIndex_f2d(tempVar2);\n        cos((double)CONCAT44(tempVar15,tempVar14));\n        tempVar2 = __truncdfsf2(tempVar2,extraReturnVar3);\n        tempVar3 = __floatsloopIndexsf(loopIndex);\n        tempVar3 = __aeabloopIndex_fmul(tempVar3,segmentTheta);\n        tempVar3 = __aeabloopIndex_f2d(tempVar3);\n        sloopIndexn((double)CONCAT44(tempVar15,tempVar14));\n        tempVar3 = __truncdfsf2(tempVar3,extraReturnVar4);\n        tempVar4 = __aeabloopIndex_fmul((uloopIndexnt)offset[axisPrimary] ^ 0x80000000,tempVar2);\n        tempVar5 = __aeabloopIndex_fmul(offset[axisSecondary],tempVar3);\n        axisPrimaryRotation = (float)__addsf3(tempVar4,tempVar5);\n        tempVar3 = __aeabloopIndex_fmul((uloopIndexnt)offset[axisPrimary] ^ 0x80000000,tempVar3);\n        tempVar2 = __aeabloopIndex_fmul(offset[axisSecondary],tempVar2);\n        axisSecondaryRotation = (float)__aeabloopIndex_fsub(tempVar3,tempVar2);\n        loopCount = '\\0';\n      }\n      tempVar7 = (float)__addsf3(centerAxisPrimary,axisPrimaryRotation);\n      arcTarget[axisPrimary] = tempVar7;\n      tempVar7 = (float)__addsf3(centerAxisSecondary,axisSecondaryRotation);\n      arcTarget[axisSecondary] = tempVar7;\n      tempVar7 = (float)__addsf3(arcTarget[axisLinear],segmentLinear);\n      arcTarget[axisLinear] = tempVar7;\n      tempVar14 = (uloopIndexnt)isClockwise;\n      mc_lloopIndexne((float)extraReturnVar6,(float)((ulonglong)extraReturnVar6 >> 0x20),tempVar8,feedRate_00,\n              SUB41(arcTarget[0],0));\n      loopIndexf (sys.abort != '\\0') {\n        return;\n      }\n      tempVar9 = extraReturnVar7;\n      tempVar7 = extraReturnVar9;\n      feedRate_01 = extraReturnVar11;\n    }\n    mc_lloopIndexne((float)tempVar9,(float)((ulonglong)tempVar9 >> 0x20),tempVar7,feedRate_01,SUB41(*targetPosition,0));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_arc_path_08001f00",
                "position": "currentPosition",
                "target": "targetPosition",
                "axis_0": "axisPrimary",
                "axis_1": "axisSecondary",
                "axis_linear": "axisLinear",
                "feed_rate": "feedRate",
                "invert_feed_rate": "isInvertFeedRate",
                "radius": "arcRadius",
                "isclockwise": "isClockwise",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "iVar6": "tempVar6",
                "fVar7": "tempVar7",
                "extraout_r1": "extraReturnVar1",
                "extraout_r1_00": "extraReturnVar2",
                "extraout_r1_01": "extraReturnVar3",
                "extraout_r1_02": "extraReturnVar4",
                "extraout_d0": "extraReturnVar5",
                "extraout_d0_00": "extraReturnVar6",
                "extraout_d0_01": "extraReturnVar7",
                "extraout_s2": "extraReturnVar8",
                "extraout_s2_00": "extraReturnVar9",
                "extraout_s3": "extraReturnVar10",
                "extraout_s3_00": "extraReturnVar11",
                "z": "tempVar8",
                "uVar8": "tempVar9",
                "uVar9": "tempVar10",
                "in_stack_00000009": "tempVar11",
                "in_stack_00000010": "tempVar12",
                "in_stack_00000014": "tempVar13",
                "in_stack_ffffff78": "tempVar14",
                "in_stack_ffffff7c": "tempVar15",
                "uStack_80": "tempVar16",
                "axis_0_local": "localAxisPrimary",
                "offset_local": "localOffset",
                "target_local": "localTarget",
                "position_local": "localPosition",
                "arc_target": "arcTarget",
                "r_axisi": "tempVar17",
                "sin_Ti": "tempVar18",
                "cos_Ti": "tempVar19",
                "sin_T": "tempVar20",
                "cos_T": "tempVar21",
                "linear_per_segment": "segmentLinear",
                "theta_per_segment": "segmentTheta",
                "segments": "numSegments",
                "millimeters_of_travel": "mmTravel",
                "rt_axis1": "rtAxisSecondary",
                "rt_axis0": "rtAxisPrimary",
                "linear_travel": "linearTravel",
                "center_axis1": "centerAxisSecondary",
                "center_axis0": "centerAxisPrimary",
                "count": "loopCount",
                "i": "loopIndex",
                "angular_travel": "angularTravel",
                "r_axis1": "axisSecondaryRotation",
                "r_axis0": "axisPrimaryRotation"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sin",
                "__muldf3",
                "__truncdfsf2",
                "__aeabi_dadd",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "atan2",
                "mc_line",
                "__subdf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmple",
                "hypot",
                "__aeabi_fmul",
                "cos",
                "__aeabi_fcmpge",
                "__aeabi_fcmpeq",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "synchronize_and_delay_08002408",
            "code": "\n/* WARNING: Varloop_counterable defloop_counterned whloop_counterch should be unmapped: input_seconds-local */\n\nvoloop_counterd synchronize_and_delay_08002408(float input_seconds)\n\n{\n  uloop_counternt16_t milliseconds;\n  undefloop_counterned4 constant;\n  undefloop_counterned4 result1;\n  undefloop_counterned4 result2;\n  undefloop_counterned4 extra_output1;\n  undefloop_counterned4 extra_output2;\n  undefloop_counterned4 stack_variable;\n  float local_seconds;\n  uloop_counternt16_t loop_counter;\n  \n  result1 = __aeabloop_counter_fmul(input_seconds,constant,0x41a00000);\n  result1 = __aeabloop_counter_f2d(result1);\n  floor((double)CONCAT44(constant,stack_variable));\n  loop_counter = __aeabloop_counter_d2uloop_counterz(result1,extra_output1);\n  plan_synchronloop_counterze();\n  result1 = __aeabloop_counter_fmul(constant,0x447a0000);\n  result2 = __floatsloop_countersf((uloop_counternt)loop_counter * 0x32);\n  result1 = __aeabloop_counter_fsub(result1,result2);\n  result1 = __aeabloop_counter_f2d(result1);\n  floor((double)CONCAT44(constant,stack_variable));\n  milliseconds = __aeabloop_counter_d2uloop_counterz(result1,extra_output2);\n  delay_milliseconds(milliseconds);\n  whloop_counterle ((loop_counter != 0 && (protocol_execute_runtloop_counterme(), sys.abort == '\\0'))) {\n    _delay_milliseconds(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "synchronize_and_delay_08002408",
                "seconds": "input_seconds",
                "ms": "milliseconds",
                "in_r0": "constant",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "extra_output1",
                "extraout_r1_00": "extra_output2",
                "uStack_20": "stack_variable",
                "seconds_local": "local_seconds",
                "i": "loop_counter"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "plan_synchronize",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__aeabi_d2uiz",
                "delay_ms",
                "protocol_execute_runtime",
                "_delay_ms",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_motion_080024c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeMotion_080024c4(void)\n\n{\n  uint8_t inverseFeedRate;\n  undefined4 tempVar1;\n  undefined8 tempVar2;\n  float zCoordinate;\n  float feedRate;\n  int8_t zDirection;\n  int8_t yDirection;\n  int8_t xDirection;\n  \n  systemState = '\\x05';\n  areLimitsEnabled = 0;\n  limits_go_home();\n  protocol_execute_runtime();\n  if (isSysAborted == '\\0') {\n    memset(systemPosition,0,0xc);\n    sys_sync_current_position();\n    systemState = '\\0';\n    if ((homingDirMask & 0x20) == 0) {\n      xDirection = -1;\n    }\n    else {\n      xDirection = '\\x01';\n    }\n    if ((homingDirMask & 0x80) == 0) {\n      yDirection = -1;\n    }\n    else {\n      yDirection = '\\x01';\n    }\n    if ((homingDirMask & 0x200) == 0) {\n      zDirection = -1;\n    }\n    else {\n      zDirection = '\\x01';\n    }\n    tempVar1 = __floatsisf((int)xDirection);\n    inverseFeedRate = __aeabi_fmul(tempVar1,homingPulloff);\n    tempVar1 = __floatsisf((int)yDirection);\n    __aeabi_fmul(tempVar1,homingPulloff);\n    tempVar1 = __floatsisf((int)zDirection);\n    tempVar2 = __aeabi_fmul(tempVar1,homingPulloff);\n    moveInLine((float)tempVar2,(float)((ulonglong)tempVar2 >> 0x20),zCoordinate,feedRate,inverseFeedRate);\n    startCycling();\n    synchronizePlan();\n    sys_sync_current_position();\n    if ((settingsFlags & 8) != 0) {\n      areLimitsEnabled = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_motion_080024c4",
                "invert_feed_rate": "inverseFeedRate",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "z": "zCoordinate",
                "feed_rate": "feedRate",
                "z_dir": "zDirection",
                "y_dir": "yDirection",
                "x_dir": "xDirection",
                "sys.state": "systemState",
                "limits_enabled": "areLimitsEnabled",
                "sys.abort": "isSysAborted",
                "sys.position": "systemPosition",
                "settings.homing_dir_mask": "homingDirMask",
                "settings.homing_pulloff": "homingPulloff",
                "mc_line": "moveInLine",
                "st_cycle_start": "startCycling",
                "plan_synchronize": "synchronizePlan",
                "settings.flags": "settingsFlags"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__floatsisf",
                "sys_sync_current_position",
                "limits_go_home",
                "plan_synchronize",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "st_cycle_start",
                "mc_line",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_execution_080025e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeExecution_080025e8(void)\n\n{\n  if ((executionFlag & 0x10) == 0) {\n    executionFlag = executionFlag | 0x10;\n    stopSpindle();\n    stopCoolant();\n    if (systemState - 3 < 3) {\n      executionFlag = executionFlag | 0x20;\n      goIdle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_execution_080025e8",
                "sys.execute": "executionFlag",
                "spindle_stop": "stopSpindle",
                "coolant_stop": "stopCoolant",
                "sys.state": "systemState",
                "st_go_idle": "goIdle"
            },
            "calling": [
                "gc_execute_line",
                "limits_isr",
                "protocol_execute_line",
                "serial_rx_hook",
                "buttons_isr"
            ],
            "called": [
                "spindle_stop",
                "st_go_idle",
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_number_from_string_08002638",
            "code": "\nint parse_number_from_string_08002638(char *input_string,uint8_t *char_counter,float *output_float)\n\n{\n  byte is_digit;\n  bool is_negative;\n  bool is_exponent;\n  uchar *current_char;\n  uchar *next_char;\n  int result;\n  undefined8 temp_double;\n  float *local_float_ptr;\n  uint8_t *local_char_counter;\n  char *local_input_string;\n  float parsed_float;\n  _Bool is_decimal;\n  uint8_t num_digits;\n  int8_t exponent;\n  uint32_t integer_value;\n  _Bool is_negative_value;\n  uchar c;\n  char *current_position;\n  \n  next_char = (uchar *)(input_string + *char_counter);\n  current_char = next_char + 1;\n  c = *next_char;\n  is_negative = false;\n  if (c == '-') {\n    is_negative = true;\n    c = *current_char;\n    current_position = (char *)(next_char + 2);\n  }\n  else {\n    current_position = (char *)current_char;\n    if (c == '+') {\n      current_position = (char *)(next_char + 2);\n      c = *current_char;\n    }\n  }\n  integer_value = 0;\n  exponent = '\\0';\n  num_digits = '\\0';\n  is_exponent = false;\n  do {\n    is_digit = c - 0x30;\n    if (is_digit < 10) {\n      num_digits = num_digits + 1;\n      if (num_digits < 9) {\n        if (is_exponent) {\n          exponent = exponent + -1;\n        }\n        integer_value = (uint)is_digit + integer_value * 10;\n      }\n      else if (!is_exponent) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((is_digit != 0xfe) || (is_exponent)) {\n        if (num_digits == '\\0') {\n          result = 0;\n        }\n        else {\n          parsed_float = (float)__floatunsisf(integer_value);\n          result = __aeabi_fcmpeq(parsed_float,0);\n          if (result == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              temp_double = __aeabi_f2d(parsed_float);\n              temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0x47ae147b,0x3f847ae1);\n              parsed_float = (float)__truncdfsf2((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n            }\n            if (exponent < '\\0') {\n              temp_double = __aeabi_f2d(parsed_float);\n              temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0x9999999a,0x3fb99999);\n              parsed_float = (float)__truncdfsf2((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                parsed_float = (float)__aeabi_fmul(parsed_float,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_float = (float)((uint)parsed_float ^ 0x80000000);\n          }\n          else {\n            *output_float = parsed_float;\n          }\n          *char_counter = ((char)current_position - (char)input_string) + 0xff;\n          result = 1;\n        }\n        return result;\n      }\n      is_exponent = true;\n    }\n    c = *current_position;\n    current_position = current_position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_number_from_string_08002638",
                "line": "input_string",
                "float_ptr": "output_float",
                "bVar1": "is_digit",
                "bVar2": "is_negative",
                "bVar3": "is_exponent",
                "puVar4": "current_char",
                "puVar5": "next_char",
                "iVar6": "result",
                "uVar7": "temp_double",
                "float_ptr_local": "local_float_ptr",
                "char_counter_local": "local_char_counter",
                "line_local": "local_input_string",
                "fval": "parsed_float",
                "isdecimal": "is_decimal",
                "ndigit": "num_digits",
                "exp": "exponent",
                "intval": "integer_value",
                "isnegative": "is_negative_value",
                "ptr": "current_position"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "delay_milliseconds_08002814",
            "code": "\nvoid delayMilliseconds_08002814(uint16_t milliseconds)\n\n{\n  uint16_t milliseconds_local;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "delay_milliseconds_08002814",
                "ms": "milliseconds"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "initialize_08002828",
            "code": "\nvoid initialize_08002828(uint32_t user_input)\n\n{\n  uint32_t temp_variable;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "initialize_08002828",
                "us": "user_input",
                "us_local": "temp_variable"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "set_current_position_0800283a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid set_current_position_0800283a(void)\n\n{\n  plan_set_current_position_0800283a(x,y,z);\n  gc_set_current_position_0800283a(x,y,z);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "set_current_position_0800283a",
                "sys.position[0]": "x",
                "sys.position[1]": "y",
                "sys.position[2]": "z"
            },
            "calling": [
                "mc_go_home",
                "grbl_main"
            ],
            "called": [
                "gc_set_current_position",
                "plan_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_reset_block_index_08002870",
            "code": "\nuint8_t incrementAndResetBlockIndex_08002870(uint8_t currentBlockIndex)\n\n{\n  uint8_t updatedBlockIndex;\n  \n  updatedBlockIndex = currentBlockIndex + '\\x01';\n  if (updatedBlockIndex == '\\x12') {\n    updatedBlockIndex = '\\0';\n  }\n  return updatedBlockIndex;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_reset_block_index_08002870",
                "block_index": "currentBlockIndex",
                "block_index_local": "updatedBlockIndex"
            },
            "calling": [
                "plan_reset_buffer",
                "planner_forward_pass",
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "add_and_offset_block_index_08002896",
            "code": "\nuint8_t addAndOffsetBlockIndex_08002896(uint8_t originalBlockIndex)\n\n{\n  uint8_t modifiedBlockIndex;\n  \n  modifiedBlockIndex = originalBlockIndex;\n  if (originalBlockIndex == '\\0') {\n    modifiedBlockIndex = '\\x12';\n  }\n  return modifiedBlockIndex + 0xff;\n}\n\n",
            "renaming": {
                "FUN_08002896": "add_and_offset_block_index_08002896",
                "block_index": "originalBlockIndex",
                "block_index_local": "modifiedBlockIndex"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_acceleration_080028bc",
            "code": "\nfloat calculateAcceleration_080028bc(float initialRate,float targetRate,float acceleration)\n\n{\n  undefined4 initialRate_squared;\n  undefined4 targetRate_squared;\n  undefined4 multipliedTargetRate;\n  undefined4 initialRate_squared;\n  undefined4 acceleration_doubled;\n  float result;\n  float localAcceleration;\n  float localTargetRate;\n  float localInitialRate;\n  \n  targetRate_squared = __aeabi_fmul(initialRate_squared,initialRate_squared);\n  multipliedTargetRate = __aeabi_fmul(initialRate_squared,initialRate_squared);\n  targetRate_squared = __aeabi_fsub(targetRate_squared,multipliedTargetRate);\n  multipliedTargetRate = __addsf3(acceleration_doubled,acceleration_doubled);\n  result = (float)__aeabi_fdiv(targetRate_squared,multipliedTargetRate);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_acceleration_080028bc",
                "initial_rate": "initialRate",
                "target_rate": "targetRate",
                "in_r0": "initialRate_squared",
                "uVar1": "targetRate_squared",
                "uVar2": "multipliedTargetRate",
                "in_r1": "initialRate_squared",
                "in_r2": "acceleration_doubled",
                "fVar3": "result",
                "acceleration_local": "localAcceleration",
                "target_rate_local": "localTargetRate",
                "initial_rate_local": "localInitialRate"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_rate_of_change_08002908",
            "code": "\nfloat calculate_rate_of_change_08002908(float initial_rate,float final_rate,float acceleration,float distance)\n\n{\n  undefined4 initial_rate;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 final_rate;\n  undefined4 acceleration;\n  undefined4 distance;\n  float rate_of_change;\n  float distance;\n  float acceleration;\n  float final_rate;\n  float initial_rate;\n  \n  uVar1 = __addsf3(acceleration,acceleration);\n  uVar1 = __aeabi_fmul(uVar1,distance);\n  uVar2 = __aeabi_fmul(initial_rate,initial_rate);\n  uVar1 = __aeabi_fsub(uVar1,uVar2);\n  uVar2 = __aeabi_fmul(final_rate,final_rate);\n  uVar1 = __addsf3(uVar1,uVar2);\n  uVar2 = __aeabi_fmul(acceleration,0x40800000);\n  rate_of_change = (float)__aeabi_fdiv(uVar1,uVar2);\n  return rate_of_change;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_rate_of_change_08002908",
                "in_r0": "initial_rate",
                "in_r1": "final_rate",
                "in_r2": "acceleration",
                "in_r3": "distance",
                "fVar3": "rate_of_change",
                "distance_local": "distance",
                "acceleration_local": "acceleration",
                "final_rate_local": "final_rate",
                "initial_rate_local": "initial_rate"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_final_velocity_08002978",
            "code": "\n/* WARNING: Variable defined which should be unmapped: distanceTraveled-local */\n\nfloat calculateFinalVelocity_08002978(float initialAcceleration,float desiredVelocity,float distanceTraveled)\n\n{\n  undefined4 tempVar0;\n  undefined4 mulProduct1;\n  undefined4 mulProduct2;\n  undefined4 tempVar1;\n  undefined4 extraOutput;\n  undefined4 tempVar2;\n  float finalVelocity;\n  undefined4 stackVar;\n  float localDistance;\n  float localDesiredVelocity;\n  float localAcceleration;\n  \n  mulProduct1 = __aeabi_fmul(initialAcceleration,tempVar1,tempVar1);\n  mulProduct2 = __addsf3(tempVar0,tempVar0);\n  mulProduct2 = __aeabi_fmul(mulProduct2,tempVar2);\n  mulProduct1 = __aeabi_fsub(mulProduct1,mulProduct2);\n  mulProduct1 = __aeabi_f2d(mulProduct1);\n  sqrt((double)CONCAT44(tempVar2,stackVar));\n  finalVelocity = (float)__truncdfsf2(mulProduct1,extraOutput);\n  return finalVelocity;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_final_velocity_08002978",
                "acceleration": "initialAcceleration",
                "target_velocity": "desiredVelocity",
                "distance": "distanceTraveled",
                "in_r0": "tempVar0",
                "uVar1": "mulProduct1",
                "uVar2": "mulProduct2",
                "in_r1": "tempVar1",
                "extraout_r1": "extraOutput",
                "in_r2": "tempVar2",
                "fVar3": "finalVelocity",
                "uStack_20": "stackVar",
                "distance_local": "localDistance",
                "target_velocity_local": "localDesiredVelocity",
                "acceleration_local": "localAcceleration"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "sqrt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_entry_speed_080029d8",
            "code": "\nvoid updateEntrySpeed_080029d8(block_t *previousBlock,block_t *currentBlock,block_t *nextBlock)\n\n{\n  int comparisonResult;\n  uint accelerationFlag;\n  float newEntrySpeed;\n  float currentAcceleration;\n  float nextAcceleration;\n  float currentTargetVelocity;\n  float nextTargetVelocity;\n  float currentDistance;\n  float nextDistance;\n  block_t *nextBlockLocal;\n  block_t *currentBlockLocal;\n  block_t *previousBlockLocal;\n  \n  if (((currentBlock != (block_t *)0x0) && (nextBlock != (block_t *)0x0)) &&\n     (comparisonResult = __aeabi_fcmpeq(currentBlock->entry_speed,currentBlock->max_entry_speed), comparisonResult == 0)) {\n    if ((currentBlock->nominal_length_flag == '\\0') &&\n       (comparisonResult = __aeabi_fcmpgt(currentBlock->max_entry_speed,nextBlock->entry_speed), comparisonResult != 0)) {\n      newEntrySpeed = currentBlock->max_entry_speed;\n      accelerationFlag = (uint)settings.currentAcceleration ^ 0x80000000;\n      max_allowable_speed(currentAcceleration,currentTargetVelocity,currentDistance);\n      comparisonResult = __aeabi_fcmplt(newEntrySpeed,accelerationFlag);\n      if (comparisonResult == 0) {\n        newEntrySpeed = (float)((uint)settings.currentAcceleration ^ 0x80000000);\n        max_allowable_speed(nextAcceleration,nextTargetVelocity,nextDistance);\n      }\n      else {\n        newEntrySpeed = currentBlock->max_entry_speed;\n      }\n      currentBlock->entry_speed = newEntrySpeed;\n    }\n    else {\n      currentBlock->entry_speed = currentBlock->max_entry_speed;\n    }\n    currentBlock->recalculate_flag = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_entry_speed_080029d8",
                "previous": "previousBlock",
                "current": "currentBlock",
                "next": "nextBlock",
                "iVar1": "comparisonResult",
                "uVar2": "accelerationFlag",
                "fVar3": "newEntrySpeed",
                "acceleration": "currentAcceleration",
                "acceleration_00": "nextAcceleration",
                "target_velocity": "currentTargetVelocity",
                "target_velocity_00": "nextTargetVelocity",
                "distance": "currentDistance",
                "distance_00": "nextDistance",
                "next_local": "nextBlockLocal",
                "current_local": "currentBlockLocal",
                "previous_local": "previousBlockLocal"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq",
                "max_allowable_speed"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "reverse_and_plan_blocks_08002a94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reverseAndPlanBlocks_08002a94(void)\n\n{\n  block_t *nextBlock;\n  block_t *block [3];\n  uint8_t currentIndex;\n  \n  currentIndex = bufferHead;\n  previousBlock = (block_t *)0x0;\n  currentBlock = (block_t *)0x0;\n  while (nextBlock = currentBlock, currentIndex != bufferTail) {\n    currentIndex = getPreviousIndex(currentIndex);\n    currentBlock = previousBlock;\n    plannerReversePassKernel(buffer + currentIndex,previousBlock,nextBlock);\n    previousBlock = buffer + currentIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "reverse_and_plan_blocks_08002a94",
                "block_index": "currentIndex",
                "block[0]": "previousBlock",
                "block[1]": "currentBlock",
                "next": "nextBlock",
                "block_buffer_head": "bufferHead",
                "block_buffer_tail": "bufferTail",
                "block_buffer": "buffer",
                "prev_block_index": "getPreviousIndex",
                "planner_reverse_pass_kernel": "plannerReversePassKernel"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "recalculate_entry_speed_08002afc",
            "code": "\nvoid recalculate_entry_speed_08002afc(block_t *prev_block,block_t *curr_block,block_t *next_block)\n\n{\n  int iVar1;\n  uint uVar2;\n  float fVar3;\n  float acceleration_val;\n  float acceleration_val_00;\n  float target_velocity_val;\n  float target_velocity_val_00;\n  float distance_val;\n  float distance_val_00;\n  block_t *next_local_block;\n  block_t *curr_local_block;\n  block_t *prev_local_block;\n  float entry_speed_val;\n  \n  if (((prev_block != (block_t *)0x0) && (prev_block->nominal_length_flag == '\\0')) &&\n     (iVar1 = __aeabi_fcmplt(prev_block->entry_speed_val,curr_block->entry_speed_val), iVar1 != 0)) {\n    fVar3 = curr_block->entry_speed_val;\n    uVar2 = (uint)settings.acceleration_val ^ 0x80000000;\n    max_allowable_speed(acceleration_val,target_velocity_val,distance_val);\n    iVar1 = __aeabi_fcmplt(fVar3,uVar2);\n    if (iVar1 == 0) {\n      fVar3 = (float)((uint)settings.acceleration_val ^ 0x80000000);\n      max_allowable_speed(acceleration_val_00,target_velocity_val_00,distance_val_00);\n    }\n    else {\n      fVar3 = curr_block->entry_speed_val;\n    }\n    iVar1 = __aeabi_fcmpeq(fVar3,curr_block->entry_speed_val);\n    if (iVar1 == 0) {\n      curr_block->entry_speed_val = fVar3;\n      curr_block->recalculate_flag = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "recalculate_entry_speed_08002afc",
                "previous": "prev_block",
                "current": "curr_block",
                "next": "next_block",
                "acceleration": "acceleration_val",
                "acceleration_00": "acceleration_val_00",
                "target_velocity": "target_velocity_val",
                "target_velocity_00": "target_velocity_val_00",
                "distance": "distance_val",
                "distance_00": "distance_val_00",
                "next_local": "next_local_block",
                "current_local": "curr_local_block",
                "previous_local": "prev_local_block",
                "entry_speed": "entry_speed_val"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "perform_forward_pass_08002ba8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid performForwardPass_08002ba8(void)\n\n{\n  Block *previousBlock;\n  uint blockIndex;\n  Block *blocks [3];\n  uint8_t currentBlockIndex;\n  \n  blocks[1] = (Block *)0x0;\n  blocks[2] = (Block *)0x0;\n  currentBlockIndex = bufferTail;\n  while (previousBlock = blocks[1], currentBlockIndex != bufferHead) {\n    blocks[1] = blocks[2];\n    blockIndex = (uint)currentBlockIndex;\n    forwardPassKernel(previousBlock,blocks[2],blocks_buffer + blockIndex);\n    currentBlockIndex = getNextBlockIndex(currentBlockIndex);\n    blocks[2] = blocks_buffer + blockIndex;\n  }\n  forwardPassKernel(blocks[1],blocks[2],(Block *)0x0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "perform_forward_pass_08002ba8",
                "block_t": "Block",
                "block_index": "currentBlockIndex",
                "previous": "previousBlock",
                "uVar1": "blockIndex",
                "block_buffer_tail": "bufferTail",
                "block_buffer_head": "bufferHead",
                "block": "blocks",
                "planner_forward_pass_kernel": "forwardPassKernel",
                "next_block_index": "getNextBlockIndex"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_08002c18",
            "code": "\n/* WARNING: Variable defined which should be unmapped: exitFactor-local */\n\nvoid calculateAcceleration_08002c18(inputBlock_t *inputBlock,float entryFactor,float exitFactor)\n\n{\n  undefined4 initialRate;\n  uint32_t finalRate;\n  int rateDelta;\n  int decelerateSteps;\n  uint accelerateSteps;\n  undefined4 conversionFactor1;\n  undefined4 conversionFactor2;\n  undefined4 conversionFactor3;\n  undefined4 conversionFactor4;\n  undefined4 conversionFactor5;\n  undefined4 conversionFactor6;\n  undefined4 conversionFactor7;\n  float accelerationFactor1;\n  float accelerationFactor2;\n  float accelerationFactor3;\n  float accelerationDistance;\n  undefined8 tempVar;\n  undefined4 tempStackVar;\n  float exitFactorLocal;\n  float entryFactorLocal;\n  inputBlock_t *inputBlockLocal;\n  int32_t decelerate_steps;\n  int32_t accelerationPerMinute;\n  int32_t plateauSteps;\n  int32_t accelerate_steps;\n  \n  initialRate = __floatunsisf(entryFactor,inputBlock->nominal_rate);\n  initialRate = __aeabi_fmul(initialRate,conversionFactor1);\n  initialRate = __aeabi_f2d(initialRate);\n  ceil((double)CONCAT44(conversionFactor7,tempStackVar));\n  finalRate = __aeabi_d2uiz(initialRate,conversionFactor2);\n  inputBlock->initial_rate = finalRate;\n  initialRate = __floatunsisf(inputBlock->nominal_rate);\n  initialRate = __aeabi_fmul(initialRate,conversionFactor7);\n  initialRate = __aeabi_f2d(initialRate);\n  ceil((double)CONCAT44(conversionFactor7,tempStackVar));\n  finalRate = __aeabi_d2uiz(initialRate,conversionFactor3);\n  inputBlock->final_rate = finalRate;\n  tempVar = __aeabi_i2d(inputBlock->rate_delta * 0x32);\n  tempVar = __muldf3((int)tempVar,(int)((ulonglong)tempVar >> 0x20),0,0x404e0000);\n  rateDelta = __aeabi_d2iz((int)tempVar,(int)((ulonglong)tempVar >> 0x20));\n  initialRate = __floatunsisf(inputBlock->initial_rate);\n  __floatunsisf(inputBlock->nominal_rate);\n  tempVar = __floatsisf(rateDelta);\n  estimate_accelerationFactor1_accelerationDistance((float)tempVar,(float)((ulonglong)tempVar >> 0x20),accelerationFactor1);\n  initialRate = __aeabi_f2d(initialRate);\n  ceil((double)CONCAT44(conversionFactor7,tempStackVar));\n  accelerate_steps = __aeabi_d2iz(initialRate,conversionFactor4);\n  initialRate = __floatunsisf(inputBlock->nominal_rate);\n  __floatunsisf(inputBlock->final_rate);\n  tempVar = __floatsisf(-rateDelta);\n  estimate_accelerationFactor1_accelerationDistance((float)tempVar,(float)((ulonglong)tempVar >> 0x20),accelerationFactor2);\n  initialRate = __aeabi_f2d(initialRate);\n  floor((double)CONCAT44(conversionFactor7,tempStackVar));\n  decelerateSteps = __aeabi_d2iz(initialRate,conversionFactor5);\n  plateauSteps = (inputBlock->step_event_count - accelerate_steps) - decelerateSteps;\n  if (plateauSteps < 0) {\n    initialRate = __floatunsisf(inputBlock->initial_rate);\n    __floatunsisf(inputBlock->final_rate);\n    __floatsisf(rateDelta);\n    tempVar = __floatsisf(inputBlock->step_event_count);\n    intersection_accelerationDistance((float)tempVar,(float)((ulonglong)tempVar >> 0x20),accelerationFactor3,accelerationDistance);\n    initialRate = __aeabi_f2d(initialRate);\n    ceil((double)CONCAT44(conversionFactor7,tempStackVar));\n    accelerateSteps = __aeabi_d2iz(initialRate,conversionFactor6);\n    accelerateSteps = accelerateSteps & ~((int)accelerateSteps >> 0x1f);\n    accelerate_steps = inputBlock->step_event_count;\n    if ((int)accelerateSteps <= inputBlock->step_event_count) {\n      accelerate_steps = accelerateSteps;\n    }\n    plateauSteps = 0;\n  }\n  inputBlock->accelerate_until = accelerate_steps;\n  inputBlock->decelerate_after = plateauSteps + accelerate_steps;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_08002c18",
                "block": "inputBlock",
                "entry_factor": "entryFactor",
                "exit_factor": "exitFactor",
                "uVar1": "initialRate",
                "uVar2": "finalRate",
                "iVar3": "rateDelta",
                "iVar4": "decelerateSteps",
                "uVar5": "accelerateSteps",
                "in_r1": "conversionFactor1",
                "extraout_r1": "conversionFactor2",
                "extraout_r1_00": "conversionFactor3",
                "extraout_r1_01": "conversionFactor4",
                "extraout_r1_02": "conversionFactor5",
                "extraout_r1_03": "conversionFactor6",
                "in_r2": "conversionFactor7",
                "acceleration": "accelerationFactor1",
                "acceleration_00": "accelerationFactor2",
                "acceleration_01": "accelerationFactor3",
                "distance": "accelerationDistance",
                "uVar6": "tempVar",
                "uStack_38": "tempStackVar",
                "exit_factor_local": "exitFactorLocal",
                "entry_factor_local": "entryFactorLocal",
                "block_local": "inputBlockLocal",
                "acceleration_per_minute": "accelerationPerMinute",
                "plateau_steps": "plateauSteps"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "intersection_distance",
                "__floatunsisf",
                "ceil",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "estimate_acceleration_distance",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_block_trapezoids_08002e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid calculate_block_trapezoids_08002e08(void)\n\n{\n  uint uVar1;\n  undefined8 uVar2;\n  block_t *current_block;\n  block_t *next_block;\n  uint8_t block_buffer_index;\n  \n  next_block = (block_t *)0x0;\n  block_buffer_index = buffer_tail;\n  while (block_buffer_index != buffer_head) {\n    uVar1 = (uint)block_buffer_index;\n    if ((next_block != (block_t *)0x0) &&\n       ((next_block->flag != '\\0' || (buffer[uVar1].flag != '\\0')))) {\n      divide(next_block->entry_speed,next_block->nominal_speed);\n      uVar2 = divide(buffer[uVar1].entry_speed,next_block->nominal_speed);\n      calculate_trapezoid(next_block,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n      next_block->flag = '\\0';\n    }\n    block_buffer_index = get_next_block_index(block_buffer_index);\n    next_block = buffer + uVar1;\n  }\n  divide(next_block->entry_speed,next_block->nominal_speed);\n  uVar2 = divide(0,next_block->nominal_speed);\n  calculate_trapezoid(next_block,(float)uVar2,(float)((ulonglong)uVar2 >> 0x20));\n  next_block->flag = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_block_trapezoids_08002e08",
                "current": "current_block",
                "next": "next_block",
                "block_index": "block_buffer_index",
                "block_buffer_tail": "buffer_tail",
                "block_buffer_head": "buffer_head",
                "block_buffer": "buffer",
                "recalculate_flag": "flag",
                "__aeabi_fdiv": "divide",
                "calculate_trapezoid_for_block": "calculate_trapezoid",
                "next_block_index": "get_next_block_index"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "optimize_planner_08002edc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid optimize_planner_08002edc(void)\n\n{\n  perform_reverse_pass();\n  perform_forward_pass();\n  recalculate_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "optimize_planner_08002edc",
                "planner_reverse_pass": "perform_reverse_pass",
                "planner_forward_pass": "perform_forward_pass",
                "planner_recalculate_trapezoids": "recalculate_trapezoids"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_reverse_pass",
                "planner_recalculate_trapezoids",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_block_buffer_08002ef0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateBlockBuffer_08002ef0(void)\n\n{\n  previousBlockBuffer = currentBlockBuffer;\n  nextBlockBufferHead = calculateNextBlockIndex(currentBlockBuffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_block_buffer_08002ef0",
                "block_buffer_tail": "previousBlockBuffer",
                "block_buffer_head": "currentBlockBuffer",
                "next_buffer_head": "nextBlockBufferHead",
                "next_block_index": "calculateNextBlockIndex"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_buffer_08002f24(void)\n\n{\n  reset_buffer();\n  memset(&buffer,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24",
                "pl": "buffer",
                "plan_reset_buffer": "reset_buffer"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_buffer_tail_08002f40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_block_buffer_tail_08002f40(void)\n\n{\n  if (head_index != tail_index) {\n    tail_index = get_next_index(tail_index);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_buffer_tail_08002f40",
                "block_buffer_head": "head_index",
                "block_buffer_tail": "tail_index",
                "next_block_index": "get_next_index"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_next_block_08002f74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nblock_t * get_next_block_08002f74(void)\n\n{\n  block_t *next_block;\n  \n  if (buffer_head == buffer_tail) {\n    next_block = (block_t *)0x0;\n  }\n  else {\n    next_block = buffer + buffer_tail;\n  }\n  return next_block;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_next_block_08002f74",
                "pbVar1": "next_block",
                "block_buffer_head": "buffer_head",
                "block_buffer_tail": "buffer_tail",
                "block_buffer": "buffer"
            },
            "calling": [
                "plan_synchronize",
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_buffer_availability_08002fac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t checkBufferAvailability_08002fac(void)\n\n{\n  return block_buffer_tail == next_buffer_head;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_buffer_availability_08002fac"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_protocol_08002fd4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_protocol_08002fd4(void)\n\n{\n  block_t *current_block;\n  \n  while ((current_block = get_current_block(), current_block != (block_t *)0x0 || (system_state.state == '\\x03'))) {\n    execute_protocol_08002fd4_runtime();\n    if (system_state.abort != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_protocol_08002fd4",
                "pbVar1": "current_block",
                "plan_get_current_block": "get_current_block",
                "sys": "system_state",
                "protocol_execute_runtime": "execute_protocol_runtime"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "mc_dwell",
                "coolant_run",
                "spindle_run"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_block_properties_08003004",
            "code": "\n/* WARNING: Variable defined which should be unmapped: feedRate-local */\n\nvoid calculateBlockProperties_08003004(float targetX,float targetY,float targetZ,float feedRate,uint8_t invertFeedRate)\n\n{\n  undefined4 targetXFloatMul;\n  long lVar2;\n  long lVar3;\n  long lVar4;\n  undefined4 targetYFloatMul;\n  undefined4 targetZFloatMul;\n  undefined4 squareSum;\n  undefined4 accelerationDivisor;\n  float millimeters;\n  int32_t rateDelta;\n  float targetXFloatMulResult;\n  float targetYFloatMulResult;\n  float targetZFloatMulResult;\n  int conditionCheck;\n  float negativeAcceleration;\n  undefined4 in_r1;\n  undefined4 etargetXtraout_r1;\n  undefined4 etargetXtraout_r1_00;\n  undefined4 etargetXtraout_r1_01;\n  undefined4 etargetXtraout_r1_02;\n  undefined4 etargetXtraout_r1_03;\n  undefined4 etargetXtraout_r1_04;\n  undefined4 in_r2;\n  uint stepsZ;\n  undefined4 in_r3;\n  uint blockBufferHead;\n  block_t *currentBlock;\n  uint32_t nominalRate;\n  uint stepsY;\n  undefined8 etargetXtraout_d0;\n  undefined8 etargetXtraout_d0_00;\n  undefined8 etargetXtraout_d0_01;\n  undefined8 etargetXtraout_d0_02;\n  undefined8 etargetXtraout_d0_03;\n  undefined8 etargetXtraout_d0_04;\n  float etargetXtraout_s2;\n  float etargetXtraout_s2_00;\n  float etargetXtraout_s2_01;\n  float etargetXtraout_s2_02;\n  float etargetXtraout_s2_03;\n  float etargetXtraout_s2_04;\n  undefined8 unitVectorXYMul;\n  undefined8 inverseDeviation;\n  undefined8 unitVectorXYDiv;\n  char in_stack_00000000;\n  float localFeedRate;\n  float localZ;\n  float localY;\n  float localX;\n  float unitVector [3];\n  float deltaMillimeters [3];\n  int32_t targetPosition [3];\n  float allowableVelocity;\n  float sineThetaD2;\n  float cosineTheta;\n  float inverseMillimeters;\n  block_t *block;\n  float junctionVelocity;\n  float inverseMinute;\n  \n  blockBufferHead = (uint)block_buffer_head;\n  currentBlock = block_buffer + blockBufferHead;\n  targetXFloatMul = __aeabi_fmul(targetX,settings.steps_per_mm[0],invertFeedRate);\n  __aeabi_f2d(targetXFloatMul);\n  lVar2 = lround((double)CONCAT44(in_r2,in_r3));\n  targetXFloatMul = __aeabi_fmul(settings.steps_per_mm[1],in_r1);\n  __aeabi_f2d(targetXFloatMul);\n  lVar3 = lround((double)CONCAT44(in_r2,in_r3));\n  targetXFloatMul = __aeabi_fmul(settings.steps_per_mm[2],in_r2);\n  __aeabi_f2d(targetXFloatMul);\n  lVar4 = lround((double)CONCAT44(in_r2,in_r3));\n  currentBlock->direction_bits = 0;\n  if (lVar2 < pl.position[0]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0targetX20;\n  }\n  if (lVar3 < pl.position[1]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0targetX880;\n  }\n  if (lVar4 < pl.position[2]) {\n    currentBlock->direction_bits = currentBlock->direction_bits | 0targetX200;\n  }\n  nominalRate = lVar2 - pl.position[0];\n  if ((int)nominalRate < 0) {\n    nominalRate = -nominalRate;\n  }\n  block_buffer[blockBufferHead].steps_targetX = nominalRate;\n  nominalRate = lVar3 - pl.position[1];\n  if ((int)nominalRate < 0) {\n    nominalRate = -nominalRate;\n  }\n  block_buffer[blockBufferHead].steps_targetY = nominalRate;\n  nominalRate = lVar4 - pl.position[2];\n  if ((int)nominalRate < 0) {\n    nominalRate = -nominalRate;\n  }\n  block_buffer[blockBufferHead].steps_targetZ = nominalRate;\n  stepsZ = block_buffer[blockBufferHead].steps_targetZ;\n  if (block_buffer[blockBufferHead].steps_targetZ < block_buffer[blockBufferHead].steps_targetY) {\n    stepsZ = block_buffer[blockBufferHead].steps_targetY;\n  }\n  stepsY = block_buffer[blockBufferHead].steps_targetX;\n  if (block_buffer[blockBufferHead].steps_targetX < stepsZ) {\n    stepsY = stepsZ;\n  }\n  block_buffer[blockBufferHead].step_event_count = stepsY;\n  if (block_buffer[blockBufferHead].step_event_count != 0) {\n    targetXFloatMul = __floatsisf(lVar2 - pl.position[0]);\n    targetXFloatMul = __aeabi_fdiv(targetXFloatMul,settings.steps_per_mm[0]);\n    targetYFloatMul = __floatsisf(lVar3 - pl.position[1]);\n    targetYFloatMul = __aeabi_fdiv(targetYFloatMul,settings.steps_per_mm[1]);\n    targetZFloatMul = __floatsisf(lVar4 - pl.position[2]);\n    targetZFloatMul = __aeabi_fdiv(targetZFloatMul,settings.steps_per_mm[2]);\n    squareSum = __aeabi_fmul(targetXFloatMul,targetXFloatMul);\n    accelerationDivisor = __aeabi_fmul(targetYFloatMul,targetYFloatMul);\n    squareSum = __addsf3(squareSum,accelerationDivisor);\n    accelerationDivisor = __aeabi_fmul(targetZFloatMul,targetZFloatMul);\n    squareSum = __addsf3(squareSum,accelerationDivisor);\n    squareSum = __aeabi_f2d(squareSum);\n    sqrt((double)CONCAT44(in_r2,in_r3));\n    millimeters = (float)__truncdfsf2(squareSum,etargetXtraout_r1);\n    block_buffer[blockBufferHead].millimeters = millimeters;\n    squareSum = __aeabi_fdiv(0targetX3f800000,block_buffer[blockBufferHead].millimeters);\n    if (in_stack_00000000 == '\\0') {\n      inverseMinute = (float)__aeabi_fmul(in_r3,squareSum);\n    }\n    else {\n      inverseMinute = (float)__aeabi_fdiv(0targetX3f800000,in_r3);\n    }\n    millimeters = (float)__aeabi_fmul(block_buffer[blockBufferHead].millimeters,inverseMinute);\n    block_buffer[blockBufferHead].nominal_speed = millimeters;\n    accelerationDivisor = __floatsisf(block_buffer[blockBufferHead].step_event_count);\n    accelerationDivisor = __aeabi_fmul(accelerationDivisor,inverseMinute);\n    accelerationDivisor = __aeabi_f2d(accelerationDivisor);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    nominalRate = __aeabi_d2uitargetZ(accelerationDivisor,etargetXtraout_r1_00);\n    block_buffer[blockBufferHead].nominal_rate = nominalRate;\n    accelerationDivisor = __floatsisf(block_buffer[blockBufferHead].step_event_count);\n    accelerationDivisor = __aeabi_fmul(accelerationDivisor,squareSum);\n    accelerationDivisor = __aeabi_fmul(accelerationDivisor,settings.acceleration);\n    accelerationDivisor = __aeabi_fdiv(accelerationDivisor,0targetX453b8000);\n    accelerationDivisor = __aeabi_f2d(accelerationDivisor);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    rateDelta = __aeabi_d2itargetZ(accelerationDivisor,etargetXtraout_r1_01);\n    block_buffer[blockBufferHead].rate_delta = rateDelta;\n    targetXFloatMulResult = (float)__aeabi_fmul(targetXFloatMul,squareSum);\n    targetYFloatMulResult = (float)__aeabi_fmul(targetYFloatMul,squareSum);\n    targetZFloatMulResult = (float)__aeabi_fmul(targetZFloatMul,squareSum);\n    junctionVelocity = 0.0;\n    unitVectorXYMul = etargetXtraout_d0;\n    millimeters = etargetXtraout_s2;\n    if ((block_buffer_head != block_buffer_tail) &&\n       (conditionCheck = __aeabi_fcmpgt(pl.previous_nominal_speed,0), unitVectorXYMul = etargetXtraout_d0_00,\n       millimeters = etargetXtraout_s2_00, conditionCheck != 0)) {\n      targetXFloatMul = __aeabi_fmul((uint)pl.previous_unitVector[0] ^ 0targetX80000000,targetXFloatMulResult);\n      targetYFloatMul = __aeabi_fmul(pl.previous_unitVector[1],targetYFloatMulResult);\n      targetXFloatMul = __aeabi_fsub(targetXFloatMul,targetYFloatMul);\n      targetYFloatMul = __aeabi_fmul(pl.previous_unitVector[2],targetZFloatMulResult);\n      targetXFloatMul = __aeabi_fsub(targetXFloatMul,targetYFloatMul);\n      unitVectorXYMul = __aeabi_f2d(targetXFloatMul);\n      conditionCheck = __aeabi_dcmplt((int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20),0targetX66666666,0targetX3fee6666);\n      unitVectorXYMul = etargetXtraout_d0_01;\n      millimeters = etargetXtraout_s2_01;\n      if (conditionCheck != 0) {\n        conditionCheck = __aeabi_fcmplt(pl.previous_nominal_speed,block_buffer[blockBufferHead].nominal_speed);\n        junctionVelocity = pl.previous_nominal_speed;\n        if (conditionCheck == 0) {\n          junctionVelocity = block_buffer[blockBufferHead].nominal_speed;\n        }\n        unitVectorXYMul = __aeabi_f2d(targetXFloatMul);\n        conditionCheck = __aeabi_dcmpgt((int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20),0targetX66666666,0targetXbfee6666);\n        unitVectorXYMul = etargetXtraout_d0_02;\n        millimeters = etargetXtraout_s2_02;\n        if (conditionCheck != 0) {\n          unitVectorXYMul = __aeabi_f2d(targetXFloatMul);\n          unitVectorXYMul = __subdf3(0,0targetX3ff00000,(int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20));\n          targetXFloatMul = __muldf3((int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20),0,0targetX3fe00000);\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          targetXFloatMul = __truncdfsf2(targetXFloatMul,etargetXtraout_r1_02);\n          unitVectorXYMul = __aeabi_f2d(junctionVelocity);\n          targetYFloatMul = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n          targetYFloatMul = __aeabi_fmul(targetYFloatMul,targetXFloatMul);\n          inverseDeviation = __aeabi_f2d(targetYFloatMul);\n          unitVectorXYDiv = __aeabi_f2d(targetXFloatMul);\n          unitVectorXYDiv = __subdf3(0,0targetX3ff00000,(int)unitVectorXYDiv,(int)((ulonglong)unitVectorXYDiv >> 0targetX20));\n          targetYFloatMul = __divdf3((int)inverseDeviation,(int)((ulonglong)inverseDeviation >> 0targetX20),(int)unitVectorXYDiv,\n                           (int)((ulonglong)unitVectorXYDiv >> 0targetX20));\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          conditionCheck = __aeabi_dcmplt((int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20),targetYFloatMul,etargetXtraout_r1_03)\n          ;\n          unitVectorXYMul = etargetXtraout_d0_03;\n          millimeters = etargetXtraout_s2_03;\n          if (conditionCheck == 0) {\n            targetYFloatMul = __aeabi_fmul(settings.acceleration,settings.junction_deviation);\n            targetYFloatMul = __aeabi_fmul(targetYFloatMul,targetXFloatMul);\n            unitVectorXYMul = __aeabi_f2d(targetYFloatMul);\n            inverseDeviation = __aeabi_f2d(targetXFloatMul);\n            inverseDeviation = __subdf3(0,0targetX3ff00000,(int)inverseDeviation,(int)((ulonglong)inverseDeviation >> 0targetX20));\n            targetXFloatMul = __divdf3((int)unitVectorXYMul,(int)((ulonglong)unitVectorXYMul >> 0targetX20),(int)inverseDeviation,\n                             (int)((ulonglong)inverseDeviation >> 0targetX20));\n            sqrt((double)CONCAT44(in_r2,in_r3));\n            junctionVelocity = (float)__truncdfsf2(targetXFloatMul,etargetXtraout_r1_04);\n            unitVectorXYMul = etargetXtraout_d0_04;\n            millimeters = etargetXtraout_s2_04;\n          }\n        }\n      }\n    }\n    block_buffer[blockBufferHead].matargetX_entrtargetY_speed = junctionVelocity;\n    negativeAcceleration = (float)((uint)settings.acceleration ^ 0targetX80000000);\n    matargetX_allowable_speed((float)unitVectorXYMul,(float)((ulonglong)unitVectorXYMul >> 0targetX20),millimeters);\n    conditionCheck = __aeabi_fcmplt(junctionVelocity,negativeAcceleration);\n    millimeters = negativeAcceleration;\n    if (conditionCheck != 0) {\n      millimeters = junctionVelocity;\n    }\n    block_buffer[blockBufferHead].entrtargetY_speed = millimeters;\n    conditionCheck = __aeabi_fcmpge(negativeAcceleration,block_buffer[blockBufferHead].nominal_speed);\n    if (conditionCheck == 0) {\n      block_buffer[blockBufferHead].nominal_length_flag = '\\0';\n    }\n    else {\n      block_buffer[blockBufferHead].nominal_length_flag = '\\targetX01';\n    }\n    block_buffer[blockBufferHead].recalculate_flag = '\\targetX01';\n    pl.previous_nominal_speed = block_buffer[blockBufferHead].nominal_speed;\n    block_buffer_head = netargetXt_buffer_head;\n    pl.previous_unitVector[0] = targetXFloatMulResult;\n    pl.previous_unitVector[1] = targetYFloatMulResult;\n    pl.previous_unitVector[2] = targetZFloatMulResult;\n    netargetXt_buffer_head = netargetXt_block_indetargetX(netargetXt_buffer_head);\n    pl.position[0] = lVar2;\n    pl.position[1] = lVar3;\n    pl.position[2] = lVar4;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_block_properties_08003004",
                "x": "targetX",
                "y": "targetY",
                "z": "targetZ",
                "feed_rate": "feedRate",
                "invert_feed_rate": "invertFeedRate",
                "feed_rate_local": "localFeedRate",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX",
                "unit_vec": "unitVector",
                "delta_mm": "deltaMillimeters",
                "target": "targetPosition",
                "v_allowable": "allowableVelocity",
                "sin_theta_d2": "sineThetaD2",
                "cos_theta": "cosineTheta",
                "inverse_millimeters": "inverseMillimeters",
                "pbVar18": "currentBlock",
                "uVar19": "nominalRate",
                "uVar20": "stepsY",
                "vmax_junction": "junctionVelocity",
                "inverse_minute": "inverseMinute",
                "uVar1": "targetXFloatMul",
                "uVar5": "targetYFloatMul",
                "uVar6": "targetZFloatMul",
                "uVar7": "squareSum",
                "uVar8": "accelerationDivisor",
                "fVar9": "millimeters",
                "fVar11": "targetXFloatMulResult",
                "fVar12": "targetYFloatMulResult",
                "fVar13": "targetZFloatMulResult",
                "iVar10": "rateDelta",
                "uVar16": "stepsZ",
                "uVar17": "blockBufferHead",
                "uVar21": "unitVectorXYMul",
                "uVar22": "inverseDeviation",
                "uVar23": "unitVectorXYDiv",
                "fVar15": "negativeAcceleration",
                "iVar14": "conditionCheck"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "__floatsisf",
                "__muldf3",
                "__truncdfsf2",
                "sqrt",
                "__aeabi_d2uiz",
                "__aeabi_fdiv",
                "lround",
                "planner_recalculate",
                "__subdf3",
                "max_allowable_speed",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_dcmplt",
                "__aeabi_fmul",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "next_block_index",
                "__aeabi_d2iz",
                "__divdf3",
                "__aeabi_fcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "set_player_position_080035ec",
            "code": "\nvoid setPlayerPosition_080035ec(int32_t playerPositionX,int32_t playerPositionY,int32_t playerPositionZ)\n\n{\n  int32_t localZ;\n  int32_t localY;\n  int32_t localX;\n  \n  pl.position[0] = playerPositionX;\n  pl.position[1] = playerPositionY;\n  pl.position[2] = playerPositionZ;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "set_player_position_080035ec",
                "x": "playerPositionX",
                "y": "playerPositionY",
                "z": "playerPositionZ",
                "z_local": "localZ",
                "y_local": "localY",
                "x_local": "localX"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_block_buffer_08003618",
            "code": "\nvoid updateBlockBuffer_08003618(int32_t remainingStepEvents)\n\n{\n  undefined4 mmPerStep;\n  undefined4 stepEventCount;\n  uint tailIndex;\n  float currentMillimeters;\n  int32_t localRemainingStepEvents;\n  currentBlock_t *currentBlock;\n  \n  tailIndex = (uint)currentBlock_buffer_tail;\n  currentMillimeters = currentBlock_buffer[tailIndex].millimeters;\n  mmPerStep = __floatsisf(remainingStepEvents);\n  mmPerStep = __aeabi_fmul(currentMillimeters,mmPerStep);\n  stepEventCount = __floatsisf(currentBlock_buffer[tailIndex].step_event_count);\n  currentMillimeters = (float)__aeabi_fdiv(mmPerStep,stepEventCount);\n  currentBlock_buffer[tailIndex].millimeters = currentMillimeters;\n  currentBlock_buffer[tailIndex].step_event_count = remainingStepEvents;\n  currentBlock_buffer[tailIndex].entry_speed = 0.0;\n  currentBlock_buffer[tailIndex].max_entry_speed = 0.0;\n  currentBlock_buffer[tailIndex].nominal_length_flag = '\\0';\n  currentBlock_buffer[tailIndex].recalculate_flag = '\\x01';\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_block_buffer_08003618",
                "step_events_remaining": "remainingStepEvents",
                "uVar1": "mmPerStep",
                "uVar2": "stepEventCount",
                "uVar3": "tailIndex",
                "fVar4": "currentMillimeters",
                "step_events_remaining_local": "localRemainingStepEvents",
                "block": "currentBlock"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "print_string_0800369c",
            "code": "\nvoid print_string_0800369c(char *string_to_print)\n\n{\n  char *current_character;\n  \n  current_character = string_to_print;\n  while (*current_character != '\\0') {\n    string_to_printerial_write(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "s": "string_to_print",
                "s_local": "current_character"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_serial_080036c6",
            "code": "\nvoid print_serial_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    stringerial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_serial_080036c6",
                "s": "string",
                "s_local": "current_char"
            },
            "calling": [
                "report_status_message",
                "report_grbl_help",
                "report_init_message",
                "report_grbl_settings",
                "report_feedback_message",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters",
                "report_startup_line",
                "report_alarm_message"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_080036f0",
            "code": "\nvoloop_counterd print_binary_080036f0(uloop_counterdecimal_numbert decimal_number,loop_counterdecimal_numbert num_bits)\n\n{\n  uloop_counterdecimal_numbert8_t binary_digit;\n  loop_counterdecimal_numbert num_bits_local;\n  uloop_counterdecimal_numbert decimal_number_local;\n  loop_counterdecimal_numbert loop_counter;\n  uloop_counterdecimal_numbert32_t bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (loop_counter = 0; loop_counter < num_bits; loop_counter = loop_counter + 1) {\n    loop_counterf ((bit_mask & decimal_number) == 0) {\n      binary_digit = '0';\n    }\n    else {\n      binary_digit = '1';\n    }\n    serloop_counteral_wrloop_counterte(binary_digit);\n    bit_mask = bit_mask >> 1;\n  }\n  returdecimal_number;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_080036f0",
                "n": "decimal_number",
                "bits": "num_bits",
                "data": "binary_digit",
                "bits_local": "num_bits_local",
                "n_local": "decimal_number_local",
                "i": "loop_counter",
                "mask": "bit_mask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_number_08003740",
            "code": "\nvoid print_binary_number_08003740(uinumbert8_t number)\n\n{\n  uinumbert8_t number_local;\n  \n  prinumbert_base2((uinumbert)number,8);\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_number_08003740",
                "n": "number"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_base2_with_prefix_0800375c",
            "code": "\nvoid print_base2_with_prefix_0800375c(uinumbert16_t number)\n\n{\n  uinumbert16_t local_number;\n  \n  prinumbert_base2((uinumbert)number,0x10);\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_base2_with_prefix_0800375c",
                "n": "number",
                "n_local": "local_number"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_digits_08003778",
            "code": "\nvoindexd print_digits_08003778(ulonumberg number)\n\n{\n  uindexnumbert temp;\n  ulonumberg local_number;\n  uindexnumbert8_t stack_variable;\n  uchar buffer [10];\n  uindexnumbert8_t index;\n  \n  index = '\\0';\n  local_number = number;\n  indexf (number == 0) {\n    serindexal_wrindexte('0');\n  }\n  else {\n    for (; local_number != 0; local_number = local_number / 10) {\n      temp = (uindexnumbert)index;\n      index = index + '\\x01';\n      buffer[temp] = (char)(local_number % 10) + '0';\n    }\n    for (; index != '\\0'; index = index + 0xff) {\n      serindexal_wrindexte(buffer[index - 1]);\n    }\n  }\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_digits_08003778",
                "n": "number",
                "uVar1": "temp",
                "n_local": "local_number",
                "uStack_15": "stack_variable",
                "buf": "buffer",
                "i": "index"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_signed_integer_080037fc",
            "code": "\nvoid print_signed_integer_080037fc(lonumberg number)\n\n{\n  lonumberg absolute_number;\n  \n  absolute_number = number;\n  if (number < 0) {\n    serial_write('-');\n    absolute_number = -number;\n  }\n  prinumbert_uinumbert32_base10(absolute_number);\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_signed_integer_080037fc",
                "n": "number",
                "n_local": "absolute_number"
            },
            "calling": [
                "report_grbl_settings",
                "report_gcode_modes",
                "report_startup_line"
            ],
            "called": [
                "serial_write",
                "print_uint32_base10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "format_float_08003826",
            "code": "\nvodigitPositiond formatFloat_08003826(float n)\n\n{\n  float input;\n  digitPositionnt isNegative;\n  undefdigitPositionned4 roundedValue;\n  byte decimalDigit;\n  udigitPositionnt index;\n  float normalizedInput;\n  udigitPositionnt8_t tempStack;\n  uchar buffer [10];\n  udigitPositionnt32_t a;\n  udigitPositionnt8_t digitPosition;\n  udigitPositionnt8_t numDecimals;\n  \n  isNegative = __aeabdigitPosition_fcmplt(input,0);\n  normalizedInput = input;\n  digitPositionf (isNegative != 0) {\n    serdigitPositional_wrdigitPositionte('-');\n    normalizedInput = (float)((udigitPositionnt)input ^ 0x80000000);\n  }\n  for (numDecimals = settdigitPositionngs.decdigitPositionmal_places; 1 < numDecimals; numDecimals = numDecimals + 0xfe) {\n    normalizedInput = (float)__aeabdigitPosition_fmul(normalizedInput,0x42c80000);\n  }\n  digitPositionf (numDecimals != '\\0') {\n    normalizedInput = (float)__aeabdigitPosition_fmul(normalizedInput,0x41200000);\n  }\n  roundedValue = __addsf3(normalizedInput,0x3f000000);\n  digitPosition = '\\0';\n  a = __aeabdigitPosition_f2digitPositionz(roundedValue);\n  buffer[settdigitPositionngs.decdigitPositionmal_places] = '.';\n  for (; a != 0; a = a / 10) {\n    digitPositionf (digitPosition == settdigitPositionngs.decdigitPositionmal_places) {\n      digitPosition = digitPosition + '\\x01';\n    }\n    index = (udigitPositionnt)digitPosition;\n    digitPosition = digitPosition + '\\x01';\n    buffer[index] = (char)(a % 10) + '0';\n  }\n  whdigitPositionle (digitPosition < settdigitPositionngs.decdigitPositionmal_places) {\n    index = (udigitPositionnt)digitPosition;\n    digitPosition = digitPosition + '\\x01';\n    buffer[index] = '0';\n  }\n  digitPositionf (digitPosition == settdigitPositionngs.decdigitPositionmal_places) {\n    decimalDigit = digitPosition + 1;\n    digitPosition = digitPosition + '\\x02';\n    buffer[decimalDigit] = '0';\n  }\n  for (; digitPosition != '\\0'; digitPosition = digitPosition + 0xff) {\n    serdigitPositional_wrdigitPositionte(buffer[digitPosition - 1]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "format_float_08003826",
                "in_r0": "input",
                "iVar1": "isNegative",
                "uVar2": "roundedValue",
                "bVar3": "decimalDigit",
                "uVar4": "index",
                "n_local": "normalizedInput",
                "uStack_1d": "tempStack",
                "buf": "buffer",
                "i": "digitPosition",
                "decimals": "numDecimals"
            },
            "calling": [
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes",
                "report_gcode_parameters"
            ],
            "called": [
                "serial_write",
                "__addsf3",
                "__aeabi_f2iz",
                "__aeabi_fcmplt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_08003980",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_08003980(void)\n\n{\n  counter = '\\0';\n  comment_flag = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_08003980",
                "char_counter": "counter",
                "iscomment": "comment_flag"
            },
            "calling": [
                "protocol_init",
                "protocol_process"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_user_interface_080039a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUserInterface_080039a0(void)\n\n{\n  resetProtocolLineBuffer();\n  displayInitializationMessage();\n  areButtonsEnabled = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_user_interface_080039a0",
                "protocol_reset_line_buffer": "resetProtocolLineBuffer",
                "report_init_message": "displayInitializationMessage",
                "buttons_enabled": "areButtonsEnabled"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\n/* WARNING: Uindexkindexowindex calliindexg coindexveindextioindex */\n\nvoid process_startup_lines_080039bc(void)\n\n{\n  uiindext8_t status;\n  uiindext8_t index;\n  \n  for (index = '\\0'; index < 2; index = index + '\\x01') {\n    status = settiindexgs_read_startup_startup_line(index,startup_line);\n    if (status == '\\0') {\n      report_status_message('\\index');\n    }\n    else if (startup_line[0] != '\\0') {\n      priindextStriindexg(startup_line);\n      status = gc_execute_startup_line(startup_line);\n      report_status_message(status);\n    }\n  }\n  returindex;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "n": "index",
                "uVar1": "status",
                "line": "startup_line"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line"
            ],
            "called": [
                "gc_execute_line",
                "report_status_message",
                "printString",
                "settings_read_startup_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "handle_button_press_08003a18",
            "code": "\nvoid handleButtonPress_08003a18(uint32_t buttonState)\n\n{\n  uint32_t localButtonState;\n  \n  if ((buttonState & 0x80) == 0) {\n    if ((buttonState & 0x40) == 0) {\n      if ((buttonState & 0x20) != 0) {\n        sys.execute = sys.execute | 2;\n      }\n    }\n    else {\n      sys.execute = sys.execute | 8;\n    }\n  }\n  else {\n    mc_reset();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "handle_button_press_08003a18",
                "buttons": "buttonState",
                "buttons_local": "localButtonState"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "execute_system_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n/* WARNING: Unknown calling convention */\n\nvoid executeSystem_08003a74(void)\n\n{\n  uint8_t currentState;\n  uint8_t executeFlag;\n  \n  currentState = sys.execute;\n  if (sys.execute != '\\0') {\n    if ((sys.execute & 0x60) != 0) {\n      sys.state = '\\x06';\n      if ((sys.execute & 0x40) != 0) {\n        report_alarm_message(-1);\n        report_feedback_message('\\x01');\n        do {\n        } while( true );\n      }\n      report_alarm_message(-2);\n      sys.execute = sys.execute & 0x9f;\n    }\n    if ((currentState & 0x10) == 0) {\n      if ((currentState & 1) != 0) {\n        report_realtime_status();\n        sys.execute = sys.execute & 0xfe;\n      }\n      if ((currentState & 8) != 0) {\n        st_feed_hold();\n        sys.execute = sys.execute & 0xf7;\n      }\n      if ((currentState & 4) != 0) {\n        st_cycle_reinitialize();\n        sys.execute = sys.execute & 0xfb;\n      }\n      if ((currentState & 2) != 0) {\n        st_cycle_start();\n        if ((settings.flags & 2) != 0) {\n          sys.auto_start = '\\x01';\n        }\n        sys.execute = sys.execute & 0xfd;\n      }\n    }\n    else {\n      sys.abort = '\\x01';\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "execute_system_08003a74",
                "uVar1": "currentState",
                "rt_exec": "executeFlag"
            },
            "calling": [
                "mc_go_home",
                "grbl_main",
                "plan_synchronize",
                "mc_dwell",
                "protocol_process",
                "mc_line"
            ],
            "called": [
                "report_feedback_message",
                "st_feed_hold",
                "report_realtime_status",
                "st_cycle_start",
                "report_alarm_message",
                "st_cycle_reinitialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_line_08003b98",
            "code": "\n/* WARNING: Variable defined which should be unmapped: inputLine-local */\n\nuint8_t processLine_08003b98(char *inputLine)\n\n{\n  byte tempByte;\n  uint8_t status;\n  int result;\n  undefined4 tempFloat;\n  undefined4 tempFloat2;\n  uint tempUint;\n  float floatValue;\n  undefined4 floatStack;\n  char *tempLine;\n  float gcodeValue;\n  float gcodeParameter;\n  uint8_t characterCounter;\n  uint8_t helper;\n  \n  if (*inputLine != '$') {\n    status = executeGcLine(inputLine);\n    return status;\n  }\n  characterCounter = '\\x01';\n  helper = '\\0';\n  tempByte = inputLine[1];\n  if (tempByte == 0) {\n    reportGrblHelp();\n    return '\\0';\n  }\n  if ((0x58 < tempByte) || (tempByte < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(tempByte) {\n  case 0x23:\n    characterCounter = '\\x02';\n    if (inputLine[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGcodeParameters();\n    break;\n  case 0x24:\n    characterCounter = '\\x02';\n    if (inputLine[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGrblSettings();\n    break;\n  case 0x43:\n    characterCounter = '\\x02';\n    if (inputLine[2] != '\\0') {\n      return '\\x03';\n    }\n    if (systemState == '\\a') {\n      resetMotionController();\n      reportFeedbackMessage('\\x05');\n    }\n    else {\n      if (systemState != '\\0') {\n        return '\\v';\n      }\n      systemState = '\\a';\n      reportFeedbackMessage('\\x04');\n    }\n    break;\n  case 0x47:\n    characterCounter = '\\x02';\n    if (inputLine[2] != '\\0') {\n      return '\\x03';\n    }\n    reportGcodeModes();\n    break;\n  case 0x48:\n    if ((settingsFlags & 0x10) == 0) {\n      return '\\a';\n    }\n    if ((systemState != '\\0') && (systemState != '\\x06')) {\n      return '\\v';\n    }\n    moveMotionControllerToHome();\n    if (systemAbort == '\\0') {\n      executeStartupProtocol();\n    }\n    break;\n  case 0x4e:\n    characterCounter = '\\x02';\n    if (inputLine[2] == '\\0') {\n      for (helper = '\\0'; helper < 2; helper = helper + '\\x01') {\n        status = readStartupLineSetting(helper,inputLine);\n        if (status == '\\0') {\n          reportStatusMessage('\\n');\n        }\n        else {\n          reportStartupLine(helper,inputLine);\n        }\n      }\n      return '\\0';\n    }\n    helper = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = read_float(inputLine,&characterCounter,&gcodeParameter);\n    if (result == 0) {\n      return '\\x01';\n    }\n    tempByte = characterCounter + 1;\n    if (inputLine[characterCounter] != '=') {\n      return '\\x03';\n    }\n    characterCounter = tempByte;\n    if (helper == '\\0') {\n      result = read_float(inputLine,&characterCounter,&gcodeValue);\n      if (result == 0) {\n        return '\\x01';\n      }\n      if (inputLine[characterCounter] == '\\0') {\n        result = floatToInteger(gcodeParameter);\n        status = storeGlobalSetting(result,floatValue);\n        return status;\n      }\n      return '\\x03';\n    }\n    do {\n      inputLine[(uint)characterCounter - (uint)tempByte] = inputLine[characterCounter];\n      tempUint = (uint)characterCounter;\n      characterCounter = characterCounter + '\\x01';\n    } while (inputLine[tempUint] != '\\0');\n    helper = tempByte;\n    helper = executeGcLine(inputLine);\n    if (helper != '\\0') {\n      return helper;\n    }\n    tempFloat = floatToDouble(gcodeParameter);\n    truncate((double)CONCAT44(inputLine,floatStack));\n    helper = doubleToUnsignedInteger(tempFloat,tempFloat2);\n    storeStartupLineSetting(helper,inputLine);\n    break;\n  case 0x58:\n    characterCounter = '\\x02';\n    if (inputLine[2] != '\\0') {\n      return '\\x03';\n    }\n    if (systemState == '\\x06') {\n      reportFeedbackMessage('\\x03');\n      systemState = '\\0';\n    }\n  }\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_line_08003b98",
                "line": "inputLine",
                "uVar2": "status",
                "iVar3": "result",
                "uVar4": "tempFloat",
                "extraout_r1": "tempFloat2",
                "uVar5": "tempUint",
                "value_00": "floatValue",
                "uStack_20": "floatStack",
                "line_local": "tempLine",
                "value": "gcodeValue",
                "parameter": "gcodeParameter",
                "char_counter": "characterCounter",
                "helper_var": "helper",
                "bVar1": "tempByte",
                "settings": "systemSettings",
                "sys.state": "systemState",
                "sys.abort": "systemAbort",
                "settings.flags": "settingsFlags",
                "protocol_execute_startup": "executeStartupProtocol",
                "gc_execute_line": "executeGcLine",
                "settings_read_startup_line": "readStartupLineSetting",
                "report_status_message": "reportStatusMessage",
                "report_startup_line": "reportStartupLine",
                "settings_store_global_setting": "storeGlobalSetting",
                "__aeabi_f2iz": "floatToInteger",
                "settings_store_startup_line": "storeStartupLineSetting",
                "__aeabi_f2d": "floatToDouble",
                "trunc": "truncate",
                "__aeabi_d2uiz": "doubleToUnsignedInteger",
                "report_grbl_help": "reportGrblHelp",
                "report_gcode_parameters": "reportGcodeParameters",
                "report_grbl_settings": "reportGrblSettings",
                "mc_reset": "resetMotionController",
                "report_feedback_message": "reportFeedbackMessage",
                "report_gcode_modes": "reportGcodeModes",
                "mc_go_home": "moveMotionControllerToHome"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "report_status_message",
                "trunc",
                "report_grbl_settings",
                "report_feedback_message",
                "settings_read_startup_line",
                "__aeabi_d2uiz",
                "settings_store_startup_line",
                "mc_reset",
                "gc_execute_line",
                "mc_go_home",
                "report_grbl_help",
                "__aeabi_f2d",
                "read_float",
                "protocol_execute_startup",
                "__aeabi_f2iz",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_startup_line",
                "report_gcode_parameters"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_data_08003f34",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid process_serial_data_08003f34(void)\n\n{\n  uint8_t code_status;\n  byte byte_value;\n  uint counter;\n  uint8_t c;\n  \n  while( true ) {\n    while( true ) {\n      byte_value = serial_read();\n      if (byte_value == 0xff) {\n        return;\n      }\n      if ((byte_value == 10) || (byte_value == 0xd)) break;\n      if (in_comment == '\\0') {\n        if ((0x20 < byte_value) && (byte_value != 0x2f)) {\n          if (byte_value == 0x28) {\n            in_comment = '\\x01';\n          }\n          else if (char_counter == 0xff) {\n            report_status_message('\\r');\n            protocol_reset_buffer_buffer();\n          }\n          else if ((byte_value < 0x61) || (0x7a < byte_value)) {\n            counter = (uint)char_counter;\n            char_counter = char_counter + '\\x01';\n            buffer[counter] = byte_value;\n          }\n          else {\n            counter = (uint)char_counter;\n            char_counter = char_counter + '\\x01';\n            buffer[counter] = byte_value - 0x20;\n          }\n        }\n      }\n      else if (byte_value == 0x29) {\n        in_comment = '\\0';\n      }\n    }\n    protocol_execute_runtime();\n    if (abort_flag != '\\0') break;\n    if (char_counter == '\\0') {\n      report_status_message('\\0');\n    }\n    else {\n      buffer[char_counter] = '\\0';\n      code_status = protocol_execute_buffer(buffer);\n      report_status_message(code_status);\n    }\n    protocol_reset_buffer_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_data_08003f34",
                "status_code": "code_status",
                "bVar1": "byte_value",
                "uVar2": "counter",
                "iscomment": "in_comment",
                "line": "buffer",
                "sys.abort": "abort_flag"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "serial_read",
                "report_status_message",
                "protocol_execute_line",
                "protocol_reset_line_buffer",
                "protocol_execute_runtime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_status_message_08004030",
            "code": "\nvoid printStatusMessage_08004030(uint8_t statusCode)\n\n{\n  uint8_t localStatusCode;\n  \n  if (statusCode == '\\0') {\n    printPgmString(\"ok\\r\\n\");\n  }\n  else {\n    printPgmString(\"error: \");\n    switch(statusCode) {\n    case '\\x01':\n      printPgmString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printPgmString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printPgmString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printPgmString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printPgmString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printPgmString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printPgmString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printPgmString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printPgmString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printPgmString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printPgmString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printPgmString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printPgmString(\"Line overflow\");\n    }\n    printPgmString(\"\\r\\n\");\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_status_message_08004030",
                "status_code": "statusCode",
                "status_code_local": "localStatusCode"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup",
                "gc_init",
                "settings_init",
                "protocol_process",
                "report_gcode_parameters"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "handle_alarm_08004148",
            "code": "\nvoid handleAlarm_08004148(int8_t code)\n\n{\n  int8_t localCode;\n  \n  printPgmString(\"ALARM: \");\n  if (code == -2) {\n    printPgmString(\"Abort during cycle\");\n  }\n  else if (code == -1) {\n    printPgmString(\"Hard limit\");\n  }\n  printPgmString(\". MPos?\\r\\n\");\n  delay_ms(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "handle_alarm_08004148",
                "alarm_code": "code",
                "alarm_code_local": "localCode"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_message_080041a0",
            "code": "\nvoid printMessage_080041a0(uint8_t code)\n\n{\n  uint8_t local_code;\n  \n  printString(\"[\");\n  switch(code) {\n  case '\\x01':\n    printString(\"Reset to continue\");\n    break;\n  case '\\x02':\n    printString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case '\\x03':\n    printString(\"Caution: Unlocked\");\n    break;\n  case '\\x04':\n    printString(\"Enabled\");\n    break;\n  case '\\x05':\n    printString(\"Disabled\");\n  }\n  printString(\"]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_message_080041a0",
                "message_code": "code",
                "message_code_local": "local_code",
                "printPgmString": "printString"
            },
            "calling": [
                "grbl_main",
                "protocol_execute_line",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "initialize_grbl_08004228",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeGrbl_08004228(void)\n\n{\n  printWelcomeMessage(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "initialize_grbl_08004228",
                "printPgmString": "printWelcomeMessage"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_settings_menu_0800423c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid printGrblSettingsMenu_0800423c(void)\n\n{\n  printProgramString(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_settings_menu_0800423c",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_settings_08004250",
            "code": "\n/* WARNING: UxStepkxStepowxStep callixStepg coxStepvexSteptioxStep */\n\nvoid printSettings_08004250(void)\n\n{\n  float xStep;\n  float yStep;\n  float zStep;\n  float defaultFeed;\n  float defaultSeek;\n  float acceleration;\n  float junctionDeviation;\n  float arc;\n  float homingFeed;\n  float homingSeek;\n  float homingPullOff;\n  \n  prixSteptPgmStrixStepg(\"$0=\");\n  prixSteptFloat(xStep);\n  prixSteptPgmStrixStepg(\" (x, step/mm)\\r\\xStep$1=\");\n  prixSteptFloat(yStep);\n  prixSteptPgmStrixStepg(\" (y, step/mm)\\r\\xStep$2=\");\n  prixSteptFloat(zStep);\n  prixSteptPgmStrixStepg(\" (z, step/mm)\\r\\xStep$3=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.pulse_microsecoxStepds);\n  prixSteptPgmStrixStepg(\" (step pulse, usec)\\r\\xStep$4=\");\n  prixSteptFloat(defaultFeed);\n  prixSteptPgmStrixStepg(\" (default feed, mm/mixStep)\\r\\xStep$5=\");\n  prixSteptFloat(defaultSeek);\n  prixSteptPgmStrixStepg(\" (default seek, mm/mixStep)\\r\\xStep$6=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.step_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\" (step port ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.step_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep$7=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.stepper_idle_lock_time);\n  prixSteptPgmStrixStepg(\" (step idle delay, msec)\\r\\xStep$8=\");\n  acceleration = (float)__aeabi_fdiv(settixStepgs.acceleratioxStep,0x45610000);\n  prixSteptFloat(acceleration);\n  prixSteptPgmStrixStepg(\" (acceleratioxStep, mm/sec^2)\\r\\xStep$9=\");\n  prixSteptFloat(junctionDeviation);\n  prixSteptPgmStrixStepg(\" (juxStepctioxStep deviatioxStep, mm)\\r\\xStep$10=\");\n  prixSteptFloat(arc);\n  prixSteptPgmStrixStepg(\" (arc, mm/segmexStept)\\r\\xStep$11=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.xStep_arc_correctioxStep);\n  prixSteptPgmStrixStepg(\" (xStep-arc correctioxStep, ixStept)\\r\\xStep$12=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.decimal_places);\n  prixSteptPgmStrixStepg(\" (xStep-decimals, ixStept)\\r\\xStep$13=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 1) != 0));\n  prixSteptPgmStrixStepg(\" (report ixStepches, bool)\\r\\xStep$14=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 2) != 0));\n  prixSteptPgmStrixStepg(\" (auto start, bool)\\r\\xStep$15=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 4) != 0));\n  prixSteptPgmStrixStepg(\" (ixStepvert step exStepable, bool)\\r\\xStep$16=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 8) != 0));\n  prixSteptPgmStrixStepg(\" (hard limits, bool)\\r\\xStep$17=\");\n  prixSteptIxStepteger((uixStept)((settixStepgs.flags & 0x10) != 0));\n  prixSteptPgmStrixStepg(\" (homixStepg cycle, bool)\\r\\xStep$18=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.homixStepg_dir_mask);\n  prixSteptPgmStrixStepg(\" (homixStepg dir ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.homixStepg_dir_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep$19=\");\n  prixSteptFloat(homingFeed);\n  prixSteptPgmStrixStepg(\" (homixStepg feed, mm/mixStep)\\r\\xStep$20=\");\n  prixSteptFloat(homingSeek);\n  prixSteptPgmStrixStepg(\" (homixStepg seek, mm/mixStep)\\r\\xStep$21=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.homixStepg_debouxStepce_delay);\n  prixSteptPgmStrixStepg(\" (homixStepg debouxStepce, msec)\\r\\xStep$22=\");\n  prixSteptFloat(homingPullOff);\n  prixSteptPgmStrixStepg(\" (homixStepg pull-off, mm)\\r\\xStep$23=\");\n  prixSteptIxStepteger((uixStept)settixStepgs.dirxStep_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\" (dir port ixStepvert mask, ixStept:\");\n  prixStept_uixStept16_base2(settixStepgs.dirxStep_ixStepvert_mask);\n  prixSteptPgmStrixStepg(\")\\r\\xStep\");\n  returxStep;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "n": "xStep",
                "n_00": "yStep",
                "n_01": "zStep",
                "n_02": "defaultFeed",
                "n_03": "defaultSeek",
                "n_04": "acceleration",
                "n_05": "junctionDeviation",
                "n_06": "arc",
                "n_07": "homingFeed",
                "n_08": "homingSeek",
                "n_09": "homingPullOff"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printFloat",
                "__aeabi_fdiv",
                "printPgmString",
                "print_uint16_base2",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_gcode_coord_data_080044e8",
            "code": "\n/* WARNING: Unknown callcounterng conventcounteron */\n\nvocounterd printGcodeCoordData_080044e8(vocounterd)\n\n{\n  ucounternt8_t errorCode;\n  float floatVar1;\n  float floatVar2;\n  float floatVar3;\n  float floatVar4;\n  float floatVar5;\n  float floatVar6;\n  float floatVar7;\n  float floatVar8;\n  float floatVar9;\n  float floatVar10;\n  float floatVar11;\n  float floatVar12;\n  float currentFloat;\n  float floatVar13;\n  float floatVar14;\n  undefcounterned8 floatConversion;\n  float coordData [3];\n  ucounternt8_t counter;\n  ucounternt8_t coordSelect;\n  \n  coordSelect = '\\0';\n  whcounterle( true ) {\n    counterf (7 < coordSelect) {\n      prcounterntPgmStrcounterng(\"[G92:\");\n      currentFloat = floatVar12;\n      for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n        counterf ((settcounterngs.flags & 1) == 0) {\n          prcounterntFloat(currentFloat);\n        }\n        else {\n          floatConversion = __aeabcounter_f2d(gc.coord_offset[counter]);\n          floatConversion = __muldf3((counternt)floatConversion,(counternt)((ulonglong)floatConversion >> 0x20),0x57e16865,0x3fa42851);\n          currentFloat = (float)__truncdfsf2((counternt)floatConversion,(counternt)((ulonglong)floatConversion >> 0x20));\n          prcounterntFloat(currentFloat);\n        }\n        counterf (counter < 2) {\n          prcounterntPgmStrcounterng(\",\");\n          currentFloat = floatVar13;\n        }\n        else {\n          prcounterntPgmStrcounterng(\"]\\r\\n\");\n          currentFloat = floatVar14;\n        }\n      }\n      return;\n    }\n    errorCode = settcounterngs_read_coordData(coordSelect,coordData);\n    counterf (errorCode == '\\0') break;\n    prcounterntPgmStrcounterng(\"[G\");\n    currentFloat = floatVar1;\n    swcountertch(coordSelect) {\n    case '\\0':\n      prcounterntPgmStrcounterng(\"54:\");\n      currentFloat = floatVar2;\n      break;\n    case '\\x01':\n      prcounterntPgmStrcounterng(\"55:\");\n      currentFloat = floatVar3;\n      break;\n    case '\\x02':\n      prcounterntPgmStrcounterng(\"56:\");\n      currentFloat = floatVar4;\n      break;\n    case '\\x03':\n      prcounterntPgmStrcounterng(\"57:\");\n      currentFloat = floatVar5;\n      break;\n    case '\\x04':\n      prcounterntPgmStrcounterng(\"58:\");\n      currentFloat = floatVar6;\n      break;\n    case '\\x05':\n      prcounterntPgmStrcounterng(\"59:\");\n      currentFloat = floatVar7;\n      break;\n    case '\\x06':\n      prcounterntPgmStrcounterng(\"28:\");\n      currentFloat = floatVar8;\n      break;\n    case '\\a':\n      prcounterntPgmStrcounterng(\"30:\");\n      currentFloat = floatVar9;\n    }\n    for (counter = '\\0'; counter < 3; counter = counter + '\\x01') {\n      counterf ((settcounterngs.flags & 1) == 0) {\n        prcounterntFloat(currentFloat);\n      }\n      else {\n        floatConversion = __aeabcounter_f2d(coordData[counter]);\n        floatConversion = __muldf3((counternt)floatConversion,(counternt)((ulonglong)floatConversion >> 0x20),0x57e16865,0x3fa42851);\n        currentFloat = (float)__truncdfsf2((counternt)floatConversion,(counternt)((ulonglong)floatConversion >> 0x20));\n        prcounterntFloat(currentFloat);\n      }\n      counterf (counter < 2) {\n        prcounterntPgmStrcounterng(\",\");\n        currentFloat = floatVar10;\n      }\n      else {\n        prcounterntPgmStrcounterng(\"]\\r\\n\");\n        currentFloat = floatVar11;\n      }\n    }\n    coordSelect = coordSelect + '\\x01';\n  }\n  report_status_message('\\n');\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_gcode_coord_data_080044e8",
                "coord_data": "coordData",
                "coord_select": "coordSelect",
                "uVar1": "errorCode",
                "extraout_s0": "floatVar1",
                "extraout_s0_00": "floatVar2",
                "extraout_s0_01": "floatVar3",
                "extraout_s0_02": "floatVar4",
                "extraout_s0_03": "floatVar5",
                "extraout_s0_04": "floatVar6",
                "extraout_s0_05": "floatVar7",
                "extraout_s0_06": "floatVar8",
                "extraout_s0_07": "floatVar9",
                "extraout_s0_08": "floatVar10",
                "extraout_s0_09": "floatVar11",
                "fVar2": "currentFloat",
                "extraout_s0_10": "floatVar12",
                "extraout_s0_11": "floatVar13",
                "extraout_s0_12": "floatVar14",
                "uVar3": "floatConversion",
                "i": "counter"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "report_status_message",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "settings_read_coord_data",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_g_code_info_080046d0",
            "code": "\n/* WARNING: UfeedRatekfeedRateowfeedRate callifeedRateg cofeedRatevefeedRatetiofeedRate */\n\nvoid printGCodeInfo_080046d0(void)\n\n{\n  float feedRate;\n  float truncatedRate;\n  ufeedRatedefifeedRateed8 tempVar;\n  \n  switch(motionMode) {\n  case '\\0':\n    prifeedRatetPgmStrifeedRateg(\"[G0\");\n    break;\n  case '\\x01':\n    prifeedRatetPgmStrifeedRateg(\"[G1\");\n    break;\n  case '\\x02':\n    prifeedRatetPgmStrifeedRateg(\"[G2\");\n    break;\n  case '\\x03':\n    prifeedRatetPgmStrifeedRateg(\"[G3\");\n    break;\n  case '\\x04':\n    prifeedRatetPgmStrifeedRateg(\"[G80\");\n  }\n  prifeedRatetPgmStrifeedRateg(\" G\");\n  prifeedRatetIfeedRateteger(coordSelect + 0x36);\n  if (planeAxis0 == '\\0') {\n    if (planeAxis1 == '\\x01') {\n      prifeedRatetPgmStrifeedRateg(\" G17\");\n    }\n    else {\n      prifeedRatetPgmStrifeedRateg(\" G18\");\n    }\n  }\n  else {\n    prifeedRatetPgmStrifeedRateg(\" G19\");\n  }\n  if (inchesMode == '\\0') {\n    prifeedRatetPgmStrifeedRateg(\" G21\");\n  }\n  else {\n    prifeedRatetPgmStrifeedRateg(\" G20\");\n  }\n  if (absoluteMode == '\\0') {\n    prifeedRatetPgmStrifeedRateg(\" G91\");\n  }\n  else {\n    prifeedRatetPgmStrifeedRateg(\" G90\");\n  }\n  if (inverseFeedRateMode == '\\0') {\n    prifeedRatetPgmStrifeedRateg(\" G94\");\n  }\n  else {\n    prifeedRatetPgmStrifeedRateg(\" G93\");\n  }\n  if (programFlow == '\\x02') {\n    prifeedRatetPgmStrifeedRateg(\" M2\");\n  }\n  else if (programFlow < 3) {\n    if (programFlow == '\\0') {\n      prifeedRatetPgmStrifeedRateg(\" M0\");\n    }\n    else if (programFlow == '\\x01') {\n      prifeedRatetPgmStrifeedRateg(\" M1\");\n    }\n  }\n  if (spindleDirection == '\\x01') {\n    prifeedRatetPgmStrifeedRateg(\" M3\");\n  }\n  else if (spindleDirection < '\\x02') {\n    if (spindleDirection == -1) {\n      prifeedRatetPgmStrifeedRateg(\" M4\");\n    }\n    else if (spindleDirection == '\\0') {\n      prifeedRatetPgmStrifeedRateg(\" M5\");\n    }\n  }\n  if (coolantMode == '\\x02') {\n    prifeedRatetPgmStrifeedRateg(\" M7\");\n  }\n  else if (coolantMode < 3) {\n    if (coolantMode == '\\0') {\n      prifeedRatetPgmStrifeedRateg(\" M9\");\n    }\n    else if (coolantMode == '\\x01') {\n      prifeedRatetPgmStrifeedRateg(\" M8\");\n    }\n  }\n  prifeedRatetPgmStrifeedRateg(\" T\");\n  prifeedRatetIfeedRateteger((uifeedRatet)tool);\n  prifeedRatetPgmStrifeedRateg(\" F\");\n  if (inchesMode == '\\0') {\n    prifeedRatetFloat(feedRate);\n  }\n  else {\n    tempVar = __aeabi_f2d(feedRateValue);\n    tempVar = __muldf3((ifeedRatet)tempVar,(ifeedRatet)((ulofeedRateglofeedRateg)tempVar >> 0x20),0x57e16865,0x3fa42851);\n    truncatedRate = (float)__trufeedRatecdfsf2((ifeedRatet)tempVar,(ifeedRatet)((ulofeedRateglofeedRateg)tempVar >> 0x20));\n    prifeedRatetFloat(truncatedRate);\n  }\n  prifeedRatetPgmStrifeedRateg(\"]\\r\\feedRate\");\n  returfeedRate;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_g_code_info_080046d0",
                "n": "feedRate",
                "n_00": "truncatedRate",
                "uVar1": "tempVar",
                "gc.motion_mode": "motionMode",
                "gc.coord_select": "coordSelect",
                "gc.plane_axis_0": "planeAxis0",
                "gc.plane_axis_1": "planeAxis1",
                "gc.inches_mode": "inchesMode",
                "gc.absolute_mode": "absoluteMode",
                "gc.inverse_feed_rate_mode": "inverseFeedRateMode",
                "gc.program_flow": "programFlow",
                "gc.spindle_direction": "spindleDirection",
                "gc.coolant_mode": "coolantMode",
                "gc.tool": "tool",
                "gc.feed_rate": "feedRateValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_number_and_line_08004900",
            "code": "\nvoid printNumberAndLine_08004900(uinumbert8_t number,char *text)\n\n{\n  char *localText;\n  uinumbert8_t localNumber;\n  \n  prinumbertPgmStrinumberg(\"$N\");\n  prinumbertInumberteger((uinumbert)number);\n  prinumbertPgmStrinumberg(\"=\");\n  prinumbertStrinumberg(text);\n  prinumbertPgmStrinumberg(\"\\r\\number\");\n  returnumber;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_number_and_line_08004900",
                "n": "number",
                "line": "text",
                "line_local": "localText",
                "n_local": "localNumber"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printString",
                "printPgmString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_status_08004940",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd printPositionStatus_08004940(voindexd)\n\n{\n  undefindexned4 uVar1;\n  float fVar2;\n  float extraout_s0;\n  float extraout_s0_00;\n  float extraout_s0_01;\n  float extraout_s0_02;\n  undefindexned8 uVar3;\n  undefindexned8 uVar4;\n  float prindexnt_posindextindexon [3];\n  indexnt32_t current_posindextindexon [3];\n  uindexnt8_t index;\n  \n  current_posindextindexon[0] = currentPosition[0];\n  current_posindextindexon[1] = currentPosition[1];\n  current_posindextindexon[2] = currentPosition[2];\n  swindextch(currentState) {\n  case '\\0':\n    printString(\"<Idle\");\n    break;\n  case '\\x02':\n    printString(\"<Queue\");\n    break;\n  case '\\x03':\n    printString(\"<Run\");\n    break;\n  case '\\x04':\n    printString(\"<Hold\");\n    break;\n  case '\\x05':\n    printString(\"<Home\");\n    break;\n  case '\\x06':\n    printString(\"<Alarm\");\n    break;\n  case '\\a':\n    printString(\"<Check\");\n  }\n  printString(\",MPos:\");\n  for (index = '\\0'; index < 3; index = index + '\\x01') {\n    uVar1 = __floatsindexsf(current_posindextindexon[index]);\n    fVar2 = (float)__aeabindex_fdindexv(uVar1,stepsPerMM[index]);\n    prindexnt_posindextindexon[index] = fVar2;\n    fVar2 = extraout_s0;\n    indexf ((flags & 1) != 0) {\n      uVar3 = __aeabindex_f2d(prindexnt_posindextindexon[index]);\n      uVar3 = __muldf3((indexnt)uVar3,(indexnt)((ulonglong)uVar3 >> 0x20),0x57e16865,0x3fa42851);\n      fVar2 = (float)__truncdfsf2((indexnt)uVar3,(indexnt)((ulonglong)uVar3 >> 0x20));\n      prindexnt_posindextindexon[index] = fVar2;\n      fVar2 = extraout_s0_00;\n    }\n    printFloatValue(fVar2);\n    printString(\",\");\n  }\n  printString(\"WPos:\");\n  for (index = '\\0'; index < 3; index = index + '\\x01') {\n    indexf ((flags & 1) == 0) {\n      fVar2 = prindexnt_posindextindexon[index];\n      uVar1 = __addsf3(coordSystem[index],coordOffset[index]);\n      fVar2 = (float)__aeabindex_fsub(fVar2,uVar1);\n      prindexnt_posindextindexon[index] = fVar2;\n      fVar2 = extraout_s0_02;\n    }\n    else {\n      uVar3 = __aeabindex_f2d(prindexnt_posindextindexon[index]);\n      uVar1 = __addsf3(coordSystem[index],coordOffset[index]);\n      uVar4 = __aeabindex_f2d(uVar1);\n      uVar4 = __muldf3((indexnt)uVar4,(indexnt)((ulonglong)uVar4 >> 0x20),0x57e16865,0x3fa42851);\n      uVar3 = __subdf3((indexnt)uVar3,(indexnt)((ulonglong)uVar3 >> 0x20),(indexnt)uVar4,\n                       (indexnt)((ulonglong)uVar4 >> 0x20));\n      fVar2 = (float)__truncdfsf2((indexnt)uVar3,(indexnt)((ulonglong)uVar3 >> 0x20));\n      prindexnt_posindextindexon[index] = fVar2;\n      fVar2 = extraout_s0_01;\n    }\n    printFloatValue(fVar2);\n    indexf (index < 2) {\n      printString(\",\");\n    }\n  }\n  printString(\">\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_status_08004940",
                "sys.position": "currentPosition",
                "sys.state": "currentState",
                "printPgmString": "printString",
                "settings.steps_per_mm": "stepsPerMM",
                "settings.flags": "flags",
                "gc.coord_system": "coordSystem",
                "gc.coord_offset": "coordOffset",
                "printFloat": "printFloatValue",
                "i": "index"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_f2d",
                "__muldf3",
                "printFloat",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "printPgmString",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "store_line_in_eeprom_08004bc0",
            "code": "\nvoid store_line_in_eeprom_08004bc0(uiline_indext8_t line_index,char *data)\n\n{\n  char *local_data;\n  uiline_indext8_t local_line_index;\n  uiline_indext16_t eeprom_address;\n  \n  memcpy_to_eeprom_with_checksum((uiline_indext)(ushort)((ushort)line_index * 0x101 + 0x300),data,0x100);\n  returline_index;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "store_line_in_eeprom_08004bc0",
                "n": "line_index",
                "line": "data",
                "line_local": "local_data",
                "n_local": "local_line_index",
                "addr": "eeprom_address"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "store_coord_data_to_eeprom_08004bf4",
            "code": "\nvoid storeCoordDataToEEPROM_08004bf4(uint8_t coordSelector,float *coordinateData)\n\n{\n  float *localCoordinateData;\n  uint8_t localCoordSelector;\n  uint16_t address;\n  \n  memcpy_to_eeprom_with_checksum\n            ((uint)(ushort)((ushort)coordSelector * 0xd + 0x200),(char *)coordinateData,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "store_coord_data_to_eeprom_08004bf4",
                "coord_select": "coordSelector",
                "coord_data": "coordinateData",
                "coord_data_local": "localCoordinateData",
                "coord_select_local": "localCoordSelector",
                "addr": "address"
            },
            "calling": [
                "gc_execute_line",
                "settings_read_coord_data"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_eeprom_settings_08004c2a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEEPROMSettings_08004c2a(void)\n\n{\n  writeCharToEEPROM(0,'\\x05');\n  writeDataToEEPROMWithChecksum(1,(char *)&settings,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_eeprom_settings_08004c2a",
                "eeprom_put_char": "writeCharToEEPROM",
                "memcpy_to_eeprom_with_checksum": "writeDataToEEPROMWithChecksum"
            },
            "calling": [
                "settings_reset",
                "settings_store_global_setting"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initializeSettings_08004c48(_Bool resetAll)\n\n{\n  _Bool resetAllLocal;\n  \n  if (resetAll) {\n    settings.steps_per_mm[0] = 157.4803;\n    settings.steps_per_mm[1] = 157.4803;\n    settings.steps_per_mm[2] = 157.4803;\n    settings.pulse_microseconds = '\\n';\n    settings.default_feed_rate = 250.0;\n    settings.default_seek_rate = 500.0;\n    settings.acceleration = 36000.0;\n    settings.mm_per_arc_segment = 0.1;\n    settings.step_invert_mask = 0;\n    settings.dirn_invert_mask = 0xa80;\n    settings.junction_deviation = 0.05;\n  }\n  settings.flags = '\\x12';\n  settings.homing_dir_mask = 0;\n  settings.homing_feed_rate = 25.0;\n  settings.homing_seek_rate = 250.0;\n  settings.homing_debounce_delay = 100;\n  settings.homing_pulloff = 1.0;\n  settings.stepper_idle_lock_time = '\\x19';\n  settings.decimal_places = '\\x03';\n  settings.n_arc_correction = '\\x19';\n  write_global_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "reset_all": "resetAll",
                "reset_all_local": "resetAllLocal"
            },
            "calling": [
                "read_global_settings",
                "settings_init"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "load_line_from_eeprom_08004d2c",
            "code": "\nuiline_numbert8_t load_line_from_eeprom_08004d2c(uiline_numbert8_t line_number,char *output_line)\n\n{\n  iline_numbert copy_result;\n  char *local_line;\n  uiline_numbert8_t local_line_number;\n  uiline_numbert16_t eeprom_address;\n  \n  copy_result = memcpy_from_eeprom_with_checksum(output_line,(uiline_numbert)(ushort)((ushort)line_number * 0x101 + 0x300),0x100);\n  if (copy_result == 0) {\n    *output_line = '\\0';\n    settiline_numbergs_store_startup_output_line(line_number,output_line);\n  }\n  returline_number copy_result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "load_line_from_eeprom_08004d2c",
                "n": "line_number",
                "line": "output_line",
                "line_local": "local_line",
                "n_local": "local_line_number",
                "addr": "eeprom_address",
                "iVar1": "copy_result"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "verify_and_write_coord_data_08004d7c",
            "code": "\nuint8_t verifyAndWriteCoordData_08004d7c(uint8_t selection,float *data)\n\n{\n  int result;\n  float *localData;\n  uint8_t localSelection;\n  uint16_t address;\n  \n  result = memcpy_from_eeprom_with_checksum\n                    ((char *)data,(uint)(ushort)((ushort)selection * 0xd + 0x200),0xc);\n  if (result == 0) {\n    memset(data,0,0xc);\n    settings_write_data(selection,data);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "verify_and_write_coord_data_08004d7c",
                "coord_select": "selection",
                "coord_data": "data",
                "coord_data_local": "localData",
                "coord_select_local": "localSelection",
                "addr": "address",
                "iVar1": "result"
            },
            "calling": [
                "gc_execute_line",
                "gc_init",
                "settings_init",
                "report_gcode_parameters"
            ],
            "called": [
                "settings_write_coord_data",
                "memcpy_from_eeprom_with_checksum",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "get_settings_version_08004dd2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t get_settings_version_08004dd2(void)\n\n{\n  byte eeprom_char_value;\n  int eeprom_copy_result;\n  uint8_t settings_version;\n  \n  eeprom_char_value = eeprom_get_char(0);\n  if (eeprom_char_value == 5) {\n    eeprom_copy_result = memcpy_from_eeprom_with_checksum((char *)&settings_data,1,0x40);\n    if (eeprom_copy_result == 0) {\n      return '\\0';\n    }\n  }\n  else {\n    if (4 < eeprom_char_value) {\n      return '\\0';\n    }\n    eeprom_copy_result = memcpy_from_eeprom_with_checksum((char *)&settings_data,1,0x28);\n    if (eeprom_copy_result == 0) {\n      return '\\0';\n    }\n    settings_data_reset(false);\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "get_settings_version_08004dd2",
                "bVar1": "eeprom_char_value",
                "iVar2": "eeprom_copy_result",
                "version": "settings_version",
                "settings": "settings_data"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "settings_reset",
                "eeprom_get_char",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\n/* WARNING: Variable defined which should be unmapped: newValue-local */\n\nuint8_t updateSettings_08004e30(int settingIndex,float newValue)\n\n{\n  int comparisonResult;\n  undefined4 convertedValue;\n  float currentValue;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 extraout_r1_05;\n  undefined4 extraout_r1_06;\n  float localValue;\n  int localIndex;\n  \n  switch(settingIndex) {\n  case 0:\n  case 1:\n  case 2:\n    comparisonResult = __aeabi_fcmple(newValue,currentValue,0);\n    if (comparisonResult != 0) {\n      return '\\b';\n    }\n    stepsPerMm[settingIndex] = currentValue;\n    break;\n  case 3:\n    comparisonResult = __aeabi_fcmplt(currentValue,0x40400000);\n    if (comparisonResult != 0) {\n      return '\\t';\n    }\n    convertedValue = __aeabi_f2d(currentValue);\n    round((double)CONCAT44(settingIndex,currentValue));\n    pulseMicroseconds = __aeabi_d2uiz(convertedValue,extraout_r1);\n    break;\n  case 4:\n    defaultFeedRate = currentValue;\n    break;\n  case 5:\n    defaultSeekRate = currentValue;\n    break;\n  case 6:\n    convertedValue = __aeabi_f2d(currentValue);\n    trunc((double)CONCAT44(settingIndex,currentValue));\n    stepInvertMask = __aeabi_d2uiz(convertedValue,extraout_r1_00);\n    break;\n  case 7:\n    convertedValue = __aeabi_f2d(currentValue);\n    round((double)CONCAT44(settingIndex,currentValue));\n    stepperIdleLockTime = __aeabi_d2uiz(convertedValue,extraout_r1_01);\n    break;\n  case 8:\n    convertedValue = __aeabi_fmul(currentValue,0x42700000);\n    acceleration = (float)__aeabi_fmul(convertedValue,0x42700000);\n    break;\n  case 9:\n    junctionDeviation = (float)((uint)currentValue & 0x7fffffff);\n    break;\n  case 10:\n    mmPerArcSegment = currentValue;\n    break;\n  case 0xb:\n    convertedValue = __aeabi_f2d(currentValue);\n    round((double)CONCAT44(settingIndex,currentValue));\n    arcCorrection = __aeabi_d2uiz(convertedValue,extraout_r1_02);\n    break;\n  case 0xc:\n    convertedValue = __aeabi_f2d(currentValue);\n    round((double)CONCAT44(settingIndex,currentValue));\n    decimalPlaces = __aeabi_d2uiz(convertedValue,extraout_r1_03);\n    break;\n  case 0xd:\n    comparisonResult = __aeabi_fcmpeq(currentValue,0);\n    if (comparisonResult == 0) {\n      flags = flags | 1;\n    }\n    else {\n      flags = flags & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparisonResult = __aeabi_fcmpeq(currentValue,0);\n    if (comparisonResult == 0) {\n      flags = flags | 2;\n    }\n    else {\n      flags = flags & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparisonResult = __aeabi_fcmpeq(currentValue,0);\n    if (comparisonResult == 0) {\n      flags = flags | 4;\n    }\n    else {\n      flags = flags & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparisonResult = __aeabi_fcmpeq(currentValue,0);\n    if (comparisonResult == 0) {\n      flags = flags | 8;\n    }\n    else {\n      flags = flags & 0xf7;\n    }\n    initializeLimits();\n    break;\n  case 0x11:\n    comparisonResult = __aeabi_fcmpeq(currentValue,0);\n    if (comparisonResult == 0) {\n      flags = flags | 0x10;\n    }\n    else {\n      flags = flags & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = __aeabi_f2d(currentValue);\n    trunc((double)CONCAT44(settingIndex,currentValue));\n    homingDirMask = __aeabi_d2uiz(convertedValue,extraout_r1_04);\n    break;\n  case 0x13:\n    homingFeedRate = currentValue;\n    break;\n  case 0x14:\n    homingSeekRate = currentValue;\n    break;\n  case 0x15:\n    convertedValue = __aeabi_f2d(currentValue);\n    round((double)CONCAT44(settingIndex,currentValue));\n    homingDebounceDelay = __aeabi_d2uiz(convertedValue,extraout_r1_05);\n    break;\n  case 0x16:\n    homingPulloff = currentValue;\n    break;\n  case 0x17:\n    convertedValue = __aeabi_f2d(currentValue);\n    trunc((double)CONCAT44(settingIndex,currentValue));\n    dirnInvertMask = __aeabi_d2uiz(convertedValue,extraout_r1_06);\n    break;\n  default:\n    return '\\x06';\n  }\n  saveSettings();\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "parameter": "settingIndex",
                "value": "newValue",
                "iVar1": "comparisonResult",
                "in_r1": "currentValue",
                "uVar2": "convertedValue",
                "value_local": "localValue",
                "parameter_local": "localIndex",
                "settings.steps_per_mm": "stepsPerMm",
                "settings.pulse_microseconds": "pulseMicroseconds",
                "settings.default_feed_rate": "defaultFeedRate",
                "settings.default_seek_rate": "defaultSeekRate",
                "settings.step_invert_mask": "stepInvertMask",
                "settings.stepper_idle_lock_time": "stepperIdleLockTime",
                "settings.acceleration": "acceleration",
                "settings.junction_deviation": "junctionDeviation",
                "settings.mm_per_arc_segment": "mmPerArcSegment",
                "settings.n_arc_correction": "arcCorrection",
                "settings.decimal_places": "decimalPlaces",
                "settings.flags": "flags",
                "limits_init": "initializeLimits",
                "settings.homing_dir_mask": "homingDirMask",
                "settings.homing_feed_rate": "homingFeedRate",
                "settings.homing_seek_rate": "homingSeekRate",
                "settings.homing_debounce_delay": "homingDebounceDelay",
                "settings.homing_pulloff": "homingPulloff",
                "settings.dirn_invert_mask": "dirnInvertMask",
                "write_global_settings": "saveSettings"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "limits_init",
                "trunc",
                "write_global_settings",
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_d2uiz",
                "__aeabi_fmul",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_reset_settings_080051b4",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd checkAndResetSettings_080051b4(voindexd)\n\n{\n  uindexnt8_t globalSettings;\n  float coordinates [3];\n  uindexnt8_t index;\n  \n  globalSettings = read_global_settindexngs();\n  indexf (globalSettings == '\\0') {\n    report_status_message('\\n');\n    settindexngs_reset(true);\n    report_grbl_settindexngs();\n  }\n  for (index = '\\0'; index < 8; index = index + '\\x01') {\n    globalSettings = settindexngs_read_coordinates(index,coordinates);\n    indexf (globalSettings == '\\0') {\n      report_status_message('\\n');\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "uVar1": "globalSettings",
                "coord_data": "coordinates",
                "i": "index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_status_message",
                "report_grbl_settings",
                "read_global_settings",
                "settings_reset",
                "settings_read_coord_data"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stopSpindle_08005238(void)\n\n{\n  direction = '\\0';\n  stopSpindle_08005238Func();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238",
                "current_direction": "direction",
                "spindle_stop": "stopSpindleFunc"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_spindle_off_08005250",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid turn_spindle_off_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_spindle_off_08005250"
            },
            "calling": [
                "spindle_init",
                "mc_reset",
                "spindle_run"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "update_spindle_direction_0800525c",
            "code": "\nvoid updateSpindleDirection_0800525c(int8_t newDirection)\n\n{\n  int8_t localDirection;\n  \n  if ((int)newDirection != (uint)currentDirection) {\n    synchronizePlan();\n    if (newDirection == '\\0') {\n      stopSpindle();\n      currentDirection = newDirection;\n    }\n    else {\n      if (newDirection < '\\x01') {\n        reverseSpindle();\n      }\n      else {\n        forwardSpindle();\n      }\n      turnOnSpindle();\n      currentDirection = newDirection;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "update_spindle_direction_0800525c",
                "direction": "newDirection",
                "direction_local": "localDirection",
                "current_direction": "currentDirection",
                "plan_synchronize": "synchronizePlan",
                "spindle_stop": "stopSpindle",
                "spindle_rev": "reverseSpindle",
                "spindle_fwd": "forwardSpindle",
                "spindle_on": "turnOnSpindle"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_fwd",
                "spindle_stop",
                "plan_synchronize",
                "spindle_rev",
                "spindle_on"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "set_flag_with_mask_080052ac",
            "code": "\n\n\nvoid setFlagWithMask_080052ac(uint32_t inputValue)\n\n{\n  uint32_t temporaryValue;\n  uint32_t valueToSet;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "set_flag_with_mask_080052ac",
                "x": "inputValue",
                "x_local": "temporaryValue",
                "val": "valueToSet"
            },
            "calling": [
                "st_init",
                "step_delay_isr",
                "step_pulse_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "set_bit_in_memory_080052dc",
            "code": "\n\n\nvoid setBitInMemory_080052dc(uint32_t inputValue)\n\n{\n  uint32_t localValue;\n  uint32_t maskValue;\n  \n  _DAT_40021014 = inputValue | _DAT_40021014 & 0inputValuefffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "set_bit_in_memory_080052dc",
                "x": "inputValue",
                "x_local": "localValue",
                "val": "maskValue"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "set_step_event_cycle_08005324",
            "code": "\nvoid setStepEventCycle_08005324(uint32_t inputStepsPerMinute)\n\n{\n  uint32_t effectiveStepsPerMinute;\n  uint32_t tickCount;\n  \n  effectiveStepsPerMinute = inputStepsPerMinute;\n  if (inputStepsPerMinute < 800) {\n    effectiveStepsPerMinute = 800;\n  }\n  st.cycles_per_step_event = 1260000000 / effectiveStepsPerMinute;\n  set_step_period(st.cycles_per_step_event);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "set_step_event_cycle_08005324",
                "steps_per_minute": "inputStepsPerMinute",
                "steps_per_minute_local": "effectiveStepsPerMinute",
                "ticks": "tickCount"
            },
            "calling": [
                "step_period_isr",
                "st_cycle_reinitialize",
                "st_reset"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_trapezoid_tick_cycle_08005360",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint calculateTrapezoidTickCycle_08005360(void)\n\n{\n  bool isTrapezoidCycleExceeded;\n  \n  state.trapezoid_tick_cycle_counter = state.cycles_per_stateep_event + state.trapezoid_tick_cycle_counter;\n  isTrapezoidCycleExceeded = 420000 < state.trapezoid_tick_cycle_counter;\n  if (isTrapezoidCycleExceeded) {\n    state.trapezoid_tick_cycle_counter = state.trapezoid_tick_cycle_counter - 420000;\n  }\n  return (uint)isTrapezoidCycleExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_trapezoid_tick_cycle_08005360",
                "st": "state",
                "bVar1": "isTrapezoidCycleExceeded"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_current_block_and_position_080053a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateCurrentBlockAndPosition_080053a0(void)\n\n{\n  int iterationResult;\n  \n  dirn_wr((uint)directionBits);\n  savedStepBits = stepBits;\n  if (currentBlock == (Block *)0x0) {\n    currentBlock = getCurrentBlock();\n    if (currentBlock == (Block *)0x0) {\n      goIdle();\n      sysExecute = sysExecute | 4;\n    }\n    else {\n      if (sysState == '\\x03') {\n        trapezoidAdjustedRate = currentBlock->initial_rate;\n        setStepEventsPerMinute(trapezoidAdjustedRate);\n        trapezoidTickCycleCounter = 210000;\n      }\n      minSafeRate = (currentBlock->rate_delta >> 1) + currentBlock->rate_delta;\n      counterX = -(currentBlock->stateep_event_count >> 1);\n      eventCount = currentBlock->stateep_event_count;\n      stepEventsCompleted = 0;\n      counterY = counterX;\n      counterZ = counterX;\n    }\n  }\n  if (currentBlock != (Block *)0x0) {\n    directionBits = currentBlock->direction_bits;\n    stepBits = 0;\n    counterX = currentBlock->stateeps_x + counterX;\n    if (0 < counterX) {\n      stepBits = 0x10;\n      counterX = counterX - eventCount;\n      if ((directionBits & 0x20) == 0) {\n        sysPositionX = sysPositionX + 1;\n      }\n      else {\n        sysPositionX = sysPositionX + -1;\n      }\n    }\n    counterY = currentBlock->stateeps_y + counterY;\n    if (0 < counterY) {\n      stepBits = stepBits | 0x440;\n      counterY = counterY - eventCount;\n      if ((directionBits & 0x80) == 0) {\n        sysPositionY = sysPositionY + 1;\n      }\n      else {\n        sysPositionY = sysPositionY + -1;\n      }\n    }\n    counterZ = currentBlock->stateeps_z + counterZ;\n    if (0 < counterZ) {\n      stepBits = stepBits | 0x100;\n      counterZ = counterZ - eventCount;\n      if ((directionBits & 0x200) == 0) {\n        sysPositionZ = sysPositionZ + 1;\n      }\n      else {\n        sysPositionZ = sysPositionZ + -1;\n      }\n    }\n    stepEventsCompleted = stepEventsCompleted + 1;\n    if (stepEventsCompleted < (uint)currentBlock->stateep_event_count) {\n      if (sysState == '\\x04') {\n        iterationResult = iterate_trapezoid_cycle_counter();\n        if (iterationResult != 0) {\n          if ((uint)currentBlock->rate_delta < trapezoidAdjustedRate) {\n            trapezoidAdjustedRate = trapezoidAdjustedRate - currentBlock->rate_delta;\n            setStepEventsPerMinute(trapezoidAdjustedRate);\n          }\n          else {\n            goIdle();\n            sysExecute = sysExecute | 4;\n          }\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->accelerate_until) {\n        iterationResult = iterate_trapezoid_cycle_counter();\n        if (iterationResult != 0) {\n          trapezoidAdjustedRate = trapezoidAdjustedRate + currentBlock->rate_delta;\n          if (currentBlock->nominal_rate <= trapezoidAdjustedRate) {\n            trapezoidAdjustedRate = currentBlock->nominal_rate;\n          }\n          setStepEventsPerMinute(trapezoidAdjustedRate);\n        }\n      }\n      else if (stepEventsCompleted < currentBlock->decelerate_after) {\n        if (trapezoidAdjustedRate != currentBlock->nominal_rate) {\n          trapezoidAdjustedRate = currentBlock->nominal_rate;\n          setStepEventsPerMinute(trapezoidAdjustedRate);\n        }\n      }\n      else if (stepEventsCompleted == currentBlock->decelerate_after) {\n        if (trapezoidAdjustedRate == currentBlock->nominal_rate) {\n          trapezoidTickCycleCounter = 210000;\n        }\n        else {\n          trapezoidTickCycleCounter = 420000 - trapezoidTickCycleCounter;\n        }\n      }\n      else {\n        iterationResult = iterate_trapezoid_cycle_counter();\n        if (iterationResult != 0) {\n          if (minSafeRate < trapezoidAdjustedRate) {\n            trapezoidAdjustedRate = trapezoidAdjustedRate - currentBlock->rate_delta;\n          }\n          else {\n            trapezoidAdjustedRate = trapezoidAdjustedRate >> 1;\n          }\n          if (trapezoidAdjustedRate < currentBlock->final_rate) {\n            trapezoidAdjustedRate = currentBlock->final_rate;\n          }\n          setStepEventsPerMinute(trapezoidAdjustedRate);\n        }\n      }\n    }\n    else {\n      stepBits = 0;\n      currentBlock = (Block *)0x0;\n      plan_discard_currentBlock();\n    }\n  }\n  stepBits = stepBits ^ settings.stateep_invert_mask;\n  directionBits = directionBits ^ settings.dirn_invert_mask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_current_block_and_position_080053a0",
                "iVar1": "iterationResult",
                "dirn_bits": "directionBits",
                "saved_step_bits": "savedStepBits",
                "current_block": "currentBlock",
                "plan_get_current_block": "getCurrentBlock",
                "st_go_idle": "goIdle",
                "sys.execute": "sysExecute",
                "block_t": "Block",
                "st": "state",
                "st.trapezoid_adjusted_rate": "trapezoidAdjustedRate",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "st.trapezoid_tick_cycle_counter": "trapezoidTickCycleCounter",
                "st.min_safe_rate": "minSafeRate",
                "st.counter_x": "counterX",
                "st.event_count": "eventCount",
                "st.counter_y": "counterY",
                "st.counter_z": "counterZ",
                "sys.position": "sysPosition",
                "sys.position[0]": "sysPositionX",
                "sys.position[1]": "sysPositionY",
                "sys.position[2]": "sysPositionZ",
                "step_bits": "stepBits",
                "st.step_events_completed": "stepEventsCompleted",
                "sys.state": "sysState",
                "set_step_events_per_minute(st.trapezoid_adjusted_rate)": "setStepEventsPerMinute(trapezoidAdjustedRate)"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "dirn_wr",
                "iterate_trapezoid_cycle_counter",
                "st_go_idle",
                "plan_discard_current_block",
                "set_step_events_per_minute",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "perform_step_inversion_08005760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid performStepInversion_08005760(void)\n\n{\n  step_wr((uint)stepInversionMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "perform_step_inversion_08005760",
                "settings.step_invert_mask": "stepInversionMask"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "execute_step_08005778",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_step_08005778(void)\n\n{\n  step_wr((uint)step_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "execute_step_08005778",
                "saved_step_bits": "step_bits"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_stepper_motor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (system_state == '\\x03') {\n    inverted_step_bits = step_invert_mask;\n    inverted_dirn_bits = dirn_invert_mask;\n    set_pulse_delay(0x69);\n    set_pulse_time((pulse_microseconds + 5) * 0x15);\n    enable_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "step_bits": "inverted_step_bits",
                "dirn_bits": "inverted_dirn_bits",
                "set_step_pulse_delay": "set_pulse_delay",
                "set_step_pulse_time": "set_pulse_time",
                "step_isr_enable": "enable_isr",
                "sys.state": "system_state",
                "settings.step_invert_mask": "step_invert_mask",
                "settings.dirn_invert_mask": "dirn_invert_mask",
                "settings.pulse_microseconds": "pulse_microseconds"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_when_idle_080057e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disable_stepper_motor_when_idle_080057e4(void)\n\n{\n  disable_step_isr();\n  if ((settings.stepper_idle_lock_time != 0xff) || ((execute_flag & 0x20) != 0)) {\n    disable_stepper_motor();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_when_idle_080057e4",
                "step_isr_disable": "disable_step_isr",
                "stepper_motor_disable": "disable_stepper_motor",
                "sys.execute": "execute_flag"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "step_period_isr",
                "mc_reset"
            ],
            "called": [
                "stepper_motor_disable",
                "step_isr_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_default_settings_08005814",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeDefaultSettings_08005814(void)\n\n{\n  memset(&settings,0,0x24);\n  setStepEventsPerMinute(800);\n  currentBlock = (block_t *)0x0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_default_settings_08005814",
                "st": "settings",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "current_block": "currentBlock"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "set_step_events_per_minute",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_step_module_0800583c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStepModule_0800583c(void)\n\n{\n  step_wr((uint)stepInvertMask);\n  st_wake_up();\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_step_module_0800583c",
                "settings.step_invert_mask": "stepInvertMask"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_wake_up",
                "st_go_idle",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "transition_state_to_wakeup_0800585c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid transition_state_to_wakeup_0800585c(void)\n\n{\n  if (system_state == '\\x02') {\n    system_state = '\\x03';\n    start_wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "transition_state_to_wakeup_0800585c",
                "sys.state": "system_state",
                "st_wake_up": "start_wake_up"
            },
            "calling": [
                "mc_go_home",
                "protocol_execute_runtime",
                "mc_line"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_system_state_0800587c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid update_system_state_0800587c(void)\n\n{\n  if (system.current_state == '\\x03') {\n    system.current_state = '\\x04';\n    system.enable_auto_start = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_system_state_0800587c",
                "sys": "system",
                "state": "current_state",
                "auto_start": "enable_auto_start"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_step_cycle_080058a0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStepCycle_080058a0(void)\n\n{\n  if (currentBlock == (block_t *)0x0) {\n    systemState = '\\0';\n  }\n  else {\n    reinitializeCyclePlan(currentBlock->stepDataep_event_count - completedStepEvents);\n    adjustedTrapezoidRate = 0;\n    setStepEventsPerMinute(0);\n    tickCycleCounter = 210000;\n    completedStepEvents = 0;\n    systemState = '\\x02';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_step_cycle_080058a0",
                "current_block": "currentBlock",
                "st": "stepData",
                "plan_cycle_reinitialize": "reinitializeCyclePlan",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "sys.state": "systemState",
                "st.trapezoid_adjusted_rate": "adjustedTrapezoidRate",
                "st.trapezoid_tick_cycle_counter": "tickCycleCounter",
                "st.step_events_completed": "completedStepEvents"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_data_08005900",
            "code": "\nint checkData_08005900(uint8_t inputData)\n\n{\n  uint8_t localData;\n  int returnValue;\n  \n  if (inputData == '~') {\n    sys.execute = sys.execute | 2;\n    return 1;\n  }\n  if (inputData < 0x7f) {\n    if (inputData == '?') {\n      sys.execute = sys.execute | 1;\n      return 1;\n    }\n    if (inputData < 0x40) {\n      if (inputData == '\\x18') {\n        mc_reset();\n        return 1;\n      }\n      if (inputData == '!') {\n        sys.execute = sys.execute | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_data_08005900",
                "data": "inputData",
                "data_local": "localData",
                "rc": "returnValue"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_software_interrupt_0800597c(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "get_call_result_08005984",
            "code": "\nint getCallResult_08005984(int inputTicks)\n\n{\n  uint32_t callResult;\n  int localTicks;\n  \n  if (isHyperCallDisabled == 0) {\n    callResult = aflCall(1,inputTicks,0);\n  }\n  else {\n    callResult = 0;\n  }\n  return callResult;\n}\n\n",
            "renaming": {
                "FUN_08005984": "get_call_result_08005984",
                "ticks": "inputTicks",
                "uVar1": "callResult",
                "ticks_local": "localTicks",
                "noHyperCall": "isHyperCallDisabled"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nSystemStatus initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configureSysTick(16000);\n  setInterruptPriorityGrouping(3);\n  initializeMSP();\n  return OperationSuccessful;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_StatusTypeDef": "SystemStatus",
                "HAL_SYSTICK_Config": "configureSysTick",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_MspInit": "initializeMSP",
                "HAL_OK": "OperationSuccessful"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "deinitialize_hal_080059f8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef deinitialize_HAL_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  deinitialize_HAL_080059f8_MspDeInit();\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "deinitialize_hal_080059f8",
                "HAL_MspDeInit": "deinitialize_HAL_MspDeInit"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_tick_08005a68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid incrementTick_08005a68(void)\n\n{\n  tick = tick + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_tick_08005a68",
                "uwTick": "tick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_system_tick_08005a84",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_08005a84(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_system_tick_08005a84",
                "uwTick": "systemTick"
            },
            "calling": [
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "SysTick_Handler",
                "HAL_RCC_OscConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_function_08005a98",
            "code": "\nvoid delayFunction_08005a98(uint32_t delayTime)\n\n{\n  uint32_t startTime;\n  uint32_t currentTime;\n  uint32_t delayLocal;\n  uint32_t timingDelay;\n  \n  startTime = HAL_GetTick();\n  do {\n    currentTime = HAL_GetTick();\n  } while (currentTime < delayTime + startTime);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "Delay": "delayTime",
                "uVar1": "startTime",
                "uVar2": "currentTime",
                "Delay_local": "delayLocal",
                "timingdelay": "timingDelay"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ac4": {
            "entrypoint": "0x08005ac4",
            "current_name": "get_base_value_08005ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getBaseValue_08005ac4(void)\n\n{\n  return 0x1000000;\n}\n\n",
            "renaming": {
                "FUN_08005ac4": "get_base_value_08005ac4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ad4": {
            "entrypoint": "0x08005ad4",
            "current_name": "get_upper_word_08005ad4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_upper_word_08005ad4(void)\n\n{\n  return _DAT_e0042000 >> 0x10;\n}\n\n",
            "renaming": {
                "FUN_08005ad4": "get_upper_word_08005ad4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aec": {
            "entrypoint": "0x08005aec",
            "current_name": "get_lowest_12_bits_08005aec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_lowest_12_bits_08005aec(void)\n\n{\n  return _DAT_e0042000 & 0xfff;\n}\n\n",
            "renaming": {
                "FUN_08005aec": "get_lowest_12_bits_08005aec"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b04": {
            "entrypoint": "0x08005b04",
            "current_name": "set_flag_08005b04",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlag_08005b04(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b04": "set_flag_08005b04"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b20": {
            "entrypoint": "0x08005b20",
            "current_name": "clear_lowest_bit_08005b20",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearLowestBit_08005b20(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffe;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b20": "clear_lowest_bit_08005b20"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_flag_08005b3c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlag_08005b3c(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_flag_08005b3c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b58": {
            "entrypoint": "0x08005b58",
            "current_name": "set_flag_to_false_08005b58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlagToFalse_08005b58(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffd;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b58": "set_flag_to_false_08005b58"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b74": {
            "entrypoint": "0x08005b74",
            "current_name": "set_flag_bits_08005b74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlagBits_08005b74(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b74": "set_flag_bits_08005b74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b90": {
            "entrypoint": "0x08005b90",
            "current_name": "clear_interrupt_flag_08005b90",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clearInterruptFlag_08005b90(void)\n\n{\n  _DAT_e0042004 = _DAT_e0042004 & 0xfffffffb;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b90": "clear_interrupt_flag_08005b90"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bac": {
            "entrypoint": "0x08005bac",
            "current_name": "initialize_data_08005bac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeData_08005bac(void)\n\n{\n  _DAT_42270400 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bac": "initialize_data_08005bac"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc4": {
            "entrypoint": "0x08005bc4",
            "current_name": "initialize_data_08005bc4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeData_08005bc4(void)\n\n{\n  _DAT_42270400 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bc4": "initialize_data_08005bc4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "set_priority_08005bdc",
            "code": "\nvoid setPriority_08005bdc(interruptNumber_Type interruptNumber,uint32_t newPriority)\n\n{\n  uint32_t localPriority;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    *(char *)(((byte)interruptNumber & 0xf) + 0xe000ed14) = (char)((newPriority & 0xff) << 4);\n  }\n  else {\n    *(char *)(interruptNumber + -0x1fff1c00) = (char)((newPriority & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "set_priority_08005bdc",
                "IRQn": "interruptNumber",
                "priority": "newPriority",
                "priority_local": "localPriority",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "SysTick_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_tick_validity_08005c30",
            "code": "\n\n\nuint32_t checkTickValidity_08005c30(uint32_t inputTicks)\n\n{\n  bool isTickValid;\n  uint32_t validatedTicks;\n  \n  isTickValid = inputTicks - 1 < 0x1000000;\n  if (isTickValid) {\n    _DAT_e000e014 = inputTicks - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isTickValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_tick_validity_08005c30",
                "ticks": "inputTicks",
                "bVar1": "isTickValid",
                "ticks_local": "validatedTicks"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c74": {
            "entrypoint": "0x08005c74",
            "current_name": "initialize_memory_08005c74",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeMemory_08005c74(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x4003010;\n  _DAT_40023884 = 0x20003000;\n  _DAT_40023800 = _DAT_40023800 & 0xfaf2ffff | 0x81;\n  _DAT_4002380c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c74": "initialize_memory_08005c74"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "initialize_oscillators_08005cec",
            "code": "\n\n\nHAL_StatusTypeDef initializeOscillators_08005cec(RCC_OscInitTypeDef *initConfig)\n\n{\n  uint32_t startTick;\n  uint32_t currentTick;\n  RCC_OscInitTypeDef *localConfig;\n  uint32_t result2;\n  uint32_t result3;\n  uint32_t result4;\n  uint32_t result5;\n  uint32_t result6;\n  uint32_t result7;\n  uint32_t result1;\n  uint32_t result1;\n  uint32_t timeout;\n  \n  if ((initConfig->OscillatorType & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (initConfig->HSEState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = CONCAT12((char)initConfig->HSEState,_DAT_40023800);\n      if (initConfig->HSEState == 1) {\n        startTick = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTick = HAL_GetTick();\n          if (startTick + 5000 <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTick = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTick = HAL_GetTick();\n          if (startTick + 5000 <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((initConfig->OscillatorType & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (initConfig->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else if (initConfig->HSIState == 0) {\n      _DAT_42470000 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023800 = initConfig->HSICalibrationValue << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((initConfig->OscillatorType & 8) != 0) {\n    if (initConfig->LSIState == 0) {\n      _DAT_42470e80 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((initConfig->OscillatorType & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    startTick = HAL_GetTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      currentTick = HAL_GetTick();\n      if (startTick + 100 <= currentTick) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    startTick = HAL_GetTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      currentTick = HAL_GetTick();\n      if (startTick + 5000 <= currentTick) {\n        return HAL_TIMEOUT;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)initConfig->LSEState);\n    if (initConfig->LSEState == 1) {\n      startTick = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTick = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 5000 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((initConfig->PLL).PLLState != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return HAL_ERROR;\n    }\n    if ((initConfig->PLL).PLLState == 2) {\n      _DAT_42470060 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40023804 =\n           (initConfig->PLL).PLLQ << 0x18 |\n           (initConfig->PLL).PLLM | (initConfig->PLL).PLLN << 6 |\n           (((initConfig->PLL).PLLP >> 1) - 1) * 0x10000 | (initConfig->PLL).PLLSource\n           | 0x20000000;\n      _DAT_42470060 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTick = HAL_GetTick();\n        if (startTick + 100 <= currentTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "initialize_oscillators_08005cec",
                "RCC_OscInitStruct": "initConfig",
                "uVar1": "startTick",
                "uVar2": "currentTick",
                "RCC_OscInitStruct_local": "localConfig",
                "result_2": "result2",
                "result_3": "result3",
                "result_4": "result4",
                "result_5": "result5",
                "result_6": "result6",
                "result_7": "result7",
                "result": "result1",
                "result_1": "result1"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "configure_clocks_0800618c",
            "code": "\n\n\nHAL_StatusTypeDef configureClocks_0800618c(RCC_ClkInitTypeDef *clockInitStruct,uint32_t latency)\n\n{\n  uint32_t currentTick;\n  uint timeoutTick;\n  uint32_t localLatency;\n  RCC_ClkInitTypeDef *localClockInitStruct;\n  uint32_t timeout;\n  \n  if ((_DAT_40023c00 & 0xf) < latency) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((clockInitStruct->SYSCLKSource != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      currentTick = getTick();\n      timeoutTick = currentTick + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((clockInitStruct->ClockType & 1) != 0) {\n      if (clockInitStruct->SYSCLKSource == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return HAL_ERROR;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return HAL_ERROR;\n      }\n      _DAT_40023808 = clockInitStruct->SYSCLKSource | _DAT_40023808 & 0xfffffffc;\n      currentTick = getTick();\n      timeoutTick = currentTick + 5000;\n      if (clockInitStruct->SYSCLKSource == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTick = getTick();\n          if (timeoutTick <= currentTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)latency);\n    if (latency != (latency & 0xf)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitStruct->ClockType & 2) != 0) {\n    _DAT_40023808 = clockInitStruct->AHBCLKDivider | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((clockInitStruct->ClockType & 4) != 0) {\n    _DAT_40023808 = clockInitStruct->APB1CLKDivider | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((clockInitStruct->ClockType & 8) != 0) {\n    _DAT_40023808 = clockInitStruct->APB2CLKDivider << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  currentTick = getHCLKFrequency();\n  SysTick_Config(currentTick / 1000);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "configure_clocks_0800618c",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "latency",
                "uVar1": "currentTick",
                "uVar2": "timeoutTick",
                "FLatency_local": "localLatency",
                "RCC_ClkInitStruct_local": "localClockInitStruct",
                "HAL_GetTick()": "getTick()",
                "HAL_RCC_GetHCLKFreq()": "getHCLKFrequency()"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "SysTick_Config",
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "configure_rcc_mco_0800640c",
            "code": "\n\n\nvoid configure_RCC_MCO_0800640c(uint32_t MCOx,uint32_t MCOSource,uint32_t MCODiv)\n\n{\n  uint32_t MCODiv_local;\n  uint32_t MCOSource_local;\n  uint32_t MCOx_local;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  if (MCOx == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    gpio_init_struct.Pin = 0x100;\n    gpio_init_struct.Mode = 2;\n    gpio_init_struct.Speed = 3;\n    gpio_init_struct.Pull = 0;\n    gpio_init_struct.Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020000,&gpio_init_struct);\n    _DAT_40023808 = MCODiv | MCOSource | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    gpio_init_struct.Pin = 0x200;\n    gpio_init_struct.Mode = 2;\n    gpio_init_struct.Speed = 3;\n    gpio_init_struct.Pull = 0;\n    gpio_init_struct.Alternate = 0;\n    HAL_GPIO_Init((GPIO_TypeDef *)0x40020800,&gpio_init_struct);\n    _DAT_40023808 = MCOSource | MCODiv << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "configure_rcc_mco_0800640c",
                "RCC_MCOx": "MCOx",
                "RCC_MCOSource": "MCOSource",
                "RCC_MCODiv": "MCODiv",
                "RCC_MCODiv_local": "MCODiv_local",
                "RCC_MCOSource_local": "MCOSource_local",
                "RCC_MCOx_local": "MCOx_local",
                "GPIO_InitStruct": "gpio_init_struct"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064bc": {
            "entrypoint": "0x080064bc",
            "current_name": "set_flag_080064bc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setFlag_080064bc(void)\n\n{\n  _DAT_4247004c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064bc": "set_flag_080064bc"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064d4": {
            "entrypoint": "0x080064d4",
            "current_name": "initialize_data_080064d4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeData_080064d4(void)\n\n{\n  _DAT_4247004c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064d4": "initialize_data_080064d4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_sys_clock_frequency_080064ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSysClockFrequency_080064ec(void)\n\n{\n  uint clockConfig;\n  uint32_t resultA;\n  uint32_t resultB;\n  uint32_t resultC;\n  uint32_t resultD;\n  uint32_t resultE;\n  uint32_t resultF;\n  uint32_t resultG;\n  uint32_t resultH;\n  uint32_t pllp;\n  uint32_t pllm;\n  uint32_t sysClockFreq;\n  uint32_t pllvco;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      pllvco = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllvco = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return pllvco / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_sys_clock_frequency_080064ec",
                "uVar1": "clockConfig",
                "result_6": "resultA",
                "result_7": "resultB",
                "result_4": "resultC",
                "result_5": "resultD",
                "result_2": "resultE",
                "result_3": "resultF",
                "result": "resultG",
                "result_1": "resultH",
                "sysclockfreq": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_sys_clock_frequency_08006628",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t GetSysClockFrequency_08006628(void)\n\n{\n  uint32_t sysClockFreq;\n  uint32_t sysClockDivided;\n  uint32_t sysClockDividedCopy;\n  \n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  SystemCoreClock = sysClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n  return sysClockFreq >> \"\"[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_sys_clock_frequency_08006628",
                "uVar1": "sysClockFreq",
                "result": "sysClockDivided",
                "result_1": "sysClockDividedCopy"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_clock_frequency_08006680",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getClockFrequency_08006680(void)\n\n{\n  uint32_t hclkFreq;\n  uint32_t shiftedValue;\n  uint32_t finalValue;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_clock_frequency_08006680",
                "uVar1": "hclkFreq",
                "result": "shiftedValue",
                "result_1": "finalValue"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_adjusted_hclk_freq_080066cc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateAdjustedHCLKFreq_080066cc(void)\n\n{\n  uint32_t hclkFreq;\n  uint32_t adjustedHCLKFreq;\n  uint32_t bitShiftedHCLKFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_adjusted_hclk_freq_080066cc",
                "uVar1": "hclkFreq",
                "result": "adjustedHCLKFreq",
                "result_1": "bitShiftedHCLKFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006718": {
            "entrypoint": "0x08006718",
            "current_name": "initialize_rcc_08006718",
            "code": "\n\n\nvoid initializeRCC_08006718(RCC_OscInitTypeDef *RCC_InitConfig)\n\n{\n  RCC_OscInitTypeDef *RCC_InitConfig_local;\n  uint32_t result_2;\n  uint32_t result_3;\n  uint32_t result_4;\n  uint32_t result_5;\n  uint32_t result_6;\n  uint32_t result_7;\n  uint32_t result;\n  uint32_t result_1;\n  \n  RCC_InitConfig->OscillatorType = 0xf;\n  if ((_DAT_40023800 & 0x40000) == 0x40000) {\n    RCC_InitConfig->HSEState = 5;\n  }\n  else if ((_DAT_40023800 & 0x10000) == 0x10000) {\n    RCC_InitConfig->HSEState = 1;\n  }\n  else {\n    RCC_InitConfig->HSEState = 0;\n  }\n  if ((_DAT_40023800 & 1) == 1) {\n    RCC_InitConfig->HSIState = 1;\n  }\n  else {\n    RCC_InitConfig->HSIState = 0;\n  }\n  RCC_InitConfig->HSICalibrationValue = (_DAT_40023800 & 0xf8) >> 3;\n  if ((_DAT_40023870 & 4) == 4) {\n    RCC_InitConfig->LSEState = 5;\n  }\n  else if ((_DAT_40023870 & 1) == 1) {\n    RCC_InitConfig->LSEState = 1;\n  }\n  else {\n    RCC_InitConfig->LSEState = 0;\n  }\n  if ((_DAT_40023874 & 1) == 1) {\n    RCC_InitConfig->LSIState = 1;\n  }\n  else {\n    RCC_InitConfig->LSIState = 0;\n  }\n  if ((_DAT_40023800 & 0x1000000) == 0x1000000) {\n    (RCC_InitConfig->PLL).PLLState = 2;\n  }\n  else {\n    (RCC_InitConfig->PLL).PLLState = 1;\n  }\n  (RCC_InitConfig->PLL).PLLSource = _DAT_40023804 & 0x400000;\n  (RCC_InitConfig->PLL).PLLM = _DAT_40023804 & 0x3f;\n  (RCC_InitConfig->PLL).PLLN = (_DAT_40023804 & 0x7fc0) >> 6;\n  (RCC_InitConfig->PLL).PLLP = ((_DAT_40023804 & 0x30000) + 0x10000) * 2 >> 0x10;\n  (RCC_InitConfig->PLL).PLLQ = (_DAT_40023804 & 0xf000000) >> 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006718": "initialize_rcc_08006718",
                "RCC_OscInitStruct": "RCC_InitConfig",
                "RCC_OscInitStruct_local": "RCC_InitConfig_local"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068bc": {
            "entrypoint": "0x080068bc",
            "current_name": "initialize_clock_configuration_080068bc",
            "code": "\n\n\nvoid initializeClockConfiguration_080068bc(RCC_ClkInitTypeDef *clockConfig,uint32_t *flashLatency)\n\n{\n  uint32_t *localFlashLatency;\n  RCC_ClkInitTypeDef *localClockConfig;\n  \n  clockConfig->ClockType = 0xf;\n  clockConfig->SYSCLKSource = _DAT_40023808 & 3;\n  clockConfig->AHBCLKDivider = _DAT_40023808 & 0xf0;\n  clockConfig->APB1CLKDivider = _DAT_40023808 & 0x1c00;\n  clockConfig->APB2CLKDivider = _DAT_40023808 >> 3 & 0x1c00;\n  *flashLatency = _DAT_40023c00 & 0xf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068bc": "initialize_clock_configuration_080068bc",
                "RCC_ClkInitStruct": "clockConfig",
                "pFLatency": "flashLatency",
                "pFLatency_local": "localFlashLatency",
                "RCC_ClkInitStruct_local": "localClockConfig"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800691c": {
            "entrypoint": "0x0800691c",
            "current_name": "handle_interrupt_0800691c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupt_0800691c(void)\n\n{\n  if ((_DAT_4002380c & 0x80) == 0x80) {\n    handleCCSCallback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800691c": "handle_interrupt_0800691c",
                "HAL_RCC_CCSCallback": "handleCCSCallback"
            },
            "calling": [],
            "called": [
                "HAL_RCC_CCSCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006944": {
            "entrypoint": "0x08006944",
            "current_name": "FUNC_08006944",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006944(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006944": "FUNC_08006944"
            },
            "calling": [
                "HAL_RCC_NMI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "configure_priority_group_08006950",
            "code": "\n\n\nvoid configurePriorityGroup_08006950(uint32_t priorityGroup)\n\n{\n  uint32_t localPriorityGroup;\n  uint32_t registerValue;\n  uint32_t temporaryPriorityGroup;\n  \n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (priorityGroup & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "configure_priority_group_08006950",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "localPriorityGroup",
                "reg_value": "registerValue",
                "PriorityGroupTmp": "temporaryPriorityGroup"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_bitmask_value_08006998",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t get_bitmask_value_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_bitmask_value_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_interrupt_enabled_080069b4",
            "code": "\nvoid setInterruptEnabled_080069b4(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)(((uint)(int)interruptNumber >> 5) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_interrupt_enabled_080069b4",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_irq_enabled_080069e4",
            "code": "\nvoid setIRQEnabled_080069e4(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)((((uint)(int)interruptNumber >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_irq_enabled_080069e4",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_irq_status_08006a18",
            "code": "\nuint32_t checkIRQStatus_08006a18(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  return (uint)((*(uint *)((((uint)(int)interruptNumber >> 5) + 0x40) * 4 + -0x1fff1f00) & 1 << (interruptNumber & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_irq_status_08006a18",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_interrupt_08006a58",
            "code": "\nvoid setInterrupt_08006a58(interruptType_Type interruptType)\n\n{\n  interruptType_Type localInterruptType;\n  \n  *(int *)((((uint)(int)interruptType >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (interruptType & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_interrupt_08006a58",
                "IRQn": "interruptType",
                "IRQn_local": "localInterruptType"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_ir_qn_priority_08006a8c",
            "code": "\nvoid setIRQnPriority_08006a8c(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  *(int *)((((uint)(int)interruptNumber >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_ir_qn_priority_08006a8c",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_ir_qn_flag_08006ac0",
            "code": "\nuint32_t checkIRQnFlag_08006ac0(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  return (uint)((*(uint *)((((uint)(int)interruptNumber >> 5) + 0x80) * 4 + -0x1fff1f00) & 1 << (interruptNumber & 0x1fU))\n               != 0);\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_ir_qn_flag_08006ac0",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "set_priority_level_08006b00",
            "code": "\nvoid setPriorityLevel_08006b00(interruptNumber_Type interruptNumber,uint32_t priorityLevel)\n\n{\n  uint32_t localPriority;\n  interruptNumber_Type localInterruptNumber;\n  \n  if (interruptNumber < WWDG_interruptNumber) {\n    *(char *)(((byte)interruptNumber & 0xf) + 0xe000ed14) = (char)((priorityLevel & 0xff) << 4);\n  }\n  else {\n    *(char *)(interruptNumber + -0x1fff1c00) = (char)((priorityLevel & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "set_priority_level_08006b00",
                "IRQn": "interruptNumber",
                "priority": "priorityLevel",
                "priority_local": "localPriority",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "get_ir_qn_priority_08006b54",
            "code": "\nuint32_t getIRQnPriority_08006b54(interrupt_Type interrupt)\n\n{\n  byte priority;\n  interrupt_Type localInterrupt;\n  \n  if (interrupt < WWDG_interrupt) {\n    priority = *(byte *)(((byte)interrupt & 0xf) + 0xe000ed14);\n  }\n  else {\n    priority = *(byte *)(interrupt + -0x1fff1c00);\n  }\n  return (uint)(priority >> 4);\n}\n\n",
            "renaming": {
                "FUN_08006b54": "get_ir_qn_priority_08006b54",
                "IRQn": "interrupt",
                "bVar1": "priority",
                "IRQn_local": "localInterrupt"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "calculate_priority_08006ba0",
            "code": "\nuint32_t calculatePriority_08006ba0(uint32_t priorityGroup,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint groupMask;\n  uint prioritiesRemaining;\n  uint32_t subPriorityLocal;\n  uint32_t preemptPriorityLocal;\n  uint32_t priorityGroupLocal;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  groupMask = priorityGroup & 7;\n  prioritiesRemaining = 7 - groupMask;\n  if (3 < prioritiesRemaining) {\n    prioritiesRemaining = 4;\n  }\n  if (groupMask + 4 < 7) {\n    groupMask = 0;\n  }\n  else {\n    groupMask = groupMask - 3;\n  }\n  return subPriority & (1 << (groupMask & 0xff)) - 1U |\n         ((1 << (prioritiesRemaining & 0xff)) - 1U & preemptPriority) << (groupMask & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "calculate_priority_08006ba0",
                "PriorityGroup": "priorityGroup",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "SubPriority_local": "subPriorityLocal",
                "PreemptPriority_local": "preemptPriorityLocal",
                "PriorityGroup_local": "priorityGroupLocal",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp",
                "uVar1": "groupMask",
                "uVar2": "prioritiesRemaining"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "calculate_priority_sub_and_preempt_08006c04",
            "code": "\nvoid calculatePrioritySubAndPreempt_08006c04(uint32_t inputPriority,uint32_t inputPriorityGroup,uint32_t *preemptPriorityPointer,\n                 uint32_t *subPriorityPointer)\n\n{\n  uint groupBits;\n  uint remainingBits;\n  uint32_t *subPriorityPointer_local;\n  uint32_t *preemptPriorityPointer_local;\n  uint32_t priorityGroup_local;\n  uint32_t priority_local;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  uint32_t priorityGroupTmp;\n  \n  groupBits = inputPriorityGroup & 7;\n  remainingBits = 7 - groupBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (groupBits + 4 < 7) {\n    groupBits = 0;\n  }\n  else {\n    groupBits = groupBits - 3;\n  }\n  *preemptPriorityPointer = (1 << (remainingBits & 0xff)) - 1U & inputPriority >> (groupBits & 0xff);\n  *subPriorityPointer = (1 << (groupBits & 0xff)) - 1U & inputPriority;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "calculate_priority_sub_and_preempt_08006c04",
                "Priority": "inputPriority",
                "PriorityGroup": "inputPriorityGroup",
                "pPreemptPriority": "preemptPriorityPointer",
                "pSubPriority": "subPriorityPointer",
                "uVar1": "groupBits",
                "uVar2": "remainingBits",
                "pSubPriority_local": "subPriorityPointer_local",
                "pPreemptPriority_local": "preemptPriorityPointer_local",
                "PriorityGroup_local": "priorityGroup_local",
                "Priority_local": "priority_local",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTmp"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "keep_looping_indefinitely_08006c70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid keep_looping_indefinitely_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "keep_looping_indefinitely_08006c70",
                "DataSynchronizationBarrier": "sync_barrier"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_set_sys_tick_priority_08006c9c",
            "code": "\n\n\nuint32_t checkAndSetSysTickPriority_08006c9c(uint32_t ticksToDecrement)\n\n{\n  bool isWithinRange;\n  uint32_t localTicks;\n  \n  isWithinRange = ticksToDecrement - 1 < 0x1000000;\n  if (isWithinRange) {\n    _DAT_e000e014 = ticksToDecrement - 1;\n    NVIC_SetPriority(SysTick_IRQn,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return (uint)!isWithinRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_set_sys_tick_priority_08006c9c",
                "ticks": "ticksToDecrement",
                "bVar1": "isWithinRange",
                "ticks_local": "localTicks"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_group_08006ce0",
            "code": "\nvoid setPriorityGroup_08006ce0(uint32_t priorityGroup)\n\n{\n  uint32_t priorityGroup_local;\n  \n  NVIC_SetpriorityGrouping(priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_group_08006ce0",
                "PriorityGroup": "priorityGroup",
                "PriorityGroup_local": "priorityGroup_local"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_irq_priority_08006cf6",
            "code": "\nvoid setIRQPriority_08006cf6(interruptNumber_Type interruptNumber,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint32_t priorityGroup;\n  uint32_t subPriority_local;\n  uint32_t preemptPriority_local;\n  interruptNumber_Type interruptNumber_local;\n  uint32_t priorityGrouping;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  priorityGroup = NVIC_EncodePriority(priorityGroup,preemptPriority,subPriority);\n  NVIC_SetPriority(interruptNumber,priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_irq_priority_08006cf6",
                "IRQn": "interruptNumber",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGroup",
                "SubPriority_local": "subPriority_local",
                "PreemptPriority_local": "preemptPriority_local",
                "IRQn_local": "interruptNumber_local",
                "prioritygroup": "priorityGrouping"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_EncodePriority",
                "NVIC_SetPriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "enable_interrupt_08006d2e",
            "code": "\nvoid enableInterrupt_08006d2e(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  NVIC_EnableIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "enable_interrupt_08006d2e",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_EnableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_irq_08006d4a",
            "code": "\nvoid disableIRQ_08006d4a(interruptNumber_Type interruptNumber)\n\n{\n  interruptNumber_Type localInterruptNumber;\n  \n  NVIC_DisableIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_irq_08006d4a",
                "IRQn": "interruptNumber",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetSystem_08006d66(void)\n\n{\n  resetInterrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "resetInterrupts"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "configure_sys_tick_08006d72",
            "code": "\nuint32_t configureSysTick_08006d72(uint32_t ticksNumber)\n\n{\n  uint32_t configStatus;\n  uint32_t localTicksNumber;\n  \n  configStatus = SysTick_Config(ticksNumber);\n  return configStatus;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "configure_sys_tick_08006d72",
                "TicksNumb": "ticksNumber",
                "uVar1": "configStatus",
                "TicksNumb_local": "localTicksNumber"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPriorityGrouping_08006d8a(void)\n\n{\n  uint32_t priorityGrouping;\n  \n  priorityGrouping = NVIC_GetPriorityGrouping();\n  return priorityGrouping;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priorityGrouping"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_interrupt_priority_08006d98",
            "code": "\nvoid decodeInterruptPriority_08006d98(interruptType_Type interruptType,uint32_t priorityGroup,uint32_t *preemptPriority,\n                 uint32_t *subPriority)\n\n{\n  uint32_t interruptPriority;\n  uint32_t *localSubPriority;\n  uint32_t *localPreemptPriority;\n  uint32_t localPriorityGroup;\n  interruptType_Type localInterruptType;\n  \n  interruptPriority = NVIC_GetinterruptPriority(interruptType);\n  NVIC_DecodeinterruptPriority(interruptPriority,priorityGroup,preemptPriority,subPriority);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_interrupt_priority_08006d98",
                "IRQn": "interruptType",
                "PriorityGroup": "priorityGroup",
                "pPreemptPriority": "preemptPriority",
                "pSubPriority": "subPriority",
                "Priority": "interruptPriority",
                "pSubPriority_local": "localSubPriority",
                "pPreemptPriority_local": "localPreemptPriority",
                "PriorityGroup_local": "localPriorityGroup",
                "IRQn_local": "localInterruptType"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid setPendingIRQ_08006dc4(irqNumber_Type irqNumber)\n\n{\n  irqNumber_Type localIRQn;\n  \n  NVIC_SetPendingIRQ(irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "IRQn": "irqNumber",
                "IRQn_local": "localIRQn"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nuint32_t getPendingIRQStatus_08006de0(interrupt_Type interrupt)\n\n{\n  uint32_t pendingIRQStatus;\n  interrupt_Type localInterrupt;\n  \n  pendingIRQStatus = NVIC_GetPendingIRQ(interrupt);\n  return pendingIRQStatus;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "IRQn": "interrupt",
                "IRQn_local": "localInterrupt",
                "uVar1": "pendingIRQStatus"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clearPendingIRQ_08006dfe(interruptType_Type interruptType)\n\n{\n  interruptType_Type localInterruptType;\n  \n  NVIC_ClearPendingIRQ(interruptType);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "IRQn": "interruptType",
                "IRQn_local": "localInterruptType"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_08006e1a",
            "code": "\nuint32_t getActiveInterrupt_08006e1a(interruptNumber_Type interruptNumber)\n\n{\n  uint32_t activeStatus;\n  interruptNumber_Type localInterruptNumber;\n  \n  activeStatus = NVIC_GetActive(interruptNumber);\n  return activeStatus;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "IRQn": "interruptNumber",
                "uVar1": "activeStatus",
                "IRQn_local": "localInterruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e38": {
            "entrypoint": "0x08006e38",
            "current_name": "configure_clk_source_08006e38",
            "code": "\n\n\nvoid configureCLKSource_08006e38(uint32_t inputSource)\n\n{\n  uint32_t localSource;\n  \n  if (inputSource == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e38": "configure_clk_source_08006e38",
                "CLKSource": "inputSource",
                "CLKSource_local": "localSource"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e70": {
            "entrypoint": "0x08006e70",
            "current_name": "update_system_tick_callback_08006e70",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateSystemTickCallback_08006e70(void)\n\n{\n  systemTickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e70": "update_system_tick_callback_08006e70",
                "HAL_SYSTICK_Callback": "systemTickHandler"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e7c": {
            "entrypoint": "0x08006e7c",
            "current_name": "FUNC_08006e7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08006e7c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e7c": "FUNC_08006e7c"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "configure_gpio_08006e88",
            "code": "\n\n\nvoid configureGPIO_08006e88(GPIO_TypeDef *gpioPort,gpioConfigTypeDef *gpioConfig)\n\n{\n  uint32_t alternate;\n  uint mask;\n  uint pinValue;\n  int portIndex;\n  gpioConfigTypeDef *localConfig;\n  GPIO_TypeDef *localPort;\n  uint32_t temp;\n  uint32_t iocurrent;\n  uint32_t ioposition;\n  uint32_t position;\n  \n  for (position = 0; position < 0x10; position = position + 1) {\n    mask = 1 << (position & 0xff);\n    pinValue = gpioConfig->Pin & mask;\n    if (pinValue == mask) {\n      if ((gpioConfig->Mode == 2) || (gpioConfig->Mode == 0x12)) {\n        alternate = gpioConfig->Alternate;\n        gpioPort->AFR[position >> 3] = gpioPort->AFR[position >> 3] & ~(0xf << ((position & 7) << 2));\n        gpioPort->AFR[position >> 3] = gpioPort->AFR[position >> 3] | alternate << ((position & 7) << 2);\n      }\n      gpioPort->MODER = gpioPort->MODER & ~(3 << ((position & 0x7f) << 1));\n      gpioPort->MODER = gpioPort->MODER | (gpioConfig->Mode & 3) << ((position & 0x7f) << 1);\n      if ((((gpioConfig->Mode == 1) || (gpioConfig->Mode == 2)) || (gpioConfig->Mode == 0x11)) ||\n         (gpioConfig->Mode == 0x12)) {\n        gpioPort->OSPEEDR = gpioPort->OSPEEDR & ~(3 << ((position & 0x7f) << 1));\n        gpioPort->OSPEEDR = gpioPort->OSPEEDR | gpioConfig->Speed << ((position & 0x7f) << 1);\n        gpioPort->OTYPER = gpioPort->OTYPER & ~(1 << (position & 0xff));\n        gpioPort->OTYPER = gpioPort->OTYPER | (gpioConfig->Mode >> 4 & 1) << (position & 0xff);\n      }\n      gpioPort->PUPDR = gpioPort->PUPDR & ~(3 << ((position & 0x7f) << 1));\n      gpioPort->PUPDR = gpioPort->PUPDR | gpioConfig->Pull << ((position & 0x7f) << 1);\n      if ((gpioConfig->Mode & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((position & 3) << 2)) & *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n        if (gpioPort == (GPIO_TypeDef *)0x40020000) {\n          portIndex = 0;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40020400) {\n          portIndex = 1;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40020800) {\n          portIndex = 2;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40020c00) {\n          portIndex = 3;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40021000) {\n          portIndex = 4;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40021400) {\n          portIndex = 5;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40021800) {\n          portIndex = 6;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40021c00) {\n          portIndex = 7;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40022000) {\n          portIndex = 8;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40022400) {\n          portIndex = 9;\n        }\n        else {\n          portIndex = 10;\n        }\n        *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n             portIndex << ((position & 3) << 2) | *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~pinValue & _DAT_40013c00;\n        _DAT_40013c04 = ~pinValue & _DAT_40013c04;\n        if ((gpioConfig->Mode & 0x10000) != 0) {\n          _DAT_40013c00 = pinValue | _DAT_40013c00;\n        }\n        if ((gpioConfig->Mode & 0x20000) != 0) {\n          _DAT_40013c04 = pinValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~pinValue & _DAT_40013c08;\n        _DAT_40013c0c = ~pinValue & _DAT_40013c0c;\n        if ((gpioConfig->Mode & 0x100000) != 0) {\n          _DAT_40013c08 = pinValue | _DAT_40013c08;\n        }\n        if ((gpioConfig->Mode & 0x200000) != 0) {\n          _DAT_40013c0c = pinValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "configure_gpio_08006e88",
                "GPIOx": "gpioPort",
                "GPIO_Init": "gpioConfig",
                "GPIO_Init_local": "localConfig",
                "GPIOx_local": "localPort",
                "uVar1": "alternate",
                "uVar2": "mask",
                "uVar3": "pinValue",
                "iVar4": "portIndex"
            },
            "calling": [
                "gpio_init",
                "HAL_RCC_MCOConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071d0": {
            "entrypoint": "0x080071d0",
            "current_name": "configure_gpio_080071d0",
            "code": "\n\n\nvoid configureGPIO_080071d0(GPIO_TypeDef *gpio,uint32_t pin)\n\n{\n  uint bitMask;\n  uint result;\n  uint32_t localPin;\n  GPIO_TypeDef *localGPIO;\n  uint32_t temporary;\n  uint32_t currentIO;\n  uint32_t positionIO;\n  uint32_t position;\n  \n  for (position = 0; position < 0x10; position = position + 1) {\n    bitMask = 1 << (position & 0xff);\n    result = bitMask & pin;\n    if (result == bitMask) {\n      gpio->MODER = gpio->MODER & ~(3 << ((position & 0x7f) << 1));\n      gpio->AFR[position >> 3] = gpio->AFR[position >> 3] & ~(0xf << ((position & 7) << 2));\n      gpio->OSPEEDR = gpio->OSPEEDR & ~(3 << ((position & 0x7f) << 1));\n      gpio->OTYPER = gpio->OTYPER & ~(1 << (position & 0xff));\n      gpio->PUPDR = gpio->PUPDR & ~(3 << ((position & 0x7f) << 1));\n      *(uint *)(((position >> 2) + 2) * 4 + 0x40013800) =\n           ~(0xf << ((position & 3) << 2)) & *(uint *)(((position >> 2) + 2) * 4 + 0x40013800);\n      _DAT_40013c00 = ~result & _DAT_40013c00;\n      _DAT_40013c04 = ~result & _DAT_40013c04;\n      _DAT_40013c08 = ~result & _DAT_40013c08;\n      _DAT_40013c0c = ~result & _DAT_40013c0c;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071d0": "configure_gpio_080071d0",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "GPIO_Pin_local": "localPin",
                "GPIOx_local": "localGPIO",
                "tmp": "temporary",
                "iocurrent": "currentIO",
                "ioposition": "positionIO",
                "uVar1": "bitMask",
                "uVar2": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007310": {
            "entrypoint": "0x08007310",
            "current_name": "check_gpio_pin_state_08007310",
            "code": "\npin_numberState check_GPIO_PinState_08007310(GPIO_TypeDef *GPIO_port,uint16_t pin_number)\n\n{\n  uint16_t local_pin_number;\n  GPIO_TypeDef *local_GPIO_port;\n  pin_numberState pin_state;\n  \n  return ((uint)pin_number & GPIO_port->IDR) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007310": "check_gpio_pin_state_08007310",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "GPIO_Pin_local": "local_pin_number",
                "GPIOx_local": "local_GPIO_port",
                "bitstatus": "pin_state"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "toggle_pin_state_0800733e",
            "code": "\nvoid togglePinState_0800733e(GPIO_TypeDef *gpioPort,uint16_t gpioPin,gpioPinState pinState)\n\n{\n  gpioPinState localPinState;\n  uint16_t localGpioPin;\n  GPIO_TypeDef *localGpioPort;\n  \n  if (pinState == GPIO_PIN_RESET) {\n    gpioPort->BSRRH = gpioPin;\n  }\n  else {\n    gpioPort->BSRRL = gpioPin;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "toggle_pin_state_0800733e",
                "GPIOx": "gpioPort",
                "GPIO_Pin": "gpioPin",
                "PinState": "pinState",
                "PinState_local": "localPinState",
                "GPIO_Pin_local": "localGpioPin",
                "GPIOx_local": "localGpioPort"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800736c": {
            "entrypoint": "0x0800736c",
            "current_name": "toggle_pin_state_0800736c",
            "code": "\nvoid toggle_pin_state_0800736c(GPIO_TypeDef *GPIO_port,uint16_t pin_number)\n\n{\n  uint16_t local_pin_number;\n  GPIO_TypeDef *local_GPIO_port;\n  \n  GPIO_port->ODR = GPIO_port->ODR ^ (uint)pin_number;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800736c": "toggle_pin_state_0800736c",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "GPIO_Pin_local": "local_pin_number",
                "GPIOx_local": "local_GPIO_port"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_gpio_pin_0800738e",
            "code": "\n\n\nvoid handle_GPIO_Pin_0800738e(uint16_t pin)\n\n{\n  uint16_t local_pin;\n  \n  if ((pin & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_gpio_pin_0800738e",
                "GPIO_Pin": "pin",
                "GPIO_Pin_local": "local_pin"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "initialize_gpio_080073c0",
            "code": "\nvoid initializeGPIO_080073c0(uint16_t pinNumber)\n\n{\n  uint16_t localPin;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "initialize_gpio_080073c0",
                "GPIO_Pin": "pinNumber",
                "GPIO_Pin_local": "localPin"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localNumber;\n  \n  *(short *)((inputNumber >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputNumber & 0xfU));\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "n": "inputNumber",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_off_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bits_in_memory_08007402",
            "code": "\nvoid setBitsInMemory_08007402(iinputNumbert inputNumber)\n\n{\n  iinputNumbert localNumber;\n  \n  *(short *)((inputNumber >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputNumber & 0xfU));\n  returinputNumber;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bits_in_memory_08007402",
                "n": "inputNumber",
                "n_local": "localNumber"
            },
            "calling": [
                "debounce_on_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_clock_08007436",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSystemClock_08007436(void)\n\n{\n  HAL_StatusTypeDef status;\n  RCC_OscInitTypeDef rccOscInit;\n  RCC_ClkInitTypeDef rccClkInit;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  rccOscInit.OscillatorType = 1;\n  rccOscInit.HSEState = 1;\n  rccOscInit.PLL.PLLState = 2;\n  rccOscInit.PLL.PLLSource = 0x400000;\n  rccOscInit.PLL.PLLM = 8;\n  rccOscInit.PLL.PLLN = 0x150;\n  rccOscInit.PLL.PLLP = 2;\n  rccOscInit.PLL.PLLQ = 7;\n  status = HAL_RCC_OscConfig(&rccOscInit);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  rccClkInit.ClockType = 0xf;\n  rccClkInit.SYSCLKSource = 2;\n  rccClkInit.AHBCLKDivider = 0;\n  rccClkInit.APB1CLKDivider = 0x1400;\n  rccClkInit.APB2CLKDivider = 0x1000;\n  status = HAL_RCC_ClockConfig(&rccClkInit,5);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_clock_08007436",
                "RCC_OscInitStruct": "rccOscInit",
                "RCC_ClkInitStruct": "rccClkInit",
                "HVar1": "status"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_RCC_ClockConfig",
                "Error_Handler",
                "HAL_RCC_OscConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_interrupt_080074c8",
            "code": "\nvoid handleInterrupt_080074c8(uint32_t interruptBits)\n\n{\n  uint32_t localBits;\n  \n  if ((interruptBits & 1) != 0) {\n    gpio_set(0x3e);\n  }\n  if ((limits_enabled != 0) && ((interruptBits & 0x1e) != 0)) {\n    limits_isr();\n  }\n  if ((buttons_enabled != 0) && ((interruptBits & 0x80) != 0)) {\n    buttons_isr(interruptBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_interrupt_080074c8",
                "bits": "interruptBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "limits_isr",
                "gpio_set",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_bit_08007520",
            "code": "\nvoid clearGpioBit_08007520(uint32_t inputBits)\n\n{\n  uint32_t localBits;\n  \n  if ((inputBits & 1) != 0) {\n    gpio_clr(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_bit_08007520",
                "bits": "inputBits",
                "bits_local": "localBits"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_controller_08007540",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeController_08007540(void)\n\n{\n  initializeHardwareAbstractionLayer();\n  configureSystemClock();\n  initializeGPIO();\n  initializeTimers();\n  initializeDebouncer();\n  initializeUSART();\n  startForkServer(0);\n  runGRBLMain();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_controller_08007540",
                "HAL_Init": "initializeHardwareAbstractionLayer",
                "SystemClock_Config": "configureSystemClock",
                "gpio_init": "initializeGPIO",
                "timers_init": "initializeTimers",
                "debounce_init": "initializeDebouncer",
                "usart_init": "initializeUSART",
                "startForkserver": "startForkServer",
                "grbl_main": "runGRBLMain"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "SystemClock_Config",
                "gpio_init",
                "grbl_main",
                "usart_init",
                "HAL_Init",
                "debounce_init",
                "timers_init",
                "startForkserver"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075c8": {
            "entrypoint": "0x080075c8",
            "current_name": "calculate_system_core_clock_080075c8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid calculateSystemCoreClock_080075c8(void)\n\n{\n  uint uVar1;\n  uint32_t pllMultiplier;\n  uint32_t pllSource;\n  uint32_t pllDivider;\n  uint32_t temporary;\n  uint32_t pllVCO;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 >> 0x16 & 1) == 0) {\n      pllVCO = (_DAT_40023804 >> 6 & 0x1ff) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      pllVCO = (_DAT_40023804 >> 6 & 0x1ff) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    systemCoreClock = pllVCO / (((_DAT_40023804 >> 0x10 & 3) + 1) * 2);\n    goto LAB_0800768a;\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      systemCoreClock = 16000000;\n      goto LAB_0800768a;\n    }\n    if (uVar1 == 4) {\n      systemCoreClock = 8000000;\n      goto LAB_0800768a;\n    }\n  }\n  systemCoreClock = 16000000;\nLAB_0800768a:\n  systemCoreClock = systemCoreClock >> ahbPrescalerTable[_DAT_40023808 >> 4 & 0xf];\n  return;\n}\n\n",
            "renaming": {
                "FUN_080075c8": "calculate_system_core_clock_080075c8",
                "pllm": "pllMultiplier",
                "pllsource": "pllSource",
                "pllp": "pllDivider",
                "tmp": "temporary",
                "pllvco": "pllVCO",
                "SystemCoreClock": "systemCoreClock",
                "AHBPrescTable": "ahbPrescalerTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "set_bit_in_memory_080076c8",
            "code": "\nvoid setBitInMemory_080076c8(iindext index)\n\n{\n  iindext result;\n  \n  *(uiindext *)((index >> 4) * 0x400 + 0x40020014) =\n       *(uiindext *)((index >> 4) * 0x400 + 0x40020014) ^ 1 << (index & 0xfU);\n  returindex;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "set_bit_in_memory_080076c8",
                "n": "index",
                "n_local": "result"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800770e": {
            "entrypoint": "0x0800770e",
            "current_name": "FUNC_0800770e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800770e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800770e": "FUNC_0800770e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800771a": {
            "entrypoint": "0x0800771a",
            "current_name": "endless_loop_0800771a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid endlessLoop_0800771a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800771a": "endless_loop_0800771a"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007720": {
            "entrypoint": "0x08007720",
            "current_name": "infinite_loop_08007720",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007720(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007720": "infinite_loop_08007720"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007726": {
            "entrypoint": "0x08007726",
            "current_name": "infinite_loop_08007726",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_08007726(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007726": "infinite_loop_08007726"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800772c": {
            "entrypoint": "0x0800772c",
            "current_name": "infinite_loop_0800772c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0800772c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800772c": "infinite_loop_0800772c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007732": {
            "entrypoint": "0x08007732",
            "current_name": "FUNC_08007732",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007732(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007732": "FUNC_08007732"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800773e": {
            "entrypoint": "0x0800773e",
            "current_name": "FUNC_0800773e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800773e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800773e": "FUNC_0800773e"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "FUNC_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800774a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "FUNC_0800774a"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "check_and_toggle_gpio_08007756",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndToggleGPIO_08007756(void)\n\n{\n  uint32_t currentTick;\n  uint32_t tickCount;\n  \n  currentTick = HAL_GetTick();\n  if ((currentTick & 0x1ff) == 0) {\n    gpio_toggle(0x3c);\n  }\n  if ((currentTick & 0xf) == 0) {\n    debounce_isr();\n  }\n  HAL_IncTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "check_and_toggle_gpio_08007756",
                "uVar1": "currentTick",
                "ticks": "tickCount"
            },
            "calling": [],
            "called": [
                "HAL_GetTick",
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeGPIO_0800778c(voindexd)\n\n{\n  GPIO_INFO *gpioInfoPointer;\n  GPIO_InindextTypeDef gpioInitStructure;\n  GPIO_INFO *currentGPIO;\n  indexnt index;\n  \n  for (index = 0; (uindexnt)index < 0x11; index = index + 1) {\n    gpioInfoPointer = currentGPIO_indexnfo + index;\n    _DAT_40023830 = _DAT_40023830 | 1 << (gpioInfoPointer->num >> 4 & 0xff);\n    gpioInitStructure.Pindexn = 1 << (gpioInfoPointer->num & 0xf);\n    gpioInitStructure.Mode = currentGPIO_indexnfo[index].mode;\n    gpioInitStructure.Pull = currentGPIO_indexnfo[index].pull;\n    gpioInitStructure.Speed = currentGPIO_indexnfo[index].speed;\n    gpioInitStructure.Alternate = currentGPIO_indexnfo[index].alt;\n    HAL_GPIO_Inindext((GPIO_TypeDef *)(((gpioInfoPointer->num >> 4) + 0x100080) * 0x400),&gpioInitStructure);\n    indexf (-1 < currentGPIO_indexnfo[index].indexnindext) {\n      HAL_GPIO_WrindextePindexn((GPIO_TypeDef *)(((gpioInfoPointer->num >> 4) + 0x100080) * 0x400),\n                        (uindexnt16_t)(1 << (gpioInfoPointer->num & 0xf)),(GPIO_PindexnState)currentGPIO_indexnfo[index].indexnindext);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "pGVar1": "gpioInfoPointer",
                "GPIO_InitStruct": "gpioInitStructure",
                "gpio": "currentGPIO",
                "i": "index"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\niinput_numbert check_bit_08007854(iinput_numbert input_number)\n\n{\n  iinput_numbert local_number;\n  \n  returinput_number *(uiinput_numbert *)((input_number >> 4) * 0x400 + 0x40020010) >> (input_number & 0xfU) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "n": "input_number",
                "n_local": "local_number"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_registers_08007884",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t read_gpio_registers_08007884(void)\n\n{\n  int register_0x36;\n  int register_0x37;\n  int register_0x38;\n  int register_0x39;\n  int register_0xf;\n  uint register_0;\n  \n  register_0x36 = read_gpio(0x36);\n  register_0x37 = read_gpio(0x37);\n  register_0x38 = read_gpio(0x38);\n  register_0x39 = read_gpio(0x39);\n  register_0xf = read_gpio(0xf);\n  register_0 = read_gpio(0);\n  return register_0 | register_0x36 << 4 | register_0x37 << 3 | register_0x38 << 2 | register_0x39 << 1 | register_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_registers_08007884",
                "iVar1": "register_0x36",
                "iVar2": "register_0x37",
                "iVar3": "register_0x38",
                "iVar4": "register_0x39",
                "iVar5": "register_0xf",
                "uVar6": "register_0",
                "gpio_rd": "read_gpio"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078d0": {
            "entrypoint": "0x080078d0",
            "current_name": "perform_action_080078d0",
            "code": "\nvoid performAction_080078d0(uint32_t numBits)\n\n{\n  uint result;\n  int input1;\n  undefined4 output1;\n  undefined4 output2;\n  uint input2;\n  int temp;\n  int baseAddress;\n  char condition1;\n  undefined condition2;\n  char condition3;\n  undefined4 coprocessorReg;\n  uint32_t localBits;\n  \n  if (condition1 != condition3) {\n    temp = input1 + numBits * 0x200;\n  }\n  if ((bool)condition3) {\n    result = numBits * 0x40000000;\n    condition2 = input2 <= result;\n    condition3 = SBORROW4(result,input2);\n    condition1 = (int)(result - input2) < 0;\n  }\n  if (!(bool)condition2) {\n    *(int *)(baseAddress + numBits * -0x40000000) = temp;\n  }\n  if (condition1 == condition3) {\n    software_interrupt(0xb083);\n  }\n  else {\n    coprocessor_store(6,coprocessorReg,numBits);\n    *(undefined4 *)numBits = output1;\n    software_interrupt(0x6078);\n  }\n  if ((bool)condition1) {\n    register0x00000054 = (BADSPACEBASE *)(&stack0x00000000 + baseAddress * 0x4000);\n  }\n  *(undefined4 *)((int)register0x00000054 + -4) = output2;\n  *(undefined4 *)((int)register0x00000054 + -0xc) = 0;\n  *(undefined4 *)((int)register0x00000054 + -0x10) = 0;\n  while (*(int *)((int)register0x00000054 + -0x10) < 4) {\n    *(uint32_t *)((int)register0x00000054 + -0xc) =\n         sampleArray[*(int *)((int)register0x00000054 + -0x10)] |\n         *(uint *)((int)register0x00000054 + -0xc);\n    *(int *)((int)register0x00000054 + -0x10) = *(int *)((int)register0x00000054 + -0x10) + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078d0": "perform_action_080078d0",
                "bits": "numBits",
                "uVar1": "result",
                "in_r3": "input1",
                "unaff_r4": "output1",
                "unaff_r7": "output2",
                "unaff_r8": "input2",
                "unaff_r11": "temp",
                "in_r12": "baseAddress",
                "in_NG": "condition1",
                "in_CY": "condition2",
                "in_OV": "condition3",
                "in_cr4": "coprocessorReg",
                "bits_local": "localBits",
                "debounce.sample": "sampleArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078e2": {
            "entrypoint": "0x080078e2",
            "current_name": "store_bits_080078e2",
            "code": "\nvoid storeBits_080078e2(uint32_t numBits)\n\n{\n  uint multipliedValue;\n  int baseValue;\n  undefined4 data;\n  uint comparisonValue;\n  int result;\n  int memoryAddress;\n  char negativeFlag;\n  undefined carryFlag;\n  char overflowFlag;\n  undefined4 coprocessorValue;\n  uint32_t loopCounter;\n  \n  if (negativeFlag != overflowFlag) {\n    result = baseValue + numBits * 0x200;\n  }\n  if ((bool)overflowFlag) {\n    multipliedValue = numBits * 0x40000000;\n    carryFlag = comparisonValue <= multipliedValue;\n    overflowFlag = SBORROW4(multipliedValue,comparisonValue);\n    negativeFlag = (int)(multipliedValue - comparisonValue) < 0;\n  }\n  if (!(bool)carryFlag) {\n    *(int *)(memoryAddress + numBits * -0x40000000) = result;\n  }\n  if (negativeFlag != overflowFlag) {\n    coprocessor_store(6,coprocessorValue,numBits);\n    *(undefined4 *)numBits = data;\n  }\n  for (loopCounter = 0; (int)loopCounter < 4; loopCounter = loopCounter + 1) {\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078e2": "store_bits_080078e2",
                "bits": "numBits",
                "uVar1": "multipliedValue",
                "in_r3": "baseValue",
                "unaff_r4": "data",
                "unaff_r8": "comparisonValue",
                "unaff_r11": "result",
                "in_r12": "memoryAddress",
                "in_NG": "negativeFlag",
                "in_CY": "carryFlag",
                "in_OV": "overflowFlag",
                "in_cr4": "coprocessorValue",
                "bits_local": "loopCounter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_state_080078f4",
            "code": "\n/* WARNING: Unknown calliterationng conventiterationon */\n\nuiterationnt32_t calculateCombinedState_080078f4(voiterationd)\n\n{\n  iterationnt iteration;\n  uiterationnt32_t combinedState;\n  \n  combinedState = 0;\n  for (iteration = 0; iteration < 4; iteration = iteration + 1) {\n    combinedState = debounce.sample[iteration] | combinedState;\n  }\n  return combinedState;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_state_080078f4",
                "i": "iteration",
                "state": "combinedState"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "debounce_input_handler_08007930",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid debounceInputHandler_08007930(void)\n\n{\n  int index;\n  uint32_t currentState;\n  uint32_t newState;\n  uint changedBits;\n  uint32_t offBits;\n  uint32_t onBits;\n  uint32_t debounceState;\n  DEBOUNCE_CTRL *db;\n  \n  index = debounce.idx;\n  currentState = debounce.debounceState;\n  if (debounce_ready != 0) {\n    currentState = debounce_input();\n    debounce.sample[index] = currentState;\n    if (debounce.idx == 3) {\n      debounce.idx = 0;\n    }\n    else {\n      debounce.idx = debounce.idx + 1;\n    }\n    newState = debounce_rd();\n    currentState = debounce.debounceState;\n    if (newState != debounce.debounceState) {\n      changedBits = ~newState & debounce.debounceState;\n      if ((~debounce.debounceState & newState) != 0) {\n        debounce_on_handler(~debounce.debounceState & newState);\n      }\n      currentState = newState;\n      if (changedBits != 0) {\n        debounce_off_handler(changedBits);\n      }\n    }\n  }\n  debounce.debounceState = currentState;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "debounce_input_handler_08007930",
                "iVar1": "index",
                "uVar2": "currentState",
                "uVar3": "newState",
                "bits": "changedBits",
                "off_bits": "offBits",
                "on_bits": "onBits",
                "state": "debounceState"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "debounce_input",
                "debounce_off_handler",
                "debounce_on_handler",
                "debounce_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_debounce_080079c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeDebounce_080079c0(void)\n\n{\n  memset(&debounceData,0,0x18);\n  isDebounceReady = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_debounce_080079c0",
                "debounce": "debounceData",
                "debounce_ready": "isDebounceReady"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_ir_qn_bit_080079e0",
            "code": "\nvoid setIRQnBit_080079e0(irqNumber_Type irqNumber)\n\n{\n  irqNumber_Type localIRQn;\n  \n  *(int *)(((uint)(int)irqNumber >> 5) * 4 + -0x1fff1f00) = 1 << (irqNumber & 0x1fU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_ir_qn_bit_080079e0",
                "IRQn": "irqNumber",
                "IRQn_local": "localIRQn"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_tim_config_08007a10",
            "code": "\n\n\nvoid update_TIM_Config_08007a10(TIM_TypeDef *tim_instance)\n\n{\n  TIM_TypeDef *local_tim;\n  \n  if (tim_instance == (TIM_TypeDef *)&DAT_40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (tim_instance == (TIM_TypeDef *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (tim_instance == (TIM_TypeDef *)&DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_tim_config_08007a10",
                "tim": "tim_instance",
                "tim_local": "local_tim"
            },
            "calling": [
                "step_timer_init",
                "g540_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "configure_timer_interrupt_08007a70",
            "code": "\nvoid configureTimerInterrupt_08007a70(TIM_TypeDef *timer,uint32_t priority,uint32_t subPriority)\n\n{\n  uint32_t localSub;\n  uint32_t localPre;\n  TIM_TypeDef *localTimer;\n  uint32_t interrupt;\n  \n  if (timer == (TIM_TypeDef *)&DAT_40000000) {\n    interrupt._0_1_ = TIM2_IRQn;\n  }\n  else if (timer == (TIM_TypeDef *)0x40000400) {\n    interrupt._0_1_ = TIM3_IRQn;\n  }\n  else {\n    if (timer != (TIM_TypeDef *)&DAT_40000800) {\n      return;\n    }\n    interrupt._0_1_ = TIM4_IRQn;\n  }\n  HAL_NVIC_SetPriority((IRQn_Type)interrupt,priority,subPriority);\n  NVIC_EnableIRQ((IRQn_Type)interrupt);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "configure_timer_interrupt_08007a70",
                "tim": "timer",
                "pre": "priority",
                "sub": "subPriority",
                "sub_local": "localSub",
                "pre_local": "localPre",
                "tim_local": "localTimer",
                "irq": "interrupt"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timers_08007ad0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_timers_08007ad0(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enable_timer_clock((TIM_TypeDef *)&DAT_40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = SystemCoreClock / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_timer_interrupt((TIM_TypeDef *)&DAT_40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timers_08007ad0",
                "TIMx": "timer",
                "enable_tim_clock": "enable_timer_clock",
                "enable_tim_interrupt": "enable_timer_interrupt"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock",
                "enable_tim_interrupt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "enable_ti_mx_features_08007b70",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid enable_TIMx_features_08007b70(void)\n\n{\n  TIM_TypeDef *TIM_module;\n  uint32_t enable_flags;\n  \n  enable_flags = 1;\n  if (_DAT_40000034 != 0) {\n    enable_flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    enable_flags = enable_flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | enable_flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "enable_ti_mx_features_08007b70",
                "TIMx": "TIM_module",
                "enable": "enable_flags"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "initialize_tim_registers_08007bc2",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_TIM_registers_08007bc2(void)\n\n{\n  TIM_TypeDef *timer_instance;\n  \n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "initialize_tim_registers_08007bc2",
                "TIMx": "timer_instance"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "set_timer_ticks_08007bf0",
            "code": "\n\n\nvoid setTimerTicks_08007bf0(uint32_t ticks)\n\n{\n  uint32_t localTicks;\n  uint32_t saved;\n  TIM_TypeDef *timer;\n  \n  _DAT_4000002c = ticks;\n  if (ticks <= _DAT_40000024) {\n    _DAT_40000024 = ticks;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "set_timer_ticks_08007bf0",
                "ticks_local": "localTicks",
                "TIMx": "timer"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_timer_ticks_08007c40",
            "code": "\n\n\nvoid setTimerTicks_08007c40(uint32_t ticks)\n\n{\n  uint32_t localTicks;\n  TIM_TypeDef *timerPeripheral;\n  \n  _DAT_40000034 = ticks;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_timer_ticks_08007c40",
                "ticks_local": "localTicks",
                "TIMx": "timerPeripheral"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_timer_ticks_08007c5e",
            "code": "\n\n\nvoid setTimerTicks_08007c5e(uint32_t ticks)\n\n{\n  uint32_t localTicks;\n  TIM_TypeDef *timer;\n  \n  _DAT_40000038 = ticks;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_timer_ticks_08007c5e",
                "ticks_local": "localTicks",
                "TIMx": "timer"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "handle_tim_interrupts_08007c7c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_TIM_interrupts_08007c7c(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    step_delay_isr();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    step_pulse_isr();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    step_period_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "handle_tim_interrupts_08007c7c",
                "TIMx": "timer"
            },
            "calling": [],
            "called": [
                "step_delay_isr",
                "step_period_isr",
                "step_pulse_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_timer_08007d08",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007d08(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  enableTimerClock((TIM_TypeDef *)&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = systemClock / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_timer_08007d08",
                "TIMx": "timer",
                "enable_tim_clock": "enableTimerClock",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "initialize_timers_08007da8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimers_08007da8(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "initialize_timers_08007da8",
                "TIMx": "timer"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007dd8": {
            "entrypoint": "0x08007dd8",
            "current_name": "clear_tim_registers_08007dd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid clear_TIM_registers_08007dd8(void)\n\n{\n  TIM_TypeDef *timer;\n  \n  _DAT_40000800 = _DAT_40000800 & 0xfffffffe;\n  _DAT_40000820 = _DAT_40000820 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007dd8": "clear_tim_registers_08007dd8",
                "TIMx": "timer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_step_timer_and_g540_timer_08007e08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeStepTimerAndG540Timer_08007e08(void)\n\n{\n  initializeStepTimer();\n  initializeG540Timer();\n  startG540Timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_step_timer_and_g540_timer_08007e08",
                "step_timer_init": "initializeStepTimer",
                "g540_timer_init": "initializeG540Timer",
                "g540_timer_start": "startG540Timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "step_timer_init",
                "g540_timer_start",
                "g540_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "send_byte_over_usart_08007e1c",
            "code": "\n\n\nvoid sendByteOverUSART_08007e1c(char c)\n\n{\n  char localVariable_c;\n  USART_TypeDef *usartObject;\n  \n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)(byte)c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "send_byte_over_usart_08007e1c",
                "c_local": "localVariable_c",
                "usart": "usartObject"
            },
            "calling": [
                "serial_write",
                "__io_putchar"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e4c": {
            "entrypoint": "0x08007e4c",
            "current_name": "FUNC_08007e4c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007e4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e4c": "FUNC_08007e4c"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_usart_transmission_bit_08007e58",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint check_USART_transmission_bit_08007e58(void)\n\n{\n  USART_TypeDef *usart_instance;\n  \n  return (uint)((_DAT_40004400 & 0x20) != 0);\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_usart_transmission_bit_08007e58",
                "usart": "usart_instance"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_usart_value_08007e84",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nchar get_USART_Value_08007e84(void)\n\n{\n  USART_TypeDef *usart;\n  \n  return (char)_DAT_40004404;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_usart_value_08007e84"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "set_usart_configuration_08007ea4",
            "code": "\n\n\nvoid setUsartConfiguration_08007ea4(USART_TypeDef *selectedUsart)\n\n{\n  USART_TypeDef *currentUsart;\n  \n  if (selectedUsart == (USART_TypeDef *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (selectedUsart == (USART_TypeDef *)&DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (selectedUsart == (USART_TypeDef *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (selectedUsart == (USART_TypeDef *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (selectedUsart == (USART_TypeDef *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (selectedUsart == (USART_TypeDef *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "set_usart_configuration_08007ea4",
                "usart": "selectedUsart",
                "usart_local": "currentUsart"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "configure_usart_baud_rate_08007f54",
            "code": "\nvoid configureUSARTBaudRate_08007f54(USART_TypeDef *USART_port,int baud_rate)\n\n{\n  uint32_t PCLK1_Frequency;\n  uint32_t PCLK2_Frequency;\n  uint32_t PCLK3_Frequency;\n  int local_baud_rate;\n  USART_TypeDef *local_USART_port;\n  \n  if ((USART_port->CR1 & 0x8000) == 0) {\n    if ((USART_port == (USART_TypeDef *)0x40011000) || (USART_port == (USART_TypeDef *)0x40011400)) {\n      PCLK1_Frequency = HAL_RCC_GetPCLK2Freq();\n      PCLK2_Frequency = HAL_RCC_GetPCLK2Freq();\n      PCLK3_Frequency = HAL_RCC_GetPCLK2Freq();\n      USART_port->BRR = (int)(((ulonglong)(PCLK1_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 2)) / 100) << 4 |\n                   (((PCLK2_Frequency * 0x19) / (uint)(baud_rate << 2) +\n                    (int)(((ulonglong)(PCLK3_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n    else {\n      PCLK1_Frequency = HAL_RCC_GetPCLK1Freq();\n      PCLK2_Frequency = HAL_RCC_GetPCLK1Freq();\n      PCLK3_Frequency = HAL_RCC_GetPCLK1Freq();\n      USART_port->BRR = (int)(((ulonglong)(PCLK1_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 2)) / 100) << 4 |\n                   (((PCLK2_Frequency * 0x19) / (uint)(baud_rate << 2) +\n                    (int)(((ulonglong)(PCLK3_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 2)) / 100) * -100)\n                    * 0x10 + 0x32) / 100 & 0xf;\n    }\n  }\n  else if ((USART_port == (USART_TypeDef *)0x40011000) || (USART_port == (USART_TypeDef *)0x40011400)) {\n    PCLK1_Frequency = HAL_RCC_GetPCLK2Freq();\n    PCLK2_Frequency = HAL_RCC_GetPCLK2Freq();\n    PCLK3_Frequency = HAL_RCC_GetPCLK2Freq();\n    USART_port->BRR = (int)(((ulonglong)(PCLK1_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 1)) / 100) << 4 |\n                 (((PCLK2_Frequency * 0x19) / (uint)(baud_rate << 1) +\n                  (int)(((ulonglong)(PCLK3_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    PCLK1_Frequency = HAL_RCC_GetPCLK1Freq();\n    PCLK2_Frequency = HAL_RCC_GetPCLK1Freq();\n    PCLK3_Frequency = HAL_RCC_GetPCLK1Freq();\n    USART_port->BRR = (int)(((ulonglong)(PCLK1_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 1)) / 100) << 4 |\n                 (((PCLK2_Frequency * 0x19) / (uint)(baud_rate << 1) +\n                  (int)(((ulonglong)(PCLK3_Frequency * 0x19) / (ulonglong)(uint)(baud_rate << 1)) / 100) * -100) *\n                  0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "configure_usart_baud_rate_08007f54",
                "usart": "USART_port",
                "baud": "baud_rate",
                "baud_local": "local_baud_rate",
                "usart_local": "local_USART_port",
                "uVar1": "PCLK1_Frequency",
                "uVar2": "PCLK2_Frequency",
                "uVar3": "PCLK3_Frequency"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeUSART_08008190(void)\n\n{\n  uint32_t value;\n  USART_TypeDef *usartInstance;\n  \n  enable_usartInstance_clock((USART_TypeDef *)&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  set_baud_rate((USART_TypeDef *)&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "val": "value",
                "usart": "usartInstance"
            },
            "calling": [
                "main"
            ],
            "called": [
                "set_baud_rate",
                "enable_usart_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "send_data_08008250",
            "code": "\nvoid sendData_08008250(uint8_t inputData)\n\n{\n  uint8_t localData;\n  \n  usart_putc(inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "send_data_08008250",
                "data": "inputData",
                "data_local": "localData"
            },
            "calling": [
                "printString",
                "print_base2",
                "printFloat",
                "printPgmString",
                "print_uint32_base10",
                "printInteger"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "print_character_0800826a",
            "code": "\nint print_character_0800826a(int character)\n\n{\n  int character_local;\n  \n  usart_putc((characterar)character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "ch": "character"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "process_serial_data_08008286",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t process_serial_data_08008286(void)\n\n{\n  uint8_t received_data;\n  int data_available;\n  uint8_t c;\n  \n  data_available = usart_tstc();\n  if (data_available != 0) {\n    received_data = usart_getc();\n    data_available = serial_rx_hook(received_data);\n    if (data_available == 0) {\n      return received_data;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "process_serial_data_08008286",
                "data": "received_data",
                "iVar1": "data_available"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_getc",
                "usart_tstc",
                "serial_rx_hook"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082c8": {
            "entrypoint": "0x080082c8",
            "current_name": "add_with_xor_080082c8",
            "code": "\nvoid addWithXor_080082c8(undefined4 result,uint input)\n\n{\n  __aeabi_dadd(result,input ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082c8": "add_with_xor_080082c8",
                "param_1": "result",
                "param_2": "input"
            },
            "calling": [],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_bits_multiply_080082d0",
            "code": "\nulonglong reverse_bits_multiply_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift1;\n  byte carry;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  uint temp_1;\n  uint temp_2;\n  int shift2;\n  uint partial_result_1;\n  uint partial_result_2;\n  uint partial_result_3;\n  uint temp_3;\n  bool cond1;\n  bool cond2;\n  bool carry_cond;\n  \n  temp_1 = input_4 ^ 0x80000000;\n  partial_result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  cond1 = ((input_2 ^ temp_1) & 0x7fffffff) == 0;\n  cond2 = cond1 && input_1 == input_3;\n  if (!cond1 || input_1 != input_3) {\n    cond2 = (partial_result_1 | input_1) == 0;\n  }\n  if (!cond2) {\n    cond2 = (input_4 | input_3) == 0;\n  }\n  shift2 = (int)partial_result_1 >> 0x15;\n  if (!cond2) {\n    cond2 = shift2 == -1;\n  }\n  shift1 = (int)input_4 >> 0x15;\n  if (!cond2) {\n    cond2 = shift1 == -1;\n  }\n  if (cond2) {\n    if (shift2 == -1 || shift1 == -1) {\n      partial_result_1 = temp_1;\n      partial_result_3 = input_3;\n      if (shift2 == -1) {\n        partial_result_1 = input_2;\n        partial_result_3 = input_1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input_3 = partial_result_3;\n        temp_1 = partial_result_1;\n      }\n      cond2 = (partial_result_3 | partial_result_1 << 0xc) == 0;\n      if (cond2) {\n        cond2 = (input_3 | temp_1 << 0xc) == 0;\n      }\n      if (cond2) {\n        cond2 = partial_result_1 == temp_1;\n      }\n      if (!cond2) {\n        partial_result_1 = partial_result_1 | 0x80000;\n      }\n      return CONCAT44(partial_result_1,partial_result_3);\n    }\n    if (((input_2 ^ temp_1) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((partial_result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_1;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_1) {\n      return 0;\n    }\n    if (partial_result_1 >> 0x15 == 0) {\n      cond2 = (input_1 & 0x80000000) != 0;\n      temp_1 = input_2 * 2 + (uint)cond2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)cond2)) {\n        temp_1 = temp_1 | 0x80000000;\n      }\n      return CONCAT44(temp_1,input_1 << 1);\n    }\n    if (partial_result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  partial_result_1 = partial_result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  partial_result_3 = input_4 - partial_result_1;\n  cond2 = partial_result_3 != 0;\n  if (input_4 < partial_result_1) {\n    partial_result_3 = -partial_result_3;\n  }\n  partial_result_2 = input_1;\n  temp_2 = input_2;\n  if (cond2 && partial_result_1 <= input_4) {\n    partial_result_1 = partial_result_1 + partial_result_3;\n    partial_result_2 = input_3;\n    temp_2 = temp_1;\n    input_3 = input_1;\n    temp_1 = input_2;\n  }\n  if (0x36 < partial_result_3) {\n    return CONCAT44(temp_2,partial_result_2);\n  }\n  result_2 = temp_2 & 0xfffff | 0x100000;\n  if ((temp_2 & 0x80000000) != 0) {\n    cond2 = partial_result_2 != 0;\n    partial_result_2 = -partial_result_2;\n    result_2 = -result_2 - (uint)cond2;\n  }\n  temp_2 = temp_1 & 0xfffff | 0x100000;\n  if ((temp_1 & 0x80000000) != 0) {\n    cond2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_2 = -temp_2 - (uint)cond2;\n  }\n  if (partial_result_1 == partial_result_3) {\n    temp_2 = temp_2 ^ 0x100000;\n    if (partial_result_1 == 0) {\n      result_2 = result_2 ^ 0x100000;\n      partial_result_1 = 1;\n    }\n    else {\n      partial_result_3 = partial_result_3 - 1;\n    }\n  }\n  temp_1 = -partial_result_3 + 0x20;\n  if ((int)partial_result_3 < 0x21) {\n    temp_3 = input_3 << (temp_1 & 0xff);\n    input_3 = input_3 >> (partial_result_3 & 0xff);\n    result_1 = partial_result_2 + input_3;\n    result_3 = temp_2 << (temp_1 & 0xff);\n    temp_1 = result_1 + result_3;\n    result_2 = result_2 + CARRY4(partial_result_2,input_3) + ((int)temp_2 >> (partial_result_3 & 0xff)) +\n            (uint)CARRY4(result_1,result_3);\n  }\n  else {\n    temp_3 = temp_2 << (-partial_result_3 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_3 = temp_3 | 2;\n    }\n    temp_2 = (int)temp_2 >> (partial_result_3 - 0x20 & 0xff);\n    temp_1 = partial_result_2 + temp_2;\n    result_2 = result_2 + ((int)temp_2 >> 0x1f) + (uint)CARRY4(partial_result_2,temp_2);\n  }\n  input_2 = result_2 & 0x80000000;\n  partial_result_3 = result_2;\n  if ((int)result_2 < 0) {\n    cond2 = temp_3 == 0;\n    temp_3 = -temp_3;\n    partial_result_3 = -temp_1;\n    temp_1 = -(uint)!cond2 - temp_1;\n    partial_result_3 = -(uint)(cond2 <= partial_result_3) - result_2;\n  }\n  if (0xfffff < partial_result_3) {\n    partial_result_2 = partial_result_1 - 1;\n    if (0x1fffff < partial_result_3) {\n      partial_result_2 = partial_result_3 & 1;\n      partial_result_3 = partial_result_3 >> 1;\n      carry = (byte)temp_1;\n      temp_1 = (uint)(partial_result_2 != 0) << 0x1f | temp_1 >> 1;\n      temp_3 = (uint)(carry & 1) << 0x1f | temp_3 >> 1;\n      partial_result_2 = partial_result_1;\n      if (0xffbfffff < partial_result_1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    cond2 = 0x7fffffff < temp_3;\n    if (temp_3 == 0x80000000) {\n      cond2 = (temp_1 & 1) != 0;\n    }\n    return CONCAT44(partial_result_3 + partial_result_2 * 0x100000 + (uint)CARRY4(temp_1,(uint)cond2) | input_2,\n                    temp_1 + cond2);\n  }\n  cond1 = (temp_3 & 0x80000000) != 0;\n  temp_3 = temp_3 << 1;\n  partial_result_2 = temp_1 * 2;\n  cond2 = CARRY4(temp_1,temp_1);\n  temp_1 = temp_1 * 2 + (uint)cond1;\n  partial_result_3 = partial_result_3 * 2 + (uint)(cond2 || CARRY4(partial_result_2,(uint)cond1));\n  partial_result_2 = partial_result_1 - 2;\n  if (partial_result_1 - 1 != 0 && 0xfffff < partial_result_3) goto LAB_080083e0;\n  temp_2 = temp_1;\n  partial_result_1 = partial_result_3;\n  if (partial_result_3 == 0) {\n    temp_2 = 0;\n    partial_result_1 = temp_1;\n  }\n  shift2 = LZCOUNT(partial_result_1);\n  if (partial_result_3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  partial_result_3 = shift2 - 0xb;\n  carry_cond = SBORROW4(partial_result_3,0x20);\n  temp_1 = shift2 - 0x2b;\n  cond2 = (int)temp_1 < 0;\n  cond1 = temp_1 == 0;\n  if ((int)partial_result_3 < 0x20) {\n    carry_cond = SCARRY4(temp_1,0xc);\n    shift2 = shift2 + -0x1f;\n    cond2 = shift2 < 0;\n    cond1 = shift2 == 0;\n    temp_1 = partial_result_3;\n    if (!cond1 && cond2 == carry_cond) {\n      temp_2 = partial_result_1 << (partial_result_3 & 0xff);\n      partial_result_1 = partial_result_1 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (cond1 || cond2 != carry_cond) {\n    temp_3 = 0x20 - temp_1;\n  }\n  partial_result_1 = partial_result_1 << (temp_1 & 0xff);\n  if (cond1 || cond2 != carry_cond) {\n    partial_result_1 = partial_result_1 | temp_2 >> (temp_3 & 0xff);\n  }\n  if (cond1 || cond2 != carry_cond) {\n    temp_2 = temp_2 << (temp_1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)partial_result_3 <= (int)partial_result_2) {\n    return CONCAT44(partial_result_1 + (partial_result_2 - partial_result_3) * 0x100000 | input_2,temp_2);\n  }\n  temp_1 = ~(partial_result_2 - partial_result_3);\n  if ((int)temp_1 < 0x1f) {\n    shift2 = temp_1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp_1 - 0x1f,0xc)) {\n      return CONCAT44(result_2,temp_2 >> (0x20 - (0xcU - shift2) & 0xff) | partial_result_1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_1 = temp_1 + 1;\n    return CONCAT44(input_2 | partial_result_1 >> (temp_1 & 0xff),\n                    temp_2 >> (temp_1 & 0xff) | partial_result_1 << (0x20 - temp_1 & 0xff));\n  }\n  return CONCAT44(result_2,partial_result_1 >> (temp_1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_bits_multiply_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "result_1",
                "uVar4": "result_2",
                "uVar5": "result_3",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "iVar8": "shift2",
                "uVar9": "partial_result_1",
                "uVar10": "partial_result_2",
                "uVar11": "partial_result_3",
                "uVar12": "temp_3",
                "bVar13": "cond1",
                "bVar14": "cond2",
                "bVar15": "carry_cond"
            },
            "calling": [
                "sin",
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "plan_buffer_line",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "cos",
                "__kernel_cos"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "reverse_unsigned_addition_080082d4",
            "code": "\nulonglong reverseUnsignedAddition_080082d4(uint x1,uint x2,uint y1,uint y2)\n\n{\n  int halfX2;\n  byte carryBit;\n  uint result1;\n  uint result2;\n  uint normalizedY2;\n  int halfY2;\n  uint normalizedX2;\n  uint x1;\n  uint x2;\n  uint diff;\n  uint temp1;\n  uint temp2;\n  bool isX2Zero;\n  bool isY2Zero;\n  bool isX2Negative;\n  \n  normalizedX2 = x2 << 1;\n  x2 = y2 << 1;\n  isX2Zero = ((x2 ^ y2) & 0x7fffffff) == 0;\n  isY2Zero = isX2Zero && x1 == y1;\n  if (!isX2Zero || x1 != y1) {\n    isY2Zero = (normalizedX2 | x1) == 0;\n  }\n  if (!isY2Zero) {\n    isY2Zero = (x2 | y1) == 0;\n  }\n  halfY2 = (int)normalizedX2 >> 0x15;\n  if (!isY2Zero) {\n    isY2Zero = halfY2 == -1;\n  }\n  halfX2 = (int)x2 >> 0x15;\n  if (!isY2Zero) {\n    isY2Zero = halfX2 == -1;\n  }\n  if (isY2Zero) {\n    if (halfY2 == -1 || halfX2 == -1) {\n      x2 = y2;\n      normalizedX2 = y1;\n      if (halfY2 == -1) {\n        x2 = x2;\n        normalizedX2 = x1;\n      }\n      if (halfY2 != -1 || halfX2 != -1) {\n        y1 = normalizedX2;\n        y2 = x2;\n      }\n      isY2Zero = (normalizedX2 | x2 << 0xc) == 0;\n      if (isY2Zero) {\n        isY2Zero = (y1 | y2 << 0xc) == 0;\n      }\n      if (isY2Zero) {\n        isY2Zero = x2 == y2;\n      }\n      if (!isY2Zero) {\n        x2 = x2 | 0x80000;\n      }\n      return CONCAT44(x2,normalizedX2);\n    }\n    if (((x2 ^ y2) & 0x7fffffff) != 0 || x1 != y1) {\n      if ((normalizedX2 | x1) == 0) {\n        x1 = y1;\n        x2 = y2;\n      }\n      return CONCAT44(x2,x1);\n    }\n    if (x2 != y2) {\n      return 0;\n    }\n    if (normalizedX2 >> 0x15 == 0) {\n      isY2Zero = (x1 & 0x80000000) != 0;\n      x2 = x2 * 2 + (uint)isY2Zero;\n      if (CARRY4(x2,x2) || CARRY4(x2 * 2,(uint)isY2Zero)) {\n        x2 = x2 | 0x80000000;\n      }\n      return CONCAT44(x2,x1 << 1);\n    }\n    if (normalizedX2 < 0xffc00000) {\n      return CONCAT44(x2 + 0x100000,x1);\n    }\n    x2 = x2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(x2 | 0x7ff00000) << 0x20;\n  }\n  normalizedX2 = normalizedX2 >> 0x15;\n  x2 = x2 >> 0x15;\n  diff = x2 - normalizedX2;\n  isY2Zero = diff != 0;\n  if (x2 < normalizedX2) {\n    diff = -diff;\n  }\n  x1 = x1;\n  normalizedY2 = x2;\n  if (isY2Zero && normalizedX2 <= x2) {\n    normalizedX2 = normalizedX2 + diff;\n    x1 = y1;\n    normalizedY2 = y2;\n    y1 = x1;\n    y2 = x2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(normalizedY2,x1);\n  }\n  x2 = normalizedY2 & 0xfffff | 0x100000;\n  if ((normalizedY2 & 0x80000000) != 0) {\n    isY2Zero = x1 != 0;\n    x1 = -x1;\n    x2 = -x2 - (uint)isY2Zero;\n  }\n  normalizedY2 = y2 & 0xfffff | 0x100000;\n  if ((y2 & 0x80000000) != 0) {\n    isY2Zero = y1 != 0;\n    y1 = -y1;\n    normalizedY2 = -normalizedY2 - (uint)isY2Zero;\n  }\n  if (normalizedX2 == diff) {\n    normalizedY2 = normalizedY2 ^ 0x100000;\n    if (normalizedX2 == 0) {\n      x2 = x2 ^ 0x100000;\n      normalizedX2 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp2 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    temp1 = y1 << (temp2 & 0xff);\n    y1 = y1 >> (diff & 0xff);\n    result1 = x1 + y1;\n    result2 = normalizedY2 << (temp2 & 0xff);\n    temp2 = result1 + result2;\n    x2 = x2 + CARRY4(x1,y1) + ((int)normalizedY2 >> (diff & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    temp1 = normalizedY2 << (-diff + 0x40 & 0xff);\n    if (y1 != 0) {\n      temp1 = temp1 | 2;\n    }\n    normalizedY2 = (int)normalizedY2 >> (diff - 0x20 & 0xff);\n    temp2 = x1 + normalizedY2;\n    x2 = x2 + ((int)normalizedY2 >> 0x1f) + (uint)CARRY4(x1,normalizedY2);\n  }\n  x2 = x2 & 0x80000000;\n  diff = x2;\n  if ((int)x2 < 0) {\n    isY2Zero = temp1 == 0;\n    temp1 = -temp1;\n    diff = -temp2;\n    temp2 = -(uint)!isY2Zero - temp2;\n    diff = -(uint)(isY2Zero <= diff) - x2;\n  }\n  if (0xfffff < diff) {\n    x1 = normalizedX2 - 1;\n    if (0x1fffff < diff) {\n      x2 = diff & 1;\n      diff = diff >> 1;\n      carryBit = (byte)temp2;\n      temp2 = (uint)(x2 != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carryBit & 1) << 0x1f | temp1 >> 1;\n      x1 = normalizedX2;\n      if (0xffbfffff < normalizedX2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isY2Zero = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      isY2Zero = (temp2 & 1) != 0;\n    }\n    return CONCAT44(diff + x1 * 0x100000 + (uint)CARRY4(temp2,(uint)isY2Zero) | x2,\n                    temp2 + isY2Zero);\n  }\n  isX2Zero = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  x1 = temp2 * 2;\n  isY2Zero = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)isX2Zero;\n  diff = diff * 2 + (uint)(isY2Zero || CARRY4(x1,(uint)isX2Zero));\n  x1 = normalizedX2 - 2;\n  if (normalizedX2 - 1 != 0 && 0xfffff < diff) goto LAB_080083e0;\n  normalizedY2 = temp2;\n  normalizedX2 = diff;\n  if (diff == 0) {\n    normalizedY2 = 0;\n    normalizedX2 = temp2;\n  }\n  halfY2 = LZCOUNT(normalizedX2);\n  if (diff == 0) {\n    halfY2 = halfY2 + 0x20;\n  }\n  temp2 = halfY2 - 0xb;\n  isX2Negative = SBORROW4(temp2,0x20);\n  diff = halfY2 - 0x2b;\n  isY2Zero = (int)diff < 0;\n  isX2Zero = diff == 0;\n  if ((int)temp2 < 0x20) {\n    isX2Negative = SCARRY4(diff,0xc);\n    halfY2 = halfY2 + -0x1f;\n    isY2Zero = halfY2 < 0;\n    isX2Zero = halfY2 == 0;\n    diff = temp2;\n    if (!isX2Zero && isY2Zero == isX2Negative) {\n      normalizedY2 = normalizedX2 << (temp2 & 0xff);\n      normalizedX2 = normalizedX2 >> (0xcU - halfY2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isX2Zero || isY2Zero != isX2Negative) {\n    temp1 = 0x20 - diff;\n  }\n  normalizedX2 = normalizedX2 << (diff & 0xff);\n  if (isX2Zero || isY2Zero != isX2Negative) {\n    normalizedX2 = normalizedX2 | normalizedY2 >> (temp1 & 0xff);\n  }\n  if (isX2Zero || isY2Zero != isX2Negative) {\n    normalizedY2 = normalizedY2 << (diff & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp2 <= (int)x1) {\n    return CONCAT44(normalizedX2 + (x1 - temp2) * 0x100000 | x2,normalizedY2);\n  }\n  diff = ~(x1 - temp2);\n  if ((int)diff < 0x1f) {\n    halfY2 = diff - 0x13;\n    if (halfY2 != 0 && halfY2 < 0 == SCARRY4(diff - 0x1f,0xc)) {\n      return CONCAT44(x2,normalizedY2 >> (0x20 - (0xcU - halfY2) & 0xff) | normalizedX2 << (0xcU - halfY2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff = diff + 1;\n    return CONCAT44(x2 | normalizedX2 >> (diff & 0xff),\n                    normalizedY2 >> (diff & 0xff) | normalizedX2 << (0x20 - diff & 0xff));\n  }\n  return CONCAT44(x2,normalizedX2 >> (diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "reverse_unsigned_addition_080082d4",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "iVar1": "halfX2",
                "bVar2": "carryBit",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "normalizedY2",
                "iVar6": "halfY2",
                "uVar7": "normalizedX2",
                "uVar8": "x1",
                "uVar9": "x2",
                "uVar10": "diff",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "isX2Zero",
                "bVar14": "isY2Zero",
                "bVar15": "isX2Negative"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "trunc",
                "__ieee754_atan2",
                "atan",
                "__aeabi_drsub",
                "__kernel_rem_pio2",
                "round",
                "__kernel_sin",
                "scalbn",
                "ceil",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "__kernel_cos",
                "floor"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "bit_shift_0800854c",
            "code": "\noutput bitShift_0800854c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int count;\n  uint shift;\n  uint temp;\n  bool isNegative;\n  bool isZero;\n  bool carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  count = LZCOUNT(input);\n  shift = count + 0x15;\n  carry = SBORROW4(shift,0x20);\n  result2 = count - 0xb;\n  isNegative = (int)result2 < 0;\n  isZero = result2 == 0;\n  if (shift < 0x20) {\n    carry = SCARRY4(result2,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    result2 = shift;\n    if (!isZero && carry == false) {\n      result1 = input << shift;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto label;\n    }\n  }\n  if (isZero || isNegative != carry) {\n    temp = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZero || isNegative != carry) {\n    input = input | 0U >> (temp & 0xff);\n  }\n  if (isZero || isNegative != carry) {\n    result1 = 0 << (result2 & 0xff);\n  }\nlabel:\n  if (shift < 0x433) {\n    return combine(input + (0x432 - shift) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shift);\n  if (0x1e < (int)result2) {\n    return (output)(input >> (result2 - 0x1f & 0xff));\n  }\n  count = result2 - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return combine(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (output)(result1 >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "bit_shift_0800854c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "count",
                "uVar4": "shift",
                "in_r12": "temp",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "carry",
                "LAB_08008458": "label",
                "CONCAT44": "combine",
                "ulonglong": "output"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "shift_and_combine_bits_0800856c",
            "code": "\nulonglong shiftAndCombineBits_0800856c(uint input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftCount;\n  uint shiftAmount;\n  uint signBit;\n  uint setBits;\n  bool isNegative;\n  bool isZero;\n  bool isOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  temp2 = input;\n  if ((int)signBit < 0) {\n    temp2 = -input;\n  }\n  temp1 = 0;\n  shiftCount = LZCOUNT(temp2);\n  shiftAmount = shiftCount + 0x15;\n  isOverflow = SBORROW4(shiftAmount,0x20);\n  temp3 = shiftCount - 0xb;\n  isNegative = (int)temp3 < 0;\n  isZero = temp3 == 0;\n  if (shiftAmount < 0x20) {\n    isOverflow = SCARRY4(temp3,0xc);\n    isNegative = false;\n    isZero = shiftCount + 1 == 0;\n    temp3 = shiftAmount;\n    if (!isZero && isOverflow == false) {\n      temp1 = temp2 << shiftAmount;\n      temp2 = temp2 >> (0xcU - (shiftCount + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isOverflow) {\n    setBits = 0x20 - temp3;\n  }\n  temp2 = temp2 << (temp3 & 0xff);\n  if (isZero || isNegative != isOverflow) {\n    temp2 = temp2 | 0U >> (setBits & 0xff);\n  }\n  if (isZero || isNegative != isOverflow) {\n    temp1 = 0 << (temp3 & 0xff);\n  }\nLAB_08008458:\n  if (shiftAmount < 0x433) {\n    return CONCAT44(temp2 + (0x432 - shiftAmount) * 0x100000 | signBit,temp1);\n  }\n  temp3 = ~(0x432 - shiftAmount);\n  if (0x1e < (int)temp3) {\n    return CONCAT44(input,temp2 >> (temp3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shiftCount = temp3 - 0x13;\n  if (shiftCount == 0 || shiftCount < 0 != SCARRY4(temp3 - 0x1f,0xc)) {\n    temp3 = temp3 + 1;\n    return CONCAT44(signBit | temp2 >> (temp3 & 0xff),\n                    temp1 >> (temp3 & 0xff) | temp2 << (0x20 - temp3 & 0xff));\n  }\n  return CONCAT44(input,temp1 >> (0x20 - (0xcU - shiftCount) & 0xff) | temp2 << (0xcU - shiftCount & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "shift_and_combine_bits_0800856c",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "shiftCount",
                "uVar5": "shiftAmount",
                "uVar6": "signBit",
                "in_r12": "setBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isOverflow"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_and_shift_08008590",
            "code": "\nulonglong decode_and_shift_08008590(uint input,undefined4 unused1,undefined4 unused2,uint unused3)\n\n{\n  uint shifted_bit;\n  uint shifted_value;\n  uint result_high;\n  uint shift_right;\n  uint shifted_input;\n  int leading_zeros;\n  uint shift_count;\n  uint remaining_shift;\n  bool check_condition1;\n  bool check_condition2;\n  bool check_condition3;\n  \n  shifted_input = input << 1;\n  check_condition2 = shifted_input == 0;\n  shifted_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift_right = (uint)((int)shifted_input >> 3) >> 1;\n  result_high = shifted_bit | shift_right;\n  input = input << 0x1d;\n  if (!check_condition2) {\n    unused3 = shifted_input & 0xff000000;\n    check_condition2 = unused3 == 0;\n  }\n  if (!check_condition2) {\n    check_condition2 = unused3 == 0xff000000;\n  }\n  if (!check_condition2) {\n    return CONCAT44(result_high,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(result_high,input);\n  }\n  if (unused3 == 0xff000000) {\n    return CONCAT44(result_high,input) | 0x8000000000000;\n  }\n  shifted_value = input;\n  shifted_input = shift_right;\n  if (shift_right == 0) {\n    shifted_value = 0;\n    shifted_input = input;\n  }\n  leading_zeros = LZCOUNT(shifted_input);\n  if (shift_right == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  shift_count = leading_zeros - 0xb;\n  check_condition3 = SBORROW4(shift_count,0x20);\n  shift_right = leading_zeros - 0x2b;\n  check_condition2 = (int)shift_right < 0;\n  check_condition1 = shift_right == 0;\n  if ((int)shift_count < 0x20) {\n    check_condition3 = SCARRY4(shift_right,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    check_condition2 = leading_zeros < 0;\n    check_condition1 = leading_zeros == 0;\n    shift_right = shift_count;\n    if (!check_condition1 && check_condition2 == check_condition3) {\n      shifted_value = shifted_input << (shift_count & 0xff);\n      shifted_input = shifted_input >> (0xcU - leading_zeros & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check_condition1 || check_condition2 != check_condition3) {\n    remaining_shift = 0x20 - shift_right;\n  }\n  shifted_input = shifted_input << (shift_right & 0xff);\n  if (check_condition1 || check_condition2 != check_condition3) {\n    shifted_input = shifted_input | shifted_value >> (remaining_shift & 0xff);\n  }\n  if (check_condition1 || check_condition2 != check_condition3) {\n    shifted_value = shifted_value << (shift_right & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_count < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_count) * 0x100000 | shifted_bit,shifted_value);\n  }\n  shift_right = ~(0x380 - shift_count);\n  if (0x1e < (int)shift_right) {\n    return CONCAT44(result_high,shifted_input >> (shift_right - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_right - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_right - 0x1f,0xc)) {\n    shift_right = shift_right + 1;\n    return CONCAT44(shifted_bit | shifted_input >> (shift_right & 0xff),\n                    shifted_value >> (shift_right & 0xff) | shifted_input << (0x20 - shift_right & 0xff));\n  }\n  return CONCAT44(result_high,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | shifted_input << (0xcU - leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_and_shift_08008590",
                "param_1": "input",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "uVar1": "shifted_bit",
                "uVar2": "shifted_value",
                "uVar3": "result_high",
                "uVar4": "shift_right",
                "uVar5": "shifted_input",
                "iVar6": "leading_zeros",
                "uVar7": "shift_count",
                "in_r12": "remaining_shift",
                "bVar8": "check_condition1",
                "bVar9": "check_condition2",
                "bVar10": "check_condition3"
            },
            "calling": [
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "report_realtime_status",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "protocol_execute_line",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "report_gcode_modes",
                "settings_store_global_setting",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085d4": {
            "entrypoint": "0x080085d4",
            "current_name": "reverse_and_shift_080085d4",
            "code": "\nulonglong reverse_and_shift_080085d4(uint input_1,uint input_2)\n\n{\n  byte byte_val;\n  uint result_1;\n  uint result_2;\n  uint temp_1;\n  int temp_2;\n  uint temp_3;\n  int temp_4;\n  uint temp_5;\n  bool bool_val_1;\n  bool bool_val_2;\n  bool bool_val_3;\n  \n  if ((input_1 | input_2) == 0) {\n    return CONCAT44(input_2,input_1);\n  }\n  temp_4 = 0x432;\n  temp_5 = input_2 >> 0x16;\n  if (temp_5 != 0) {\n    temp_4 = 3;\n    if (input_2 >> 0x19 != 0) {\n      temp_4 = 6;\n    }\n    if (input_2 >> 0x1c != 0) {\n      temp_4 = temp_4 + 3;\n    }\n    temp_1 = temp_4 - ((int)input_2 >> 0x1f);\n    temp_5 = input_1 << (0x20 - temp_1 & 0xff);\n    input_1 = input_1 >> (temp_1 & 0xff) | input_2 << (0x20 - temp_1 & 0xff);\n    input_2 = input_2 >> (temp_1 & 0xff);\n    temp_4 = temp_1 + 0x432;\n  }\n  if (0xfffff < input_2) {\n    if (0x1fffff < input_2) {\n      temp_1 = input_2 & 1;\n      input_2 = input_2 >> 1;\n      byte_val = (byte)input_1;\n      input_1 = (uint)(temp_1 != 0) << 0x1f | input_1 >> 1;\n      temp_5 = (uint)(byte_val & 1) << 0x1f | temp_5 >> 1;\n      temp_4 = temp_4 + 1;\n      if (0xffbfffff < (uint)(temp_4 * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_080083e0:\n    bool_val_2 = 0x7fffffff < temp_5;\n    if (temp_5 == 0x80000000) {\n      bool_val_2 = (input_1 & 1) != 0;\n    }\n    return CONCAT44(input_2 + temp_4 * 0x100000 + (uint)CARRY4(input_1,(uint)bool_val_2),input_1 + bool_val_2\n                   );\n  }\n  bool_val_1 = (temp_5 & 0x80000000) != 0;\n  temp_5 = temp_5 << 1;\n  temp_1 = input_1 * 2;\n  bool_val_2 = CARRY4(input_1,input_1);\n  input_1 = input_1 * 2 + (uint)bool_val_1;\n  input_2 = input_2 * 2 + (uint)(bool_val_2 || CARRY4(temp_1,(uint)bool_val_1));\n  bool_val_2 = temp_4 != 0;\n  temp_4 = temp_4 + -1;\n  if (bool_val_2 && 0xfffff < input_2) goto LAB_080083e0;\n  result_1 = input_1;\n  temp_1 = input_2;\n  if (input_2 == 0) {\n    result_1 = 0;\n    temp_1 = input_1;\n  }\n  temp_2 = LZCOUNT(temp_1);\n  if (input_2 == 0) {\n    temp_2 = temp_2 + 0x20;\n  }\n  temp_3 = temp_2 - 0xb;\n  bool_val_3 = SBORROW4(temp_3,0x20);\n  result_2 = temp_2 - 0x2b;\n  bool_val_2 = (int)result_2 < 0;\n  bool_val_1 = result_2 == 0;\n  if ((int)temp_3 < 0x20) {\n    bool_val_3 = SCARRY4(result_2,0xc);\n    temp_2 = temp_2 + -0x1f;\n    bool_val_2 = temp_2 < 0;\n    bool_val_1 = temp_2 == 0;\n    result_2 = temp_3;\n    if (!bool_val_1 && bool_val_2 == bool_val_3) {\n      result_1 = temp_1 << (temp_3 & 0xff);\n      temp_1 = temp_1 >> (0xcU - temp_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool_val_1 || bool_val_2 != bool_val_3) {\n    temp_5 = 0x20 - result_2;\n  }\n  temp_1 = temp_1 << (result_2 & 0xff);\n  if (bool_val_1 || bool_val_2 != bool_val_3) {\n    temp_1 = temp_1 | result_1 >> (temp_5 & 0xff);\n  }\n  if (bool_val_1 || bool_val_2 != bool_val_3) {\n    result_1 = result_1 << (result_2 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_3 <= temp_4) {\n    return CONCAT44(temp_1 + (temp_4 - temp_3) * 0x100000,result_1);\n  }\n  temp_5 = ~(temp_4 - temp_3);\n  if ((int)temp_5 < 0x1f) {\n    temp_4 = temp_5 - 0x13;\n    if (temp_4 != 0 && temp_4 < 0 == SCARRY4(temp_5 - 0x1f,0xc)) {\n      return (ulonglong)(result_1 >> (0x20 - (0xcU - temp_4) & 0xff) | temp_1 << (0xcU - temp_4 & 0xff));\n    }\n    temp_5 = temp_5 + 1;\n    return CONCAT44(temp_1 >> (temp_5 & 0xff),result_1 >> (temp_5 & 0xff) | temp_1 << (0x20 - temp_5 & 0xff)\n                   );\n  }\n  return (ulonglong)(temp_1 >> (temp_5 - 0x1f & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080085d4": "reverse_and_shift_080085d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "byte_val",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "temp_1",
                "iVar5": "temp_2",
                "uVar6": "temp_3",
                "iVar7": "temp_4",
                "uVar8": "temp_5",
                "bVar9": "bool_val_1",
                "bVar10": "bool_val_2",
                "bVar11": "bool_val_3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085e4": {
            "entrypoint": "0x080085e4",
            "current_name": "calculate_080085e4",
            "code": "\nulonglong calculate_080085e4(uint dividend,uint divisor)\n\n{\n  byte carry;\n  uint quotient;\n  uint divisorCopy;\n  uint temp;\n  int shiftCount;\n  uint normalizedShift;\n  int adjustedShiftCount;\n  uint signBit;\n  uint carryBit;\n  bool isPositiveDivisor;\n  bool isOverflow;\n  bool carryOverflow;\n  \n  if ((dividend | divisor) == 0) {\n    return CONCAT44(divisor,dividend);\n  }\n  signBit = divisor & 0x80000000;\n  divisorCopy = divisor;\n  if ((int)signBit < 0) {\n    isOverflow = dividend != 0;\n    dividend = -dividend;\n    divisorCopy = -divisor - (uint)isOverflow;\n  }\n  adjustedShiftCount = 0x432;\n  carryBit = divisorCopy >> 0x16;\n  if (carryBit != 0) {\n    adjustedShiftCount = 3;\n    if (divisorCopy >> 0x19 != 0) {\n      adjustedShiftCount = 6;\n    }\n    if (divisorCopy >> 0x1c != 0) {\n      adjustedShiftCount = adjustedShiftCount + 3;\n    }\n    temp = adjustedShiftCount - ((int)divisorCopy >> 0x1f);\n    carryBit = dividend << (0x20 - temp & 0xff);\n    dividend = dividend >> (temp & 0xff) | divisorCopy << (0x20 - temp & 0xff);\n    divisorCopy = divisorCopy >> (temp & 0xff);\n    adjustedShiftCount = temp + 0x432;\n  }\n  if (0xfffff < divisorCopy) {\n    if (0x1fffff < divisorCopy) {\n      temp = divisorCopy & 1;\n      divisorCopy = divisorCopy >> 1;\n      carry = (byte)dividend;\n      dividend = (uint)(temp != 0) << 0x1f | dividend >> 1;\n      carryBit = (uint)(carry & 1) << 0x1f | carryBit >> 1;\n      adjustedShiftCount = adjustedShiftCount + 1;\n      if (0xffbfffff < (uint)(adjustedShiftCount * 0x200000)) {\n        return (ulonglong)(signBit | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080083e0:\n    isOverflow = 0x7fffffff < carryBit;\n    if (carryBit == 0x80000000) {\n      isOverflow = (dividend & 1) != 0;\n    }\n    return CONCAT44(divisorCopy + adjustedShiftCount * 0x100000 + (uint)CARRY4(dividend,(uint)isOverflow) | signBit,\n                    dividend + isOverflow);\n  }\n  isPositiveDivisor = (carryBit & 0x80000000) != 0;\n  carryBit = carryBit << 1;\n  temp = dividend * 2;\n  isOverflow = CARRY4(dividend,dividend);\n  dividend = dividend * 2 + (uint)isPositiveDivisor;\n  divisorCopy = divisorCopy * 2 + (uint)(isOverflow || CARRY4(temp,(uint)isPositiveDivisor));\n  isOverflow = adjustedShiftCount != 0;\n  adjustedShiftCount = adjustedShiftCount + -1;\n  if (isOverflow && 0xfffff < divisorCopy) goto LAB_080083e0;\n  quotient = dividend;\n  temp = divisorCopy;\n  if (divisorCopy == 0) {\n    quotient = 0;\n    temp = dividend;\n  }\n  shiftCount = leadingZeroCount(temp);\n  if (divisorCopy == 0) {\n    shiftCount = shiftCount + 0x20;\n  }\n  normalizedShift = shiftCount - 0xb;\n  carryOverflow = SBORROW4(normalizedShift,0x20);\n  divisorCopy = shiftCount - 0x2b;\n  isOverflow = (int)divisorCopy < 0;\n  isPositiveDivisor = divisorCopy == 0;\n  if ((int)normalizedShift < 0x20) {\n    carryOverflow = SCARRY4(divisorCopy,0xc);\n    shiftCount = shiftCount + -0x1f;\n    isOverflow = shiftCount < 0;\n    isPositiveDivisor = shiftCount == 0;\n    divisorCopy = normalizedShift;\n    if (!isPositiveDivisor && isOverflow == carryOverflow) {\n      quotient = temp << (normalizedShift & 0xff);\n      temp = temp >> (0xcU - shiftCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isPositiveDivisor || isOverflow != carryOverflow) {\n    carryBit = 0x20 - divisorCopy;\n  }\n  temp = temp << (divisorCopy & 0xff);\n  if (isPositiveDivisor || isOverflow != carryOverflow) {\n    temp = temp | quotient >> (carryBit & 0xff);\n  }\n  if (isPositiveDivisor || isOverflow != carryOverflow) {\n    quotient = quotient << (divisorCopy & 0xff);\n  }\nLAB_08008458:\n  if ((int)normalizedShift <= adjustedShiftCount) {\n    return CONCAT44(temp + (adjustedShiftCount - normalizedShift) * 0x100000 | signBit,quotient);\n  }\n  divisorCopy = ~(adjustedShiftCount - normalizedShift);\n  if ((int)divisorCopy < 0x1f) {\n    adjustedShiftCount = divisorCopy - 0x13;\n    if (adjustedShiftCount != 0 && adjustedShiftCount < 0 == SCARRY4(divisorCopy - 0x1f,0xc)) {\n      return CONCAT44(divisor,quotient >> (0x20 - (0xcU - adjustedShiftCount) & 0xff) |\n                              temp << (0xcU - adjustedShiftCount & 0xff)) & 0x80000000ffffffff;\n    }\n    divisorCopy = divisorCopy + 1;\n    return CONCAT44(signBit | temp >> (divisorCopy & 0xff),\n                    quotient >> (divisorCopy & 0xff) | temp << (0x20 - divisorCopy & 0xff));\n  }\n  return CONCAT44(divisor,temp >> (divisorCopy - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080085e4": "calculate_080085e4",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "carry",
                "uVar2": "quotient",
                "uVar3": "divisorCopy",
                "uVar4": "temp",
                "iVar5": "shiftCount",
                "uVar6": "normalizedShift",
                "iVar7": "adjustedShiftCount",
                "uVar8": "signBit",
                "uVar9": "carryBit",
                "bVar10": "isPositiveDivisor",
                "bVar11": "isOverflow",
                "bVar12": "carryOverflow",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_product_08008640",
            "code": "\nulonglong calculateProduct_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  uint unaff_r5;\n  uint temp6;\n  uint temp7;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong combinedInput;\n  \n  combinedInput = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp3 = input2 >> 0x14 & 0x7ff;\n  condition1 = temp3 == 0;\n  if (!condition1) {\n    unaff_r5 = input4 >> 0x14 & 0x7ff;\n    condition1 = unaff_r5 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp3 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = unaff_r5 == 0x7ff;\n  }\n  if (condition1) {\n    combinedInput = calculate_bitwise_difference_0800881c();\n  }\n  temp2 = (uint)(combinedInput >> 0x20);\n  temp4 = temp3 + unaff_r5;\n  temp3 = temp2 ^ input4;\n  temp2 = temp2 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  condition1 = ((uint)combinedInput | temp2 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp2 = temp2 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (condition1) {\n    input3 = (uint)combinedInput | input3;\n    input4 = (temp3 & 0x80000000 | temp2) ^ input4;\n    temp3 = temp6 >> 1;\n    condition3 = SBORROW4(temp4,temp3);\n    temp5 = temp4 - temp3;\n    condition1 = temp5 == 0;\n    temp2 = temp5;\n    if (!condition1 && (int)temp3 <= temp4) {\n      condition3 = SBORROW4(temp6,temp5);\n      temp2 = temp6 - temp5;\n      condition1 = temp6 == temp5;\n    }\n    if (!condition1 && (int)temp2 < 0 == condition3) {\n      input4 = input4 | temp5 * 0x100000;\n    }\n    if (!condition1 && (int)temp2 < 0 == condition3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    condition3 = SBORROW4(temp5,1);\n    temp5 = temp5 - 1;\n    condition1 = temp5 == 0;\n    temp3 = temp5;\n  }\n  else {\n    result = (combinedInput & 0xffffffff) * (ulonglong)input3;\n    combinedInput = (combinedInput & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp2 * (ulonglong)input3 + (result >> 0x20);\n    temp7 = (uint)combinedInput;\n    temp1 = (ulonglong)temp2 * (ulonglong)input4 + (combinedInput >> 0x20);\n    temp6 = (uint)temp1;\n    temp2 = (uint)((ulonglong)temp1 >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp5 = (temp4 + -0x3ff) - (uint)(temp2 < 0x200);\n    if (temp2 < 0x200) {\n      condition1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp1 = CONCAT44(temp2 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)condition1)),\n                       temp6 * 2 + (uint)condition1);\n    }\n    input4 = temp3 & 0x80000000 | (int)((ulonglong)temp1 >> 0x20) << 0xb | (uint)temp1 >> 0x15;\n    input3 = (uint)temp1 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    condition2 = 0xfc < temp5;\n    condition3 = SBORROW4(temp5,0xfd);\n    temp2 = temp5 - 0xfd;\n    condition1 = temp2 == 0;\n    temp3 = temp2;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < temp2;\n      condition3 = SBORROW4(temp2,0x700);\n      temp3 = temp5 - 0x7fd;\n      condition1 = temp2 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        condition1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp5 * 0x100000 + (uint)CARRY4(input3,(uint)condition1),input3 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)temp3 < 0 == condition3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(temp5,0x36);\n  condition1 = (int)(temp5 + 0x36) < 0;\n  condition3 = temp5 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input3 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input4,input3);\n  }\n  temp3 = -temp5;\n  temp2 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp5 = input3 >> (temp2 & 0xff) | input4 << (0x20 - temp2 & 0xff);\n    temp3 = (input4 >> (temp2 & 0xff) & ~((input4 & 0x80000000) >> (temp2 & 0xff))) -\n            ((int)temp5 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp2 & 0xff) | temp5 << 1) == 0) {\n      temp3 = temp3 & ~(temp5 >> 0x1f);\n    }\n    return CONCAT44(input4,temp3) & 0x80000000ffffffff;\n  }\n  temp4 = temp3 - 0x14;\n  if (temp4 == 0 || temp4 < 0 != SCARRY4(temp2,0xc)) {\n    temp7 = input3 << (temp5 + 0x20 & 0xff);\n    temp2 = input3 >> (temp3 & 0xff) | input4 << (temp5 + 0x20 & 0xff);\n    temp5 = temp2 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp5 = temp5 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp3 & 0xff)) +\n                    (uint)CARRY4(temp2,-((int)temp7 >> 0x1f)),temp5);\n  }\n  temp3 = 0xc - temp4;\n  temp5 = input3 << (temp3 & 0xff);\n  temp3 = input3 >> (0x20 - temp3 & 0xff) | input4 << (temp3 & 0xff);\n  temp2 = temp3 + -((int)temp5 >> 0x1f);\n  if ((temp6 | temp5 << 1) == 0) {\n    temp2 = temp2 & ~(temp5 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp3,-((int)temp5 >> 0x1f)),temp2);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_product_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "lVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "combinedInput"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "to_millimeters",
                "calculate_trapezoid_for_block",
                "atan",
                "report_realtime_status",
                "__kernel_rem_pio2",
                "homing_cycle",
                "__kernel_sin",
                "plan_buffer_line",
                "scalbn",
                "read_float",
                "__ieee754_sqrt",
                "mc_arc",
                "__ieee754_hypot",
                "report_gcode_modes",
                "__kernel_cos",
                "report_gcode_parameters"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_difference_0800881c",
            "code": "\nulonglong calculate_bitwise_difference_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_difference_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "decode_and_extract_bits_08008894",
            "code": "\nulonglong decode_and_extract_bits_08008894(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 extracted_bits;\n  \n  extracted_bits = CONCAT44(input_param2,input_param1);\n  temp14 = 0x7ff;\n  temp7 = input_param2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input_param4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    extracted_bits = decode_and_extract_bits_08008894_08008a02();\n  }\n  temp9 = (uint)((ulonglong)extracted_bits >> 0x20);\n  temp12 = (uint)extracted_bits;\n  temp8 = temp7 - temp10;\n  if ((input_param3 | input_param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_param4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_param4 << 0xc) >> 4 | 0x10000000 | input_param3 >> 0x18;\n    temp14 = input_param3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input_param4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input_param3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "decode_and_extract_bits_08008894",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "extracted_bits"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "sqrt",
                "atan",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "decode_and_extract_bits_08008a02",
            "code": "\nulonglong decode_and_extract_bits_08008a02(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint shifted_bit;\n  uint extracted_bits;\n  uint constant;\n  bool is_zero;\n  \n  shifted_bit = constant & input_4 >> 0x14;\n  extracted_bits = input_2;\n  if (bit_2 != constant || shifted_bit != constant) {\n    if (bit_2 == constant) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, extracted_bits = input_4, shifted_bit != constant)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (shifted_bit == constant) {\n      input_1 = input_3;\n      extracted_bits = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input_1 | input_2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input_3 | input_4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit_2 == 0) {\n          extracted_bits = input_2 & 0x80000000;\n          do {\n            bit_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | extracted_bits;\n          if (shifted_bit != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          extracted_bits = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(extracted_bits != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto LAB_08008874;\n      if ((input_3 | input_4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(extracted_bits,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "decode_and_extract_bits_08008a02",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "shifted_bit",
                "uVar3": "extracted_bits",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a64": {
            "entrypoint": "0x08008a64",
            "current_name": "check_parameters_08008a64",
            "code": "\nuint check_parameters_08008a64(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isLess;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isLess = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isLess = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isLess) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a64": "check_parameters_08008a64",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLess"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_conditions_and_equality_08008a6c",
            "code": "\nuint check_conditions_and_equality_08008a6c(uint shifted_input_1,uint shifted_input_2,uint shifted_input_3,uint shifted_input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(shifted_input_2 << 1) >> 0x15 == -1 || (int)(shifted_input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(shifted_input_2 << 1) >> 0x15 == -1 && ((shifted_input_1 | shifted_input_2 << 0xc) != 0)) ||\n      (((int)(shifted_input_4 << 1) >> 0x15 == -1 && ((shifted_input_3 | shifted_input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (shifted_input_1 | shifted_input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (shifted_input_3 | shifted_input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = shifted_input_2 == shifted_input_4;\n  }\n  if (isZero) {\n    isZero = shifted_input_1 == shifted_input_3;\n  }\n  if (!isZero) {\n    result = shifted_input_2 ^ shifted_input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = shifted_input_2 == shifted_input_4;\n    }\n    isNegative = -1 < (int)result && shifted_input_4 <= shifted_input_2;\n    if (isZero) {\n      isNegative = shifted_input_3 <= shifted_input_1;\n    }\n    shifted_input_4 = (int)shifted_input_4 >> 0x1f;\n    if (!isNegative) {\n      shifted_input_4 = ~shifted_input_4;\n    }\n    return shifted_input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_conditions_and_equality_08008a6c",
                "param_1": "shifted_input_1",
                "param_2": "shifted_input_2",
                "param_3": "shifted_input_3",
                "param_4": "shifted_input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_equality_and_conditions_08008a74",
            "code": "\nuint checkEqualityAndConditions_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isEqual;\n  bool isConditionMet;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isEqual = (value1 | value2 << 1) == 0;\n  if (isEqual) {\n    isEqual = (value3 | value4 << 1) == 0;\n  }\n  if (!isEqual) {\n    isEqual = value2 == value4;\n  }\n  if (isEqual) {\n    isEqual = value1 == value3;\n  }\n  if (!isEqual) {\n    result = value2 ^ value4;\n    isEqual = result == 0;\n    if (-1 < (int)result) {\n      isEqual = value2 == value4;\n    }\n    isConditionMet = -1 < (int)result && value4 <= value2;\n    if (isEqual) {\n      isConditionMet = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isConditionMet) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_equality_and_conditions_08008a74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isEqual",
                "bVar3": "isConditionMet"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_and_set_values_08008af0",
            "code": "\nvoid compareAndSetValues_08008af0(undefined4 value1,undefined4 value2,undefined4 compareValue1,undefined4 compareValue2)\n\n{\n  __aeabi_cdcmpeq(compareValue1,compareValue2,value1,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_and_set_values_08008af0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "compareValue1",
                "param_4": "compareValue2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "convert_float_to_undefined_08008b00",
            "code": "\nundefined4 convertFloatToUndefined_08008b00(undefined4 inputValue)\n\n{\n  __nedf2();\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "convert_float_to_undefined_08008b00",
                "param_1": "inputValue"
            },
            "calling": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "is_not_zero_08008b10",
            "code": "\nbool isNotZero_08008b10(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "is_not_zero_08008b10",
                "in_ZR": "result"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_string_empty_08008b24",
            "code": "\nbool is_string_empty_08008b24(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_string_empty_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b38": {
            "entrypoint": "0x08008b38",
            "current_name": "compare_flags_and_return_result_08008b38",
            "code": "\nbool compareFlagsAndReturnResult_08008b38(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_08008b38": "compare_flags_and_return_result_08008b38",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_less_or_equal_08008b4c",
            "code": "\nbool check_less_or_equal_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_less_or_equal_08008b4c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_zero_char_present_08008b60",
            "code": "\nbool is_zero_char_present_08008b60(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_zero_char_present_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "ceil",
                "atan",
                "plan_buffer_line",
                "floor"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_params_08008b74",
            "code": "\nundefined4 check_params_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_params_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "reverse_bits_08008ba0",
            "code": "\nuint reverseBits_08008ba0(uint inputValue,uint inputMask)\n\n{\n  uint shiftedValue;\n  int shiftedMask;\n  uint shiftedAmount;\n  \n  shiftedMask = inputMask * 2 + 0x200000;\n  if (inputMask * 2 < 0xffe00000) {\n    if (-1 < shiftedMask) {\n      return 0;\n    }\n    shiftedValue = shiftedMask >> 0x15;\n    shiftedAmount = -shiftedValue - 0x3e1;\n    if (shiftedValue < 0xfffffc20 && shiftedAmount != 0) {\n      shiftedValue = (inputMask << 0xb | 0x80000000 | inputValue >> 0x15) >> (shiftedAmount & 0xff);\n      if ((inputMask & 0x80000000) != 0) {\n        shiftedValue = -shiftedValue;\n      }\n      return shiftedValue;\n    }\n  }\n  else if ((inputValue | inputMask << 0xc) != 0) {\n    return 0;\n  }\n  inputMask = inputMask & 0x80000000;\n  if (inputMask == 0) {\n    inputMask = 0x7fffffff;\n  }\n  return inputMask;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "reverse_bits_08008ba0",
                "param_1": "inputValue",
                "param_2": "inputMask",
                "uVar1": "shiftedValue",
                "iVar2": "shiftedMask",
                "uVar3": "shiftedAmount"
            },
            "calling": [
                "gc_execute_line",
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "lround",
                "__kernel_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint multiplier)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((multiplier & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = multiplier * 2 + 0x200000;\n  if (multiplier * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (multiplier << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | multiplier << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "input_value",
                "param_2": "multiplier",
                "iVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "homing_cycle",
                "settings_store_global_setting",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_floating_point_08008c30",
            "code": "\nuint calculateFloatingPoint_08008c30(uint input,uint multiplier)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool condition1;\n  bool condition2;\n  \n  temp1 = multiplier * 2;\n  condition2 = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!condition2) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  condition1 = result == 0;\n  if (!condition2 && temp2 >= 0x200000) {\n    condition1 = temp3 == 0x1fc00000;\n  }\n  if (((condition2 || temp2 < 0x200000) || 0x1fc00000 < temp3) || condition1) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input >> (temp1 & 0xff);\n    if (input << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = multiplier & 0x1fffff | 0x100000;\n    input = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | input >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input * 8);\n  if (input * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_floating_point_08008c30",
                "param_1": "input",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "calling": [
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "mc_arc",
                "report_realtime_status",
                "homing_cycle",
                "report_gcode_modes",
                "max_allowable_speed",
                "plan_buffer_line",
                "report_gcode_parameters"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd0": {
            "entrypoint": "0x08008cd0",
            "current_name": "add_negative_float_08008cd0",
            "code": "\nvoid add_negative_float_08008cd0(uint input)\n\n{\n  __addsf3(input ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008cd0": "add_negative_float_08008cd0",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_result_08008cd8",
            "code": "\nuint calculateResult_08008cd8(uint inputValue1,uint inputValue2,undefined4 constantValue1,uint constantValue2)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isTrue;\n  \n  result1 = inputValue2 ^ 0x80000000;\n  temp1 = inputValue1 << 1;\n  isTrue = temp1 == 0;\n  if (!isTrue) {\n    constantValue2 = inputValue2 << 1;\n    isTrue = constantValue2 == 0;\n  }\n  if (!isTrue) {\n    isTrue = temp1 == constantValue2;\n  }\n  shiftedValue1 = (int)temp1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftedValue1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)constantValue2 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftedValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      temp1 = result1;\n      if (shiftedValue1 == -1) {\n        temp1 = inputValue1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        result1 = temp1;\n      }\n      isTrue = (temp1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (result1 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = temp1 == result1;\n      }\n      if (!isTrue) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((inputValue1 ^ result1) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        inputValue1 = result1;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != result1) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      result1 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (temp1 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_08008e12:\n    return inputValue1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  constantValue2 = constantValue2 >> 0x18;\n  temp3 = constantValue2 - temp1;\n  isTrue = temp3 != 0;\n  temp2 = temp1;\n  if (isTrue && temp1 <= constantValue2) {\n    temp2 = temp1 + temp3;\n  }\n  if (isTrue && temp1 <= constantValue2) {\n    result1 = result1 ^ inputValue1;\n  }\n  if (isTrue && temp1 <= constantValue2) {\n    inputValue1 = inputValue1 ^ result1;\n  }\n  if (isTrue && temp1 <= constantValue2) {\n    result1 = result1 ^ inputValue1;\n  }\n  if (constantValue2 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return inputValue1;\n  }\n  temp1 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (temp2 == temp3) {\n    result2 = result2 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result2 >> (temp3 & 0xff));\n  result2 = result2 << (0x20 - temp3 & 0xff);\n  inputValue1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isTrue = result2 != 0;\n    result2 = -result2;\n    temp1 = -temp1 - (uint)isTrue;\n  }\n  if (temp1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    temp1 = temp1 * 2 + (uint)(result1 != 0);\n    result1 = temp2 - 2;\n    if (temp2 - 1 == 0 || temp1 < 0x800000) {\n      temp3 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp3 & 0xff);\n      if ((int)result1 < (int)temp3) {\n        temp1 = temp1 >> (-(result1 - temp3) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (result1 - temp3) * 0x800000;\n      }\n      return temp1 | inputValue1;\n    }\n  }\n  else {\n    result1 = temp2 - 1;\n    if (0xffffff < temp1) {\n      result1 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = temp2;\n      if (0xfd < temp2) goto LAB_08008e12;\n    }\n  }\n  temp1 = temp1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_result_08008cd8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "constantValue1",
                "param_4": "constantValue2",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "bVar8": "isTrue"
            },
            "calling": [
                "gc_execute_line",
                "intersection_distance",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint maskedValue1;\n  uint maskedValue2;\n  uint shift;\n  uint difference;\n  bool isZero;\n  \n  maskedValue2 = value1 << 1;\n  isZero = maskedValue2 == 0;\n  if (!isZero) {\n    param4 = value2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = maskedValue2 == param4;\n  }\n  shiftedValue1 = (int)maskedValue2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedValue2 = (int)(value2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      maskedValue2 = value2;\n      if (shiftedValue1 == -1) {\n        maskedValue2 = value1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        value2 = maskedValue2;\n      }\n      isZero = (maskedValue2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (value2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = maskedValue2 == value2;\n      }\n      if (!isZero) {\n        maskedValue2 = maskedValue2 | 0x400000;\n      }\n      return maskedValue2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (maskedValue2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((maskedValue2 & 0xff000000) == 0) {\n      maskedValue2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        maskedValue2 = maskedValue2 | 0x80000000;\n      }\n      return maskedValue2;\n    }\n    if (maskedValue2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_08008e12:\n    return value1 | 0x7f800000;\n  }\n  maskedValue2 = maskedValue2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - maskedValue2;\n  isZero = difference != 0;\n  shift = maskedValue2;\n  if (isZero && maskedValue2 <= param4) {\n    shift = maskedValue2 + difference;\n  }\n  if (isZero && maskedValue2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (isZero && maskedValue2 <= param4) {\n    value1 = value1 ^ value2;\n  }\n  if (isZero && maskedValue2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (param4 < maskedValue2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return value1;\n  }\n  maskedValue2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    maskedValue2 = -maskedValue2;\n  }\n  maskedValue1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    maskedValue1 = -maskedValue1;\n  }\n  if (shift == difference) {\n    maskedValue1 = maskedValue1 ^ 0x800000;\n    if (shift == 0) {\n      maskedValue2 = maskedValue2 ^ 0x800000;\n      shift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  maskedValue2 = maskedValue2 + ((int)maskedValue1 >> (difference & 0xff));\n  maskedValue1 = maskedValue1 << (0x20 - difference & 0xff);\n  value1 = maskedValue2 & 0x80000000;\n  if ((int)maskedValue2 < 0) {\n    isZero = maskedValue1 != 0;\n    maskedValue1 = -maskedValue1;\n    maskedValue2 = -maskedValue2 - (uint)isZero;\n  }\n  if (maskedValue2 < 0x800000) {\n    difference = maskedValue1 & 0x80000000;\n    maskedValue1 = maskedValue1 << 1;\n    maskedValue2 = maskedValue2 * 2 + (uint)(difference != 0);\n    difference = shift - 2;\n    if (shift - 1 == 0 || maskedValue2 < 0x800000) {\n      shift = LZCOUNT(maskedValue2) - 8;\n      maskedValue2 = maskedValue2 << (shift & 0xff);\n      if ((int)difference < (int)shift) {\n        maskedValue2 = maskedValue2 >> (-(difference - shift) & 0xff);\n      }\n      else {\n        maskedValue2 = maskedValue2 + (difference - shift) * 0x800000;\n      }\n      return maskedValue2 | value1;\n    }\n  }\n  else {\n    difference = shift - 1;\n    if (0xffffff < maskedValue2) {\n      difference = maskedValue2 & 1;\n      maskedValue2 = maskedValue2 >> 1;\n      maskedValue1 = (uint)(difference != 0) << 0x1f | maskedValue1 >> 1;\n      difference = shift;\n      if (0xfd < shift) goto LAB_08008e12;\n    }\n  }\n  maskedValue2 = maskedValue2 + difference * 0x800000 + (uint)(0x7fffffff < maskedValue1);\n  if (maskedValue1 == 0x80000000) {\n    maskedValue2 = maskedValue2 & 0xfffffffe;\n  }\n  return maskedValue2 | value1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "maskedValue1",
                "uVar4": "maskedValue2",
                "uVar5": "shift",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "intersection_distance",
                "mc_arc",
                "__aeabi_frsub",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_new_value_08008e3c",
            "code": "\nuint calculateNewValue_08008e3c(uint inputValue)\n\n{\n  uint leadingZeroesCount;\n  uint shiftAmount;\n  int constantValue;\n  uint shiftedZero;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroesCount = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroesCount - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroesCount) {\n    shiftedZero = 0 << (shiftAmount & 0xff);\n    leadingZeroesCount = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedZero);\n    if (shiftedZero == 0x80000000) {\n      leadingZeroesCount = leadingZeroesCount & 0xfffffffe;\n    }\n    return leadingZeroesCount;\n  }\n  shiftAmount = inputValue << leadingZeroesCount + 0x18;\n  leadingZeroesCount = constantValue + ((inputValue >> (0x20 - (leadingZeroesCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroesCount = leadingZeroesCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroesCount;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_new_value_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroesCount",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "shiftedZero"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_unsigned_value_08008e44",
            "code": "\nuint calculateUnsignedValue_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_unsigned_value_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "gc_set_current_position",
                "mc_go_home",
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "report_realtime_status",
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e60": {
            "entrypoint": "0x08008e60",
            "current_name": "calculate_adjusted_value_08008e60",
            "code": "\nuint calculateAdjustedValue_08008e60(uint inputValue1,uint inputValue2)\n\n{\n  uint adjustedValue1;\n  uint adjustedValue2;\n  uint shiftAmount;\n  uint shiftedValue;\n  int initialOffset;\n  \n  if ((inputValue1 | inputValue2) == 0) {\n    return inputValue1;\n  }\n  adjustedValue1 = inputValue1;\n  adjustedValue2 = inputValue2;\n  if (inputValue2 == 0) {\n    adjustedValue1 = 0;\n    adjustedValue2 = inputValue1;\n  }\n  initialOffset = 0x5b000000;\n  if (inputValue2 == 0) {\n    initialOffset = 0x4b000000;\n  }\n  shiftAmount = LZCOUNT(adjustedValue2);\n  shiftedValue = shiftAmount - 8;\n  initialOffset = initialOffset + -0x800000 + shiftedValue * -0x800000;\n  if (shiftAmount < 8) {\n    shiftedValue = adjustedValue2 << shiftAmount + 0x18;\n    adjustedValue2 = initialOffset + ((adjustedValue2 >> (0x20 - (shiftAmount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n    if ((adjustedValue1 | shiftedValue << 1) == 0) {\n      adjustedValue2 = adjustedValue2 & ~(shiftedValue >> 0x1f);\n    }\n    return adjustedValue2;\n  }\n  shiftAmount = adjustedValue1 << (shiftedValue & 0xff);\n  adjustedValue2 = initialOffset + (adjustedValue2 << (shiftedValue & 0xff)) +\n          (adjustedValue1 >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < shiftAmount);\n  if (shiftAmount == 0x80000000) {\n    adjustedValue2 = adjustedValue2 & 0xfffffffe;\n  }\n  return adjustedValue2;\n}\n\n",
            "renaming": {
                "FUN_08008e60": "calculate_adjusted_value_08008e60",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "adjustedValue1",
                "uVar2": "adjustedValue2",
                "uVar3": "shiftAmount",
                "uVar4": "shiftedValue",
                "iVar5": "initialOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e70": {
            "entrypoint": "0x08008e70",
            "current_name": "calculate_result_08008e70",
            "code": "\nuint calculateResult_08008e70(uint input1,uint input2)\n\n{\n  uint absInput2;\n  uint absInput1;\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signedBit;\n  int intermediateResult;\n  bool hasInput1;\n  \n  if ((input1 | input2) equal 0) {\n    return input1;\n  }\n  signedBit = input2 bitwiseAnd 0x80000000;\n  if ((int)signedBit < 0) {\n    hasInput1 = input1 != 0;\n    input1 = subtractinput1;\n    input2 = subtractinput2 subtract (uint)hasInput1;\n  }\n  absInput1 = input1;\n  absInput2 = input2;\n  if (input2 equal 0) {\n    absInput1 = 0;\n    absInput2 = input1;\n  }\n  signedBit = signedBit | 0x5b000000;\n  if (input2 equal 0) {\n    signedBit = signedBit + 0xf0000000;\n  }\n  leadingZeros = countLeadingZeros(absInput2);\n  shiftAmount = leadingZeros subtract 8;\n  intermediateResult = (signedBit subtract 0x800000) + shiftAmount * subtract0x800000;\n  if (leadingZeros < 8) {\n    shiftAmount = absInput2 << leadingZeros + 0x18;\n    signedBit = intermediateResult + ((absInput2 >> (0x20 subtract (leadingZeros + 0x18) bitwiseAnd 0xff)) subtract ((int)shiftAmount >> 0x1f));\n    if ((absInput1 | shiftAmount << 1) equal 0) {\n      signedBit = signedBit bitwiseAnd bitwiseNot(shiftAmount >> 0x1f);\n    }\n    return signedBit;\n  }\n  leadingZeros = absInput1 << (shiftAmount bitwiseAnd 0xff);\n  signedBit = intermediateResult + (absInput2 << (shiftAmount bitwiseAnd 0xff)) +\n          (absInput1 >> (0x20 subtract shiftAmount bitwiseAnd 0xff)) + (uint)(0x7fffffff < leadingZeros);\n  if (leadingZeros equal 0x80000000) {\n    signedBit = signedBit bitwiseAnd 0xfffffffe;\n  }\n  return signedBit;\n}\n\n",
            "renaming": {
                "FUN_08008e70": "calculate_result_08008e70",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "absInput2",
                "uVar2": "absInput1",
                "uVar3": "leadingZeros",
                "uVar4": "shiftAmount",
                "uVar5": "signedBit",
                "iVar6": "intermediateResult",
                "bVar7": "hasInput1",
                "LZCOUNT": "countLeadingZeros",
                "==": "equal",
                "&": "bitwiseAnd",
                "-": "subtract",
                "~": "bitwiseNot"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculateFloat_08008eec(uint value1,uint value2,undefined4 bits1,uint bits2)\n\n{\n  longlong result1;\n  uint result2;\n  uint bits1Copy;\n  int sum;\n  int diff;\n  uint product;\n  int threshold;\n  uint finalResult;\n  bool isZero;\n  bool isCarry;\n  \n  bits1Copy = value1 >> 0x17 & 0xff;\n  isZero = bits1Copy == 0;\n  if (!isZero) {\n    bits2 = value2 >> 0x17 & 0xff;\n    isZero = bits2 == 0;\n  }\n  if (!isZero) {\n    isZero = bits1Copy == 0xff;\n  }\n  if (!isZero) {\n    isZero = bits2 == 0xff;\n  }\n  if (isZero) {\n    bits2 = value2 >> 0x17 & 0xff;\n    if (bits1Copy == 0xff || bits2 == 0xff) {\n      isZero = value1 == 0 || value1 == 0x80000000;\n      result2 = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isZero = value2 == 0;\n        result2 = value1;\n      }\n      if (!isZero) {\n        isZero = value2 == 0x80000000;\n      }\n      finalResult = result2;\n      if (((isZero) || ((bits1Copy == 0xff && ((result2 & 0x7fffff) != 0)))) ||\n         ((bits2 == 0xff && (finalResult = value2, (value2 & 0x7fffff) != 0)))) {\n        return finalResult | 0x7fc00000;\n      }\n      result2 = result2 ^ value2;\n      goto LAB_0800903c;\n    }\n    isZero = (value1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (value2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isZero = bits1Copy == 0;\n    result2 = value1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value1 = value1 << 1;\n        isZero = (value1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits1Copy = bits1Copy - 1;\n    }\n    value1 = value1 | result2;\n    isZero = bits2 == 0;\n    result2 = value2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value2 = value2 << 1;\n        isZero = (value2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits2 = bits2 - 1;\n    }\n    value2 = value2 | result2;\n  }\n  sum = bits1Copy + bits2;\n  finalResult = value1 ^ value2;\n  bits1Copy = value1 << 9;\n  isZero = bits1Copy == 0;\n  if (!isZero) {\n    value2 = value2 << 9;\n    isZero = value2 == 0;\n  }\n  if (isZero) {\n    if (bits1Copy == 0) {\n      value2 = value2 << 9;\n    }\n    result2 = finalResult & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isCarry = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    threshold = diff;\n    if (!isZero && 0x7e < sum) {\n      isCarry = SBORROW4(0xff,diff);\n      threshold = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && threshold < 0 == isCarry) {\n      result2 = result2 | diff * 0x800000;\n    }\n    if (!isZero && threshold < 0 == isCarry) {\n      return result2;\n    }\n    result2 = result2 | 0x800000;\n    product = 0;\n    isCarry = SBORROW4(diff,1);\n    finalResult = sum - 0x80;\n    isZero = finalResult == 0;\n    bits1Copy = finalResult;\n  }\n  else {\n    result1 = (ulonglong)(bits1Copy >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    product = (uint)result1;\n    result2 = (uint)((ulonglong)result1 >> 0x20);\n    isZero = result2 < 0x800000;\n    if (isZero) {\n      result2 = result2 << 1;\n    }\n    if (isZero) {\n      result2 = result2 | product >> 0x1f;\n      product = product << 1;\n    }\n    result2 = finalResult & 0x80000000 | result2;\n    finalResult = (sum + -0x7f) - (uint)isZero;\n    isCarry = SBORROW4(finalResult,0xfd);\n    isZero = finalResult == 0xfd;\n    bits1Copy = finalResult - 0xfd;\n    if (finalResult < 0xfe) {\n      result2 = result2 + finalResult * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result2 = result2 & 0xfffffffe;\n      }\n      return result2;\n    }\n  }\n  if (isZero || (int)bits1Copy < 0 != isCarry) {\n    isZero = (int)(finalResult + 0x19) < 0;\n    if (finalResult == 0xffffffe7 || isZero != SCARRY4(finalResult,0x19)) {\n      result2 = result2 & 0x80000000;\n    }\n    if (finalResult != 0xffffffe7 && isZero == SCARRY4(finalResult,0x19)) {\n      bits1Copy = (result2 << 1) >> (-finalResult & 0xff);\n      finalResult = result2 << (finalResult + 0x20 & 0xff);\n      bits1Copy = ((uint)((result2 & 0x80000000) != 0) << 0x1f | bits1Copy >> 1) + (uint)((byte)bits1Copy & 1);\n      if ((product | finalResult << 1) == 0) {\n        bits1Copy = bits1Copy & ~(finalResult >> 0x1f);\n      }\n      return bits1Copy;\n    }\n    return result2;\n  }\nLAB_0800903c:\n  return result2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "bits1",
                "param_4": "bits2",
                "lVar1": "result1",
                "uVar2": "result2",
                "uVar3": "bits1Copy",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "product",
                "iVar7": "threshold",
                "uVar8": "finalResult",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "calling": [
                "printFloat",
                "calculate_trapezoid_for_block",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line",
                "gc_execute_line",
                "mc_go_home",
                "intersection_distance",
                "read_float",
                "mc_dwell",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculateFloat_08009054(uint inputA,uint inputB,undefined4 inputC,uint inputD)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  bool isZero;\n  bool isMinus;\n  bool isCarry;\n  \n  tempVar2 = inputA >> 0x17 & 0xff;\n  isZero = tempVar2 == 0;\n  if (!isZero) {\n    inputD = inputB >> 0x17 & 0xff;\n    isZero = inputD == 0;\n  }\n  if (!isZero) {\n    isZero = tempVar2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = inputD == 0xff;\n  }\n  if (isZero) {\n    inputD = inputB >> 0x17 & 0xff;\n    tempVar6 = inputA;\n    if (tempVar2 == 0xff) {\n      if (((inputA & 0x7fffff) != 0) || (tempVar6 = inputB, inputD == 0xff)) {\nLAB_0800904a:\n        return tempVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (inputD == 0xff) {\n        tempVar6 = inputB;\n        if ((inputB & 0x7fffff) == 0) {\nLAB_08009000:\n          return (inputA ^ inputB) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (inputA & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (inputB & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = tempVar2 == 0;\n        tempVar6 = inputA & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            inputA = inputA << 1;\n            isZero = (inputA & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          tempVar2 = tempVar2 - 1;\n        }\n        inputA = inputA | tempVar6;\n        isZero = inputD == 0;\n        tempVar6 = inputB & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            inputB = inputB << 1;\n            isZero = (inputB & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          inputD = inputD - 1;\n        }\n        inputB = inputB | tempVar6;\n        goto LAB_0800906c;\n      }\n      if ((inputA & 0x7fffffff) == 0) {\n        if ((inputB & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    inputA = inputA ^ inputB;\n  }\n  else {\nLAB_0800906c:\n    tempVar3 = tempVar2 - inputD;\n    if (inputB << 9 == 0) {\n      inputA = (inputA ^ inputB) & 0x80000000 | inputA & 0x7fffff;\n      isCarry = SCARRY4(tempVar3,0x7f);\n      tempVar5 = tempVar3 + 0x7f;\n      isZero = tempVar5 < 0;\n      isMinus = tempVar5 == 0;\n      if (!isMinus && isZero == isCarry) {\n        isCarry = SBORROW4(0xff,tempVar5);\n        isZero = 0xff - tempVar5 < 0;\n        isMinus = tempVar5 == 0xff;\n      }\n      if (!isMinus && isZero == isCarry) {\n        inputA = inputA | tempVar5 * 0x800000;\n      }\n      if (!isMinus && isZero == isCarry) {\n        return inputA;\n      }\n      inputA = inputA | 0x800000;\n      tempVar2 = 0;\n      isMinus = SBORROW4(tempVar5,1);\n      tempVar4 = tempVar3 + 0x7e;\n      isZero = tempVar4 == 0;\n      tempVar6 = tempVar4;\n    }\n    else {\n      tempVar1 = (inputB << 9) >> 4 | 0x10000000;\n      tempVar2 = (inputA << 9) >> 4 | 0x10000000;\n      inputA = (inputA ^ inputB) & 0x80000000;\n      isZero = tempVar1 <= tempVar2;\n      if (!isZero) {\n        tempVar2 = tempVar2 << 1;\n      }\n      tempVar4 = tempVar3 + 0x7d + (uint)isZero;\n      tempVar6 = 0x800000;\n      do {\n        if (tempVar1 <= tempVar2) {\n          tempVar2 = tempVar2 - tempVar1;\n          inputA = inputA | tempVar6;\n        }\n        isZero = tempVar1 >> 1 <= tempVar2;\n        if (isZero) {\n          tempVar2 = tempVar2 - (tempVar1 >> 1);\n        }\n        if (isZero) {\n          inputA = inputA | tempVar6 >> 1;\n        }\n        isZero = tempVar1 >> 2 <= tempVar2;\n        if (isZero) {\n          tempVar2 = tempVar2 - (tempVar1 >> 2);\n        }\n        if (isZero) {\n          inputA = inputA | tempVar6 >> 2;\n        }\n        isZero = tempVar1 >> 3 <= tempVar2;\n        if (isZero) {\n          tempVar2 = tempVar2 - (tempVar1 >> 3);\n        }\n        if (isZero) {\n          inputA = inputA | tempVar6 >> 3;\n        }\n        tempVar2 = tempVar2 * 0x10;\n        isZero = tempVar2 == 0;\n        if (!isZero) {\n          tempVar6 = tempVar6 >> 4;\n          isZero = tempVar6 == 0;\n        }\n      } while (!isZero);\n      isMinus = SBORROW4(tempVar4,0xfd);\n      isZero = tempVar4 == 0xfd;\n      tempVar6 = tempVar4 - 0xfd;\n      if (tempVar4 < 0xfe) {\n        inputA = inputA + tempVar4 * 0x800000 + (uint)(tempVar1 <= tempVar2);\n        if (tempVar2 - tempVar1 == 0) {\n          inputA = inputA & 0xfffffffe;\n        }\n        return inputA;\n      }\n    }\n    if (isZero || (int)tempVar6 < 0 != isMinus) {\n      isZero = (int)(tempVar4 + 0x19) < 0;\n      if (tempVar4 == 0xffffffe7 || isZero != SCARRY4(tempVar4,0x19)) {\n        inputA = inputA & 0x80000000;\n      }\n      if (tempVar4 == 0xffffffe7 || isZero != SCARRY4(tempVar4,0x19)) {\n        return inputA;\n      }\n      tempVar6 = (inputA << 1) >> (-tempVar4 & 0xff);\n      tempVar4 = inputA << (tempVar4 + 0x20 & 0xff);\n      tempVar6 = ((uint)((inputA & 0x80000000) != 0) << 0x1f | tempVar6 >> 1) + (uint)((byte)tempVar6 & 1);\n      if ((tempVar2 | tempVar4 << 1) == 0) {\n        tempVar6 = tempVar6 & ~(tempVar4 >> 0x1f);\n      }\n      return tempVar6;\n    }\n  }\n  return inputA & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "bVar7": "isZero",
                "bVar8": "isMinus",
                "bVar9": "isCarry"
            },
            "calling": [
                "gc_set_current_position",
                "intersection_distance",
                "report_grbl_settings",
                "planner_recalculate_trapezoids",
                "mc_arc",
                "report_realtime_status",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800918c": {
            "entrypoint": "0x0800918c",
            "current_name": "calculate_bitwise_result_0800918c",
            "code": "\nuint calculate_bitwise_result_0800918c(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint input_1_shifted;\n  uint input_2_shifted;\n  uint combined_result;\n  bool is_zero_result;\n  \n  input_1_shifted = input_1 * 2;\n  input_2_shifted = input_2 * 2;\n  if (((int)input_1_shifted >> 0x18 == -1 || (int)input_2_shifted >> 0x18 == -1) &&\n     ((((int)input_1_shifted >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_shifted >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combined_result = input_1_shifted | input_2 & 0x7fffffff;\n  is_zero_result = combined_result == 0;\n  if (!is_zero_result) {\n    combined_result = input_1 ^ input_2;\n    is_zero_result = combined_result == 0;\n  }\n  is_negative_result = -1 < (int)combined_result;\n  if (is_negative_result) {\n    input_1 = input_1_shifted + input_2 * -2;\n    is_zero_result = input_1 == 0;\n  }\n  if ((is_negative_result && input_2_shifted <= input_1_shifted) && !is_zero_result) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || input_2_shifted > input_1_shifted) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_result) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800918c": "calculate_bitwise_result_0800918c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_shifted",
                "uVar3": "input_2_shifted",
                "uVar4": "combined_result",
                "bVar1": "is_negative_result",
                "bVar5": "is_zero_result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009194": {
            "entrypoint": "0x08009194",
            "current_name": "check_overflow_08009194",
            "code": "\nuint check_overflow_08009194(uint modified_input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint merged_inputs;\n  bool merged_zero;\n  \n  doubled_input_1 = modified_input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((modified_input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  merged_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  merged_zero = merged_inputs == 0;\n  if (!merged_zero) {\n    merged_inputs = modified_input_1 ^ input_2;\n    merged_zero = merged_inputs == 0;\n  }\n  is_negative = -1 < (int)merged_inputs;\n  if (is_negative) {\n    modified_input_1 = doubled_input_1 + input_2 * -2;\n    merged_zero = modified_input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !merged_zero) {\n    modified_input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    modified_input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!merged_zero) {\n    modified_input_1 = modified_input_1 | 1;\n  }\n  return modified_input_1;\n}\n\n",
            "renaming": {
                "FUN_08009194": "check_overflow_08009194",
                "param_1": "modified_input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "merged_inputs",
                "bVar5": "merged_zero",
                "bVar1": "is_negative"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_bitwise_operations_0800919c",
            "code": "\nuint calculate_bitwise_operations_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint input_1_times_two;\n  uint input_2_times_two;\n  uint combined_operation;\n  bool is_result_zero;\n  \n  input_1_times_two = input_1 * 2;\n  input_2_times_two = input_2 * 2;\n  if (((int)input_1_times_two >> 0x18 == -1 || (int)input_2_times_two >> 0x18 == -1) &&\n     ((((int)input_1_times_two >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_two >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_operation = input_1_times_two | input_2 & 0x7fffffff;\n  is_result_zero = combined_operation == 0;\n  if (!is_result_zero) {\n    combined_operation = input_1 ^ input_2;\n    is_result_zero = combined_operation == 0;\n  }\n  is_negative_result = -1 < (int)combined_operation;\n  if (is_negative_result) {\n    input_1 = input_1_times_two + input_2 * -2;\n    is_result_zero = input_1 == 0;\n  }\n  if ((is_negative_result && input_2_times_two <= input_1_times_two) && !is_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || input_2_times_two > input_1_times_two) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_bitwise_operations_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_result",
                "uVar2": "input_1_times_two",
                "uVar3": "input_2_times_two",
                "uVar4": "combined_operation",
                "bVar5": "is_result_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "combine_floats_with_params_08009204",
            "code": "\nundefined8 combineFloatsWithParams_08009204(undefined4 floatParam1,undefined4 floatParam2)\n\n{\n  __cmpsf2();\n  return CONCAT44(floatParam2,floatParam1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "combine_floats_with_params_08009204",
                "param_1": "floatParam1",
                "param_2": "floatParam2"
            },
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_not_zero_08009214",
            "code": "\nbool check_if_not_zero_08009214(void)\n\n{\n  char is_not_zero;\n  \n  __aeabi_cfcmpeq();\n  return is_not_zero != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_not_zero_08009214",
                "in_ZR": "is_not_zero"
            },
            "calling": [
                "gc_execute_line",
                "read_float",
                "planner_forward_pass_kernel",
                "mc_arc",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_cy_zero_08009228",
            "code": "\nbool is_CY_zero_08009228(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_cy_zero_08009228",
                "in_CY": "input_char"
            },
            "calling": [
                "gc_execute_line",
                "printFloat",
                "planner_forward_pass_kernel",
                "settings_store_global_setting",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_carry_flag_or_zero_flag_0800923c",
            "code": "\nbool check_carry_flag_or_zero_flag_0800923c(void)\n\n{\n  undefined is_zero_flag_set;\n  undefined is_carry_flag_set;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)is_carry_flag_set || (bool)is_zero_flag_set;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_carry_flag_or_zero_flag_0800923c",
                "in_ZR": "is_zero_flag_set",
                "in_CY": "is_carry_flag_set"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "is_less_than_or_equal_to_zero_08009250",
            "code": "\nbool isLessThanOrEqualToZero_08009250(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "is_less_than_or_equal_to_zero_08009250",
                "in_CY": "carryFlag",
                "in_ZR": "zeroFlag"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_char_null_terminated_08009264",
            "code": "\nbool is_char_null_terminated_08009264(void)\n\n{\n  char char_to_check;\n  \n  __aeabi_cfrcmple();\n  return char_to_check == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_char_null_terminated_08009264",
                "in_CY": "char_to_check"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_integer_08009278",
            "code": "\nuint convertToSignedInteger_08009278(uint inputNumber)\n\n{\n  uint shiftAmount;\n  uint difference;\n  \n  if (inputNumber << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftAmount = (inputNumber << 1) >> 0x18;\n  difference = 0x9e - shiftAmount;\n  if (shiftAmount < 0x9f && difference != 0) {\n    shiftAmount = (inputNumber << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputNumber & 0x80000000) != 0) {\n      shiftAmount = -shiftAmount;\n    }\n    return shiftAmount;\n  }\n  if ((difference == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNumber = inputNumber & 0x80000000;\n  if (inputNumber == 0) {\n    inputNumber = 0x7fffffff;\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "inputNumber",
                "uVar1": "shiftAmount",
                "uVar2": "difference"
            },
            "calling": [
                "printFloat",
                "protocol_execute_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_system_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeSystem_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &completed_8911; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(&__fini_array_end + index);\n  }\n  for (ptr = &completed_8911; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009314": {
            "entrypoint": "0x08009314",
            "current_name": "infinite_loop_08009314",
            "code": "\nvoid infiniteLoop_08009314(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009314": "infinite_loop_08009314"
            },
            "calling": [
                "DMA1_Stream3_IRQHandler"
            ],
            "called": [
                "DMA1_Stream3_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_inverse_square_root_08009318",
            "code": "\ndouble calculateInverseSquareRoot_08009318(double input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint exponentDiff;\n  uint shiftedExponent;\n  double output;\n  double output1;\n  double output2;\n  double output3;\n  undefined8 result;\n  \n  shiftedExponent = (temp2 << 1) >> 0x15;\n  exponentDiff = shiftedExponent - 0x3ff;\n  if ((int)exponentDiff < 0x14) {\n    if ((int)exponentDiff < 0) {\n      result = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output2;\n    }\n    else if ((temp2 & 0xfffff >> (exponentDiff & 0xff) | temp1) != 0) {\n      result = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output1;\n    }\n  }\n  else if ((int)exponentDiff < 0x34) {\n    if ((0xffffffffU >> (shiftedExponent - 0x413 & 0xff) & temp1) != 0) {\n      result = __aeabi_dadd(temp1,temp2,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output3;\n    }\n  }\n  else if (exponentDiff == 0x400) {\n    output = (double)__aeabi_dadd();\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_inverse_square_root_08009318",
                "__x": "input",
                "in_r0": "temp1",
                "in_r1": "temp2",
                "uVar1": "exponentDiff",
                "uVar2": "shiftedExponent",
                "uVar3": "result",
                "in_d0": "output",
                "extraout_d0": "output1",
                "extraout_d0_00": "output2",
                "extraout_d0_01": "output3"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\ndouble calculate_trigonometric_value_08009410(double input_angle)\n\n{\n  undefined4 first_argument;\n  uint temp_variable;\n  uint second_argument;\n  double result;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 local_variable_3;\n  undefined4 local_variable_4;\n  \n  if (0x3fe921fb < (second_argument & 0x7fffffff)) {\n    if ((second_argument & 0x7fffffff) < 0x7ff00000) {\n      temp_variable = __ieee754_rem_pio2(first_argument,second_argument,&local_variable_1);\n      temp_variable = temp_variable & 3;\n      if (temp_variable == 1) {\n        result = (double)__kernel_sin(local_variable_1,local_variable_2,local_variable_3,local_variable_4,1);\n      }\n      else if (temp_variable == 2) {\n        result = (double)__kernel_cos(local_variable_1,local_variable_2,local_variable_3,local_variable_4);\n      }\n      else if (temp_variable == 0) {\n        result = (double)__kernel_cos(local_variable_1,local_variable_2,local_variable_3,local_variable_4);\n      }\n      else {\n        result = (double)__kernel_sin(local_variable_1,local_variable_2,local_variable_3,local_variable_4,1);\n      }\n    }\n    else {\n      result = (double)__subdf3();\n    }\n    return result;\n  }\n  result = (double)__kernel_cos(first_argument,second_argument,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "__x": "input_angle",
                "in_r0": "first_argument",
                "in_r1": "second_argument",
                "dVar2": "result",
                "local_28": "local_variable_1",
                "uStack_24": "local_variable_2",
                "local_20": "local_variable_3",
                "uStack_1c": "local_variable_4",
                "uVar1": "temp_variable"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_exponential_080094c0",
            "code": "\ndouble calculateExponential_080094c0(double input)\n\n{\n  uint lowerPart;\n  uint upperPart;\n  uint exponent;\n  uint shiftedExponent;\n  double output;\n  double output_smallerExponent;\n  double output_greaterExponent;\n  double output_negativeExponent;\n  undefined8 result;\n  \n  shiftedExponent = (upperPart << 1) >> 0x15;\n  exponent = shiftedExponent - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      result = __aeabi_dadd(lowerPart,upperPart,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output_negativeExponent;\n    }\n    else if ((upperPart & 0xfffff >> (exponent & 0xff) | lowerPart) != 0) {\n      result = __aeabi_dadd(lowerPart,upperPart,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output_smallerExponent;\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    if ((0xffffffffU >> (shiftedExponent - 0x413 & 0xff) & lowerPart) != 0) {\n      result = __aeabi_dadd(lowerPart,upperPart,0x8800759c,0x7e37e43c);\n      __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = output_greaterExponent;\n    }\n  }\n  else if (exponent == 0x400) {\n    output = (double)__aeabi_dadd();\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_exponential_080094c0",
                "__x": "input",
                "in_r0": "lowerPart",
                "in_r1": "upperPart",
                "uVar1": "exponent",
                "uVar2": "shiftedExponent",
                "uVar3": "result",
                "in_d0": "output",
                "extraout_d0": "output_smallerExponent",
                "extraout_d0_00": "output_greaterExponent",
                "extraout_d0_01": "output_negativeExponent"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "mc_dwell",
                "mc_arc",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nlong calculate_product_080095b8(double input_value)\n\n{\n  uint lower_bits;\n  uint higher_bits;\n  uint shift_value;\n  uint shifted_bits;\n  uint modified_input;\n  long lVar4;\n  uint exponent_difference;\n  \n  shifted_bits = (higher_bits << 1) >> 0x15;\n  exponent_difference = shifted_bits - 0x3ff;\n  if ((int)higher_bits < 0) {\n    lVar4 = -1;\n  }\n  else {\n    lVar4 = 1;\n  }\n  modified_input = higher_bits & 0xfffff | 0x100000;\n  if ((int)exponent_difference < 0x14) {\n    if ((int)exponent_difference < 0) {\n      if (exponent_difference != 0xffffffff) {\n        lVar4 = 0;\n      }\n      return lVar4;\n    }\n    modified_input = modified_input + (0x80000 >> (exponent_difference & 0xff)) >> (0x14 - exponent_difference & 0xff);\n  }\n  else {\n    if (0x1e < exponent_difference) {\n      lVar4 = __aeabi_d2iz();\n      return lVar4;\n    }\n    if ((int)exponent_difference < 0x34) {\n      shift_value = 0x80000000 >> (shifted_bits - 0x413 & 0xff);\n      if (CARRY4(shift_value,lower_bits) != false) {\n        modified_input = modified_input + 1;\n      }\n      modified_input = modified_input << (shifted_bits - 0x413 & 0xff);\n      if (exponent_difference != 0x14) {\n        modified_input = modified_input | shift_value + lower_bits >> (0x34 - exponent_difference & 0xff);\n      }\n    }\n    else {\n      modified_input = modified_input << (shifted_bits - 0x413 & 0xff) | lower_bits << (shifted_bits - 0x433 & 0xff);\n    }\n  }\n  return modified_input * lVar4;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "__x": "input_value",
                "in_r0": "lower_bits",
                "in_r1": "higher_bits",
                "uVar1": "shift_value",
                "uVar2": "shifted_bits",
                "uVar3": "modified_input",
                "uVar5": "exponent_difference"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_exponent_08009654",
            "code": "\ndouble calculateExponent_08009654(double inputValue)\n\n{\n  int shiftedValue;\n  int exponent;\n  double outputValue;\n  \n  exponent = ((uint)(shiftedValue << 1) >> 0x15) - 0x3ff;\n  if (((0x13 < exponent) && (0x33 < exponent)) && (exponent == 0x400)) {\n    outputValue = (double)__aeabi_dadd();\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_exponent_08009654",
                "__x": "inputValue",
                "in_r1": "shiftedValue",
                "in_d0": "outputValue",
                "iVar1": "exponent"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_value_080096e8",
            "code": "\ndouble calculate_trigonometric_value_080096e8(double angle)\n\n{\n  undefined4 rem_quotient;\n  uint remainder_and_quadrant;\n  uint rem_remainder;\n  double result;\n  undefined4 rem_temp1;\n  undefined4 rem_temp2;\n  undefined4 sin_temp1;\n  undefined4 sin_temp2;\n  \n  if (0x3fe921fb < (rem_remainder & 0x7fffffff)) {\n    if ((rem_remainder & 0x7fffffff) < 0x7ff00000) {\n      remainder_and_quadrant = __ieee754_rem_pio2(rem_quotient,rem_remainder,&rem_temp1);\n      remainder_and_quadrant = remainder_and_quadrant & 3;\n      if (remainder_and_quadrant == 1) {\n        result = (double)__kernel_cos(rem_temp1,rem_temp2,sin_temp1,sin_temp2);\n      }\n      else if (remainder_and_quadrant == 2) {\n        result = (double)__kernel_sin(rem_temp1,rem_temp2,sin_temp1,sin_temp2,1);\n      }\n      else if (remainder_and_quadrant == 0) {\n        result = (double)__kernel_sin(rem_temp1,rem_temp2,sin_temp1,sin_temp2,1);\n      }\n      else {\n        result = (double)__kernel_cos(rem_temp1,rem_temp2,sin_temp1,sin_temp2);\n      }\n    }\n    else {\n      result = (double)__subdf3();\n    }\n    return result;\n  }\n  result = (double)__kernel_sin(rem_quotient,rem_remainder,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_value_080096e8",
                "__x": "angle",
                "in_r0": "rem_quotient",
                "in_r1": "rem_remainder",
                "dVar2": "result",
                "local_28": "rem_temp1",
                "uStack_24": "rem_temp2",
                "local_20": "sin_temp1",
                "uStack_1c": "sin_temp2",
                "uVar1": "remainder_and_quadrant"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_sin",
                "__kernel_cos",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_exponent_08009798",
            "code": "\ndouble calculateExponent_08009798(double inputValue)\n\n{\n  int intPart;\n  int exponent;\n  double result;\n  \n  exponent = ((uint)(intPart << 1) >> 0x15) - 0x3ff;\n  if (exponent < 0x14) {\n    if (exponent < 0) {\n      return result;\n    }\n  }\n  else {\n    if (exponent < 0x34) {\n      return result;\n    }\n    if (exponent != 0x400) {\n      return result;\n    }\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_exponent_08009798",
                "__x": "inputValue",
                "in_r1": "intPart",
                "iVar1": "exponent",
                "in_d0": "result"
            },
            "calling": [
                "gc_execute_line",
                "protocol_execute_line",
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nvoid __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4,double param_5)\n\n{\n  int iVar1;\n  undefined4 unaff_r4;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  \n  uVar3 = param_4 & 0x7fffffff;\n  if (((uVar3 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar4 = param_2 & 0x7fffffff, (uVar4 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      atan(param_5);\n      return;\n    }\n    uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if (((((uVar4 | param_1) != 0) && ((uVar3 | param_3) != 0)) && (uVar3 != 0x7ff00000)) &&\n       (uVar4 != 0x7ff00000)) {\n      iVar1 = (int)(uVar4 - uVar3) >> 0x14;\n      if (((int)(uVar4 - uVar3) < 0x3d00000) &&\n         ((-1 < (int)param_4 || (iVar1 + 0x3c < 0 == SCARRY4(iVar1,0x3c))))) {\n        __divdf3(param_1,param_2,param_3,param_4);\n        fabs((double)CONCAT44(unaff_r4,param_4));\n        atan((double)CONCAT44(unaff_r4,param_4));\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          uVar5 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          uVar5 = __subdf3();\n          __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080098b6) */\n\ndouble calculate_hypotenuse_0800981c(double side_length_1,double side_length_2)\n\n{\n  int result;\n  undefined4 *error_ptr;\n  double hypotenuse;\n  double temp_0;\n  double temp_1;\n  double temp_2;\n  double temp_3;\n  double temp_4;\n  int stack_var_1;\n  char *stack_var_2;\n  \n  hypotenuse = (double)__ieee754_hypot();\n  if ((((fdlib_version != -1) &&\n       (result = check_finite((double)concat_values(stack_var_2,stack_var_1)), hypotenuse = temp_0,\n       result == 0)) &&\n      (result = check_finite((double)concat_values(stack_var_2,stack_var_1)), hypotenuse = temp_1\n      , result != 0)) &&\n     ((result = check_finite((double)concat_values(stack_var_2,stack_var_1)), hypotenuse = temp_2\n      , result != 0 &&\n      (((fdlib_version != '\\0' && (fdlib_version == '\\x02')) ||\n       (result = handle_math_error((math_exception *)&exception_ptr), hypotenuse = temp_4, result == 0)))))) {\n    error_ptr = (undefined4 *)get_errno();\n    *error_ptr = 0x22;\n    hypotenuse = temp_3;\n  }\n  return hypotenuse;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "__x": "side_length_1",
                "__y": "side_length_2",
                "iVar1": "result",
                "puVar2": "error_ptr",
                "dVar3": "hypotenuse",
                "extraout_d0": "temp_0",
                "extraout_d0_00": "temp_1",
                "extraout_d0_01": "temp_2",
                "extraout_d0_02": "temp_3",
                "extraout_d0_03": "temp_4",
                "in_stack_ffffffb0": "stack_var_1",
                "in_stack_ffffffb4": "stack_var_2",
                "__fdlib_version": "fdlib_version",
                "CONCAT44": "concat_values",
                "finite": "check_finite",
                "__errno": "get_errno",
                "matherr": "handle_math_error",
                "exception": "math_exception",
                "stack0xffffffb0": "exception_ptr"
            },
            "calling": [
                "gc_execute_line",
                "mc_arc"
            ],
            "called": [
                "__errno",
                "finite",
                "__ieee754_hypot",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\ndouble calculateSquareRoot_080098d0(double input)\n\n{\n  char versionFlag;\n  int comparisonResult;\n  undefined4 *errnoPtr;\n  int *errnoIntPtr;\n  double result;\n  double extraResult1;\n  double extraResult2;\n  double extraResult3;\n  double extraResult4;\n  double extraResult5;\n  undefined exceptionMsg [24];\n  undefined8 exceptionValue;\n  int exceptionCode;\n  \n  result = (double)__ieee754_sqrt();\n  versionFlag = __fdlib_version;\n  if (((__fdlib_version == -1) || (exceptionCode = __unorddf2(), result = extraResult1, exceptionCode != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(), result = extraResult2, comparisonResult == 0)) {\n    return result;\n  }\n  exceptionMsg._0_4_ = 1;\n  exceptionMsg._4_4_ = \"sqrt\";\n  if (versionFlag == '\\0') {\n    exceptionValue = 0.0;\nLAB_0800996c:\n    comparisonResult = matherr((exception *)exceptionMsg);\n    result = extraResult4;\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    exceptionValue = (double)__divdf3(0,0,0,0);\n    if (versionFlag != '\\x02') goto LAB_0800996c;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\n  result = extraResult3;\njoined_r0x0800997a:\n  if (exceptionCode != 0) {\n    errnoIntPtr = (int *)__errno();\n    *errnoIntPtr = exceptionCode;\n    result = extraResult5;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "__x": "input",
                "cVar1": "versionFlag",
                "iVar2": "comparisonResult",
                "puVar3": "errnoPtr",
                "piVar4": "errnoIntPtr",
                "dVar5": "result",
                "extraout_d0": "extraResult1",
                "extraout_d0_00": "extraResult2",
                "extraout_d0_01": "extraResult3",
                "extraout_d0_02": "extraResult4",
                "extraout_d0_03": "extraResult5",
                "local_50": "exceptionMsg",
                "local_38": "exceptionValue",
                "local_30": "exceptionCode"
            },
            "calling": [
                "gc_execute_line",
                "homing_cycle",
                "max_allowable_speed",
                "plan_buffer_line"
            ],
            "called": [
                "__errno",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__divdf3",
                "matherr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_tangent_08009990",
            "code": "\nvoid calculate_tangent_08009990(uint num1,uint num2,uint num3,uint num4,double num5)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = num4 & 0x7fffffff;\n  if (((tempVar4 | (-num3 | num3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = num2 & 0x7fffffff, (tempVar5 | (-num1 | num1) >> 0x1f) < 0x7ff00001)) {\n    if ((num4 + 0xc0100000 | num3) == 0) {\n      atan(num5);\n      return;\n    }\n    tempVar3 = (int)num4 >> 0x1e & 2U | num2 >> 0x1f;\n    if (((((tempVar5 | num1) != 0) && ((tempVar4 | num3) != 0)) && (tempVar4 != 0x7ff00000)) &&\n       (tempVar5 != 0x7ff00000)) {\n      tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n      if (((int)(tempVar5 - tempVar4) < 0x3d00000) &&\n         ((-1 < (int)num4 || (tempVar1 + 0x3c < 0 == SCARRY4(tempVar1,0x3c))))) {\n        __divdf3(num1,num2,num3,num4);\n        fabs((double)CONCAT44(tempVar2,num4));\n        atan((double)CONCAT44(tempVar2,num4));\n      }\n      if (tempVar3 != 1) {\n        if (tempVar3 == 2) {\n          tempVar6 = __subdf3();\n          __subdf3(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n        }\n        else if (tempVar3 != 0) {\n          tempVar6 = __subdf3();\n          __subdf3((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n        }\n      }\n    }\n  }\n  else {\n    __aeabi_dadd(num3,num4,num1,num2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_tangent_08009990",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "param_5": "num5",
                "iVar1": "tempVar1",
                "unaff_r4": "tempVar2",
                "uVar2": "tempVar3",
                "uVar3": "tempVar4",
                "uVar4": "tempVar5",
                "uVar5": "tempVar6"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "atan",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_square_root_08009b24",
            "code": "\nuint calculateSquareRoot_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int comparisonResult1;\n  uint result2;\n  int comparisonResult2;\n  undefined4 result3;\n  int intResult1;\n  uint result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  undefined8 tempResult4;\n  int localVariable;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result2 = input1;\n  result4 = input2;\n  if (input2 < input4) {\n    result2 = input3;\n    input3 = input1;\n    result4 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(result4 - input4)) {\n    result2 = __aeabi_dadd(result2,result4,input3,input4);\n    return result2;\n  }\n  if (result4 < 0x5f300001) {\n    localVariable = 0;\n  }\n  else {\n    if (0x7fefffff < result4) {\n      if ((result4 & 0xfffff | result2) != 0) {\n        result2 = __aeabi_dadd(result2,result4,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result2;\n      }\n      return input3;\n    }\n    result4 = result4 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    localVariable = 600;\n  }\n  tempResult2 = CONCAT44(result4,result2);\n  tempResult1 = CONCAT44(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result2;\n      }\n      tempResult1 = __muldf3(input3,input4,0,0x7fd00000);\n      tempResult2 = __muldf3(result2,result4,0,0x7fd00000);\n      localVariable = localVariable + -0x3fe;\n    }\n    else {\n      result4 = result4 + 0x25800000;\n      tempResult2 = CONCAT44(result4,result2);\n      input4 = input4 + 0x25800000;\n      tempResult1 = CONCAT44(input4,input3);\n      localVariable = localVariable + -600;\n    }\n  }\n  result6 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n  result5 = (undefined4)tempResult2;\n  intResult1 = (int)((ulonglong)tempResult1 >> 0x20);\n  result3 = (undefined4)tempResult1;\n  tempResult1 = __subdf3(result5,result6,result3,intResult1);\n  comparisonResult2 = (int)((ulonglong)tempResult1 >> 0x20);\n  result1 = (undefined4)tempResult1;\n  comparisonResult1 = __aeabi_dcmplt(result3,intResult1,result1,comparisonResult2);\n  if (comparisonResult1 == 0) {\n    tempResult1 = __muldf3(0,input4,0);\n    tempResult2 = __muldf3(result1,comparisonResult2 + -0x80000000,result1,comparisonResult2);\n    tempResult3 = __aeabi_dadd(result5,result6,result5,result6);\n    tempResult3 = __subdf3((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),0,result4 + 0x100000);\n    tempResult3 = __muldf3((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),result3,intResult1);\n    tempResult4 = __subdf3(result3,intResult1,0,input4);\n    tempResult4 = __muldf3((int)tempResult4,(int)((ulonglong)tempResult4 >> 0x20),0,result4 + 0x100000);\n    tempResult3 = __aeabi_dadd((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult4,\n                          (int)((ulonglong)tempResult4 >> 0x20));\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                      (int)((ulonglong)tempResult3 >> 0x20));\n    __subdf3((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n             (int)((ulonglong)tempResult2 >> 0x20));\n    tempResult1 = __ieee754_sqrt();\n  }\n  else {\n    tempResult1 = __muldf3(0,result4,0,result4);\n    tempResult2 = __muldf3(result3,intResult1 + -0x80000000,result3,intResult1);\n    tempResult3 = __aeabi_dadd(result5,result6,0,result4);\n    tempResult4 = __subdf3(result5,result6,0,result4);\n    tempResult3 = __muldf3((int)tempResult3,(int)((ulonglong)tempResult3 >> 0x20),(int)tempResult4,\n                      (int)((ulonglong)tempResult4 >> 0x20));\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                      (int)((ulonglong)tempResult3 >> 0x20));\n    __subdf3((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n             (int)((ulonglong)tempResult2 >> 0x20));\n    tempResult1 = __ieee754_sqrt();\n  }\n  result2 = (uint)tempResult1;\n  if (localVariable != 0) {\n    result2 = __muldf3(result2,(int)((ulonglong)tempResult1 >> 0x20),0,localVariable * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_square_root_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "comparisonResult1",
                "uVar3": "result2",
                "iVar4": "comparisonResult2",
                "uVar5": "result3",
                "iVar6": "intResult1",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "result6",
                "uVar10": "tempResult1",
                "uVar11": "tempResult2",
                "uVar12": "tempResult3",
                "uVar13": "tempResult4",
                "local_3c": "localVariable"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_exponential_08009d78",
            "code": "\nint calculateExponential_08009d78(undefined4 base,uint exponent,undefined8 *result)\n\n{\n  undefined4 part1_32;\n  undefined4 part1_0;\n  undefined4 part2_32;\n  undefined4 part2_0;\n  undefined4 tmp1_32;\n  undefined4 tmp1_0;\n  undefined4 tmp2_32;\n  undefined4 tmp2_0;\n  uint absExponent;\n  int returnValue;\n  undefined8 temp1_64;\n  undefined8 temp2_64;\n  undefined8 temp3_64;\n  undefined4 tmp3_32;\n  undefined4 tmp3_0;\n  undefined4 part1Result_32;\n  undefined4 part1Result_0;\n  undefined8 temp4_64;\n  undefined8 temp5_64;\n  undefined8 temp6_64;\n  \n  absExponent = exponent & 0x7fffffff;\n  if (absExponent < 0x3fe921fc) {\n    *(undefined4 *)result = base;\n    *(uint *)((int)result + 4) = exponent;\n    *(undefined4 *)(result + 1) = 0;\n    *(undefined4 *)((int)result + 0xc) = 0;\n    return 0;\n  }\n  if (absExponent < 0x4002d97c) {\n    if ((int)exponent < 1) {\n      temp1_64 = __aeabi_dadd(base,exponent,0x54400000,0x3ff921fb);\n      part1_0 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n      part1_32 = (undefined4)temp1_64;\n      if (absExponent != 0x3ff921fb) {\n        temp1_64 = __aeabi_dadd(part1_32,part1_0,0x1a626331,0x3dd0b461);\n        *result = temp1_64;\n        temp1_64 = __subdf3(part1_32,part1_0);\n        temp1_64 = __aeabi_dadd((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0x1a626331,0x3dd0b461);\n        result[1] = temp1_64;\n        return -1;\n      }\n      temp1_64 = __aeabi_dadd(part1_32,part1_0,0x1a600000,0x3dd0b461);\n      part1_32 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n      temp2_64 = __aeabi_dadd((int)temp1_64,part1_32,0x2e037073,0x3ba3198a);\n      *result = temp2_64;\n      temp1_64 = __subdf3((int)temp1_64,part1_32);\n      temp1_64 = __aeabi_dadd((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0x2e037073,0x3ba3198a);\n      result[1] = temp1_64;\n      return -1;\n    }\n    temp1_64 = __subdf3();\n    part1_0 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n    part1_32 = (undefined4)temp1_64;\n    if (absExponent != 0x3ff921fb) {\n      temp1_64 = __subdf3(part1_32,part1_0,0x1a626331,0x3dd0b461);\n      *result = temp1_64;\n      temp1_64 = __subdf3(part1_32,part1_0);\n      temp1_64 = __subdf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0x1a626331,0x3dd0b461);\n      result[1] = temp1_64;\n      return 1;\n    }\n    temp1_64 = __subdf3(part1_32,part1_0,0x1a600000,0x3dd0b461);\n    part1_32 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n    temp2_64 = __subdf3((int)temp1_64,part1_32,0x2e037073,0x3ba3198a);\n    *result = temp2_64;\n    temp1_64 = __subdf3((int)temp1_64,part1_32);\n    temp1_64 = __subdf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0x2e037073,0x3ba3198a);\n    result[1] = temp1_64;\n    return 1;\n  }\n  if (0x413921fb < absExponent) {\n    if (0x7fefffff < absExponent) {\n      temp1_64 = __subdf3(base,exponent,base,exponent);\n      result[1] = temp1_64;\n      *result = temp1_64;\n      return 0;\n    }\n    returnValue = ((int)absExponent >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    temp4_64 = __aeabi_i2d();\n    temp1_64 = __subdf3(base,absExponent + returnValue * -0x100000,(int)temp4_64,\n                      (int)((ulonglong)temp4_64 >> 0x20));\n    temp1_64 = __muldf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    temp5_64 = __aeabi_i2d();\n    temp1_64 = __subdf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20));\n    temp6_64 = __muldf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)temp6_64,(int)((ulonglong)temp6_64 >> 0x20),0,0);\n    returnValue = __kernel_rem_pio2(&temp4_64,result,returnValue);\n    if (-1 < (int)exponent) {\n      return returnValue;\n    }\n    *(int *)((int)result + 4) = *(int *)((int)result + 4) + -0x80000000;\n    *(int *)((int)result + 0xc) = *(int *)((int)result + 0xc) + -0x80000000;\n    return -returnValue;\n  }\n  fabs((double)CONCAT44(tmp3_0,tmp3_32));\n  temp1_64 = __muldf3();\n  __aeabi_dadd((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),0,0x3fe00000);\n  returnValue = __aeabi_d2iz();\n  temp1_64 = __aeabi_i2d();\n  tmp1_32 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n  part1_32 = (undefined4)temp1_64;\n  temp1_64 = __muldf3(part1_32,tmp1_32,0x54400000,0x3ff921fb);\n  temp1_64 = __subdf3(base,part2_0,(int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20));\n  tmp1_0 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n  part1_0 = (undefined4)temp1_64;\n  temp2_64 = __muldf3(part1_32,tmp1_32,0x1a626331,0x3dd0b461);\n  if ((0x1f < returnValue) || (*(uint *)(&npio2_hw + (returnValue + -1) * 4) == absExponent)) {\n    temp3_64 = __subdf3(part1_0,tmp1_0,(int)temp2_64,(int)((ulonglong)temp2_64 >> 0x20));\n    if ((int)((absExponent >> 0x14) - ((uint)((int)((ulonglong)temp3_64 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp2_64 = __muldf3(part1_32,tmp1_32,0x1a600000,0x3dd0b461);\n    tmp2_32 = (undefined4)((ulonglong)temp2_64 >> 0x20);\n    temp1_64 = __subdf3(part1_0,tmp1_0,(int)temp2_64,tmp2_32);\n    tmp2_0 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n    part2_32 = (undefined4)temp1_64;\n    temp3_64 = __subdf3(part1_0,tmp1_0,part2_32,tmp2_0);\n    temp2_64 = __subdf3((int)temp3_64,(int)((ulonglong)temp3_64 >> 0x20),(int)temp2_64,tmp2_32);\n    temp3_64 = __muldf3(part1_32,tmp1_32,0x2e037073,0x3ba3198a);\n    temp2_64 = __subdf3((int)temp3_64,(int)((ulonglong)temp3_64 >> 0x20),(int)temp2_64,\n                      (int)((ulonglong)temp2_64 >> 0x20));\n    temp3_64 = __subdf3(part2_32,tmp2_0,(int)temp2_64,(int)((ulonglong)temp2_64 >> 0x20));\n    if ((int)(((int)absExponent >> 0x14) - ((uint)((int)((ulonglong)temp3_64 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp2_64 = __muldf3(part1_32,tmp1_32,0x2e000000,0x3ba3198a);\n    part1_0 = (undefined4)((ulonglong)temp2_64 >> 0x20);\n    temp1_64 = __subdf3(part2_32,tmp2_0,(int)temp2_64,part1_0);\n    temp3_64 = __subdf3(part2_32,tmp2_0);\n    temp2_64 = __subdf3((int)temp3_64,(int)((ulonglong)temp3_64 >> 0x20),(int)temp2_64,part1_0);\n    temp3_64 = __muldf3(part1_32,tmp1_32,0x252049c1,0x397b839a);\n    temp2_64 = __subdf3((int)temp3_64,(int)((ulonglong)temp3_64 >> 0x20),(int)temp2_64,\n                      (int)((ulonglong)temp2_64 >> 0x20));\n  }\n  temp3_64 = __subdf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),(int)temp2_64,\n                    (int)((ulonglong)temp2_64 >> 0x20));\nLAB_0800a0ce:\n  part1Result_0 = (undefined4)((ulonglong)temp1_64 >> 0x20);\n  part1Result_32 = (undefined4)temp1_64;\n  *result = temp3_64;\n  temp1_64 = __subdf3(part1Result_32,part1Result_0);\n  temp1_64 = __subdf3((int)temp1_64,(int)((ulonglong)temp1_64 >> 0x20),(int)temp2_64,\n                    (int)((ulonglong)temp2_64 >> 0x20));\n  result[1] = temp1_64;\n  if ((int)exponent < 0) {\n    *(int *)result = (int)temp3_64;\n    *(int *)((int)result + 4) = (int)((ulonglong)temp3_64 >> 0x20) + -0x80000000;\n    *(int *)(result + 1) = (int)temp1_64;\n    *(int *)((int)result + 0xc) = (int)((ulonglong)temp1_64 >> 0x20) + -0x80000000;\n    returnValue = -returnValue;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_exponential_08009d78",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "result",
                "uVar1": "part1_32",
                "uVar2": "part1_0",
                "uVar3": "part2_32",
                "extraout_r1": "part2_0",
                "uVar4": "tmp1_32",
                "uVar5": "tmp1_0",
                "uVar6": "tmp2_32",
                "uVar7": "tmp2_0",
                "uVar8": "absExponent",
                "iVar9": "returnValue",
                "uVar10": "temp1_64",
                "uVar11": "temp2_64",
                "uVar12": "temp3_64",
                "in_stack_ffffffa8": "tmp3_32",
                "in_stack_ffffffac": "tmp3_0",
                "local_50": "part1Result_32",
                "uStack_4c": "part1Result_0",
                "local_40": "temp4_64",
                "local_38": "temp5_64",
                "local_30": "temp6_64"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_floating_point_sum_0800a1bc",
            "code": "\nuint calculateFloatingPointSum_0800a1bc(uint value1,uint value2)\n\n{\n  uint temp1;\n  int temp2;\n  uint temp3;\n  undefined4 temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  int temp10;\n  uint temp11;\n  uint temp12;\n  undefined8 temp13;\n  \n  if ((~value2 & 0x7ff00000) == 0) {\n    temp13 = __muldf3(value1,value2,value1,value2);\n    temp7 = __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),value1,value2);\n    return temp7;\n  }\n  if ((int)value2 < 1) {\n    if ((value2 & 0x7fffffff | value1) == 0) {\n      return value1;\n    }\n    if (value2 != 0) {\n      temp13 = __subdf3(value1,value2,value1);\n      temp4 = (undefined4)((ulonglong)temp13 >> 0x20);\n      temp7 = __divdf3((int)temp13,temp4,(int)temp13,temp4);\n      return temp7;\n    }\n    do {\n      temp9 = value1;\n      temp7 = temp9 >> 0xb;\n      value2 = value2 - 0x15;\n      value1 = temp9 << 0x15;\n    } while (temp7 == 0);\n    temp1 = value2;\n    if (-1 < (int)temp9) goto LAB_0800a290;\n    temp12 = 0x20;\n    temp5 = 0xffffffff;\n    temp9 = value1;\n  }\n  else {\n    temp1 = (int)value2 >> 0x14;\n    temp7 = value2;\n    temp9 = value1;\n    if (temp1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp9 = 0;\n    temp12 = temp7;\n    do {\n      temp5 = temp9;\n      temp7 = temp12 << 1;\n      temp10 = temp12 << 0xc;\n      temp9 = temp5 + 1;\n      temp12 = temp7;\n    } while (-1 < temp10);\n    temp12 = 0x20 - temp9;\n    value2 = temp1;\n    temp9 = value1 << (temp9 & 0xff);\n  }\n  temp7 = value1 >> (temp12 & 0xff) | temp7;\n  temp1 = value2 - temp5;\nLAB_0800a1da:\n  temp7 = temp7 & 0xfffff | 0x100000;\n  if (-1 < (int)(temp1 << 0x1f)) {\n    temp7 = temp7 * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n  }\n  temp12 = 0;\n  temp7 = temp7 * 2 - ((int)temp9 >> 0x1f);\n  temp9 = temp9 << 1;\n  temp1 = 0;\n  temp10 = 0x16;\n  temp5 = 0x200000;\n  do {\n    temp2 = temp1 + temp5;\n    if (temp2 <= (int)temp7) {\n      temp7 = temp7 - temp2;\n      temp1 = temp2 + temp5;\n      temp12 = temp12 + temp5;\n    }\n    temp10 = temp10 + -1;\n    temp7 = temp7 * 2 - ((int)temp9 >> 0x1f);\n    temp5 = temp5 >> 1;\n    temp9 = temp9 << 1;\n  } while (temp10 != 0);\n  temp2 = 0x20;\n  temp6 = 0x80000000;\n  temp10 = 0;\n  temp5 = 0;\n  do {\n    temp3 = temp6 + temp10;\n    temp11 = temp1;\n    if ((int)temp1 < (int)temp7) {\n      if ((int)temp3 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp3 + temp6)) {\n          temp11 = temp1 + 1;\n        }\n      }\n      temp8 = temp7 - temp1;\n      temp1 = temp11;\n      if (temp9 < temp3) {\n        temp8 = temp8 - 1;\n      }\nLAB_0800a262:\n      temp10 = temp3 + temp6;\n      temp9 = temp9 - temp3;\n      temp5 = temp5 + temp6;\n      temp7 = temp8;\n    }\n    else if ((temp7 == temp1) && (temp3 <= temp9)) {\n      if ((int)temp3 < 0) goto LAB_0800a26a;\n      temp8 = 0;\n      temp1 = temp7;\n      goto LAB_0800a262;\n    }\n    temp2 = temp2 + -1;\n    temp6 = temp6 >> 1;\n    temp7 = temp7 * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n    if (temp2 == 0) {\n      if ((temp7 | temp9) == 0) {\n        temp5 = temp5 >> 1;\n      }\n      else if (temp5 == 0xffffffff) {\n        temp12 = temp12 + 1;\n        temp5 = 0;\n      }\n      else {\n        temp5 = temp5 + 1 >> 1;\n      }\n      if ((temp12 & 1) != 0) {\n        temp5 = temp5 | 0x80000000;\n      }\n      return temp5;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_floating_point_sum_0800a1bc",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "uVar9": "temp9",
                "iVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "temp13"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_value,uint input_modifier,undefined4 extra_param_1,undefined4 extra_param_2)\n\n{\n  int result_check;\n  undefined4 lower_uVar;\n  undefined4 upper_uVar;\n  uint modified_input;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  undefined8 temp_result_3;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  \n  modified_input = input_modifier & 0x7fffffff;\n  if (modified_input < 0x3e400000) {\n    result_check = __aeabi_d2iz();\n    if (result_check == 0) {\n      return 0;\n    }\n    temp_result_1 = __muldf3(input_value,input_modifier,input_value,input_modifier);\n    upper_uVar = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    lower_uVar = (undefined4)temp_result_1;\n    temp_result_2 = __muldf3(lower_uVar,upper_uVar,0xbe8838d4,0xbda8fae9);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n  }\n  else {\n    temp_result_1 = __muldf3(input_value,input_modifier,input_value,input_modifier);\n    upper_uVar = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    lower_uVar = (undefined4)temp_result_1;\n    temp_result_2 = __muldf3(lower_uVar,upper_uVar,0xbe8838d4,0xbda8fae9);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),lower_uVar,upper_uVar);\n    if (0x3fd33332 < modified_input) {\n      if (modified_input < 0x3fe90001) {\n        result_check = modified_input - 0x200000;\n        temp_result_1 = __subdf3(0,0x3ff00000,0,result_check);\n      }\n      else {\n        result_check = 0x3fd20000;\n        temp_result_1 = 0x3fe7000000000000;\n      }\n      temp_var_4 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_var_3 = (undefined4)temp_result_1;\n      temp_result_1 = __muldf3(lower_uVar,upper_uVar,0,0x3fe00000);\n      temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,result_check);\n      temp_result_2 = __muldf3(lower_uVar,upper_uVar,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_3 = __muldf3(input_value,input_modifier,extra_param_1,extra_param_2);\n      temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_3,\n                       (int)((ulonglong)temp_result_3 >> 0x20));\n      temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                       (int)((ulonglong)temp_result_2 >> 0x20));\n      lower_uVar = __subdf3(temp_var_3,temp_var_4,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      return lower_uVar;\n    }\n  }\n  temp_var_2 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n  temp_var_1 = (undefined4)temp_result_2;\n  lower_uVar = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n  temp_result_2 = __muldf3((int)temp_result_1,lower_uVar,0,0x3fe00000);\n  temp_result_1 = __muldf3((int)temp_result_1,lower_uVar,temp_var_1,temp_var_2);\n  temp_result_3 = __muldf3(input_value,input_modifier,extra_param_1,extra_param_2);\n  temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_3,\n                   (int)((ulonglong)temp_result_3 >> 0x20));\n  temp_result_1 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_1,\n                   (int)((ulonglong)temp_result_1 >> 0x20));\n  lower_uVar = __subdf3(0,0x3ff00000,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n  return lower_uVar;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input_value",
                "param_2": "input_modifier",
                "param_3": "extra_param_1",
                "param_4": "extra_param_2",
                "iVar1": "result_check",
                "uVar2": "lower_uVar",
                "uVar3": "upper_uVar",
                "uVar4": "modified_input",
                "uVar5": "temp_result_1",
                "uVar6": "temp_result_2",
                "uVar7": "temp_result_3",
                "local_30": "temp_var_1",
                "uStack_2c": "temp_var_2",
                "local_28": "temp_var_3",
                "uStack_24": "temp_var_4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "process_data_0800a5a0",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nuint processData_0800a5a0(int input_ptr,undefined8 *output_ptr,int data_length,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *ptr_1;\n  uint result;\n  undefined4 temp1;\n  uint temp2;\n  undefined4 temp3;\n  int index;\n  uint *ptr_2;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint **ptr_3;\n  int var1;\n  int var2;\n  undefined4 *ptr_4;\n  undefined4 temp8;\n  uint temp9;\n  uint *ptr_5;\n  int var3;\n  int var4;\n  undefined8 *ptr_6;\n  undefined8 *ptr_7;\n  undefined8 *ptr_8;\n  undefined4 *ptr_9;\n  undefined8 *ptemp10;\n  undefined4 result2;\n  int var5;\n  undefined4 *ptr_10;\n  bool bVar25;\n  undefined8 result6;\n  undefined8 result7;\n  undefined8 result8;\n  undefined4 local_var7;\n  int local_index;\n  int local_var1;\n  uint *local_array1 [2];\n  uint local_array2 [20];\n  undefined8 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined8 local_var5;\n  undefined8 local_var6;\n  \n  var4 = *(int *)(&init_jk + param_5 * 4);\n  var1 = param_4 + -1;\n  local_array1[1] = (uint *)output_ptr;\n  if (data_length + 0x14 < 0 == SCARRY4(data_length,0x14)) {\n    local_var1 = (data_length + -3) / 0x18;\n    var2 = (local_var1 + 1) * -0x18;\n  }\n  else {\n    var2 = -0x18;\n    local_var1 = 0;\n  }\n  data_length = data_length + var2;\n  var2 = local_var1 - var1;\n  if (-1 < var4 + var1) {\n    var5 = var4 + var1 + 1 + var2;\n    ptr_8 = &local_var2;\n    do {\n      while (var2 < 0) {\n        var2 = var2 + 1;\n        *(undefined4 *)ptr_8 = 0;\n        *(undefined4 *)((int)ptr_8 + 4) = 0;\n        ptr_8 = ptr_8 + 1;\n        if (var2 == var5) goto LAB_0800a626;\n      }\n      result7 = __aeabi_i2d(*(undefined4 *)(param_6 + var2 * 4));\n      var2 = var2 + 1;\n      *ptr_8 = result7;\n      ptr_8 = ptr_8 + 1;\n    } while (var2 != var5);\n  }\nLAB_0800a626:\n  ptr_4 = (undefined4 *)(input_ptr + -8);\n  if (-1 < var4) {\n    ptr_6 = &local_var2 + param_4;\n    var5 = var4 + param_4;\n    var2 = var1;\n    ptr_8 = &local_var6;\n    do {\n      if (var1 < 0) {\n        result7 = 0;\n      }\n      else {\n        result7 = 0;\n        ptr_10 = ptr_4;\n        ptemp10 = ptr_6;\n        do {\n          ptr_9 = ptr_10 + 2;\n          result6 = __muldf3(*ptr_9,ptr_10[3],*(undefined4 *)(ptemp10 + -1),\n                            *(undefined4 *)((int)ptemp10 + -4));\n          result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                                (int)((ulonglong)result6 >> 0x20));\n          ptr_10 = ptr_9;\n          ptemp10 = ptemp10 + -1;\n        } while (ptr_9 != ptr_4 + param_4 * 2);\n      }\n      var2 = var2 + 1;\n      *ptr_8 = result7;\n      ptr_6 = ptr_6 + 1;\n      ptr_8 = ptr_8 + 1;\n    } while (var2 != var5);\n  }\n  local_array1[0] = local_array2 + var4 + -1;\n  local_index = var4;\n  do {\n    var5 = *(int *)(&local_var6 + local_index);\n    result7 = CONCAT44(*(undefined4 *)((int)&local_var6 + local_index * 8 + 4),var5);\n    var2 = local_index;\n    if (0 < local_index) {\n      ptr_8 = &local_var6 + local_index;\n      ptr_2 = local_array2;\n      do {\n        temp7 = (undefined4)((ulonglong)result7 >> 0x20);\n        __muldf3((int)result7,temp7,0,0x3e700000);\n        __aeabi_d2iz();\n        result6 = __aeabi_i2d();\n        temp1 = (undefined4)((ulonglong)result6 >> 0x20);\n        result8 = __muldf3((int)result6,temp1,0,0x41700000);\n        __subdf3((int)result7,temp7,(int)result8,(int)((ulonglong)result8 >> 0x20));\n        result = __aeabi_d2iz();\n        ptr_6 = ptr_8 + -1;\n        temp7 = *(undefined4 *)ptr_6;\n        temp8 = *(undefined4 *)((int)ptr_8 + -4);\n        *ptr_2 = result;\n        result7 = __aeabi_dadd((int)result6,temp1,temp7,temp8);\n        var5 = (int)result7;\n        ptr_8 = ptr_6;\n        ptr_2 = ptr_2 + 1;\n      } while (ptr_6 != &local_var6);\n    }\n    scalbn((double)CONCAT44(var2,local_var7),var5);\n    __muldf3();\n    floor((double)CONCAT44(var2,local_var7));\n    result7 = __muldf3();\n    result7 = __subdf3(var5,temp3,(int)result7,(int)((ulonglong)result7 >> 0x20));\n    result = __aeabi_d2iz();\n    result6 = __aeabi_i2d();\n    result7 = __subdf3((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                      (int)((ulonglong)result6 >> 0x20));\n    temp7 = (undefined4)((ulonglong)result7 >> 0x20);\n    temp1 = (undefined4)result7;\n    if (data_length < 1) {\n      if (data_length == 0) {\n        var5 = (int)local_array2[var2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      var5 = __aeabi_dcmpge(temp1,temp7,0,0x3fe00000);\n      if (var5 != 0) {\n        result = result + 1;\n        if (var2 < 1) {\n          result7 = __subdf3(0,0x3ff00000,temp1,temp7);\n          var5 = 2;\n          goto LAB_0800a7a4;\n        }\n        var5 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)local_array2[var2 + -1] >> (0x18U - data_length & 0xff);\n      temp9 = local_array2[var2 + -1] - (index << (0x18U - data_length & 0xff));\n      var5 = (int)temp9 >> (0x17U - data_length & 0xff);\n      local_array2[var2 + -1] = temp9;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < var5) {\n        result = result + 1;\n        if (var2 < 1) {\n          bVar25 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_array2[0] == 0) {\n            bVar25 = false;\n            if (var2 != 1) {\n              ptr_2 = local_array2;\n              index = 1;\n              do {\n                ptr_2 = ptr_2 + 1;\n                if (*ptr_2 != 0) {\n                  var3 = index + 1;\n                  temp9 = *ptr_2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != var2);\n              bVar25 = false;\n            }\n          }\n          else {\n            var3 = 1;\n            index = 0;\n            temp9 = local_array2[0];\nLAB_0800a8e2:\n            local_array2[index] = 0x1000000 - temp9;\n            if (var3 < var2) {\n              temp9 = local_array2[var3];\n              ptr_2 = local_array2 + var3;\n              while( true ) {\n                ptr_5 = ptr_2 + 1;\n                *ptr_2 = 0xffffff - temp9;\n                if (ptr_5 == local_array2 + var2) break;\n                temp9 = *ptr_5;\n                ptr_2 = ptr_5;\n              }\n            }\n            bVar25 = true;\n          }\n        }\n        if (0 < data_length) {\n          if (data_length == 1) {\n            local_array2[var2 + -1] = local_array2[var2 + -1] & 0x7fffff;\n          }\n          else if (data_length == 2) {\n            local_array2[var2 + -1] = local_array2[var2 + -1] & 0x3fffff;\n          }\n        }\n        if (var5 == 2) {\n          result7 = __subdf3(0,0x3ff00000,temp1,temp7);\n          if (bVar25) {\n            temp1 = 0;\n            scalbn((double)CONCAT44(var2,local_var7),0);\n            result7 = __subdf3((int)result7,(int)((ulonglong)result7 >> 0x20),temp1,temp4);\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    var3 = (int)result7;\n    index = __aeabi_dcmpeq(var3,(int)((ulonglong)result7 >> 0x20),0,0);\n    if (index == 0) {\n      scalbn((double)CONCAT44(var2,local_var7),var3);\n      var1 = __aeabi_dcmpge();\n      if (var1 == 0) {\n        index = var2;\n        temp9 = __aeabi_d2iz(var3,temp6);\n        local_array2[index] = temp9;\n        var2 = index;\n      }\n      else {\n        __muldf3(var3,temp6,0,0x3e700000);\n        temp9 = __aeabi_d2iz();\n        result7 = __aeabi_i2d();\n        result7 = __muldf3((int)result7,(int)((ulonglong)result7 >> 0x20),0,0x41700000);\n        __subdf3(var3,temp6,(int)result7,(int)((ulonglong)result7 >> 0x20));\n        var1 = var2;\n        temp2 = __aeabi_d2iz();\n        index = var2 + 1;\n        local_array2[var2] = temp2;\n        local_array2[index] = temp9;\n        var2 = var1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = var2 + -1;\n    if (var4 <= index) {\n      temp9 = 0;\n      ptr_2 = local_array2 + var2 + 0x3fffffff;\n      do {\n        ptr_5 = ptr_2 + -1;\n        temp9 = temp9 | *ptr_2;\n        ptr_2 = ptr_5;\n      } while (ptr_5 != local_array1[0]);\n      if (temp9 != 0) break;\n    }\n    if (local_array2[var4 + -1] == 0) {\n      local_index = 1;\n      ptr_3 = local_array1 + var4;\n      do {\n        ptr_2 = *ptr_3;\n        local_index = local_index + 1;\n        ptr_3 = ptr_3 + -1;\n      } while (ptr_2 == (uint *)0x0);\n      local_index = var2 + local_index;\n    }\n    else {\n      local_index = var2 + 1;\n    }\n    var5 = var2 + 1;\n    ptr_10 = (undefined4 *)(param_6 + (var5 + local_var1 + 0x3fffffff) * 4);\n    ptr_8 = &local_var2 + var2 + param_4;\n    ptr_6 = &local_var6 + var5;\n    do {\n      ptr_10 = ptr_10 + 1;\n      result7 = __aeabi_i2d(*ptr_10);\n      *ptr_8 = result7;\n      ptemp10 = ptr_8 + 1;\n      if (var1 < 0) {\n        result6 = 0;\n      }\n      else {\n        result6 = 0;\n        ptr_9 = ptr_4;\n        while( true ) {\n          ptr_8 = ptr_8 + -1;\n          ptr_1 = ptr_9 + 2;\n          result7 = __muldf3((int)result7,(int)((ulonglong)result7 >> 0x20),*ptr_1,ptr_9[3]);\n          result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,\n                                (int)((ulonglong)result7 >> 0x20));\n          if (ptr_1 == ptr_4 + param_4 * 2) break;\n          result7 = *ptr_8;\n          ptr_9 = ptr_1;\n        }\n      }\n      *ptr_6 = result6;\n      var5 = var5 + 1;\n      ptr_8 = ptemp10;\n      ptr_6 = ptr_6 + 1;\n    } while (var5 <= local_index);\n  } while( true );\n  if (local_array2[index] == 0) {\n    ptr_2 = local_array2 + var2 + 0x3ffffffe;\n    do {\n      temp9 = *ptr_2;\n      index = index + -1;\n      ptr_2 = ptr_2 + -1;\n    } while (temp9 == 0);\n  }\nLAB_0800a9f6:\n  temp1 = 0;\n  scalbn((double)CONCAT44(var2,local_var7),0);\n  result7 = CONCAT44(temp5,temp1);\n  if (index < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        ptr_8 = (undefined8 *)&local_var3;\n        result7 = 0;\nLAB_0800abe4:\n        if (var5 == 0) {\n          temp1 = *(undefined4 *)(ptr_8 + 1);\n          temp7 = *(undefined4 *)((int)ptr_8 + 0xc);\n          *local_array1[1] = local_var3;\n          *(undefined4 *)((int)local_array1[1] + 4) = local_var4;\n          *(undefined8 *)((int)local_array1[1] + 0x10) = result7;\n          *(undefined4 *)((int)local_array1[1] + 8) = temp1;\n          *(undefined4 *)((int)local_array1[1] + 0xc) = temp7;\n          return result & 7;\n        }\n        var1 = *(int *)((int)ptr_8 + 4);\n        *(int *)((int)local_array1[1] + 0x10) = (int)result7;\n        var4 = *(int *)((int)ptr_8 + 0xc);\n        *(undefined4 *)((int)local_array1[1] + 8) = *(undefined4 *)(ptr_8 + 1);\n        *(int *)((int)local_array1[1] + 0x14) = (int)((ulonglong)result7 >> 0x20) + -0x80000000;\n        temp1 = *(undefined4 *)ptr_8;\n        *(int *)((int)local_array1[1] + 4) = var1 + -0x80000000;\n        *(int *)((int)local_array1[1] + 0xc) = var4 + -0x80000000;\n        *local_array1[1] = temp1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      result7 = 0;\nLAB_0800aafc:\n      var1 = (int)((ulonglong)result7 >> 0x20);\n      if (var5 != 0) {\n        var1 = var1 + -0x80000000;\n      }\n      *local_array1[1] = (int)result7;\n      *(int *)((int)local_array1[1] + 4) = var1;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result7 = 0;\n  }\n  else {\n    ptr_6 = &local_var6 + index;\n    ptr_2 = local_array2 + index + 1;\n    ptr_8 = &local_var6 + index + 1;\n    do {\n      temp1 = (undefined4)((ulonglong)result7 >> 0x20);\n      ptr_2 = ptr_2 + -1;\n      result6 = __aeabi_i2d(*ptr_2);\n      result6 = __muldf3((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,temp1);\n      ptr_8 = ptr_8 + -1;\n      *ptr_8 = result6;\n      result7 = __muldf3((int)result7,temp1,0,0x3e700000);\n    } while (ptr_2 != local_array2);\n    ptr_8 = (undefined8 *)&local_var3;\n    var1 = 0;\n    do {\n      if (var4 < 0) {\n        result7 = 0;\n      }\n      else {\n        temp1 = 0x40000000;\n        temp7 = 0x3ff921fb;\n        result7 = 0;\n        var2 = 0;\n        ptemp10 = ptr_6;\n        ptr_4 = &DAT_0800c028;\n        while( true ) {\n          result6 = __muldf3(*(undefined4 *)ptemp10,*(undefined4 *)((int)ptemp10 + 4),temp1,temp7);\n          result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result6,\n                                (int)((ulonglong)result6 >> 0x20));\n          var2 = var2 + 1;\n          if ((var4 < var2) || (var1 < var2)) break;\n          temp1 = *ptr_4;\n          temp7 = ptr_4[1];\n          ptemp10 = ptemp10 + 1;\n          ptr_4 = ptr_4 + 2;\n        }\n      }\n      bVar25 = var1 != index;\n      ptr_8[var1] = result7;\n      ptr_6 = ptr_6 + -1;\n      var1 = var1 + 1;\n    } while (bVar25);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (index != 0) {\n          ptr_6 = ptr_8 + index;\n          result7 = *ptr_6;\n          do {\n            temp7 = (undefined4)((ulonglong)result7 >> 0x20);\n            temp1 = (undefined4)result7;\n            temp8 = *(undefined4 *)(ptr_6 + -1);\n            result2 = *(undefined4 *)((int)ptr_6 + -4);\n            result7 = __aeabi_dadd(temp1,temp7,temp8,result2);\n            result6 = __subdf3(temp8,result2,(int)result7,(int)((ulonglong)result7 >> 0x20));\n            result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),temp1,temp7);\n            *ptr_6 = result6;\n            ptr_6 = ptr_6 + -1;\n            *ptr_6 = result7;\n          } while (ptr_8 != ptr_6);\n          if (1 < index) {\n            ptemp10 = ptr_8 + index;\n            result7 = *ptemp10;\n            ptr_6 = ptemp10;\n            do {\n              temp7 = (undefined4)((ulonglong)result7 >> 0x20);\n              temp1 = (undefined4)result7;\n              temp8 = *(undefined4 *)(ptr_6 + -1);\n              result2 = *(undefined4 *)((int)ptr_6 + -4);\n              result7 = __aeabi_dadd(temp1,temp7,temp8,result2);\n              result6 = __subdf3(temp8,result2,(int)result7,(int)((ulonglong)result7 >> 0x20));\n              result6 = __aeabi_dadd((int)result6,(int)((ulonglong)result6 >> 0x20),temp1,temp7);\n              *ptr_6 = result6;\n              ptr_6 = ptr_6 + -1;\n              *ptr_6 = result7;\n            } while (&local_var5 != ptr_6);\n            result7 = 0;\n            ptr_7 = ptr_8 + 2;\n            ptr_6 = ptemp10 + 1;\n            do {\n              ptemp10 = ptr_6 + -1;\n              result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),\n                                    *(undefined4 *)ptemp10,*(undefined4 *)((int)ptr_6 + -4));\n              ptr_6 = ptemp10;\n            } while (ptr_7 != ptemp10);\n            goto LAB_0800abe4;\n          }\n        }\n        result7 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      result7 = 0;\n      ptr_6 = ptr_8 + index + 1;\n      do {\n        ptemp10 = ptr_6 + -1;\n        result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),*(undefined4 *)ptemp10,\n                              *(undefined4 *)((int)ptr_6 + -4));\n        ptr_6 = ptemp10;\n      } while (ptr_8 != ptemp10);\n      goto LAB_0800aafc;\n    }\n    result7 = 0;\n    ptr_6 = ptr_8 + index + 1;\n    do {\n      ptemp10 = ptr_6 + -1;\n      result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),*(undefined4 *)ptemp10,\n                            *(undefined4 *)((int)ptr_6 + -4));\n      ptr_6 = ptemp10;\n    } while (ptr_8 != ptemp10);\n  }\n  var1 = (int)((ulonglong)result7 >> 0x20);\n  temp1 = (undefined4)result7;\n  if (var5 == 0) {\n    *(undefined8 *)local_array1[1] = result7;\n    result7 = __subdf3(local_var3,local_var4,temp1,var1);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    var1 = 1;\n    ptr_8 = (undefined8 *)&local_var3;\n    do {\n      result7 = __aeabi_dadd((int)result7,(int)((ulonglong)result7 >> 0x20),\n                            *(undefined4 *)(ptr_8 + 1),*(undefined4 *)((int)ptr_8 + 0xc));\n      var1 = var1 + 1;\n      ptr_8 = ptr_8 + 1;\n    } while (var1 <= index);\n    if (var5 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array1[1] = temp1;\n    *(int *)((int)local_array1[1] + 4) = var1 + -0x80000000;\n    result7 = __subdf3(local_var3,local_var4,temp1,var1);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  result7 = CONCAT44((int)((ulonglong)result7 >> 0x20) + -0x80000000,(int)result7);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_array1[1] + 8) = result7;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "process_data_0800a5a0",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "data_length",
                "puVar1": "ptr_1",
                "uVar2": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "extraout_r1": "temp3",
                "iVar5": "index",
                "puVar6": "ptr_2",
                "extraout_r1_00": "temp4",
                "extraout_r1_01": "temp5",
                "extraout_r1_02": "temp6",
                "uVar7": "temp7",
                "ppuVar8": "ptr_3",
                "iVar9": "var1",
                "iVar10": "var2",
                "puVar11": "ptr_4",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "puVar14": "ptr_5",
                "iVar15": "var3",
                "iVar16": "var4",
                "puVar17": "ptr_6",
                "puVar18": "ptr_7",
                "puVar19": "ptr_8",
                "puVar20": "ptr_9",
                "uVar21": "temp10",
                "iVar23": "var5",
                "puVar24": "ptr_10",
                "local_280": "local_index",
                "local_26c": "local_var1",
                "local_260": "local_array1",
                "local_258": "local_array2",
                "uStack_208": "local_var2",
                "local_168": "local_var3",
                "local_164": "local_var4",
                "local_160": "local_var5",
                "uStack_c8": "local_var6",
                "in_stack_fffffd78": "local_var7"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "scalbn",
                "__aeabi_dcmpge",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__aeabi_i2d",
                "__aeabi_d2iz",
                "__subdf3",
                "floor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_0800adf0",
            "code": "\nundefined4\ncalculate_0800adf0(undefined4 input,uint value,undefined4 mul_param_1,undefined4 mul_param_2,int flag)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 mul_result_low;\n  undefined4 mul_result_high;\n  undefined4 final_result_low;\n  undefined8 final_result_high;\n  undefined8 temporary_result;\n  \n  if (((value & 0x7fffffff) < 0x3e400000) && (result = __aeabi_d2iz(), result == 0)) {\n    return input;\n  }\n  final_result_high = __muldf3(input,value,input);\n  mul_result_low = (undefined4)((ulonglong)final_result_high >> 0x20);\n  result_high = (undefined4)final_result_high;\n  final_result_high = __muldf3(input,value,result_high,mul_result_low);\n  mul_result_high = (undefined4)((ulonglong)final_result_high >> 0x20);\n  result_low = (undefined4)final_result_high;\n  final_result_high = __muldf3(result_high,mul_result_low,0x5acfd57c,0x3de5d93a);\n  final_result_high = __subdf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  final_result_high = __muldf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_high,mul_result_low);\n  final_result_high = __aeabi_dadd((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x57b1fe7d,0x3ec71de3);\n  final_result_high = __muldf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_high,mul_result_low);\n  final_result_high = __subdf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x19c161d5,0x3f2a01a0);\n  final_result_high = __muldf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_high,mul_result_low);\n  final_result_high = __aeabi_dadd((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x1110f8a6,0x3f811111);\n  final_result_low = (undefined4)((ulonglong)final_result_high >> 0x20);\n  if (flag != 0) {\n    temporary_result = __muldf3(mul_param_1,mul_param_2,0,0x3fe00000);\n    final_result_high = __muldf3(result_low,mul_result_high,(int)final_result_high,final_result_low);\n    final_result_high = __subdf3((int)temporary_result,(int)((ulonglong)temporary_result >> 0x20),(int)final_result_high,\n                     (int)((ulonglong)final_result_high >> 0x20));\n    final_result_high = __muldf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_high,mul_result_low);\n    final_result_high = __subdf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),mul_param_1,mul_param_2);\n    temporary_result = __muldf3(result_low,mul_result_high,0x55555549,0x3fc55555);\n    final_result_high = __aeabi_dadd((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),(int)temporary_result,\n                         (int)((ulonglong)temporary_result >> 0x20));\n    result_high = __subdf3(input,value,(int)final_result_high,(int)((ulonglong)final_result_high >> 0x20));\n    return result_high;\n  }\n  final_result_high = __muldf3(result_high,mul_result_low,(int)final_result_high,final_result_low);\n  final_result_high = __subdf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x55555549,0x3fc55555);\n  final_result_high = __muldf3((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_low,mul_result_high);\n  result_high = __aeabi_dadd((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),input,value);\n  return result_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_0800adf0",
                "param_1": "input",
                "param_2": "value",
                "param_3": "mul_param_1",
                "param_4": "mul_param_2",
                "param_5": "flag",
                "iVar1": "result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "mul_result_low",
                "uVar5": "mul_result_high",
                "uVar6": "final_result_low",
                "uVar7": "final_result_high",
                "uVar8": "temporary_result"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_sine_0800af78",
            "code": "\ndouble calculateSine_0800af78(double angle)\n\n{\n  int integer_part;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint floating_part;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 extra_result_low;\n  uint temp_unsigned;\n  int operation;\n  double result;\n  double dVar7;\n  double extraout_d0;\n  undefined8 uVar8;\n  undefined8 uVar9;\n  undefined4 in_stack_ffffffd0;\n  uint result_low0;\n  \n  temp_unsigned = floating_part & 0x7fffffff;\n  if (temp_unsigned < 0x44100000) {\n    if (temp_unsigned < 0x3fdc0000) {\n      result_low0 = floating_part;\n      if (temp_unsigned < 0x3e200000) {\n        uVar8 = __aeabi_dadd(integer_part,floating_part,0x8800759c,0x7e37e43c);\n        operation = __aeabi_dcmpgt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0,0x3ff00000);\n        if (operation != 0) {\n          return extraout_d0;\n        }\n      }\n      operation = -1;\n    }\n    else {\n      fabs((double)CONCAT44(floating_part,in_stack_ffffffd0));\n      if (temp_unsigned < 0x3ff30000) {\n        if (temp_unsigned < 0x3fe60000) {\n          uVar8 = __aeabi_dadd();\n          uVar8 = __subdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0,0x3ff00000);\n          uVar9 = __aeabi_dadd(integer_part,extra_result_low,0,0x40000000);\n          uVar8 = __divdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)uVar9,\n                           (int)((ulonglong)uVar9 >> 0x20));\n          result_low0 = (uint)((ulonglong)uVar8 >> 0x20);\n          integer_part = (int)uVar8;\n          operation = 0;\n        }\n        else {\n          uVar8 = __subdf3();\n          uVar9 = __aeabi_dadd(integer_part,extra_result_low,0,0x3ff00000);\n          uVar8 = __divdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)uVar9,\n                           (int)((ulonglong)uVar9 >> 0x20));\n          result_low0 = (uint)((ulonglong)uVar8 >> 0x20);\n          integer_part = (int)uVar8;\n          operation = 1;\n        }\n      }\n      else if (temp_unsigned < 0x40038000) {\n        uVar8 = __subdf3();\n        uVar9 = __muldf3(integer_part,extra_result_low,0,0x3ff80000);\n        uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,0x3ff00000);\n        uVar8 = __divdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n        result_low0 = (uint)((ulonglong)uVar8 >> 0x20);\n        integer_part = (int)uVar8;\n        operation = 2;\n      }\n      else {\n        uVar8 = __divdf3(0,0xbff00000,integer_part,extra_result_low);\n        result_low0 = (uint)((ulonglong)uVar8 >> 0x20);\n        integer_part = (int)uVar8;\n        operation = 3;\n      }\n    }\n    uVar8 = __muldf3(integer_part,result_low0,integer_part);\n    temp_low = (undefined4)((ulonglong)uVar8 >> 0x20);\n    result_low = (undefined4)uVar8;\n    uVar8 = __muldf3(result_low,temp_low,result_low,temp_low);\n    temp_high = (undefined4)((ulonglong)uVar8 >> 0x20);\n    result_high = (undefined4)uVar8;\n    uVar8 = __muldf3(result_high,temp_high,0xe322da11,0x3f90ad3a);\n    uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0x24760deb,0x3fa97b4b);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),result_high,temp_high);\n    uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0xa0d03d51,0x3fb10d66);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),result_high,temp_high);\n    uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0xc54c206e,0x3fb745cd);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),result_high,temp_high);\n    uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0x920083ff,0x3fc24924);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),result_high,temp_high);\n    uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0x5555550d,0x3fd55555);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),result_low,temp_low);\n    result_low = (undefined4)((ulonglong)uVar8 >> 0x20);\n    uVar9 = __muldf3(result_high,temp_high,0x2c6a6c2f,0xbfa2b444);\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0x52defd9a,0x3fadde2d);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),result_high,temp_high);\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),result_high,temp_high);\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0xfe231671,0x3fbc71c6);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),result_high,temp_high);\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0x9998ebc4,0x3fc99999);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),result_high,temp_high);\n    result_high = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (operation == -1) {\n      uVar8 = __aeabi_dadd((int)uVar8,result_low,(int)uVar9,result_high);\n      uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),integer_part,result_low0);\n      dVar7 = (double)__subdf3(integer_part,result_low0,(int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n      return dVar7;\n    }\n    uVar8 = __aeabi_dadd((int)uVar8,result_low,(int)uVar9,result_high);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),integer_part,result_low0);\n    uVar8 = __subdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),*(undefined4 *)(&atanlo + operation * 8)\n                     ,*(undefined4 *)(&UNK_0800c094 + operation * 8));\n    uVar8 = __subdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),integer_part,result_low0);\n    result = (double)__subdf3(*(undefined4 *)(&atanhi + operation * 8),\n                             *(undefined4 *)(&UNK_0800c074 + operation * 8),(int)uVar8,\n                             (int)((ulonglong)uVar8 >> 0x20));\n    if ((int)floating_part < 0) {\n      return result;\n    }\n  }\n  else if ((0x7ff00000 < temp_unsigned) || ((temp_unsigned == 0x7ff00000 && (integer_part != 0)))) {\n    dVar7 = (double)__aeabi_dadd();\n    return dVar7;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_sine_0800af78",
                "__x": "angle",
                "in_r0": "integer_part",
                "uVar1": "result_low",
                "uVar2": "result_high",
                "in_r1": "floating_part",
                "uVar3": "temp_low",
                "uVar4": "temp_high",
                "extraout_r1": "extra_result_low",
                "uVar5": "temp_unsigned",
                "iVar6": "operation",
                "in_d0": "result"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__muldf3",
                "fabs",
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "calculate_x_0800b2cc",
            "code": "\ndouble calculate_x_0800b2cc(double input_x)\n\n{\n  double output_x;\n  \n  return output_x;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "calculate_x_0800b2cc",
                "__x": "input_x",
                "in_d0": "output_x"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__ieee754_atan2",
                "atan"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "calculate_bitwise_result_0800b2d4",
            "code": "\nint calculateBitwiseResult_0800b2d4(double inputValue)\n\n{\n  uint result;\n  \n  return (result | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "calculate_bitwise_result_0800b2d4",
                "__value": "inputValue",
                "in_r1": "result"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "terminate_exception_0800b2e0",
            "code": "\nint terminateException_0800b2e0(exception *exceptionObject)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "terminate_exception_0800b2e0",
                "__exc": "exceptionObject"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_exponent_0800b2e8",
            "code": "\ndouble calculateExponent_0800b2e8(double input,int exponent)\n\n{\n  uint temp1;\n  int temp2;\n  uint shiftedTemp1;\n  int sum;\n  uint temp3;\n  double result;\n  double extraResult;\n  double finalResult;\n  undefined8 combinedTemp;\n  \n  combinedTemp = CONCAT44(temp1,exponent);\n  shiftedTemp1 = (temp1 << 1) >> 0x15;\n  if (shiftedTemp1 == 0) {\n    if ((exponent | temp1 & 0x7fffffff) == 0) {\n      return result;\n    }\n    combinedTemp = __muldf3(exponent,temp1,0,0x43500000);\n    if (temp2 < -50000) goto LAB_0800b34a;\n    shiftedTemp1 = ((uint)((int)((ulonglong)combinedTemp >> 0x20) << 1) >> 0x15) - 0x36;\n    result = extraResult;\n  }\n  else if (shiftedTemp1 == 0x7ff) {\n    finalResult = (double)__aeabi_dadd(exponent,temp1,exponent);\n    return finalResult;\n  }\n  temp3 = (uint)((ulonglong)combinedTemp >> 0x20);\n  sum = shiftedTemp1 + temp2;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return result;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      finalResult = (double)__muldf3((int)combinedTemp,temp3 & 0x800fffff | (sum + 0x36) * 0x100000,0,\n                               0x3c900000);\n      return finalResult;\n    }\n    if (temp2 < 0xc351) {\n      combinedTemp = CONCAT44(temp3 & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      finalResult = (double)__muldf3((int)combinedTemp,(int)((ulonglong)combinedTemp >> 0x20),0xc2f8f359,0x1a56e1f);\n      return finalResult;\n    }\n  }\n  finalResult = (double)__muldf3(0x8800759c,temp3 & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_exponent_0800b2e8",
                "__x": "input",
                "__n": "exponent",
                "in_r1": "temp1",
                "in_r2": "temp2",
                "uVar1": "shiftedTemp1",
                "iVar2": "sum",
                "uVar3": "temp3",
                "in_d0": "result",
                "extraout_d0": "extraResult",
                "dVar4": "finalResult",
                "uVar5": "combinedTemp"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_impure_pointer_0800b3dc",
            "code": "\nundefined4 get_impure_pointer_0800b3dc(void)\n\n{\n  return impure_pointer;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_impure_pointer_0800b3dc",
                "_impure_ptr": "impure_pointer"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_preinit_array_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializePreinitArray_0800b3e8(EVP_PKEY_CTX *ctx)\n\n{\n  int iteration;\n  code **arrayPointer;\n  \n  _init(ctx);\n  iteration = 0;\n  arrayPointer = (code **)&__preinit_array_end;\n  do {\n    iteration = iteration + 1;\n    (**arrayPointer)();\n    arrayPointer = arrayPointer + 1;\n  } while (iteration != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_preinit_array_0800b3e8",
                "param_1": "ctx",
                "iVar1": "iteration",
                "ppcVar2": "arrayPointer"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy",
                "register_fini"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_0800b430",
            "code": "\nvoid * memset_0800b430(void *ptr,int __c,size_t size)\n\n{\n  uint uTemp1;\n  uint *ptrAsUint;\n  uint *ptrAsUint1;\n  uint *ptrAsUint2;\n  uint uTemp2;\n  bool isSizeZero;\n  \n  ptrAsUint = (uint *)ptr;\n  if (((uint)ptr & 3) != 0) {\n    uTemp2 = size - 1;\n    ptrAsUint1 = (uint *)ptr;\n    if (size == 0) {\n      return ptr;\n    }\n    while( true ) {\n      ptrAsUint = (uint *)((int)ptrAsUint1 + 1);\n      *(char *)ptrAsUint1 = (char)__c;\n      size = uTemp2;\n      if (((uint)ptrAsUint & 3) == 0) break;\n      isSizeZero = uTemp2 == 0;\n      uTemp2 = uTemp2 - 1;\n      ptrAsUint1 = ptrAsUint;\n      if (isSizeZero) {\n        return ptr;\n      }\n    }\n  }\n  if (3 < size) {\n    uTemp2 = __c & 0xffU | (__c & 0xffU) << 8;\n    uTemp2 = uTemp2 | uTemp2 << 0x10;\n    if (0xf < size) {\n      ptrAsUint1 = ptrAsUint + 4;\n      do {\n        ptrAsUint1[-4] = uTemp2;\n        ptrAsUint1[-3] = uTemp2;\n        ptrAsUint1[-2] = uTemp2;\n        ptrAsUint1[-1] = uTemp2;\n        ptrAsUint1 = ptrAsUint1 + 4;\n      } while (ptrAsUint1 != (uint *)((int)ptrAsUint + (size - 0x10 & 0xfffffff0) + 0x20));\n      uTemp1 = size & 0xc;\n      ptrAsUint = ptrAsUint + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (uTemp1 == 0) goto joined_r0x0800b4a8;\n    }\n    ptrAsUint1 = (uint *)((size - 4 & 0xfffffffc) + 4 + (int)ptrAsUint);\n    do {\n      ptrAsUint2 = ptrAsUint + 1;\n      *ptrAsUint = uTemp2;\n      ptrAsUint = ptrAsUint2;\n    } while (ptrAsUint1 != ptrAsUint2);\n    size = size & 3;\n    ptrAsUint = ptrAsUint1;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    ptrAsUint1 = ptrAsUint;\n    do {\n      ptrAsUint2 = (uint *)((int)ptrAsUint1 + 1);\n      *(char *)ptrAsUint1 = (char)__c;\n      ptrAsUint1 = ptrAsUint2;\n    } while ((uint *)(size + (int)ptrAsUint) != ptrAsUint2);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_0800b430",
                "__s": "ptr",
                "__n": "size",
                "uVar1": "uTemp1",
                "puVar2": "ptrAsUint",
                "puVar3": "ptrAsUint1",
                "puVar4": "ptrAsUint2",
                "uVar5": "uTemp2",
                "bVar6": "isSizeZero"
            },
            "calling": [
                "gc_execute_line",
                "mc_go_home",
                "eeprom_init",
                "grbl_main",
                "plan_init",
                "debounce_init",
                "gc_init",
                "settings_read_coord_data",
                "homing_cycle",
                "st_reset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4e4": {
            "entrypoint": "0x0800b4e4",
            "current_name": "register_exit_proc_0800b4e4",
            "code": "\nint registerExitProc_0800b4e4(functionPointer *functionPointer)\n\n{\n  int result;\n  \n  result = __register_exitproc(0,functionPointer,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b4e4": "register_exit_proc_0800b4e4",
                "__func": "functionPointer",
                "iVar1": "result"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4f0": {
            "entrypoint": "0x0800b4f0",
            "current_name": "execute_global_dtors_0800b4f0",
            "code": "\nvoid execute_global_dtors_0800b4f0(void)\n\n{\n  int count;\n  code **dtor_function_ptr;\n  \n  count = 1;\n  dtor_function_ptr = (code **)&__do_global_dtors_aux_fini_array_entry;\n  do {\n    count = count + -1;\n    (**dtor_function_ptr)();\n    dtor_function_ptr = dtor_function_ptr + -1;\n  } while (count != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4f0": "execute_global_dtors_0800b4f0",
                "iVar1": "count",
                "ppcVar2": "dtor_function_ptr"
            },
            "calling": [],
            "called": [
                "_fini",
                "frame_dummy",
                "__do_global_dtors_aux"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_resource_0800b524",
            "code": "\nundefined4 updateResource_0800b524(int resourceType,undefined4 newData,undefined4 resourceAddress,undefined4 additionalData)\n\n{\n  undefined *resourceTable;\n  undefined4 returnCode;\n  uint bitMask;\n  uint resourceCount;\n  \n  __retarget_lock_acquire_recursive(__atexit_recursive_mutex);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  resourceTable = DAT_20000168;\n  resourceCount = *(uint *)(DAT_20000168 + 4);\n  if ((int)resourceCount < 0x20) {\n    if (resourceType != 0) {\n      *(undefined4 *)(DAT_20000168 + resourceCount * 4 + 0x88) = resourceAddress;\n      bitMask = 1 << (resourceCount & 0xff);\n      *(uint *)(resourceTable + 0x188) = *(uint *)(resourceTable + 0x188) | bitMask;\n      *(undefined4 *)(resourceTable + resourceCount * 4 + 0x108) = additionalData;\n      if (resourceType == 2) {\n        *(uint *)(resourceTable + 0x18c) = bitMask | *(uint *)(resourceTable + 0x18c);\n      }\n    }\n    returnCode = __atexit_recursive_mutex;\n    *(uint *)(resourceTable + 4) = resourceCount + 1;\n    *(undefined4 *)(resourceTable + (resourceCount + 2) * 4) = newData;\n    __retarget_lock_release_recursive(returnCode);\n    returnCode = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(__atexit_recursive_mutex);\n    returnCode = 0xffffffff;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_resource_0800b524",
                "param_1": "resourceType",
                "param_2": "newData",
                "param_3": "resourceAddress",
                "param_4": "additionalData",
                "puVar1": "resourceTable",
                "uVar2": "returnCode",
                "uVar3": "bitMask",
                "uVar4": "resourceCount"
            },
            "calling": [
                "atexit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "get_evp_key_context_0800b5b0",
            "code": "\nint getEVPKeyContext_0800b5b0(EVP_PKEY_CTX *keyContext)\n\n{\n  return (int)keyContext;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "get_evp_key_context_0800b5b0",
                "ctx": "keyContext"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 221758,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001994",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_08002814",
            "FUN_08002828",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005ac4",
            "FUN_08005ad4",
            "FUN_08005aec",
            "FUN_08005b04",
            "FUN_08005b20",
            "FUN_08005b3c",
            "FUN_08005b58",
            "FUN_08005b74",
            "FUN_08005b90",
            "FUN_08005bac",
            "FUN_08005bc4",
            "FUN_08005bdc",
            "FUN_08005c30",
            "FUN_08005c74",
            "FUN_08005cec",
            "FUN_0800618c",
            "FUN_0800640c",
            "FUN_080064bc",
            "FUN_080064d4",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006718",
            "FUN_080068bc",
            "FUN_0800691c",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e38",
            "FUN_08006e70",
            "FUN_08006e88",
            "FUN_080071d0",
            "FUN_08007310",
            "FUN_0800733e",
            "FUN_0800736c",
            "FUN_0800738e",
            "FUN_080073c0",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080075c8",
            "FUN_080076c8",
            "FUN_0800771a",
            "FUN_08007720",
            "FUN_08007726",
            "FUN_0800772c",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078d0",
            "FUN_080078e2",
            "FUN_080078f4",
            "FUN_08007930",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007dd8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082c8",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_080085d4",
            "FUN_080085e4",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a64",
            "FUN_08008a6c",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b38",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd0",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008e60",
            "FUN_08008e70",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800918c",
            "FUN_08009194",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009314",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2cc",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b4e4",
            "FUN_0800b4f0",
            "FUN_0800b524",
            "FUN_0800b5b0"
        ],
        [
            "FUN_08008640",
            "FUN_08008894"
        ]
    ],
    "locked_functions": []
}