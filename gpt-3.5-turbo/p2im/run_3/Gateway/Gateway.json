{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "set_flag_if_not_set_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 setFlagIfNotSet_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "set_flag_if_not_set_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_string_length_08000178",
            "code": "\nchar * getStringLength_08000178(char *inputString)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *currentChar;\n  \n  currentChar = inputString;\n  do {\n    nextChar = currentChar + 1;\n    currentChar = *currentChar;\n    currentChar = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)inputString);\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "param_1": "inputString",
                "pcVar3": "currentChar",
                "pcVar2": "nextChar",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_software_interrupt_08000188",
            "code": "\nvoid executeSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_interrupt_handler_0800018c",
            "code": "\nundefined4 execute_interrupt_handler_0800018c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000188(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_interrupt_handler_0800018c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_and_store_08000214",
            "code": "\nvoid process_and_store_08000214(uint input_index,undefined4 data_value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool condition;\n  int result;\n  \n  if (0x3b < (int)input_index) {\n    return;\n  }\n  result = extract_memory_value_08002fa0(&DAT_200003d4,input_index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_parameter_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_parameter_080036ac((int)(char)(&DAT_0800a908)[input_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = compare_params_0800738a((int)(char)(&DAT_0800a908)[input_index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data(input_index,data_value);\n    }\n    store_value_in_array_08002fc2(&DAT_200003d4,input_index,data_value);\n  }\n  else if (result == 4) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        condition = false;\n      }\n      else {\n        result = check_parameter_080036ac();\n        if (result == 0) {\n          condition = false;\n        }\n        else {\n          result = check_parameter_080036ac((int)(char)(&DAT_0800a908)[input_index]);\n          if (result == 1) {\n            condition = false;\n          }\n          else {\n            condition = true;\n          }\n        }\n      }\n    }\n    else {\n      condition = false;\n    }\n    if (condition) {\n      update_array_index_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[input_index] * 3,data_value);\n    }\n    store_value_in_array_08002fc2(&DAT_200003d4,input_index,data_value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_and_store_08000214",
                "param_1": "input_index",
                "param_2": "data_value",
                "bVar1": "condition",
                "iVar2": "result",
                "process_data_080088e0(param_1,param_2)": "process_data(input_index,data_value)"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_and_store_data_0800021a",
            "code": "\nvoid processAndStoreData_0800021a(uint dataIndex,undefined4 dataValue,undefined4 param3,undefined4 param4)\n\n{\n  bool isValid;\n  int result;\n  \n  result = extract_memory_value_08002fa0(&DAT_200003d4,dataIndex,param3,param4,param4);\n  if (result == 3) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        result = 0;\n      }\n      else {\n        result = checkParameter();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = checkParameter((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = compareParams((int)(char)(&DAT_0800a908)[dataIndex],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      processData(dataIndex,dataValue);\n    }\n    storeValueInArray(&DAT_200003d4,dataIndex,dataValue);\n  }\n  else if (result == 4) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        isValid = false;\n      }\n      else {\n        result = checkParameter();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = checkParameter((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      updateArrayIndex(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[dataIndex] * 3,dataValue);\n    }\n    storeValueInArray(&DAT_200003d4,dataIndex,dataValue);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_and_store_data_0800021a",
                "param_1": "dataIndex",
                "param_2": "dataValue",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isValid",
                "iVar2": "result",
                "check_parameter_080036ac": "checkParameter",
                "compare_params_0800738a": "compareParams",
                "process_data_080088e0": "processData",
                "store_value_in_array_08002fc2": "storeValueInArray",
                "update_array_index_080026b0": "updateArrayIndex"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_bit_08000488",
            "code": "\nvoid updateBit_08000488(uint bitPosition,int value)\n\n{\n  undefined4 decodedValue;\n  \n  if ((int)bitPosition < 0xe) {\n    if (value == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (bitPosition & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (bitPosition & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      decodedValue = decode_value_08008880();\n      process_and_return_08002ef2(&DAT_200003d4,bitPosition,decodedValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_bit_08000488",
                "param_1": "bitPosition",
                "param_2": "value",
                "uVar1": "decodedValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_blocks_080004d4",
            "code": "\nvoid initialize_data_blocks_080004d4(int condition,int value)\n\n{\n  int loop_counter;\n  undefined *data_ptr;\n  \n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    data_ptr = &DAT_2000022c;\n    for (loop_counter = 0xb; -1 < loop_counter; loop_counter = loop_counter + -1) {\n      initialize_data_08002580(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_blocks_080004d4",
                "param_1": "condition",
                "param_2": "value",
                "puVar2": "data_ptr",
                "iVar1": "loop_counter"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "update_servo_data_08000500",
            "code": "\nvoid updateServoData_08000500(int servoIndex,int paramA,int paramB,undefined4 paramC)\n\n{\n  if (0xb < DAT_200001ed) {\n    process_data_and_shift_08002f14(&DAT_200003d4,\"Max servos attached\",paramB,paramC,paramC);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < paramA) && (0 < paramB)) {\n    process_and_update_data_080025ac(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,paramA,paramB);\n    return;\n  }\n  update_data_08002634(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "update_servo_data_08000500",
                "param_1": "servoIndex",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "update_and_count_08000588",
            "code": "\nvoid updateAndCount_08000588(int index)\n\n{\n  update_flag_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "update_and_count_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_pin_operation_080005f8",
            "code": "\nvoid process_pin_operation_080005f8(uint pin_number,int pin_mode)\n\n{\n  int mem_value;\n  char mode_condition;\n  bool allow_operation;\n  uint modified_pin_number;\n  \n  mem_value = extract_memory_value_08002fa0(&DAT_200003d4,pin_number);\n  if (mem_value != 0x7f) {\n    mem_value = extract_memory_value_08002fa0(&DAT_200003d4,pin_number);\n    if (mem_value == 6) {\n      if (DAT_20000170 == '\\0') {\n        mode_condition = '\\0';\n      }\n      else {\n        mode_condition = DAT_20000170;\n        if (pin_mode == 6) {\n          mode_condition = '\\0';\n        }\n      }\n    }\n    else {\n      mode_condition = '\\0';\n    }\n    if (mode_condition != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        allow_operation = false;\n      }\n      else {\n        mem_value = check_parameter_080036ac();\n        if (mem_value == 0) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (mem_value == 1) {\n            allow_operation = false;\n          }\n          else if (pin_mode == 4) {\n            allow_operation = false;\n          }\n          else {\n            allow_operation = true;\n          }\n        }\n      }\n    }\n    else {\n      allow_operation = false;\n    }\n    if (allow_operation) {\n      if ((byte)(&DAT_200001f0)[pin_number] < 0xc) {\n        mem_value = extract_most_significant_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3);\n      }\n      else {\n        mem_value = 0;\n      }\n      if (mem_value != 0) {\n        update_and_count_08000588(pin_number);\n      }\n    }\n    modified_pin_number = pin_number - 0x2e & 0xff;\n    if (modified_pin_number < 0xe) {\n      if (pin_number < 0x3c) {\n        mem_value = (int)(char)(&DAT_0800a908)[pin_number];\n      }\n      else {\n        mem_value = -1;\n      }\n      mem_value = check_parameter_080036ac(mem_value);\n      if (mem_value == 0) {\n        allow_operation = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          mem_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          mem_value = -1;\n        }\n        mem_value = check_parameter_080036ac(mem_value);\n        if (mem_value == 1) {\n          allow_operation = false;\n        }\n        else {\n          allow_operation = true;\n        }\n      }\n    }\n    else {\n      allow_operation = false;\n    }\n    if (allow_operation) {\n      update_bit_08000488(modified_pin_number,pin_mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        allow_operation = false;\n      }\n      else {\n        mem_value = check_parameter_080036ac();\n        if (mem_value == 0) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (mem_value == 1) {\n            allow_operation = false;\n          }\n          else {\n            allow_operation = true;\n          }\n        }\n      }\n    }\n    else {\n      allow_operation = false;\n    }\n    if (allow_operation) {\n      if ((pin_mode == 0) || (pin_mode == 0xb)) {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] | (byte)(1 << (pin_number & 7));\n      }\n      else {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    store_value_in_array_08002fc2(&DAT_200003d4,pin_number,0);\n    switch(pin_mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            allow_operation = false;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              allow_operation = false;\n            }\n            else {\n              allow_operation = true;\n            }\n          }\n        }\n      }\n      else {\n        allow_operation = false;\n      }\n      if (allow_operation) {\n        process_data_08008990(pin_number,0);\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            allow_operation = false;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              allow_operation = false;\n            }\n            else {\n              allow_operation = true;\n            }\n          }\n        }\n      }\n      else {\n        allow_operation = false;\n      }\n      if (allow_operation) {\n        mem_value = extract_memory_value_08002fa0(&DAT_200003d4,pin_number);\n        if (mem_value == 3) {\n          process_data_08008a24(pin_number,0);\n        }\n        process_data_08008990(pin_number,1);\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (modified_pin_number < 0xe) {\n        if (pin_number < 0x3c) {\n          mem_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          mem_value = -1;\n        }\n        mem_value = check_parameter_080036ac(mem_value);\n        if (mem_value == 0) {\n          allow_operation = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            mem_value = (int)(char)(&DAT_0800a908)[pin_number];\n          }\n          else {\n            mem_value = -1;\n          }\n          mem_value = check_parameter_080036ac(mem_value);\n          if (mem_value == 1) {\n            allow_operation = false;\n          }\n          else {\n            allow_operation = true;\n          }\n        }\n      }\n      else {\n        allow_operation = false;\n      }\n      if (allow_operation) {\n        if (pin_number < 0x3c) {\n          if ((&DAT_0800a908)[pin_number] == -1) {\n            allow_operation = false;\n          }\n          else {\n            mem_value = check_parameter_080036ac();\n            if (mem_value == 0) {\n              allow_operation = false;\n            }\n            else {\n              mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n              if (mem_value == 1) {\n                allow_operation = false;\n              }\n            }\n          }\n        }\n        else {\n          allow_operation = false;\n        }\n        if (allow_operation) {\n          process_data_08008990(pin_number,0);\n        }\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          mem_value = 0;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            mem_value = 0;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              mem_value = 0;\n            }\n            else {\n              mem_value = compare_params_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        mem_value = 0;\n      }\n      if (mem_value != 0) {\n        process_data_08008990(pin_number,1);\n        process_data_080088e0(pin_number,0);\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            allow_operation = false;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              allow_operation = false;\n            }\n            else {\n              allow_operation = true;\n            }\n          }\n        }\n      }\n      else {\n        allow_operation = false;\n      }\n      if (allow_operation) {\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,4);\n        if (((byte)(&DAT_200001f0)[pin_number] != 0xff) &&\n           (mem_value = extract_most_significant_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3),\n           mem_value != 0)) {\n          allow_operation = false;\n        }\n        if (allow_operation) {\n          update_servo_data_08000500(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      process_data_and_shift_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          mem_value = 0;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            mem_value = 0;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              mem_value = 0;\n            }\n            else {\n              mem_value = compare_params_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n              if (mem_value == 0) {\n                mem_value = compare_params_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        mem_value = 0;\n      }\n      if (mem_value != 0) {\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          allow_operation = false;\n        }\n        else {\n          mem_value = check_parameter_080036ac();\n          if (mem_value == 0) {\n            allow_operation = false;\n          }\n          else {\n            mem_value = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (mem_value == 1) {\n              allow_operation = false;\n            }\n            else {\n              allow_operation = true;\n            }\n          }\n        }\n      }\n      else {\n        allow_operation = false;\n      }\n      if (allow_operation) {\n        process_data_08008990(pin_number,2);\n        update_character_value_08002fa8(&DAT_200003d4,pin_number,0xb);\n        store_value_in_array_08002fc2(&DAT_200003d4,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_pin_operation_080005f8",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "iVar1": "mem_value",
                "cVar2": "mode_condition",
                "bVar3": "allow_operation",
                "uVar4": "modified_pin_number"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_pin_operations_08000a64",
            "code": "\nvoid process_pin_operations_08000a64(void)\n\n{\n  int param_check_result;\n  uint pin_index;\n  \n  for (pin_index = 0; pin_index < 0x3c; pin_index = pin_index + 1 & 0xff) {\n    if (pin_index < 0x3c) {\n      if ((&DAT_0800a908)[pin_index] == -1) {\n        param_check_result = 0;\n      }\n      else {\n        param_check_result = check_parameter_080036ac();\n        if (param_check_result == 0) {\n          param_check_result = 0;\n        }\n        else {\n          param_check_result = check_parameter_080036ac((int)(char)(&DAT_0800a908)[pin_index]);\n          if (param_check_result == 1) {\n            param_check_result = 0;\n          }\n          else {\n            param_check_result = compare_params_0800738a((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a69c);\n            if (param_check_result == 0) {\n              param_check_result = compare_params_0800738a((int)(char)(&DAT_0800a908)[pin_index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      param_check_result = 0;\n    }\n    if (param_check_result != 0) {\n      process_pin_operation_080005f8(pin_index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c_peripheral_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_pin_operations_08000a64",
                "iVar1": "param_check_result",
                "uVar2": "pin_index"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pin_operations_08000aec",
            "code": "\nvoid initialize_pin_operations_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data_080005e0();\n  }\n  for (uVar3 = 0; uVar3 < 5; uVar3 = uVar3 + 1 & 0xff) {\n    (&DAT_200001e8)[uVar3] = 0;\n    (&DAT_20000174)[uVar3] = 0;\n    (&DAT_20000180)[uVar3] = 0;\n  }\n  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1 & 0xff) {\n    if ((uVar3 - 0x2e & 0xff) < 0xe) {\n      if (uVar3 < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = check_parameter(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar3 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_parameter(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      process_pin_operation(uVar3,2);\n    }\n    else {\n      if ((((uVar3 < 0x3c) && ((&DAT_0800a908)[uVar3] != -1)) &&\n          (iVar2 = check_parameter(), iVar2 != 0)) &&\n         (iVar2 = check_parameter((int)(char)(&DAT_0800a908)[uVar3]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        process_pin_operation(uVar3,1);\n      }\n    }\n    (&DAT_200001f0)[uVar3] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pin_operations_08000aec",
                "check_parameter_080036ac": "check_parameter",
                "process_pin_operation_080005f8": "process_pin_operation"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "execute_decode_08000be8",
            "code": "\nvoid executeDecode_08000be8(int index,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *dataPtr;\n  undefined1 *maskedData;\n  \n  dataPtr = &DAT_20000174;\n  maskedData = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((condition != 0) ||\n     (dataPtr = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], maskedData != dataPtr)) {\n    decode_and_execute_08002efe(&DAT_200003d4,index,maskedData,dataPtr,param);\n    (&DAT_20000180)[index] = (char)maskedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "execute_decode_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "dataPtr",
                "puVar2": "maskedData"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "decode_parameters_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid decode_parameters_08000ef8(void)\n\n{\n  byte parameter_flags;\n  int result;\n  bool valid;\n  byte combined_flags;\n  \n  parameter_flags = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      combined_flags = 0;\n    }\n    else {\n      result = check_parameter_080036ac(3);\n      if (result == 1) {\n        combined_flags = 0;\n      }\n      else if ((parameter_flags & 1) == 0) {\n        combined_flags = 0;\n      }\n      else {\n        result = validate_input(0);\n        if (result == 0) {\n          combined_flags = 0;\n        }\n        else {\n          combined_flags = 1;\n        }\n      }\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(2);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 2) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(1);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 2;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(10);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 4) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(2);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 4;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x13);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 8) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(3);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 8;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x15);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x10) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(4);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x10;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x14);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x20) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(5);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x20;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x1a);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x40) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(6);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x40;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(8);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x80) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(7);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x80;\n    }\n    execute_decode(0,combined_flags);\n  }\n  parameter_flags = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      combined_flags = 0;\n    }\n    else {\n      result = check_parameter_080036ac(9);\n      if (result == 1) {\n        combined_flags = 0;\n      }\n      else if ((parameter_flags & 1) == 0) {\n        combined_flags = 0;\n      }\n      else {\n        result = validate_input(8);\n        if (result == 0) {\n          combined_flags = 0;\n        }\n        else {\n          combined_flags = 1;\n        }\n      }\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x27);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 2) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(9);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 2;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x16);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 4) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(10);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 4;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(7);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 8) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0xb);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 8;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(6);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x10) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0xc);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x10;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(5);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x20) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0xd);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x20;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x19);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x40) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0xe);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x40;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x18);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x80) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0xf);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x80;\n    }\n    execute_decode(1,combined_flags,0);\n  }\n  parameter_flags = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      combined_flags = 0;\n    }\n    else {\n      result = check_parameter_080036ac(0x2a);\n      if (result == 1) {\n        combined_flags = 0;\n      }\n      else if ((parameter_flags & 1) == 0) {\n        combined_flags = 0;\n      }\n      else {\n        result = validate_input(0x10);\n        if (result == 0) {\n          combined_flags = 0;\n        }\n        else {\n          combined_flags = 1;\n        }\n      }\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x2c);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 2) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x11);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 2;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0xd);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 8) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x13);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 8;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0xe);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x10) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x14);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x10;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0xf);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x20) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x15);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x20;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x17);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x40) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x16);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x40;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x2d);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x80) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x17);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x80;\n    }\n    execute_decode(2,combined_flags,0);\n  }\n  parameter_flags = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      combined_flags = 0;\n    }\n    else {\n      result = check_parameter_080036ac(0x2e);\n      if (result == 1) {\n        combined_flags = 0;\n      }\n      else if ((parameter_flags & 1) == 0) {\n        combined_flags = 0;\n      }\n      else {\n        result = validate_input(0x18);\n        if (result == 0) {\n          combined_flags = 0;\n        }\n        else {\n          combined_flags = 1;\n        }\n      }\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x2f);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 2) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x19);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 2;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x30);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 4) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1a);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 4;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x31);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 8) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1b);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 8;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x22);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x10) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1c);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x10;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x23);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x20) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1d);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x20;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x2b);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x40) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1e);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x40;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x32);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x80) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x1f);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x80;\n    }\n    execute_decode(3,combined_flags,0);\n  }\n  parameter_flags = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      combined_flags = 0;\n    }\n    else {\n      result = check_parameter_080036ac(0x29);\n      if (result == 1) {\n        combined_flags = 0;\n      }\n      else if ((parameter_flags & 1) == 0) {\n        combined_flags = 0;\n      }\n      else {\n        result = validate_input(0x20);\n        if (result == 0) {\n          combined_flags = 0;\n        }\n        else {\n          combined_flags = 1;\n        }\n      }\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x28);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 2) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x21);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 2;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x26);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 4) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x22);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 4;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x25);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 8) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x23);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 8;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0xc);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x10) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x24);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x10;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0xb);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x20) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x25);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x20;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x1c);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x40) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x26);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x40;\n    }\n    result = check_parameter_080036ac();\n    if (result == 0) {\n      valid = false;\n    }\n    else {\n      result = check_parameter_080036ac(0x1b);\n      if (result == 1) {\n        valid = false;\n      }\n      else if ((parameter_flags & 0x80) == 0) {\n        valid = false;\n      }\n      else {\n        result = validate_input(0x27);\n        if (result == 0) {\n          valid = false;\n        }\n        else {\n          valid = true;\n        }\n      }\n    }\n    if (valid) {\n      combined_flags = combined_flags | 0x80;\n    }\n    execute_decode(4,combined_flags,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "decode_parameters_08000ef8",
                "bVar1": "parameter_flags",
                "bVar4": "combined_flags",
                "iVar2": "result",
                "bVar3": "valid",
                "validate_input_08008a6c": "validate_input",
                "execute_decode_08000be8": "execute_decode"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_firmware_08001b48",
            "code": "\nvoid initializeFirmware_08001b48(void)\n\n{\n  extract_file_path_and_extension_08002e44(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  update_data_08002f2c(&DAT_200003d4,0xe0,0x8000215);\n  update_data_08002f2c(&DAT_200003d4,0x90,label1);\n  update_data_08002f2c(&DAT_200003d4,0xc0,0x8000489);\n  update_data_08002f2c(&DAT_200003d4,0xd0,label2);\n  update_data_08002f2c(&DAT_200003d4,0xf4,0x80005f9);\n  update_data_08002f2c(&DAT_200003d4,0xf5,label3);\n  FUNC_08002f94(&DAT_200003d4,0xf0,0x8001cd1);\n  updateData(&DAT_200003d4,0xff,0x8000aed);\n  initializeAndProcessSerialData(&DAT_200003d4,0xe100);\n  initializePinOperations();\n  executeInterruptHandler(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_firmware_08001b48",
                "&LAB_080002ec_1": "label1",
                "&LAB_08000c18_1": "label2",
                "&LAB_080001a8_1": "label3",
                "update_dat_08002f84": "updateData",
                "initialize_and_process_serial_data_08003048": "initializeAndProcessSerialData",
                "initialize_pin_operations_08000aec": "initializePinOperations",
                "execute_interrupt_handler_0800018c": "executeInterruptHandler"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_and_update_data_08001bf8",
            "code": "\nvoid copyAndUpdateData_08001bf8(undefined4 sourceData,undefined4 param2,undefined4 targetData,undefined4 param4)\n\n{\n  copy_and_update_data_0800288c(&DAT_20000314,sourceData,targetData,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_and_update_data_08001bf8",
                "param_1": "sourceData",
                "param_2": "param2",
                "param_3": "targetData",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_memory_08001c08",
            "code": "\nundefined readByteFromMemory_08001c08(void)\n\n{\n  undefined byteValue;\n  \n  byteValue = read_byte_from_memory_08002720(&DAT_20000314);\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_memory_08001c08",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 deviceId,uint dataLength,int expectedLength,undefined4 checksum)\n\n{\n  undefined byteValue;\n  int difference;\n  int difference;\n  bool isDifferenceNonZero;\n  \n  if (dataLength == 0xffffffff) {\n    dataLength = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,deviceId);\n    copy_and_update_data_08001bf8(dataLength & 0xff);\n    validate_data_08002a58(&DAT_20000314,checksum);\n  }\n  process_data_08002c14(&DAT_20000314,deviceId,expectedLength);\n  difference = calculate_data_difference_0800270c(&DAT_20000314);\n  if (expectedLength < difference) {\n    process_data_and_shift_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_data_difference_0800270c(&DAT_20000314);\n    if (difference < expectedLength) {\n      process_data_and_shift_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceId;\n  DAT_20000131 = (undefined)dataLength;\n  difference = 0;\n  while( true ) {\n    if (difference < expectedLength) {\n      difference = calculate_data_difference_0800270c(&DAT_20000314);\n      if (difference == 0) {\n        isDifferenceNonZero = false;\n      }\n      else {\n        isDifferenceNonZero = true;\n      }\n    }\n    else {\n      isDifferenceNonZero = false;\n    }\n    if (!isDifferenceNonZero) break;\n    byteValue = read_byte_from_memory_08001c08();\n    (&DAT_20000132)[difference] = byteValue;\n    difference = difference + 1;\n  }\n  decode_and_process_data_08002f0a(&DAT_200003d4,0x77,expectedLength + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "deviceId",
                "param_2": "dataLength",
                "param_3": "expectedLength",
                "param_4": "checksum",
                "uVar1": "byteValue",
                "iVar2": "difference",
                "iVar3": "difference",
                "bVar4": "isDifferenceNonZero"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_binary_function_08001cd0",
            "code": "\nvoid processBinaryFunction_08001cd0(undefined4 opcode,int paramCount,byte *data,undefined4 paramLength)\n\n{\n  byte dataByte1;\n  byte dataByte2;\n  byte dataByte3;\n  undefined4 extractedValue;\n  byte bitwiseResult;\n  char charValue;\n  int intValue1;\n  int intValue2;\n  uint uintValue1;\n  uint uintValue2;\n  int comparisonResult;\n  bool boolResult;\n  \n  switch(opcode) {\n  case 0x69:\n    execute_code_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_code_function_08002f1e(&DAT_200003d4,0x6a);\n    for (uintValue1 = 0; uintValue1 < 0x3c; uintValue1 = uintValue1 + 1 & 0xff) {\n      uintValue2 = uintValue1 - 0x2e & 0xff;\n      if (uintValue2 < 0xe) {\n        if (uintValue1 < 0x3c) {\n          intValue1 = (int)(char)(&DAT_0800a908)[uintValue1];\n        }\n        else {\n          intValue1 = -1;\n        }\n        intValue1 = check_parameter_080036ac(intValue1);\n        if (intValue1 == 0) {\n          uintValue2 = 0x7f;\n        }\n        else {\n          if (uintValue1 < 0x3c) {\n            intValue1 = (int)(char)(&DAT_0800a908)[uintValue1];\n          }\n          else {\n            intValue1 = -1;\n          }\n          intValue1 = check_parameter_080036ac(intValue1);\n          if (intValue1 == 1) {\n            uintValue2 = 0x7f;\n          }\n        }\n      }\n      else {\n        uintValue2 = 0x7f;\n      }\n      execute_code_function_08002f1e(&DAT_200003d4,uintValue2);\n    }\n    execute_code_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_code_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_code_function_08002f1e(&DAT_200003d4,0x6c);\n    for (uintValue1 = 0; uintValue1 < 0x3c; uintValue1 = uintValue1 + 1 & 0xff) {\n      if (uintValue1 < 0x3c) {\n        if ((&DAT_0800a908)[uintValue1] == -1) {\n          boolResult = false;\n        }\n        else {\n          intValue1 = check_parameter_080036ac();\n          if (intValue1 == 0) {\n            boolResult = false;\n          }\n          else {\n            intValue1 = check_parameter_080036ac((int)(char)(&DAT_0800a908)[uintValue1]);\n            if (intValue1 == 1) {\n              boolResult = false;\n            }\n            else {\n              boolResult = true;\n            }\n          }\n        }\n      }\n      else {\n        boolResult = false;\n      }\n      if (boolResult) {\n        execute_code_function_08002f1e(&DAT_200003d4,0);\n        execute_code_function_08002f1e(&DAT_200003d4,1);\n        execute_code_function_08002f1e(&DAT_200003d4,0xb);\n        execute_code_function_08002f1e(&DAT_200003d4,1);\n        execute_code_function_08002f1e(&DAT_200003d4,1);\n        execute_code_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((uintValue1 - 0x2e & 0xff) < 0xe) {\n        if (uintValue1 < 0x3c) {\n          intValue1 = (int)(char)(&DAT_0800a908)[uintValue1];\n        }\n        else {\n          intValue1 = -1;\n        }\n        intValue1 = check_parameter_080036ac(intValue1);\n        if (intValue1 == 0) {\n          boolResult = false;\n        }\n        else {\n          if (uintValue1 < 0x3c) {\n            intValue1 = (int)(char)(&DAT_0800a908)[uintValue1];\n          }\n          else {\n            intValue1 = -1;\n          }\n          intValue1 = check_parameter_080036ac(intValue1);\n          if (intValue1 == 1) {\n            boolResult = false;\n          }\n          else {\n            boolResult = true;\n          }\n        }\n      }\n      else {\n        boolResult = false;\n      }\n      if (boolResult) {\n        execute_code_function_08002f1e(&DAT_200003d4,2);\n        execute_code_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (uintValue1 < 0x3c) {\n        if ((&DAT_0800a908)[uintValue1] == -1) {\n          intValue1 = 0;\n        }\n        else {\n          intValue1 = check_parameter_080036ac();\n          if (intValue1 == 0) {\n            intValue1 = 0;\n          }\n          else {\n            intValue1 = check_parameter_080036ac((int)(char)(&DAT_0800a908)[uintValue1]);\n            if (intValue1 == 1) {\n              intValue1 = 0;\n            }\n            else {\n              intValue1 = compare_params_0800738a((int)(char)(&DAT_0800a908)[uintValue1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        intValue1 = 0;\n      }\n      if (intValue1 != 0) {\n        execute_code_function_08002f1e(&DAT_200003d4,3);\n        execute_code_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (uintValue1 < 0x3c) {\n        if ((&DAT_0800a908)[uintValue1] == -1) {\n          boolResult = false;\n        }\n        else {\n          intValue1 = check_parameter_080036ac();\n          if (intValue1 == 0) {\n            boolResult = false;\n          }\n          else {\n            intValue1 = check_parameter_080036ac((int)(char)(&DAT_0800a908)[uintValue1]);\n            if (intValue1 == 1) {\n              boolResult = false;\n            }\n            else {\n              boolResult = true;\n            }\n          }\n        }\n      }\n      else {\n        boolResult = false;\n      }\n      if (boolResult) {\n        execute_code_function_08002f1e(&DAT_200003d4,4);\n        execute_code_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (uintValue1 < 0x3c) {\n        if ((&DAT_0800a908)[uintValue1] == -1) {\n          intValue1 = 0;\n        }\n        else {\n          intValue1 = check_parameter_080036ac();\n          if (intValue1 == 0) {\n            intValue1 = 0;\n          }\n          else {\n            intValue1 = check_parameter_080036ac((int)(char)(&DAT_0800a908)[uintValue1]);\n            if (intValue1 == 1) {\n              intValue1 = 0;\n            }\n            else {\n              intValue1 = compare_params_0800738a((int)(char)(&DAT_0800a908)[uintValue1],&DAT_0800a69c);\n              if (intValue1 == 0) {\n                intValue1 = compare_params_0800738a((int)(char)(&DAT_0800a908)[uintValue1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        intValue1 = 0;\n      }\n      if (intValue1 != 0) {\n        execute_code_function_08002f1e(&DAT_200003d4,6);\n        execute_code_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_code_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_code_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (paramCount != 0) {\n      dataByte1 = *data;\n      execute_code_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_code_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_code_function_08002f1e(&DAT_200003d4,dataByte1);\n      if (dataByte1 < 0x3c) {\n        extractedValue = extract_memory_value_08002fa0(&DAT_200003d4,dataByte1);\n        execute_code_function_08002f1e(&DAT_200003d4,extractedValue);\n        uintValue1 = get_memory_value_08002fba(&DAT_200003d4,dataByte1);\n        execute_code_function_08002f1e(&DAT_200003d4,uintValue1 & 0x7f);\n        uintValue1 = get_memory_value_08002fba(&DAT_200003d4,dataByte1);\n        if ((uintValue1 & 0xff80) != 0) {\n          intValue1 = get_memory_value_08002fba(&DAT_200003d4,dataByte1);\n          execute_code_function_08002f1e(&DAT_200003d4,(uint)(intValue1 << 0x12) >> 0x19);\n        }\n        uintValue1 = get_memory_value_08002fba(&DAT_200003d4,dataByte1);\n        if ((uintValue1 & 0xc000) != 0) {\n          intValue1 = get_memory_value_08002fba(&DAT_200003d4,dataByte1);\n          execute_code_function_08002f1e(&DAT_200003d4,(uint)(intValue1 << 0xb) >> 0x19);\n        }\n      }\n      execute_code_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < paramCount) {\n      uintValue1 = (uint)data[1];\n      if (2 < paramCount) {\n        uintValue1 = uintValue1 | (uint)data[2] << 7;\n      }\n      if (3 < paramCount) {\n        uintValue1 = uintValue1 | (uint)data[3] << 0xe;\n      }\n      process_and_store_08000214(*data,uintValue1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < paramCount) {\n      uintValue1 = (uint)*data;\n      dataByte1 = data[1];\n      bitwiseResult = data[2];\n      dataByte2 = data[3];\n      dataByte3 = data[4];\n      if (uintValue1 < 0x3c) {\n        if ((&DAT_0800a908)[uintValue1] == -1) {\n          boolResult = false;\n        }\n        else {\n          intValue1 = check_parameter_080036ac();\n          if (intValue1 == 0) {\n            boolResult = false;\n          }\n          else {\n            intValue1 = check_parameter_080036ac((int)(char)(&DAT_0800a908)[uintValue1]);\n            if (intValue1 == 1) {\n              boolResult = false;\n            }\n            else {\n              boolResult = true;\n            }\n          }\n        }\n      }\n      else {\n        boolResult = false;\n      }\n      if (boolResult) {\n        if ((byte)(&DAT_200001f0)[uintValue1] < 0xc) {\n          intValue1 = extract_most_significant_bit_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[uintValue1] * 3);\n        }\n        else {\n          intValue1 = 0;\n        }\n        if (intValue1 != 0) {\n          update_and_count_08000588(uintValue1);\n        }\n        update_servo_data_08000500(uintValue1,(uint)dataByte1 + (uint)bitwiseResult * 0x80,(uint)dataByte2 + (uint)dataByte3 * 0x80);\n        process_pin_operation_080005f8(uintValue1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    dataByte1 = data[1];\n    bitwiseResult = dataByte1 & 0x18;\n    if ((dataByte1 & 0x20) != 0) {\n      process_data_and_shift_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",bitwiseResult,dataByte1,paramLength);\n      return;\n    }\n    dataByte2 = *data;\n    boolResult = (dataByte1 & 0x40) == 0;\n    if (bitwiseResult < 0x19) {\n      switch(bitwiseResult) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,dataByte2);\n        for (uintValue1 = 2; (int)uintValue1 < paramCount; uintValue1 = uintValue1 + 2 & 0xff) {\n          copy_and_update_data_08001bf8(data[uintValue1 + 1] * -0x80 + data[uintValue1]);\n        }\n        validate_input_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (paramCount == 6) {\n          intValue1 = (uint)data[2] + (uint)data[3] * 0x80;\n          charValue = data[4] + data[5] * -0x80;\n        }\n        else {\n          charValue = data[2] + data[3] * -0x80;\n          intValue1 = -1;\n        }\n        process_received_data_08001c18(dataByte2,intValue1,charValue);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (paramCount == 6) {\n            intValue1 = (uint)data[2] + (uint)data[3] * 0x80;\n            charValue = data[4] + data[5] * -0x80;\n          }\n          else {\n            charValue = data[2] + data[3] * -0x80;\n            intValue1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          intValue2 = (int)DAT_20000004;\n          comparisonResult = intValue2 * 0xc;\n          (&DAT_20000188)[comparisonResult] = dataByte2;\n          (&DAT_2000018c)[intValue2 * 3] = intValue1;\n          (&DAT_20000190)[comparisonResult] = charValue;\n          (&DAT_20000191)[comparisonResult] = boolResult;\n          return;\n        }\n        process_data_and_shift_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolResult,paramLength);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (uintValue1 = 0; intValue1 = DAT_20000004 + 1, (int)uintValue1 < intValue1; uintValue1 = uintValue1 + 1 & 0xff) {\n        if (dataByte2 == (&DAT_20000188)[uintValue1 * 0xc]) goto LAB_08001e66;\n      }\n      uintValue1 = 0;\nLAB_08001e66:\n      for (; (int)uintValue1 < intValue1; uintValue1 = uintValue1 + 1 & 0xff) {\n        if (uintValue1 < 8) {\n          intValue2 = (uintValue1 + 1) * 0xc;\n          comparisonResult = uintValue1 * 0xc;\n          (&DAT_20000188)[comparisonResult] = (&DAT_20000188)[intValue2];\n          (&DAT_2000018c)[uintValue1 * 3] = (&DAT_2000018c)[(uintValue1 + 1) * 3];\n          (&DAT_20000190)[comparisonResult] = (&DAT_20000190)[intValue2];\n          (&DAT_20000191)[comparisonResult] = (&DAT_20000191)[intValue2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    intValue1 = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < paramCount) && (intValue1 != 0)) {\n      DAT_2000012c = intValue1;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_pin_operations_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < paramCount) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_binary_function_08001cd0",
                "param_1": "opcode",
                "param_2": "paramCount",
                "param_3": "data",
                "param_4": "paramLength",
                "bVar1": "dataByte1",
                "bVar2": "dataByte2",
                "bVar3": "dataByte3",
                "uVar4": "extractedValue",
                "bVar5": "bitwiseResult",
                "cVar6": "charValue",
                "iVar7": "intValue1",
                "iVar8": "intValue2",
                "uVar9": "uintValue1",
                "uVar10": "uintValue2",
                "iVar11": "comparisonResult",
                "bVar12": "boolResult"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "decode_and_process_data_080022f8",
            "code": "\nvoid decode_and_process_data_080022f8(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  decode_parameters();\n  while (iVar2 = execute_function(&DAT_200003d4), iVar2 != 0) {\n    process_extracted_data(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_data();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (uVar4 = 0; uVar4 < 0x3c; uVar4 = uVar4 + 1 & 0xff) {\n      uVar5 = uVar4 - 0x2e & 0xff;\n      if (uVar5 < 0xe) {\n        if (uVar4 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_parameter(iVar2);\n        if (iVar2 == 0) {\n          bVar1 = false;\n        }\n        else {\n          if (uVar4 < 0x3c) {\n            iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = check_parameter(iVar2);\n          if (iVar2 == 1) {\n            bVar1 = false;\n          }\n          else {\n            iVar2 = extract_memory_value(&DAT_200003d4,uVar4);\n            if (iVar2 == 2) {\n              bVar1 = true;\n            }\n            else {\n              bVar1 = false;\n            }\n          }\n        }\n      }\n      else {\n        bVar1 = false;\n      }\n      if ((bVar1) && ((DAT_20000114 >> uVar5 & 1U) != 0)) {\n        uVar3 = decode_value(uVar5);\n        process_and_return(&DAT_200003d4,uVar5,uVar3);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (uVar4 = 0; (int)uVar4 < DAT_20000004 + 1; uVar4 = uVar4 + 1 & 0xff) {\n        iVar2 = uVar4 * 0xc;\n        process_received_data((&DAT_20000188)[iVar2],(&DAT_2000018c)[uVar4 * 3],(&DAT_20000190)[iVar2],\n                     (&DAT_20000191)[iVar2]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "decode_and_process_data_080022f8",
                "decode_parameters_08000ef8": "decode_parameters",
                "execute_function_08002ec4": "execute_function",
                "process_extracted_data_08002ed2": "process_extracted_data",
                "initialize_data_08008abc": "initialize_data",
                "check_parameter_080036ac": "check_parameter",
                "extract_memory_value_08002fa0": "extract_memory_value",
                "decode_value_08008880": "decode_value",
                "process_and_return_08002ef2": "process_and_return",
                "process_received_data_08001c18": "process_received_data"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_flag_08002400",
            "code": "\nundefined4 check_flag_08002400(int input)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_flag_08002400",
                "param_1": "input",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_device_0800242c",
            "code": "\nvoid initialize_device_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_device_0800242c_08007648(param1,60000,0x5dc,&label1,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_device_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "LAB_08002444_1": "label1"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_flags_08002578",
            "code": "\nvoid initializeFlags_08002578(void)\n\n{\n  processFlags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_flags_08002578",
                "process_flags_080076e0": "processFlags"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *dataPointer)\n\n{\n  char nextValue;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *dataPointer = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *dataPointer = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "dataPointer",
                "cVar1": "nextValue",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_and_update_data_080025ac",
            "code": "\nbyte process_and_update_data_080025ac(byte *data_ptr,uint data_size,int offset_1,int offset_2)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint division_result;\n  int updated_offset;\n  \n  if (*data_ptr < 0xc) {\n    process_data(data_size,1,offset_1,*data_ptr,offset_2);\n    updated_value_2 = (uint)*data_ptr;\n    updated_value_1 = (byte)(&DAT_20000258)[updated_value_2 * 8] & 0xffffffc0 | data_size & 0x3f;\n    (&DAT_20000258)[updated_value_2 * 8] = (char)updated_value_1;\n    updated_offset = -offset_1 + 0x220;\n    if (updated_offset < 0) {\n      updated_offset = -offset_1 + 0x223;\n    }\n    data_ptr[1] = (byte)((uint)(updated_offset << 0x16) >> 0x18);\n    updated_offset = -offset_2 + 0x960;\n    if (updated_offset < 0) {\n      updated_offset = -offset_2 + 0x963;\n    }\n    data_ptr[2] = (byte)((uint)(updated_offset << 0x16) >> 0x18);\n    division_result = *data_ptr / 0xc;\n    updated_offset = check_flag(division_result,updated_value_1,updated_value_2,(uint)*data_ptr * -0x55555555);\n    if (updated_offset == 0) {\n      DAT_200002fc = (undefined)division_result;\n      initialize_device();\n    }\n    (&DAT_20000258)[(uint)*data_ptr * 8] = (&DAT_20000258)[(uint)*data_ptr * 8] | 0x40;\n  }\n  return *data_ptr;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_and_update_data_080025ac",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "offset_1",
                "param_4": "offset_2",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "division_result",
                "iVar4": "updated_offset",
                "process_data_08008990": "process_data",
                "check_flag_08002400": "check_flag",
                "initialize_device_0800242c": "initialize_device"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "update_data_08002634",
            "code": "\nvoid updateData_08002634(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  process_and_update_data_080025ac(inputParam1,inputParam2,0x220,0x960,inputParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "update_data_08002634",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "update_flag_08002644",
            "code": "\nvoid updateFlag_08002644(byte *data,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte flag;\n  uint index;\n  int result;\n  \n  index = (uint)*data;\n  flag = (&DAT_20000258)[index * 8];\n  (&DAT_20000258)[index * 8] = flag & 0xbf;\n  result = check_flag_08002400(index / 0xc,value1,flag & 0xbf,index * -0x55555555,value3);\n  if (result == 0) {\n    initialize_flags_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "update_flag_08002644",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "flag",
                "uVar2": "index",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_index_0800267c",
            "code": "\nvoid updateArrayIndex_0800267c(byte *arrayPointer,int value)\n\n{\n  int index;\n  \n  if (*arrayPointer < 0xc) {\n    index = (0x88 - (char)arrayPointer[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)arrayPointer[2]) * 4,\n       value == index || value + (600 - (char)arrayPointer[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*arrayPointer * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_index_0800267c",
                "param_1": "arrayPointer",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_array_index_080026b0",
            "code": "\nvoid updateArrayIndex_080026b0(int ptrArray,int value)\n\n{\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = calculateNewValue(value,0,0xb4,(0x88 - *(char *)(ptrArray + 1)) * 4,\n                           (600 - *(char *)(ptrArray + 2)) * 4);\n  }\n  updateArrayIndex_080026b0(ptrArray,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_array_index_080026b0",
                "param_1": "ptrArray",
                "param_2": "value",
                "calculate_new_value_08008ef4": "calculateNewValue",
                "update_array_index_0800267c": "updateArrayIndex"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_most_significant_bit_080026f8",
            "code": "\nuint extractMostSignificantBit_080026f8(byte *input)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*input * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_most_significant_bit_080026f8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_data_difference_0800270c",
            "code": "\nint calculate_data_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_data_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_byte_from_memory_08002720",
            "code": "\nuint readByteFromMemory_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "handle_data_copy_080027f0",
            "code": "\nuint handle_data_copy_080027f0(int input_offset,undefined4 source_address,uint length)\n\n{\n  int copy_result;\n  uint new_length;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_08007ede(input_offset + 0x14,source_address,length & 0xffff);\n    if (copy_result == 0) {\n      return length;\n    }\n    return 0;\n  }\n  new_length = DAT_200003b8 + length;\n  if (DAT_200003c5 < new_length) {\n    if (new_length < 0x20) {\n      new_length = 0x20;\n    }\n    DAT_200003cc = allocate_and_initialize_memory_08009908(DAT_200003cc,new_length);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_length;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(input_offset + 4) = 1;\n    return 0;\n  }\n  copy_data_080091b0((uint)DAT_200003b6 + DAT_200003cc,source_address,length);\n  DAT_200003b6 = DAT_200003b6 + (char)length;\n  DAT_200003b8 = DAT_200003b6;\n  return length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "handle_data_copy_080027f0",
                "param_1": "input_offset",
                "param_2": "source_address",
                "param_3": "length",
                "iVar1": "copy_result",
                "uVar2": "new_length"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_and_update_data_0800288c",
            "code": "\nundefined4 copyAndUpdateData_0800288c(int inputParam,undefined inputValue)\n\n{\n  undefined4 returnValue;\n  int copyResult;\n  uint newSize;\n  undefined newValue;\n  \n  newValue = inputValue;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(inputParam + 0x14,&newValue,1);\n    if (copyResult == 0) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    newSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      DAT_200003cc = allocate_and_initialize_memory_08009908(DAT_200003cc,newSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(inputParam + 4) = 1;\n      returnValue = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = newValue;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      returnValue = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_and_update_data_0800288c",
                "param_1": "inputParam",
                "param_2": "inputValue",
                "uVar1": "returnValue",
                "iVar2": "copyResult",
                "uVar3": "newSize",
                "local_11": "newValue"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_settings_0800291c",
            "code": "\nvoid initializeSettings_0800291c(undefined4 *settingsArray)\n\n{\n  settingsArray[1] = 0;\n  settingsArray[2] = 1000;\n  *settingsArray = &PTR_copy_and_update_data_0800288c_1_0800a5a0;\n  *(undefined *)(settingsArray + 0x1b) = 0x19;\n  *(undefined *)((int)settingsArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_settings_0800291c",
                "param_1": "settingsArray"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_param_1_is_one_08002948",
            "code": "\nvoid initialize_if_param_1_is_one_08002948(int input_parameter,int flag_parameter)\n\n{\n  if (input_parameter != 1) {\n    return;\n  }\n  if (flag_parameter == 0xffff) {\n    initialize_settings(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_param_1_is_one_08002948",
                "param_1": "input_parameter",
                "param_2": "flag_parameter",
                "initialize_settings_0800291c": "initialize_settings"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_peripheral_08002968",
            "code": "\nvoid initializeI2CPeripheral_08002968(int dataAddress,uint optionValue)\n\n{\n  int shiftedOptionValue;\n  int peripheralAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_with_byte_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_with_byte_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedOptionValue = (optionValue & 0x7f) << 1;\n  *(char *)(dataAddress + 0x10) = (char)shiftedOptionValue;\n  if (optionValue == 0x33) {\n    *(undefined *)(dataAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(dataAddress + 0x11) = 0;\n  }\n  peripheralAddress = dataAddress + 0x14;\n  initialize_i2_c_peripheral_080077b0(peripheralAddress,100000,0x4000,shiftedOptionValue,*(undefined *)(dataAddress + 0x11));\n  if (*(char *)(dataAddress + 0x11) == '\\0') {\n    update_and_initialize_08007f8e(peripheralAddress,&LAB_08002774_1);\n    update_data_08007f7c(peripheralAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_peripheral_08002968",
                "param_1": "dataAddress",
                "param_2": "optionValue",
                "iVar1": "shiftedOptionValue",
                "iVar2": "peripheralAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_peripheral_08002a1c",
            "code": "\nvoid initialize_i2c_peripheral_08002a1c(undefined4 arg1,undefined arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  initialize_i2_c_peripheral_08002968(arg1,arg2,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_peripheral_08002a1c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_peripheral_08002a26",
            "code": "\nvoid initialize_i2c_peripheral_08002a26(undefined4 peripheral_address,undefined4 undefined1,undefined4 undefined2,undefined4 undefined3)\n\n{\n  initialize_i2c_peripheral_08002a26_08002a1c(peripheral_address,0x33,undefined2,undefined3,undefined3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_peripheral_08002a26",
                "param_1": "peripheral_address",
                "param_2": "undefined1",
                "param_3": "undefined2",
                "param_4": "undefined3"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 param1,int param2)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(param2 << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "validate_data_08002a58",
            "code": "\nundefined4 validateData_08002a58(int data)\n\n{\n  int validationResult;\n  undefined4 returnValue;\n  \n  if (*(char *)(data + 0x11) == '\\0') {\n    returnValue = 4;\n  }\n  else {\n    validationResult = validate_and_check_data_08007e74(data + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (validationResult == 0) {\n      returnValue = 0;\n    }\n    else if (validationResult == 1) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_with_byte_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "validate_data_08002a58",
                "param_1": "data",
                "iVar1": "validationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "validate_input_08002ac0",
            "code": "\nvoid validate_input_08002ac0(undefined4 input_ptr,undefined4 param_2,undefined4 output_ptr,undefined4 param_4)\n\n{\n  validate_data_08002a58(input_ptr,1,output_ptr,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "validate_input_08002ac0",
                "param_1": "input_ptr",
                "param_3": "output_ptr"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "initialize_memory_08002acc",
            "code": "\nvoid initializeMemory_08002acc(uint requestedSize,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < requestedSize) {\n    if (requestedSize < 0x20) {\n      requestedSize = 0x20;\n    }\n    DAT_200003c8 = allocate_and_initialize_memory_08009908(DAT_200003c8,requestedSize,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requestedSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "initialize_memory_08002acc",
                "param_1": "requestedSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocessData_08002b68(undefined4 *data_ptr,uint data_length,undefined4 memory_size,uint param4,byte byte_input)\n\n{\n  int result;\n  uint byte_index;\n  uint param4_copy;\n  \n  byte_index = (uint)byte_input;\n  if (*(char *)((int)data_ptr + 0x11) == '\\0') {\n    return 0;\n  }\n  param4_copy = param4;\n  initialize_memory_08002acc(memory_size);\n  if (DAT_200003c8 != 0) {\n    if (byte_index != 0) {\n      initialize_data_08002a30(data_ptr,data_length);\n      if (3 < byte_index) {\n        byte_index = 3;\n      }\n      while( true ) {\n        if (byte_index == 0) break;\n        (**(code **)*data_ptr)(data_ptr,param4 >> ((byte_index - 1 & 0x1f) << 3) & 0xff);\n        byte_index = byte_index - 1 & 0xff;\n      }\n      validate_data_08002a58(data_ptr,0);\n    }\n    result = check_data_validity_08007f0e(data_ptr + 5,(data_length & 0x7f) << 1,DAT_200003c8,memory_size,param4_copy);\n    if (result != 0) {\n      memory_size = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)memory_size;\n    return memory_size;\n  }\n  data_ptr[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "memory_size",
                "param_4": "param4",
                "param_5": "byte_input",
                "iVar1": "result",
                "uVar2": "byte_index",
                "uVar3": "param4_copy"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "process_data_08002c00",
            "code": "\nvoid process_data_08002c00(void)\n\n{\n  process_data_08002c00_08002b68();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "process_data_08002c00"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "process_data_08002c14",
            "code": "\nvoid process_data_08002c14(void)\n\n{\n  process_data_08002c14_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "process_data_08002c14"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_and_execute_08002c1e",
            "code": "\nvoid initialize_and_execute_08002c1e(undefined4 execution_flag,undefined4 constant_value,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  initialize_if_execution_flag_is_one_08002948(1,0xffff,parameter_3,parameter_4,parameter_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_and_execute_08002c1e",
                "param_1": "execution_flag",
                "param_2": "constant_value",
                "param_3": "parameter_3",
                "param_4": "parameter_4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_update_params_08002ce0",
            "code": "\nint initialize_and_update_params_08002ce0(int base_address)\n\n{\n  int offset;\n  \n  initialize_param(base_address + 0x40);\n  offset = base_address + 0x44;\n  initialize_data_structure(offset,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  set_param_value(offset,0xe0,callback_function + 1,0);\n  set_param_value(offset,0x90,&label1,0);\n  set_param_value(offset,0xc0,&label2,0);\n  set_param_value(offset,0xd0,&label3,0);\n  set_param_value(offset,0xf4,&label4,0);\n  set_param_value(offset,0xf5,&label5,0);\n  update_values(offset,0x71,&label6,0);\n  initialize_data(offset,0xf0,&label7,0);\n  set_param_values(offset,0x79,&label8,base_address);\n  update_data(offset,0xf9,&label9,base_address);\n  update_data(offset,0xff,&label10,0);\n  return base_address;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_update_params_08002ce0",
                "param_1": "base_address",
                "iVar1": "offset",
                "initialize_param_0800314e": "initialize_param",
                "initialize_data_structure_080032bc": "initialize_data_structure",
                "set_param_value_08003306": "set_param_value",
                "execute_callback_08002c2c": "callback_function",
                "LAB_08002c40_1": "label1",
                "LAB_08002c7c_1": "label2",
                "LAB_08002c90_1": "label3",
                "LAB_08002c54_1": "label4",
                "LAB_08002c68_1": "label5",
                "update_values_08003366": "update_values",
                "LAB_08002ca4_1": "label6",
                "initialize_data_08003370": "initialize_data",
                "LAB_08002cb8_1": "label7",
                "set_param_values_08003346": "set_param_values",
                "LAB_08002e1a_1": "label8",
                "update_data_08003350": "update_data",
                "LAB_08002dea_1": "label9",
                "LAB_08002cd0_1": "label10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_if_param_is_one_08002dbc",
            "code": "\nvoid initializeIfParamIsOne_08002dbc(int inputParam,int checkParam)\n\n{\n  if (inputParam != 1) {\n    return;\n  }\n  if (checkParam == 0xffff) {\n    initializeAndUpdateParams(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_is_one_08002dbc",
                "param_1": "inputParam",
                "param_2": "checkParam",
                "initialize_and_update_params_08002ce0": "initializeAndUpdateParams"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_second_function_08002ddc",
            "code": "\nvoid execute_second_function_08002ddc(int original_param,undefined4 unused_param,undefined4 unused_param,undefined4 function_param)\n\n{\n  execute_first_function(original_param + 0x40,2,5,function_param,function_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_second_function_08002ddc",
                "param_1": "original_param",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "function_param",
                "execute_function_0800322c": "execute_first_function"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "process_data_from_param_1_08002df6",
            "code": "\nvoid process_data_from_param_1_08002df6(int input_data)\n\n{\n  undefined *data_ptr;\n  \n  if (*(byte *)(input_data + 0xc4) == 0) {\n    return;\n  }\n  data_ptr = *(undefined **)(input_data + 200);\n  process_data_080031ce(input_data + 0x40,*data_ptr,data_ptr[1],*(byte *)(input_data + 0xc4) - 2,data_ptr + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "process_data_from_param_1_08002df6",
                "param_1": "input_data",
                "puVar1": "data_ptr"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_value_and_process_08002e26",
            "code": "\nvoid updateValueAndProcess_08002e26(int dataPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(dataPointer + 0xc0) = newValue;\n  copy_value_to_pointer_08003154(dataPointer + 0x40);\n  executeSecondFunction(dataPointer);\n  processDataFromPointer(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_value_and_process_08002e26",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "execute_second_function_08002ddc": "executeSecondFunction",
                "process_data_from_param_1_08002df6": "processDataFromPointer"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_path_and_extension_08002e44",
            "code": "\nvoid extractFilePathAndExtension_08002e44(int outputBuffer,int inputPath,undefined undefinedArg1,undefined undefinedArg2)\n\n{\n  byte byteValue;\n  char charValue;\n  int substringStart;\n  int lastSlashIndex;\n  undefined *bufferPointer;\n  \n  substringStart = find_substring_080099a4(inputPath,\".cpp\");\n  lastSlashIndex = find_last_occurrence_0800997e(inputPath,0x2f);\n  if (lastSlashIndex == 0) {\n    lastSlashIndex = find_last_occurrence_0800997e(inputPath,0x5c);\n  }\n  if (lastSlashIndex != 0) {\n    inputPath = lastSlashIndex + 1;\n  }\n  if (substringStart == 0) {\n    charValue = get_string_length_08000178(inputPath);\n    *(char *)(outputBuffer + 0xc4) = charValue + '\\x02';\n  }\n  else {\n    *(char *)(outputBuffer + 0xc4) = ((char)substringStart - (char)inputPath) + '\\x02';\n  }\n  process_data_080091a0(*(undefined4 *)(outputBuffer + 200));\n  byteValue = *(byte *)(outputBuffer + 0xc4);\n  bufferPointer = (undefined *)initialize_memory_08009190(byteValue + 1);\n  *(undefined **)(outputBuffer + 200) = bufferPointer;\n  bufferPointer[byteValue] = 0;\n  *bufferPointer = undefinedArg1;\n  bufferPointer[1] = undefinedArg2;\n  copy_string_with_limit_08009954(bufferPointer + 2,inputPath,*(byte *)(outputBuffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_path_and_extension_08002e44",
                "param_1": "outputBuffer",
                "param_2": "inputPath",
                "param_3": "undefinedArg1",
                "param_4": "undefinedArg2",
                "bVar1": "byteValue",
                "cVar2": "charValue",
                "iVar3": "substringStart",
                "iVar4": "lastSlashIndex",
                "puVar5": "bufferPointer"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid execute_function_08002ec4(int function_argument)\n\n{\n  (**(code **)(**(int **)(function_argument + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "function_argument"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_extracted_data_08002ed2",
            "code": "\nvoid process_extracted_data_08002ed2(int extracted_data)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(extracted_data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_data(extracted_data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_extracted_data_08002ed2",
                "param_1": "extracted_data",
                "uVar1": "result",
                "process_data_08003474": "process_data"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "process_and_return_08002ef2",
            "code": "\nvoid processAndReturn_08002ef2(int inputData,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  process_data_08003158(inputData + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "process_and_return_08002ef2",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "decode_and_execute_08002efe",
            "code": "\nvoid decode_and_execute_08002efe(int input_buffer,undefined4 arg1,undefined2 arg2,undefined4 arg3)\n\n{\n  decode_process(input_buffer + 0x40,arg1,arg2,arg3,arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "decode_and_execute_08002efe",
                "param_1": "input_buffer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "execute_decoding_process_0800319e": "decode_process"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "decode_and_process_data_08002f0a",
            "code": "\nvoid decode_and_process_data_08002f0a(int input_offset)\n\n{\n  decode_and_process_data_08002f0a(input_offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "decode_and_process_data_08002f0a",
                "param_1": "input_offset",
                "decode_and_process_data_0800325a": "decode_and_process_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "process_data_and_shift_08002f14",
            "code": "\nvoid process_data_and_shift_08002f14(int data)\n\n{\n  process_data(data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "process_data_and_shift_08002f14",
                "param_1": "data",
                "process_data_080032a2": "process_data"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_code_function_08002f1e",
            "code": "\nvoid executeCodeFunction_08002f1e(int inputParameter)\n\n{\n  (**(code **)**(undefined4 **)(inputParameter + 0xc0))();\n  None;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_code_function_08002f1e",
                "param_1": "inputParameter",
                "return": "None"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 updatedValue;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    updatedValue = param3;\n    if ((param2 != 0xf5) && (updatedValue = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = updatedValue;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_dat_08002f84",
            "code": "\nvoid updateDAT_08002f84(undefined4 param1,int status,undefined4 newData)\n\n{\n  if (status == 0xff) {\n    DAT_200005e8 = newData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_dat_08002f84",
                "param_1": "param1",
                "param_2": "status",
                "param_3": "newData"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "FUNC_08002f94",
            "code": "\nvoid FUNC_08002f94(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  DAT_200005d0 = param_3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "FUNC_08002f94"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "extract_memory_value_08002fa0",
            "code": "\nundefined extractMemoryValue_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "extract_memory_value_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_value_08002fa8",
            "code": "\nvoid updateCharacterValue_08002fa8(int characterPointer,int offset,undefined newCharacterValue)\n\n{\n  if (*(char *)(characterPointer + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(characterPointer + offset + 0xcc) = newCharacterValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_value_08002fa8",
                "param_1": "characterPointer",
                "param_2": "offset",
                "param_3": "newCharacterValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_memory_value_08002fba",
            "code": "\nundefined4 getMemoryValue_08002fba(int address,int offset)\n\n{\n  return *(undefined4 *)(address + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_memory_value_08002fba",
                "param_1": "address",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "store_value_in_array_08002fc2",
            "code": "\nvoid storeValueInArray_08002fc2(int baseAddress,int index,undefined4 valueToStore)\n\n{\n  *(undefined4 *)(baseAddress + (index + 0x42) * 4) = valueToStore;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "store_value_in_array_08002fc2",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "valueToStore"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "process_data_loop_08002fca",
            "code": "\nvoid process_data_loop_08002fca(undefined4 ptr_1,undefined4 ptr_2,int loop_count,undefined4 ptr_4,\n                 undefined4 ptr_5)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < loop_count; index = index + 1 & 0xff) {\n    FUNC_08008ac4(ptr_5);\n    process_data_08008a24(ptr_2,1);\n    FUNC_08008ac4(ptr_4);\n    process_data_08008a24(ptr_2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "process_data_loop_08002fca",
                "param_1": "ptr_1",
                "param_2": "ptr_2",
                "param_3": "loop_count",
                "param_4": "ptr_4",
                "param_5": "ptr_5",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_data_08003002",
            "code": "\nvoid processData_08003002(int data)\n\n{\n  if (*(char *)(data + 0x1f8) != '\\0') {\n    return;\n  }\n  processData_08003002A(0xd,1);\n  processData_08003002Loop(data,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  processData_08003002Loop(data,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "data",
                "process_data_08008990": "processDataA",
                "process_data_loop_08002fca": "processDataLoop"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_and_process_serial_data_08003048",
            "code": "\nvoid initialize_and_process_serial_data_08003048(undefined4 data,undefined4 serial_port,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_hardware_serial(&DAT_20000700,serial_port,6,param_4,param_4);\n  process_data(data);\n  update_value_and_process(data,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_and_process_serial_data_08003048",
                "param_1": "data",
                "param_2": "serial_port",
                "initialize_hardware_serial_08008c44": "initialize_hardware_serial",
                "process_data_08003002": "process_data",
                "update_value_and_process_08002e26": "update_value_and_process"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_process_data_0800307a",
            "code": "\nvoid decode_and_process_data_0800307a(undefined4 *function_list,uint data_length,byte *data_array,uint max_iterations)\n\n{\n  uint current_data_byte;\n  uint bit_offset;\n  uint iteration_count;\n  uint array_index;\n  \n  current_data_byte = (uint)*data_array;\n  if (max_iterations == 0) {\n    max_iterations = 0xffffffff;\n  }\n  array_index = 0;\n  bit_offset = 0;\n  iteration_count = 0;\n  while ((array_index < data_length && (iteration_count < max_iterations))) {\n    (***(code ***)(undefined4 *)*function_list)\n              ((undefined4 *)*function_list,((uint)data_array[array_index] << (bit_offset & 0xff) | current_data_byte) & 0x7f);\n    current_data_byte = (int)(uint)data_array[array_index] >> (7 - bit_offset & 0xff) & 0xff;\n    bit_offset = bit_offset + 1;\n    while ((iteration_count = iteration_count + 1, 6 < bit_offset && (iteration_count < max_iterations))) {\n      (***(code ***)(undefined4 *)*function_list)((undefined4 *)*function_list,current_data_byte & 0x7f);\n      current_data_byte = current_data_byte >> 7;\n      bit_offset = bit_offset - 7;\n    }\n    array_index = array_index + 1;\n  }\n  if ((bit_offset != 0) && (iteration_count < max_iterations)) {\n    (***(code ***)(undefined4 *)*function_list)((undefined4 *)*function_list,(1 << (bit_offset & 0xff)) - 1U & current_data_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_process_data_0800307a",
                "param_1": "function_list",
                "param_2": "data_length",
                "param_3": "data_array",
                "param_4": "max_iterations",
                "uVar1": "current_data_byte",
                "uVar2": "bit_offset",
                "uVar3": "iteration_count",
                "uVar4": "array_index"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_data_08003106",
            "code": "\nvoid process_data_08003106(undefined4 *data_pointer,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined4 *function_pointer;\n  \n  function_pointer = (undefined4 *)*data_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0x6f);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,value_1);\n    decode_and_process_data_08003106(data_pointer,value_2,value_3,value_2);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "data_pointer",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "puVar1": "function_pointer",
                "decode_and_process_data_0800307a": "decode_and_process_data"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_param_0800314e",
            "code": "\nvoid initializeParam_0800314e(undefined4 *paramPtr)\n\n{\n  *paramPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_param_0800314e",
                "param_1": "paramPtr"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_pointer_08003154",
            "code": "\nvoid copy_value_to_pointer_08003154(undefined4 *destination,undefined4 source)\n\n{\n  *destination = source;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid processData_08003158(undefined4 *dataPointer,uint size,ushort value)\n\n{\n  undefined4 *functionPointer;\n  ushort newValue;\n  \n  functionPointer = (undefined4 *)*dataPointer;\n  if (functionPointer != (undefined4 *)0x0) {\n    newValue = value;\n    if (((int)size < 0x10) && (value < 0x4000)) {\n      (**(code **)*functionPointer)(functionPointer,size | 0xe0);\n      decode_and_process_data_0800307a(dataPointer,2,&newValue);\n    }\n    else {\n      process_data_08003106(dataPointer,size,2,&newValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "value",
                "puVar1": "functionPointer",
                "local_a": "newValue"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_decoding_process_0800319e",
            "code": "\nvoid executeDecodingProcess_0800319e(undefined4 *dataPointer,uint flags,undefined2 dataSegment)\n\n{\n  undefined4 *functionPointer;\n  undefined2 decodedData;\n  \n  functionPointer = (undefined4 *)*dataPointer;\n  if (functionPointer != (undefined4 *)0x0) {\n    decodedData = dataSegment;\n    (**(code **)*functionPointer)(functionPointer,flags & 0xf | 0x90);\n    decode_and_process_data_0800307a(dataPointer,2,&decodedData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_decoding_process_0800319e",
                "param_1": "dataPointer",
                "param_2": "flags",
                "param_3": "dataSegment",
                "puVar1": "functionPointer",
                "local_a": "decodedData"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid process_data_080031ce(undefined4 *data_ptr,undefined4 param_a,undefined4 param_b,uint length,int offset\n                 )\n\n{\n  undefined4 *func_ptr;\n  uint index;\n  \n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    (**(code **)*func_ptr)(func_ptr,0xf0,param_b,*(code **)*func_ptr,length);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_a);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_b);\n    for (index = 0; index < length; index = index + 1) {\n      decode_and_process_data_080031ce_0800307a(data_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "param_a",
                "param_3": "param_b",
                "param_4": "length",
                "param_5": "offset",
                "puVar1": "func_ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 argument1,undefined4 argument2)\n\n{\n  undefined4 *functionAddress;\n  \n  functionAddress = (undefined4 *)*functionPointer;\n  if (functionAddress != (undefined4 *)0x0) {\n    (**(code **)*functionAddress)(functionAddress,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,argument1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,argument2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "argument1",
                "param_3": "argument2",
                "puVar1": "functionAddress"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "decode_and_process_data_0800325a",
            "code": "\nvoid decode_and_process_data_0800325a(undefined4 *data_ptr,undefined4 size,uint count,int offset)\n\n{\n  undefined4 *function_ptr;\n  uint index;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,size);\n    for (index = 0; index < count; index = index + 1) {\n      decode_and_process_data_0800325a_0800307a(data_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "decode_and_process_data_0800325a",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "count",
                "param_4": "offset",
                "puVar1": "function_ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "process_data_080032a2",
            "code": "\nvoid process_data_080032a2(undefined4 input_buffer,undefined4 string,undefined4 length,undefined4 output_buffer)\n\n{\n  undefined4 string_length;\n  \n  string_length = get_string_length_08000178(string);\n  decode_and_process_data_080032a2_0800325a(input_buffer,0x71,string_length,string,output_buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "process_data_080032a2",
                "param_1": "input_buffer",
                "param_2": "string",
                "param_3": "length",
                "param_4": "output_buffer",
                "uVar1": "string_length"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_data_structure_080032bc",
            "code": "\nvoid initializeDataStructure_080032bc(int dataStructureAddress,int paramValue,undefined4 paramThree)\n\n{\n  *(int *)(dataStructureAddress + 4) = paramValue;\n  *(undefined4 *)(dataStructureAddress + 8) = paramThree;\n  *(undefined *)(dataStructureAddress + 0xc) = 0;\n  *(undefined *)(dataStructureAddress + 0xd) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x10) = 0;\n  *(undefined *)(dataStructureAddress + 0x14) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x18) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x1c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x20) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x24) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x28) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x2c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x30) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x34) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x38) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x3c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x40) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x44) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x48) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x4c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x50) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x54) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x58) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x5c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x60) = 0;\n  *(undefined4 *)(dataStructureAddress + 100) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x68) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x6c) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x70) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x74) = 0;\n  *(undefined4 *)(dataStructureAddress + 0x78) = 0;\n  *(bool *)dataStructureAddress = paramValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "dataStructureAddress",
                "param_2": "paramValue",
                "param_3": "paramThree"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "set_param_value_08003306",
            "code": "\nvoid setParamValue_08003306(int objAddress,uint paramValue,undefined4 value1,undefined4 value2)\n\n{\n  if (paramValue == 0xd0) {\n    *(undefined4 *)(objAddress + 0x58) = value1;\n    *(undefined4 *)(objAddress + 0x28) = value2;\n    return;\n  }\n  if (0xd0 < paramValue) {\n    if (paramValue == 0xf4) {\n      *(undefined4 *)(objAddress + 0x5c) = value1;\n      *(undefined4 *)(objAddress + 0x2c) = value2;\n      return;\n    }\n    if (paramValue == 0xf5) {\n      *(undefined4 *)(objAddress + 0x60) = value1;\n      *(undefined4 *)(objAddress + 0x30) = value2;\n    }\n    else if (paramValue == 0xe0) {\n      *(undefined4 *)(objAddress + 0x4c) = value1;\n      *(undefined4 *)(objAddress + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (paramValue == 0x90) {\n    *(undefined4 *)(objAddress + 0x50) = value1;\n    *(undefined4 *)(objAddress + 0x20) = value2;\n    return;\n  }\n  if (paramValue == 0xc0) {\n    *(undefined4 *)(objAddress + 0x54) = value1;\n    *(undefined4 *)(objAddress + 0x24) = value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "set_param_value_08003306",
                "param_1": "objAddress",
                "param_2": "paramValue",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "set_param_values_08003346",
            "code": "\nvoid setParamValues_08003346(int objectAddress,int valueToCheck,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (valueToCheck == 0x79) {\n    *(undefined4 *)(objectAddress + 0x70) = newValue1;\n    *(undefined4 *)(objectAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "set_param_values_08003346",
                "param_1": "objectAddress",
                "param_2": "valueToCheck",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_data_08003350",
            "code": "\nvoid updateData_08003350(int ptrDataStruct,int dataValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (dataValue == 0xf9) {\n    *(undefined4 *)(ptrDataStruct + 0x74) = newValue1;\n    *(undefined4 *)(ptrDataStruct + 0x38) = newValue2;\n    return;\n  }\n  if (dataValue != 0xff) {\n    return;\n  }\n  *(undefined4 *)(ptrDataStruct + 0x78) = newValue1;\n  *(undefined4 *)(ptrDataStruct + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_data_08003350",
                "param_1": "ptrDataStruct",
                "param_2": "dataValue",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_values_08003366",
            "code": "\nvoid updateValues_08003366(int baseAddress,int value,undefined4 newParam3,undefined4 newParam4)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newParam3;\n    *(undefined4 *)(baseAddress + 0x40) = newParam4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_values_08003366",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newParam3",
                "param_4": "newParam4"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "initialize_data_08003370",
            "code": "\nvoid initializeData_08003370(int baseAddress,undefined4 param2,undefined4 valueA,undefined4 valueB)\n\n{\n  *(undefined4 *)(baseAddress + 0x6c) = valueA;\n  *(undefined4 *)(baseAddress + 0x44) = valueB;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "initialize_data_08003370",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "valueA",
                "param_4": "valueB"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_memory_08003376",
            "code": "\nvoid updateMemory_08003376(undefined *memoryPtr,undefined newValue,uint index)\n\n{\n  bool isValidIndex;\n  \n  if (index < *(uint *)(memoryPtr + 8)) {\n    isValidIndex = false;\n  }\n  else {\n    isValidIndex = true;\n    if (*(code **)(memoryPtr + 100) != (code *)0x0) {\n      *memoryPtr = 1;\n      (**(code **)(memoryPtr + 100))(*(undefined4 *)(memoryPtr + 0x3c));\n      if (index < *(uint *)(memoryPtr + 8)) {\n        isValidIndex = false;\n      }\n      else {\n        isValidIndex = true;\n      }\n    }\n  }\n  if (!isValidIndex) {\n    *(undefined *)(*(int *)(memoryPtr + 4) + index) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_memory_08003376",
                "param_1": "memoryPtr",
                "param_2": "newValue",
                "param_3": "index",
                "bVar1": "isValidIndex"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 src,uint numElements,int dest)\n\n{\n  byte currentByte;\n  int destIndex;\n  uint srcIndex;\n  \n  destIndex = 0;\n  for (srcIndex = 0; srcIndex < numElements; srcIndex = srcIndex + 2) {\n    currentByte = *(byte *)(dest + srcIndex);\n    *(byte *)(dest + destIndex) = currentByte;\n    *(byte *)(dest + destIndex) = *(char *)(dest + srcIndex + 1) << 7 | currentByte;\n    destIndex = destIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "src",
                "param_2": "numElements",
                "param_3": "dest",
                "bVar1": "currentByte",
                "iVar2": "destIndex",
                "uVar3": "srcIndex"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_data_080033cc",
            "code": "\nvoid process_data_080033cc(int data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  char firstChar;\n  int result;\n  char *ptr;\n  \n  ptr = *(char **)(data + 4);\n  firstChar = *ptr;\n  if (firstChar == 'q') {\n    if (*(int *)(data + 0x68) != 0) {\n      result = copyShiftBits(data,*(int *)(data + 0x18) + -1,ptr + 1,ptr,arg3);\n      updateMemory(data,0,result + 1);\n      (**(code **)(data + 0x68))(*(undefined4 *)(data + 0x40),*(int *)(data + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(data + 0x70) != (code *)0x0) {\n      if (*(uint *)(data + 0x18) < 3) {\n        (**(code **)(data + 0x70))(*(undefined4 *)(data + 0x34),0,0);\n        return;\n      }\n      result = copyShiftBits(data,*(uint *)(data + 0x18) - 3,ptr + 3,ptr,arg3);\n      updateMemory(data,0,result + 3);\n      result = *(int *)(data + 4);\n      (**(code **)(data + 0x70))\n                (*(undefined4 *)(data + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(code **)(data + 0x6c) != (code *)0x0) {\n    (**(code **)(data + 0x6c))\n              (*(undefined4 *)(data + 0x44),firstChar,*(int *)(data + 0x18) + -1,ptr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "cVar1": "firstChar",
                "iVar2": "result",
                "pcVar3": "ptr",
                "copy_and_shift_bits_080033a8": "copyShiftBits",
                "update_memory_08003376": "updateMemory"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_memory_0800344a",
            "code": "\nvoid initializeMemory_0800344a(int memoryAddress)\n\n{\n  uint iterator;\n  \n  *(undefined4 *)(memoryAddress + 0x10) = 0;\n  *(undefined *)(memoryAddress + 0xc) = 0;\n  *(undefined *)(memoryAddress + 0xd) = 0;\n  for (iterator = 0; iterator < *(uint *)(memoryAddress + 8); iterator = iterator + 1) {\n    *(undefined *)(*(int *)(memoryAddress + 4) + iterator) = 0;\n  }\n  *(undefined *)(memoryAddress + 0x14) = 0;\n  *(undefined4 *)(memoryAddress + 0x18) = 0;\n  if (*(code **)(memoryAddress + 0x78) != (code *)0x0) {\n    (**(code **)(memoryAddress + 0x78))(*(undefined4 *)(memoryAddress + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_memory_0800344a",
                "param_1": "memoryAddress",
                "uVar1": "iterator"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_data_08003474",
            "code": "\nvoid process_data_08003474(int input,uint value)\n\n{\n  byte byteValue;\n  \n  if (*(char *)(input + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      update_memory_08003376(input,value,*(undefined4 *)(input + 0x18));\n      *(int *)(input + 0x18) = *(int *)(input + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(input + 0x14) = 0;\n    process_data_08003474_080033cc();\n    return;\n  }\n  if ((*(int *)(input + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(input + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(input + 0x14) = 1;\n      *(undefined4 *)(input + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(input + 0x10) = 2;\n        *(char *)(input + 0xc) = (char)value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(input + 0x10) = 1;\n      *(char *)(input + 0xc) = (char)value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          initialize_memory_0800344a(input);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(input + 0x74) != (code *)0x0) {\n      (**(code **)(input + 0x74))(*(undefined4 *)(input + 0x38));\n    }\n  }\n  else {\n    *(int *)(input + 0x10) = *(int *)(input + 0x10) + -1;\n    update_memory_08003376();\n    if ((*(int *)(input + 0x10) == 0) && (byteValue = *(byte *)(input + 0xc), byteValue != 0)) {\n      if (byteValue == 0xd0) {\n        if (*(code **)(input + 0x58) != (code *)0x0) {\n          (**(code **)(input + 0x58))\n                    (*(undefined4 *)(input + 0x28),*(undefined *)(input + 0xd),\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteValue < 0xd1) {\n        if (byteValue == 0x90) {\n          if (*(code **)(input + 0x50) != (code *)0x0) {\n            (**(code **)(input + 0x50))\n                      (*(undefined4 *)(input + 0x20),*(undefined *)(input + 0xd),\n                       (uint)(*(byte **)(input + 4))[1] + (uint)**(byte **)(input + 4) * 0x80);\n          }\n        }\n        else if ((byteValue == 0xc0) && (*(code **)(input + 0x54) != (code *)0x0)) {\n          (**(code **)(input + 0x54))\n                    (*(undefined4 *)(input + 0x24),*(undefined *)(input + 0xd),\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteValue == 0xf4) {\n        if (*(code **)(input + 0x5c) != (code *)0x0) {\n          (**(code **)(input + 0x5c))\n                    (*(undefined4 *)(input + 0x2c),(*(undefined **)(input + 4))[1],\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if (byteValue == 0xf5) {\n        if (*(code **)(input + 0x60) != (code *)0x0) {\n          (**(code **)(input + 0x60))\n                    (*(undefined4 *)(input + 0x30),(*(undefined **)(input + 4))[1],\n                     **(undefined **)(input + 4));\n        }\n      }\n      else if ((byteValue == 0xe0) && (*(code **)(input + 0x4c) != (code *)0x0)) {\n        (**(code **)(input + 0x4c))\n                  (*(undefined4 *)(input + 0x1c),*(undefined *)(input + 0xd),\n                   (uint)(*(byte **)(input + 4))[1] + (uint)**(byte **)(input + 4) * 0x80);\n      }\n      *(undefined *)(input + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "input",
                "param_2": "value",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_and_configure_device_080035b8",
            "code": "\nvoid initialize_and_configure_device_080035b8(void)\n\n{\n  int result;\n  uint uVar2;\n  undefined4 device_mode [2];\n  undefined4 device_memory;\n  undefined4 controller_mode;\n  undefined4 controller_version;\n  undefined4 controller_option;\n  undefined4 controller_threshold;\n  undefined4 controller_power;\n  undefined4 data_buffer [4];\n  undefined4 timeout;\n  undefined4 memory_size;\n  undefined4 retry_limit;\n  undefined4 status;\n  undefined4 memory_address;\n  \n  data_buffer[0] = 2;\n  timeout = 1;\n  memory_size = 0x10;\n  retry_limit = 2;\n  status = 0;\n  memory_address = 0x380000;\n  result = process_data_08005460(data_buffer);\n  if (result != 0) {\n    continue_infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  controller_mode = 0xf;\n  controller_version = 2;\n  controller_option = 0;\n  controller_threshold = 0x400;\n  controller_power = 0;\n  result = initialize_controller_080058ac(&controller_mode);\n  if (result != 0) {\n    continue_infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  device_mode[0] = 2;\n  device_memory = 0x8000;\n  result = configure_device_08005aa4(device_mode);\n  if (result != 0) {\n    continue_infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  uVar2 = get_global_data_08005a1c();\n  set_input_values_08003fd8(uVar2 / 1000);\n  update_status_register_08004024(4);\n  update_memory_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_and_configure_device_080035b8",
                "local_30": "data_buffer",
                "local_20": "timeout",
                "local_1c": "memory_size",
                "local_14": "retry_limit",
                "local_10": "status",
                "local_c": "memory_address",
                "iVar1": "result",
                "local_44": "controller_mode",
                "local_40": "controller_version",
                "local_3c": "controller_option",
                "local_38": "controller_threshold",
                "local_34": "controller_power",
                "local_54": "device_mode",
                "local_4c": "device_memory"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_configuration_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  process_data_continuously_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_system_and_device_080036a2",
            "code": "\nvoid initialize_system_and_device_080036a2(void)\n\n{\n  initialize_system_and_device_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_system_and_device_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_parameter_080036ac",
            "code": "\nuint checkParameter_080036ac(int input)\n\n{\n  uint result;\n  \n  if ((uint)(input << 0x18) >> 0x1c < 5) {\n    for (result = 0; (result < 0x3c && (input != (char)(&DAT_0800a908)[result])); result = result + 1)\n    {\n    }\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_parameter_080036ac",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "initialize_memory_080036d8",
            "code": "\nundefined4 initializeMemory_080036d8(uint inputValue)\n\n{\n  int inputResult;\n  \n  inputResult = set_input_values_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (inputResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_memory_08003f30(0xffffffff,inputValue,0);\n  DAT_20000010 = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "initialize_memory_080036d8",
                "param_1": "inputValue",
                "iVar1": "inputResult"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_system_08003724",
            "code": "\n\n\nundefined4 initialize_system_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_control_register(3);\n  initialize_memory(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_system_08003724",
                "update_control_register_08003f0c": "update_control_register",
                "initialize_memory_080036d8": "initialize_memory"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_sum_08003748",
            "code": "\nvoid updateSum_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_sum_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_value_08003760",
            "code": "\nundefined4 get_data_value_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_return_value_0800376c",
            "code": "\nundefined4 calculateReturnValue_0800376c(uint **parameters,uint value)\n\n{\n  int dataValue1;\n  uint calculatedValue;\n  int dataValue2;\n  undefined4 returnValue;\n  uint *pointer;\n  uint dataValue3;\n  uint counter;\n  \n  counter = 0;\n  dataValue1 = get_data_value_08003760();\n  dataValue3 = DAT_20000018;\n  pointer = *parameters;\n  if ((pointer[2] & 0x100) == 0) {\n    if (((pointer[1] & 0x100) == 0) && ((pointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**parameters & 2) != 0) goto LAB_0800387e;\n      } while ((value == 0xffffffff) ||\n              ((value != 0 && (dataValue2 = get_data_value_08003760(), (uint)(dataValue2 - dataValue1) <= value))));\n      parameters[10] = (uint *)((uint)parameters[10] | 4);\n      *(undefined *)(parameters + 9) = 0;\n      returnValue = 3;\n    }\n    else {\n      calculatedValue = calculate_value_08005bb8(2);\n      pointer = *parameters;\n      if (((pointer[4] & 0x24924924) == 0) && ((pointer[3] & 0x924924) == 0)) {\n        if ((pointer[4] & 0x12492492) == 0) {\n          if ((pointer[3] & 0x492492) == 0) {\n            dataValue2 = 0x14;\n          }\n          else {\n            dataValue2 = 0x29;\n          }\n        }\n        else {\n          dataValue2 = 0x29;\n        }\n      }\n      else if (((pointer[4] & 0x12492492) == 0) && ((pointer[3] & 0x492492) == 0)) {\n        dataValue2 = 0x54;\n      }\n      else if ((pointer[4] & 0x249249) == 0) {\n        if ((pointer[3] & 0x249249) == 0) {\n          dataValue2 = 0x54;\n        }\n        else {\n          dataValue2 = 0xfc;\n        }\n      }\n      else {\n        dataValue2 = 0xfc;\n      }\n      dataValue3 = (dataValue3 / calculatedValue) * dataValue2;\n      for (; counter <= dataValue3 && dataValue3 - counter != 0; counter = counter + 1) {\n        if ((value != 0xffffffff) &&\n           ((value == 0 || (dataValue2 = get_data_value_08003760(), value < (uint)(dataValue2 - dataValue1))))) {\n          parameters[10] = (uint *)((uint)parameters[10] | 4);\n          *(undefined *)(parameters + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **parameters = 0xffffffed;\n      parameters[10] = (uint *)((uint)parameters[10] | 0x200);\n      if (((*parameters)[2] & 0xe0000) == 0xe0000) {\n        if (parameters[3] == (uint *)0x0) {\n          parameters[10] = (uint *)((uint)parameters[10] & 0xfffffeff);\n          if (((uint)parameters[10] & 0x1000) == 0) {\n            parameters[10] = (uint *)((uint)parameters[10] | 1);\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n  }\n  else {\n    parameters[10] = (uint *)((uint)parameters[10] | 0x20);\n    *(undefined *)(parameters + 9) = 0;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_return_value_0800376c",
                "param_1": "parameters",
                "param_2": "value",
                "iVar1": "dataValue1",
                "uVar2": "calculatedValue",
                "iVar3": "dataValue2",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "uVar6": "dataValue3",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 get_offset_value_080038dc(int *input_array)\n\n{\n  return *(undefined4 *)(*input_array + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "input_array"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_registers_080038e4",
            "code": "\nundefined4 updateRegisters_080038e4(int *registerArray,uint *valuesArray)\n\n{\n  undefined4 returnValue;\n  uint value;\n  int counter;\n  \n  if (*(char *)(registerArray + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(registerArray + 9) = 1;\n    value = valuesArray[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*registerArray + 0x34) =\n           *valuesArray << (value & 0xff) | *(uint *)(*registerArray + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*registerArray + 0x30) =\n           *valuesArray << (value & 0xff) | *(uint *)(*registerArray + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*registerArray + 0x2c) =\n           *valuesArray << (value & 0xff) | *(uint *)(*registerArray + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *valuesArray;\n    if (value < 10) {\n      *(uint *)(*registerArray + 0x10) =\n           valuesArray[2] << (value * 3 & 0xff) |\n           *(uint *)(*registerArray + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*registerArray + 0xc) =\n           valuesArray[2] << (value & 0xff) | *(uint *)(*registerArray + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*valuesArray - 0x10 < 2) {\n      if (*registerArray == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*valuesArray == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        registerArray[10] = registerArray[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(registerArray + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_registers_080038e4",
                "param_1": "registerArray",
                "param_2": "valuesArray",
                "uVar1": "returnValue",
                "uVar2": "value",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_pointer_from_offset_08003a1c",
            "code": "\nundefined4 getPointerFromOffset_08003a1c(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_pointer_from_offset_08003a1c",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "enable_data_processing_08003a20",
            "code": "\nundefined4 enableDataProcessing_08003a20(int *dataPointer,undefined4 dataValue)\n\n{\n  int currentDataValue;\n  undefined4 returnValue;\n  int dataValueAddress;\n  uint loopCounter;\n  \n  dataValueAddress = *dataPointer;\n  if ((*(uint *)(dataValueAddress + 8) & 1) == 0) {\n    *(uint *)(dataValueAddress + 8) = *(uint *)(dataValueAddress + 8) | 1;\n    for (loopCounter = DAT_20000018 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    dataValueAddress = get_data_value_08003760(dataPointer,dataValue,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      currentDataValue = get_data_value_08003760();\n    } while ((uint)(currentDataValue - dataValueAddress) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "enable_data_processing_08003a20",
                "param_1": "dataPointer",
                "param_2": "dataValue",
                "iVar1": "currentDataValue",
                "iVar3": "dataValueAddress",
                "uVar2": "returnValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "update_data_processing_08003aa0",
            "code": "\n\n\nint updateDataProcessing_08003aa0(int *inputArray)\n\n{\n  int result;\n  undefined4 *dataPtr;\n  int address;\n  \n  if (*(char *)(inputArray + 9) != '\\x01') {\n    *(undefined *)(inputArray + 9) = 1;\n    result = enable_data_processing_08003a20();\n    if (result == 0) {\n      inputArray[10] = inputArray[10] & 0xfffffcfeU | 0x100;\n      dataPtr = (undefined4 *)*inputArray;\n      if ((dataPtr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        inputArray[10] = inputArray[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          inputArray[10] = inputArray[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        inputArray[10] = inputArray[10] & 0xffefffff;\n        if ((dataPtr[1] & 0x400) != 0) {\n          inputArray[10] = inputArray[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((inputArray[10] & 0x1000U) == 0) {\n        inputArray[0xb] = 0;\n      }\n      else {\n        inputArray[0xb] = inputArray[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(inputArray + 9) = 0;\n      *dataPtr = 0xfffffffd;\n      address = *inputArray;\n      if (((*(uint *)(address + 8) & 0xe0000) == 0xe0000) &&\n         ((address != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(address + 8) = *(uint *)(address + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(inputArray + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "update_data_processing_08003aa0",
                "param_1": "inputArray",
                "iVar1": "result",
                "puVar2": "dataPtr",
                "iVar3": "address"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_data_flags_08003b8c",
            "code": "\nundefined4 updateDataFlags_08003b8c(int *param_1)\n\n{\n  int oldDataValue;\n  int currentDataPtr;\n  \n  currentDataPtr = *param_1;\n  if ((*(uint *)(currentDataPtr + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(currentDataPtr + 8) = *(uint *)(currentDataPtr + 8) & 0xfffffffe;\n  currentDataPtr = get_data_value_08003760();\n  do {\n    if ((*(uint *)(*param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    oldDataValue = get_data_value_08003760();\n  } while ((uint)(oldDataValue - currentDataPtr) < 3);\n  param_1[10] = param_1[10] | 0x10;\n  param_1[0xb] = param_1[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_data_flags_08003b8c",
                "iVar1": "oldDataValue",
                "iVar2": "currentDataPtr"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "validate_and_update_data_08003bd8",
            "code": "\nundefined4 validate_and_update_data_08003bd8(int *param_arr)\n\n{\n  int update_result;\n  uint combined_flags;\n  uint base_value;\n  \n  if (param_arr == (int *)0x0) {\n    return 1;\n  }\n  if (param_arr[10] == 0) {\n    param_arr[11] = 0;\n    *(undefined *)(param_arr + 9) = 0;\n    update_memory();\n  }\n  update_result = update_data_flags(param_arr);\n  if (((param_arr[10] & 0x10U) == 0) && (update_result == 0)) {\n    param_arr[10] = param_arr[10] & 0xffffeefdU | 2;\n    combined_flags = param_arr[1] | param_arr[7] | param_arr[3] << 1;\n    if (param_arr[2] == 0x100) {\n      base_value = 0x100;\n    }\n    else {\n      base_value = 0;\n      if (param_arr[2] == 1) {\n        base_value = 0x100;\n      }\n    }\n    if (param_arr[5] == 1) {\n      if (param_arr[3] == 0) {\n        base_value = base_value | (param_arr[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        param_arr[10] = param_arr[10] | 0x20;\n        param_arr[11] = param_arr[11] | 1;\n      }\n    }\n    *(uint *)(*param_arr + 4) = base_value | *(uint *)(*param_arr + 4) & 0xffff16ff;\n    *(uint *)(*param_arr + 8) = *(uint *)(*param_arr + 8) & 0xffe1f7fd | combined_flags;\n    if ((param_arr[2] == 0x100) || (param_arr[2] == 1)) {\n      base_value = (param_arr[4] + -1) * 0x100000;\n    }\n    else {\n      base_value = 0;\n    }\n    *(uint *)(*param_arr + 0x2c) = base_value | *(uint *)(*param_arr + 0x2c) & 0xff0fffff;\n    if (combined_flags != (*(uint *)(*param_arr + 8) & 0xff1f0efe)) {\n      param_arr[10] = param_arr[10] & 0xffffffedU | 0x10;\n      param_arr[11] = param_arr[11] | 1;\n      return 1;\n    }\n    param_arr[11] = 0;\n    param_arr[10] = param_arr[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  param_arr[10] = param_arr[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "validate_and_update_data_08003bd8",
                "param_1": "param_arr",
                "iVar1": "update_result",
                "uVar2": "combined_flags",
                "uVar3": "base_value",
                "update_memory_08006ca8": "update_memory",
                "update_data_flags_08003b8c": "update_data_flags",
                "param_1[10]": "param_arr[10]",
                "param_1[0xb]": "param_arr[11]",
                "param_1[1]": "param_arr[1]",
                "param_1[7]": "param_arr[7]",
                "param_1[3]": "param_arr[3]",
                "param_1[2]": "param_arr[2]",
                "param_1[5]": "param_arr[5]",
                "param_1[6]": "param_arr[6]",
                "param_1[4]": "param_arr[4]"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "update_data_flags_08003ce8",
            "code": "\nint updateDataFlags_08003ce8(int *dataArray)\n\n{\n  int result;\n  \n  if (dataArray == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    dataArray[10] = dataArray[10] | 2;\n    result = update_data_flags_08003b8c();\n    if (result == 0) {\n      *(uint32 *)*dataArray = 0xffffffe0;\n      *(uint *)(*dataArray + 4) = *(uint *)(*dataArray + 4) & 0xff3f0000;\n      *(uint *)(*dataArray + 8) = *(uint *)(*dataArray + 8) & 0xff0106f0;\n      *(uint *)(*dataArray + 0xc) = *(uint *)(*dataArray + 0xc) & 0xff000000;\n      *(uint *)(*dataArray + 0x10) = *(uint *)(*dataArray + 0x10) & 0xc0000000;\n      *(uint *)(*dataArray + 0x14) = *(uint *)(*dataArray + 0x14) & 0xfffff000;\n      *(uint *)(*dataArray + 0x18) = *(uint *)(*dataArray + 0x18) & 0xfffff000;\n      *(uint *)(*dataArray + 0x1c) = *(uint *)(*dataArray + 0x1c) & 0xfffff000;\n      *(uint *)(*dataArray + 0x20) = *(uint *)(*dataArray + 0x20) & 0xfffff000;\n      *(uint *)(*dataArray + 0x24) = *(uint *)(*dataArray + 0x24) & 0xfffff000;\n      *(uint *)(*dataArray + 0x28) = *(uint *)(*dataArray + 0x28) & 0xfffff000;\n      *(uint *)(*dataArray + 0x2c) = *(uint *)(*dataArray + 0x2c) & 0xff000000;\n      *(uint *)(*dataArray + 0x2c) = *(uint *)(*dataArray + 0x2c) & 0xff000000;\n      *(uint *)(*dataArray + 0x30) = *(uint *)(*dataArray + 0x30) & 0xc0000000;\n      *(uint *)(*dataArray + 0x34) = *(uint *)(*dataArray + 0x34) & 0xc0000000;\n      *(uint *)(*dataArray + 0x38) = *(uint *)(*dataArray + 0x38) & 0xffc00000;\n      *(uint *)(*dataArray + 0x38) = *(uint *)(*dataArray + 0x38) & 0xffc00000;\n      update_permissions_08006d24(dataArray);\n      dataArray[0xb] = 0;\n      dataArray[10] = 0;\n    }\n    *(undefined *)(dataArray + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "update_data_flags_08003ce8",
                "param_1": "dataArray",
                "iVar1": "result",
                "undefined4": "uint32"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "check_and_update_data_flags_08003de4",
            "code": "\nint checkAndUpdateDataFlags_08003de4(int data_ptr)\n\n{\n  int update_status;\n  \n  if (*(char *)(data_ptr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 0x24) = 1;\n  update_status = updateDataFlags();\n  if (update_status == 0) {\n    *(uint *)(data_ptr + 0x28) = *(uint *)(data_ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data_ptr + 0x24) = 0;\n  return update_status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "check_and_update_data_flags_08003de4",
                "param_1": "data_ptr",
                "iVar1": "update_status",
                "update_data_flags_08003b8c": "updateDataFlags"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_data_08003e20",
            "code": "\nint processData_08003e20(int *data)\n\n{\n  uint constant1;\n  int result;\n  uint constant2;\n  int initialDataValue;\n  int currentDataValue;\n  int tempVar;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_data_flags_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    constant1 = DAT_20000018;\n    constant2 = calculate_value_08005bb8(2);\n    for (tempVar = constant1 / constant2 << 1; tempVar != 0; tempVar = tempVar + -1) {\n    }\n    enable_data_processing_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    initialDataValue = get_data_value_08003760();\n    while (currentDataValue = *data, (*(uint *)(currentDataValue + 8) & 8) != 0) {\n      currentDataValue = get_data_value_08003760();\n      if (10 < (uint)(currentDataValue - initialDataValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentDataValue + 8) = *(uint *)(currentDataValue + 8) | 4;\n    initialDataValue = get_data_value_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      currentDataValue = get_data_value_08003760();\n      if (10 < (uint)(currentDataValue - initialDataValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data",
                "uVar1": "constant1",
                "iVar2": "result",
                "uVar3": "constant2",
                "iVar4": "initialDataValue",
                "iVar5": "currentDataValue",
                "local_14": "tempVar"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_control_register_08003f0c",
            "code": "\n\n\nvoid updateControlRegister_08003f0c(uint value)\n\n{\n  _DAT_e000ed0c = (value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_control_register_08003f0c",
                "param_1": "value"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_memory_08003f30",
            "code": "\n\n\nvoid updateMemory_08003f30(uint address,uint data,uint mask)\n\n{\n  uint shiftAmount;\n  uint bitPosition;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  bitPosition = 7 - shiftAmount;\n  if (3 < bitPosition) {\n    bitPosition = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (data & (1 << (bitPosition & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_memory_08003f30",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "shiftAmount",
                "uVar2": "bitPosition"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_at_index_08003f94",
            "code": "\nvoid setBitAtIndex_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_and_sync_08003fb0",
            "code": "\nvoid setBitInMemoryAndSync_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    syncData(0xf);\n    syncInstructions(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_and_sync_08003fb0",
                "param_1": "bitPosition",
                "DataSynchronizationBarrier": "syncData",
                "InstructionSynchronizationBarrier": "syncInstructions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_input_values_08003fd8",
            "code": "\n\n\nundefined4 set_input_values_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_input_values_08003fd8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_to1_08004004",
            "code": "\nvoid setBitTo1_08004004(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_to1_08004004",
                "param_1": "bitPosition"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_status_register_08004024",
            "code": "\n\n\nvoid updateStatusRegister_08004024(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_status_register_08004024",
                "param_1": "status"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_08004046",
            "code": "\nvoid initialize_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_data_08004050",
            "code": "\n\n\nundefined4 initializeData_08004050(uint **data)\n\n{\n  uint *currentData;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    data[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  currentData = *data;\n  if (currentData == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentData == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentData == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentData == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentData == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentData == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (data[0xd] != (uint *)0x0) {\n    (*(code *)data[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "puVar1": "currentData"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_memory_080040e8",
            "code": "\n\n\nvoid updateMemory_080040e8(uint *memory,uint *flags)\n\n{\n  uint *pMemory;\n  uint flagMask;\n  uint flagCheck;\n  uint bitIndex;\n  uint opcode;\n  uint newValue;\n  int shiftAmount;\n  int registerIndex;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    flagMask = 1 << (bitIndex & 0xff);\n    flagCheck = *flags & flagMask;\n    if (flagMask == flagCheck) {\n      opcode = flags[1];\n      if (opcode == 0x12) {\n        newValue = flags[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newValue = flags[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_0800423a;\n          if (opcode == 1) {\n            newValue = flags[3];\n          }\n        }\n        else if (opcode == 3) {\n          newValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newValue = flags[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_0800423a:\n        if (flags[2] == 0) {\n          newValue = 4;\n        }\n        else if (flags[2] == 1) {\n          memory[4] = flagMask;\n          newValue = 8;\n        }\n        else {\n          memory[5] = flagMask;\n          newValue = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_0800423a;\n      flagMask = bitIndex;\n      pMemory = memory;\n      if (0xff < flagCheck) {\n        flagMask = bitIndex - 8;\n        pMemory = memory + 1;\n      }\n      *pMemory = *pMemory & ~(0xf << (flagMask << 2 & 0xff)) | newValue << (flagMask << 2 & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitIndex & 3) << 2;\n        if (memory == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (memory == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (memory == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (memory == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shiftAmount) | registerIndex << shiftAmount;\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~flagCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | flagCheck;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~flagCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | flagCheck;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~flagCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | flagCheck;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~flagCheck;\n        }\n        else {\n          _DAT_4001040c = flagCheck | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_memory_080040e8",
                "param_1": "memory",
                "param_2": "flags",
                "puVar1": "pMemory",
                "uVar2": "flagMask",
                "uVar3": "flagCheck",
                "uVar4": "bitIndex",
                "uVar5": "opcode",
                "uVar6": "newValue",
                "iVar7": "shiftAmount",
                "iVar8": "registerIndex"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int base_address,uint flags)\n\n{\n  if ((flags & *(uint *)(base_address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "base_address",
                "param_2": "flags"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "store_param_080042e2",
            "code": "\nvoid storeParam_080042e2(int baseAddress,int value,int flag)\n\n{\n  if (flag == 0) {\n    *(int *)(baseAddress + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "store_param_080042e2",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_process_data_080042f0",
            "code": "\n\n\nvoid update_and_process_data_080042f0(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    validate_and_handle_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_process_data_080042f0",
                "param_1": "data",
                "check_and_process_data_08009094": "validate_and_handle_data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_status_0800430c",
            "code": "\nundefined4 updateStatus_0800430c(int *data)\n\n{\n  if (*(char *)((int)data + 0x3e) == '@') {\n    if (isFlagSet == 0) {\n      *(uint *)(*data + 0x10) = input & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = input & 0xffU | 1;\n    }\n  }\n  else if (value == 0x4000) {\n    if (*(char *)((int)data + 0x3d) == '!') {\n      *(uint *)(*data + 0x10) = input & 0xfe;\n    }\n    else {\n      *(uint *)(*data + 0x10) = input & 0xffU | 1;\n    }\n  }\n  else if (isFlagSet == 0) {\n    *(uint *)(*data + 0x10) = (uint)(input << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (isFlagSet == 1) {\n    *(uint *)(*data + 0x10) = (uint)(input << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_status_0800430c",
                "param_1": "data",
                "param_1[0x14]": "isFlagSet",
                "param_1[4]": "value",
                "param_1[0x11]": "input"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "extract_value_and_assign_08004396",
            "code": "\nundefined4 extractValueAndAssign_08004396(int *inputPointer)\n\n{\n  *(uint *)(*inputPointer + 0x10) = sourceValue & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "extract_value_and_assign_08004396",
                "param_1": "inputPointer",
                "param_1[0x11]": "sourceValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "process_flags_080043a2",
            "code": "\nundefined4 processFlags_080043a2(uint **flags)\n\n{\n  uint *flagPtr;\n  \n  flagPtr = flags[0xb];\n  if ((*(char *)((int)flags + 0x3d) == '\\\"') &&\n     ((flags[0x14] != (uint *)0x0 || (*(char *)((int)flags + 0x3e) != '@')))) {\n    if ((flags[0x14] == (uint *)0x0) && (flags[4] == (uint *)0xc000)) {\n      **flags = **flags | 0x100;\n      flags[0x14] = (uint *)((int)flags[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)flags + 0x2a) == 0) {\n        **flags = **flags | 0x200;\n      }\n      else if (*(short *)((int)flags + 0x2a) == 1) {\n        if (flagPtr == (uint *)0xffff0000) {\n          **flags = **flags & 0xfffffbff;\n          flagPtr = *flags;\n          if ((flagPtr[1] & 0x800) == 0) {\n            *flagPtr = *flagPtr | 0x200;\n          }\n          else {\n            *flagPtr = *flagPtr & 0xfffffbff;\n          }\n        }\n        else if (((flagPtr == (uint *)0x4) || (flagPtr == (uint *)0x8)) ||\n                (flags[0xc] == (uint *)0x12)) {\n          **flags = **flags & 0xfffffbff;\n          **flags = **flags | 0x200;\n        }\n        else if (flags[0xb] == (uint *)0x2) {\n          **flags = **flags | 0x400;\n        }\n        else {\n          **flags = **flags & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)flags + 0x2a) == 2) {\n        if (flags[0xb] == (uint *)0x2) {\n          **flags = **flags | 0x400;\n        }\n        else {\n          **flags = **flags | 0x800;\n          **flags = **flags & 0xfffffbff;\n        }\n        flagPtr = *flags;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      else {\n        **flags = **flags | 0x400;\n        flagPtr = *flags;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      flags[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "process_flags_080043a2",
                "param_1": "flags",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_pointer_0800457c",
            "code": "\nundefined4 updateDataPointer_0800457c(int *dataPointer)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)dataPointer + 0x2a) != 0) {\n    bytePointer = (byte *)dataPointer[9];\n    dataPointer[9] = (int)(bytePointer + 1);\n    *(uint *)(*dataPointer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)dataPointer + 0x2a) = *(short *)((int)dataPointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_pointer_0800457c",
                "param_1": "dataPointer",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_data_and_decrement_counter_0800459c",
            "code": "\nundefined4 updateDataAndDecrementCounter_0800459c(int *dataArray)\n\n{\n  undefined *destinationPointer;\n  \n  if (*(short *)((int)dataArray + 0x2a) != 0) {\n    destinationPointer = (undefined *)dataArray[9];\n    dataArray[9] = (int)(destinationPointer + 1);\n    *destinationPointer = (char)*(undefined4 *)(*dataArray + 0x10);\n    *(short *)((int)dataArray + 0x2a) = *(short *)((int)dataArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_data_and_decrement_counter_0800459c",
                "param_1": "dataArray",
                "puVar1": "destinationPointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_parameters_080045c0",
            "code": "\nundefined4 calculateParameters_080045c0(uint **parameters)\n\n{\n  bool isConditionMet;\n  uint dataShift;\n  uint *dataPointer;\n  uint calculationResult;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  dataShift = extracted_data_shift_08005a28();\n  if (parameters[1] < (uint *)0x186a1) {\n    if (dataShift < 2000000) {\n      isConditionMet = true;\n    }\n    else {\n      isConditionMet = false;\n    }\n  }\n  else {\n    isConditionMet = dataShift < 4000000;\n  }\n  if (isConditionMet) {\n    return 1;\n  }\n  calculationResult = dataShift / 1000000;\n  (*parameters)[1] = calculationResult;\n  if ((uint *)0x186a0 < parameters[1]) {\n    calculationResult = (calculationResult * 300) / 1000;\n  }\n  (*parameters)[8] = calculationResult + 1;\n  dataPointer = parameters[1];\n  if (dataPointer < (uint *)0x186a1) {\n    dataShift = (dataShift - 1) / (uint)((int)dataPointer << 1) + 1 & 0xfff;\n    if (dataShift < 4) {\n      dataShift = 4;\n    }\n  }\n  else {\n    if (parameters[2] == (uint *)0x0) {\n      calculationResult = (dataShift - 1) / (uint)((int)dataPointer * 3);\n    }\n    else {\n      calculationResult = (dataShift - 1) / (uint)((int)dataPointer * 0x19);\n    }\n    if ((calculationResult + 1 & 0xfff) == 0) {\n      dataShift = 1;\n    }\n    else if (parameters[2] == (uint *)0x0) {\n      dataShift = (dataShift - 1) / (uint)((int)dataPointer * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      dataShift = (dataShift - 1) / (uint)((int)dataPointer * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = dataShift;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "param_1": "parameters",
                "bVar1": "isConditionMet",
                "uVar2": "dataShift",
                "puVar3": "dataPointer",
                "uVar4": "calculationResult"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "validate_parameters_08004728",
            "code": "\nundefined4 validateParameters_08004728(uint **inputParams,uint *param2,uint *param3,undefined2 param4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)inputParams + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        inputParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        *(undefined *)(inputParams + 0xf) = 0;\n        return 3;\n      }\n      ptr = *inputParams;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(inputParams + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x21;\n      *(undefined *)((int)inputParams + 0x3e) = 0x10;\n      result = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = param3;\n      *(undefined2 *)((int)inputParams + 0x2a) = param4;\n      inputParams[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      inputParams[0x11] = param2;\n      **inputParams = **inputParams | 0x100;\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "validate_parameters_08004728",
                "param_1": "inputParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_data_080047f4",
            "code": "\nundefined4 processData_080047f4(uint **data,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *pointer;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      pointer = *data;\n      counter = counter + -1;\n    } while ((pointer[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*pointer & 1) == 0) {\n        *pointer = *pointer | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x22;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = param2;\n      *(undefined2 *)((int)data + 0x2a) = param3;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = param1;\n      **data = **data | 0x400;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "pointer",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "validate_input_080048c8",
            "code": "\nundefined4 validate_input_080048c8(uint **ptr_to_input_structure,uint *param_2,int param_3,uint *param_4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)ptr_to_input_structure + 0x3d) == '(') {\n    if (param_2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(ptr_to_input_structure + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptr_to_input_structure + 0xf) = 1;\n      ptr = *ptr_to_input_structure;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **ptr_to_input_structure = **ptr_to_input_structure & 0xfffff7ff;\n      *(undefined *)((int)ptr_to_input_structure + 0x3d) = 0x29;\n      *(undefined *)((int)ptr_to_input_structure + 0x3e) = 0x20;\n      result = 0;\n      member_0x10 = (uint *)0x0;\n      member_0x9 = param_2;\n      *(short *)((int)ptr_to_input_structure + 0x2a) = (short)param_3;\n      member_0xb = param_4;\n      *(undefined2 *)(ptr_to_input_structure + 10) = *(undefined2 *)((int)ptr_to_input_structure + 0x2a);\n      *(undefined *)(ptr_to_input_structure + 0xf) = 0;\n      (*ptr_to_input_structure)[1] = (*ptr_to_input_structure)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "ptr_to_input_structure",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "member_0x10",
                "param_1[9]": "member_0x9",
                "param_1[0xb]": "member_0xb"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "process_params_08004954",
            "code": "\nundefined4 processParams_08004954(uint **paramList,uint *paramPtr,int paramCount,uint *paramData)\n\n{\n  undefined4 returnValue;\n  uint *flagPtr;\n  \n  if (*(char *)((int)paramList + 0x3d) == '(') {\n    if (paramPtr == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (paramCount == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(paramList + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(paramList + 0xf) = 1;\n      flagPtr = *paramList;\n      if ((*flagPtr & 1) == 0) {\n        *flagPtr = *flagPtr | 1;\n      }\n      **paramList = **paramList & 0xfffff7ff;\n      *(undefined *)((int)paramList + 0x3d) = 0x2a;\n      *(undefined *)((int)paramList + 0x3e) = 0x20;\n      returnValue = 0;\n      paramList[0x10] = (uint *)0x0;\n      paramList[9] = paramPtr;\n      *(short *)((int)paramList + 0x2a) = (short)paramCount;\n      paramList[0xb] = paramData;\n      *(undefined2 *)(paramList + 10) = *(undefined2 *)((int)paramList + 0x2a);\n      *(undefined *)(paramList + 0xf) = 0;\n      (*paramList)[1] = (*paramList)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004954": "process_params_08004954",
                "param_1": "paramList",
                "param_2": "paramPtr",
                "param_3": "paramCount",
                "param_4": "paramData",
                "uVar1": "returnValue",
                "puVar2": "flagPtr"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_080049e0",
            "code": "\nundefined4 initializeData_080049e0(uint **dataPointer)\n\n{\n  uint *currentData;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  currentData = *dataPointer;\n  if ((*currentData & 1) == 0) {\n    *currentData = *currentData | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "dataPointer",
                "puVar1": "currentData"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 processData_08004a24(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_pointer_value_08004a76",
            "code": "\nundefined4 updatePointerValue_08004a76(int *pointer)\n\n{\n  char character;\n  undefined *pointerToUndefined;\n  \n  character = *(char *)((int)pointer + 0x3d);\n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    pointerToUndefined = (undefined *)pointerToValue;\n    pointerToValue = (int)(pointerToUndefined + 1);\n    *pointerToUndefined = (char)*(undefined4 *)(*pointer + 0x10);\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n    if ((*(short *)((int)pointer + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*pointer + 4) = *(uint *)(*pointer + 4) & 0xfffffbff;\n      value = 0x22;\n      *(undefined *)((int)pointer + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_pointer_value_08004a76",
                "param_1": "pointer",
                "cVar1": "character",
                "puVar2": "pointerToUndefined",
                "param_1[9]": "pointerToValue",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_and_validate_input_08004ac2",
            "code": "\nundefined4 processAndValidateInput_08004ac2(int *inputArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedValue;\n  uint flag;\n  \n  flag = *(uint *)(*inputArray + 0x18);\n  if ((flag & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(inputArray + 6);\n  }\n  processInput(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,selectedValue,flag,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_and_validate_input_08004ac2",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedValue",
                "uVar2": "flag",
                "process_input_08007fa0": "processInput"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "initialize_configuration_08004aec",
            "code": "\nundefined4 initialize_configuration_08004aec(uint **config)\n\n{\n  if (((config[11] == (uint *)0x4) || (config[11] == (uint *)0x8)) &&\n     (*(char *)((int)config + 0x3d) == '(')) {\n    config[11] = (uint *)0xffff0000;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    config[12] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    initialize_and_execute_function_08007ff0();\n  }\n  else if (*(char *)((int)config + 0x3d) == '!') {\n    config[11] = (uint *)0xffff0000;\n    config[12] = (uint *)0x21;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*config)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "initialize_configuration_08004aec",
                "param_1": "config",
                "param_1[0xb]": "config[11]",
                "param_1[0xc]": "config[12]"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **data)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  pointer = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)data + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          pointer = data[9];\n          data[9] = (uint *)((int)pointer + 1);\n          (*data)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = data[9];\n      data[9] = (uint *)((int)pointer + 1);\n      (*data)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_command_08004ccc",
            "code": "\nundefined4 processCommand_08004ccc(uint **parameters)\n\n{\n  uint *pointer;\n  \n  pointer = parameters[0xb];\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        arrayValue3 = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        arrayValue3 = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      pointer = parameters[9];\n      parameters[9] = (uint *)((int)pointer + 1);\n      (*parameters)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_command_08004ccc",
                "param_1": "parameters",
                "puVar1": "pointer",
                "param_1[0xc]": "arrayValue3"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "sanitize_and_process_input_08004d6c",
            "code": "\nundefined4 sanitizeAndProcessInput_08004d6c(uint **inputArray)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)inputArray + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)inputArray + 0x2a) < 4) {\n      if (*(ushort *)((int)inputArray + 0x2a) - 2 < 2) {\n        if (inputArray[0xb] == (uint *)0x2) {\n          **inputArray = **inputArray | 0x400;\n        }\n        else {\n          **inputArray = **inputArray & 0xfffffbff;\n          **inputArray = **inputArray | 0x800;\n        }\n        (*inputArray)[1] = (*inputArray)[1] & 0xfffffbff;\n      }\n      else {\n        if (inputArray[0xb] == (uint *)0x2) {\n          **inputArray = **inputArray | 0x400;\n        }\n        else {\n          **inputArray = **inputArray & 0xfffffbff;\n        }\n        (*inputArray)[1] = (*inputArray)[1] & 0xfffff8ff;\n        pointer = inputArray[9];\n        inputArray[9] = (uint *)((int)pointer + 1);\n        *(char *)pointer = (char)(*inputArray)[4];\n        *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n        *(undefined *)((int)inputArray + 0x3d) = 0x20;\n        inputArray[0xc] = (uint *)0x0;\n        if (*(char *)((int)inputArray + 0x3e) == '@') {\n          *(undefined *)((int)inputArray + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)inputArray + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      pointer = inputArray[9];\n      inputArray[9] = (uint *)((int)pointer + 1);\n      *(char *)pointer = (char)(*inputArray)[4];\n      *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "sanitize_and_process_input_08004d6c",
                "param_1": "inputArray",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_param_08004e3c",
            "code": "\nundefined4 process_param_08004e3c(uint **param_list)\n\n{\n  uint *param_value;\n  \n  param_value = param_list[0xb];\n  if (*(short *)((int)param_list + 0x2a) == 3) {\n    if (((param_value == (uint *)0x4) || (param_value == (uint *)0x8)) || (param_value == (uint *)0xffff0000)) {\n      **param_list = **param_list & 0xfffffbff;\n    }\n    param_value = param_list[9];\n    param_list[9] = (uint *)((int)param_value + 1);\n    *(char *)param_value = (char)(*param_list)[4];\n    *(short *)((int)param_list + 0x2a) = *(short *)((int)param_list + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param_list + 0x2a) == 2) {\n    if (((param_value == (uint *)0x4) || (param_value == (uint *)0x8)) || (param_value == (uint *)0xffff0000)) {\n      (*param_list)[1] = (*param_list)[1] & 0xfffffcff;\n      **param_list = **param_list | 0x200;\n    }\n    else {\n      if (param_value == (uint *)0x2) {\n        **param_list = **param_list | 0x400;\n      }\n      else {\n        **param_list = **param_list & 0xfffffbff;\n      }\n      (*param_list)[1] = (*param_list)[1] & 0xfffffcff;\n    }\n    param_value = param_list[9];\n    param_list[9] = (uint *)((int)param_value + 1);\n    *(char *)param_value = (char)(*param_list)[4];\n    *(short *)((int)param_list + 0x2a) = *(short *)((int)param_list + 0x2a) + -1;\n    param_value = param_list[9];\n    param_list[9] = (uint *)((int)param_value + 1);\n    *(char *)param_value = (char)(*param_list)[4];\n    *(short *)((int)param_list + 0x2a) = *(short *)((int)param_list + 0x2a) + -1;\n    *(undefined *)((int)param_list + 0x3d) = 0x20;\n    param_list[0xc] = (uint *)0x0;\n    if (*(char *)((int)param_list + 0x3e) == '@') {\n      *(undefined *)((int)param_list + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)param_list + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    param_value = param_list[9];\n    param_list[9] = (uint *)((int)param_value + 1);\n    *(char *)param_value = (char)(*param_list)[4];\n    *(short *)((int)param_list + 0x2a) = *(short *)((int)param_list + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_param_08004e3c",
                "param_1": "param_list",
                "puVar1": "param_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_function_08004f3c",
            "code": "\nvoid initialize_function_08004f3c(uint **parameters)\n\n{\n  int result;\n  uint *pointer1;\n  uint *pointer2;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  pointer2 = *parameters;\n  if ((pointer2[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((pointer2[5] & 0x40) != 0) {\n        pointer1 = parameters[9];\n        parameters[9] = (uint *)((int)pointer1 + 1);\n        *(char *)pointer1 = (char)pointer2[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_08004f3a(parameters);\n    }\n    else {\n      if ((pointer2[5] & 0x40) != 0) {\n        pointer1 = parameters[9];\n        parameters[9] = (uint *)((int)pointer1 + 1);\n        *(char *)pointer1 = (char)pointer2[4];\n      }\n      initialize_if_parameter_is_valid_08008020(parameters);\n    }\n  }\n  else {\n    pointer2[1] = pointer2[1] & 0xfffff7ff;\n    if (*(char *)((int)parameters[0xd] + 0x21) == '\\x01') {\n      parameters[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(parameters[0xe]);\n      if (result != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          pointer2 = parameters[9];\n          parameters[9] = (uint *)((int)pointer2 + 1);\n          *(char *)pointer2 = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xe][0xd])();\n      }\n    }\n    else {\n      parameters[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(parameters[0xd]);\n      if (result != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_and_execute_function_08007ff0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_function_08004f3c",
                "param_1": "parameters",
                "iVar1": "result",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_input_08005084",
            "code": "\nundefined4 processInput_08005084(uint **input)\n\n{\n  char character;\n  uint *ptr1;\n  uint *ptr2;\n  \n  character = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  ptr1 = *input;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\\\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = input[9];\n      input[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr1 = input[9];\n      input[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint *)((uint)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      input[0xb] = (uint *)0xffff0000;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      initialize_and_execute_function_08007ff0();\n    }\n    else if ((input[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    initialize_function_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_input_08005084",
                "param_1": "input",
                "cVar1": "character",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_input_08005188",
            "code": "\nvoid process_input_08005188(int *input_ptr)\n\n{\n  int input_value;\n  uint flag_value;\n  uint status_value;\n  uint data_value;\n  \n  input_value = *input_ptr;\n  data_value = *(uint *)(input_value + 0x18);\n  flag_value = *(uint *)(input_value + 0x14);\n  status_value = *(uint *)(input_value + 4);\n  if ((*(char *)((int)input_ptr + 0x3e) == '\\x10') || (*(char *)((int)input_ptr + 0x3e) == '@')) {\n    if (((flag_value & 0x10001) == 0) || ((status_value & 0x200) == 0)) {\n      if (((flag_value & 0x10008) == 0) || ((status_value & 0x200) == 0)) {\n        if (((flag_value & 0x10002) != 0) && ((status_value & 0x200) != 0)) {\n          process_flags_080043a2(input_ptr);\n        }\n      }\n      else {\n        extract_value_and_assign_08004396(input_ptr);\n      }\n    }\n    else {\n      update_status_0800430c(input_ptr);\n    }\n    if ((data_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((status_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        sanitize_and_process_input_08005188_08004d6c(input_ptr);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        process_param_08004e3c(input_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((status_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data_08004b82(input_ptr);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        process_command_08004ccc(input_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_value & 0x10002) != 0) && ((status_value & 0x200) != 0)) {\n      process_and_validate_input_08004ac2();\n      return;\n    }\n    if (((flag_value & 0x10010) != 0) && ((status_value & 0x200) != 0)) {\n      process_input_08005188_08005084(input_ptr);\n      return;\n    }\n    if ((data_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((status_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        update_pointer_value_08004a76(input_ptr);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_data_and_decrement_counter_0800459c(input_ptr);\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((status_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data_08004a24(input_ptr);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_data_pointer_0800457c(input_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_input_08005188",
                "param_1": "input_ptr",
                "iVar1": "input_value",
                "uVar2": "flag_value",
                "uVar3": "status_value",
                "uVar4": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_configuration_080052f0",
            "code": "\nvoid updateConfiguration_080052f0(uint **config)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *config;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **config = **config | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 2);\n    (*config)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)config + 0x3d);\n    if (((*(char *)((int)config + 0x3e) == ' ') && (*(short *)((int)config + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (config[0xc] == (uint *)0x21)))))) {\n      initialize_configuration_08004aec(config);\n    }\n    else {\n      config[0x10] = (uint *)((uint)config[0x10] | 4);\n      if (*(char *)((int)config + 0x3e) == '\\x10') {\n        **config = **config | 0x200;\n      }\n      (*config)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 8);\n    (*config)[5] = 0xfffff7ff;\n  }\n  if (config[0x10] != (uint *)0x0) {\n    initialize_function_08004f3c(config);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_configuration_080052f0",
                "param_1": "config",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_value_0800542a",
            "code": "\nundefined getByteValue_0800542a(int address)\n\n{\n  return *(undefined *)(address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_value_0800542a",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_ptr_value_08005430",
            "code": "\nundefined4 get_ptr_value_08005430(int ptr)\n\n{\n  return *(undefined4 *)(ptr + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_ptr_value_08005430",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool isCountNonZero;\n  int delayCount;\n  \n  delayCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    isCountNonZero = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (isCountNonZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "delayCount",
                "bVar1": "isCountNonZero"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "process_data_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 processData_08005460(uint *inputData)\n\n{\n  int previousValue;\n  int currentValue;\n  undefined4 result;\n  uint value;\n  bool isConditionMet;\n  \n  if ((*inputData & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (inputData[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = inputData[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (inputData[1] == 0) {\n        previousValue = get_data_value_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_data_value_08003760();\n          if (100 < (uint)(currentValue - previousValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        previousValue = get_data_value_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_data_value_08003760();\n          if (100 < (uint)(currentValue - previousValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*inputData & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (inputData[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | inputData[5] << 3;\n    }\n    else if (inputData[4] == 0) {\n      _DAT_42420000 = 0;\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | inputData[5] << 3;\n    }\n  }\n  if ((*inputData & 8) != 0) {\n    if (inputData[6] == 0) {\n      _DAT_42420480 = 0;\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (2 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n      delay_function_08005434(1);\n    }\n  }\n  if ((*inputData & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08003760();\n        if (100 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n    }\n    value = inputData[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (inputData[3] == 0) {\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      previousValue = get_data_value_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_data_value_08003760();\n        if (5000 < (uint)(currentValue - previousValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (inputData[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (inputData[7] == 2) {\n    _DAT_42420060 = 0;\n    previousValue = get_data_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (inputData[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | inputData[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | inputData[8] | inputData[9];\n        _DAT_42420060 = 1;\n        previousValue = get_data_value_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_value_08003760();\n        } while ((uint)(currentValue - previousValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_value_08003760();\n    } while ((uint)(currentValue - previousValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    previousValue = get_data_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_value_08003760();\n    } while ((uint)(currentValue - previousValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "process_data_08005460",
                "param_1": "inputData",
                "iVar1": "previousValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_time_delay_08005840",
            "code": "\n\n\nuint calculateTimeDelay_08005840(void)\n\n{\n  uint timeDelay;\n  undefined2 inputValue;\n  undefined4 constantValue1;\n  undefined4 constantValue2;\n  undefined4 constantValue3;\n  undefined4 constantValue4;\n  \n  constantValue4 = 0x10100f0e;\n  constantValue3 = 0xd0c0b0a;\n  constantValue2 = 0x9080706;\n  constantValue1 = 0x5040302;\n  inputValue = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    timeDelay = (uint)*(byte *)((int)&constantValue1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      timeDelay = timeDelay * 4000000;\n    }\n    else {\n      timeDelay = (timeDelay * 8000000) /\n              (uint)*(byte *)((int)&inputValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    timeDelay = 8000000;\n  }\n  return timeDelay;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_time_delay_08005840",
                "uVar1": "timeDelay",
                "local_1c": "inputValue",
                "uStack_18": "constantValue1",
                "uStack_14": "constantValue2",
                "uStack_10": "constantValue3",
                "uStack_c": "constantValue4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_controller_080058ac",
            "code": "\n\n\nundefined4 initialize_controller_080058ac(uint *controller_config,uint max_config_value)\n\n{\n  int start_time;\n  int current_time;\n  uint time_delay;\n  \n  if ((_DAT_40022000 & 7) < max_config_value) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | max_config_value;\n    if (max_config_value != (max_config_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*controller_config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | controller_config[2];\n  }\n  if ((*controller_config & 1) != 0) {\n    time_delay = controller_config[1];\n    if (time_delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((time_delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = time_delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_data_value_08003760();\n    if (controller_config[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_data_value_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (controller_config[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_data_value_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_data_value_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (max_config_value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | max_config_value;\n    if (max_config_value != (max_config_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*controller_config & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | controller_config[3];\n  }\n  if ((*controller_config & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | controller_config[4] << 3;\n  }\n  time_delay = calculate_time_delay_08005840();\n  DAT_20000018 = time_delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_controller_080058ac",
                "param_1": "controller_config",
                "param_2": "max_config_value",
                "uVar3": "time_delay",
                "iVar1": "start_time",
                "iVar2": "current_time"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_and_configure_system_080058d2",
            "code": "\n\n\nundefined4 initialize_and_configure_system_080058d2(uint *configuration_flags,uint device_count)\n\n{\n  int initial_value;\n  int current_value;\n  uint time_delay;\n  \n  if ((*configuration_flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configuration_flags[2];\n  }\n  if ((*configuration_flags & 1) != 0) {\n    time_delay = configuration_flags[1];\n    if (time_delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((time_delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = time_delay | _DAT_40021004 & 0xfffffffc;\n    initial_value = get_current_value();\n    if (configuration_flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_value = get_current_value();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else if (configuration_flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_value = get_current_value();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_value = get_current_value();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (device_count < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | device_count;\n    if (device_count != (device_count & 7)) {\n      return 1;\n    }\n  }\n  if ((*configuration_flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configuration_flags[3];\n  }\n  if ((*configuration_flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configuration_flags[4] << 3;\n  }\n  time_delay = calculate_time_delay();\n  DAT_20000018 = time_delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initialize_memory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_and_configure_system_080058d2",
                "param_1": "configuration_flags",
                "param_2": "device_count",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "time_delay",
                "get_data_value_08003760": "get_current_value",
                "calculate_time_delay_08005840": "calculate_time_delay",
                "initialize_memory_080036d8": "initialize_memory"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_global_data_08005a1c",
            "code": "\nundefined4 getGlobalData_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_global_data_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "extracted_data_shift_08005a28",
            "code": "\n\n\nuint extracted_data_shift_08005a28(void)\n\n{\n  uint global_data;\n  \n  global_data = get_global_data_08005a1c();\n  return global_data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "extracted_data_shift_08005a28",
                "uVar1": "global_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_shifted_value_08005a48",
            "code": "\n\n\nuint get_shifted_value_08005a48(void)\n\n{\n  uint global_data;\n  \n  global_data = get_global_data();\n  return global_data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_shifted_value_08005a48",
                "uVar1": "global_data",
                "get_global_data_08005a1c": "get_global_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_parameters_08005a68",
            "code": "\n\n\nvoid initialize_parameters_08005a68(undefined4 *pointer_to_values,uint *pointer_to_flags)\n\n{\n  *pointer_to_values = 0xf;\n  pointer_to_values[1] = _DAT_40021004 & 3;\n  pointer_to_values[2] = _DAT_40021004 & 0xf0;\n  pointer_to_values[3] = _DAT_40021004 & 0x700;\n  pointer_to_values[4] = _DAT_40021004 >> 3 & 0x700;\n  *pointer_to_flags = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "pointer_to_values",
                "param_2": "pointer_to_flags"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "configure_device_08005aa4",
            "code": "\n\n\nundefined4 configureDevice_08005aa4(uint *deviceSettings)\n\n{\n  uint bitFlag1;\n  uint bitFlag2;\n  int initialValue;\n  int currentValue;\n  bool isFlagSet;\n  \n  if ((*deviceSettings & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_value_08003760();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (deviceSettings[1] & 0x300))) {\n      bitFlag2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      bitFlag1 = _DAT_40021020 & 1;\n      _DAT_40021020 = bitFlag2;\n      if (bitFlag1 != 0) {\n        initialValue = get_data_value_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_value_08003760();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | deviceSettings[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*deviceSettings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | deviceSettings[2];\n  }\n  if ((*deviceSettings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | deviceSettings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "configure_device_08005aa4",
                "param_1": "deviceSettings",
                "uVar1": "bitFlag1",
                "uVar2": "bitFlag2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_value_08005bb8",
            "code": "\n\n\nuint calculateValue_08005bb8(int input)\n\n{\n  uint result;\n  undefined2 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  undefined4 constant_5;\n  \n  constant_5 = 0x10100f0e;\n  constant_4 = 0xd0c0b0a;\n  constant_3 = 0x9080706;\n  constant_2 = 0x5040302;\n  constant_1 = 0x201;\n  if (input == 2) {\n    result = get_shifted_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&constant_1 - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant_2 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "constant_1",
                "uStack_20": "constant_2",
                "uStack_1c": "constant_3",
                "uStack_18": "constant_4",
                "uStack_14": "constant_5"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_update_flags_08005cb4",
            "code": "\n\n\nvoid check_and_update_flags_08005cb4(uint **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    execute_callback();\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)flags + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_update_flags_08005cb4",
                "param_1": "flags",
                "execute_callback_function_080073c0": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_parameter_value_08005cec",
            "code": "\nvoid updateParameterValue_08005cec(int paramBaseAddress,uint *paramArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramBaseAddress + 0x20) = *(uint *)(paramBaseAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(paramBaseAddress + 4);\n  updatedValue3 = *paramArray;\n  updatedValue1 = *(uint *)(paramBaseAddress + 0x20) & 0xfffffffd | paramArray[2];\n  if (paramBaseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | paramArray[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | paramArray[5] | paramArray[6];\n  }\n  *(uint *)(paramBaseAddress + 4) = updatedValue2;\n  *(uint *)(paramBaseAddress + 0x18) = *(uint *)(paramBaseAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramBaseAddress + 0x34) = paramArray[1];\n  *(uint *)(paramBaseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_parameter_value_08005cec",
                "param_1": "paramBaseAddress",
                "param_2": "paramArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "set_some_values_08005d48",
            "code": "\nvoid setSomeValues_08005d48(int baseAddress,uint *valuesArray)\n\n{\n  uint newValue1;\n  uint newValue2;\n  uint newValue3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  newValue2 = *(uint *)(baseAddress + 4);\n  newValue3 = *valuesArray;\n  newValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | valuesArray[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    newValue1 = (newValue1 & 0xfffff7ff | valuesArray[3] << 8) & 0xfffffbff;\n    newValue2 = newValue2 & 0xffffcfff | valuesArray[5] << 4 | valuesArray[6] << 4;\n  }\n  *(uint *)(baseAddress + 4) = newValue2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | newValue3;\n  *(uint *)(baseAddress + 0x3c) = valuesArray[1];\n  *(uint *)(baseAddress + 0x20) = newValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "set_some_values_08005d48",
                "param_1": "baseAddress",
                "param_2": "valuesArray",
                "uVar1": "newValue1",
                "uVar2": "newValue2",
                "uVar3": "newValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_function_parameters_08005dac",
            "code": "\nvoid updateFunctionParameters_08005dac(int functionPtr,int *parameterArray)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  \n  *(uint *)(functionPtr + 0x20) = *(uint *)(functionPtr + 0x20) & 0xffffefff;\n  value1 = *(uint *)(functionPtr + 4);\n  value2 = *parameterArray;\n  value3 = parameterArray[2];\n  if (functionPtr == 0x40012c00) {\n    value1 = value1 & 0xffffbfff | parameterArray[5] << 6;\n  }\n  *(uint *)(functionPtr + 4) = value1;\n  *(uint *)(functionPtr + 0x1c) = *(uint *)(functionPtr + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(functionPtr + 0x40) = parameterArray[1];\n  *(uint *)(functionPtr + 0x20) = *(uint *)(functionPtr + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_function_parameters_08005dac",
                "param_1": "functionPtr",
                "param_2": "parameterArray",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "initialize_flags_08005df4",
            "code": "\nvoid initialize_flags_08005df4(uint **memory)\n\n{\n  uint *ptr;\n  \n  *(undefined *)((int)memory + 0x3d) = 2;\n  ptr = *memory;\n  if ((ptr[8] & 0x1111) == 0) {\n    if ((ptr[8] & 0x444) == 0) {\n      *ptr = *ptr & 0xfffffffe;\n    }\n  }\n  initialize_memory_flags(memory);\n  *(undefined *)((int)memory + 0x3d) = 0;\n  *(undefined *)(memory + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "initialize_flags_08005df4",
                "param_1": "memory",
                "puVar1": "ptr",
                "initialize_memory_flags_08007710": "initialize_memory_flags"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "update_memory_flags_08005e2e",
            "code": "\nvoid update_memory_flags_08005e2e(uint **memory)\n\n{\n  uint *pointerVar1;\n  \n  *(undefined *)((int)memory + 0x3d) = 2;\n  pointerVar1 = *memory;\n  if ((pointerVar1[8] & 0x1111) == 0) {\n    if ((pointerVar1[8] & 0x444) == 0) {\n      *pointerVar1 = *pointerVar1 & 0xfffffffe;\n    }\n  }\n  update_memory_flags_08005e2e_08007110(memory);\n  *(undefined *)((int)memory + 0x3d) = 0;\n  *(undefined *)(memory + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "update_memory_flags_08005e2e",
                "param_1": "memory",
                "puVar1": "pointerVar1"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_flags_08005e6e",
            "code": "\nvoid processFlags_08005e6e(int *flags)\n\n{\n  int ptr;\n  \n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 2) != 0) && ((*(uint *)(ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      executeCallback1();\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 4) != 0) && ((*(uint *)(ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      executeCallback2;\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 8) != 0) && ((*(uint *)(ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      executeCallback2;\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x10) != 0) && ((*(uint *)(ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      executeCallback2;\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 1) != 0) && ((*(uint *)(ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n    executeCallback3(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x80) != 0) && ((*(uint *)(ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n    FUNC_080064ae(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x40) != 0) && ((*(uint *)(ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x20) != 0) && ((*(uint *)(ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n    FUNC_080064ac(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "param_1": "flags",
                "iVar1": "ptr",
                "execute_callback_if_needed_0800771c": "executeCallback1",
                "execute_callback_if_needed_0800771c(param_1)": "executeCallback2",
                "execute_callback_08007736": "executeCallback3"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryPointer,uint *dataPointer)\n\n{\n  uint originalValue;\n  \n  originalValue = *memoryPointer;\n  if ((((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n      (memoryPointer == (uint *)0x40000400)) || (memoryPointer == (uint *)0x40000800)) {\n    originalValue = originalValue & 0xffffff8f | dataPointer[1];\n  }\n  if (((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n     ((memoryPointer == (uint *)0x40000400 || (memoryPointer == (uint *)0x40000800)))) {\n    originalValue = originalValue & 0xfffffcff | dataPointer[3];\n  }\n  *memoryPointer = originalValue & 0xffffff7f | dataPointer[5];\n  memoryPointer[0xb] = dataPointer[2];\n  memoryPointer[10] = *dataPointer;\n  if (memoryPointer == (uint *)0x40012c00) {\n    globalVariable = dataPointer[4];\n  }\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryPointer",
                "param_2": "dataPointer",
                "uVar1": "originalValue",
                "uRam40012c30": "globalVariable"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_and_update_memory_08006060",
            "code": "\nundefined4 initialize_and_update_memory_08006060(undefined4 *memory_configuration)\n\n{\n  if (memory_configuration != (undefined4 *)0x0) {\n    if (*(char *)((int)memory_configuration + 0x3d) == '\\0') {\n      *(undefined *)(memory_configuration + 0xf) = 0;\n      initialize_memory_configuration();\n    }\n    *(undefined *)((int)memory_configuration + 0x3d) = 2;\n    update_memory(*memory_configuration,memory_configuration + 1);\n    *(undefined *)((int)memory_configuration + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_and_update_memory_08006060",
                "param_1": "memory_configuration",
                "initialize_memory_configuration_08007708": "initialize_memory_configuration",
                "update_memory_08005fe8": "update_memory"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_system_08006092",
            "code": "\nundefined4 initialize_system_08006092(undefined4 *input_ptr)\n\n{\n  if (input_ptr != (undefined4 *)0x0) {\n    if (*(char *)(input_ptr_cast + 0x3d) == '\\0') {\n      *(undefined *)(input_ptr + 0xf) = 0;\n      initialize_system_08006092_helper();\n    }\n    *(undefined *)(input_ptr_cast + 0x3d) = 2;\n    update_memory(*input_ptr,input_ptr + 1);\n    *(undefined *)(input_ptr_cast + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_system_08006092",
                "param_1": "input_ptr",
                "initialize_system_08006e68": "initialize_system_helper",
                "(int)param_1": "input_ptr_cast",
                "update_memory_08005fe8": "update_memory"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_params_and_values_080060c4",
            "code": "\nvoid updateParamsAndValues_080060c4(int baseAddress,int *parameters)\n\n{\n  uint newFlags;\n  uint updatedValue;\n  int inputValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  updatedValue = *(uint *)(baseAddress + 4);\n  inputValue = *parameters;\n  newFlags = *(uint *)(baseAddress + 0x20) & 0xffffffdf | parameters[2] << 4;\n  if (baseAddress == 0x40012c00) {\n    newFlags = (newFlags & 0xffffff7f | parameters[3] << 4) & 0xffffffbf;\n    updatedValue = updatedValue & 0xfffff3ff | parameters[5] << 2 | parameters[6] << 2;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(baseAddress + 0x38) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = newFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_params_and_values_080060c4",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "newFlags",
                "uVar2": "updatedValue",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "handle_parameter_update_08006128",
            "code": "\nundefined4 handleParameterUpdate_08006128(undefined4 *parameterArray,undefined4 value,undefined4 action)\n\n{\n  if (*(char *)(parameterArray + 0xf) != '\\x01') {\n    *(undefined *)(parameterArray + 0xf) = 1;\n    *(undefined *)((int)parameterArray + 0x3d) = 2;\n    switch(action) {\n    case 0:\n      updateParameterValue(*parameterArray);\n      break;\n    case 4:\n      updateParamsAndValues(*parameterArray);\n      break;\n    case 8:\n      setSomeValues(*parameterArray);\n      break;\n    case 0xc:\n      updateFunctionParameters(*parameterArray);\n    }\n    *(undefined *)((int)parameterArray + 0x3d) = 1;\n    *(undefined *)(parameterArray + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "handle_parameter_update_08006128",
                "param_1": "parameterArray",
                "param_2": "value",
                "param_3": "action",
                "update_parameter_value_08005cec": "updateParameterValue",
                "update_params_and_values_080060c4": "updateParamsAndValues",
                "set_some_values_08005d48": "setSomeValues",
                "update_function_parameters_08005dac": "updateFunctionParameters"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_parameter_value_08006186",
            "code": "\nundefined4 updateParameterValue_08006186(int *parameterList,int paramPointer,undefined4 updateType)\n\n{\n  if (*(byte *)(parameterList + 0xf) != '\\x01') {\n    *(undefined *)(parameterList + 0xf) = 1;\n    *(undefined *)((int)parameterList + 0x3d) = 2;\n    switch(updateType) {\n    case 0:\n      updateParameter(*parameterList);\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) | 8;\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) & 0xfffffffb;\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) | *(uint *)(paramPointer + 0x10);\n      break;\n    case 4:\n      updateParamsAndValues(*parameterList);\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) | 0x800;\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) & 0xfffffbff;\n      *(uint *)(*parameterList + 0x18) = *(uint *)(*parameterList + 0x18) | *(int *)(paramPointer + 0x10) << 8;\n      break;\n    case 8:\n      setSomeValues(*parameterList);\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) | 8;\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) & 0xfffffffb;\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) | *(uint *)(paramPointer + 0x10);\n      break;\n    case 0xc:\n      updateFunctionParameters(*parameterList);\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) | 0x800;\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) & 0xfffffbff;\n      *(uint *)(*parameterList + 0x1c) = *(uint *)(*parameterList + 0x1c) | *(int *)(paramPointer + 0x10) << 8;\n    }\n    *(undefined *)((int)parameterList + 0x3d) = 1;\n    *(undefined *)(parameterList + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_parameter_value_08006186",
                "param_1": "parameterList",
                "param_2": "paramPointer",
                "param_3": "updateType",
                "char": "byte",
                "update_parameter_value_08005cec": "updateParameter",
                "update_params_and_values_080060c4": "updateParamsAndValues",
                "set_some_values_08005d48": "setSomeValues",
                "update_function_parameters_08005dac": "updateFunctionParameters"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bit_08006262",
            "code": "\nvoid updateBit_08006262(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bit_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "set_bit_and_update_08006280",
            "code": "\nundefined4 setBitAndUpdate_08006280(uint **ptr_array,undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    (*ptr_array)[3] = (*ptr_array)[3] | 2;\n    break;\n  case 4:\n    (*ptr_array)[3] = (*ptr_array)[3] | 4;\n    break;\n  case 8:\n    (*ptr_array)[3] = (*ptr_array)[3] | 8;\n    break;\n  case 0xc:\n    (*ptr_array)[3] = (*ptr_array)[3] | 0x10;\n  }\n  updateBit(*ptr_array,value,1);\n  if (*ptr_array == (uint *)0x40012c00) {\n    uRam40012c44 = uRam40012c44 | 0x8000;\n  }\n  **ptr_array = **ptr_array | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "set_bit_and_update_08006280",
                "param_1": "ptr_array",
                "param_2": "value",
                "update_bit_08006262": "updateBit"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_permissions_080062f4",
            "code": "\nundefined4 updatePermissions_080062f4(uint **permissions,undefined4 permissionIndex)\n\n{\n  uint *currentPermission;\n  \n  switch(permissionIndex) {\n  case 0:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*permissions)[3] = (*permissions)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*permissions)[3] = (*permissions)[3] & 0xffffffef;\n  }\n  update_bit_08006262(*permissions,permissionIndex,0);\n  if (((*permissions == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  currentPermission = *permissions;\n  if (((currentPermission[8] & 0x1111) == 0) && ((currentPermission[8] & 0x444) == 0)) {\n    *currentPermission = *currentPermission & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_permissions_080062f4",
                "param_1": "permissions",
                "param_2": "permissionIndex",
                "puVar1": "currentPermission"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "set_bit_and_check_address_08006390",
            "code": "\nundefined4 setBitAndCheckAddress_08006390(uint **address,undefined4 bit)\n\n{\n  update_bit_08006262(*address,bit,1);\n  if (*address == (uint *)0x40012c00) {\n    status = status | 0x8000;\n  }\n  **address = **address | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "set_bit_and_check_address_08006390",
                "param_1": "address",
                "param_2": "bit",
                "uRam40012c44": "status"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_flags_080063c0",
            "code": "\nundefined4 update_flags_080063c0(uint **bits,undefined4 flag)\n\n{\n  uint *bits_pointer;\n  \n  update_bit_08006262(*bits,flag,0);\n  if (((*bits == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  bits_pointer = *bits;\n  if (((bits_pointer[8] & 0x1111) == 0) && ((bits_pointer[8] & 0x444) == 0)) {\n    *bits_pointer = *bits_pointer & 0xfffffffe;\n  }\n  *(undefined *)((int)bits + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_flags_080063c0",
                "param_1": "bits",
                "param_2": "flag",
                "puVar1": "bits_pointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_value_at_offset_08006420",
            "code": "\nvoid updateValueAtOffset_08006420(int baseAddress,uint bitOffset,int value)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | value << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_value_at_offset_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "update_and_set_values_0800643c",
            "code": "\nundefined4 updateAndSetValues_0800643c(uint **dataPointer,undefined4 value)\n\n{\n  updateValueAtOffset(*dataPointer,value,4);\n  (*dataPointer)[0x11] = (*dataPointer)[0x11] | 0x8000;\n  **dataPointer = **dataPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "update_and_set_values_0800643c",
                "param_1": "dataPointer",
                "param_2": "value",
                "update_value_at_offset_08006420": "updateValueAtOffset"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_and_check_values_08006460",
            "code": "\nundefined4 updateAndCheckValues_08006460(uint **inputArray,undefined4 newValue)\n\n{\n  uint *currentArray;\n  \n  update_value_at_offset_08006420(*inputArray,newValue,0);\n  currentArray = *inputArray;\n  if (((currentArray[8] & 0x1111) == 0) && ((currentArray[8] & 0x444) == 0)) {\n    currentArray[0x11] = currentArray[0x11] & 0xffff7fff;\n  }\n  currentArray = *inputArray;\n  if (((currentArray[8] & 0x1111) == 0) && ((currentArray[8] & 0x444) == 0)) {\n    *currentArray = *currentArray & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_and_check_values_08006460",
                "param_1": "inputArray",
                "param_2": "newValue",
                "puVar1": "currentArray"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "update_memory_values_080064b0",
            "code": "\nvoid updateMemoryValues_080064b0(int *memoryPointer)\n\n{\n  *(uint *)(*memoryPointer + 0xc) = *(uint *)(*memoryPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryPointer + 0x14) = *(uint *)(*memoryPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryPointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "update_memory_values_080064b0",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *inputData)\n\n{\n  short counter;\n  byte *bytePtr;\n  \n  if (*(char *)((int)inputData + 0x39) != '!') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    *(uint *)(*inputData + 4) = *(ushort *)inputData[8] & 0x1ff;\n    if (inputData[4] == 0) {\n      inputData[8] = inputData[8] + 2;\n    }\n    else {\n      inputData[8] = inputData[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)inputData[8];\n    inputData[8] = (int)(bytePtr + 1);\n    *(uint *)(*inputData + 4) = (uint)*bytePtr;\n  }\n  counter = *(short *)((int)inputData + 0x26) + -1;\n  *(short *)((int)inputData + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffff7f;\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "inputData",
                "sVar1": "counter",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_values_08006538",
            "code": "\nvoid calculateValues_08006538(int *input)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int value10;\n  \n  *(uint *)(*input + 0x10) = *(uint *)(*input + 0x10) & 0xffffcfff | input[3];\n  *(uint *)(*input + 0xc) =\n       input[2] | input[4] | input[5] | *(uint *)(*input + 0xc) & 0xffffe9f3;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffcff | input[6];\n  value10 = *input;\n  if (value10 != 0x40013800) {\n    value1 = extracted_data_shift_08005a28();\n    value6 = input[1];\n    value2 = extracted_data_shift_08005a28();\n    value7 = input[1];\n    value3 = extracted_data_shift_08005a28();\n    value8 = input[1];\n    value4 = extracted_data_shift_08005a28();\n    value9 = input[1];\n    value5 = extracted_data_shift_08005a28();\n    *(uint *)(value10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(input[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  value10 = get_shifted_value_08005a48();\n  value5 = input[1];\n  value1 = get_shifted_value_08005a48();\n  value6 = input[1];\n  value2 = get_shifted_value_08005a48();\n  value7 = input[1];\n  value3 = get_shifted_value_08005a48();\n  value8 = input[1];\n  value4 = get_shifted_value_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(value3 * 0x19) / (uint)(value8 << 2) +\n                                (int)(((ulonglong)(uint)(value4 * 0x19) /\n                                      (ulonglong)(uint)(input[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(value1 * 0x19) / (uint)(value6 << 2) +\n                   (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(value7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(value10 * 0x19) / (ulonglong)(uint)(value5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "param_1": "input",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "iVar6": "value6",
                "iVar7": "value7",
                "iVar8": "value8",
                "iVar9": "value9",
                "iVar10": "value10"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "FUNC_080066e8",
            "code": "\nundefined4 FUNC_080066e8(uint **param_1,uint param_2,uint param_3,int param_4,uint param_5)\n\n{\n  int iVar1;\n  \n  do {\n    if (((param_2 & ~**param_1) == 0) != param_3) {\n      return 0;\n    }\n  } while ((param_5 == 0xffffffff) ||\n          ((param_5 != 0 && (iVar1 = get_data_value_08003760(), (uint)(iVar1 - param_4) <= param_5))));\n  (*param_1)[3] = (*param_1)[3] & 0xfffffe5f;\n  (*param_1)[5] = (*param_1)[5] & 0xfffffffe;\n  *(undefined *)((int)param_1 + 0x39) = 0x20;\n  *(undefined *)((int)param_1 + 0x3a) = 0x20;\n  *(undefined *)(param_1 + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "FUNC_080066e8"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_data_0800674e",
            "code": "\nundefined4 initialize_data_0800674e(int *data_ptr)\n\n{\n  if (data_ptr != (int *)0x0) {\n    if (*(char *)((int)data_ptr + 0x39) == '\\0') {\n      *(undefined *)(data_ptr + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)data_ptr + 0x39) = 0x24;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffdfff;\n    calculate_values(data_ptr);\n    *(uint *)(*data_ptr + 0x10) = *(uint *)(*data_ptr + 0x10) & 0xffffb7ff;\n    *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xffffffd5;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)data_ptr + 0x39) = 0x20;\n    *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_data_0800674e",
                "param_1": "data_ptr",
                "calculate_values_08006538": "calculate_values",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *dataPointer,ushort *ushortPointer,int length,undefined4 param4)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPointer + 0x39) == ' ') {\n    if (ushortPointer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (length == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPointer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPointer + 0xe) = 1;\n      dataPointer[0xf] = 0;\n      *(undefined *)((int)dataPointer + 0x39) = 0x21;\n      returnValue = get_data_value_08003760();\n      *(short *)(dataPointer + 9) = (short)length;\n      *(short *)((int)dataPointer + 0x26) = (short)length;\n      while (*(short *)((int)dataPointer + 0x26) != 0) {\n        *(short *)((int)dataPointer + 0x26) = *(short *)((int)dataPointer + 0x26) + -1;\n        if (dataPointer[2] == 0x1000) {\n          result = FUNC_080066e8(dataPointer,0x80,0,returnValue,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPointer + 4) = *ushortPointer & 0x1ff;\n          if (dataPointer[4] == 0) {\n            ushortPointer = ushortPointer + 1;\n          }\n          else {\n            ushortPointer = (ushort *)((int)ushortPointer + 1);\n          }\n        }\n        else {\n          result = FUNC_080066e8(dataPointer,0x80,0,returnValue,param4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPointer + 4) = (uint)*(byte *)ushortPointer;\n          ushortPointer = (ushort *)((int)ushortPointer + 1);\n        }\n      }\n      result = FUNC_080066e8(dataPointer,0x40,0,returnValue,param4);\n      if (result == 0) {\n        *(undefined *)((int)dataPointer + 0x39) = 0x20;\n        *(undefined *)(dataPointer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "dataPointer",
                "param_2": "ushortPointer",
                "param_3": "length",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "process_data_0800688e",
            "code": "\nundefined4 processData_0800688e(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    data[8] = value1;\n    *(short *)(data + 9) = (short)value2;\n    *(short *)((int)data + 0x26) = (short)value2;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "process_data_0800688e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[0xf]"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "modify_data_and_execute_08006932",
            "code": "\nundefined4 modifyDataAndExecute_08006932(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)dataPointer + 0x39) = 0x20;\n  executeDataProcessing();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "modify_data_and_execute_08006932",
                "param_1": "dataPointer",
                "execute_data_processing_08008730": "executeDataProcessing"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *inputData)\n\n{\n  byte *bytePointer;\n  short remainingIterations;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    undefinedPointer = (undefined *)inputData[10];\n    inputData[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePointer = (byte *)inputData[10];\n    inputData[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  remainingIterations = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = remainingIterations;\n  if (remainingIterations != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffffdf;\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffeff;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  execute_selected_operation_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "inputData",
                "pbVar1": "bytePointer",
                "sVar2": "remainingIterations",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid process_data_080069ec(uint **param_array)\n\n{\n  int result;\n  uint value_a;\n  uint *ptr_array;\n  uint value_b;\n  uint value_c;\n  \n  ptr_array = *param_array;\n  value_c = *ptr_array;\n  value_a = ptr_array[3];\n  if ((((value_c & 0xf) == 0) && ((value_c & 0x20) != 0)) && ((value_a & 0x20) != 0)) {\n    process_data_080069ec_0800694c(param_array);\n    return;\n  }\n  if (((value_c & 0xf) == 0) || ((value_b = ptr_array[5] & 1, value_b == 0 && ((value_a & 0x120) == 0)))) {\n    if (((value_c & 0x80) != 0) && ((value_a & 0x80) != 0)) {\n      process_data_080069ec_080064cc(param_array);\n      return;\n    }\n    if (((value_c & 0x40) != 0) && ((value_a & 0x40) != 0)) {\n      modify_data_and_execute_08006932(param_array);\n    }\n  }\n  else {\n    if (((value_c & 1) != 0) && ((value_a & 0x100) != 0)) {\n      param_array[0xf] = (uint *)((uint)param_array[0xf] | 1);\n    }\n    if (((value_c & 4) != 0) && (value_b != 0)) {\n      param_array[0xf] = (uint *)((uint)param_array[0xf] | 2);\n    }\n    if (((value_c & 2) != 0) && (value_b != 0)) {\n      param_array[0xf] = (uint *)((uint)param_array[0xf] | 4);\n    }\n    if (((value_c & 8) != 0) && (value_b != 0)) {\n      param_array[0xf] = (uint *)((uint)param_array[0xf] | 8);\n    }\n    if (param_array[0xf] != (uint *)0x0) {\n      if (((value_c & 0x20) != 0) && ((value_a & 0x20) != 0)) {\n        process_data_080069ec_0800694c(param_array);\n      }\n      if ((((uint)param_array[0xf] & 8) == 0) && (((*param_array)[5] & 0x40) == 0)) {\n        FUNC_0800877c(param_array);\n        param_array[0xf] = (uint *)0x0;\n        return;\n      }\n      update_memory_values_080064b0(param_array);\n      ptr_array = *param_array;\n      if ((ptr_array[5] & 0x40) == 0) {\n        FUNC_0800877c(param_array);\n        return;\n      }\n      ptr_array[5] = ptr_array[5] & 0xffffffbf;\n      if (param_array[0xd] == (uint *)0x0) {\n        FUNC_0800877c(param_array);\n        return;\n      }\n      param_array[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = initialize_data_08004050(param_array[0xd]);\n      if (result != 0) {\n        (*(code *)param_array[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "param_array",
                "iVar1": "result",
                "uVar2": "value_a",
                "puVar3": "ptr_array",
                "uVar4": "value_b",
                "uVar5": "value_c"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "retrieve_bit_value_08006b28",
            "code": "\nuint retrieveBitValue_08006b28(uint inputValue,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "retrieve_bit_value_08006b28",
                "param_1": "inputValue",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_bit_08006b3e",
            "code": "\nvoid updateBit_08006b3e(uint index,int array)\n\n{\n  uint byteOffset;\n  \n  byteOffset = (index << 0x18) >> 0x1c;\n  *(uint *)(array + byteOffset * 4) = *(uint *)(array + byteOffset * 4) | 1 << (index & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_bit_08006b3e",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "byteOffset"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_data_08006b5c",
            "code": "\nvoid updateData_08006b5c(uint data,int array)\n\n{\n  uint index;\n  \n  index = (data << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (data & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_data_08006b5c",
                "param_1": "data",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 getMemoryAddress_08006b7c(undefined4 inputParam)\n\n{\n  switch(inputParam) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_flag_and_return_address_08006bb8",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_08006bb8(undefined4 flagIndex)\n\n{\n  undefined4 returnAddress;\n  \n  switch(flagIndex) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnAddress = 0x40011800;\n    break;\n  default:\n    returnAddress = 0;\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_flag_and_return_address_08006bb8",
                "param_1": "flagIndex",
                "uVar1": "returnAddress"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "calculate_offset_08006c60",
            "code": "\nuint calculateOffset_08006c60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int offset;\n  uint shiftedOffset;\n  \n  offset = find_offset_08007376(input1,&DAT_0800a5b8,input3,input4,input4);\n  shiftedOffset = (uint)(offset << 0xc) >> 0x1b;\n  if (0x10 < shiftedOffset - 1) {\n    shiftedOffset = 0;\n  }\n  return shiftedOffset;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "calculate_offset_08006c60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "offset",
                "uVar2": "shiftedOffset"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "find_offset_08006c7c",
            "code": "\nundefined4 find_offset_08006c7c(undefined4 input_param,undefined4 ptr_param,undefined4 search_param,undefined4 data_param)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = find_offset_08006c7c_08007376(input_param,&DAT_0800a6cc,search_param,data_param,data_param);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "find_offset_08006c7c",
                "param_1": "input_param",
                "param_2": "ptr_param",
                "param_3": "search_param",
                "param_4": "data_param",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_memory_08006ca8",
            "code": "\n\n\nvoid updateMemory_08006ca8(int *data,undefined4 flag)\n\n{\n  undefined4 address;\n  uint updatedFlag;\n  int value;\n  uint bitMask;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  value = *data;\n  if (value == 0x40012400) {\n    updatedFlag = _DAT_40021018 | 0x200;\n    value = 0x200;\n    _DAT_40021018 = updatedFlag;\n  }\n  else {\n    updatedFlag = 0x40012800;\n    if (value == 0x40012800) {\n      updatedFlag = _DAT_40021018 | 0x400;\n      value = 0x400;\n      _DAT_40021018 = updatedFlag;\n    }\n  }\n  address = set_flag_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,flag,updatedFlag,value);\n  bitMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  constant1 = 3;\n  constant2 = 0;\n  update_memory_080040e8(address,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_memory_08006ca8",
                "param_1": "data",
                "param_2": "flag",
                "uVar1": "address",
                "uVar2": "updatedFlag",
                "iVar3": "value",
                "local_18": "bitMask",
                "local_14": "constant1",
                "local_10": "constant2"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_permissions_08006d24",
            "code": "\n\n\nvoid updatePermissions_08006d24(int *addressPtr)\n\n{\n  if (*addressPtr != 0x40012400) {\n    if (*addressPtr == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_permissions_08006d24",
                "param_1": "addressPtr"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "execute_program_08006d80",
            "code": "\nundefined2 execute_program_08006d80(undefined4 program_input)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint offset;\n  undefined4 flag1;\n  undefined4 flag2;\n  int value;\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 register6;\n  undefined4 register7;\n  undefined4 register8;\n  \n  fill_memory_with_byte_080091c6(&value,0,0x30);\n  offset = 0;\n  flag1 = 0;\n  flag2 = 0;\n  result = 0;\n  value = check_and_find_value_08007320(program_input,&DAT_0800a5b8);\n  if (value == 0) {\n    result = 0;\n  }\n  else {\n    register1 = 0;\n    register2 = 0;\n    register3 = 0;\n    register5 = 0;\n    register7 = 0xe0000;\n    register8 = 0;\n    register4 = 1;\n    register6 = 0;\n    DAT_20000014 = (undefined)program_input;\n    iVar1 = validate_and_update_data_08003bd8(&value);\n    if (iVar1 == 0) {\n      offset = calculate_offset_08006c60(program_input);\n      if (offset < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        iVar1 = update_registers_080038e4(&value,&offset);\n        if (iVar1 == 0) {\n          iVar1 = process_data_08003e20(&value);\n          if (iVar1 == 0) {\n            iVar1 = update_data_processing_08003aa0(&value);\n            if (iVar1 == 0) {\n              iVar1 = calculate_return_value_0800376c(&value,10);\n              if (iVar1 == 0) {\n                uVar2 = get_pointer_from_offset_08003a1c(&value);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_offset_value_080038dc(&value);\n                }\n                iVar1 = check_and_update_data_flags_08003de4(&value);\n                if (iVar1 == 0) {\n                  iVar1 = update_data_flags_08003ce8(&value);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "execute_program_08006d80",
                "param_1": "program_input",
                "local_46": "result",
                "local_44": "offset",
                "local_40": "flag1",
                "local_3c": "flag2",
                "local_38": "value",
                "local_34": "register1",
                "local_30": "register2",
                "local_2c": "register3",
                "local_28": "register4",
                "local_24": "register5",
                "local_20": "register6",
                "local_1c": "register7",
                "local_10": "register8"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_system_08006e68",
            "code": "\n\n\nvoid initializeSystem_08006e68(undefined4 inputParameter)\n\n{\n  int offset;\n  undefined4 address;\n  uint flag;\n  undefined4 setting1;\n  undefined4 setting2;\n  undefined4 setting3;\n  \n  offset = find_offset_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  configure_memory_08007438(inputParameter);\n  address = set_flag_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  setting1 = 2;\n  setting2 = 0;\n  setting3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(offset << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  flag = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_memory_080040e8(address,&flag);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_system_08006e68",
                "param_1": "inputParameter",
                "iVar1": "offset",
                "uVar2": "address",
                "local_20": "flag",
                "local_1c": "setting1",
                "local_18": "setting2",
                "local_14": "setting3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "update_memory_flags_08007110",
            "code": "\nvoid update_memory_flags_08007110(void)\n\n{\n  update_memory_flags_08007110_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "update_memory_flags_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_and_update_values_08007118",
            "code": "\nvoid initialize_and_update_values_08007118(undefined4 byte_value,uint divisor,int param_3,undefined4 param_4,char flag)\n\n{\n  uint shifted_value;\n  int system_initialized;\n  int update_status;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 value_5;\n  undefined4 value_6;\n  undefined4 value_7;\n  int value_8;\n  int shifted_value_divisor_minus_one;\n  undefined4 value_9;\n  int param_3_minus_one;\n  undefined4 value_10;\n  undefined4 value_11;\n  undefined local_flag;\n  \n  fill_memory_with_byte_080091c6(&value_8,0,0x40);\n  value_1 = 0;\n  value_2 = 0;\n  value_3 = 0;\n  value_4 = 0;\n  value_5 = 0;\n  value_6 = 0;\n  value_7 = 0;\n  value_8 = check_and_find_value_08007320(byte_value,&DAT_0800a6cc);\n  if (value_8 != 0) {\n    shifted_value = calculate_shifted_value_080075dc();\n    shifted_value_divisor_minus_one = shifted_value / divisor - 1;\n    param_3_minus_one = param_3 + -1;\n    value_10 = 0;\n    value_9 = 0;\n    value_11 = 0;\n    local_flag = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)byte_value;\n      system_initialized = initialize_system_08006092(&value_8);\n      if (system_initialized != 0) {\n        return;\n      }\n    }\n    system_initialized = find_offset_08006c7c(byte_value);\n    if ((((system_initialized == 0) || (system_initialized == 4)) || (system_initialized == 8)) || ((system_initialized == 0xc || (system_initialized == 0x18)))) {\n      value_1 = 0x60;\n      value_3 = 0;\n      value_5 = 0;\n      value_4 = 0;\n      value_7 = 0;\n      value_6 = 0;\n      value_2 = param_4;\n      update_status = update_parameter_value_08006186(&value_8,&value_1,system_initialized);\n      if (update_status == 0) {\n        shifted_value = find_offset_08007376(byte_value,&DAT_0800a6cc);\n        if ((shifted_value & 0x100000) == 0) {\n          set_bit_and_check_address_08006390(&value_8,system_initialized);\n        }\n        else {\n          update_and_set_values_0800643c(&value_8,system_initialized);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_and_update_values_08007118",
                "param_1": "byte_value",
                "param_2": "divisor",
                "param_5": "flag",
                "uVar1": "shifted_value",
                "iVar2": "system_initialized",
                "iVar3": "update_status",
                "local_74": "value_1",
                "local_70": "value_2",
                "local_6c": "value_3",
                "local_68": "value_4",
                "local_64": "value_5",
                "local_60": "value_6",
                "local_5c": "value_7",
                "local_58": "value_8",
                "local_54": "shifted_value_divisor_minus_one",
                "local_50": "value_9",
                "local_4c": "param_3_minus_one",
                "local_48": "value_10",
                "local_44": "value_11",
                "local_1b": "local_flag"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_memory_080071e4",
            "code": "\nvoid processMemory_080071e4(undefined4 inputParameter)\n\n{\n  int offsetValue;\n  uint updatedOffset;\n  int memoryValues [17];\n  \n  memoryValues[0] = check_and_find_value_08007320(inputParameter,&DAT_0800a6cc);\n  if ((memoryValues[0] != 0) &&\n     ((((offsetValue = find_offset_08006c7c(inputParameter), offsetValue == 0 || (offsetValue == 4)) || (offsetValue == 8)) ||\n      ((offsetValue == 0xc || (offsetValue == 0x18)))))) {\n    updatedOffset = find_offset_08007376(inputParameter,&DAT_0800a6cc);\n    if ((updatedOffset & 0x100000) == 0) {\n      update_flags_080063c0(memoryValues,offsetValue);\n    }\n    else {\n      update_and_check_values_08006460(memoryValues,offsetValue);\n    }\n    update_memory_flags_08005e2e(memoryValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_memory_080071e4",
                "param_1": "inputParameter",
                "iVar1": "offsetValue",
                "uVar2": "updatedOffset",
                "local_50": "memoryValues"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_data_0800723c",
            "code": "\nvoid initializeData_0800723c(void)\n\n{\n  fetchDataValue();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_data_0800723c",
                "get_data_value_08003760": "fetchDataValue"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_and_process_data_08007246",
            "code": "\nvoid initialize_and_process_data_08007246(void)\n\n{\n  update_sum();\n  initialize();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_and_process_data_08007246",
                "update_sum_08003748": "update_sum",
                "initialize_08004046": "initialize"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_flags_08007258",
            "code": "\n\n\nvoid initializeFlags_08007258(uint flagBits,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 address;\n  uint bitMask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  address = set_flag_and_return_address_08006bb8((flagBits << 0x18) >> 0x1c);\n  bitMask = 1 << (flagBits & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((flagBits - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((flagBits == 0xf) || (flagBits == 0x13)) || (flagBits == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_memory_080040e8(address,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_flags_08007258",
                "param_1": "flagBits",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "address",
                "local_20": "bitMask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "store_param_based_on_condition_080072d8",
            "code": "\nvoid store_param_based_on_condition_080072d8(undefined4 value_1,undefined2 value_2,int condition,undefined4 value_3)\n\n{\n  if (condition == 0) {\n    store_param_080042e2(value_1,value_2,0,value_3,value_3);\n    return;\n  }\n  store_param_080042e2(value_1,value_2,1,value_3,value_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "store_param_based_on_condition_080072d8",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "condition",
                "param_4": "value_3"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "validate_inputs_080072f0",
            "code": "\nvoid validate_inputs_080072f0(undefined4 input1,undefined2 input2,undefined4 input3,undefined4 input4)\n\n{\n  check_bit(input1,input2,input3,input4,input4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "validate_inputs_080072f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "check_bit_080042d4": "check_bit"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_and_device_080072fa",
            "code": "\nvoid initialize_system_and_device_080072fa(void)\n\n{\n  initialize_system();\n  initialize_and_configure_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_and_device_080072fa",
                "initialize_system_08003724": "initialize_system",
                "initialize_and_configure_device_080035b8": "initialize_and_configure_device"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_list_08007306",
            "code": "\nundefined4 find_value_in_list_08007306(int value,char *list)\n\n{\n  while( true ) {\n    if (*list == -1) {\n      return 0;\n    }\n    if (*list == value) break;\n    list = list + 0xc;\n  }\n  return *(undefined4 *)(list + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_list_08007306",
                "param_1": "value",
                "param_2": "list"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "check_and_find_value_08007320",
            "code": "\nundefined4 check_and_find_value_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_list_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "check_and_find_value_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_integer_in_array_08007332",
            "code": "\nint find_integer_in_array_08007332(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_integer_in_array_08007332",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_integer_or_failure_0800734a",
            "code": "\nundefined4 find_integer_or_failure_0800734a(int input_parameter)\n\n{\n  undefined4 result;\n  \n  if (input_parameter != 0) {\n    result = find_integer_in_array();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_integer_or_failure_0800734a",
                "param_1": "input_parameter",
                "uVar1": "result",
                "find_integer_in_array_08007332": "find_integer_in_array"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_offset_0800735a",
            "code": "\nundefined4 find_value_offset_0800735a(int value_to_find,char *data_array)\n\n{\n  while( true ) {\n    if (*data_array == -1) {\n      return 0xffffffff;\n    }\n    if (*data_array == value_to_find) break;\n    data_array = data_array + 0xc;\n  }\n  return *(undefined4 *)(data_array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_offset_0800735a",
                "param_1": "value_to_find",
                "param_2": "data_array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_offset_08007376",
            "code": "\nundefined4 find_offset_08007376(int input_value)\n\n{\n  undefined4 offset_value;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  offset_value = find_value_offset_0800735a();\n  return offset_value;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_offset_08007376",
                "param_1": "input_value",
                "uVar1": "offset_value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "compare_params_0800738a",
            "code": "\nundefined4 compareParams_0800738a(int value1,char *array)\n\n{\n  if (value1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value1 == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "compare_params_0800738a",
                "param_1": "value1",
                "param_2": "array"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "return_smaller_value_if_not_equal_080073ae",
            "code": "\nint returnSmallerValueIfNotEqual_080073ae(int newValue1,int newValue2)\n\n{\n  if (newValue1 != newValue2) {\n    if (newValue1 == 0) {\n      return newValue2;\n    }\n    if (newValue2 == 0) {\n      return newValue1;\n    }\n    newValue1 = 0;\n  }\n  return newValue1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "return_smaller_value_if_not_equal_080073ae",
                "param_1": "newValue1",
                "param_2": "newValue2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid execute_callback_function_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "continue_infinite_loop_080073e8",
            "code": "\nvoid continue_infinite_loop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "continue_infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_memory_configuration_080073ec",
            "code": "\n\n\nvoid initializeMemoryConfiguration_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_memory_configuration_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "configure_memory_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid configureMemory_08007438(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = memoryAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "configure_memory_08007438",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_flags_080074e0",
            "code": "\n\n\nvoid updateMemoryFlags_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_flags_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "process_timer_ir_qn_08007544",
            "code": "\nundefined4 process_timer_IRQn_08007544(uint timer_IRQn)\n\n{\n  if (timer_IRQn == 0xffffffff) {\n    return 0;\n  }\n  if (timer_IRQn == 0x40000400) {\n    return 0x1d;\n  }\n  if (timer_IRQn < 0x40000401) {\n    if (timer_IRQn == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer_IRQn == 0x40000800) {\n      return 0x1e;\n    }\n    if (timer_IRQn == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  initialize_data_for_timer_IRQn(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "process_timer_ir_qn_08007544",
                "param_1": "timer_IRQn",
                "process_and_initialize_data_080098d8": "initialize_data_for_timer_IRQn"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "timer_type_08007594",
            "code": "\nundefined4 timer_type_08007594(uint timer_instance)\n\n{\n  if (timer_instance == 0xffffffff) {\n    return 0;\n  }\n  if (timer_instance == 0x40000400) {\n    return 1;\n  }\n  if (timer_instance < 0x40000401) {\n    if (timer_instance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timer_instance == 0x40000800) {\n      return 1;\n    }\n    if (timer_instance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initialize_timer_data(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "timer_type_08007594",
                "param_1": "timer_instance",
                "process_and_initialize_data_080098d8": "initialize_timer_data"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_value_080075dc",
            "code": "\nint calculate_shifted_value_080075dc(undefined4 clock_source)\n\n{\n  uint shifted_value1;\n  int result;\n  uint shifted_value2;\n  undefined4 initialized_param1;\n  undefined4 initialized_param2;\n  undefined4 initialized_param3;\n  undefined4 initialized_param4;\n  uint initialized_param5;\n  uint initialized_param6;\n  \n  initialized_param2 = 0;\n  initialized_param3 = 0;\n  initialized_param4 = 0;\n  initialized_param5 = 0;\n  initialized_param6 = 0;\n  initialized_param1 = 0;\n  initialize_parameters_08005a68(&initialized_param2,&initialized_param1);\n  result = timer_type_08007594(clock_source);\n  shifted_value1 = initialized_param6;\n  shifted_value2 = initialized_param5;\n  if (result == 1) {\n    result = extracted_data_shift_08005a28();\n  }\n  else if (result == 2) {\n    result = get_shifted_value_08005a48();\n    shifted_value2 = shifted_value1;\n  }\n  else {\n    process_and_initialize_data_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    shifted_value2 = 0;\n  }\n  if (shifted_value2 != 0x500) {\n    if (shifted_value2 < 0x501) {\n      if (shifted_value2 != 0x400) {\n        return result;\n      }\n    }\n    else if ((shifted_value2 != 0x600) && (shifted_value2 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_value_080075dc",
                "param_1": "clock_source",
                "uVar1": "shifted_value1",
                "iVar2": "result",
                "uVar3": "shifted_value2",
                "local_20": "initialized_param1",
                "local_1c": "initialized_param2",
                "local_18": "initialized_param3",
                "local_14": "initialized_param4",
                "local_10": "initialized_param5",
                "local_c": "initialized_param6"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_device_08007648",
            "code": "\nvoid initializeDevice_08007648(undefined4 *deviceConfig,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char charVar;\n  uint shiftedValue;\n  int resultCode;\n  undefined4 *nextDeviceConfig;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  \n  localVar1 = 0;\n  localVar2 = 0;\n  localVar3 = 0;\n  localVar4 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  nextDeviceConfig = deviceConfig + 1;\n  *deviceConfig = 0x40000000;\n  deviceConfig[1] = 0x40000000;\n  deviceConfig[4] = param2;\n  shiftedValue = calculate_shifted_value_080075dc();\n  deviceConfig[2] = shiftedValue / 1000000 - 1;\n  deviceConfig[5] = 0;\n  deviceConfig[3] = 0;\n  deviceConfig[6] = 0;\n  deviceConfig[0x13] = param4;\n  localVar1 = 0;\n  localVar3 = 0;\n  localVar5 = 0;\n  localVar4 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  localVar2 = param3;\n  charVar = process_timer_ir_qn_08007544(*deviceConfig);\n  update_memory_08003f30((int)charVar,0xe,0);\n  charVar = process_timer_ir_qn_08007544(*deviceConfig);\n  set_bit_at_index_08003f94((int)charVar);\n  resultCode = initialize_and_update_memory_08006060(nextDeviceConfig);\n  if ((resultCode == 0) && (resultCode = handle_parameter_update_08006128(nextDeviceConfig,&localVar1,0), resultCode == 0)) {\n    set_bit_and_update_08006280(nextDeviceConfig,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_device_08007648",
                "param_1": "deviceConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "charVar",
                "uVar2": "shiftedValue",
                "iVar3": "resultCode",
                "puVar4": "nextDeviceConfig",
                "local_34": "localVar1",
                "local_30": "localVar2",
                "local_2c": "localVar3",
                "local_28": "localVar4",
                "local_24": "localVar5",
                "local_20": "localVar6",
                "local_1c": "localVar7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "process_flags_080076e0",
            "code": "\nvoid process_flags_080076e0(undefined4 *flags)\n\n{\n  char timer_value;\n  int flag_status;\n  \n  flags[0x13] = 0;\n  timer_value = process_timer_ir_qn_08007544(*flags);\n  set_bit_in_memory_and_sync_08003fb0((int)timer_value);\n  flag_status = initialize_flags_08005df4(flags + 1);\n  if (flag_status == 0) {\n    update_permissions_080062f4(flags + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "process_flags_080076e0",
                "param_1": "flags",
                "cVar1": "timer_value",
                "iVar2": "flag_status"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_memory_configuration_08007708",
            "code": "\nvoid initialize_memory_configuration_08007708(void)\n\n{\n  configure_memory_08007438();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_memory_configuration_08007708"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "initialize_memory_flags_08007710",
            "code": "\nvoid initialize_memory_flags_08007710(void)\n\n{\n  update_memory_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "initialize_memory_flags_08007710",
                "update_memory_flags_080074e0": "update_memory_flags"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_callback_if_needed_0800771c",
            "code": "\nvoid executeCallbackIfNeeded_0800771c(int callbackData)\n\n{\n  int callbackPointer;\n  \n  callbackPointer = getCallbackPtr();\n  if ((*(CallbackFuncPtr **)(callbackPointer + 0x4c) != (CallbackFuncPtr *)0x0) && (*(char *)(callbackData + 0x1c) == '\\x01')) {\n    (**(CallbackFuncPtr **)(callbackPointer + 0x4c))(callbackPointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_callback_if_needed_0800771c",
                "param_1": "callbackData",
                "iVar1": "callbackPointer",
                "subtract_four_08007718": "getCallbackPtr",
                "code": "CallbackFuncPtr"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_callback_08007736",
            "code": "\nvoid executeCallback_08007736(void)\n\n{\n  int result;\n  \n  result = getCallbackFunction();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_callback_08007736",
                "iVar1": "result",
                "subtract_four_08007718": "getCallbackFunction"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_offset_value_08007744",
            "code": "\nundefined4 getOffsetValue_08007744(int input)\n\n{\n  return *(undefined4 *)(*(int *)(input + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_offset_value_08007744",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "store_param_value_0800774a",
            "code": "\nvoid storeParamValue_0800774a(int inputParam,undefined4 paramValue)\n\n{\n  *(undefined4 *)(*(int *)(inputParam + 4) + 0x24) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "store_param_value_0800774a",
                "param_1": "inputParam",
                "param_2": "paramValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_value_to_offset_08007750",
            "code": "\nvoid writeValueToOffset_08007750(int dataPtr,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(dataPtr + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_value_to_offset_08007750",
                "param_1": "dataPtr",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_peripheral_080077b0",
            "code": "\n\n\nvoid initializeI2CPeripheral_080077b0(int *config,int pin1,int pin2,int param_4,undefined param_5)\n\n{\n  int pin1Peripheral;\n  int pin2Peripheral;\n  undefined4 pinMode;\n  uint offset1;\n  uint offset2;\n  int *dataPtr;\n  uint pin1Mask;\n  uint pinConfiguration;\n  uint pinOffset;\n  undefined4 value;\n  \n  if (config != (int *)0x0) {\n    dataPtr = config + 1;\n    pin1Peripheral = check_and_find_value_08007320((int)*(char *)(config + 0x16),&DAT_0800a69c);\n    pin2Peripheral = check_and_find_value_08007320((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n    if ((pin1Peripheral == 0) || (pin2Peripheral == 0)) {\n      process_and_initialize_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pin1Peripheral = return_smaller_value_if_not_equal_080073ae(pin1Peripheral,pin2Peripheral);\n      *config = pin1Peripheral;\n      if (pin1Peripheral == 0) {\n        process_and_initialize_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pin1Peripheral == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)config + 0x5a) = 0x1f;\n          *(undefined *)((int)config + 0x5b) = 0x20;\n          DAT_20000668 = dataPtr;\n        }\n        if (*config == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)config + 0x5a) = 0x21;\n          *(undefined *)((int)config + 0x5b) = 0x22;\n          DAT_2000066c = dataPtr;\n        }\n        pinMode = set_flag_and_return_address_08006bb8((uint)((int)*(char *)((int)config + 0x59) << 0x18) >> 0x1c);\n        pin1Mask = 1 << ((int)*(char *)((int)config + 0x59) & 0xfU) & 0xffff;\n        offset1 = find_offset_08007376((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        offset2 = find_offset_08007376((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        pinConfiguration = (offset1 >> 3 & 1) << 4 | offset2 & 7;\n        value = 3;\n        pin1Peripheral = find_offset_08007376((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        pinOffset = (uint)(pin1Peripheral << 0x1a) >> 0x1e;\n        pin1Peripheral = find_offset_08007376((int)*(char *)((int)config + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        offset2 = 1;\n        offset1 = _DAT_40021018;\n        switch((uint)(pin1Peripheral << 0x11) >> 0x19) {\n        case 1:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = offset2;\n          break;\n        case 2:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 3:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = offset2;\n          break;\n        case 4:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 5:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = offset2;\n          break;\n        case 6:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 7:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = offset2;\n          break;\n        case 8:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 9:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = offset2;\n          break;\n        case 10:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xb:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xc:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xd:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xe:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xf:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x10:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x11:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x12:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x13:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x14:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x15:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x16:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x17:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x1b:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x1c:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x21:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x22:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x23:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x24:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = offset2;\n        }\n        update_memory_080040e8(pinMode,&pin1Mask,offset1,offset2);\n        pinMode = set_flag_and_return_address_08006bb8((uint)((int)*(char *)(config + 0x16) << 0x18) >> 0x1c);\n        pin1Mask = 1 << ((int)*(char *)(config + 0x16) & 0xfU) & 0xffff;\n        offset1 = find_offset_08007376((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        offset2 = find_offset_08007376((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        pinConfiguration = (offset1 >> 3 & 1) << 4 | offset2 & 7;\n        value = 3;\n        pin1Peripheral = find_offset_08007376((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        pinOffset = (uint)(pin1Peripheral << 0x1a) >> 0x1e;\n        pin1Peripheral = find_offset_08007376((int)*(char *)(config + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        offset2 = 1;\n        offset1 = _DAT_40021018;\n        switch((uint)(pin1Peripheral << 0x11) >> 0x19) {\n        case 1:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = offset2;\n          break;\n        case 2:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 3:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = offset2;\n          break;\n        case 4:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 5:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = offset2;\n          break;\n        case 6:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 7:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = offset2;\n          break;\n        case 8:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 9:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = offset2;\n          break;\n        case 10:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xb:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xc:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xd:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xe:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0xf:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x10:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x11:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x12:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x13:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x14:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x15:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x16:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x17:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x1b:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x1c:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x21:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x22:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x23:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = offset2;\n          break;\n        case 0x24:\n          offset1 = 0x40010000;\n          offset2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = offset2;\n        }\n        update_memory_080040e8(pinMode,&pin1Mask,offset1,offset2);\n        config[1] = *config;\n        config[2] = pin1;\n        config[3] = 0;\n        config[4] = param_4;\n        config[7] = 0xff;\n        config[5] = pin2;\n        config[6] = 0;\n        config[8] = 0;\n        config[9] = 0;\n        *(undefined *)((int)config + 0x41) = 0;\n        update_memory_08003f30((int)*(char *)((int)config + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)config + 0x5a));\n        update_memory_08003f30((int)*(char *)((int)config + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)config + 0x5b));\n        calculate_parameters_080045c0(dataPtr);\n        *(undefined *)((int)config + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_peripheral_080077b0",
                "param_1": "config",
                "param_2": "pin1",
                "param_3": "pin2",
                "iVar1": "pin1Peripheral",
                "iVar2": "pin2Peripheral",
                "uVar3": "pinMode",
                "uVar4": "offset1",
                "uVar5": "offset2",
                "piVar6": "dataPtr",
                "local_38": "pin1Mask",
                "local_34": "pinConfiguration",
                "local_30": "pinOffset",
                "local_2c": "value"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "validate_and_check_data_08007e74",
            "code": "\nint validate_and_check_data_08007e74(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataValue;\n  int validationResult;\n  uint difference;\n  int result;\n  int dataOffset;\n  undefined4 param4Value;\n  \n  param4Value = param4;\n  dataValue = get_data_value_08003760();\n  difference = 0;\n  result = 2;\n  do {\n    dataOffset = data + 4;\n    validationResult = validate_parameters_08004728(dataOffset,param2,param3,param4,param4Value);\n    if (validationResult == 0) {\n      result = 0;\n      while ((validationResult = get_byte_value_0800542a(dataOffset), validationResult != 0x20 && (result == 0))) {\n        validationResult = get_data_value_08003760();\n        difference = validationResult - dataValue;\n        if (difference < 0x65) {\n          validationResult = get_ptr_value_08005430(dataOffset);\n          if (validationResult != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    validationResult = get_ptr_value_08005430(dataOffset);\n  } while ((validationResult == 4) && (difference < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "validate_and_check_data_08007e74",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataValue",
                "iVar2": "validationResult",
                "uVar3": "difference",
                "iVar4": "result",
                "iVar5": "dataOffset",
                "uVar6": "param4Value"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copy_data_08007ede(int dest_address,int src_address,uint num_bytes)\n\n{\n  uint i;\n  \n  if (0x20 < num_bytes) {\n    return 2;\n  }\n  for (i = 0; i < num_bytes; i = i + 1 & 0xff) {\n    *(undefined *)(dest_address + i + 0x68) = *(undefined *)(src_address + i);\n    *(char *)(dest_address + 0x88) = *(char *)(dest_address + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dest_address",
                "param_2": "src_address",
                "param_3": "num_bytes",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "check_data_validity_08007f0e",
            "code": "\nint check_data_validity_08007f0e(int data_array_index,undefined4 param_value_1,undefined4 param_value_2,undefined4 param_value_3)\n\n{\n  int initial_data_value;\n  int processed_data_value;\n  uint difference_value;\n  int result;\n  int temp_index;\n  undefined4 original_param_4;\n  \n  original_param_4 = param_value_3;\n  initial_data_value = get_data_value_08003760();\n  difference_value = 0;\n  result = 2;\n  do {\n    temp_index = data_array_index + 4;\n    processed_data_value = process_data_080047f4(temp_index,param_value_1,param_value_2,param_value_3,original_param_4);\n    if (processed_data_value == 0) {\n      result = 0;\n      while ((processed_data_value = get_byte_value_0800542a(temp_index), processed_data_value != 0x20 && (result == 0))) {\n        processed_data_value = get_data_value_08003760();\n        difference_value = processed_data_value - initial_data_value;\n        if (difference_value < 0x65) {\n          processed_data_value = get_ptr_value_08005430(temp_index);\n          if (processed_data_value != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    processed_data_value = get_ptr_value_08005430(temp_index);\n  } while ((processed_data_value == 4) && (difference_value < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "check_data_validity_08007f0e",
                "param_1": "data_array_index",
                "param_2": "param_value_1",
                "param_3": "param_value_2",
                "param_4": "param_value_3",
                "iVar1": "initial_data_value",
                "iVar2": "processed_data_value",
                "uVar3": "difference_value",
                "iVar4": "result",
                "iVar5": "temp_index",
                "uVar6": "original_param_4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_from_parameter_08007f78",
            "code": "\nint subtractFourFromParameter_08007f78(int originalValue)\n\n{\n  return originalValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_from_parameter_08007f78",
                "param_1": "originalValue"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_data_08007f7c",
            "code": "\nvoid updateData_08007f7c(int dataPointer,int newData)\n\n{\n  if (dataPointer != 0) {\n    if (newData != 0) {\n      *(int *)(dataPointer + 0x60) = newData;\n      initialize_data_080049e0(dataPointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "param_1": "dataPointer",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_and_initialize_08007f8e",
            "code": "\nvoid updateAndInitialize_08007f8e(int itemAddress,int newValue)\n\n{\n  if (itemAddress != 0) {\n    if (newValue != 0) {\n      *(int *)(itemAddress + 100) = newValue;\n      initializeData(itemAddress + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_and_initialize_08007f8e",
                "param_1": "itemAddress",
                "param_2": "newValue",
                "initialize_data_080049e0": "initializeData"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_input_08007fa0",
            "code": "\nvoid process_input_08007fa0(int input_data,int is_zero,int compare_val,undefined4 callback_func)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (compare_val == *(int *)(input_data + 0xc)) {\n    if (is_zero == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validate_input(input_data,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    process_params(input_data,result + 0x68,0x20,8,callback_func);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "input_data",
                "param_2": "is_zero",
                "param_3": "compare_val",
                "param_4": "callback_func",
                "iVar1": "result",
                "subtract_four_from_parameter_08007f78": "subtract_four",
                "validate_input_080048c8": "validate_input",
                "process_params_08004954": "process_params"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_function_08007ff0",
            "code": "\nvoid initialize_and_execute_function_08007ff0(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = subtract_four_from_pointer();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_function_08007ff0",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_from_parameter_08007f78": "subtract_four_from_pointer",
                "initialize_data_080049e0": "initialize_data"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "initialize_if_parameter_is_valid_08008020",
            "code": "\nvoid initialize_if_parameter_is_valid_08008020(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_data(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "initialize_if_parameter_is_valid_08008020",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_from_parameter_08007f78": "subtract_four",
                "initialize_data_080049e0": "initialize_data"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initialize_UART_pins_08008078(int *pin_values)\n\n{\n  int uart1_pin_value;\n  int uart2_pin_value;\n  undefined4 uart_port_address;\n  uint offset_value;\n  uint pin_bitmask;\n  uint pin_configuration;\n  uint pin_mode;\n  undefined4 uart_number;\n  \n  if (pin_values != (int *)0x0) {\n    uart1_pin_value = check_and_find_value((int)*(char *)(pin_values + 0x16),&DAT_0800a864);\n    uart2_pin_value = check_and_find_value((int)*(char *)((int)pin_values + 0x59),&DAT_0800a81c);\n    if ((uart2_pin_value == 0) || (uart1_pin_value == 0)) {\n      process_and_initialize_error_data(\"ERROR: at least one UART pin has no peripheral\\n\",uart2_pin_value);\n    }\n    else {\n      uart1_pin_value = return_smaller_value_if_not_equal(uart1_pin_value);\n      *pin_values = uart1_pin_value;\n      if (uart1_pin_value == 0) {\n        process_and_initialize_error_data(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uart1_pin_value == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pin_values + 0x11) = 0;\n          *(undefined *)((int)pin_values + 0x5a) = 0x25;\n        }\n        else if (uart1_pin_value == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pin_values + 0x11) = 1;\n          *(undefined *)((int)pin_values + 0x5a) = 0x26;\n        }\n        else if (uart1_pin_value == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pin_values + 0x11) = 2;\n          *(undefined *)((int)pin_values + 0x5a) = 0x27;\n        }\n        uart_port_address = set_flag_and_return_address((uint)((int)*(char *)((int)pin_values + 0x59) << 0x18) >> 0x1c);\n        offset_value = find_offset((int)*(char *)((int)pin_values + 0x59),&DAT_0800a81c);\n        pin_bitmask = 1 << (*(byte *)((int)pin_values + 0x59) & 0xf) & 0xffff;\n        pin_configuration = (offset_value >> 3 & 1) << 4 | offset_value & 7;\n        pin_mode = (offset_value << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((offset_value << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        uart_number = 3;\n        update_memory(uart_port_address,&pin_bitmask);\n        uart_port_address = set_flag_and_return_address((uint)((int)*(char *)(pin_values + 0x16) << 0x18) >> 0x1c);\n        offset_value = find_offset((int)*(char *)(pin_values + 0x16),&DAT_0800a864);\n        pin_bitmask = 1 << (*(byte *)(pin_values + 0x16) & 0xf) & 0xffff;\n        pin_configuration = (offset_value >> 3 & 1) << 4 | offset_value & 7;\n        pin_mode = (offset_value << 0x1a) >> 0x1e;\n        update_memory(uart_port_address,&pin_bitmask);\n        (&DAT_200006c0)[*(byte *)(pin_values + 0x11)] = pin_values + 1;\n        pin_values[1] = *pin_values;\n        pin_values[2] = pin_values[0x12];\n        pin_values[3] = pin_values[0x13];\n        pin_values[4] = pin_values[0x14];\n        pin_values[5] = pin_values[0x15];\n        pin_values[6] = 0xc;\n        pin_values[7] = 0;\n        pin_values[8] = 0;\n        initialize_internal_data(pin_values + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "pin_values",
                "iVar1": "uart1_pin_value",
                "iVar2": "uart2_pin_value",
                "uVar3": "uart_port_address",
                "uVar4": "offset_value",
                "local_20": "pin_bitmask",
                "local_1c": "pin_configuration",
                "local_18": "pin_mode",
                "local_14": "uart_number",
                "initialize_data_0800674e": "initialize_internal_data",
                "check_and_find_value_08007320": "check_and_find_value",
                "process_and_initialize_data_080098d8": "process_and_initialize_error_data",
                "return_smaller_value_if_not_equal_080073ae": "return_smaller_value_if_not_equal",
                "set_flag_and_return_address_08006bb8": "set_flag_and_return_address",
                "find_offset_08007376": "find_offset",
                "update_memory_080040e8": "update_memory"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_pins_080084b0",
            "code": "\nvoid initialize_uart_pins_080084b0(void)\n\n{\n  int result;\n  undefined4 value;\n  \n  result = check_and_find_value_08007320(2,&DAT_0800a864);\n  if (result != 0) {\n    value = check_and_find_value_08007320(2,&DAT_0800a864);\n    DAT_20000075 = find_integer_or_failure_0800734a(value,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_pins_080084b0(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_pins_080084b0",
                "iVar1": "result",
                "uVar2": "value",
                "initialize_uart_pins_08008078": "initialize_uart_pins"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_data_08008500",
            "code": "\nuint process_data_08008500(undefined4 input_value,uint parameter)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint index;\n  \n  data_value_1 = get_data_value_08003760();\n  data_value_2 = check_and_find_value_08007320(2,&DAT_0800a864);\n  if (data_value_2 == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (data_value_2 = check_and_find_value_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != data_value_2))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart_pins_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    data_value_2 = process_data_08008500_080067ac((&DAT_200006c0)[index],input_value,parameter & 0xffff,1000);\n    if (data_value_2 == 0) {\n      return parameter;\n    }\n    data_value_2 = get_data_value_08003760();\n  } while ((uint)(data_value_2 - data_value_1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_data_08008500",
                "param_1": "input_value",
                "param_2": "parameter",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "uVar3": "index"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "is_byte_combination_valid_080085b8",
            "code": "\nbool isByteCombinationValid_080085b8(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "is_byte_combination_valid_080085b8",
                "param_1": "input",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_desired_value_set_080085dc",
            "code": "\nbool isDesiredValueSet_080085dc(int inputValue)\n\n{\n  uint combinedValues;\n  \n  combinedValues = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedValues & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_desired_value_set_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedValues"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "check_input_combination_08008600",
            "code": "\nundefined4 check_input_combination_08008600(int input_length,undefined *output_char,undefined4 flag1,undefined4 flag2)\n\n{\n  int is_combination_valid;\n  \n  if (input_length == 0) {\n    return 0xffffffff;\n  }\n  is_combination_valid = is_combination_valid_080085b8();\n  if (is_combination_valid == 0) {\n    *output_char = *(undefined *)(input_length + 0x45);\n    validate_input((&DAT_200006c0)[*(byte *)(input_length + 0x44)],input_length + 0x45,1,&DAT_200006c0,flag2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "check_input_combination_08008600",
                "param_1": "input_length",
                "param_2": "output_char",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "is_combination_valid",
                "is_byte_combination_valid_080085b8": "is_combination_valid_080085b8",
                "validate_input_080068d6": "validate_input"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "process_input_0800863c",
            "code": "\nvoid processInput_0800863c(int inputPtr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int isValidCombination;\n  uint byteIndex;\n  \n  if (inputPtr != 0) {\n    isValidCombination = is_byte_combination_valid_080085b8();\n    if (isValidCombination == 0) {\n      byteIndex = (uint)*(byte *)(inputPtr + 0x44);\n      *(undefined4 *)(&DAT_20000670 + byteIndex * 4) = value1;\n      *(int *)(&DAT_20000684 + byteIndex * 4) = inputPtr;\n      update_memory_08003f30((int)*(char *)(inputPtr + 0x5a),0,1,byteIndex,value3);\n      set_bit_at_index_08003f94((int)*(char *)(inputPtr + 0x5a));\n      validate_input_080068d6((&DAT_200006c0)[*(byte *)(inputPtr + 0x44)],inputPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "process_input_0800863c",
                "param_1": "inputPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "isValidCombination",
                "uVar2": "byteIndex"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_memory_08008694",
            "code": "\nvoid updateMemory_08008694(int inputPtr,undefined4 value)\n\n{\n  byte byteValue;\n  \n  if (inputPtr != 0) {\n    byteValue = *(byte *)(inputPtr + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = value;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = inputPtr;\n    update_memory_08003f30((int)*(char *)(inputPtr + 0x5a),0,2);\n    set_bit_at_index_08003f94((int)*(char *)(inputPtr + 0x5a));\n    process_data_0800688e((&DAT_200006c0)[*(byte *)(inputPtr + 0x44)],\n                 *(int *)(inputPtr + 100) + (uint)*(ushort *)(inputPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_memory_08008694",
                "param_1": "inputPtr",
                "param_2": "value",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_index_080086e8",
            "code": "\nuint findIndex_080086e8(int number)\n\n{\n  uint index;\n  \n  if (number == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (number == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "number",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_selected_operation_0800870c",
            "code": "\nvoid executeSelectedOperation_0800870c(void)\n\n{\n  uint index;\n  \n  index = findIndex();\n  if (index < 5) {\n    (**(code **)(&DAT_20000670 + index * 4))(*(undefined4 *)(&DAT_20000684 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_selected_operation_0800870c",
                "uVar1": "index",
                "find_index_080086e8": "findIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "execute_data_processing_08008730",
            "code": "\nvoid executeDataProcessing_08008730(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = find_index_080086e8();\n  data = *(int *)(&DAT_200006ac + index * 4);\n  if ((index < 5) && (result = (**(code **)(&DAT_20000698 + index * 4))(data), result != -1)) {\n    processData((&DAT_200006c0)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "execute_data_processing_08008730",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "process_data_0800688e": "processData"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stack0x00000000) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_error_code_08008840",
            "code": "\nundefined4 get_error_code_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_page_size_08008846",
            "code": "\nundefined4 setMemoryPageSize_08008846(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_page_size_08008846",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "get_result_08008850",
            "code": "\nundefined4 get_result_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "get_result_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_zero_08008854",
            "code": "\nint get_zero_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_zero_08008854",
                "undefined4": "int"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "get_default_value_08008858",
            "code": "\nundefined4 get_default_value_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "get_default_value_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_data_0800885c",
            "code": "\nvoid process_data_0800885c(undefined4 arg_1,undefined4 arg_2,undefined4 arg_3,undefined4 arg_4)\n\n{\n  process_data_0800885c_08008500(arg_2,arg_3,arg_3,arg_4,arg_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_data_0800885c",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_variable_0800886c",
            "code": "\nundefined4 initializeVariable_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_variable_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "check_result_0800887c",
            "code": "\nuint32 check_result_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "check_result_0800887c",
                "undefined4": "uint32"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "decode_value_08008880",
            "code": "\nuint decode_value_08008880(uint value)\n\n{\n  bool is_less_than_3c;\n  char decoded_char;\n  uint result;\n  \n  if (value < 0xe) {\n    if (value + 0x2e < 0x3c) {\n      is_less_than_3c = true;\n    }\n    else {\n      is_less_than_3c = false;\n    }\n  }\n  else {\n    is_less_than_3c = value < 0x3c;\n  }\n  if (is_less_than_3c) {\n    if (value < 0xe) {\n      value = value + 0x2e;\n    }\n    decoded_char = (&DAT_0800a908)[value];\n  }\n  else {\n    decoded_char = -1;\n  }\n  if (decoded_char == -1) {\n    result = 0;\n  }\n  else {\n    result = execute_program_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return result >> (0xc - DAT_20000088 & 0xff);\n      }\n      return result << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008880": "decode_value_08008880",
                "param_1": "value",
                "bVar1": "is_less_than_3c",
                "cVar2": "decoded_char",
                "uVar3": "result"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_data_080088e0",
            "code": "\nvoid process_data_080088e0(uint index,uint value)\n\n{\n  int comparison_result;\n  int mapping_value;\n  \n  if (index < 0x3c) {\n    mapping_value = (int)(char)(&DAT_0800a908)[index];\n  }\n  else {\n    mapping_value = -1;\n  }\n  if (mapping_value != -1) {\n    comparison_result = compare_parameters(mapping_value,&DAT_0800a6cc);\n    if (comparison_result == 0) {\n      process_data_080088e0_func(index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        process_data_080088e0_func_alt(index,0);\n      }\n      else {\n        process_data_080088e0_func_alt(index,1);\n      }\n    }\n    else {\n      comparison_result = retrieve_bit_value(mapping_value,&DAT_200006d8);\n      if (comparison_result == 0) {\n        update_bit(mapping_value,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_and_update(mapping_value,0x3e418,0xff,value,comparison_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "comparison_result",
                "iVar2": "mapping_value",
                "compare_params_0800738a": "compare_parameters",
                "process_data_08008990": "process_data_func",
                "process_data_08008a24": "process_data_func_alt",
                "retrieve_bit_value_08006b28": "retrieve_bit_value",
                "update_bit_08006b3e": "update_bit",
                "initialize_and_update_values_08007118": "initialize_and_update"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_data_08008990",
            "code": "\nvoid processData_08008990(uint index,undefined4 flagType,undefined4 param,undefined1 *data)\n\n{\n  int bitValue;\n  undefined1 *flagArray;\n  int flagIndex;\n  \n  if (index < 0x3c) {\n    flagIndex = (int)(char)(&DAT_0800a908)[index];\n    flagArray = &DAT_0800a908;\n  }\n  else {\n    flagIndex = -1;\n    flagArray = data;\n  }\n  if (flagIndex != -1) {\n    bitValue = retrieve_bit_value_08006b28(flagIndex,&DAT_200006d8,param,flagArray,data);\n    if (bitValue != 0) {\n      bitValue = compare_params_0800738a(flagIndex,&DAT_0800a6cc);\n      if (bitValue != 0) {\n        process_memory_080071e4(flagIndex);\n      }\n      update_data_08006b5c(flagIndex,&DAT_200006d8);\n    }\n    switch(flagType) {\n    case 0:\n      initialize_flags_08007258(flagIndex,0);\n      break;\n    case 1:\n      initialize_flags_08007258(flagIndex,1,0);\n      break;\n    case 2:\n      initialize_flags_08007258(flagIndex,0,1);\n      break;\n    case 3:\n      initialize_flags_08007258(flagIndex,0,2);\n    }\n    update_bit_08006b3e(flagIndex,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "index",
                "param_2": "flagType",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "bitValue",
                "puVar2": "flagArray",
                "iVar3": "flagIndex"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "process_data_08008a24",
            "code": "\nvoid processData_08008a24(uint inputIndex,undefined4 param2,undefined4 param3,undefined1 *dataPtr)\n\n{\n  int bitValue;\n  undefined4 memoryAddress;\n  undefined1 *arrayPtr;\n  uint value;\n  \n  if (inputIndex < 0x3c) {\n    value = (uint)(char)(&DAT_0800a908)[inputIndex];\n    arrayPtr = &DAT_0800a908;\n  }\n  else {\n    value = 0xffffffff;\n    arrayPtr = dataPtr;\n  }\n  if ((value != 0xffffffff) &&\n     (bitValue = retrieve_bit_value_08006b28(value,&DAT_200006ec,param3,arrayPtr,dataPtr), bitValue != 0)) {\n    memoryAddress = get_memory_address_08006b7c((value << 0x18) >> 0x1c);\n    store_param_based_on_condition_080072d8(memoryAddress,1 << (value & 0xf) & 0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "inputIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "dataPtr",
                "iVar1": "bitValue",
                "uVar2": "memoryAddress",
                "puVar3": "arrayPtr",
                "uVar4": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "validate_input_08008a6c",
            "code": "\nchar validate_input_08008a6c(uint input_value)\n\n{\n  char isValid;\n  int bitValue;\n  undefined4 memAddress;\n  uint charValue;\n  \n  if (input_value < 0x3c) {\n    charValue = (uint)(char)(&DAT_0800a908)[input_value];\n  }\n  else {\n    charValue = 0xffffffff;\n  }\n  if (charValue == 0xffffffff) {\n    isValid = '\\0';\n  }\n  else {\n    bitValue = retrieve_bit_value_08006b28(charValue,&DAT_200006ec);\n    if (bitValue == 0) {\n      isValid = '\\0';\n    }\n    else {\n      memAddress = get_memory_address_08006b7c((charValue << 0x18) >> 0x1c);\n      isValid = validate_input_08008a6cs_080072f0(memAddress,1 << (charValue & 0xf) & 0xffff);\n    }\n  }\n  if (isValid != '\\0') {\n    isValid = '\\x01';\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "validate_input_08008a6c",
                "param_1": "input_value",
                "cVar1": "isValid",
                "iVar2": "bitValue",
                "uVar3": "memAddress",
                "uVar4": "charValue"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_data_08008abc",
            "code": "\nvoid initializeData_08008abc(void)\n\n{\n  initializeData_08008abcHelper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_data_08008abc",
                "initialize_data_0800723c": "initializeDataHelper"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_offset_08008afa",
            "code": "\nushort calculate_offset_08008afa(int base_address)\n\n{\n  return (*(short *)(base_address + 0x134) + 0x40) - *(short *)(base_address + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_offset_08008afa",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "process_input_combination_08008b66",
            "code": "\nvoid processInputCombination_08008b66(int input)\n\n{\n  int result;\n  ushort updatedIndex;\n  undefined valueToStore;\n  \n  result = check_input_combination_08008600(input,&valueToStore);\n  if ((result == 0) &&\n     (updatedIndex = *(short *)(input + 0x60) + 1U & 0x3f, updatedIndex != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = valueToStore;\n    *(ushort *)(input + 0x60) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "process_input_combination_08008b66",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "updatedIndex",
                "local_9": "valueToStore"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_parameters_08008c20",
            "code": "\nvoid initializeParameters_08008c20(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_parameters_08008c20",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_hardware_serial_08008c44",
            "code": "\nvoid initializeHardwareSerial_08008c44(int serialAddress,undefined4 baudRate,byte options)\n\n{\n  uint invalidOption;\n  byte optionBits;\n  int uartState;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialAddress + 0x11c) = baudRate;\n  *(byte *)(serialAddress + 0x140) = options;\n  optionBits = options & 7;\n  if (optionBits == 4) {\n    uartState = 7;\n  }\n  else if (optionBits == 6) {\n    uartState = 8;\n  }\n  else if (optionBits == 2) {\n    uartState = 6;\n  }\n  else {\n    uartState = 0;\n  }\n  if ((options & 0x30) == 0x30) {\n    *(undefined4 *)(serialAddress + 0x128) = 0x600;\n    uartState = uartState + 1;\n  }\n  else if ((options & 0x20) == 0) {\n    *(undefined4 *)(serialAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialAddress + 0x128) = 0x400;\n    uartState = uartState + 1;\n  }\n  if ((options & 8) == 0) {\n    *(undefined4 *)(serialAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialAddress + 0x124) = 0x2000;\n  }\n  if (uartState == 8) {\n    *(undefined4 *)(serialAddress + 0x120) = 0;\n  }\n  else if (uartState == 9) {\n    *(undefined4 *)(serialAddress + 0x120) = 0x1000;\n  }\n  else {\n    uartState = 0;\n  }\n  if (uartState != 0) {\n    initialize_uart_pins_08008078(serialAddress + 0xd4);\n    process_input_0800863c(serialAddress + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTable = (code *)0x8008cee;\n  process_assertion_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (invalidOption < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[invalidOption];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0,invalidOption,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_hardware_serial_08008c44",
                "param_1": "serialAddress",
                "param_2": "baudRate",
                "param_3": "options",
                "extraout_r1": "invalidOption",
                "bVar1": "optionBits",
                "iVar2": "uartState",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "map_value_and_call_function_08008d00",
            "code": "\nvoid mapValueAndCallFunction_08008d00(int baseAddress,uint index)\n\n{\n  undefined value;\n  code *functionTable;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "map_value_and_call_function_08008d00",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "functionTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_value_08008d18",
            "code": "\nvoid setByteValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_and_call_function_08008d30",
            "code": "\nundefined4 *\ninitialize_and_call_function_08008d30(undefined4 *output,undefined4 input_data,undefined4 config_data,undefined4 additional_data)\n\n{\n  undefined value;\n  \n  output[1] = 0;\n  output[2] = 1000;\n  *output = &PTR_LAB_08008ba4_1_0800aab8;\n  if (output == (undefined4 *)&DAT_20000700) {\n    map_value_and_call_function_08008d00(&DAT_20000700,0,config_data,&DAT_20000700,additional_data);\n    set_byte_value_08008d18(&DAT_20000700,1);\n  }\n  else {\n    value = find_integer_or_failure(input_data,&DAT_0800a81c);\n    *(undefined *)((int)output + 0x12d) = value;\n    value = find_integer_or_failure(input_data,&DAT_0800a864);\n    *(undefined *)(output + 0x4b) = value;\n  }\n  initialize_parameters(output);\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_and_call_function_08008d30",
                "param_1": "output",
                "param_2": "input_data",
                "param_3": "config_data",
                "param_4": "additional_data",
                "uVar1": "value",
                "find_integer_or_failure_0800734a": "find_integer_or_failure",
                "initialize_parameters_08008c20": "initialize_parameters"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param_1_is_1_08008d8c",
            "code": "\nvoid initialize_if_param_1_is_1_08008d8c(int is_param_1,int param_2_value,undefined4 param_3_value,undefined4 param_4_value)\n\n{\n  if (is_param_1 != 1) {\n    return;\n  }\n  if (param_2_value == 0xffff) {\n    initialize_function_with_param(&DAT_20000700,0x40004400,param_3_value,0xffff,param_4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param_1_is_1_08008d8c",
                "param_1": "is_param_1",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "initialize_and_call_function_08008d30": "initialize_function_with_param"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPointer,undefined value_2,undefined value_3,undefined value_4,\n                 undefined value_5)\n\n{\n  *dataPointer = &DAT_0800ab0c;\n  *(undefined *)(dataPointer + 1) = value_2;\n  *(undefined *)((int)dataPointer + 5) = value_3;\n  *(undefined *)((int)dataPointer + 6) = value_4;\n  *(undefined *)((int)dataPointer + 7) = value_5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPointer",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "param_5": "value_5"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_if_condition_08008e14",
            "code": "\nvoid initialize_if_condition_08008e14(int condition_param,int value_param)\n\n{\n  if ((condition_param == 1) && (value_param == 0xffff)) {\n    initialize_data(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_if_condition_08008e14",
                "param_1": "condition_param",
                "param_2": "value_param",
                "initialize_data_08008df8": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_new_value_08008ef4",
            "code": "\nint calculate_new_value_08008ef4(int initial_value,int old_value,int final_value,int initial_offset,int final_offset)\n\n{\n  return (uint)((final_offset - initial_offset) * (initial_value - old_value)) / (uint)(final_value - old_value) + initial_offset;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "initial_value",
                "param_2": "old_value",
                "param_3": "final_value",
                "param_4": "initial_offset",
                "param_5": "final_offset"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_system_and_device_08008f0e",
            "code": "\nvoid initializeSystemAndDevice_08008f0e(void)\n\n{\n  updateControlRegister(3);\n  initializeSystemAndDevice_08008f0e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_system_and_device_08008f0e",
                "update_control_register_08003f0c": "updateControlRegister",
                "initialize_system_and_device_080036a2": "initializeSystemAndDevice"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "process_data_continuously_08008f1c",
            "code": "\nvoid process_data_continuously_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_firmware();\n  do {\n    decode_and_process_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "process_data_continuously_08008f1c",
                "initialize_firmware_08001b48": "initialize_firmware",
                "decode_and_process_data_080022f8": "decode_and_process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_binary_shifts_08008f3c",
            "code": "\nchar count_binary_shifts_08008f3c(uint input_value)\n\n{\n  char shift_count;\n  \n  shift_count = '\\0';\n  for (; input_value != 1; input_value = input_value >> 1) {\n    shift_count = shift_count + '\\x01';\n  }\n  return shift_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_binary_shifts_08008f3c",
                "param_1": "input_value",
                "cVar1": "shift_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_parameters_08008f78",
            "code": "\nvoid initialize_parameters_08008f78(int flag,int code,undefined4 constant1,undefined4 constant2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (code == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_left_and_convert_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,constant2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_parameters_08008f78",
                "param_1": "flag",
                "param_2": "code",
                "param_3": "constant1",
                "param_4": "constant2"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int data)\n\n{\n  int shiftCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  handle_and_process_data_0800a18c();\n  shiftCount = count_binary_shifts_08008f3c();\n  if ((&DAT_20000858)[shiftCount * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "data",
                "iVar1": "shiftCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int shiftCount;\n  \n  shiftCount = getShiftCount();\n  if ((&DAT_20000858)[shiftCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "shiftCount",
                "count_binary_shifts_08008f3c": "getShiftCount",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_left_and_convert_080090c2",
            "code": "\nvoid shift_left_and_convert_080090c2(undefined4 destination,undefined4 source)\n\n{\n  shift_left_and_convert_080090c2_08009108(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_left_and_convert_080090c2",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "process_assertion_080090cc",
            "code": "\nvoid processAssertion_080090cc(undefined4 file,undefined4 line,char *errorMessage,undefined4 function)\n\n{\n  undefined4 fileDescriptor;\n  char *additionalInfo;\n  undefined8 processedData;\n  undefined4 functionDescriptor;\n  \n  fileDescriptor = *(undefined4 *)(DAT_20000090 + 0xc);\n  functionDescriptor = function;\n  if (errorMessage == (char *)0x0) goto LAB_080090f0;\n  additionalInfo = \", function: \";\n  do {\n    sendAssertionData(fileDescriptor,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additionalInfo,errorMessage,functionDescriptor);\n    processedData = handleProcessedData();\n    line = (undefined4)((ulonglong)processedData >> 0x20);\n    fileDescriptor = (undefined4)processedData;\nLAB_080090f0:\n    errorMessage = \"\";\n    additionalInfo = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "process_assertion_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "errorMessage",
                "param_4": "function",
                "uVar1": "fileDescriptor",
                "uVar4": "functionDescriptor",
                "pcVar2": "additionalInfo",
                "uVar3": "processedData",
                "process_and_send_data_08009124": "sendAssertionData",
                "process_and_handle_data_08009b5c": "handleProcessedData"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_left_and_convert_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftLeftAndConvert_08009108(undefined4 input,uint value)\n\n{\n  return (unsignedLongLong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_left_and_convert_08009108",
                "param_1": "input",
                "param_2": "value",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_and_send_data_08009124",
            "code": "\nvoid processAndSendData_08009124(undefined4 data1,undefined4 data2,undefined4 ptr1,undefined4 ptr2)\n\n{\n  undefined4 ptr3;\n  undefined4 ptr4;\n  \n  ptr3 = ptr1;\n  ptr4 = ptr2;\n  processData(DAT_20000090,data1,data2,&ptr3,data1,&ptr3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_and_send_data_08009124",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "uStack_8": "ptr3",
                "uStack_4": "ptr4",
                "process_data_0800937c": "processData"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "initialize_memory_08009190",
            "code": "\nvoid initializeMemory_08009190(undefined4 data)\n\n{\n  allocate_and_initialize_memory_08009270(DAT_20000090,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "initialize_memory_08009190",
                "param_1": "data"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "process_data_080091a0",
            "code": "\nvoid process_data_080091a0(undefined4 input_data)\n\n{\n  reverse_and_process(DAT_20000090,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "process_data_080091a0",
                "param_1": "input_data",
                "reverse_and_improve_080091d8": "reverse_and_process"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copyData_080091b0(int inputOffset,undefined *inputData,int inputLength)\n\n{\n  undefined *outputDataEnd;\n  undefined *outputData;\n  \n  outputData = (undefined *)(inputOffset + -1);\n  outputDataEnd = inputData + inputLength;\n  for (; inputData != outputDataEnd; inputData = inputData + 1) {\n    outputData = outputData + 1;\n    *outputData = *inputData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "inputOffset",
                "param_2": "inputData",
                "param_3": "inputLength",
                "puVar1": "outputDataEnd",
                "puVar2": "outputData"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_with_byte_080091c6",
            "code": "\nvoid fillMemoryWithByte_080091c6(undefined *destination,undefined byteValue,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + size;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = byteValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_with_byte_080091c6",
                "param_1": "destination",
                "param_2": "byteValue",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "reverse_and_improve_080091d8",
            "code": "\nvoid reverse_and_improve_080091d8(undefined4 *input_array,int array_length,undefined4 param_3,undefined4 param_4)\n\n{\n  int **extra_result_1;\n  int **temp_ptr_1;\n  int **temp_ptr_2;\n  int *temp_var_1;\n  int **temp_ptr_3;\n  int **temp_ptr_4;\n  \n  if (array_length == 0) {\n    return;\n  }\n  temp_ptr_4 = (int **)(array_length + -4);\n  if (*(int *)(array_length + -4) < 0) {\n    temp_ptr_4 = (int **)((int)temp_ptr_4 + *(int *)(array_length + -4));\n  }\n  FUNC_08009f48();\n  temp_ptr_2 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    temp_ptr_4[1] = (int *)0x0;\n    temp_ptr_1 = extra_result_1;\n    DAT_2000098c = temp_ptr_4;\n  }\n  else {\n    temp_ptr_2 = DAT_2000098c;\n    if (temp_ptr_4 < DAT_2000098c) {\n      temp_ptr_1 = (int **)*temp_ptr_4;\n      temp_ptr_2 = (int **)((int)temp_ptr_4 + (int)temp_ptr_1);\n      if (DAT_2000098c == temp_ptr_2) {\n        temp_var_1 = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        temp_ptr_2 = (int **)((int)temp_var_1 + (int)temp_ptr_1);\n        *temp_ptr_4 = (int *)temp_ptr_2;\n      }\n      temp_ptr_4[1] = (int *)DAT_2000098c;\n      DAT_2000098c = temp_ptr_4;\n    }\n    else {\n      do {\n        temp_ptr_3 = temp_ptr_2;\n        temp_ptr_2 = (int **)temp_ptr_3[1];\n        if (temp_ptr_2 == (int **)0x0) break;\n      } while (temp_ptr_2 <= temp_ptr_4);\n      temp_ptr_1 = (int **)*temp_ptr_3;\n      if ((int **)((int)temp_ptr_3 + (int)temp_ptr_1) == temp_ptr_4) {\n        temp_ptr_1 = (int **)((int)temp_ptr_1 + (int)*temp_ptr_4);\n        *temp_ptr_3 = (int *)temp_ptr_1;\n        if (temp_ptr_2 == (int **)((int)temp_ptr_3 + (int)temp_ptr_1)) {\n          temp_var_1 = *temp_ptr_2;\n          temp_ptr_2 = (int **)temp_ptr_2[1];\n          temp_ptr_1 = (int **)((int)temp_ptr_1 + (int)temp_var_1);\n          *temp_ptr_3 = (int *)temp_ptr_1;\n          temp_ptr_3[1] = (int *)temp_ptr_2;\n        }\n      }\n      else if (temp_ptr_4 < (int **)((int)temp_ptr_3 + (int)temp_ptr_1)) {\n        *input_array = 0xc;\n      }\n      else {\n        temp_ptr_1 = (int **)((int)temp_ptr_4 + (int)*temp_ptr_4);\n        if (temp_ptr_2 == temp_ptr_1) {\n          temp_var_1 = *temp_ptr_2;\n          temp_ptr_2 = (int **)temp_ptr_2[1];\n          temp_ptr_1 = (int **)((int)temp_var_1 + (int)*temp_ptr_4);\n          *temp_ptr_4 = (int *)temp_ptr_1;\n        }\n        temp_ptr_4[1] = (int *)temp_ptr_2;\n        temp_ptr_3[1] = (int *)temp_ptr_4;\n      }\n    }\n  }\n  FUNC_08009f4a(input_array,temp_ptr_1,temp_ptr_2,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "reverse_and_improve_080091d8",
                "param_1": "input_array",
                "param_2": "array_length",
                "extraout_r1": "extra_result_1",
                "ppiVar1": "temp_ptr_1",
                "ppiVar2": "temp_ptr_2",
                "piVar3": "temp_var_1",
                "ppiVar4": "temp_ptr_3",
                "ppiVar5": "temp_ptr_4"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_and_initialize_memory_08009270",
            "code": "\nuint allocate_and_initialize_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint block_size;\n  \n  block_size = (size + 3 & 0xfffffffc) + 8;\n  if (block_size < 0xc) {\n    block_size = 0xc;\n  }\n  if (((int)block_size < 0) || (block_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    last_block = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - block_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = block_size;\n          last_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory_allocation_08009918(result);\n    }\n    current_block = (uint *)initialize_memory_allocation_08009918(result,block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (offset = initialize_memory_allocation_08009918(result,(int)last_block - (int)current_block), offset != -1)))) {\n      *last_block = block_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      block_size = (int)last_block + 0xbU & 0xfffffff8;\n      offset = block_size - (int)(last_block + 1);\n      if (offset != 0) {\n        *(int *)((int)last_block + offset) = -offset;\n        return block_size;\n      }\n      return block_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_and_initialize_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "last_block",
                "uVar6": "block_size"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_data_0800932c",
            "code": "\nuint process_input_data_0800932c(int input_param,byte input_byte,byte **input_ptr)\n\n{\n  int temp_var;\n  byte *ptr_pbVar2;\n  byte *ptr_pbVar3;\n  uint result;\n  \n  ptr_pbVar2 = input_ptr[2] + -1;\n  input_ptr[2] = ptr_pbVar2;\n  if ((-1 < (int)ptr_pbVar2) ||\n     (((int)input_ptr[6] <= (int)ptr_pbVar2 && (ptr_pbVar2 = (byte *)(uint)input_byte, ptr_pbVar2 != (byte *)0xa))))\n  {\n    ptr_pbVar2 = *input_ptr;\n    *input_ptr = ptr_pbVar2 + 1;\n    *ptr_pbVar2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    init_memory();\n  }\n  if (input_ptr == (byte **)&DAT_0800aba4) {\n    input_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (input_ptr == (byte **)&DAT_0800abc4) {\n    input_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (input_ptr == (byte **)&DAT_0800ab84) {\n    input_ptr = *(byte ***)(input_param + 0xc);\n  }\n  input_ptr[2] = input_ptr[6];\n  ptr_pbVar3 = (byte *)(uint)*(ushort *)(input_ptr + 3);\n  temp_var = (int)ptr_pbVar3 << 0x1c;\n  if (((temp_var < 0) && (ptr_pbVar3 = input_ptr[4], ptr_pbVar3 != (byte *)0x0)) ||\n     (temp_var = process_data_08009a80(input_param,input_ptr,temp_var,ptr_pbVar3,ptr_pbVar2), temp_var == 0)) {\n    result = (uint)input_byte;\n    temp_var = (int)*input_ptr - (int)input_ptr[4];\n    if ((temp_var < (int)input_ptr[5]) || (temp_var = process_data_08009c7c(input_param,input_ptr), temp_var == 0)) {\n      input_ptr[2] = input_ptr[2] + -1;\n      ptr_pbVar2 = *input_ptr;\n      *input_ptr = ptr_pbVar2 + 1;\n      *ptr_pbVar2 = input_byte;\n      if ((byte *)(temp_var + 1) != input_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var = process_data_08009c7c(input_param,input_ptr);\n      if (temp_var == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_data_0800932c",
                "param_1": "input_param",
                "param_2": "input_byte",
                "param_3": "input_ptr",
                "iVar1": "temp_var",
                "pbVar2": "ptr_pbVar2",
                "pbVar3": "ptr_pbVar3",
                "uVar4": "result",
                "initialize_memory_if_necessary_08009d50": "init_memory"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_and_return_result_08009358",
            "code": "\nint processAndReturnResult_08009358(undefined4 input1,undefined4 input2,undefined *data,int size)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentSize;\n  \n  endPtr = data + size;\n  currentSize = size;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_input_data_0800932c(input1,*data,input2,size,currentSize);\n    size = result + 1;\n    data = data + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_and_return_result_08009358",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentSize"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint processData_0800937c(int input_1,undefined4 *input_2,byte *buffer,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool flag;\n  byte *ptr_1;\n  byte *ptr_2;\n  int temp;\n  int index;\n  int *output_ptr;\n  uint flags;\n  int limit;\n  undefined4 temp_2;\n  int count;\n  int total_count;\n  byte character;\n  undefined var_1;\n  undefined var_2;\n  undefined var_3;\n  undefined4 var_4;\n  \n  output_ptr = output;\n  if ((input_1 != 0) && (*(int *)(input_1 + 0x18) == 0)) {\n    initialize_memory_if_necessary_08009d50();\n  }\n  if (input_2 == &DAT_0800aba4) {\n    input_2 = *(undefined4 **)(input_1 + 4);\n  }\n  else if (input_2 == (undefined4 *)&DAT_0800abc4) {\n    input_2 = *(undefined4 **)(input_1 + 8);\n  }\n  else if (input_2 == (undefined4 *)&DAT_0800ab84) {\n    input_2 = *(undefined4 **)(input_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(input_2 + 3) << 0x1c)) || (input_2[4] == 0)) &&\n     (index = process_data_08009a80(input_1,input_2), index != 0)) {\n    return -1;\n  }\n  total_count = 0;\n  var_1 = 0x20;\n  var_2 = 0x30;\n  ptr_1 = buffer;\nLAB_080093be:\n  ptr_2 = ptr_1;\n  if (*ptr_2 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  ptr_1 = ptr_2 + 1;\n  if (*ptr_2 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  index = (int)ptr_2 - (int)buffer;\n  if (index != 0) {\n    result = process_and_return_result_08009358(input_1,input_2,buffer,index);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(input_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_count;\n    }\n    total_count = total_count + index;\n  }\n  if (*ptr_2 == 0) goto LAB_08009568;\n  flags = 0;\n  count = 0;\n  limit = -1;\n  temp_2 = 0;\n  var_3 = 0;\n  var_4 = 0;\n  ptr_1 = ptr_2 + 1;\n  while( true ) {\n    index = find_character_index_08009f2c(\"#-0+ \",*ptr_1);\n    buffer = ptr_1 + 1;\n    if (index == 0) break;\n    flags = 1 << (index + 0xf7ff54b0U & 0xff) | flags;\n    ptr_1 = buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    var_3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    var_3 = 0x2b;\n  }\n  if (*ptr_1 == 0x2a) {\n    ptr = output_ptr + 1;\n    index = *output_ptr;\n    output_ptr = ptr;\n    if (index < 0) {\n      count = -index;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    flag = false;\n    index = count;\n    buffer = ptr_1;\n    while( true ) {\n      if (9 < *buffer - 0x30) break;\n      index = index * 10 + (*buffer - 0x30);\n      flag = true;\n      buffer = buffer + 1;\n    }\n    if (!flag) goto LAB_080094a6;\n  }\n  count = index;\nLAB_080094a6:\n  if (*buffer == 0x2e) {\n    if (buffer[1] == 0x2a) {\n      buffer = buffer + 2;\n      ptr = output_ptr + 1;\n      limit = *output_ptr;\n      output_ptr = ptr;\n      if (limit < 0) {\n        limit = -1;\n      }\n    }\n    else {\n      flag = false;\n      index = 0;\n      limit = 0;\n      while( true ) {\n        buffer = buffer + 1;\n        if (9 < *buffer - 0x30) break;\n        index = index * 10 + (*buffer - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        limit = index;\n      }\n    }\n  }\n  index = find_character_index_08009f2c(&DAT_0800ab56,*buffer,3);\n  if (index != 0) {\n    buffer = buffer + 1;\n    flags = flags | 0x40 << (index + 0xf7ff54aaU & 0xff);\n  }\n  character = *buffer;\n  buffer = buffer + 1;\n  index = find_character_index_08009f2c(\"efgEFG\",character,6);\n  if (index == 0) {\n    temp = parse_and_process_data_08009698(input_1,&flags,input_2,0x8009359,&output_ptr);\n    if (temp == -1) goto LAB_08009568;\n  }\n  else {\n    output_ptr = (int *)(((int)output_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_count = total_count + temp;\n  ptr_1 = buffer;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_data_0800937c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "flag",
                "pbVar4": "ptr_1",
                "pbVar5": "ptr_2",
                "unaff_r9": "temp",
                "iVar6": "index",
                "local_8c": "output_ptr",
                "local_88": "flags",
                "local_84": "limit",
                "local_80": "temp_2",
                "local_7c": "count",
                "local_74": "total_count",
                "local_70": "character",
                "local_6f": "var_1",
                "local_6e": "var_2",
                "local_45": "var_3",
                "local_30": "var_4"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input_data,uint *data_array,uint *output_size,undefined4 param_4,code *callback_function)\n\n{\n  int index;\n  int callback_result;\n  uint max_size;\n  uint increment;\n  bool has_flag;\n  \n  max_size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_size = data_array[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output_size); index = index + 1) {\n      callback_result = (*callback_function)(input_data,param_4,(int)data_array + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  increment = max_size;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_size + 0x43) = 0x30;\n    increment = max_size + 2;\n    *(undefined *)((int)data_array + max_size + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  index = (*callback_function)(input_data,param_4,(int)data_array + 0x43,increment);\n  if (index != -1) {\n    max_size = data_array[3];\n    has_flag = (*data_array & 6) != 4;\n    if (has_flag) {\n      max_size = 0;\n    }\n    increment = 0;\n    if (!has_flag) {\n      max_size = max_size - *output_size;\n    }\n    if (!has_flag) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_size = max_size + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_size == increment) {\n        return 0;\n      }\n      index = (*callback_function)(input_data,param_4,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      increment = increment + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input_data",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_5": "callback_function",
                "iVar1": "index",
                "iVar2": "callback_result",
                "uVar3": "max_size",
                "uVar4": "increment",
                "bVar5": "has_flag"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "parse_and_process_data_08009698",
            "code": "\nuint parseAndProcessData_08009698(undefined4 input_param,uint *data_array,undefined4 input_value,code *callback_function,uint **ptr_to_ptr_data)\n\n{\n  byte byte_value;\n  int index_variable;\n  uint *ptr_variable;\n  int iteration_variable;\n  char *character_string;\n  uint temp_value;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint secondary_value;\n  char *temp_char_ptr;\n  char *char_ptr;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data_array + 6);\n  char_ptr = (char *)((int)data_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          character_string = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp_value = *data_array;\n          ptr_variable = *ptr_to_ptr_data;\n          *ptr_to_ptr_data = ptr_variable + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr_variable;\n          }\n          else {\n            result = *ptr_variable;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *data_array = temp_value | 0x20;\n          }\n          if (result == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          result = *data_array;\n          ptr_variable = *ptr_to_ptr_data;\n          if ((result & 0x80) == 0) {\n            *ptr_to_ptr_data = ptr_variable + 1;\n            if ((result & 0x40) == 0) goto LAB_080096e8;\n            result = (uint)(short)*(ushort *)ptr_variable;\n          }\n          else {\n            *ptr_to_ptr_data = ptr_variable + 1;\nLAB_080096e8:\n            result = *ptr_variable;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          character_string = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        secondary_value = data_array[1];\n        data_array[2] = secondary_value;\n        temp_char_ptr = char_ptr;\n        if ((int)secondary_value < 0) {\n          if (result != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data_array + 0x42) = *character_string;\n          temp_char_ptr = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (result == 0) {\n            if (secondary_value != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              secondary_value = result / temp_value;\n              temp_char_ptr = temp_char_ptr + -1;\n              *temp_char_ptr = character_string[result - temp_value * secondary_value];\n              result = secondary_value;\n            } while (secondary_value != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          temp_char_ptr[-1] = '0';\n          temp_char_ptr = temp_char_ptr + -1;\n        }\n        data_array[4] = (int)char_ptr - (int)temp_char_ptr;\n        char_ptr = temp_char_ptr;\n        goto LAB_080097be;\n      }\n      ptr_variable = *ptr_to_ptr_data;\n      *ptr_to_ptr_data = ptr_variable + 1;\n      *(char *)((int)data_array + 0x42) = (char)*ptr_variable;\nLAB_08009728:\n      char_ptr = (char *)((int)data_array + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            result = *data_array;\n            ptr_variable = *ptr_to_ptr_data;\n            if ((result & 0x80) == 0) {\n              *ptr_to_ptr_data = ptr_variable + 1;\n              if ((result & 0x40) == 0) goto LAB_0800975c;\n              result = (uint)*(ushort *)ptr_variable;\n            }\n            else {\n              *ptr_to_ptr_data = ptr_variable + 1;\nLAB_0800975c:\n              result = *ptr_variable;\n            }\n            if (byte_value == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            character_string = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800970e:\n            character_string = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data_array + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*ptr_to_ptr_data;\n      *ptr_to_ptr_data = (uint *)(ppcVar8 + 1);\n      char_ptr = *ppcVar8;\n      index_variable = find_character_index_08009f2c(char_ptr,0,data_array[1]);\n      if (index_variable != 0) {\n        data_array[1] = index_variable - (int)char_ptr;\n      }\n      result = data_array[1];\n    }\n    data_array[4] = result;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  result = *data_array;\n  ppuVar7 = (uint **)*ptr_to_ptr_data;\n  temp_value = data_array[5];\n  if ((result & 0x80) == 0) {\n    *ptr_to_ptr_data = (uint *)(ppuVar7 + 1);\n    ptr_variable = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr_variable = (short)temp_value;\n  }\n  else {\n    *ptr_to_ptr_data = (uint *)(ppuVar7 + 1);\n    ptr_variable = *ppuVar7;\nLAB_0800983e:\n    *ptr_variable = temp_value;\n  }\nLAB_08009852:\n  data_array[4] = 0;\nLAB_080097be:\n  index_variable = process_data_080095a8(input_param,data_array,local_array,input_value,callback_function);\n  if ((index_variable == -1) || (index_variable = (*callback_function)(input_param,input_value,char_ptr,data_array[4]), index_variable == -1)) {\nLAB_080097d2:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (index_variable = 0; index_variable < (int)(data_array[3] - local_array[0]); index_variable = index_variable + 1) {\n        iteration_variable = (*callback_function)(input_param,input_value,(int)data_array + 0x19,1);\n        if (iteration_variable == -1) goto LAB_080097d2;\n      }\n    }\n    result = data_array[3];\n    if ((int)data_array[3] < (int)local_array[0]) {\n      result = local_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009698": "parse_and_process_data_08009698",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "input_value",
                "param_4": "callback_function",
                "param_5": "ptr_to_ptr_data",
                "bVar1": "byte_value",
                "iVar2": "index_variable",
                "puVar3": "ptr_variable",
                "iVar4": "iteration_variable",
                "pcVar5": "character_string",
                "uVar6": "temp_value",
                "uVar9": "result",
                "uVar10": "secondary_value",
                "pcVar11": "temp_char_ptr",
                "pcVar12": "char_ptr",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "process_and_initialize_data_080098d8",
            "code": "\nvoid processAndInitializeData_080098d8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int dataPointer;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  dataPointer = DAT_20000090;\n  param1Copy = input1;\n  param2Copy = input2;\n  param3Copy = input3;\n  param4Copy = input4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_if_necessary_08009d50(DAT_20000090);\n  }\n  process_data_0800937c(dataPointer,*(undefined4 *)(dataPointer + 8),input1,&param2Copy,param1Copy,&param2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "process_and_initialize_data_080098d8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "dataPointer",
                "uVar2": "param1Copy",
                "uStack_c": "param2Copy",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_initialize_memory_08009908",
            "code": "\nint allocateAndInitializeMemory_08009908(int size,uint count)\n\n{\n  undefined4 dataPtr;\n  int memoryPtr;\n  uint sum;\n  \n  dataPtr = DAT_20000090;\n  if (size != 0) {\n    if (count == 0) {\n      reverse_and_improve_080091d8();\n      memoryPtr = 0;\n    }\n    else {\n      sum = calculate_sum_0800a154();\n      memoryPtr = size;\n      if ((sum < count) && (memoryPtr = allocate_and_initialize_memory_08009270(dataPtr,count), memoryPtr != 0)) {\n        copy_data_080091b0(memoryPtr,size,count);\n        reverse_and_improve_080091d8(dataPtr,size);\n      }\n    }\n    return memoryPtr;\n  }\n  memoryPtr = allocate_and_initialize_memory_08009270(DAT_20000090,count,count,&DAT_20000090);\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_initialize_memory_08009908",
                "param_1": "size",
                "param_2": "count",
                "uVar1": "dataPtr",
                "iVar2": "memoryPtr",
                "uVar3": "sum"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_allocation_08009918",
            "code": "\nvoid initializeMemoryAllocation_08009918(int *resultPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = allocate_memory_08008804(size);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_allocation_08009918",
                "param_1": "resultPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_first_occurrence_08009938",
            "code": "\nchar * findFirstOccurrence_08009938(char *string,char character)\n\n{\n  char *currentChar;\n  \n  do {\n    currentChar = string;\n    if (*currentChar == '\\0') {\n      if (character != '\\0') {\n        currentChar = (char *)0x0;\n      }\n      return currentChar;\n    }\n    string = currentChar + 1;\n  } while (character != *currentChar);\n  return currentChar;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_first_occurrence_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "currentChar"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_limit_08009954",
            "code": "\nvoid copy_string_with_limit_08009954(char *destination,char *source,int limit)\n\n{\n  char current_character;\n  int remaining_characters;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = destination;\n    remaining_characters = limit;\n    if (remaining_characters == 0) {\n      return;\n    }\n    current_character = *source;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_character;\n    source = source + 1;\n    limit = remaining_characters + -1;\n  } while (current_character != '\\0');\n  for (; destination != dest_ptr + remaining_characters; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_limit_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "limit",
                "cVar1": "current_character",
                "iVar2": "remaining_characters",
                "pcVar3": "dest_ptr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int search_value,int search_length,undefined4 search_param1,undefined4 search_param2)\n\n{\n  int occurrence;\n  int last_occurrence;\n  \n  if (search_length != 0) {\n    last_occurrence = 0;\n    while (occurrence = find_first_occurrence_08009938(search_value,search_length,search_param1,search_value,search_param2), occurrence != 0) {\n      search_value = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = find_first_occurrence_08009938();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "search_value",
                "param_2": "search_length",
                "param_3": "search_param1",
                "param_4": "search_param2",
                "iVar1": "occurrence",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string,char *substring)\n\n{\n  char *current_char;\n  char *substring_char;\n  char *temp_substring;\n  \n  if (*string == '\\0') {\n    if (*substring != '\\0') {\n      string = (char *)0x0;\n    }\n    return string;\n  }\n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      return (char *)0x0;\n    }\n    temp_substring = substring + -1;\n    substring_char = current_char + -1;\n    do {\n      temp_substring = temp_substring + 1;\n      if (*temp_substring == '\\0') {\n        return current_char;\n      }\n      substring_char = substring_char + 1;\n      string = current_char + 1;\n    } while (*substring_char == *temp_substring);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "current_char",
                "pcVar2": "substring_char",
                "pcVar3": "temp_substring"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint process_data_08009a80(undefined4 *output_param,undefined4 *input_param)\n\n{\n  int base_addr;\n  uint return_val;\n  ushort data_val;\n  \n  base_addr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_if_necessary_08009d50(DAT_20000090);\n  }\n  if (input_param == &DAT_0800aba4) {\n    input_param = *(undefined4 **)(base_addr + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_0800abc4) {\n    input_param = *(undefined4 **)(base_addr + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_0800ab84) {\n    input_param = *(undefined4 **)(base_addr + 0xc);\n  }\n  data_val = *(ushort *)(input_param + 3);\n  return_val = (uint)data_val;\n  if (-1 < (int)(return_val << 0x1c)) {\n    if (-1 < (int)(return_val << 0x1b)) {\n      *output_param = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(return_val << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          reverse_and_improve_function(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = value_check;\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((value_check == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    initialize_memory_and_permissions_function(output_param,input_param);\n  }\n  data_val = *(ushort *)(input_param + 3);\n  return_val = data_val & 1;\n  if ((data_val & 1) == 0) {\n    if (-1 < (int)((uint)data_val << 0x1e)) {\n      return_val = value;\n    }\n    new_val1 = return_val;\n  }\n  else {\n    new_val1 = 0;\n    new_val2 = -value;\n  }\n  if (value_check == 0) {\n    data_val = *(ushort *)(input_param + 3);\n    return_val = (int)(short)data_val & 0x80;\n    if (return_val != 0) {\nLAB_08009ab0:\n      *(ushort *)(input_param + 3) = data_val | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    return_val = 0;\n  }\n  return return_val;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output_param",
                "param_2": "input_param",
                "iVar1": "base_addr",
                "uVar2": "return_val",
                "uVar3": "data_val",
                "reverse_and_improve_080091d8": "reverse_and_improve_function",
                "param_2[4]": "value_check",
                "initialize_memory_and_permissions_08009eac": "initialize_memory_and_permissions_function",
                "param_2[5]": "value",
                "param_2[2]": "new_val1",
                "param_2[6]": "new_val2"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          reverse_and_improve_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_and_permissions_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_and_handle_data_08009b5c",
            "code": "\nvoid process_and_handle_data_08009b5c(void)\n\n{\n  uint *data_ptr;\n  int offset;\n  int *data_info_ptr;\n  int *auxiliary_data_info_ptr;\n  uint temp_var1;\n  ushort temp_var2;\n  int temp_var3;\n  code *callback_func_ptr;\n  int temp_var4;\n  uint temp_var5;\n  code *jump_table_func_ptr;\n  bool flag;\n  undefined8 loop_info;\n  \n  process_data_08009fe8(6);\n  jump_table_func_ptr = (code *)0x8009b6b;\n  loop_info = infinite_loop_08008868(1);\n  data_info_ptr = (int *)((ulonglong)loop_info >> 0x20);\n  data_ptr = (uint *)loop_info;\n  temp_var2 = *(ushort *)(data_info_ptr + 3);\n  temp_var1 = (uint)temp_var2;\n  if ((int)(temp_var1 << 0x1c) < 0) {\n    offset = data_info_ptr[4];\n    if (offset != 0) {\n      temp_var3 = temp_var1 << 0x1e;\n      flag = temp_var3 != 0;\n      if (flag) {\n        temp_var3 = 0;\n      }\n      temp_var4 = *data_info_ptr;\n      if (!flag) {\n        temp_var3 = data_info_ptr[5];\n      }\n      *data_info_ptr = offset;\n      data_info_ptr[2] = temp_var3;\n      for (temp_var4 = temp_var4 - offset; 0 < temp_var4; temp_var4 = temp_var4 - temp_var3) {\n        temp_var3 = (*(code *)data_info_ptr[10])(data_ptr,data_info_ptr[8],offset,temp_var4);\n        if (temp_var3 < 1) {\n          temp_var2 = *(ushort *)(data_info_ptr + 3);\n          goto LAB_08009c62;\n        }\n        offset = offset + temp_var3;\n      }\n    }\n  }\n  else if (((0 < data_info_ptr[1]) || (0 < data_info_ptr[0x10])) &&\n          (callback_func_ptr = (code *)data_info_ptr[0xb], callback_func_ptr != (code *)0x0)) {\n    temp_var5 = *data_ptr;\n    *data_ptr = 0;\n    if ((temp_var2 & 0x1000) == 0) {\n      offset = (*callback_func_ptr)(data_ptr,data_info_ptr[8],temp_var1 & 0x1000,1);\n      if ((offset == -1) && (temp_var1 = *data_ptr, temp_var1 != 0)) {\n        if ((temp_var1 != 0x1d) && (temp_var1 != 0x16)) {\n          *(ushort *)(data_info_ptr + 3) = *(ushort *)(data_info_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jump_table_func_ptr)();\n          return;\n        }\n        *data_ptr = temp_var5;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      offset = data_info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_info_ptr + 3) << 0x1d) < 0) &&\n       (offset = offset - data_info_ptr[1], data_info_ptr[0xd] != 0)) {\n      offset = offset - data_info_ptr[0x10];\n    }\n    offset = (*(code *)data_info_ptr[0xb])(data_ptr,data_info_ptr[8],offset,0);\n    temp_var2 = *(ushort *)(data_info_ptr + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(data_info_ptr + 3) = temp_var2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table_func_ptr)(0xffffffff);\n      return;\n    }\n    data_info_ptr[1] = 0;\n    *data_info_ptr = data_info_ptr[4];\n    if (((int)((uint)temp_var2 << 0x13) < 0) && ((offset != -1 || (*data_ptr == 0)))) {\n      data_info_ptr[0x15] = offset;\n    }\n    auxiliary_data_info_ptr = (int *)data_info_ptr[0xd];\n    *data_ptr = temp_var5;\n    if (auxiliary_data_info_ptr != (int *)0x0) {\n      if (auxiliary_data_info_ptr != data_info_ptr + 0x11) {\n        reverse_and_improve_080091d8(data_ptr);\n      }\n      data_info_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table_func_ptr)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table_func_ptr)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_and_handle_data_08009b5c",
                "puVar1": "data_ptr",
                "iVar2": "offset",
                "piVar3": "data_info_ptr",
                "piVar4": "auxiliary_data_info_ptr",
                "uVar5": "temp_var1",
                "uVar6": "temp_var2",
                "iVar7": "temp_var3",
                "pcVar8": "callback_func_ptr",
                "iVar9": "temp_var4",
                "uVar10": "temp_var5",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_func_ptr",
                "bVar11": "flag",
                "uVar12": "loop_info"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *dataBuffer,int *configParams)\n\n{\n  undefined4 returnValue;\n  int flag;\n  int *tempPtr;\n  uint tempVar1;\n  ushort tempVar2;\n  int tempVar3;\n  undefined4 unusedVar4;\n  undefined4 unusedVar5;\n  code *functionPointer;\n  int loopVar1;\n  uint tempVar4;\n  code *jumpTable;\n  bool boolVar;\n  \n  if (configParams[4] != 0) {\n    if ((dataBuffer != (uint *)0x0) && (dataBuffer[6] == 0)) {\n      initialize_memory_if_necessary_08009d50();\n    }\n    if (configParams == &DAT_0800aba4) {\n      configParams = (int *)dataBuffer[1];\n    }\n    else if (configParams == (int *)&DAT_0800abc4) {\n      configParams = (int *)dataBuffer[2];\n    }\n    else if (configParams == (int *)&DAT_0800ab84) {\n      configParams = (int *)dataBuffer[3];\n    }\n    if (*(short *)(configParams + 3) != 0) {\n      tempVar2 = *(ushort *)(configParams + 3);\n      tempVar1 = (uint)tempVar2;\n      if ((int)(tempVar1 << 0x1c) < 0) {\n        flag = configParams[4];\n        if (flag != 0) {\n          tempVar3 = tempVar1 << 0x1e;\n          boolVar = tempVar3 != 0;\n          if (boolVar) {\n            tempVar3 = 0;\n          }\n          loopVar1 = *configParams;\n          if (!boolVar) {\n            tempVar3 = configParams[5];\n          }\n          *configParams = flag;\n          configParams[2] = tempVar3;\n          for (loopVar1 = loopVar1 - flag; 0 < loopVar1; loopVar1 = loopVar1 - tempVar3) {\n            tempVar3 = (*(code *)configParams[10])(dataBuffer,configParams[8],flag,loopVar1,unusedVar4,unusedVar5);\n            if (tempVar3 < 1) {\n              tempVar2 = *(ushort *)(configParams + 3);\n              goto LAB_08009c62;\n            }\n            flag = flag + tempVar3;\n          }\n        }\n      }\n      else if (((0 < configParams[1]) || (0 < configParams[0x10])) &&\n              (functionPointer = (code *)configParams[0xb], functionPointer != (code *)0x0)) {\n        tempVar4 = *dataBuffer;\n        *dataBuffer = 0;\n        if ((tempVar2 & 0x1000) == 0) {\n          flag = (*functionPointer)(dataBuffer,configParams[8],tempVar1 & 0x1000,1);\n          if ((flag == -1) && (tempVar1 = *dataBuffer, tempVar1 != 0)) {\n            if ((tempVar1 != 0x1d) && (tempVar1 != 0x16)) {\n              *(ushort *)(configParams + 3) = *(ushort *)(configParams + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataBuffer = tempVar4;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          flag = configParams[0x15];\n        }\n        if (((int)((uint)*(ushort *)(configParams + 3) << 0x1d) < 0) &&\n           (flag = flag - configParams[1], configParams[0xd] != 0)) {\n          flag = flag - configParams[0x10];\n        }\n        flag = (*(code *)configParams[0xb])(dataBuffer,configParams[8],flag,0);\n        tempVar2 = *(ushort *)(configParams + 3);\n        if ((flag == -1) &&\n           ((0x1d < *dataBuffer || (-1 < (int)((0x20400001U >> (*dataBuffer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(configParams + 3) = tempVar2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        configParams[1] = 0;\n        *configParams = configParams[4];\n        if (((int)((uint)tempVar2 << 0x13) < 0) && ((flag != -1 || (*dataBuffer == 0)))) {\n          configParams[0x15] = flag;\n        }\n        tempPtr = (int *)configParams[0xd];\n        *dataBuffer = tempVar4;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != configParams + 0x11) {\n            reverse_and_improve_080091d8(dataBuffer);\n          }\n          configParams[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "dataBuffer",
                "param_2": "configParams",
                "uVar1": "returnValue",
                "iVar2": "flag",
                "piVar3": "tempPtr",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "iVar6": "tempVar3",
                "unaff_r4": "unusedVar4",
                "unaff_r5": "unusedVar5",
                "pcVar7": "functionPointer",
                "iVar8": "loopVar1",
                "uVar9": "tempVar4",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "boolVar"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            reverse_and_improve_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_memory_08009cdc",
            "code": "\nvoid initializeMemory_08009cdc(undefined4 *memoryArray,undefined2 value1,undefined2 value2)\n\n{\n  *memoryArray = 0;\n  memoryArray[1] = 0;\n  memoryArray[2] = 0;\n  *(undefined2 *)(memoryArray + 3) = value1;\n  memoryArray[0x19] = 0;\n  *(undefined2 *)((int)memoryArray + 0xe) = value2;\n  memoryArray[4] = 0;\n  memoryArray[5] = 0;\n  memoryArray[6] = 0;\n  fill_memory_with_byte_080091c6(memoryArray + 0x17,0,8);\n  memoryArray[8] = memoryArray;\n  memoryArray[9] = 0x800a021;\n  memoryArray[10] = 0x800a043;\n  memoryArray[0xb] = 0x800a07b;\n  memoryArray[0xc] = &LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_memory_08009cdc",
                "param_1": "memoryArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "code": "\nundefined4 * allocateAndInitializeMemory_08009d24(undefined4 inputParameter,int size)\n\n{\n  undefined4 *allocatedMemory;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  allocatedMemory = (undefined4 *)allocate_and_initialize_memory_08009270(inputParameter,offset + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = size;\n    allocatedMemory[2] = allocatedMemory + 3;\n    fill_memory_with_byte_080091c6(allocatedMemory + 3,0,offset + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "param_1": "inputParameter",
                "param_2": "size",
                "puVar1": "allocatedMemory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_memory_if_necessary_08009d50",
            "code": "\nvoid initializeMemoryIfNecessary_08009d50(undefined4 *paramList)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointer;\n  \n  if (paramList[6] == 0) {\n    paramList[0x12] = 0;\n    paramList[0x13] = 0;\n    paramList[0x14] = 0;\n    pointer = &DAT_20000094;\n    paramList[10] = &LAB_08009cd0_1;\n    if (paramList == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (paramList == &DAT_20000094) {\n      paramList[6] = pointer;\n    }\n    returnValue = allocateAndInitializeMemory();\n    paramList[1] = returnValue;\n    returnValue = allocateAndInitializeMemory(paramList);\n    paramList[2] = returnValue;\n    returnValue = allocateAndInitializeMemory(paramList);\n    paramList[3] = returnValue;\n    initializeMemory(paramList[1],4,0);\n    initializeMemory(paramList[2],9,1);\n    initializeMemory(paramList[3],0x12,2);\n    paramList[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_memory_if_necessary_08009d50",
                "param_1": "paramList",
                "uVar1": "returnValue",
                "puVar2": "pointer",
                "allocate_and_initialize_memory_08009db0": "allocateAndInitializeMemory",
                "initialize_memory_08009cdc": "initializeMemory"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "allocate_and_initialize_memory_08009db0",
            "code": "\nint * allocate_and_initialize_memory_08009db0(undefined4 *result,undefined4 unknown_param_2,undefined4 unknown_param_3,undefined4 byte_val)\n\n{\n  int *current_elem;\n  int *current_sub_elem;\n  int **head;\n  \n  if (DAT_200000ac == 0) {\n    initialize_memory_if_necessary_08009d50(&DAT_20000094);\n  }\n  head = (int **)&DAT_200000dc;\n  do {\n    current_sub_elem = head[2];\n    current_elem = head[1];\n    while (current_elem = (int *)((int)current_elem + -1), -1 < (int)current_elem) {\n      if (*(short *)(current_sub_elem + 3) == 0) {\n        *(undefined2 *)((int)current_sub_elem + 0xe) = 0xffff;\n        current_sub_elem[0x19] = 0;\n        *(undefined2 *)(current_sub_elem + 3) = 1;\n        *current_sub_elem = 0;\n        current_sub_elem[2] = 0;\n        current_sub_elem[1] = 0;\n        current_sub_elem[4] = 0;\n        current_sub_elem[5] = 0;\n        current_sub_elem[6] = 0;\n        fill_memory_with_byte_080091c6(current_sub_elem + 0x17,0,8,1,byte_val);\n        current_sub_elem[0xd] = 0;\n        current_sub_elem[0xe] = 0;\n        current_sub_elem[0x12] = 0;\n        current_sub_elem[0x13] = 0;\n        return current_sub_elem;\n      }\n      current_sub_elem = current_sub_elem + 0x1a;\n    }\n    if (*head == (int *)0x0) {\n      current_elem = (int *)allocate_and_initialize_memory_08009db0_08009d24(result,4);\n      *head = current_elem;\n      if (current_elem == (int *)0x0) {\n        *result = 0xc;\n        return (int *)0x0;\n      }\n    }\n    head = (int **)*head;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "allocate_and_initialize_memory_08009db0",
                "param_1": "result",
                "param_2": "unknown_param_2",
                "param_3": "unknown_param_3",
                "param_4": "byte_val",
                "piVar1": "current_elem",
                "piVar2": "current_sub_elem",
                "ppiVar3": "head"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_byte_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "initialize_and_check_memory_permissions_08009e64",
            "code": "\nundefined4 initialize_and_check_memory_permissions_08009e64(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auxiliary_stack [4];\n  uint local_variable;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (iVar1 = initialize_memory_page_0800a0ec(param1,(int)*(short *)(param2 + 0xe),auxiliary_stack), iVar1 < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      uVar2 = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *param4 = (uint)((local_variable & 0xf000) == 0x2000);\n  }\n  uVar2 = 0x400;\nLAB_08009ea4:\n  *param3 = uVar2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "initialize_and_check_memory_permissions_08009e64",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "auStack_4c": "auxiliary_stack",
                "local_48": "local_variable"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_memory_and_permissions_08009eac",
            "code": "\nvoid initializeMemoryAndPermissions_08009eac(int ptrToStruct,int *ptrToArray)\n\n{\n  ushort result;\n  int memoryAllocationResult;\n  int memorySize;\n  int *tempPtrToArray;\n  \n  if (-1 < (int)((uint)*(ushort *)(ptrToArray + 3) << 0x1e)) {\n    memorySize = ptrToStruct;\n    tempPtrToArray = ptrToArray;\n    result = initialize_and_check_memory_permissions_08009e64(ptrToStruct,ptrToArray,&memorySize,&tempPtrToArray);\n    memoryAllocationResult = allocate_and_initialize_memory_08009270(ptrToStruct,memorySize);\n    if (memoryAllocationResult != 0) {\n      *(undefined **)(ptrToStruct + 0x28) = &LAB_08009cd0_1;\n      *ptrToArray = memoryAllocationResult;\n      *(ushort *)(ptrToArray + 3) = *(ushort *)(ptrToArray + 3) | 0x80;\n      ptrToArray[4] = memoryAllocationResult;\n      ptrToArray[5] = memorySize;\n      if ((tempPtrToArray != (int *)0x0) &&\n         (memoryAllocationResult = get_result_and_update_param_0800a110(ptrToStruct,(int)*(short *)((int)ptrToArray + 0xe)), memoryAllocationResult != 0)) {\n        *(ushort *)(ptrToArray + 3) = *(ushort *)(ptrToArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(ptrToArray + 3) = result | *(ushort *)(ptrToArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(ptrToArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(ptrToArray + 3) = *(ushort *)(ptrToArray + 3) & 0xfffc | 2;\n  }\n  *ptrToArray = (int)ptrToArray + 0x47;\n  ptrToArray[4] = (int)ptrToArray + 0x47;\n  ptrToArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_memory_and_permissions_08009eac",
                "param_1": "ptrToStruct",
                "param_2": "ptrToArray",
                "uVar1": "result",
                "iVar2": "memoryAllocationResult",
                "local_18": "memorySize",
                "local_14": "tempPtrToArray"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_index_08009f2c",
            "code": "\nchar * find_character_index_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_index_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_data_08009fe8",
            "code": "\nint processData_08009fe8(uint inputValue)\n\n{\n  int *dataPtr;\n  undefined4 returnValue;\n  int arrayValue;\n  code *functionPointer;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 *dataPtrPtr;\n  \n  dataPtr = DAT_20000090;\n  dataPtrPtr = &DAT_20000090;\n  if (0x1f < inputValue) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  arrayValue = DAT_20000090[0x11];\n  if ((arrayValue != 0) && (functionPointer = *(code **)(arrayValue + inputValue * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(arrayValue + inputValue * 4) = 0;\n      (*functionPointer)(inputValue);\n    }\n    return 0;\n  }\n  returnValue = get_return_value_thunk_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  arrayValue = initialize_variable_0800886c(returnValue,inputValue,inputValue,0,dataPtrPtr,unusedVar1,unusedVar2,unusedVar3);\n  if ((arrayValue == -1) && (DAT_20000a38 != 0)) {\n    *dataPtr = DAT_20000a38;\n  }\n  return arrayValue;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "param_1": "inputValue",
                "piVar1": "dataPtr",
                "uVar2": "returnValue",
                "iVar3": "arrayValue",
                "pcVar4": "functionPointer",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3",
                "puVar5": "dataPtrPtr"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nint getReturnValue_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_parameter_value_0800a020",
            "code": "\nvoid updateParameterValue_0800a020(undefined4 param,int dataPointer)\n\n{\n  int updatedValue;\n  uint finalValue;\n  bool isUpdated;\n  \n  updatedValue = update_param_with_default_value_0800a168(param,(int)*(short *)(dataPointer + 0xe));\n  isUpdated = -1 < updatedValue;\n  if (isUpdated) {\n    finalValue = *(int *)(dataPointer + 0x54) + updatedValue;\n  }\n  else {\n    finalValue = *(ushort *)(dataPointer + 0xc) & 0xffffefff;\n  }\n  if (isUpdated) {\n    *(uint *)(dataPointer + 0x54) = finalValue;\n  }\n  if (!isUpdated) {\n    *(short *)(dataPointer + 0xc) = (short)finalValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_parameter_value_0800a020",
                "param_1": "param",
                "param_2": "dataPointer",
                "iVar1": "updatedValue",
                "uVar2": "finalValue",
                "bVar3": "isUpdated"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_data_0800a042",
            "code": "\nvoid processData_0800a042(int *outputArray,int inputArray,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  undefined4 extraParam1;\n  undefined4 extraParam2;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(inputArray + 0xc) << 0x17) < 0) {\n    process_data_0800a130(outputArray,(int)*(short *)(inputArray + 0xe),0,2);\n  }\n  *(ushort *)(inputArray + 0xc) = *(ushort *)(inputArray + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_data_0800885c((int)*(short *)(inputArray + 0xe),paramA,paramB,paramB,paramB,extraParam1,\n                       extraParam2,linkRegister);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *outputArray = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "unaff_r4": "extraParam1",
                "unaff_r5": "extraParam2",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "process_data_0800a07a",
            "code": "\nvoid process_data_0800a07a(undefined4 data,int ptr)\n\n{\n  int result;\n  ushort flags;\n  bool isError;\n  \n  result = process_data_0800a07a_0800a130(data,(int)*(short *)(ptr + 0xe));\n  isError = result == -1;\n  if (isError) {\n    flags = *(ushort *)(ptr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(ptr + 0x54) = result;\n    flags = *(ushort *)(ptr + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(ptr + 0xc) = flags;\n  }\n  if (!isError) {\n    *(ushort *)(ptr + 0xc) = flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "process_data_0800a07a",
                "param_1": "data",
                "param_2": "ptr",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_memory_page_0800a0ec",
            "code": "\nvoid initializeMemoryPage_0800a0ec(int *resultPointer,undefined4 pageSize,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  DAT_20000a38 = 0;\n  returnValue = set_memory_page_size_08008846(pageSize,param3,param3,0,param4);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_memory_page_0800a0ec",
                "param_1": "resultPointer",
                "param_2": "pageSize",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "get_result_and_update_param_0800a110",
            "code": "\nvoid getResultAndUpdateParam_0800a110(int *resultParam,undefined4 inputParam)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = get_result_08008850(inputParam);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *resultParam = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "get_result_and_update_param_0800a110",
                "param_1": "resultParam",
                "param_2": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "process_data_0800a130",
            "code": "\nvoid process_data_0800a130(int *output,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = get_zero_08008854(input_1,input_2,input_3,input_3,input_3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "process_data_0800a130",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 param1,int param2)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(param2 + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "update_param_with_default_value_0800a168",
            "code": "\nvoid updateParamWithDefaultValue_0800a168(int *updatedParam,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int defaultValue;\n  \n  DAT_20000a38 = 0;\n  defaultValue = get_default_value_08008858(value1,value2,value3,value3,value3);\n  if ((defaultValue == -1) && (DAT_20000a38 != 0)) {\n    *updatedParam = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "update_param_with_default_value_0800a168",
                "param_1": "updatedParam",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "defaultValue"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "handle_and_process_data_0800a18c",
            "code": "\nvoid handle_and_process_data_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_and_process_data_0800a18c;\n  process_and_handle_data_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "handle_and_process_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 208668,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}