{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "addByteAndDoNothing_08007246",
                "addByteToUintAndStore_08003748": "addByteToUintAndStore",
                "do_nothing_and_return_08004046_08004046": "doNothingAndReturn",
                "do_nothing_08007244": "doNothing"
            },
            "code": "void addByteAndDoNothing_08007246(void)\n{\n  addByteToUintAndStore();\n  doNothingAndReturn();\n  doNothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "addByteAndDoNothing_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param_3",
                "param_4": "param_4",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar2": "ptr",
                "sVar1": "data_short",
                "iVar3": "processed_data"
            },
            "code": "void process_data_0800a042(int *result, int data, undefined4 param_3, undefined4 param_4)\\\n                      {\\\n                            short data_short;\\\n                            undefined *ptr;\\\n                            int processed_data;\\\n                            undefined4 unaff_r4;\\\n                            undefined4 unaff_r5;\\\n                            undefined4 in_lr;\\\n                            \\\n                            data_short = *(short *)(data + 0xe);\\\n                            if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\\\n                                check_and_assign(result, (int)data_short, 0, 2);\\\n                            }\\\n                            *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\\\n                            ptr = PTR_DAT_0800a0c8;\\\n                            *(undefined4 *)ptr = 0;\\\n                            processed_data = process_data_0800a042_and_return(data_short, param_3, param_4, param_4, param_4, unaff_r4, unaff_r5, in_lr);\\\n                            if ((processed_data == -1) && (*(int *)ptr != 0)) {\\\n                                *result = *(int *)ptr;\\\n                            }\\\n                            return;\\\n                      }",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "updateObject_08008694",
                "param_1": "objectAddress",
                "param_2": "newData",
                "bVar1": "objectIndex",
                "PTR_DAT_080086dc": "objectDataArray",
                "PTR_DAT_080086e0": "objectAddressArray",
                "set_bits_at_position_08003f30": "setBitInByte",
                "set_bit_in_array_08003f94": "setBitInArray",
                "create_new_object_0800688e": "createNewObjectWithType",
                "*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4)": "objectTypeArray[objectIndex]",
                "*(int *)(param_1 + 100) + (uint)*(ushort *)(param_1 + 0x6a)": "newObjectPosition"
            },
            "code": "void updateObject_08008694(int objectAddress, int newData) {\n  if (objectAddress != 0) {\n    int objectIndex = *(byte *)(objectAddress + 0x44);\n    PTR_DAT_080086dc[objectIndex] = newData;\n    PTR_DAT_080086e0[objectIndex] = objectAddress;\n    setBitInByte(*(char *)(objectAddress + 0x5a), 0, 2);\n    setBitInArray(*(char *)(objectAddress + 0x5a));\n    createNewObjectWithType(*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4), *(int *)(objectAddress + 100) + (uint)*(ushort *)(objectAddress + 0x6a), 1);\n  }\n}\n",
            "called": [
                "FUN_0800688e",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "updateObject_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_data_08002ce0",
                "param_1": "data",
                "iVar1": "data_start",
                "set_to_zero_0800314e": "set_to_zero",
                "initialize_data_structure_080032bc": "initialize_data_structure",
                "execute_function_if_not_null_08002c2c_1_08002d90": "execute_function_if_not_null",
                "PTR_LAB_08002c40_1_08002d94": "LAB_08002c40_1_08002d94",
                "PTR_LAB_08002c7c_1_08002d98": "LAB_08002c7c_1_08002d98",
                "PTR_LAB_08002c90_1_08002d9c": "LAB_08002c90_1_08002d9c",
                "PTR_LAB_08002c54_1_08002da0": "LAB_08002c54_1_08002da0",
                "PTR_LAB_08002c68_1_08002da4": "LAB_08002c68_1_08002da4",
                "PTR_LAB_08002ca4_1_08002da8": "LAB_08002ca4_1_08002da8",
                "PTR_LAB_08002cb8_1_08002dac": "LAB_08002cb8_1_08002dac",
                "PTR_LAB_08002e1a_1_08002db0": "LAB_08002e1a_1_08002db0",
                "PTR_LAB_08002dea_1_08002db4": "LAB_08002dea_1_08002db4",
                "PTR_LAB_08002cd0_1_08002db8": "LAB_08002cd0_1_08002db8"
            },
            "code": "int initialize_data_08002ce0(int data) {\n  int data_start = data + 0x44;\n  set_to_zero(data + 0x40);\n  initialize_data_08002ce0_structure(data_start, data, 0x40);\n  *(undefined *)(data + 0xc4) = 0;\n  *(undefined4 *)(data + 200) = 0;\n  *(undefined *)(data + 0x1f8) = 0;\n  set_values(data_start, 0xe0, execute_function_if_not_null, 0);\n  set_values(data_start, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  set_values(data_start, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  set_values(data_start, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  set_values(data_start, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  set_values(data_start, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  set_values_at_offsets(data_start, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  set_values(data_start, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  set_values_if_param2_equals_121(data_start, 0x79, PTR_LAB_08002e1a_1_08002db0, data);\n  set_data(data_start, 0xf9, PTR_LAB_08002dea_1_08002db4, data);\n  set_data(data_start, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data;\n}",
            "called": [
                "FUN_08003306",
                "FUN_08003350",
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_data_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_input_08005188",
                "param_1": "input_ptr",
                "iVar1": "input_value",
                "uVar2": "input_offset_2",
                "uVar3": "input_flags",
                "uVar4": "input_offset_1",
                "input_char": "input_char"
            },
            "code": "void process_input_08005188(int *input_ptr) {\n  int input_value = *input_ptr;\n  uint input_offset_1 = *(uint *)(input_value + 0x18);\n  uint input_offset_2 = *(uint *)(input_value + 0x14);\n  uint input_flags = *(uint *)(input_value + 4);\n\n  char input_char = *(char *)((int)input_ptr + 0x3e);\n\n  if (input_char == '\\x10' || input_char == '@') {\n    if ((input_offset_2 & 0x10001) == 0 || (input_flags & 0x200) == 0) {\n      if ((DAT_080052e8 & input_offset_2) == 0 || (input_flags & 0x200) == 0) {\n        if ((DAT_080052d4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n          set_input_flags(input_ptr);\n        }\n      }\n      else {\n        set_value_at_offset(input_ptr);\n      }\n    }\n    else {\n      set_output_value(input_ptr);\n    }\n    if ((DAT_080052dc & input_offset_1) == 0) {\n      if ((DAT_080052ec & input_offset_2) != 0 && (input_flags & 0x400) != 0 && (DAT_080052e4 & input_offset_2) == 0) {\n        set_input_flag(input_ptr);\n        return;\n      }\n      if ((DAT_080052e4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n        process_input_08005188(input_ptr);\n        return;\n      }\n    }\n    else {\n      if ((DAT_080052e0 & input_offset_2) != 0 && (input_flags & 0x400) != 0 && (DAT_080052e4 & input_offset_2) == 0) {\n        process_input_08005188(input_ptr);\n        return;\n      }\n      if ((DAT_080052e4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n        process_input_08005188(input_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_080052d4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n      validate_input();\n      return;\n    }\n    if ((DAT_080052d8 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n      parse_input(input_ptr);\n      return;\n    }\n    if ((DAT_080052dc & input_offset_1) == 0) {\n      if ((DAT_080052ec & input_offset_2) != 0 && (input_flags & 0x400) != 0 && (DAT_080052e4 & input_offset_2) == 0) {\n        process_data(input_ptr);\n        return;\n      }\n      if ((DAT_080052e4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n        increment_char_at_offset(input_ptr);\n      }\n    }\n    else {\n      if ((DAT_080052e0 & input_offset_2) != 0 && (input_flags & 0x400) != 0 && (DAT_080052e4 & input_offset_2) == 0) {\n        process_data(input_ptr);\n        return;\n      }\n      if ((DAT_080052e4 & input_offset_2) != 0 && (input_flags & 0x200) != 0) {\n        increment_byte_in_array(input_ptr);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004e3c",
                "FUN_080043a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "findUnusedMemoryBlock_08009db0",
                "param_1": "errorCode",
                "param_2": "blockSize",
                "param_3": "fillValue",
                "param_4": "unknownValue",
                "piVar1": "previousBlock",
                "piVar2": "currentBlock",
                "iVar3": "memoryManagerPointer",
                "ppiVar4": "nextBlockPointerPointer"
            },
            "code": "int *findUnusedMemoryBlock_08009db0(undefined4 *errorCode, undefined4 blockSize, undefined4 fillValue, undefined4 unknownValue) {\n  int *currentBlock;\n  int *previousBlock;\n  int memoryManagerPointer;\n  int **nextBlockPointerPointer;\n  \n  memoryManagerPointer = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(memoryManagerPointer + 0x18) == 0) {\n    initializeMemoryManager(memoryManagerPointer);\n  }\n  nextBlockPointerPointer = (int **)(memoryManagerPointer + 0x48);\n  do {\n    currentBlock = nextBlockPointerPointer[2];\n    previousBlock = nextBlockPointerPointer[1];\n    while (previousBlock = (int *)((int)previousBlock + -1), -1 < (int)previousBlock) {\n      if (*(short *)(currentBlock + 3) == 0) {\n        *(undefined2 *)((int)currentBlock + 0xe) = 0xffff;\n        currentBlock[0x19] = 0;\n        *(undefined2 *)(currentBlock + 3) = 1;\n        *currentBlock = 0;\n        currentBlock[2] = 0;\n        currentBlock[1] = 0;\n        currentBlock[4] = 0;\n        currentBlock[5] = 0;\n        currentBlock[6] = 0;\n        fillMemory(currentBlock + 0x17, blockSize, fillValue, unknownValue);\n        currentBlock[0xd] = 0;\n        currentBlock[0xe] = 0;\n        currentBlock[0x12] = 0;\n        currentBlock[0x13] = 0;\n        return currentBlock;\n      }\n      currentBlock = currentBlock + 0x1a;\n    }\n    if (*nextBlockPointerPointer == (int *)0x0) {\n      previousBlock = (int *)allocateAndInitializeMemoryBlock(errorCode, 4);\n      *nextBlockPointerPointer = previousBlock;\n      if (previousBlock == (int *)0x0) {\n        *errorCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    nextBlockPointerPointer = (int **)*nextBlockPointerPointer;\n  } while(true);\n}\n",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "findUnusedMemoryBlock_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "pcVar1": "function_to_execute",
                "function_pointer": "pcVar1"
            },
            "code": "void execute_function_if_not_null_08002c2c(code* function_pointer, undefined4 parameter_1, undefined4 parameter_2, undefined4 parameter_3, undefined4 parameter_4)\n{\n  code* function_to_execute = *(code**)PTR_DAT_08002c3c;\n  if (function_to_execute != (code*)0x0) {\n    (*function_to_execute)(parameter_1, parameter_2, parameter_3, function_pointer, parameter_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "add_to_linked_list_08001bf8",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_DAT_08001c04": "list",
                "write_to_linked_list_0800288c": "write_to_linked_list"
            },
            "code": "void add_to_linked_list_08001bf8(void* PTR_DAT_08001c04, int data, void* param_2, void* param_3, void* param_4) {\n\twrite_to_linked_PTR_DAT_08001c04(PTR_DAT_08001c04, data, param_2, param_3, param_4);\n\treturn;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_if_param2_is_included_in_ptr_080072f0",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "size1",
                "param_4": "size2"
            },
            "code": "void check_if_param2_is_included_in_ptr_080072f0(void* ptr1, int* ptr2, int size1, int size2) {\n\tis_param2_included_in_ptr_080042d4(ptr1, ptr2, size1, size2, size2);\n\treturn;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "check_if_param2_is_included_in_ptr_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "end_of_string"
            },
            "code": "char * find_end_of_string_08000178(char *string) {\n  char current_char;\n  char *next_char;\n  char *end_of_string;\n  end_of_string = string;\n  do {\n    next_char = end_of_string + 1;\n    current_char = *end_of_string;\n    end_of_string = next_char;\n  } while (current_char != '\\0');\n  return end_of_string + (-1 - (int)string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44",
                "FUN_08008e7c"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_input_if_flags_set_080069ec",
                "param_1": "input",
                "iVar1": "val",
                "uVar2": "flag2",
                "puVar3": "flags",
                "uVar4": "flag5",
                "uVar5": "flag1"
            },
            "code": "void process_input_if_flags_set_080069ec(uint **input)\n{\n  uint *flags = *input;\n  uint flag1 = flags[0];\n  uint flag2 = flags[3];\n  if ((flag1 & 0xf) == 0 && (flag1 & 0x20) != 0 && (flag2 & 0x20) != 0)\n  {\n    process_input(input);\n    return;\n  }\n  if ((flag1 & 0xf) == 0 || ((flags[5] & 1) == 0 && (flag2 & 0x120) == 0))\n  {\n    if ((flag1 & 0x80) != 0 && (flag2 & 0x80) != 0)\n    {\n      decode_message(input);\n      return;\n    }\n    if ((flag1 & 0x40) != 0 && (flag2 & 0x40) != 0)\n    {\n      create_object_and_set_flag(input);\n    }\n  }\n  else\n  {\n    if ((flag1 & 1) != 0 && (flag2 & 0x100) != 0)\n    {\n      input[15] = (uint *)((uint)input[15] | 1);\n    }\n    if ((flag1 & 4) != 0 && (flags[5] & 1) != 0)\n    {\n      input[15] = (uint *)((uint)input[15] | 2);\n    }\n    if ((flag1 & 2) != 0 && (flags[5] & 1) != 0)\n    {\n      input[15] = (uint *)((uint)input[15] | 4);\n    }\n    if ((flag1 & 8) != 0 && (flags[5] & 1) != 0)\n    {\n      input[15] = (uint *)((uint)input[15] | 8);\n    }\n    if (input[15] != (uint *)0)\n    {\n      if ((flag1 & 0x20) != 0 && (flag2 & 0x20) != 0)\n      {\n        process_input(input);\n      }\n      if ((input[15] & 8) == 0 && (flags[5] & 0x40) == 0)\n      {\n        do_nothing(input);\n        input[15] = (uint *)0;\n        return;\n      }\n      clear_flags_and_set_space(input);\n      uint *flags = *input;\n      if ((flags[5] & 0x40) == 0)\n      {\n        do_nothing(input);\n        return;\n      }\n      flags[5] = flags[5] & 0xffffffbf;\n      if (input[13] == (uint *)0)\n      {\n        do_nothing(input);\n        return;\n      }\n      input[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int val = get_value_and_set_flag(input[13]);\n      if (val != 0)\n      {\n        (*(code *)input[13][13])();\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064cc",
                "FUN_08006932",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_input_if_flags_set_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "check_and_assign_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "ret"
            },
            "code": "void check_and_assign_0800a168(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int ret = returnZero_08008858(arg1, arg2, arg3, arg3, arg3);\n  if ((ret == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "check_and_assign_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "param_4",
                "uVar1": "data_from_ptr_dat",
                "iVar2": "result"
            },
            "code": "int process_data_080067ac(int* data_ptr, ushort* data, int data_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data == (ushort *)0x0 || data_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data_from_ptr_dat_08003760();\n      *(short *)(data_ptr + 9) = (short)data_length;\n      *(short *)((int)data_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_parameters(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data = data + 1;\n          }\n          else {\n            data = (ushort *)((int)data + 1);\n          }\n        }\n        else {\n          result = check_parameters(data_ptr, 0x80, 0, uVar1, param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data;\n          data = (ushort *)((int)data + 1);\n        }\n      }\n      result = check_parameters(data_ptr, 0x40, 0, uVar1, param_4);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_0800735a(int value, int* array) {\n  while (true) {\n    if (*array == -1) {\n      return -1;\n    }\n    if (*array == value) {\n      break;\n    }\n    array += 3;\n  }\n  return *(int *)(array + 2);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_ptr",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "void initialize_struct_08008c20(int struct_PTR_)\n{\n    int* PTR_1 = (int*)(struct_PTR_ + 0x130);\n    *PTR_1 = struct_PTR_ + 0x11;\n\n    short* PTR_2 = (short*)(struct_PTR_ + 0x134);\n    *PTR_2 = 0;\n\n    short* PTR_3 = (short*)(struct_PTR_ + 0x136);\n    *PTR_3 = 0;\n\n    int* PTR_4 = (int*)(struct_PTR_ + 0x138);\n    *PTR_4 = struct_PTR_ + 0x51;\n\n    short* PTR_5 = (short*)(struct_PTR_ + 0x13c);\n    *PTR_5 = 0;\n\n    short* PTR_6 = (short*)(struct_PTR_ + 0x13e);\n    *PTR_6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "process_characters_and_initialize_params_08000a64",
                "iVar1": "character_index",
                "uVar2": "character_index_2"
            },
            "code": "void process_characters_and_initialize_params_08000a64(void)\n{\n    int character_index;\n    uint character_index_2;\n    for (character_index_2 = 0; character_index_2 < 0x3c; character_index_2++) {\n        if (character_index_2 < 0x3c) {\n            if (PTR_DAT_08000ad8[character_index_2] == -1) {\n                character_index = 0;\n            }\n            else {\n                character_index = find_character_index_080036ac();\n                if (character_index == 0) {\n                    character_index = 0;\n                }\n                else {\n                    character_index = find_character_index_080036ac((int)(char)PTR_DAT_08000ad8[character_index_2]);\n                    if (character_index == 1) {\n                        character_index = 0;\n                    }\n                    else {\n                        character_index = find_index_0800738a((int)(char)PTR_DAT_08000ad8[character_index_2], PTR_DAT_08000adc);\n                        if (character_index == 0) {\n                            character_index = find_index_0800738a((int)(char)PTR_DAT_08000ad8[character_index_2], PTR_DAT_08000ae0);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            character_index = 0;\n        }\n        if (character_index != 0) {\n            FUNC_080005f8(character_index_2, 6);\n        }\n    }\n    *PTR_DAT_08000ae4 = 1;\n    initialize_parameters_08002a26(PTR_DAT_08000ae8);\n}",
            "called": [
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_characters_and_initialize_params_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "extract_data_from_pointer_data_0800723c",
                "get_data_from_ptr_dat_08003760": "get_data_from_pointer_data"
            },
            "code": "void extract_data_from_pointer_data_0800723c() {\n  get_data_from_pointer_data();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "extract_data_from_pointer_data_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "set_flags_080043a2",
                "param_1": "data",
                "puVar1": "flag_ptr",
                "PTR_DAT_0000002c": "61",
                "PTR_DAT_0000002e": "62",
                "PTR_DAT_00000050": "0xb",
                "PTR_DAT_00000080": "0x14",
                "PTR_DAT_00000090": "4",
                "PTR_DAT_000000a8": "0xc",
                "PTR_DAT_000000b8": "0x2a"
            },
            "code": "uint32_t set_flags_080043a2(uint32_t **data)\n{\n    uint32_t *flag_ptr;\n    flag_ptr = data[11];\n    if ((*(char *)((int)data + PTR_DAT_0000002c) == '\"') && ((data[20] != (uint32_t *)0x0 || (*(char *)((int)data + PTR_DAT_0000002e) != '@')))) {\n        if ((data[20] == (uint32_t *)0x0) && (data[PTR_DAT_00000090] == (uint32_t *)PTR_DAT_000000a8000)) {\n            **data = **data | 0x100;\n            data[20] = (uint32_t *)((int)data[20] + 1);\n        }\n        else {\n            if (*(short *)((int)data + PTR_DAT_000000902) == 0) {\n                **data = **data | 0x200;\n            }\n            else if (*(short *)((int)data + PTR_DAT_000000902) == 1) {\n                if (flag_ptr == (uint32_t *)0xffff0000) {\n                    **data = **data & 0xfffffbff;\n                    flag_ptr = *data;\n                    if ((flag_ptr[1] & 0x800) == 0) {\n                        *flag_ptr = *flag_ptr | 0x200;\n                    }\n                    else {\n                        *flag_ptr = *flag_ptr & 0xfffffbff;\n                    }\n                }\n                else if (((flag_ptr == (uint32_t *)0xPTR_DAT_00000090) || (flag_ptr == (uint32_t *)0x8)) || (data[12] == (uint32_t *)0x12)) {\n                    **data = **data & 0xfffffbff;\n                    **data = **data | 0x200;\n                }\n                else if (data[11] == (uint32_t *)0x2) {\n                    **data = **data | 0xPTR_DAT_0000009000;\n                }\n                else {\n                    **data = **data & 0xfffffbff;\n                }\n            }\n            else if (*(short *)((int)data + PTR_DAT_000000902) == 2) {\n                if (data[11] == (uint32_t *)0x2) {\n                    **data = **data | 0xPTR_DAT_0000009000;\n                }\n                else {\n                    **data = **data | 0x800;\n                    **data = **data & 0xfffffbff;\n                }\n                flag_ptr = *data;\n                if ((flag_ptr[1] & 0x800) != 0) {\n                    flag_ptr[1] = flag_ptr[1] | 0x1000;\n                }\n            }\n            else {\n                **data = **data | 0xPTR_DAT_0000009000;\n                flag_ptr = *data;\n                if ((flag_ptr[1] & 0x800) != 0) {\n                    flag_ptr[1] = flag_ptr[1] | 0x1000;\n                }\n            }\n            data[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_input_0800694c",
                "param_1": "input_param",
                "pbVar1": "byte_ptr",
                "sVar2": "input_length",
                "puVar3": "undefined_ptr",
                "input_char": "input_char",
                "input_val": "input_val",
                "input_ptr": "input_ptr",
                "input_length": "input_length"
            },
            "code": "int process_input_0800694c(int *input_param)\n{\n    char input_char = *(char *)((int)input_param + 0x3a);\n    int input_val = *(int *)(*input_param + 4);\n    int *input_ptr = (int *)*input_param;\n    int input_length = *(short *)((int)input_param + 0x2e);\n    \n    if (input_char != '\"') {\n        return 2;\n    }\n    \n    if (input_param[2] == 0x1000) {\n        if (input_param[4] == 0) {\n            *(ushort *)input_param[10] = (ushort)((uint)(input_val << 0x17) >> 0x17);\n            input_param[10] = input_param[10] + 2;\n        }\n        else {\n            *(ushort *)input_param[10] = (ushort)input_val & 0xff;\n            input_param[10] = input_param[10] + 1;\n        }\n    }\n    else if (input_param[4] == 0) {\n        *(char *)input_param[10] = (char)input_val;\n        input_param[10] = input_param[10] + 1;\n    }\n    else {\n        *(byte *)input_param[10] = (byte)input_val & 0x7f;\n        input_param[10] = input_param[10] + 1;\n    }\n    \n    input_length = input_length - 1;\n    *(short *)((int)input_param + 0x2e) = input_length;\n    \n    if (input_length != 0) {\n        return 0;\n    }\n    \n    *(uint *)(input_ptr + 3) = *(uint *)(input_ptr + 3) & 0xffffffdf;\n    *(uint *)(input_ptr + 3) = *(uint *)(input_ptr + 3) & 0xfffffeff;\n    *(uint *)(input_ptr + 5) = *(uint *)(input_ptr + 5) & 0xfffffffe;\n    *(char *)((int)input_param + 0x3a) = 0x20;\n    execute_integer_operation_0800870c();\n    return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_input_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_flags_and_bits_08006280",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "ptr_data"
            },
            "code": "int set_flags_and_bits_08006280(uint **data, uint flag) {\n    uint *ptr_data = *data;\n    switch(flag) {\n        case 0x0:\n            ptr_data[3] |= 0x2;\n            break;\n        case 0x4:\n            ptr_data[3] |= 0x4;\n            break;\n        case 0x8:\n            ptr_data[3] |= 0x8;\n            break;\n        case 0xC:\n            ptr_data[3] |= 0x10;\n            break;\n    }\n    set_bit_08006262(*data, flag, 1);\n    if(ptr_data == PTR_080062f0) {\n        ptr_data[0x11] |= 0x8000;\n    }\n    **data |= 0x1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_flags_and_bits_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "set_bits_08007258",
                "param_1": "flag",
                "param_2": "bit_array",
                "param_3": "bit_mask",
                "uVar1": "flag_value",
                "local_20": "bit_mask",
                "local_1c": "bit_array",
                "local_18": "bit_mask",
                "local_14": "bit_array_size"
            },
            "code": "void set_bits_08007258(uint flag, uint* bit_array) {\n    uint flag_value = set_flag_value(flag);\n    uint bit_mask = 1 << (flag & 0xf) & 0xffff;\n    uint bit_array_size = 3;\n    *(uint *)(DAT_080072d0 + 0x18) |= 1;\n    if ((flag - 0xd & 0xff) < 2) {\n        *(uint *)(DAT_080072d4 + 4) &= 0xf8ffffff;\n        *(uint *)(DAT_080072d4 + 4) |= 0x4000000;\n    }\n    if ((flag == 0xf) || (flag == 0x13) || (flag == 0x14)) {\n        *(uint *)(DAT_080072d4 + 4) &= 0xf8ffffff;\n        *(uint *)(DAT_080072d4 + 4) |= 0x2000000;\n    }\n    uint* bit_array_ptr = bit_array;\n    set_bits_08007258_080040e8(flag_value, bit_array_ptr);\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bits_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_flag_and_return_data_if_error_0800a0ec",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param_2",
                "param_4": "param_3",
                "puVar1": "flag_ptr",
                "iVar2": "error_code"
            },
            "code": "void set_flag_and_return_data_if_error_0800a0ec(int *data, int flag, int param_2, int param_3, int param_4)\n{\n  undefined *flag_ptr;\n  int error_code;\n  flag_ptr = PTR_DAT_0800a10c;\n  *(int *)PTR_DAT_0800a10c = 0;\n  error_code = set_flag_to_0x2000_08008846(flag, param_2, param_3, 0, param_4);\n  if ((error_code == -1) && (*(int *)flag_ptr != 0)) {\n    *data = *(int *)flag_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "set_flag_and_return_data_if_error_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "set_pointer_and_values_08008df8",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void set_pointer_and_values_08008df8(undefined4 *pointer, undefined value1, undefined value2, undefined value3, undefined value4)\n{\n  *pointer = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(pointer + 1) = value1;\n  *(undefined *)((int)pointer + 5) = value2;\n  *(undefined *)((int)pointer + 6) = value3;\n  *(undefined *)((int)pointer + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "set_pointer_and_values_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "find_value_and_return_offset_08006c7c",
                "param_1": "value",
                "param_2": "array",
                "param_3": "array_length",
                "param_4": "offset1",
                "<unnamed>": "offset2",
                "iVar1": "index",
                "uVar2": "shifted_and_masked_value"
            },
            "code": "int find_value_and_return_offset_08006c7c(int value, int* array, int array_length, int offset1, int offset2)\n{\n  int index = find_value(value, array, array_length, offset1, offset2);\n  int shifted_value = index << 12;\n  int shifted_and_masked_value = shifted_value >> 27;\n  if (shifted_and_masked_value == 3) {\n    return 8;\n  }\n  if (shifted_and_masked_value == 4) {\n    return 12;\n  }\n  if (shifted_and_masked_value == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_and_return_offset_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_08006b5c",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "element",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "mask",
                "uVar1 = (param_1 << 0x18) >> 0x1c;": "index = (bit_position << 0x18) >> 0x1c;",
                "*(uint *)(param_2 + uVar1 * 4) = *(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf));": "*element = *element & mask;"
            },
            "code": "void set_bit_08006b5c(uint bit_position, int* array) {\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* element = (uint*)(array + index * 4);\n    uint mask = ~(1 << (bit_position & 0xf));\n    *element = *element & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_value_08007376",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_0800735a": "search_array"
            },
            "code": "int find_value_08007376(int value_to_find)\n{\n    int found_value;\n    if (value_to_find == -1) {\n        return -1;\n    }\n    found_value = search_array();\n    return found_value;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08006e68",
                "FUN_08006c7c",
                "FUN_08006c60",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "call_system_interrupt_08000188"
            },
            "code": "void call_system_interrupt_08000188(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "call_system_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "parse_input_08004f3c",
                "param_1": "input",
                "iVar1": "flag",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "current_char": "current_char",
                "previous_char": "previous_char",
                "DAT_08005080": "DAT_08005080",
                "do_nothing_08004f3a": "do_nothing",
                "check_and_set_flags_08008020": "check_and_set_flags",
                "get_value_and_set_flag_08004050": "get_value_and_set_flag",
                "check_and_call_function_08007ff0": "check_and_call_function",
                "PTR_LAB_080053cc_1_0800507c": "PTR_LAB_080053cc_1_0800507c",
                "code": "code"
            },
            "code": "void parse_input_08004f3c(uint **input)\n{\n  int flag;\n  uint *ptr1;\n  uint *ptr2;\n  char current_char;\n  char previous_char = *(char *)((int)input + 0x3d);\n  \n  if (previous_char - 0x29 < 2) {\n    input[12] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((previous_char != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[12] = NULL;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input &= 0xfffff7ff;\n  ptr2 = *input;\n  if ((ptr2[1] & 0x800) == 0) {\n    current_char = *(char *)((int)input + 0x3d);\n    if (current_char == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[16] = NULL;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **input &= 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_and_set_flags(input);\n    }\n  }\n  else {\n    ptr2[1] &= 0xfffff7ff;\n    if (*(char *)((int)input[13] + 0x21) == '\\x01') {\n      input[14][13] = (uint)function_1;\n      flag = get_value_and_set_flag(input[14]);\n      if (flag != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          ptr2 = input[9];\n          input[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*input)[4];\n        }\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[14][13])();\n      }\n    }\n    else {\n      input[13][13] = (uint)function_1;\n      flag = get_value_and_set_flag(input[13]);\n      if (flag != 0) {\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[13][13])();\n      }\n    }\n  }\n  current_char = *(char *)((int)input + 0x3d);\n  if ((current_char == '(') && (((uint)input[16] & 4) != 0)) {\n    input[11] = DAT_08005080;\n    input[12] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    check_and_call_function(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08004f3a",
                "FUN_08004050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "parse_input_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_length",
                "param_2": "input_ptr",
                "param_3": "callback_func_1",
                "param_4": "callback_func_2",
                "pcVar3": "input_ptr",
                "cVar1": "first_char",
                "iVar2": "bytes_copied",
                "callback_arg_1": "callback_func_1_arg",
                "callback_arg_2": "callback_func_2_arg",
                "callback_arg_3": "callback_func_3_arg",
                "callback_arg_4": "callback_func_4_arg"
            },
            "code": "void process_input_080033cc(int input_length, int* input_ptr, void* callback_func_1, void* callback_func_2, void* callback_func_3) {\n  char first_char = *(char*)(input_ptr);\n  if (first_char == 'q') {\n    if (*(int*)(input_ptr + 0x68) != 0) {\n      int bytes_copied = copy_bytes_with_bitwise_shifts(input_length, input_ptr, 1, input_ptr + 0x18 - 1, callback_func_3);\n      int* callback_arg_1 = (int*)(input_ptr + 0x40);\n      int* callback_arg_2 = (int*)(input_ptr + 4) + 1;\n      (*(void(*)(int*, int*))(input_ptr + 0x68))(callback_arg_1, callback_arg_2);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(void**)(input_ptr + 0x70) != NULL) {\n      if (*(int*)(input_ptr + 0x18) < 3) {\n        int* callback_arg_1 = (int*)(input_ptr + 0x34);\n        (*(void(*)(int*, int, int))(input_ptr + 0x70))(callback_arg_1, 0, 0);\n        return;\n      }\n      int bytes_copied = copy_bytes_with_bitwise_shifts(input_length, input_ptr, 3, input_ptr + 3, callback_func_3);\n      int* callback_arg_1 = (int*)(input_ptr + 0x34);\n      int* callback_arg_2 = (int*)(input_ptr + 4) + 1;\n      int* callback_arg_3 = (int*)(input_ptr + 4) + 2;\n      int* callback_arg_4 = (int*)(input_ptr + 4) + 3;\n      (*(void(*)(int*, int, int, int))(input_ptr + 0x70))(callback_arg_1, *callback_arg_2, *callback_arg_3, *callback_arg_4);\n      return;\n    }\n  }\n  else if (*(void**)(input_ptr + 0x6c) != NULL) {\n    int* callback_arg_1 = (int*)(input_ptr + 0x44);\n    int* callback_arg_2 = (int*)(input_ptr + 0x18) - 1;\n    char* callback_arg_3 = (char*)(input_ptr + 4) + 1;\n    (*(void(*)(int*, char, int, char*))(input_ptr + 0x6c))(callback_arg_1, first_char, *callback_arg_2, callback_arg_3);\n  }\n  return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_data_validity_08003de4",
                "param_1": "data",
                "iVar1": "result",
                "check_if_data_valid_08003b8c": "is_data_valid_08003b8c"
            },
            "code": "int check_data_validity_08003de4(int data)\n{\n  int result;\n  \n  if (*(char *)(data + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 0x24) = 1;\n  result = is_data_valid_08003b8c();\n  if (result == 0) {\n    *(uint *)(data + 0x28) = *(uint *)(data + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_data_validity_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "process_servo_data_08000500",
                "param_1": "servo_index",
                "param_2": "servo_count",
                "param_3": "data_length",
                "param_4": "data",
                "bVar1": "servo_count_limit",
                "PTR_DAT_0800056c": "servo_count_limit_ptr",
                "PTR_DAT_08000584": "max_servos_attached_ptr",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached_str",
                "bVar2": "last_servo_index",
                "PTR_DAT_08000570": "last_servo_index_ptr",
                "PTR_DAT_08000578": "servo_data",
                "PTR_DAT_08000574": "last_servo_data_ptr",
                "process_data_and_update_080025ac": "process_data_and_update",
                "process_and_update_data_08002634": "process_and_update_data"
            },
            "code": "void process_servo_data_08000500(int servo_index, int servo_count, int data_length, undefined4 data)\n{\n  byte servo_count_limit = *PTR_DAT_0800056c;\n  if (servo_count_limit > 11) {\n    encode_and_send_data(PTR_DAT_08000584, PTR_s_Max_servos_attached_08000580, data_length, data, data);\n    return;\n  }\n  byte last_servo_index = *PTR_DAT_08000570;\n  if (last_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = servo_count_limit;\n    *PTR_DAT_0800056c = servo_count_limit + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_servo_index - 1];\n    *PTR_DAT_08000570 = last_servo_index - 1;\n  }\n  if ((servo_count > 0) && (data_length > 0)) {\n    process_data_and_update(PTR_DAT_08000578 + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index, servo_count, data_length);\n    return;\n  }\n  process_and_update_data(PTR_DAT_08000578 + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}\n",
            "called": [
                "FUN_08002f14",
                "FUN_080025ac",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_servo_data_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_block_08009d24",
                "param_1": "memory_pool",
                "param_2": "num_elements",
                "puVar1": "memory_block",
                "iVar2": "block_size"
            },
            "code": "undefined4* allocate_and_initialize_memory_block_08009d24(undefined4 memory_pool, int num_elements)\n{\n    undefined4* memory_block;\n    int block_size = (num_elements - 1) * 0x68;\n    memory_block = (undefined4*)allocate_memory_block_08009270(memory_pool, block_size + 0x74);\n    if (memory_block != (undefined4*)0x0)\n    {\n        *memory_block = 0;\n        memory_block[1] = num_elements;\n        memory_block[2] = memory_block + 3;\n        fill_memory_with_value_080091c6(memory_block + 3, 0, block_size + 0x68);\n    }\n    return memory_block;\n}",
            "called": [
                "FUN_08009270",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_struct_0800344a",
                "param_1": "struct_address",
                "uVar1": "index",
                "PTR_00000008": "struct_size",
                "PTR_00000004": "struct_data",
                "PTR_00000078": "function_pointer",
                "DAT_0000000c": "byte_0",
                "DAT_0000000d": "byte_1",
                "DAT_00000010": "uint_0",
                "DAT_00000014": "byte_2",
                "DAT_00000018": "uint_1"
            },
            "code": "void initialize_struct_0800344a(int struct_address) {\n  uint32_t index;\n  *(uint32_t *)(struct_address + 0x10) = 0;\n  *(uint8_t *)(struct_address + 0xc) = 0;\n  *(uint8_t *)(struct_address + 0xd) = 0;\n  for (index = 0; index < *(uint32_t *)(struct_address + 8); index++) {\n    *(uint8_t *)(*(int *)(struct_address + 4) + index) = 0;\n  }\n  *(uint8_t *)(struct_address + 0x14) = 0;\n  *(uint32_t *)(struct_address + 0x18) = 0;\n  if (*(void (**)(void))(struct_address + 0x78) != (void (**)(void))0x0) {\n    (**(void (**)(void))(struct_address + 0x78))(*(uint32_t *)(struct_address + 0x48));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "checkAndUpdateValues_080071e4",
                "param_1": "param",
                "local_50": "values",
                "check_param_08007320": "checkParam",
                "PTR_DAT_08007238": "ptrData08007238",
                "find_value_and_return_offset_08006c7c": "findValueAndReturnOffset",
                "find_value_08007376": "findValue",
                "set_bit_and_update_080063c0": "setBitAndUpdate",
                "update_flags_and_set_bits_to_zero_08006460": "updateFlagsAndSetBitsToZero",
                "update_flags_and_reset_08005e2e": "updateFlagsAndReset"
            },
            "code": "void checkAndUpdateValues_080071e4(int param) {\n  int valueOffset;\n  uint value;\n  int values[17];\n  \n  values[0] = checkParam(param, PTR_DAT_08007238);\n  if ((values[0] != 0) &&\n     ((((valueOffset = findValueAndReturnOffset(param), valueOffset == 0 || (valueOffset == 4)) || (valueOffset == 8)) ||\n      ((valueOffset == 0xc || (valueOffset == 0x18)))))) {\n    value = findValue(param, PTR_DAT_08007238);\n    if ((value & 0x100000) == 0) {\n      setBitAndUpdate(values,valueOffset);\n    }\n    else {\n      updateFlagsAndSetBitsToZero(values,valueOffset);\n    }\n    updateFlagsAndReset(values);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08007376",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "checkAndUpdateValues_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_from_server_080022f8",
                "PTR_DAT_080023e0": "server_data_pointer1",
                "execute_function_08002ec4": "execute_server_function",
                "process_input_08002ed2": "process_input",
                "extract_pointer_data_and_return_08008abc": "extract_pointer_data_and_return",
                "PTR_DAT_080023e4": "server_data_pointer2",
                "PTR_DAT_080023ec": "server_data_pointer3",
                "find_character_index_080036ac": "find_character_index",
                "get_value_at_offset_08002fa0": "get_value_at_offset",
                "PTR_DAT_080023f0": "server_data_pointer5",
                "check_data_08008880_08008880": "check_data",
                "send_data_to_server_if_possible_08002ef2": "send_data_to_server_if_possible",
                "PTR_DAT_080023f4": "server_data_pointer6",
                "PTR_DAT_080023f8": "server_data_pointer7",
                "processData_08001c18": "process_data",
                "PTR_DAT_080023fc": "server_data_pointer8"
            },
            "code": "void process_data_from_server_080022f8()\n{\n    bool isValidData;\n    int dataPointer;\n    undefined4 dataValue;\n    uint index1;\n    uint index2;\n\n    initialize_connection();\n    while (dataPointer = execute_server_function(get_server_data_pointer()), dataPointer != 0)\n    {\n        process_input(get_server_data_pointer());\n    }\n    dataPointer = extract_pointer_data_and_return();\n    *(int *)PTR_DAT_080023e0 = dataPointer;\n    if (*(uint *)PTR_DAT_080023ec < (uint)(dataPointer - *(int *)PTR_DAT_080023e4))\n    {\n        *(uint *)PTR_DAT_080023e4 = *(int *)PTR_DAT_080023e4 + *(uint *)PTR_DAT_080023ec;\n        for (index1 = 0; index1 < 0x3c; index1 = index1 + 1 & 0xff)\n        {\n            index2 = index1 - 0x2e & 0xff;\n            if (index2 < 0xe)\n            {\n                if (index1 < 0x3c)\n                {\n                    dataValue = (int)(char)PTR_DAT_080023f4[index1];\n                }\n                else\n                {\n                    dataValue = -1;\n                }\n                dataValue = find_character_index(dataValue);\n                if (dataValue == 0)\n                {\n                    isValidData = false;\n                }\n                else\n                {\n                    if (index1 < 0x3c)\n                    {\n                        dataValue = (int)(char)PTR_DAT_080023f4[index1];\n                    }\n                    else\n                    {\n                        dataValue = -1;\n                    }\n                    dataValue = find_character_index(dataValue);\n                    if (dataValue == 1)\n                    {\n                        isValidData = false;\n                    }\n                    else\n                    {\n                        dataValue = get_value_at_offset(get_server_data_pointer(), index1);\n                        if (dataValue == 2)\n                        {\n                            isValidData = true;\n                        }\n                        else\n                        {\n                            isValidData = false;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                isValidData = false;\n            }\n            if ((isValidData) && ((*(int *)PTR_DAT_080023f0 >> index2 & 1U) != 0))\n            {\n                dataValue = check_data(index2);\n                send_data_to_server_if_possible(get_server_data_pointer(), index2, dataValue);\n            }\n        }\n        if (-1 < (char)*PTR_DAT_080023f8)\n        {\n            for (index1 = 0; (int)index1 < (char)*PTR_DAT_080023f8 + 1; index1 = index1 + 1 & 0xff)\n            {\n                dataPointer = index1 * 0xc;\n                process_data(PTR_DAT_080023fc[dataPointer], *(undefined4 *)(PTR_DAT_080023fc + dataPointer + 4), PTR_DAT_080023fc[dataPointer + 8], PTR_DAT_080023fc[dataPointer + 9]);\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08008880",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_from_server_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_and_set_bits_080072fa",
                "set_flag_and_update_bits_08003724": "set_flag_and_update_bits",
                "initialize_and_set_bits_080035b8": "initialize_and_set_bits"
            },
            "code": "void initialize_and_set_bits_080072fa(void)\n{\n  set_flag_and_update_bits();\n  initialize_and_set_bits_080072fa();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_and_set_bits_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "parse_input_08005084",
                "param_1": "input_array",
                "cVar1": "current_char",
                "puVar2": "current_array",
                "puVar3": "current_array_2",
                "current_array_3": "current_array_3",
                "current_array_4": "current_array_4"
            },
            "code": "int parse_input_08005084(uint **input_array){\n    char current_char = *(char *)((int)input_array + 0x3d);\n    uint *current_array = *input_array;\n    uint *current_array_2 = input_array[9];\n    uint *current_array_3 = input_array[0xe];\n    uint *current_array_4 = input_array[0xd];\n\n    current_array[1] = current_array[1] & 0xfffff8ff;\n    **input_array = **input_array | 1;\n    **input_array = **input_array & 0xfffffbff;\n\n    if ((current_array[1] & 0x800) != 0) {\n        if ((*(char *)((int)input_array + 0x3d) == '\"') || (*(char *)((int)input_array + 0x3d) == '*')) {\n            *(short *)((int)input_array + 0x2a) = (short)*(undefined4 *)(*current_array_3 + 4);\n        }\n        else {\n            *(short *)((int)input_array + 0x2a) = (short)*(undefined4 *)(*current_array_4 + 4);\n        }\n    }\n\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        if ((current_array[5] & 4) != 0) {\n            current_array_2 = input_array[9];\n            input_array[9] = (uint *)((int)current_array_2 + 1);\n            *(char *)current_array_2 = (char)current_array[4];\n            *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        }\n        if (((*input_array)[5] & 0x40) != 0) {\n            current_array = input_array[9];\n            input_array[9] = (uint *)((int)current_array + 1);\n            *(char *)current_array = (char)(*input_array)[4];\n            *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        }\n        input_array[0x10] = (uint *)((uint)input_array[0x10] | 4);\n    }\n\n    if (input_array[0x10] == (uint *)0x0) {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n            input_array[0xb] = PTR_DAT_08005184;\n            input_array[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_array + 0x3d) = 0x20;\n            *(undefined *)((int)input_array + 0x3e) = 0;\n            check_and_call_function_08007ff0();\n        }\n        else if ((input_array[0xc] == (uint *)0x22) || (current_char == '\"')) {\n            input_array[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_array + 0x3d) = 0x20;\n            *(undefined *)((int)input_array + 0x3e) = 0;\n            do_nothing_08004a74();\n        }\n    }\n    else {\n        parse_input_08005084_08004f3c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "parse_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "*param_1": "*params",
                "puVar1": "data_pointer",
                "PTR_PTR_FUN_0800288c_1_08002940": "function_pointer",
                "PTR_DAT_08002944": "data"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *params){\n    params[1] = 0;\n    params[2] = 1000;\n    *params = PTR_PTR_write_to_linked_list_0800288c_1_08002940;\n    undefined *PTR_DAT_08002944_pointer = PTR_DAT_08002944;\n    *(undefined *)(params + 0x1b) = PTR_DAT_08002944[0xe];\n    *(undefined *)((int)params + 0x6d) = PTR_DAT_08002944_pointer[0xf];\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "process_input_wrapper_08002ac0",
                "param_1": "input_buffer",
                "param_2": "input_size",
                "param_3": "output_buffer",
                "param_4": "output_size",
                "process_input_08002a58": "process_input"
            },
            "code": "void process_input_wrapper_08002ac0(void* input_buffer, int input_size, void* output_buffer, int output_size){\n  process_input(input_buffer, input_size, output_buffer, output_size, output_size);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "set_values_if_param2_equals_121_08003346",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x70)": "*(int *)(base_address + 112)",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(base_address + 52)"
            },
            "code": "void set_values_if_param2_equals_121_08003346(int base_address, int param2, int value1, int value2) {\n  if (param2 == 121) {\n    *(int *)(base_address + 112) = value1;\n    *(int *)(base_address + 52) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_if_param2_equals_121_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count"
            },
            "code": "void initialize_data_structure_080032bc(int *data_structure, int param_2, int param_3)\n{\n    uint leading_zeroes_count;\n    data_structure[1] = param_2;\n    data_structure[2] = param_3;\n    data_structure[12] = 0;\n    data_structure[13] = 0;\n    data_structure[4] = 0;\n    data_structure[20] = 0;\n    data_structure[6] = 0;\n    data_structure[7] = 0;\n    data_structure[8] = 0;\n    data_structure[9] = 0;\n    data_structure[10] = 0;\n    data_structure[11] = 0;\n    data_structure[14] = 0;\n    data_structure[15] = 0;\n    data_structure[16] = 0;\n    data_structure[17] = 0;\n    data_structure[18] = 0;\n    data_structure[19] = 0;\n    data_structure[21] = 0;\n    data_structure[22] = 0;\n    data_structure[23] = 0;\n    data_structure[24] = 0;\n    data_structure[25] = 0;\n    data_structure[26] = 0;\n    data_structure[27] = 0;\n    data_structure[28] = 0;\n    data_structure[29] = 0;\n    data_structure[30] = 0;\n    data_structure[31] = 0;\n    data_structure[32] = 0;\n    data_structure[33] = 0;\n    data_structure[34] = 0;\n    data_structure[35] = 0;\n    data_structure[36] = 0;\n    data_structure[37] = 0;\n    data_structure[38] = 0;\n    data_structure[39] = 0;\n    data_structure[40] = 0;\n    data_structure[41] = 0;\n    data_structure[42] = 0;\n    data_structure[43] = 0;\n    data_structure[44] = 0;\n    data_structure[45] = 0;\n    data_structure[46] = 0;\n    data_structure[47] = 0;\n    data_structure[48] = 0;\n    data_structure[49] = 0;\n    data_structure[50] = 0;\n    data_structure[51] = 0;\n    data_structure[52] = 0;\n    data_structure[53] = 0;\n    data_structure[54] = 0;\n    data_structure[55] = 0;\n    data_structure[56] = 0;\n    data_structure[57] = 0;\n    data_structure[58] = 0;\n    data_structure[59] = 0;\n    data_structure[60] = 0;\n    data_structure[100] = 0;\n    data_structure[104] = 0;\n    data_structure[108] = 0;\n    data_structure[112] = 0;\n    data_structure[116] = 0;\n    data_structure[120] = 0;\n    leading_zeroes_count = count_leading_zeroes(param_2);\n    data_structure[0] = (char)(leading_zeroes_count >> 5);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "encode_and_send_data_to_server_08003106",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "server_address",
                "param_4": "port_number",
                "puVar1": "function_ptr"
            },
            "code": "void encode_and_send_data_to_server_08003106(undefined4 *data_ptr, undefined4 data_size, undefined4 server_address, undefined4 port_number)\n{\n    undefined4 *function_ptr;\n    function_ptr = (undefined4 *)*data_ptr;\n    if (function_ptr != (undefined4 *)0x0) {\n        (**(code **)*function_ptr)(function_ptr,0xf0);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,server_address);\n        encode_data_0800307a(data_ptr,data_size,port_number,data_size);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_to_server_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = check_param_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = check_param_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = compare_and_return_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        set_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_value_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        set_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        set_bits_at_position_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        set_bits_at_position_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        calculate_result_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_and_return_08007708"
            },
            "code": "void set_flags_and_return_08007708(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "execute_system_interrupt_0800018c",
                "param_1": "interrupt_num",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "uVar1": "return_value"
            },
            "code": "int execute_system_interrupt_0800018c(int interrupt_num, int param_1, int param_2, int param_3, int param_4) {\n  int return_value;\n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  return_value = call_system_interrupt_08000188(interrupt_num, param_1, 0, 0, param_4);\n  return return_value;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "execute_system_interrupt_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_index",
                "PTR_DAT_08003fac": "array_ptr",
                "DAT_08003fac": "array_offset",
                "array_index": "array_index",
                "bit_offset": "bit_offset",
                "array_ptr": "array_ptr"
            },
            "code": "void set_bit_in_array_08003f94(uint bit_index) {\n    if (bit_index >= 0) {\n        uint array_index = bit_index >> 5;\n        uint bit_offset = bit_index & 0x1f;\n        int* PTR_DAT_08003fac = (int*)(DAT_08003fac + array_index * 4);\n        *PTR_DAT_08003fac = 1 << bit_offset;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "set_flags_and_call_function_08008c44",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "bit_mask",
                "bVar1": "mask_result",
                "iVar2": "flags_counter",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_flags_and_call_function_08008c44(int input, unsigned int flags, unsigned char bit_mask) {\n    unsigned char mask_result = bit_mask & 7;\n    int flags_counter = 0;\n    if (mask_result == 4) {\n        flags_counter = 7;\n    }\n    else if (mask_result == 6) {\n        flags_counter = 8;\n    }\n    else if (mask_result == 2) {\n        flags_counter = 6;\n    }\n    if ((bit_mask & 0x30) == 0x30) {\n        *(unsigned int *)(input + 0x128) = 0x600;\n        flags_counter++;\n    }\n    else if ((bit_mask & 0x20) == 0) {\n        *(unsigned int *)(input + 0x128) = 0;\n    }\n    else {\n        *(unsigned int *)(input + 0x128) = 0x400;\n        flags_counter++;\n    }\n    if ((bit_mask & 8) == 0) {\n        *(unsigned int *)(input + 0x124) = 0;\n    }\n    else {\n        *(unsigned int *)(input + 0x124) = 0x2000;\n    }\n    if (flags_counter == 8) {\n        *(unsigned int *)(input + 0x120) = 0;\n    }\n    else if (flags_counter == 9) {\n        *(unsigned int *)(input + 0x120) = 0x1000;\n    }\n    else {\n        flags_counter = 0;\n    }\n    if (flags_counter != 0) {\n        FUNC_08008078(input + 0xd4);\n        validate_input_and_set_bits_0800863c(input + 0xd4,uRam08008cf0);\n        return;\n    }\n    code *UNRECOVERED_JUMPTABLE = (code *)0x8008cee;\n    process_data_and_call_function_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\n    if (extraout_r1 < 0x3c) {\n        uRam0000012d = PTR_DAT_08008d14[extraout_r1];\n    }\n    else {\n        uRam0000012d = 0xff;\n    }\n    (*UNRECOVERED_JUMPTABLE)(0,extraout_r1,&stack0x00000148);\n    return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "initialize_parameters_08002a26",
                "param_1": "data",
                "param_2": "value",
                "param_3": "ptr1",
                "param_4": "ptr2"
            },
            "code": "void initialize_parameters_08002a26(void* data, int value, void* ptr1, void* ptr2)\n{\n  initialize_parameters_08002a26_08002a1c(data, value, ptr1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_output_value_0800430c",
                "param_1": "output_ptr",
                "*(char *)((int)param_1 + 0x3e)": "output_char",
                "param_1[0x11]": "output_value",
                "param_1[0x14]": "output_type",
                "*(uint *)(*param_1 + 0x10)": "output_register",
                "*(char *)((int)param_1 + 0x3d)": "second_output_char"
            },
            "code": "int set_output_value_0800430c(int *output_ptr) {\n    char output_char = *(char *)((int)output_ptr + 0x3e);\n    int output_value = output_ptr[0x11];\n    int output_type = output_ptr[0x14];\n    uint *output_register = (uint *)(*output_ptr + 0x10);\n\n    if (output_char == '@') {\n        if (output_type == 0) {\n            *output_register = output_value & 0xfe;\n        }\n        else {\n            *output_register = output_value & 0xffU | 1;\n        }\n    }\n    else if (output_type == 0x4000) {\n        if (*(char *)((int)output_ptr + 0x3d) == '!') {\n            *output_register = output_value & 0xfe;\n        }\n        else {\n            *output_register = output_value & 0xffU | 1;\n        }\n    }\n    else if (output_type == 0) {\n        *output_register = (uint)(output_value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (output_type == 1) {\n        *output_register = (uint)(output_value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_output_value_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "validate_user_input_08006060",
                "param_1": "user_input",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)user_input + 0x3d)",
                "*(char *)(param_1 + 0xf)": "*(char *)(user_input + 15)",
                "set_flags_and_return_08007708": "set_flags_and_return",
                "set_params_08005fe8": "set_params"
            },
            "code": "int validate_user_input_08006060(int *user_input) {\\n  if (user_input != NULL) {\\n    if (*(char *)((int)user_input + 0x3d) == \"\\0\") {\\n      *(char *)(user_input + 15) = 0;\\n      set_flags_and_return();\\n    }\\n    *(char *)((int)user_input + 0x3d) = 2;\\n    set_params(*user_input, user_input + 1);\\n    *(char *)((int)user_input + 0x3d) = 1;\\n    return 0;\\n  }\\n  return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "validate_user_input_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_data_08003350",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void set_data_08003350(int data_address, int data_value, undefined4 param_3, undefined4 param_4)\n{\n    if (data_value == 249) {\n        *(undefined4 *)(data_address + 0x74) = param_3;\n        *(undefined4 *)(data_address + 0x38) = param_4;\n        return;\n    }\n    if (data_value != 255) {\n        return;\n    }\n    *(undefined4 *)(data_address + 0x78) = param_3;\n    *(undefined4 *)(data_address + 0x48) = param_4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_data_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = calculate_length_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "update_data_08006186",
                "param_1": "data_ptr",
                "param_2": "param",
                "param_3": "operation_type",
                "*(char *)(param_1 + 0xf)": "data_ptr[15]",
                "*(undefined *)(param_1 + 0xf)": "data_ptr[15] = 1",
                "*(undefined *)((int)param_1 + 0x3d)": "data_ptr[61] = 2",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*data_ptr + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*data_ptr + 0x1c)",
                "*(int *)(param_2 + 0x10)": "*(int *)(param + 0x10)"
            },
            "code": "int update_data_08006186(int *data_ptr, int param, int operation_type) {\n    if (*(char *)(data_ptr + 0xf) != '\\x01') {\n        *(undefined *)(data_ptr + 0xf) = 1;\n        *(undefined *)((int)data_ptr + 0x3d) = 2;\n        switch(operation_type) {\n        case 0:\n            update_data_08006186_08005cec(*data_ptr);\n            *(uint *)(*data_ptr + 0x18) |= 8;\n            *(uint *)(*data_ptr + 0x18) &= 0xfffffffb;\n            *(uint *)(*data_ptr + 0x18) |= *(uint *)(param + 0x10);\n            break;\n        case 4:\n            update_values_080060c4(*data_ptr);\n            *(uint *)(*data_ptr + 0x18) |= 0x800;\n            *(uint *)(*data_ptr + 0x18) &= 0xfffffbff;\n            *(uint *)(*data_ptr + 0x18) |= *(int *)(param + 0x10) << 8;\n            break;\n        case 8:\n            update_data_08006186_08005d48(*data_ptr);\n            *(uint *)(*data_ptr + 0x1c) |= 8;\n            *(uint *)(*data_ptr + 0x1c) &= 0xfffffffb;\n            *(uint *)(*data_ptr + 0x1c) |= *(uint *)(param + 0x10);\n            break;\n        case 0xc:\n            update_data_08006186_08005dac(*data_ptr);\n            *(uint *)(*data_ptr + 0x1c) |= 0x800;\n            *(uint *)(*data_ptr + 0x1c) &= 0xfffffbff;\n            *(uint *)(*data_ptr + 0x1c) |= *(int *)(param + 0x10) << 8;\n        }\n        *(undefined *)((int)data_ptr + 0x3d) = 1;\n        *(undefined *)(data_ptr + 0xf) = 0;\n        return 0;\n    }\n    return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "update_data_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "update_memory_flags_and_return_08007710"
            },
            "code": "void update_memory_flags_and_return_08007710(void)\n{\n  update_memory_flags();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "update_memory_flags_and_return_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_index",
                "param_2": "input_value",
                "bVar1": "byte_value"
            },
            "code": "void process_input_08003474(int input_index, uint input_value)\n{\n    byte byte_value;\n    if (*(char *)(input_index + 0x14) != '\\0') {\n        if (input_value != 0xf7) {\n            check_and_set_value_if_greater_than(input_index, input_value, *(undefined4 *)(input_index + 0x18));\n            *(int *)(input_index + 0x18) += 1;\n            return;\n        }\n        *(undefined *)(input_index + 0x14) = 0;\n        process_input_08003474();\n        return;\n    }\n    if ((*(int *)(input_index + 0x10) == 0) || (0x7f < (int)input_value)) {\n        if ((int)input_value < 0xf0) {\n            *(byte *)(input_index + 0xd) = (byte)input_value & 0xf;\n            input_value = input_value & 0xf0;\n        }\n        if (input_value == 0xf0) {\n            *(undefined *)(input_index + 0x14) = 1;\n            *(undefined4 *)(input_index + 0x18) = 0;\n            return;\n        }\n        if (input_value < 0xf1) {\n            if (input_value != 0xc0) {\n                if (input_value < 0xc1) {\n                    if (input_value != 0x90) {\n                        return;\n                    }\n                }\n                else {\n                    if (input_value == 0xd0) goto LAB_0800359c;\n                    if (input_value != 0xe0) {\n                        return;\n                    }\n                }\nLAB_08003586:\n                *(undefined4 *)(input_index + 0x10) = 2;\n                *(char *)(input_index + 0xc) = (char)input_value;\n                return;\n            }\nLAB_0800359c:\n            *(undefined4 *)(input_index + 0x10) = 1;\n            *(char *)(input_index + 0xc) = (char)input_value;\n            return;\n        }\n        if (input_value != 0xf9) {\n            if (0xf9 < input_value) {\n                if (input_value == 0xff) {\n                    initialize_struct(input_index);\n                    return;\n                }\n                return;\n            }\n            if (1 < input_value - 0xf4) {\n                return;\n            }\n            goto LAB_08003586;\n        }\n        if (*(code **)(input_index + 0x74) != (code *)0x0) {\n            (**(code **)(input_index + 0x74))(*(undefined4 *)(input_index + 0x38));\n        }\n    }\n    else {\n        *(int *)(input_index + 0x10) -= 1;\n        check_and_set_value_if_greater_than();\n        if ((*(int *)(input_index + 0x10) == 0) && ((byte_value = *(byte *)(input_index + 0xc)), byte_value != 0)) {\n            if (byte_value == 0xd0) {\n                if (*(code **)(input_index + 0x58) != (code *)0x0) {\n                    (**(code **)(input_index + 0x58))(*(undefined4 *)(input_index + 0x28), *(undefined *)(input_index + 0xd), **(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value < 0xd1) {\n                if (byte_value == 0x90) {\n                    if (*(code **)(input_index + 0x50) != (code *)0x0) {\n                        (**(code **)(input_index + 0x50))(*(undefined4 *)(input_index + 0x20), *(undefined *)(input_index + 0xd), (uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n                    }\n                }\n                else if ((byte_value == 0xc0) && (*(code **)(input_index + 0x54) != (code *)0x0)) {\n                    (**(code **)(input_index + 0x54))(*(undefined4 *)(input_index + 0x24), *(undefined *)(input_index + 0xd), **(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value == 0xf4) {\n                if (*(code **)(input_index + 0x5c) != (code *)0x0) {\n                    (**(code **)(input_index + 0x5c))(*(undefined4 *)(input_index + 0x2c), (*(undefined **)(input_index + 4))[1], **(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value == 0xf5) {\n                if (*(code **)(input_index + 0x60) != (code *)0x0) {\n                    (**(code **)(input_index + 0x60))(*(undefined4 *)(input_index + 0x30), (*(undefined **)(input_index + 4))[1], **(undefined **)(input_index + 4));\n                }\n            }\n            else if ((byte_value == 0xe0) && (*(code **)(input_index + 0x4c) != (code *)0x0)) {\n                (**(code **)(input_index + 0x4c))(*(undefined4 *)(input_index + 0x1c), *(undefined *)(input_index + 0xd), (uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n            }\n            *(undefined *)(input_index + 0xc) = 0;\n            return;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_080033cc",
                "FUN_08003376",
                "FUN_0800344a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_at_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba8": "data_2",
                "DAT_08006bac": "data_3",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_at_index_08006b7c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_08006ba4;\n        case 1:\n            return DAT_08006bb4;\n        case 2:\n            return DAT_08006ba8;\n        case 3:\n            return DAT_08006bac;\n        case 4:\n            return DAT_08006bb0;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_at_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "num",
                "param_2": "base",
                "param_3": "min_digits",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "digits"
            },
            "code": "int convert_base_08008e7c(int *num, uint base, uint min_digits) {\n  char digit;\n  int result = 0;\n  char *digits = malloc(sizeof(char) * (min_digits + 1));\n  digits[min_digits] = '\\0';\n  if ((int)min_digits < 2) {\n    min_digits = 10;\n  }\n  char *current_digit = digits + min_digits - 1;\n  do {\n    uint quotient = *num / base;\n    uint remainder = (*num & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *current_digit = digit;\n    *num = quotient;\n  } while (*num != 0);\n  if (current_digit == digits - 1) {\n    result = 0;\n  }\n  else {\n    int end_of_string = find_end_of_string_08000178(current_digit);\n    result = (**(code **)(*num + 4))(num, current_digit, end_of_string);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "set_data_flag_if_not_set_08003aa0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "data_ptr"
            },
            "code": "int set_data_flag_if_not_set_08003aa0(int* data)\n{\n    int result;\n    int* data_ptr;\n    if (*(char *)(data + 9) != '\\x01') {\n        *(undefined *)(data + 9) = 1;\n        result = set_data_flag_08003a20();\n        if (result == 0) {\n            data[10] = (data[10] & 0xfffffcfe) | 0x100;\n            data_ptr = (int *)*data;\n            if ((data_ptr == PTR_DAT_08003b84) && ((PTR_DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n                data[10] |= 0x100000;\n                if ((*(uint *)(PTR_DAT_08003b88 + 4) & 0x400) != 0) {\n                    data[10] = (data[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            else {\n                data[10] &= 0xffefffff;\n                if ((data_ptr[1] & 0x400) != 0) {\n                    data[10] = (data[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            if ((data[10] & 0x1000) == 0) {\n                data[11] = 0;\n            }\n            else {\n                data[11] &= 0xfffffff9;\n            }\n            *(undefined *)(data + 9) = 0;\n            *data_ptr = 0xfffffffd;\n            data = (int *)*data;\n            if (((data[2] & 0xe0000) == 0xe0000) && ((data != PTR_DAT_08003b84) || ((PTR_DAT_08003b84[-0xff] & 0xf0000) == 0))) {\n                data[2] |= 0x500000;\n            }\n            else {\n                data[2] |= 0x100000;\n            }\n        }\n        else {\n            *(undefined *)(data + 9) = 0;\n        }\n        return result;\n    }\n    return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_data_flag_if_not_set_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "validate_data_08003ce8",
                "param_1": "data_ptr",
                "iVar1": "is_valid"
            },
            "code": "int validate_data_08003ce8(int *data_ptr)\n{\n  int is_valid = 0;\n  if (data_ptr == NULL) {\n    is_valid = 1;\n  }\n  else {\n    data_ptr[10] |= 2;\n    is_valid = check_if_data_valid();\n    if (is_valid == 0) {\n      *(int *)*data_ptr = -32;\n      *(unsigned int *)(*data_ptr + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*data_ptr + 8) &= DAT_08003de0;\n      *(unsigned int *)(*data_ptr + 0xc) &= 0xff000000;\n      *(unsigned int *)(*data_ptr + 0x10) &= 0xc0000000;\n      *(unsigned int *)(*data_ptr + 0x14) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x18) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x1c) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x20) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x24) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x28) &= 0xfffff000;\n      *(unsigned int *)(*data_ptr + 0x2c) &= 0xff000000;\n      *(unsigned int *)(*data_ptr + 0x2c) &= 0xff000000;\n      *(unsigned int *)(*data_ptr + 0x30) &= 0xc0000000;\n      *(unsigned int *)(*data_ptr + 0x34) &= 0xc0000000;\n      *(unsigned int *)(*data_ptr + 0x38) &= 0xffc00000;\n      *(unsigned int *)(*data_ptr + 0x38) &= 0xffc00000;\n      set_bit_flags(data_ptr);\n      data_ptr[11] = 0;\n      data_ptr[10] = 0;\n    }\n    *(char *)(data_ptr + 9) = 0;\n  }\n  return is_valid;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "validate_data_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "set_params_08005fe8",
                "param_1": "params",
                "param_2": "new_params",
                "uVar1": "old_param",
                "DAT_0800605c": "PTR_DAT_0800605c"
            },
            "code": "void set_params_08005fe8(uint *params, uint *new_params)\n{\n  uint old_param = *params;\n  bool is_valid_param = (params == DAT_0800605c) || (params == (uint *)0x40000000) || (params == DAT_0800605c - 0x4a00) || (params == DAT_0800605c - 0x4900);\n  if (is_valid_param) {\n    old_param = old_param & 0xffffff8f | new_params[1];\n  }\n  bool is_valid_param2 = (params == DAT_0800605c) || (params == (uint *)0x40000000) || (params == DAT_0800605c - 0x4a00) || (params == DAT_0800605c - 0x4900);\n  if (is_valid_param2) {\n    old_param = old_param & 0xfffffcff | new_params[3];\n  }\n  *params = old_param & 0xffffff7f | new_params[5];\n  params[0xb] = new_params[2];\n  params[10] = *new_params;\n  if (params == DAT_0800605c) {\n    params[0xc] = new_params[4];\n  }\n  params[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_params_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "calculateOffset_08008804",
                "param_1": "input",
                "iVar1": "offset",
                "puVar2": "stackPointer",
                "PTR_DAT_08008834": "memoryAddress1",
                "PTR_DAT_08008838": "memoryAddress2",
                "PTR_DAT_0800883c": "memoryAddress3"
            },
            "code": "int calculateOffset_08008804(int input) {\n  int offset;\n  undefined *stackPointer;\n  \n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  offset = *(int *)PTR_DAT_08008834;\n  stackPointer = (undefined *)(input + offset);\n  if (stackPointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = stackPointer;\n    return offset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "calculateOffset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "find_index_0800738a",
                "param_1": "target",
                "param_2": "string_array",
                "undefined4": "int",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int find_index_0800738a(int target, char *string_array)\n{\n    if (target == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*string_array == -1) {\n            return 0;\n        }\n        if (target == *string_array) break;\n        string_array = string_array + 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "find_index_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input_array",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "code": "int process_input_08004e3c(uint **input_array)\n{\n    uint *ptr1;\n    int input_length = *(short *)((int)input_array + 0x2a);\n    \n    if (input_length == 3) {\n        ptr1 = input_array[0xb];\n        if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) || (ptr1 == (uint *)0xffff0000)) {\n            **input_array = **input_array & 0xfffffbff;\n        }\n        uint *ptr2 = input_array[9];\n        input_array[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)(*input_array)[4];\n        input_length--;\n    }\n    else if (input_length == 2) {\n        ptr1 = input_array[0xb];\n        if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) || (ptr1 == (uint *)0xffff0000)) {\n            (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n            **input_array = **input_array | 0x200;\n        }\n        else {\n            if (ptr1 == (uint *)0x2) {\n                **input_array = **input_array | 0x400;\n            }\n            else {\n                **input_array = **input_array & 0xfffffbff;\n            }\n            (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n        }\n        uint *ptr2 = input_array[9];\n        input_array[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)(*input_array)[4];\n        input_length--;\n        ptr2 = input_array[9];\n        input_array[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)(*input_array)[4];\n        input_length--;\n        *(undefined *)((int)input_array + 0x3d) = 0x20;\n        input_array[0xc] = (uint *)0x0;\n        if (*(char *)((int)input_array + 0x3e) == '@') {\n            *(undefined *)((int)input_array + 0x3e) = 0;\n            do_nothing_08004d6a();\n        }\n        else {\n            *(undefined *)((int)input_array + 0x3e) = 0;\n            do_nothing_08004a20();\n        }\n    }\n    else {\n        uint *ptr2 = input_array[9];\n        input_array[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)(*input_array)[4];\n        input_length--;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "insert_value_into_linked_list_080091a0",
                "param_1": "value"
            },
            "code": "void insert_value_into_linked_list_080091a0(void* value){\n\tinsert_into_linked_list(head_ptr, value);\n\treturn;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "insert_value_into_linked_list_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_parameters_08002a1c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_params_08002968": "initialize_params"
            },
            "code": "void initialize_parameters_08002a1c(uint32_t param1, uint8_t param2, uint32_t param3, uint32_t param4)\n{\n    initialize_params_08002968(param1, param2, param3, param4, param4);\n    return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_input_08007718",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08007718(int input_num) {\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "initialize_if_param_is_one_and_param2_is_max_08002948",
                "param_1": "param_is_one",
                "param_2": "param2_max",
                "initialize_parameters_0800291c": "initialize_parameters",
                "PTR_DAT_08002964": "PTR_DAT_08002964"
            },
            "code": "void initialize_if_param_is_one_and_param2_is_max_08002948(int param_is_one, int param2_max) {\n    if (param_is_one != 1) {\n        return;\n    }\n    if (param2_max == 0xffff) {\n        initialize_parameters(PTR_DAT_08002964);\n    }\n    return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "initialize_if_param_is_one_and_param2_is_max_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_and_set_flag_08009e64",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "param_3": "result_ptr",
                "param_4": "status_ptr",
                "iVar1": "error_code",
                "uVar2": "status",
                "auStack_4c": "result"
            },
            "code": "int check_and_set_flag_08009e64(uint16_t* flag_ptr, uint16_t flag_value, uint32_t* result_ptr, uint32_t* status_ptr)\\n\\\n    {\\n\\\n        int error_code = 0;\\n\\\n        uint32_t result = 0;\\n\\\n        uint32_t status = 0;\\n\\\n        \\n\\\n        if (*flag_ptr < 0)\\n\\\n        {\\n\\\n            error_code = set_flag_and_return_data_if_error(param_1, flag_value, &result);\\n\\\n            if (error_code < 0)\\n\\\n            {\\n\\\n                *status_ptr = 0;\\n\\\n                if ((int)((uint)*(uint16_t *)(param_2 + 0xc) << 0x18) < 0)\\n\\\n                {\\n\\\n                    status = 0x40;\\n\\\n                    goto END;\\n\\\n                }\\n\\\n            }\\n\\\n            else\\n\\\n            {\\n\\\n                *status_ptr = (uint)((result & 0xf000) == 0x2000);\\n\\\n            }\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            *status_ptr = (uint)((status & 0xf000) == 0x2000);\\n\\\n        }\\n\\\n        \\n\\\n        END:\\n\\\n        *result_ptr = result;\\n\\\n        return error_code;\\n\\\n    }",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "allocate_and_insert_into_linked_list_08002acc",
                "param_1": "size",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "list_head",
                "iVar2": "allocated_memory",
                "uVar3": "current_size"
            },
            "code": "void allocate_and_insert_into_linked_list_08002acc(uint32_t size, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t *list_head = PTR_DAT_08002afc;\n  uint8_t current_size = *PTR_DAT_08002af8;\n  if (current_size < size)\n  {\n    if (size < 0x20)\n    {\n      size = 0x20;\n    }\n    uint32_t allocated_memory = allocate_memory_08009908(*list_head, size, param_3, (uint32_t)current_size, param_4);\n    *list_head = allocated_memory;\n    if (allocated_memory == 0)\n    {\n      current_size = 0;\n    }\n    else\n    {\n      current_size = (uint8_t)size;\n    }\n    *PTR_DAT_08002af8 = current_size;\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "allocate_and_insert_into_linked_list_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "flag",
                "param_2": "value",
                "PTR_DAT_08002a48": "data_pointer_1",
                "PTR_DAT_08002a4c": "data_pointer_2",
                "PTR_DAT_08002a50": "data_pointer_3",
                "PTR_DAT_08002a54": "data_pointer_4"
            },
            "code": "void initialize_data_08002a30(int flag, int value) {\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(value << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08002b68",
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_data_0800932c",
                "param_1": "data_size",
                "param_2": "data",
                "param_3": "memory",
                "iVar1": "memory_block_size",
                "pbVar2": "current_memory_position",
                "pbVar3": "current_memory_block",
                "uVar4": "data_value"
            },
            "code": "uint process_data_0800932c(int data_size, byte data, byte **memory){\n  int memory_block_size;\n  byte *current_memory_block;\n  byte *current_memory_position;\n  uint data_value;\n  current_memory_position = *memory + 1;\n  *memory = current_memory_position;\n  current_memory_position[-1] = data;\n  if ((int) (*memory)[4] <= (int) (*memory)[2] - 1 || (*memory)[2] - 1 < 0 && data != 10){\n    if (data_size != 0 && *(int *)(data_size + 0x18) == 0){\n      initialize_memory_blocks_08009d50();\n    }\n    if (memory == (byte **)PTR_DAT_08009a74){\n      memory = *(byte ***)(data_size + 4);\n    }\n    else{\n      if (memory == (byte **)PTR_DAT_08009a78){\n        memory = *(byte ***)(data_size + 8);\n      }\n      else{\n        if (memory == (byte **)PTR_DAT_08009a7c){\n          memory = *(byte ***)(data_size + 0xc);\n        }\n      }\n    }\n    (*memory)[2] = (*memory)[6];\n    current_memory_block = (byte *)(uint)*(ushort *)(memory + 3);\n    memory_block_size = (int)current_memory_block << 0x1c;\n    if (memory_block_size < 0 && current_memory_block != (byte *)0x0 || check_memory_block_consistency_08009a80(data_size, memory, memory_block_size, current_memory_block, current_memory_position) == 0){\n      return 0xffffffff;\n    }\n    data_value = (uint) data;\n    memory_block_size = (int) *memory - (int) (*memory)[4];\n    if (memory_block_size < (int) (*memory)[5] || process_data_0800932c_08009c7c(data_size, memory) == 0){\n      (*memory)[2] = (*memory)[2] - 1;\n      current_memory_position = *memory;\n      *memory = current_memory_position + 1;\n      current_memory_position[0] = data;\n      if (current_memory_position + 1 != (*memory)[5]){\n        if ((uint)*(ushort *)(memory + 3) << 0x1f < 0){\n          if (data != 10){\n            return data_value;\n          }\n        }\n        else{\n          return data_value;\n        }\n      }\n      if (process_data_0800932c_08009c7c(data_size, memory) == 0){\n        return data_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_data_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "process_data_0800322c",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "func_ptr"
            },
            "code": "void process_data_0800322c(undefined4 *data_ptr, undefined4 param_2, undefined4 param_3) {\n    undefined4 *func_ptr;\n    func_ptr = (undefined4 *)*data_ptr;\n    if (func_ptr != (undefined4 *)0x0) {\n        (**(code **)*func_ptr)(func_ptr, 0xf9);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr, param_2);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr, param_3);\n        return;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "process_data_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "str1",
                "param_2": "str2",
                "pcVar1": "s1",
                "pcVar2": "s2",
                "pcVar3": "s2_end",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "char* find_substring_080099a4(char* str1, char* str2) {\n  char* result = NULL;\n  if (*str1 != '\\0') {\n    while (*str1 != '\\0') {\n      char* s1 = str1;\n      char* s2 = str2;\n      while (*s1 == *s2 && *s2 != '\\0') {\n        s1++;\n        s2++;\n      }\n      if (*s2 == '\\0') {\n        result = str1;\n        break;\n      }\n      str1++;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "undefined4": "int",
                "PTR_DAT_08005a24": "value_pointer"
            },
            "code": "int get_value_from_pointer_08005a1c() {\n    int* PTR_DAT_08005a24 = (int*)PTR_DAT_08005a24;\n    return *PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n    call_function_pointer_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_character_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_character_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    call_function_pointer_08002f1e(PTR_DAT_08002044,0xf0);\n    call_function_pointer_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_08002044,0);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,0xb);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_character_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_character_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,2);\n        call_function_pointer_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = find_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,3);\n        call_function_pointer_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,4);\n        call_function_pointer_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = find_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = find_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,6);\n        call_function_pointer_08002f1e(puVar4,1);\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n      call_function_pointer_08002f1e(puVar5,0x6e);\n      call_function_pointer_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_value_at_offset_08002fa0(puVar5,bVar1);\n        call_function_pointer_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        call_function_pointer_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_offset_08002fba(puVar5,bVar1);\n          call_function_pointer_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n          call_function_pointer_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      process_data_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_from_ptr_dat_08002708_and_shift_left_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          update_flags_08000588(uVar12);\n        }\n        process_servo_data_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      encode_and_send_data_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_data_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          add_to_linked_list_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        process_input_wrapper_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        processData_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        encode_and_send_data_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      process_characters_and_initialize_params_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_08002ac0",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_08001bf8",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_08002a30",
                "FUN_08001c18",
                "FUN_08000a64",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_data_from_ptr_dat_08003760",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t get_data_from_ptr_dat_08003760() {\n    return *(uint32_t *)PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_080067ac",
                "FUN_08005460",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08003a20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8"
            ],
            "imported": false,
            "current_name": "get_data_from_ptr_dat_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "input_param",
                "uVar1": "return_value",
                "find_and_return_value_08007306": "find_and_return_value"
            },
            "code": "int check_param_08007320(int input_param)\n{\n  int return_value = 0;\n  if (input_param != -1) {\n    return_value = find_and_return_value();\n    return return_value;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "update_data_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "flag",
                "param_4": "param",
                "puVar1": "data_ptr_2",
                "puVar2": "data_ptr"
            },
            "code": "void update_data_08000be8(int index, uint32_t mask, int flag, uint32_t param)\n{\n    uint32_t* data_ptr = (uint32_t*)((byte)PTR_DAT_08000c0c[index] & mask);\n    uint32_t* data_ptr_2 = PTR_DAT_08000c0c;\n    if ((flag != 0) || (data_ptr_2 = (uint32_t*)(uint8_t)PTR_DAT_08000c10[index], data_ptr != data_ptr_2)) {\n        call_function_with_offset_08002efe(PTR_DAT_08000c14, index, data_ptr, data_ptr_2, param);\n        PTR_DAT_08000c10[index] = (char)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "update_data_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "validate_input_and_initialize_output_buffer_08003fd8",
                "param_1": "input_size",
                "puVar1": "output_buffer_ptr",
                "DAT_08003ffc": "output_buffer",
                "DAT_08004000": "output_buffer_start"
            },
            "code": "int validate_input_and_initialize_output_buffer_08003fd8(int input_size) {\n  int *DAT_08003ffc_ptr;\n  DAT_08003ffc_ptr = DAT_08003ffc;\n  if (input_size - 1U < 0x1000000) {\n    DAT_08003ffc[1] = input_size - 1U;\n    *(undefined *)(DAT_08003ffc + 35) = 0xf0;\n    DAT_08003ffc_ptr[2] = 0;\n    *DAT_08003ffc_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": false,
            "current_name": "validate_input_and_initialize_output_buffer_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "encoder",
                "param_2": "data_size",
                "param_3": "data",
                "param_4": "max_size",
                "uVar1": "current_byte",
                "uVar2": "bit_position",
                "uVar3": "total_bits_encoded",
                "uVar4": "byte_position"
            },
            "code": "void encode_data_0800307a(uint32_t *encoder, uint data_size, uint8_t *data, uint max_size)\n{\n    uint8_t current_byte = *data;\n    if (max_size == 0) {\n        max_size = 0xffffffff;\n    }\n    uint bit_position = 0;\n    uint byte_position = 0;\n    uint total_bits_encoded = 0;\n    while ((byte_position < data_size) && (total_bits_encoded < max_size)) {\n        (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,((uint)data[byte_position] << (bit_position & 0xff) | current_byte) & 0x7f);\n        current_byte = (int)(uint)data[byte_position] >> (7 - bit_position & 0xff) & 0xff;\n        bit_position++;\n        while ((total_bits_encoded = total_bits_encoded + 1, 6 < bit_position && (total_bits_encoded < max_size))) {\n            (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,current_byte & 0x7f);\n            current_byte = current_byte >> 7;\n            bit_position = bit_position - 7;\n        }\n        byte_position++;\n    }\n    if ((bit_position != 0) && (total_bits_encoded < max_size)) {\n        (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder,(1 << (bit_position & 0xff)) - 1U & current_byte);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_08003106",
                "FUN_0800319e"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "call_function_with_parameter_0800319e",
                "param_1": "function_ptr",
                "param_2": "param",
                "param_3": "param2",
                "puVar1": "ptr",
                "local_a": "local_param2"
            },
            "code": "void call_function_with_parameter_0800319e(void* function_ptr, uint32_t param, uint16_t param2) {\\n\\\n    void* ptr = (void*)*function_ptr;\\n\\\n    if (ptr != NULL) {\\n\\\n        uint32_t modified_param = param & 0xf | 0x90;\\n\\\n        (*(void (*)(void*, uint32_t))(*function_ptr))(function_ptr, modified_param);\\n\\\n        encode_data_0800307a(function_ptr, 2, &param2);\\n\\\n    }\\n\\\n    return;\\n\\\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "call_function_with_parameter_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "update_value_at_address_08008d00",
                "param_1": "address",
                "param_2": "value_index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void update_value_at_address_08008d00(int address, uint value_index) {\n  undefined value;\n  code *jump_table;\n  if (value_index < 0x3c) {\n    value = PTR_DAT_08008d14[value_index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "update_value_at_address_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_block_08009190",
                "param_1": "block_size",
                "PTR_PTR_DAT_0800919c": "memory_block_ptr"
            },
            "code": "void allocate_memory_block_08009190(void* PTR_PTR_DAT_0800919c, int block_size) {\n  allocate_memory_block_08009190_08009270(*(void **)PTR_PTR_DAT_0800919c, block_size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input",
                "cVar1": "c",
                "puVar2": "ptr"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input)\n{\n    char c;\n    uint32_t *ptr;\n    \n    c = *(char *)((int)input + 0x3d);\n    ptr = input[0xb];\n    \n    if ((*(uint16_t *)(input + 10) == 0) && (c == '!')) {\n        if ((ptr == (uint32_t *)0x4) || ((ptr == (uint32_t *)0x8 || (ptr == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004b80();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_08004a1e();\n        }\n    }\n    else if ((c == '!') || ((*(char *)((int)input + 0x3e) == '@' && (c == '\"')))) {\n        if (*(uint16_t *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    ptr = input[9];\n                    input[9] = (uint32_t *)((int)ptr + 1);\n                    (*input)[4] = (uint32_t)*(uint8_t *)ptr;\n                    *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            ptr = input[9];\n            input[9] = (uint32_t *)((int)ptr + 1);\n            (*input)[4] = (uint32_t)*(uint8_t *)ptr;\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_of_char_in_string_0800997e",
                "param_1": "string_start",
                "param_2": "string_length",
                "param_3": "char_to_find",
                "param_4": "string_increment",
                "iVar1": "current_index",
                "iVar2": "last_occurrence_index"
            },
            "code": "int find_last_occurrence_of_char_in_string_0800997e(int string_start, int string_length, int char_to_find, int string_increment) {\n  int last_occurrence_index = -1;\n  if (string_length != 0) {\n    int current_index = 0;\n    while (current_index = find_char_in_string_08009938(string_start, string_length, char_to_find, string_increment), current_index != 0) {\n      string_start = current_index + 1;\n      last_occurrence_index = current_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = find_char_in_string_08009938();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_of_char_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_if_param1_equals_1_and_param2_equals_0xffff_08002dbc",
                "param_1": "param1",
                "param_2": "param2",
                "initialize_data_08002ce0": "initialize_data"
            },
            "code": "void initialize_if_param1_equals_1_and_param2_equals_0xffff_08002dbc(int param1, int param2) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_data(PTR_DAT_08002dd8);\n  }\n  return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param1_equals_1_and_param2_equals_0xffff_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "create_linked_list_entry_08002e44",
                "param_1": "entry_position",
                "param_2": "filename",
                "param_3": "file_start",
                "param_4": "file_end",
                "bVar1": "file_end_offset",
                "cVar2": "file_end_char",
                "iVar3": "substring_position",
                "iVar4": "last_slash_position",
                "puVar5": "memory_block"
            },
            "code": "void create_linked_list_entry_08002e44(int entry_position, int filename, undefined file_start, undefined file_end) {\n  int substring_position = find_substring_position(filename, FILE_EXTENSION);\n  int last_slash_position = find_last_occurrence_of_char_in_string(filename, SLASH);\n  if (last_slash_position == 0) {\n    last_slash_position = find_last_occurrence_of_char_in_string(filename, BACKSLASH);\n  }\n  if (last_slash_position != 0) {\n    filename = last_slash_position + 1;\n  }\n  if (substring_position == 0) {\n    char file_end_char = find_end_of_string(filename);\n    *(char *)(entry_position + 0xc4) = file_end_char + 2;\n  }\n  else {\n    *(char *)(entry_position + 0xc4) = ((char)substring_position - (char)filename) + 2;\n  }\n  insert_value_into_linked_list(*(undefined4 *)(entry_position + 200));\n  byte file_end_offset = *(byte *)(entry_position + 0xc4);\n  undefined *memory_block = (undefined *)allocate_memory_block(file_end_offset + 1);\n  *(undefined **)(entry_position + 200) = memory_block;\n  memory_block[file_end_offset] = 0;\n  *memory_block = file_start;\n  memory_block[1] = file_end;\n  copy_string(memory_block + 2, filename, *(byte *)(entry_position + 0xc4) - 2);\n  return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_0800997e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "create_linked_list_entry_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "initialize_timer_with_default_values_0800242c",
                "param_1": "timer_id",
                "param_2": "duration",
                "param_3": "frequency",
                "param_4": "callback_parameter",
                "PTR_LAB_08002444_1_08002440": "callback_function"
            },
            "code": "void initialize_timer_with_default_values_0800242c(undefined4 timer_id, uint32_t duration, uint32_t frequency, void* PTR_LAB_08002444_1_08002440, void* callback_parameter){\n    initialize_timer_08007648(timer_id, duration, frequency, PTR_LAB_08002444_1_08002440, callback_parameter);\n    return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "initialize_timer_with_default_values_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "check_and_calculate_value_080058d2",
                "param_1": "flags",
                "param_2": "input_size",
                "puVar1": "data_ptr",
                "iVar2": "current_time",
                "iVar3": "time_diff",
                "uVar4": "input_type"
            },
            "code": "uint32_t check_and_calculate_value_080058d2(uint32_t *flags, uint32_t input_size)\n{\n    uint32_t *data_ptr;\n    int current_time, time_diff;\n    uint32_t input_type;\n    uint32_t value;\n\n    if ((*flags & 2) != 0) {\n        flags[1] = flags[1] & 0xffffff0f | flags[2];\n    }\n\n    if ((*flags & 1) != 0) {\n        input_type = flags[1];\n        if (input_type == 1) {\n            if ((*DAT_08005a10 & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((input_type != 2) && ((*DAT_08005a10 & 2) == 0)) {\n            return 1;\n        }\n        flags[1] = input_type | flags[1] & 0xfffffffc;\n        current_time = get_data_from_ptr_dat_08003760();\n        if (input_type == 1) {\n            while ((flags[1] & 0xc) != 4) {\n                time_diff = get_data_from_ptr_dat_08003760() - current_time;\n                if (time_diff > 5000) {\n                    return 3;\n                }\n            }\n        }\n        else if (input_type == 2) {\n            while ((flags[1] & 0xc) != 8) {\n                time_diff = get_data_from_ptr_dat_08003760() - current_time;\n                if (time_diff > 5000) {\n                    return 3;\n                }\n            }\n        }\n        else {\n            while ((flags[1] & 0xc) != 0) {\n                time_diff = get_data_from_ptr_dat_08003760() - current_time;\n                if (time_diff > 5000) {\n                    return 3;\n                }\n            }\n        }\n    }\n\n    data_ptr = DAT_08005a0c;\n    if ((input_size < (*DAT_08005a0c & 7)) &&\n        (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_size, input_size != (*data_ptr & 7))) {\n        return 1;\n    }\n\n    if ((*flags & 4) != 0) {\n        flags[1] = flags[1] & 0xfffff8ff | flags[3];\n    }\n    if ((*flags & 8) != 0) {\n        flags[1] = flags[1] & 0xffffc7ff | flags[4] << 3;\n    }\n\n    value = calculate_value_08005840();\n    *(uint32_t *)PTR_DAT_08005a18 = value >> PTR_DAT_08005a14[(flags[1] << 0x18) >> 0x1c];\n    validate_and_initialize_output_buffer_080036d8(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08003760",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "check_and_calculate_value_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "processDataAndInsertIntoLinkedList_08002c00",
                "processDataAndInsertIntoLinkedList_08002b68": "processDataAndInsertIntoLinkedList",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void processDataAndInsertIntoLinkedList_08002c00(void)\n{\n  processData();\n  insertIntoLinkedList();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "processDataAndInsertIntoLinkedList_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "set_bits_at_position_08003f30",
                "param_1": "bit_position",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "num_bits_to_set",
                "DAT_08003f8c": "PTR_DATA_08003f8c",
                "DAT_08003f90": "PTR_DATA_08003f90"
            },
            "code": "void set_bits_at_position_08003f30(uint bit_position, uint mask, uint value)\n{\n  uint shift_amount = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint num_bits_to_set = 7 - shift_amount;\n  if (num_bits_to_set > 3) {\n    num_bits_to_set = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint bits_to_set = (mask & (1 << (num_bits_to_set & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & value;\n  if ((int)bit_position < 0) {\n    *(char *)(DAT_08003f90 + (bit_position & 0xf)) = (char)(bits_to_set << 4);\n  }\n  else {\n    *(char *)(bit_position + 0xe000e400) = (char)(bits_to_set << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_080036d8",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bits_at_position_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "decrement_by_four_08007f78",
                "param_1": "value",
                "return": "result"
            },
            "code": "int decrement_by_four_08007f78(int value)\n{\n    int result = value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "decrement_by_four_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_at_position_08006b28",
                "param_1": "integer",
                "param_2": "position",
                "PTR_": "ptr",
                "DAT_": "shifted_integer"
            },
            "code": "uint get_bit_at_position_08006b28(uint integer, int position) {\n    uint* PTR_ = (uint*)(position + ((integer << 0x18) >> 0x1c) * 4);\n    uint DAT_ = integer & 0xf;\n    uint masked_value = *PTR_ >> DAT_;\n    uint bit = masked_value & 1;\n    return bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_valid_input_080085dc",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "combine_bytes_08006b1c": "combine_bytes",
                "PTR_DAT_080085fc": "address_table"
            },
            "code": "bool is_valid_input_080085dc(int input_index) {\n  uint16_t combined_bytes = combine_bytes(get_address(input_index));\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "data",
                "* (byte *) (param_1 + 0x3a)": "byte_1",
                "* (byte *) (param_1 + 0x39)": "byte_2"
            },
            "code": "byte combine_bytes_08006b1c(int data)\n{\n    byte byte_1 = *(byte *)(data + 0x3a);\n    byte byte_2 = *(byte *)(data + 0x39);\n    return byte_1 | byte_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_base_if_not_zero_08008ed6",
                "param_1": "data",
                "param_2": "length",
                "param_3": "base",
                "param_4": "function_pointer",
                "convert_base_08008e7c": "convert_base"
            },
            "code": "void convert_base_if_not_zero_08008ed6(uint32_t* data, uint32_t length, uint32_t base, uint32_t function_pointer) {\n  if (base != 0) {\n    convert_base(data, length, base & 0xff);\n    return;\n  }\n  (**(code **)*data)(data, length & 0xff, 0, *(code **)*data, function_pointer);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "convert_base_if_not_zero_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "check_and_assign_value_0800a130",
                "param_1": "output",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "memory_ptr",
                "iVar2": "result"
            },
            "code": "void check_and_assign_value_0800a130(int *output, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *memory_ptr;\n    int result;\n    memory_ptr = PTR_DAT_0800a150;\n    *(undefined4 *)PTR_DAT_0800a150 = 0;\n    result = return_zero_08008854(param_2, param_3, param_4, param_4, param_4);\n    if ((result == -1) && (*(int *)memory_ptr != 0)) {\n        *output = *(int *)memory_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "check_and_assign_value_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_to_one_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_to_one_08008f3c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "send_data_to_server_if_possible_08002ef2",
                "param_1": "data_offset",
                "param_2": "data_type",
                "param_3": "data_info",
                "param_4": "data_size",
                "<unmodified>": "data_to_send"
            },
            "code": "void send_data_to_server_if_possible_08002ef2(int data_offset, undefined4 data_type, undefined2 data_info, undefined4 data_size, undefined4 data_to_send){\n  send_data_to_server_if_possible_08002ef2_08003158(data_offset + 0x40, data_type, data_info, data_size, data_to_send);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "send_data_to_server_if_possible_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_by_key_08007332",
                "param_1": "key",
                "param_2": "data_array",
                "*param_2": "*data_array"
            },
            "code": "int find_value_by_key_08007332(int key, char *data_array)\n{\n    while(true) {\n        if (*(int *)(data_array + 4) == 0) {\n            return -1;\n        }\n        if (*(int *)(data_array + 4) == key) {\n            break;\n        }\n        data_array = data_array + 0xc;\n    }\n    return (int)*data_array;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": false,
            "current_name": "find_value_by_key_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "update_data_if_flag_not_set_08006128",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "update_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)"
            },
            "code": "int update_data_if_flag_not_set_08006128(int *data_ptr, int flag, int update_type) {\n  if (*(char *)(data_ptr + 0xf) != flag) {\n    *(char *)(data_ptr + 0xf) = flag;\n    *(char *)((int)data_ptr + 0x3d) = 2;\n    switch(update_type) {\n    case 0:\n      update_data_08005cec(*data_ptr);\n      break;\n    case 4:\n      update_values_080060c4(*data_ptr);\n      break;\n    case 8:\n      update_data_08005d48(*data_ptr);\n      break;\n    case 0xc:\n      update_data_08005dac(*data_ptr);\n    }\n    *(char *)((int)data_ptr + 0x3d) = 1;\n    *(char *)(data_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_data_if_flag_not_set_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_memory_and_clear_08003658",
                "iVar1": "index",
                "puVar2": "destination",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void copy_memory_and_clear_08003658(void)\n{\n  int index;\n  undefined4 *destination;\n  code *jumptable;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4)\n  {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (destination = (undefined4 *)PTR_DAT_08003698; destination < PTR_DAT_0800369c; destination++)\n  {\n    *destination = 0;\n  }\n  set_bit_and_clear_mask();\n  execute_functions();\n  jumptable = (code *)0x800368a;\n  process_server_data();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08008f1c",
                "FUN_08009148",
                "FUN_080073ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_memory_and_clear_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "check_memory_block_consistency_08009a80",
                "param_1": "result",
                "param_2": "block",
                "uVar1": "length",
                "uVar2": "flags",
                "iVar3": "linked_list"
            },
            "code": "uint check_memory_block_consistency_08009a80(undefined4 *result, undefined4 *block) {\n    uint length;\n    ushort flags;\n    int linked_list;\n\n    linked_list = *(int *)PTR_PTR_DAT_08009b4c;\n    if (linked_list != 0 && *(int *)(linked_list + 0x18) == 0) {\n        free_memory_block_08009d50(linked_list);\n    }\n\n    if (block == (undefined4 *)PTR_DAT_08009b50) {\n        block = *(undefined4 **)(linked_list + 4);\n    }\n    else if (block == (undefined4 *)PTR_DAT_08009b54) {\n        block = *(undefined4 **)(linked_list + 8);\n    }\n    else if (block == (undefined4 *)PTR_DAT_08009b58) {\n        block = *(undefined4 **)(linked_list + 0xc);\n    }\n\n    flags = *(ushort *)(block + 3);\n    length = (uint)flags;\n\n    if (length < 0x40000000) {\n        if (length < 0x20000000) {\n            *result = 9;\n            goto LAB_08009ab0;\n        }\n        if ((int)(length << 0x1d) < 0) {\n            if ((undefined4 *)block[0xd] != (undefined4 *)0x0 && (undefined4 *)block[0xd] != block + 0x11) {\n                insert_into_linked_list_080091d8(result);\n            }\n            block[0xd] = 0;\n            *(ushort *)(block + 3) &= 0xffdb;\n            block[1] = 0;\n            *block = block[4];\n        }\n        *(ushort *)(block + 3) |= 8;\n    }\n\n    if (block[4] == 0 && (flags & 0x280) != 0x200) {\n        allocate_and_initialize_memory_block_08009eac(result, block);\n    }\n\n    flags = *(ushort *)(block + 3);\n    length = flags & 1;\n\n    if ((flags & 1) == 0) {\n        if (length < 0x40000000) {\n            length = block[5];\n        }\n        block[2] = length;\n    }\n    else {\n        block[2] = 0;\n        block[6] = -block[5];\n    }\n\n    if (block[4] == 0) {\n        flags = *(ushort *)(block + 3);\n        length = flags & 0x80;\n        if (length != 0) {\n            goto LAB_08009ab0;\n        }\n    }\n    else {\n        length = 0;\n    }\n    return length;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009eac",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "check_memory_block_consistency_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_into_linked_list_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_block_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "clear_bit_080062f4",
                "param_1": "bit_field",
                "param_2": "bit_position",
                "puVar1": "field_ptr"
            },
            "code": "uint32_t clear_bit_080062f4(uint32_t **bit_field, uint32_t bit_position) {\\n\\\n  uint32_t *field_ptr;\\n\\\n  switch(bit_position) {\\n\\\n    case 0:\\n\\\n      (*bit_field)[3] &= 0xfffffffd;\\n\\\n      break;\\n\\\n    case 4:\\n\\\n      (*bit_field)[3] &= 0xfffffffb;\\n\\\n      break;\\n\\\n    case 8:\\n\\\n      (*bit_field)[3] &= 0xfffffff7;\\n\\\n      break;\\n\\\n    case 0xc:\\n\\\n      (*bit_field)[3] &= 0xffffffef;\\n\\\n      break;\\n\\\n  }\\n\\\n  set_bit(*bit_field, bit_position, 0);\\n\\\n  field_ptr = *bit_field;\\n\\\n  if (((field_ptr == DAT_0800638c) && ((field_ptr[8] & 0x1111) == 0)) && ((field_ptr[8] & 0x444) == 0)) {\\n\\\n    field_ptr[0x11] &= 0xffff7fff;\\n\\\n  }\\n\\\n  field_ptr = *bit_field;\\n\\\n  if (((field_ptr[8] & 0x1111) == 0) && ((field_ptr[8] & 0x444) == 0)) {\\n\\\n    *field_ptr &= 0xfffffffe;\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "clear_bit_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infiniteLoop_080073e8"
            },
            "code": "void infiniteLoop_080073e8(void)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": false,
            "current_name": "infiniteLoop_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "data_char",
                "puVar2": "data_ptr"
            },
            "code": "int process_data_08004a76(int *data)\n{\n  char data_char;\n  char *data_ptr;\n  \n  data_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    data_ptr = (char *)data[9];\n    data[9] = (int)(data_ptr + 1);\n    *data_ptr = (char)*(int *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (data_char == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(char *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "input_array",
                "param_2": "input_value",
                "iVar1": "calculated_value"
            },
            "code": "void calculate_value_0800267c(byte *input_array, int input_value)\n{\n  int calculated_value;\n  \n  if (*input_array < 0xc) {\n    calculated_value = (0x88 - (char)input_array[1]) * 4;\n    if ((calculated_value - input_value == 0 || calculated_value < input_value) &&\n       (calculated_value = (600 - (char)input_array[2]) * 4,\n       input_value == calculated_value || input_value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(input_value,calculated_value)))\n    {\n      calculated_value = input_value;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "data",
                "local_c": "count"
            },
            "code": "uint32_t process_data_080047f4(uint32_t **data_ptr, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t result;\n    uint32_t *data = *data_ptr;\n    int count = 0;\n    if (data[0x3d] == ' ')\n    {\n        count = (uint32_t)((unsigned long long)DAT_080048c0 * (unsigned long long)(*(uint32_t *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n        while ((data[0][6] & 2) != 0)\n        {\n            if (count == 0)\n            {\n                data_ptr[0xc] = NULL;\n                data[0x3d] = 0x20;\n                data_ptr[0xf] = 0;\n                return 3;\n            }\n            data = *data_ptr;\n            count--;\n        }\n        if (data_ptr[0xf] == 0x01)\n        {\n            result = 2;\n        }\n        else\n        {\n            data_ptr[0xf] = 1;\n            if ((data[0] & 1) == 0)\n            {\n                data[0] |= 1;\n            }\n            **data_ptr &= 0xfffff7ff;\n            data[0x3d] = 0x22;\n            data[0x3e] = 0x10;\n            result = 0;\n            data_ptr[0x10] = NULL;\n            data_ptr[9] = param2;\n            data[0x2a / 4] = param3;\n            data_ptr[0xb] = DAT_080048c4;\n            data[0x14 / 4] = data[0x2a / 4];\n            data_ptr[0x11] = param1;\n            **data_ptr |= 0x400;\n            **data_ptr |= 0x100;\n            data_ptr[0xf] = 0;\n            (*data_ptr)[1] |= 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_data_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "check_data_0800376c",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "start_time",
                "uVar2": "value",
                "iVar3": "elapsed_time",
                "uVar4": "result",
                "puVar5": "ptr",
                "uVar6": "divisor",
                "local_1c": "threshold",
                "calculate_value_08005bb8": "calculate_value",
                "PTR_DAT_080038c8": "divisor",
                "DAT_080038cc": "mask1",
                "DAT_080038d0": "mask2",
                "DAT_080038d4": "mask3",
                "DAT_080038d8": "mask4"
            },
            "code": "uint32_t check_data_0800376c(uint32_t **data, uint32_t size) {\n  int start_time = get_start_time();\n  uint32_t *ptr = *data;\n  uint32_t flags = ptr[2];\n  if ((flags & 0x100) == 0) {\n    uint32_t value = calculate_value(2);\n    uint32_t threshold = 0;\n    if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n      while ((**data & 2) == 0) {\n        if ((size != 0xffffffff) && ((size != 0) && ((get_start_time() - start_time) > size))) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n      }\n      (*data)[10] |= 4;\n      (*data)[9] = 0;\n      return 3;\n    }\n    else {\n      uint32_t PTR_DAT_080038c8 = *PTR_DAT_080038c8;\n      uint32_t multiplier = 0;\n      if (((ptr[4] & DAT_080038cc) == 0) && ((ptr[3] & DAT_080038cc + 0xdc000000) == 0)) {\n        if ((ptr[4] & DAT_080038d0) == 0) {\n          if ((ptr[3] & DAT_080038d4) == 0) {\n            multiplier = 0x14;\n          }\n          else {\n            multiplier = 0x29;\n          }\n        }\n        else {\n          multiplier = 0x29;\n        }\n      }\n      else if (((ptr[4] & DAT_080038d0) == 0) && ((ptr[3] & DAT_080038d0 + 0xee000000) == 0)) {\n        multiplier = 0x54;\n      }\n      else if ((DAT_080038d8 & ptr[4]) == 0) {\n        if ((DAT_080038d8 & ptr[3]) == 0) {\n          multiplier = 0x54;\n        }\n        else {\n          multiplier = 0xfc;\n        }\n      }\n      else {\n        multiplier = 0xfc;\n      }\n      threshold = (PTR_DAT_080038c8 / value) * multiplier;\n      while ((threshold - start_time) > 0) {\n        if ((size != 0xffffffff) && ((size != 0) && ((get_start_time() - start_time) > size))) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n        start_time++;\n      }\n      (*data)[0] = 0xffffffed;\n      (*data)[10] |= 0x200;\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if ((*data)[3] == NULL) {\n          (*data)[10] &= 0xfffffeff;\n          if (((*data)[10] & 0x1000) == 0) {\n            (*data)[10] |= 1;\n            return 0;\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        return 0;\n      }\n    }\n  }\n  else {\n    (*data)[10] |= 0x20;\n    (*data)[9] = 0;\n    return 1;\n  }\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_data_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "validate_data_08003e20",
                "param_1": "data",
                "iVar1": "is_valid",
                "uVar2": "divisor",
                "iVar3": "data_start",
                "iVar4": "current_data",
                "uVar5": "uVar5",
                "local_14": "flag"
            },
            "code": "int validate_data_08003e20(int *data)\n{\n  int is_valid;\n  uint divisor;\n  int data_start;\n  int current_data;\n  uint uVar5;\n  int flag = 0;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  is_valid = check_if_data_valid();\n  if (is_valid == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    uVar5 = *(uint *)PTR_DAT_08003f08;\n    divisor = calculate_divisor(2);\n    for (data_start = uVar5 / divisor << 1; data_start != 0; data_start = data_start + -1) {\n    }\n    set_data_flag(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    data_start = get_data_from_ptr_dat_08003760();\n    while (current_data = *data, (*(uint *)(current_data + 8) & 8) != 0) {\n      current_data = get_data_from_ptr_dat_08003760();\n      if (10 < (uint)(current_data - data_start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_data + 8) = *(uint *)(current_data + 8) | 4;\n    data_start = get_data_from_ptr_dat_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_data = get_data_from_ptr_dat_08003760();\n      if (10 < (uint)(current_data - data_start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return is_valid;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760",
                "FUN_08003a20",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "validate_data_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_shifted_value_from_pointer_08005a48",
                "uVar1": "shifted_value",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "PTR_DAT_08005a64": "pointer_array",
                "DAT_08005a60": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08005a48(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  uint shifted_result = shifted_value >> PTR_DAT_08005a64[index];\n  return shifted_result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_bytes_with_bitwise_shifts_080033a8",
                "param_1": "destination",
                "param_2": "num_bytes",
                "param_3": "source",
                "iVar2": "i",
                "uVar3": "i",
                "bVar1": "current_byte"
            },
            "code": "void copy_bytes_with_bitwise_shifts_080033a8(uint8_t *destination, const uint8_t *source, size_t num_bytes) {\n    uint8_t current_byte;\n    uint8_t next_byte;\n    size_t i;\n    for (i = 0; i < num_bytes; i += 2) {\n        current_byte = *(source + i);\n        next_byte = *(source + i + 1);\n        *(destination + i) = current_byte;\n        *(destination + i + 1) = (next_byte << 7) | current_byte;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_bytes_with_bitwise_shifts_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "processDataAndInsertIntoLinkedList_08002c14"
            },
            "code": "void processDataAndInsertIntoLinkedList_08002c14(void)\n{\n  processDataAndInsertIntoLinkedList_08002c14_08002c00();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "processDataAndInsertIntoLinkedList_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_value_at_offset_08008d18",
                "param_1": "offset",
                "param_2": "value_index",
                "uVar1": "value"
            },
            "code": "void set_value_at_offset_08008d18(int offset, uint value_index)\n{\n  undefined value;\n  if (value_index < 0x3c) {\n    value = PTR_DAT_08008d2c[value_index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(offset + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_or_count_bits_08009084",
                "param_1": "input",
                "iVar1": "bits_set_to_one_count",
                "execute_and_update_flags_0800a18c": "execute_and_update_flags",
                "count_bits_set_to_one_08008f3c": "count_bits_set_to_one"
            },
            "code": "void execute_or_count_bits_08009084(int input) {\n  int bits_set_to_one_count;\n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  execute_and_update_flags();\n  bits_set_to_one_count = count_bits_set_to_one();\n  if (*(int *)(PTR_DAT_080090b0 + bits_set_to_one_count * 0x14 + 0xc) != 0) {\n    execute_or_count_bits_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_or_count_bits_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "update_value_0800a020",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "assigned_value",
                "uVar2": "new_value",
                "bVar3": "is_assigned"
            },
            "code": "void update_value_0800a020(int value1, int value2)\n{\n  int assigned_value = check_and_assign(value1, (int)*(short *)(value2 + 0xe));\n  bool is_assigned = assigned_value >= 0;\n  uint new_value;\n  if (is_assigned)\n  {\n    new_value = *(int *)(value2 + 0x54) + assigned_value;\n  }\n  else\n  {\n    new_value = *(ushort *)(value2 + 0xc) & 0xffffefff;\n  }\n  if (is_assigned)\n  {\n    *(uint *)(value2 + 0x54) = new_value;\n  }\n  if (!is_assigned)\n  {\n    *(short *)(value2 + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "update_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "uVar1": "value",
                "uVar2": "flags",
                "local_1c": "data",
                "abStack_18": "buffer",
                "uStack_14": "stack_14",
                "uStack_10": "stack_10",
                "uStack_c": "stack_c"
            },
            "code": "uint calculate_value_08005840(void)\n{\n  uint value = 0;\n  uint flags = 0;\n  undefined2 data = 0;\n  byte buffer[4];\n  undefined4 stack_c;\n  undefined4 stack_10;\n  undefined4 stack_14;\n  stack_c = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  stack_10 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  stack_14 = *(undefined4 *)PTR_DAT_0800589c;\n  data = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  flags = *(uint *)(DAT_080058a0 + 4);\n  value = DAT_080058a8;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      value = DAT_080058a4 * (uint)buffer[(flags << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_080058a8 * buffer[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&data - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_param2_if_param1_not_null_08007f7c",
                "param_1": "param1",
                "param_2": "param2",
                "*(int *)(param_1 + 0x60)": "ptr",
                "set_flags_080049e0": "set_flags"
            },
            "code": "void set_param2_if_param1_not_null_08007f7c(int param1, int param2) {\n  if (param1 != 0) {\n    if (param2 != 0) {\n      int* ptr = (int*)(param1 + 0x60);\n      *ptr = param2;\n      set_flags(ptr + 1);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param2_if_param1_not_null_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "check_data_validity_08006d80",
                "param_1": "data",
                "local_46": "result",
                "local_44": "shifted_data",
                "local_40": "value_to_set",
                "local_3c": "offset",
                "local_38": "param_value",
                "local_34": "unused",
                "local_30": "unused",
                "local_2c": "unused",
                "local_28": "unused",
                "local_24": "unused",
                "local_20": "unused",
                "local_1c": "mask",
                "local_10": "unused",
                "PTR_DAT_08006e60": "PARAM_PTR",
                "PTR_DAT_08006e64": "PARAM_PTR+4"
            },
            "code": "uint16_t check_data_validity_08006d80(uint32_t data)\\n\\\n{\\n\\\n  int32_t param_value;\\n\\\n  uint16_t result = 0;\\n\\\n  uint32_t shifted_data;\\n\\\n  uint32_t data_flag;\\n\\\n  uint32_t value_at_offset;\\n\\\n  uint32_t mask = 0x200;\\n\\\n  uint32_t value_to_set = 0;\\n\\\n  uint32_t offset = 10;\\n\\\n\\\n  memset(&param_value, 0, sizeof(param_value));\\n\\\n  param_value = check_param(data, PTR_DAT_08006e60);\\n\\\n\\\n  if (param_value != 0) {\\n\\\n    shifted_data = get_shifted_value(data);\\n\\\n\\\n    if (shifted_data < 0x12) {\\n\\\n      value_to_set = 1;\\n\\\n      param_value = set_param_values(PTR_DAT_08006e60, &shifted_data);\\n\\\n\\\n      if (param_value == 0) {\\n\\\n        param_value = validate_data(PTR_DAT_08006e60);\\n\\\n\\\n        if (param_value == 0) {\\n\\\n          param_value = set_data_flag_if_not_set(PTR_DAT_08006e60);\\n\\\n\\\n          if (param_value == 0) {\\n\\\n            param_value = check_data(PTR_DAT_08006e60, offset);\\n\\\n\\\n            if (param_value == 0) {\\n\\\n              value_at_offset = get_value_at_offset(PTR_DAT_08006e60);\\n\\\n\\\n              if ((value_at_offset & mask) != 0) {\\n\\\n                result = get_value_at_offset(PTR_DAT_08006e60 + 4);\\n\\\n              }\\n\\\n\\\n              param_value = check_data_validity_08006d80(PTR_DAT_08006e60);\\n\\\n\\\n              if (param_value != 0) {\\n\\\n                result = 0;\\n\\\n              }\\n\\\n            }\\n\\\n            else {\\n\\\n              result = 0;\\n\\\n            }\\n\\\n          }\\n\\\n          else {\\n\\\n            result = 0;\\n\\\n          }\\n\\\n        }\\n\\\n        else {\\n\\\n          result = 0;\\n\\\n        }\\n\\\n      }\\n\\\n      else {\\n\\\n        result = 0;\\n\\\n      }\\n\\\n    }\\n\\\n    else {\\n\\\n      result = 0;\\n\\\n    }\\n\\\n  }\\n\\\n\\\n  return result;\\n\\\n}",
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_080038dc",
                "FUN_080091c6",
                "FUN_080038e4",
                "FUN_08003a1c",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003aa0",
                "FUN_0800376c",
                "FUN_08006c60",
                "FUN_08003bd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "check_data_validity_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "value",
                "param_2": "shift_amount",
                "param_3": "mask_1",
                "param_4": "mask_2",
                "iVar1": "found_value",
                "uVar2": "shifted_value"
            },
            "code": "unsigned int get_shifted_value_08006c60(unsigned int value, unsigned int shift_amount, unsigned int mask_1, unsigned int mask_2)\n{\n  int found_value = find_value(value, mask_1, shift_amount, mask_2, mask_2);\n  unsigned int shifted_value = (unsigned int)(found_value << 12) >> 27;\n  if (shifted_value > 0x10) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_08003306",
                "param_1": "object_address",
                "param_2": "value_type",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x58)": "*(uint32_t *)(object_address + 0x58)",
                "*(undefined4 *)(param_1 + 0x28)": "*(uint32_t *)(object_address + 0x28)",
                "*(undefined4 *)(param_1 + 0x5c)": "*(uint32_t *)(object_address + 0x5c)",
                "*(undefined4 *)(param_1 + 0x2c)": "*(uint32_t *)(object_address + 0x2c)",
                "*(undefined4 *)(param_1 + 0x60)": "*(uint32_t *)(object_address + 0x60)",
                "*(undefined4 *)(param_1 + 0x30)": "*(uint32_t *)(object_address + 0x30)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(uint32_t *)(object_address + 0x4c)",
                "*(undefined4 *)(param_1 + 0x1c)": "*(uint32_t *)(object_address + 0x1c)",
                "*(undefined4 *)(param_1 + 0x50)": "*(uint32_t *)(object_address + 0x50)",
                "*(undefined4 *)(param_1 + 0x20)": "*(uint32_t *)(object_address + 0x20)",
                "*(undefined4 *)(param_1 + 0x54)": "*(uint32_t *)(object_address + 0x54)",
                "*(undefined4 *)(param_1 + 0x24)": "*(uint32_t *)(object_address + 0x24)"
            },
            "code": "void set_values_08003306(int object_address, uint8_t value_type, uint32_t value1, uint32_t value2) {\n    if (value_type == 0xd0) {\n        *(uint32_t *)(object_address + 0x58) = value1;\n        *(uint32_t *)(object_address + 0x28) = value2;\n        return;\n    }\n    if (value_type > 0xd0) {\n        if (value_type == 0xf4) {\n            *(uint32_t *)(object_address + 0x5c) = value1;\n            *(uint32_t *)(object_address + 0x2c) = value2;\n            return;\n        }\n        if (value_type == 0xf5) {\n            *(uint32_t *)(object_address + 0x60) = value1;\n            *(uint32_t *)(object_address + 0x30) = value2;\n            return;\n        }\n        if (value_type == 0xe0) {\n            *(uint32_t *)(object_address + 0x4c) = value1;\n            *(uint32_t *)(object_address + 0x1c) = value2;\n            return;\n        }\n        return;\n    }\n    if (value_type == 0x90) {\n        *(uint32_t *)(object_address + 0x50) = value1;\n        *(uint32_t *)(object_address + 0x20) = value2;\n        return;\n    }\n    if (value_type == 0xc0) {\n        *(uint32_t *)(object_address + 0x54) = value1;\n        *(uint32_t *)(object_address + 0x24) = value2;\n        return;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "update_flags_and_reset_memory_08002578"
            },
            "code": "void update_flags_and_reset_memory_08002578() \\n\\\n{\\n\\\n  update_flags_and_reset_mem_080076e0();\\n\\\n  return;\\n\\\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "update_flags_and_reset_memory_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "create_object_and_set_flag_08006932",
                "param_1": "object_ptr",
                "*param_1": "*object_ptr",
                "uint": "uint32_t",
                "object_offset": "uint32_t *object_offset",
                "object_flag": "char *object_flag"
            },
            "code": "int create_object_and_set_flag_08006932(int *object_ptr){\n                        uint32_t *object_offset = (uint32_t *)(*object_ptr + 0xc);\n                        *object_offset &= 0xffffffbf;\n                        char *object_flag = (char *)((int)object_ptr + 0x39);\n                        *object_flag = 0x20;\n                        execute_object_creation();\n                        return 0;\n                    }",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "create_object_and_set_flag_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_values_080060c4",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "iVar3": "new_value3",
                "DAT_08006124": "special_address",
                "mask1": "0xffffffef",
                "mask2": "0xfffff3ff",
                "mask3": "0xffffffdf",
                "shift1": "4",
                "shift2": "2"
            },
            "code": "void update_values_080060c4(int address, int *values)\n{\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffffffdf;\n  uint shift1 = 4;\n  uint shift2 = 2;\n  uint new_value1 = (uint)(values[2] << shift1);\n  uint new_value2 = 0;\n  int new_value3 = values[0];\n\n  *(uint *)(address + 0x20) &= mask1;\n\n  if (address == DAT_08006124)\n  {\n    new_value1 |= (uint)(values[3] << shift1);\n    new_value1 &= 0xffffffbf;\n    new_value2 = (mask2 & *(uint *)(address + 4)) | (values[5] << shift2) | (values[6] << shift2);\n  }\n  else\n  {\n    new_value1 &= mask3;\n    new_value2 = *(uint *)(address + 4);\n  }\n\n  *(uint *)(address + 4) = new_value2;\n  *(uint *)(address + 0x18) = (*(uint *)(address + 0x18) & 0xffff8cff) | (new_value3 << 8);\n  *(int *)(address + 0x38) = values[1];\n  *(uint *)(address + 0x20) = new_value1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_values_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "allocate_and_initialize_memory_block_08009eac",
                "param_1": "memory_block_index",
                "param_2": "memory_block_info",
                "uVar1": "flag",
                "iVar2": "allocation_result",
                "local_18": "size",
                "local_14": "temp"
            },
            "code": "void allocate_and_initialize_memory_block_08009eac(int memory_block_index, int *memory_block_info) {\n  ushort flag;\n  int allocation_result;\n  int size;\n  int *temp;\n\n  if ((int)(*(ushort *)(memory_block_info + 3)) << 0x1e > -1) {\n    size = memory_block_index;\n    temp = memory_block_info;\n    flag = check_and_set_flag(size, temp, &size, &temp);\n    allocation_result = allocate_memory_block(size, temp);\n    if (allocation_result != 0) {\n      *(undefined **)(size + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *memory_block_info = allocation_result;\n      *(ushort *)(memory_block_info + 3) |= 0x80;\n      memory_block_info[4] = allocation_result;\n      memory_block_info[5] = size;\n      if (temp != (int *)0x0 && get_integer_value(size, *(short *)((int)memory_block_info + 0xe)) != 0) {\n        *(ushort *)(memory_block_info + 3) &= 0xfffc | 1;\n      }\n      *(ushort *)(memory_block_info + 3) |= flag;\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block_info + 3) &= 0xfffc | 2;\n  }\n  *memory_block_info = (int)memory_block_info + 0x47;\n  memory_block_info[4] = (int)memory_block_info + 0x47;\n  memory_block_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08009270",
                "FUN_0800a110",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_value_at_address_if_param_not_zero_080072d8",
                "param_1": "address",
                "param_2": "value",
                "param_3": "param",
                "param_4": "arg1",
                "<unnamed_variable>": "arg2"
            },
            "code": "void set_value_at_address_if_param_not_zero_080072d8(void* address, short* value, int param, void* arg1, void* arg2)\n{\n  if (param == 0) {\n    set_value_at_address_080042e2(address, value, 0, arg1, arg2);\n    return;\n  }\n  set_value_at_address_080042e2(address, value, 1, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "set_value_at_address_if_param_not_zero_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_result_080045c0",
                "param_1": "input",
                "bVar1": "is_valid",
                "uVar2": "value",
                "puVar3": "ptr",
                "uVar4": "temp"
            },
            "code": "uint32_t calculate_result_080045c0(uint32_t **input)\n{\n    bool is_valid = false;\n    uint32_t value = 0;\n    uint32_t *ptr = NULL;\n    uint32_t result = 0;\n    uint32_t temp = 0;\n\n    if (input == NULL) {\n        return 1;\n    }\n\n    if (*(char *)((int)input + 0x3d) == '\\0') {\n        *(uint8_t *)((int)input + 0xf) = 0;\n        do_nothing_080045bc();\n    }\n\n    *(uint8_t *)((int)input + 0x3d) = 0x24;\n    **input = **input & 0xfffffffe;\n    value = get_value_shifted_by_pointer_08005a28();\n\n    if (DAT_08004714 < input[1]) {\n        is_valid = value <= DAT_08004720;\n    }\n    else if (DAT_08004718 < value) {\n        is_valid = false;\n    }\n    else {\n        is_valid = true;\n    }\n\n    if (is_valid) {\n        return 1;\n    }\n\n    temp = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)value >> 0x32);\n    (*input)[1] = temp;\n\n    if (DAT_08004714 < input[1]) {\n        temp = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(temp * 300) >> 0x26);\n    }\n\n    (*input)[8] = temp + 1;\n    ptr = input[1];\n\n    if (DAT_08004714 < ptr) {\n        if (input[2] == NULL) {\n            temp = count_leading_zeroes((value - 1) / (uint32_t)((int)ptr * 3) + 1 & 0xfff);\n        }\n        else {\n            temp = count_leading_zeroes((value - 1) / (uint32_t)((int)ptr * 0x19) + 1 & 0xfff);\n        }\n\n        if (temp >> 5 == 0) {\n            if (input[2] == NULL) {\n                value = (value - 1) / (uint32_t)((int)ptr * 3) + 1 & 0xfff | 0x8000;\n            }\n            else {\n                value = (value - 1) / (uint32_t)((int)ptr * 0x19) + 1 & 0xfff | 0xc000;\n            }\n        }\n        else {\n            value = 1;\n        }\n    }\n    else {\n        value = (value - 1) / (uint32_t)((int)ptr << 1) + 1 & 0xfff;\n\n        if (value < 4) {\n            value = 4;\n        }\n    }\n\n    (*input)[7] = value;\n    **input = (uint32_t)input[7] | (uint32_t)input[8];\n    (*input)[2] = (uint32_t)input[4] | (uint32_t)input[3];\n    (*input)[3] = (uint32_t)input[5] | (uint32_t)input[6];\n    **input = **input | 1;\n    input[0x10] = NULL;\n    *(uint8_t *)((int)input + 0x3d) = 0x20;\n    input[0xc] = NULL;\n    *(uint8_t *)((int)input + 0x3e) = 0;\n    return 0;\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_result_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "process_input_and_get_result_08007e74",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "start_data",
                "iVar2": "process_input_result",
                "uVar3": "index",
                "iVar4": "result",
                "iVar5": "input_plus_4",
                "uVar6": "param_4",
                "get_data_from_ptr_dat_08003760": "get_data_from_ptr_dat_08003760",
                "process_input_08004728": "process_input_08004728",
                "get_byte_at_offset_0x3d_0800542a": "get_byte_at_offset_0x3d_0800542a",
                "get_value_at_offset_0x40_08005430": "get_value_at_offset_0x40_08005430"
            },
            "code": "int process_input_and_get_result_08007e74(int input, int param_2, int param_3, int param_4)\n{\n  int start_data = get_data_from_ptr_dat_08003760();\n  uint index = 0;\n  int result = 2;\n  do {\n    int input_plus_4 = input + 4;\n    int process_input_result = process_input_08004728(input_plus_4, param_2, param_3, param_4, param_4);\n    if (process_input_result == 0) {\n      result = 0;\n      int byte_at_offset = get_byte_at_offset_0x3d_0800542a(input_plus_4);\n      while ((byte_at_offset != 0x20 && (result == 0))) {\n        int data = get_data_from_ptr_dat_08003760();\n        index = data - start_data;\n        if (index < 0x65) {\n          int value_at_offset = get_value_at_offset_0x40_08005430(input_plus_4);\n          if (value_at_offset != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n        byte_at_offset = get_byte_at_offset_0x3d_0800542a(input_plus_4);\n      }\n    }\n    int value_at_offset = get_value_at_offset_0x40_08005430(input_plus_4);\n  } while ((value_at_offset == 4) && (index < 100));\n  return result;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "process_input_and_get_result_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "call_function_with_offset_08002efe",
                "param_1": "base_address",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void call_function_with_offset_08002efe(int base_address, undefined4 second_param, undefined2 third_param, undefined4 fourth_param) {\n    call_function_with_parameter_0800319e(base_address + 0x40, second_param, third_param, fourth_param, fourth_param);\n    return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "call_function_with_offset_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "store_value_if_max_08002f84",
                "param_1": "max_value",
                "param_2": "value_to_store",
                "param_3": "storage_location"
            },
            "code": "void store_value_if_max_08002f84(unsigned int max_value, unsigned int value_to_store, unsigned int* storage_location) {\n  if (max_value == 0xff) {\n    *storage_location = value_to_store;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_value_if_max_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "process_data_with_offset_08002ddc",
                "param_1": "data_offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "process_data_0800322c": "process_data"
            },
            "code": "void process_data_with_offset_08002ddc(int data_offset, int arg1, int arg2, undefined4 arg3) {\n  process_data(data_offset + 0x40, 2, 5, arg3, arg3);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "process_data_with_offset_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "checkAndExecuteIfSetBitCountNotZero_08009094",
                "iVar1": "bitCount",
                "count_bits_set_to_one_08008f3c": "countBitsSetToOne",
                "PTR_DAT_080090b0": "PTR_DAT",
                "execute_or_count_bits_08009084": "executeOrCountBits"
            },
            "code": "void checkAndExecuteIfSetBitCountNotZero_08009094(void)\n{\n  int bitCount = countBitsSetToOne();\n  if (*(int *)(PTR_DAT_080090b0_080090b0 + bitCount * 0x14 + 0xc) != 0) {\n    executeOrCountBits();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "checkAndExecuteIfSetBitCountNotZero_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char_pointer"
            },
            "code": "char* find_char_in_string_08009f2c(char* string, char character, int length) {\n  char* current_char = string;\n  while (*current_char != character) {\n    if (current_char == string + length) {\n      return (char*)0x0;\n    }\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "result"
            },
            "code": "int calculate_value_0800a154(int value1, int value2) {\n  int result = *(int *)(value2 - 4) - 4;\n  if (*(int *)(value2 - 4) < 0) {\n    result = result + *(int *)(value2 + result);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_byte_and_store_08002580",
                "*param_1": "*output_byte",
                "bVar1": "current_byte_value"
            },
            "code": "void increment_byte_and_store_08002580(byte *output_byte) {\n  byte current_byte_value = *PTR_DAT_080025a4;\n  if (current_byte_value > 11) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_byte_value + 1;\n  *output_byte = current_byte_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_byte_value * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_byte_and_store_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_08007f8e",
                "param_1": "param1",
                "param_2": "param2",
                "PTR_": "ptr",
                "set_flags_080049e0": "set_flags"
            },
            "code": "void set_param_08007f8e(int param1, int param2)\n{\n    if (param1 != 0)\n    {\n        if (param2 != 0)\n        {\n            int* PTR_ = (int*)(param1 + 100);\n            *PTR_ = param2;\n            set_flags(PTR_ + 1);\n        }\n    }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_in_array_08006b3e(uint bit_position, int* array) {\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* target = (uint*)(array + index * 4);\n    uint bit_mask = 1 << (bit_position & 0xf);\n    *target |= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_08006262",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_08006262(uint32_t *data, uint8_t bit_position, uint32_t bit_value){\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    uint32_t shifted_value = bit_value << (bit_position & 0xff);\n    *data = (*data & mask) | shifted_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_080063c0",
                "FUN_08006390"
            ],
            "imported": false,
            "current_name": "set_bit_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "update_memory_flags_08007110",
                "update_memory_flags_080074e0": "update_memory_flags_helper"
            },
            "code": "void update_memory_flags_08007110() {\n  update_memory_flags_08007110_helper();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "update_memory_flags_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "get_timer_instance_type_08007594",
                "param_1": "timer_instance",
                "DAT_080075d0": "TIMER_INSTANCE_1",
                "DAT_080075d4": "TIMER_INSTANCE_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance_data",
                "TIMER_INSTANCE_NOT_FOUND": "0xffffffff",
                "TIMER_INSTANCE_MIN": "0x40000000",
                "TIMER_INSTANCE_TYPE_NOT_FOUND": "0",
                "TIMER_INSTANCE_TYPE_1": "1",
                "TIMER_INSTANCE_TYPE_2": "2",
                "TIMER_INSTANCE_TYPE_3": "3"
            },
            "code": "int get_timer_instance_type_08007594(uint32_t timer_instance) {\n  if (timer_instance == TIMER_INSTANCE_NOT_FOUND) {\n    return TIMER_INSTANCE_TYPE_NOT_FOUND;\n  }\n  if (timer_instance == DAT_080075d0) {\n    return TIMER_INSTANCE_TYPE_1;\n  }\n  if (DAT_080075d0 < timer_instance) {\n    if (timer_instance == DAT_080075d4) {\n      return TIMER_INSTANCE_TYPE_2;\n    }\n    if (timer_instance == TIMER_INSTANCE_3) {\n      return TIMER_INSTANCE_TYPE_3;\n    }\n  }\n  else if (timer_instance == TIMER_INSTANCE_MIN) {\n    return TIMER_INSTANCE_TYPE_1;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_instance_080075d8);\n  return TIMER_INSTANCE_TYPE_NOT_FOUND;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_timer_instance_type_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_clear_mask_080073ec",
                "puVar1": "ptr",
                "DAT_0800742c": "data_ptr",
                "DAT_08007430": "mask",
                "undefined4": "uint"
            },
            "code": "void set_bit_and_clear_mask_080073ec(uint *DAT_0800742c) {\n  uint *ptr = DAT_0800742c;\n  *ptr |= 1;\n  ptr[1] &= DAT_08007430;\n  *ptr &= 0xfef6ffff;\n  *ptr &= 0xfffbffff;\n  ptr[1] &= 0xff80ffff;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_mask_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "start_range",
                "param_4": "end_range",
                "param_5": "input_value",
                "uint": "uint32_t"
            },
            "code": "uint32_t calculate_new_value_08008ef4(uint32_t start_value, uint32_t end_value, uint32_t start_range, uint32_t end_range, uint32_t input_value)\n{\n    uint32_t output_value = ((input_value - start_range) * (start_value - end_value)) / (end_range - start_range) + end_value;\n    return output_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "encode_and_call_08002df6",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "void encode_and_call_08002df6(int data)\n{\n    if (*(byte *)(data + 196) == 0) {\n        return;\n    }\n    undefined *data_ptr = *(undefined **)(data + 200);\n    int size = *(byte *)(data + 196) - 2;\n    encode_data_and_call_function_if_not_null_080031ce(data + 0x40, *data_ptr, data_ptr[1], size, data_ptr + 2);\n    return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "encode_and_call_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "update_data_08007118",
                "param_1": "instance_type",
                "param_2": "divisor",
                "param_3": "offset",
                "param_4": "value",
                "param_5": "flag",
                "local_74": "flag_value",
                "local_70": "",
                "local_6c": "",
                "local_68": "",
                "local_64": "",
                "local_60": "",
                "local_5c": "",
                "local_58": "instance_offset",
                "local_54": "timer_offset",
                "local_50": "",
                "local_4c": "data_offset",
                "local_48": "",
                "local_44": "",
                "local_1b": ""
            },
            "code": "void update_data_08007118(uint32_t instance_type, uint32_t divisor, int offset, uint32_t value, char flag)\n{\n    uint32_t timer_instance_type = extract_timer_instance_type();\n    int instance_offset = check_instance_offset(instance_type, PTR_DAT_080071dc);\n    if (instance_offset == 0) {\n        return;\n    }\n    int value_offset = find_value_and_return_offset(instance_type);\n    if (value_offset == 0 || value_offset == 4 || value_offset == 8 || value_offset == 0xc || value_offset == 0x18) {\n        uint32_t flag_value = 0;\n        uint32_t flags = 0;\n        uint32_t timer_offset = timer_instance_type / divisor - 1;\n        int data_offset = offset + -1;\n        if (flag == '\\x01') {\n            *PTR_DAT_080071e0 = (char)instance_type;\n            int result = validate_params(&instance_offset);\n            if (result != 0) {\n                return;\n            }\n        }\n        uint32_t update_result = update_data_08007118_08006186(&instance_offset, &flag_value, value_offset);\n        if (update_result == 0) {\n            uint32_t value = find_value_08007376(instance_type, PTR_DAT_080071dc);\n            if ((value & 0x100000) == 0) {\n                set_and_update_flag(&instance_offset, value_offset);\n            }\n            else {\n                set_flags_and_values(&instance_offset, value_offset);\n            }\n        }\n    }\n}\n",
            "called": [
                "FUN_08007376",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007320",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "update_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "validate_input_08009fe8",
                "param_1": "input",
                "puVar1": "ptr_puVar1",
                "uVar2": "var_uVar2",
                "piVar3": "ptr_piVar3",
                "iVar4": "ptr_iVar4",
                "pcVar5": "ptr_pcVar5",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "ptr_puVar6"
            },
            "code": "int validate_input_08009fe8(uint input) {\n    int *ptr_piVar3 = *(int **)PTR_PTR_DAT_08009ff4;\n    if (input > 31) {\n        *ptr_piVar3 = 22;\n        return -1;\n    }\n    int ptr_iVar4 = ptr_piVar3[0x11];\n    if ((ptr_iVar4 != 0) && (*(code **)(ptr_iVar4 + input * 4) != (code *)0x0)) {\n        code *ptr_pcVar5 = *(code **)(ptr_iVar4 + input * 4);\n        if (ptr_pcVar5 != (code *)0x1) {\n            if (ptr_pcVar5 == (code *)0xffffffff) {\n                *ptr_piVar3 = 22;\n                return 1;\n            }\n            *(undefined4 *)(ptr_iVar4 + input * 4) = 0;\n            (*ptr_pcVar5)(input);\n        }\n        return 0;\n    }\n    undefined *ptr_puVar6 = PTR_PTR_DAT_08009ff4;\n    undefined4 var_uVar2 = thunk_return_one_0800887c(ptr_piVar3);\n    undefined *ptr_puVar1 = PTR_DAT_0800a018;\n    *(undefined4 *)PTR_DAT_0800a018 = 0;\n    int ptr_iVar4 = set_pointer_to_22_0800886c(var_uVar2, input, input, 0, ptr_puVar6, unaff_r4, unaff_r5, in_lr);\n    if ((ptr_iVar4 == -1) && (*(int *)ptr_puVar1 != 0)) {\n        *ptr_piVar3 = *(int *)ptr_puVar1;\n    }\n    return ptr_iVar4;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "validate_input_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_if_param_is_one_and_param2_is_max_08002c1e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void initialize_if_param_is_one_and_param2_is_max_08002c1e(int param1, int param2, int param3, int param4){\n    initialize_if_param_is_one_and_param2_is_max_08002c1e_08002948(1, 0xffff, param3, param4, param4);\n    return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_is_one_and_param2_is_max_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_data_08005a68",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "DAT_08005a9c": "data"
            },
            "code": "void extract_data_08005a68(uint8_t *output_buffer, uint32_t *input_buffer) {\n  output_buffer[0] = 0xf;\n  uint32_t DAT_08005a9c = DAT_08005a9c;\n  output_buffer[1] = *(uint32_t *)(DAT_08005a9c + 4) & 3;\n  output_buffer[2] = *(uint32_t *)(DAT_08005a9c + 4) & 0xf0;\n  output_buffer[3] = *(uint32_t *)(DAT_08005a9c + 4) & 0x700;\n  output_buffer[4] = *(uint32_t *)(DAT_08005a9c + 4) >> 3 & 0x700;\n  *input_buffer = *DAT_08005aa0 & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_params_if_required_08008f78",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "param_pointer"
            },
            "code": "void initialize_params_if_required_08008f78(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    undefined *param_pointer = PTR_DAT_08009018;\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        *param_pointer = 6;\n        *(undefined4 *)(param_pointer + 0xc) = 0;\n        param_pointer[0x14] = 7;\n        *(undefined4 *)(param_pointer + 0x20) = 0;\n        param_pointer[0x28] = 8;\n        *(undefined4 *)(param_pointer + 0x34) = 0;\n        param_pointer[0x3c] = 9;\n        *(undefined4 *)(param_pointer + 0x48) = 0;\n        param_pointer[0x50] = 10;\n        *(undefined4 *)(param_pointer + 0x5c) = 0;\n        param_pointer[100] = 0x17;\n        *(undefined4 *)(param_pointer + 0x70) = 0;\n        param_pointer[0x78] = 0x17;\n        *(undefined4 *)(param_pointer + 0x84) = 0;\n        param_pointer[0x8c] = 0x17;\n        *(undefined4 *)(param_pointer + 0x98) = 0;\n        param_pointer[0xa0] = 0x17;\n        *(undefined4 *)(param_pointer + 0xac) = 0;\n        param_pointer[0xb4] = 0x17;\n        *(undefined4 *)(param_pointer + 0xc0) = 0;\n        param_pointer[200] = 0x28;\n        *(undefined4 *)(param_pointer + 0xd4) = 0;\n        param_pointer[0xdc] = 0x28;\n        *(undefined4 *)(param_pointer + 0xe8) = 0;\n        param_pointer[0xf0] = 0x28;\n        *(undefined4 *)(param_pointer + 0xfc) = 0;\n        param_pointer[0x104] = 0x28;\n        *(undefined4 *)(param_pointer + 0x110) = 0;\n        param_pointer[0x118] = 0x28;\n        *(undefined4 *)(param_pointer + 0x124) = 0;\n        param_pointer[300] = 0x28;\n        *(undefined4 *)(param_pointer + 0x138) = 0;\n        calculate_value_and_update_param_080090c2(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, param_pointer, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_params_if_required_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_struct_08008d30",
                "param_1": "struct_ptr",
                "param_2": "key",
                "param_3": "value1",
                "param_4": "value2",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "PTR_PTR_LAB",
                "PTR_DAT_08008d80": "PTR_DAT_1",
                "getValueByKey_0800734a": "getValueByKey",
                "PTR_DAT_08008d84": "PTR_DAT_2",
                "PTR_DAT_08008d88": "PTR_DAT_3",
                "update_value_at_address_08008d00": "update_value_at_address",
                "set_value_at_offset_08008d18": "set_value_at_offset",
                "initialize_struct_08008c20": "initialize_struct_helper"
            },
            "code": "undefined4* initialize_struct_08008d30(undefined4 *struct_ptr, undefined4 key, undefined4 value1, undefined4 value2) {\n    struct_ptr->field1 = 0;\n    struct_ptr->field2 = 1000;\n    struct_ptr->field3 = PTR_PTR_LAB_08008ba4_1_08008d7c_08008ba4_1_08008d7c;\n    if (struct_ptr == (undefined4 *)PTR_DAT_08008d80) {\n        update_value_at_address(struct_ptr, 0, value1, PTR_DAT_08008d80, value2);\n        set_value_at_offset(struct_ptr, 1);\n    }\n    else {\n        undefined value3 = getValueByKey(key, PTR_DAT_08008d84);\n        struct_ptr->field4 = value3;\n        undefined value4 = getValueByKey(key, PTR_DAT_08008d88);\n        struct_ptr->field5 = value4;\n    }\n    initialize_struct_08008d30_08008c20(struct_ptr);\n    return struct_ptr;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "set_param_value_to_global_variable_08002f94",
                "param_1": "param_value",
                "param_2": "global_variable_ptr",
                "param_3": "N/A",
                "PTR_DAT_08002f9c": "global_variable_ptr"
            },
            "code": "void set_param_value_to_global_variable_08002f94(unsigned int param_value, unsigned int* PTR_DAT_08002f9c) {\n  *PTR_DAT_08002f9c = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_param_value_to_global_variable_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "getValueByKey_0800734a",
                "param_1": "key",
                "uVar1": "value",
                "find_value_by_key_08007332": "findValueByKey"
            },
            "code": "int getValueByKey_0800734a(int key){\n  int value;\n  if (key != 0){\n    value = findValueByKey();\n    return value;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "getValueByKey_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "analyze_data_08000aec",
                "bVar1": "is_valid_character",
                "iVar2": "character_index",
                "uVar3": "i",
                "PTR_DAT_08000bc0": "ptr_data_1",
                "PTR_DAT_08000bc4": "ptr_data_2",
                "clear_memory_080005e0": "clear_memory",
                "PTR_DAT_08000bc8": "ptr_data_3",
                "PTR_DAT_08000bcc": "ptr_data_4",
                "PTR_DAT_08000bd0": "ptr_data_5",
                "PTR_DAT_08000bd4": "ptr_data_6",
                "find_character_index_080036ac": "find_character_index",
                "FUNC_080005f8": "update_data",
                "PTR_DAT_08000bd8": "ptr_data_7",
                "PTR_DAT_08000bdc": "ptr_data_8",
                "PTR_DAT_08000be0": "ptr_data_9",
                "PTR_DAT_08000be4": "ptr_data_10"
            },
            "code": "void analyze_data_08000aec(void)\n{\n    bool is_valid_character;\n    int character_index;\n    uint i;\n\n    *PTR_DAT_08000bc0 = 1;\n    if (*PTR_DAT_08000bc4 != '\\0') {\n        clear_memory_080005e0();\n    }\n    for (i = 0; i < 5; i++) {\n        PTR_DAT_08000bc8[i] = 0;\n        PTR_DAT_08000bcc[i] = 0;\n        PTR_DAT_08000bd0[i] = 0;\n    }\n    for (i = 0; i < 0x3c; i++) {\n        if ((i - 0x2e & 0xff) < 0xe) {\n            if (i < 0x3c) {\n                int character = (int)(char)PTR_DAT_08000bd4[i];\n            }\n            else {\n                character = -1;\n            }\n            character_index = find_character_index(character);\n            if (character_index == 0) {\n                is_valid_character = false;\n            }\n            else {\n                if (i < 0x3c) {\n                    character_index = find_character_index((int)(char)PTR_DAT_08000bd4[i]);\n                }\n                else {\n                    character_index = -1;\n                }\n                if (character_index == 1) {\n                    is_valid_character = false;\n                }\n                else {\n                    is_valid_character = true;\n                }\n            }\n        }\n        else {\n            is_valid_character = false;\n        }\n        if (is_valid_character) {\n            update_data(i, 2);\n        }\n        else {\n            if (i < 0x3c) {\n                if (((PTR_DAT_08000bd4[i] != -1) && (character_index = find_character_index(), character_index != 0)) &&\n                   (character_index = find_character_index((int)(char)PTR_DAT_08000bd4[i]), character_index != 1)) {\n                    is_valid_character = true;\n                }\n            }\n            if (is_valid_character) {\n                update_data(i, 1);\n            }\n        }\n        PTR_DAT_08000bd8[i] = 0xff;\n    }\n    *(undefined4 *)PTR_DAT_08000bdc = 0;\n    *PTR_DAT_08000be0 = 0;\n    *PTR_DAT_08000be4 = 0;\n    *PTR_DAT_08000bc0 = 0;\n    return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "analyze_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "convert_base_if_not_zero_08008ed6_and_return_08008eec"
            },
            "code": "void convert_base_if_not_zero_08008ed6_and_return_08008eec(void)\n{\n  convert_base_if_not_zero_08008ed6();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "convert_base_if_not_zero_08008ed6_and_return_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "input_flag",
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[14]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 20)"
            },
            "code": "int validate_input_080068d6(int *input_array, int array_length, int input_flag)\n{\n    if (input_array[10] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (input_flag == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[10] = array_length;\n        input_array[11] = (short)input_flag;\n        input_array[14] = (short)input_flag;\n        input_array[15] = 0;\n        input_array[58] = 34;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 12) |= 256;\n        *(uint *)(*input_array + 20) |= 1;\n        *(uint *)(*input_array + 12) |= 32;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "encode_and_send_data_to_device_080032a2",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "device",
                "param_4": "device_len",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string",
                "encode_data_and_send_to_device_0800325a": "encode_data_and_send_to_device"
            },
            "code": "void encode_and_send_data_to_device_080032a2(void* data, size_t data_len, void* device, size_t device_len) {\n  void* end_of_string = find_end_of_string(data);\n  encode_data_and_send_to_device(data, 0x71, end_of_string, device, device_len);\n  return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_to_device_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "process_and_encode_data_08001b48",
                "puVar1": "list_entry",
                "PTR_DAT_08001bc0": "linked_list_head",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "firmware_name",
                "PTR_FUN_08000214_1_08001bc8": "function_ptr_1",
                "PTR_LAB_080002ec_1_08001bcc": "label_ptr_1",
                "DAT_08001bd0": "global_data_1",
                "PTR_LAB_08000c18_1_08001bd4": "label_ptr_2",
                "DAT_08001bd8": "global_data_2",
                "PTR_LAB_080001a8_1_08001bdc": "label_ptr_3",
                "PTR_FUNC_08001cd0_1_08001be0": "function_ptr_2",
                "DAT_08001be4": "global_data_3"
            },
            "code": "void process_and_encode_data_08001b48(void)\n{\n  undefined *list_entry = PTR_DAT_08001bc0;\n  create_linked_list_entry(list_entry, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  update_data(list_entry, 0xe0, PTR_process_data_08000214_1_08001bc8);\n  update_data(list_entry, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  update_data(list_entry, 0xc0, DAT_08001bd0);\n  update_data(list_entry, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  update_data(list_entry, 0xf4, DAT_08001bd8);\n  update_data(list_entry, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  set_param_value_to_global_variable(list_entry, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  store_value_if_max(list_entry, 0xff, DAT_08001be4);\n  process_data_and_encode(list_entry, 0xe100);\n  analyze_data();\n  execute_system_interrupt(0);\n  return;\n}",
            "called": [
                "FUN_08000aec",
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002f84",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08002e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_and_encode_data_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_and_update_flag_08006390",
                "param_1": "bit_array_ptr",
                "param_2": "bit_index",
                "puVar1": "bit_array"
            },
            "code": "int set_and_update_flag_08006390(uint **bit_array_ptr, uint bit_index)\\n\\\n    {\\n\\\n        uint *bit_array = *bit_array_ptr;\\n\\\n        set_bit_08006262(bit_array, bit_index, 1);\\n\\\n        if (bit_array == DAT_080063bc)\\n\\\n        {\\n\\\n            bit_array[0x11] |= 0x8000;\\n\\\n        }\\n\\\n        *bit_array |= 1;\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_and_update_flag_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "execute_object_creation_08008730",
                "uVar1": "integer_index",
                "iVar2": "object_creation_function",
                "iVar3": "object_index"
            },
            "code": "void execute_object_creation_08008730() {\n  uint integer_index = find_integer_index();\n  int object_index = *(int *)(PTR_DAT_08008770 + integer_index * 4);\n  if ((integer_index < 5) && (object_creation_function = (**(code **)(PTR_DAT_08008774 + integer_index * 4))(object_index), object_creation_function != -1)) {\n    create_new_object(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(object_index + 0x44) * 4), *(int *)(object_index + 100) + (uint)*(ushort *)(object_index + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "execute_object_creation_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_memory_flags_and_reset_08005df4",
                "param_1": "memory_block",
                "puVar1": "memory",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)memory_block + 0x3d)",
                "puVar1[8]": "memory[8]",
                "*puVar1": "*memory"
            },
            "code": "void update_memory_flags_and_reset_08005df4(uint **memory_block){\n    uint *memory = *memory_block;\n    *(undefined *)((int)memory_block + 0x3d) = 2;\n    if ((memory[8] & 0x1111) == 0 && (memory[8] & 0x444) == 0) {\n        *memory &= 0xfffffffe;\n    }\n    update_memory_flags_and_return_08007710(memory_block);\n    *(undefined *)((int)memory_block + 0x3d) = 0;\n    *(undefined *)(memory_block + 0xf) = 0;\n}\n",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_memory_flags_and_reset_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointer_array",
                "iVar2": "function_pointer_array_length",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *function_pointer_array = PTR_DAT_08009180;\n  int function_pointer_array_length = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_pointer_array_length >> 2; i++) {\n    (**(code **)(function_pointer_array + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_pointer_array = PTR_DAT_08009188;\n  function_pointer_array_length = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < function_pointer_array_length >> 2; i++) {\n    (**(code **)(function_pointer_array + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_data_from_ptr_dat_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = get_data_from_ptr_dat_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_data_from_ptr_dat_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = get_data_from_ptr_dat_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      count_down_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_data_from_ptr_dat_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = get_data_from_ptr_dat_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = get_data_from_ptr_dat_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = get_data_from_ptr_dat_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_data_from_ptr_dat_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_data_from_ptr_dat_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = get_data_from_ptr_dat_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_data_from_ptr_dat_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "decode_message_080064cc",
                "param_1": "message_ptr",
                "sVar1": "message_count",
                "pbVar2": "payload_byte_ptr",
                "message_type": "message_type",
                "message_length": "message_length",
                "payload_ptr": "payload_ptr"
            },
            "code": "int decode_message_080064cc(int *message_ptr) {\n  char message_type = *(char *)(message_ptr + 0x39);\n  if (message_type != '!') {\n    return 2;\n  }\n  int message_length = message_ptr[2];\n  int *payload_ptr = (int *)(*message_ptr + 4);\n  if (message_length == 0x1000) {\n    *payload_ptr = *(unsigned short *)message_ptr[8] & 0x1ff;\n    if (message_ptr[4] == 0) {\n      message_ptr[8] = message_ptr[8] + 2;\n    }\n    else {\n      message_ptr[8] = message_ptr[8] + 1;\n    }\n  }\n  else {\n    unsigned char *payload_byte_ptr = (unsigned char *)message_ptr[8];\n    message_ptr[8] = (int)(payload_byte_ptr + 1);\n    *payload_ptr = (unsigned int)*payload_byte_ptr;\n  }\n  short message_count = *(short *)(message_ptr + 0x26) + -1;\n  *(short *)(message_ptr + 0x26) = message_count;\n  if (message_count == 0) {\n    *message_ptr[3] = *message_ptr[3] & 0xffffff7f;\n    *message_ptr[3] = *message_ptr[3] | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "decode_message_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "set_flag_08004d6c",
                "param_1": "param_array",
                "puVar1": "flag_ptr",
                "DAT_080049c4": "current_char",
                "DAT_080049c6": "length",
                "DAT_080049c8": "offset",
                "DAT_080049cc": "next_char"
            },
            "code": "uint set_flag_08004d6c(uint **param_array) {\n  uint *flag_ptr;\n  char DAT_080049c4 = *(char *)((int)param_array + 0x3d);\n  if (DAT_080049c4 == '\"') {\n    ushort DAT_080049c6 = *(ushort *)((int)param_array + 0x2a);\n    if (DAT_080049c6 < 4) {\n      ushort DAT_080049c8 = DAT_080049c6 - 2;\n      if (DAT_080049c8 < 2) {\n        if (param_array[0xb] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array = (**param_array & 0xfffffbff) | 0x800;\n        }\n        (*param_array)[1] &= 0xfffffbff;\n      }\n      else {\n        if (param_array[0xb] == (uint *)0x2) {\n          **param_array = **param_array | 0x400;\n        }\n        else {\n          **param_array &= 0xfffffbff;\n        }\n        (*param_array)[1] &= 0xfffff8ff;\n        flag_ptr = param_array[9];\n        param_array[9] = (uint *)((int)flag_ptr + 1);\n        *(char *)flag_ptr = (char)(*param_array)[4];\n        DAT_080049c6 -= 1;\n        *(undefined *)((int)param_array + 0x3d) = 0x20;\n        param_array[0xc] = (uint *)0x0;\n        char DAT_080049cc = *(char *)((int)param_array + 0x3e);\n        if (DAT_080049cc == '@') {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(undefined *)((int)param_array + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      flag_ptr = param_array[9];\n      param_array[9] = (uint *)((int)flag_ptr + 1);\n      *(char *)flag_ptr = (char)(*param_array)[4];\n      DAT_080049c6 -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flag_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "validate_input_08004ac2",
                "param_1": "input_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "input_value",
                "uVar2": "input_flag"
            },
            "code": "int validate_input_08004ac2(int *input_array, int param_2, int param_3, int param_4) {\n  int input_flag = *(int *)(*input_array + 0x18);\n  int input_value;\n  if ((input_flag & 0x80) == 0) {\n    input_value = *(int *)(input_array + 3);\n  }\n  else {\n    input_value = *(int *)(input_array + 6);\n  }\n  validate_input_08004ac2_08007fa0(input_array, (input_flag & 4) == 0, input_value, input_flag, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "validate_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "get_one_08008850"
            },
            "code": "int get_one_08008850() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "get_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "set_flag_and_bits_08006ca8",
                "param_1": "flag_ptr",
                "param_2": "flag",
                "local_18": "bit_mask",
                "local_14": "first_nibble",
                "local_10": "shift_amount",
                "iVar2": "DAT_08006d20",
                "uVar3": "new_flag",
                "uVar4": "flag_mask",
                "uVar5": "flag_value",
                "PTR_DAT_08006d1c": "ptr",
                "set_flag_08006bb8": "shift_and_mask_flag",
                "DAT_08006d14": "flag_mask",
                "DAT_08006d18": "flag",
                "set_bits_080040e8": "set_flag_bit"
            },
            "code": "void set_flag_and_bits_08006ca8(uint *DAT_08006d18_PTR_DAT_08006d1c, uint8_t DAT_08006d18, uint param, uint DAT_08006d14)\n{\n  uint DAT_08006d18_value = *DAT_08006d18_PTR_DAT_08006d1c;\n  uint new_DAT_08006d18_value;\n  uint bit_mask;\n  if (DAT_08006d18_value == DAT_08006d14) {\n    bit_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n    *(uint *)(DAT_08006d20 + 0x18) = bit_mask;\n    new_DAT_08006d18_value = *(uint *)(DAT_08006d20 + 0x18) & 0x200;\n  }\n  else {\n    if (DAT_08006d18_value == DAT_08006d18) {\n      bit_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n      *(uint *)(DAT_08006d20 + 0x18) = bit_mask;\n      new_DAT_08006d18_value = *(uint *)(DAT_08006d20 + 0x18) & 0x400;\n    }\n  }\n  uint8_t* PTR_DAT_08006d1c = PTR_DAT_08006d1c;\n  uint8_t first_byte = *PTR_DAT_08006d1c;\n  uint8_t first_nibble = first_byte & 0xf;\n  uint8_t shift_amount = (8 - first_nibble) * 4;\n  uint32_t shifted_DAT_08006d18 = (uint32_t)DAT_08006d18 << shift_amount;\n  uint32_t param_mask = 0xffff << first_nibble;\n  uint32_t masked_param = param & param_mask;\n  uint32_t new_DAT_08006d18 = shifted_DAT_08006d18 | masked_param;\n  uint32_t DAT_08006d18_bit = 1 << first_nibble;\n  uint32_t* DAT_08006d18_PTR_DAT_08006d1c_32 = (uint32_t*)DAT_08006d18_PTR_DAT_08006d1c;\n  *DAT_08006d18_PTR_DAT_08006d1c_32 |= new_DAT_08006d18 & DAT_08006d18_bit;\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "set_flag_and_bits_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_offset_08002fc2",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "* (undefined4 *)": "int*",
                "*(undefined4 *)(param_1 + (param_2 + 0x42) * 4)": "*address_to_set",
                "undefined4": "int",
                "return;": "return;"
            },
            "code": "void set_value_at_offset_08002fc2(int base_address, int offset, int value)\n{\n    int* address_to_set = (int*)(base_address + (offset + 0x42) * sizeof(int));\n    *address_to_set = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_resultant_value_08008afa",
                "param_1": "input_value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "ushort calculate_resultant_value_08008afa(int input_value)\n{\n    ushort offset1 = *(ushort *)(input_value + 0x134);\n    ushort offset2 = *(ushort *)(input_value + 0x136);\n    ushort result = (offset1 + 0x40) - offset2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_resultant_value_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "process_data_and_encode_08003048",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flags",
                "param_4": "function_ptr",
                "puVar1": "data_ptr"
            },
            "code": "void process_data_and_encode_08003048(void* data, int data_size, int flags, void* function_ptr) {\\n\\\n    \\tvoid* data_ptr = PTR_DAT_08003068;\\n\\\n    \\tset_flags_and_call_function_08008c44(data_ptr, data_size, flags, function_ptr, function_ptr);\\n\\\n    \\tcheck_and_process_data_08003002(data);\\n\\\n    \\tcopy_and_encode_data_08002e26(data, data_ptr);\\n\\\n    \\treturn;\\n\\\n    }",
            "called": [
                "FUN_08003002",
                "FUN_08008c44",
                "FUN_08002e26"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_and_encode_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_memory_blocks_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = check_memory_block_consistency_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = processData_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_char_in_string_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_char_in_string_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_char_in_string_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "index",
                "param_2": "value",
                "param_3": "offset1",
                "param_4": "offset2",
                "PTR_DAT_080002d8": "PTR_DATA_1",
                "PTR_DAT_080002dc": "PTR_DATA_2",
                "PTR_DAT_080002e8": "PTR_DATA_3",
                "PTR_DAT_080002e4": "PTR_DATA_4",
                "PTR_DAT_080002e0": "PTR_DATA_5"
            },
            "code": "void process_data_08000214(uint8_t index, uint32_t value, uint32_t offset1, uint32_t offset2)\n{\n    if (index > 59) {\n        return;\n    }\n    uint32_t result = get_value_at_offset(PTR_DAT_080002d8, index, offset1, offset2, offset2);\n    if (result == 3) {\n        uint8_t character = PTR_DAT_080002dc[index];\n        if (index < 60) {\n            if (character == -1) {\n                return;\n            }\n            uint8_t character_index = find_character_index(character);\n            if (character_index == 0) {\n                return;\n            }\n            else if (character_index == 1) {\n                return;\n            }\n            else {\n                uint8_t index2 = find_index(character, PTR_DAT_080002e8);\n                if (index2 != 0) {\n                    process_data_08000214(index, value);\n                }\n            }\n        }\n    }\n    else if (result == 4) {\n        if (index < 60) {\n            uint8_t character = PTR_DAT_080002dc[index];\n            if (character != -1) {\n                uint8_t character_index = find_character_index(character);\n                if (character_index != 0 && character_index != 1) {\n                    calculate_and_update_value(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3, value);\n                }\n            }\n        }\n    }\n}\n",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_update_bits_08003724",
                "DAT_08003744": "data_pointer",
                "update_bits_of_uint_08003f0c": "update_bits_of_uint",
                "validate_and_initialize_output_buffer_080036d8": "validate_and_initialize_output_buffer",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "int set_flag_and_update_bits_08003724(void)\n{\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  update_bits_of_uint(3);\n  validate_and_initialize_output_buffer(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_bits_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_at_offset_080038dc",
                "param_1": "base_address",
                "*param_1": "base_address",
                "*(undefined4 *)(*param_1 + 0x4c)": "*address_to_value",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_080038dc(int *base_address)\n{\n    int offset = 0x4c;\n    int *address_to_value = base_address + offset;\n    return *address_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "process_data_and_update_080025ac",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "condition1",
                "param_4": "condition2",
                "uVar1": "mask",
                "uVar2": "index",
                "uVar3": "value",
                "iVar4": "offset1",
                "PTR_DAT_08002628": "ptr_data_1",
                "DAT_0800262c": "data_1",
                "PTR_DAT_08002630": "ptr_data_2"
            },
            "code": "byte process_data_and_update_080025ac(byte *data, uint data_length, int condition1, int condition2) {\n  uint index;\n  uint mask;\n  uint value;\n  int offset1;\n  int offset2;\n  \n  if (*data < 0xc) {\n    process_data(data_length, 1, condition1, *data, condition2);\n    index = (uint)*data;\n    mask = (byte)PTR_DAT_08002628[index * 8] & 0xffffffc0 | data_length & 0x3f;\n    PTR_DAT_08002628[index * 8] = (char)mask;\n    offset1 = -condition1 + 0x220;\n    if (offset1 < 0) {\n      offset1 = -condition1 + 0x223;\n    }\n    data[1] = (byte)((uint)(offset1 << 0x16) >> 0x18);\n    offset2 = -condition2 + 0x960;\n    if (offset2 < 0) {\n      offset2 = -condition2 + 0x963;\n    }\n    data[2] = (byte)((uint)(offset2 << 0x16) >> 0x18);\n    value = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n    offset1 = check_condition(value, mask, index, (int)((ulonglong)DAT_0800262c * (ulonglong)*data));\n    if (offset1 == 0) {\n      PTR_DAT_08002630[0x44] = (char)value;\n      initialize_timer_with_default_values_0800242c();\n    }\n    PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "process_data_and_update_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "process_and_update_data_08002634",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "N/A",
                "param_4": "data4",
                "process_data_and_update_080025ac": "process_data_and_update"
            },
            "code": "void process_and_update_data_08002634(uint32_t data1, uint32_t data2)\n{\n    process_data_and_update(data1, data2, 0x220, 0x960, data4);\n    return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "process_and_update_data_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "encode_and_send_08002f0a",
                "param_1": "data",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void encode_and_send_08002f0a(int data)\n{\n    int encoded_data = data + 0x40;\n    encode_data_and_send_to_device_0800325a(encoded_data);\n    return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "encode_and_send_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_var1",
                "abStack_20": "array_stack",
                "uStack_1c": "uStack1",
                "uStack_18": "uStack2",
                "uStack_14": "uStack3"
            },
            "code": "uint calculate_value_08005bb8(int input)\n{\n  uint result;\n  undefined2 local_var1;\n  byte array_stack[4];\n  undefined4 uStack_1c;\n  undefined4 uStack_18;\n  undefined4 uStack_14;\n  uStack_14 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  uStack_18 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  uStack_1c = *(undefined4 *)PTR_DAT_08005ca0;\n  local_var1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = get_shifted_value_from_pointer_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_var1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * array_stack[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "param_1": "timer_config",
                "param_2": "timer_value",
                "param_3": "user_input",
                "param_4": "flag",
                "cVar1": "status",
                "uVar2": "timer_instance_type",
                "iVar3": "validation_result",
                "puVar4": "user_input_ptr",
                "local_34": "local_0x34",
                "local_30": "local_0x30",
                "local_2c": "local_0x2c",
                "local_28": "local_0x28",
                "local_24": "local_0x24",
                "local_20": "local_0x20",
                "local_1c": "local_0x1c"
            },
            "code": "void initialize_timer_08007648(uint32_t *timer_config, uint32_t timer_value, uint32_t user_input, uint32_t flag) {\n  uint32_t timer_instance_type;\n  uint32_t *user_input_ptr;\n  uint32_t local_0x34 = 0;\n  uint32_t local_0x30 = 0;\n  uint32_t local_0x2c = 0;\n  uint32_t local_0x28 = 0;\n  uint32_t local_0x24 = 0;\n  uint32_t local_0x20 = 0;\n  uint32_t local_0x1c = 0;\n  *timer_config = 0x40000000;\n  timer_config[1] = 0x40000000;\n  timer_config[4] = timer_value;\n  timer_instance_type = extract_timer_instance_type();\n  timer_config[2] = (uint32_t)(((uint64_t)DAT_080076dc * (uint64_t)timer_instance_type) >> 0x32) - 1;\n  timer_config[5] = 0;\n  timer_config[3] = 0;\n  timer_config[6] = 0;\n  timer_config[0x13] = flag;\n  local_0x34 = 0;\n  local_0x2c = 0;\n  local_0x24 = 0;\n  local_0x28 = 0;\n  local_0x20 = 0;\n  local_0x1c = 0;\n  local_0x30 = user_input;\n  uint8_t status = get_status(*timer_config);\n  set_bits_at_position(status, 0xe, 0);\n  status = get_status(*timer_config);\n  set_bit_in_array(status);\n  user_input_ptr = timer_config + 1;\n  int validation_result = validate_user_input(user_input_ptr);\n  if ((validation_result == 0) && (validation_result = update_data_if_flag_not_set(user_input_ptr, &local_0x34, 0), validation_result == 0)) {\n    set_flags_and_bits(user_input_ptr, 0);\n  }\n}\n",
            "called": [
                "FUN_08006128",
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_timer_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "returnZero_08008858"
            },
            "code": "int returnZero_08008858() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "returnZero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "set_bit_and_update_080063c0",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "array_ptr",
                "DAT_0800641c": "PTR_0800641c",
                "flag_ptr": "flag_ptr"
            },
            "code": "uint32_t set_bit_and_update_080063c0(uint32_t **bit_array, uint32_t bit_position)\\n\\\n{\\n\\\n    uint32_t *array_ptr = *bit_array;\\n\\\n    set_bit(array_ptr, bit_position, 0);\\n\\\n    if (((array_ptr == DAT_0800641c) && ((array_ptr[8] & 0x1111) == 0)) && ((array_ptr[8] & 0x444) == 0)) {\\n\\\n        array_ptr[0x11] &= 0xffff7fff;\\n\\\n    }\\n\\\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\\n\\\n        *array_ptr &= 0xfffffffe;\\n\\\n    }\\n\\\n    uint8_t *flag_ptr = (uint8_t*)bit_array + 0x3d;\\n\\\n    *flag_ptr = 1;\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "closing_parenthesis",
                "pbVar2": "byte_data"
            },
            "code": "int process_data_08004a24(int *data)\n{\n    char closing_parenthesis;\n    byte *byte_data;\n    \n    closing_parenthesis = *(char *)((int)data + 0x3d);\n    if (*(short *)((int)data + 0x2a) != 0)\n    {\n        byte_data = (byte *)data[9];\n        data[9] = (int)(byte_data + 1);\n        *(uint *)(*data + 0x10) = (uint)*byte_data;\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        if ((*(short *)((int)data + 0x2a) == 0) && (closing_parenthesis == ')'))\n        {\n            *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n            data[0xc] = 0x21;\n            *(undefined *)((int)data + 0x3d) = 0x28;\n            do_nothing_08004a22();\n        }\n        return 0;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "code": "int get_value_at_offset_08002fba(int* base_address, int offset)\n{\n  return *(int *)(base_address + (offset + 0x42) * sizeof(int));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "process_data_and_call_function_080090cc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar1": "var1",
                "puVar2": "func_name",
                "uVar3": "result",
                "uVar4": "var4"
            },
            "code": "void process_data_and_call_function_080090cc(undefined4 arg1, undefined4 arg2, undefined *data, undefined4 arg4) {\n  undefined4 var1 = *(undefined4 *)(*(int *)PTR_PTR_DATA + 0xc);\n  undefined *func_name = PTR_FUNC_NAME;\n  undefined4 var4 = arg4;\n  if (data == (undefined *)0x0) {\n    goto END;\n  }\n  do {\n    process_data_and_call_func_08009124(var1, PTR_ASSERTION_FAILED_FILE, arg4, arg1, arg2, func_name, data, var4);\n    undefined8 result = execute_function_08009b5c();\n    arg2 = (undefined4)((ulonglong)result >> 0x20);\n    var1 = (undefined4)result;\n  } while(true);\n  END:\n  data = PTR_DATA;\n  func_name = PTR_DATA;\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_flags_080049e0",
                "param_1": "memory",
                "puVar1": "data"
            },
            "code": "int set_flags_080049e0(uint **memory) {\n    uint *data = *memory;\n    if (*(char *)((int)memory + 0x3d) != ' ') {\n        return 2;\n    }\n    *(undefined *)((int)memory + 0x3d) = 0x28;\n    if ((*data & 1) == 0) {\n        *data = *data | 1;\n    }\n    **memory = **memory | 0x400;\n    (*memory)[1] = (*memory)[1] | 0x300;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007ff0",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e"
            ],
            "imported": false,
            "current_name": "set_flags_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_bit_flags_08006d24",
                "param_1": "value_ptr",
                "iVar1": "data_ptr"
            },
            "code": "void set_bit_flags_08006d24(int *value_ptr)\n{\n    int data_ptr = DAT_08006d7c;\n    if (*value_ptr != DAT_08006d74) {\n        if (*value_ptr == DAT_08006d78) {\n            *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n            *(uint *)(data_ptr + 0xc) &= 0xfffffbff;\n            *(uint *)(data_ptr + 0x18) &= 0xfffffbff;\n            *(uint *)(data_ptr + 0x18) &= 0xfffffbff;\n        }\n        return;\n    }\n    *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n    *(uint *)(data_ptr + 0xc) &= 0xfffffdff;\n    *(uint *)(data_ptr + 0x18) &= 0xfffffdff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_bit_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr_value",
                "uVar2": "var1",
                "uStack_c": "var2",
                "uStack_8": "var3",
                "uStack_4": "var4",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "FUNC_08009d50": "cleanup",
                "FUNC_0800937c": "process"
            },
            "code": "void process_data_080098d8(int data1, int data2, int data3, int data4)\n{\n  int ptr_value = *(int *)PTR_PTR_DAT_08009904;\n  undefined4 var1 = data1;\n  undefined4 var2 = data2;\n  undefined4 var3 = data3;\n  undefined4 var4 = data4;\n  if ((ptr_value != 0) && (*(int *)(ptr_value + 0x18) == 0)) {\n    cleanup(ptr_value);\n  }\n  process(ptr_value, *(undefined4 *)(ptr_value + 8), data1, &var2, var1, &var2);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08009d50(iVar1);\n  }\n  FUNC_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "memory_block",
                "param_2": "block_size",
                "puVar1": "pointer_1",
                "uVar2": "unsigned_var_2",
                "puVar3": "pointer_3",
                "iVar4": "int_var_4",
                "puVar5": "pointer_5",
                "uVar6": "unsigned_var_6",
                "puVar7": "pointer_7",
                "uVar8": "unsigned_var_8",
                "PTR_DAT_08009328": "pointer_to_data_1",
                "PTR_DAT_08009324": "pointer_to_data_2"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *memory_block, uint block_size)\n{\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *memory_block = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *current_block = *(uint **)PTR_DAT_08009324;\n    uint *previous_block = *(uint **)PTR_DAT_08009324;\n    while (current_block != (uint *)0x0) {\n      uint block_size_difference = *current_block - aligned_block_size;\n      if (-1 < (int)block_size_difference) {\n        if (block_size_difference < 0xc) {\n          if (previous_block == current_block) {\n            uint next_block = previous_block[1];\n            *(uint *)PTR_DAT_08009324 = next_block;\n          }\n          else {\n            uint next_block = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = next_block;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size_difference;\n          *(uint *)((int)current_block + block_size_difference) = aligned_block_size;\n          previous_block = (uint *)((int)current_block + block_size_difference);\n        }\n        do_nothing_08009f4a(memory_block);\n        uint aligned_previous_block = (int)previous_block + 0xbU & 0xfffffff8;\n        int block_size_difference = aligned_previous_block - (int)(previous_block + 1);\n        if (block_size_difference != 0) {\n          *(int *)((int)previous_block + block_size_difference) = -block_size_difference;\n          return aligned_previous_block;\n        }\n        return aligned_previous_block;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint new_block_size = calculateOffsetAndAssign_08009918(memory_block);\n      *(undefined4 *)PTR_DAT_08009328 = new_block_size;\n    }\n    uint *new_block = (uint *)calculateOffsetAndAssign_08009918(memory_block, aligned_block_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == previous_block ||\n        (block_size_difference = calculateOffsetAndAssign_08009918(memory_block,(int)previous_block - (int)new_block), block_size_difference != -1)))) {\n      *previous_block = aligned_block_size;\n      do_nothing_08009f4a(memory_block);\n      uint aligned_previous_block = (int)previous_block + 0xbU & 0xfffffff8;\n      int block_size_difference = aligned_previous_block - (int)(previous_block + 1);\n      if (block_size_difference != 0) {\n        *(int *)((int)previous_block + block_size_difference) = -block_size_difference;\n        return aligned_previous_block;\n      }\n      return aligned_previous_block;\n    }\n    *memory_block = 0xc;\n    do_nothing_08009f4a(memory_block);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009190",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "process_data_08008500",
                "param_1": "data",
                "param_2": "param",
                "get_data_from_ptr_dat_08003760": "get_data_from_ptr",
                "PTR_DAT_080085a8": "PTR_character",
                "check_param_08007320": "check_param",
                "PTR_DAT_080085ac": "PTR_checked_param",
                "PTR_DAT_080085b0": "PTR_data",
                "PTR_DAT_080085b4": "PTR_config",
                "process_data_080067ac": "process_data_inner",
                "iVar2": "data_from_ptr",
                "iVar3": "checked_param",
                "cVar1": "character",
                "uVar4": "i"
            },
            "code": "uint process_data_08008500(uint data, uint param, uint16_t value) {\n  int data_from_ptr = get_data_from_ptr_dat_08003760();\n  char character = PTR_DAT_080085a8[1];\n  int checked_param = check_param_08007320((int)character, PTR_DAT_080085ac);\n  if (checked_param == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_080085b0 + i * 4) == 0 || ((checked_param = check_param_08007320((int)character, PTR_DAT_080085ac)), **(int **)(PTR_DAT_080085b0 + i * 4) != checked_param))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (update_config_080084b0(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    checked_param = process_data_08008500_080067ac(*(undefined4 *)(PTR_DAT_080085b0 + i * 4), data, value, 1000);\n    if (checked_param == 0) {\n      return param;\n    }\n    checked_param = get_data_from_ptr_dat_08003760();\n  } while ((uint)(checked_param - data_from_ptr) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_080067ac",
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "process_data_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t validate_input_080048c8(uint32_t **input_ptr, uint32_t *input_data, int input_size, uint32_t *output_ptr)\n{\n    uint32_t result;\n    uint32_t *ptr;\n    \n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_data == NULL) {\n            result = 1;\n        }\n        else if (input_size == 0) {\n            result = 1;\n        }\n        else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *(short *)((int)input_ptr + 0x2a) = (short)input_size;\n            input_ptr[0xb] = output_ptr;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "pcVar3": "current_destination",
                "iVar2": "remaining_length",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009954(char *destination, char *source, int length) {\n  char current_char;\n  int remaining_length;\n  char *current_destination = destination;\n\n  do {\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *source;\n    destination = current_destination + 1;\n    *current_destination = current_char;\n    source = source + 1;\n    length = remaining_length - 1;\n  } while (current_char != '\\0');\n  for (; destination != current_destination + remaining_length; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "update_data_08005aa4",
                "param_1": "data",
                "puVar1": "flag_ptr",
                "iVar2": "data_ptr",
                "iVar3": "current_time",
                "uVar4": "flag_value",
                "bVar5": "is_flag_set"
            },
            "code": "int update_data_08005aa4(uint *data)\n{\n    bool is_bit_set = (*data & 1) != 0;\n    if (is_bit_set) {\n        bool is_flag_set = (*(uint *)(PTR_FLAG_DATA + 0x1c) & 0x10000000) == 0;\n        if (is_flag_set) {\n            *(uint *)(PTR_FLAG_DATA + 0x1c) = *(uint *)(PTR_FLAG_DATA + 0x1c) | 0x10000000;\n        }\n        if ((*PTR_FLAG_DATA & 0x100) == 0) {\n            *PTR_FLAG_DATA = *PTR_FLAG_DATA | 0x100;\n            int start_time = get_start_time();\n            while ((*PTR_FLAG_DATA & 0x100) == 0) {\n                int current_time = get_current_time();\n                if (current_time - start_time > 100) {\n                    return 3;\n                }\n            }\n        }\n        uint *flag_ptr = PTR_FLAG_DATA + 4;\n        int data_ptr = PTR_FLAG_DATA;\n        uint flag_value = *(uint *)(PTR_FLAG_DATA + 0x20) & 0x300;\n        if (flag_value != 0 && flag_value != (data[1] & 0x300)) {\n            flag_value = *(uint *)(PTR_FLAG_DATA + 0x20);\n            *flag_ptr = 1;\n            *flag_ptr = 0;\n            *(uint *)(data_ptr + 0x20) = flag_value & 0xfffffcff;\n            if ((flag_value & 1) != 0) {\n                int start_time = get_start_time();\n                while ((*(uint *)(PTR_FLAG_DATA + 0x20) & 2) == 0) {\n                    int current_time = get_current_time();\n                    if (current_time - start_time > 5000) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        int data_ptr = PTR_FLAG_DATA;\n        *(uint *)(data_ptr + 0x20) = *(uint *)(data_ptr + 0x20) & 0xfffffcff | data[1];\n        if (is_flag_set) {\n            *(uint *)(data_ptr + 0x1c) = *(uint *)(data_ptr + 0x1c) & 0xefffffff;\n        }\n    }\n    if ((*data & 2) != 0) {\n        *(uint *)(PTR_FLAG_DATA + 4) = *(uint *)(PTR_FLAG_DATA + 4) & 0xffff3fff | data[2];\n    }\n    if ((*data & 0x10) != 0) {\n        *(uint *)(PTR_FLAG_DATA + 4) = *(uint *)(PTR_FLAG_DATA + 4) & 0xffbfffff | data[3];\n    }\n    return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "update_data_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "process_data_08005e6e",
                "param_1": "data",
                "iVar1": "current_data",
                "execute_function_if_condition_met_0800771c": "execute_function_if_condition_met",
                "do_nothing_08005e6a": "do_nothing",
                "do_nothing_08005e68": "do_nothing2",
                "execute_function_if_condition_met_0800771c(param_1)": "execute_function_if_condition_met(data)",
                "do_nothing_08005e6a(param_1)": "do_nothing(data)",
                "do_nothing_08005e68(param_1)": "do_nothing2(data)",
                "execute_function_if_not_null_08007736(param_1)": "execute_function_if_not_null(data)",
                "do_nothing_080064ae(param_1)": "do_nothing3(data)",
                "do_nothing_08005e6c(param_1)": "do_nothing4(data)",
                "do_nothing_080064ac(param_1)": "do_nothing5(data)"
            },
            "code": "void process_data_08005e6e(int *data)\n{\n  int current_data = *data;\n  uint16_t flag1 = *(uint16_t *)(current_data + 0x10);\n  uint16_t flag2 = *(uint16_t *)(current_data + 0xc);\n\n  if ((flag1 & 2) && (flag2 & 2)) {\n    *(uint32_t *)(current_data + 0x10) = 0xfffffffd;\n    *(uint8_t *)(data + 7) = 1;\n\n    if ((*(uint32_t *)(*data + 0x18) & 3) == 0) {\n      execute_function_if_condition_met();\n      do_nothing(data);\n    }\n    else {\n      do_nothing2();\n    }\n\n    *(uint8_t *)(data + 7) = 0;\n  }\n\n  if ((flag1 & 4) && (flag2 & 4)) {\n    *(uint32_t *)(current_data + 0x10) = 0xfffffffb;\n    *(uint8_t *)(data + 7) = 2;\n\n    if ((*(uint32_t *)(*data + 0x18) & 0x300) == 0) {\n      execute_function_if_condition_met(data);\n      do_nothing(data);\n    }\n    else {\n      do_nothing2(data);\n    }\n\n    *(uint8_t *)(data + 7) = 0;\n  }\n\n  if ((flag1 & 8) && (flag2 & 8)) {\n    *(uint32_t *)(current_data + 0x10) = 0xfffffff7;\n    *(uint8_t *)(data + 7) = 4;\n\n    if ((*(uint32_t *)(*data + 0x1c) & 3) == 0) {\n      execute_function_if_condition_met(data);\n      do_nothing(data);\n    }\n    else {\n      do_nothing2(data);\n    }\n\n    *(uint8_t *)(data + 7) = 0;\n  }\n\n  if ((flag1 & 0x10) && (flag2 & 0x10)) {\n    *(uint32_t *)(current_data + 0x10) = 0xffffffef;\n    *(uint8_t *)(data + 7) = 8;\n\n    if ((*(uint32_t *)(*data + 0x1c) & 0x300) == 0) {\n      execute_function_if_condition_met(data);\n      do_nothing(data);\n    }\n    else {\n      do_nothing2(data);\n    }\n\n    *(uint8_t *)(data + 7) = 0;\n  }\n\n  if ((flag1 & 1) && (flag2 & 1)) {\n    *(uint32_t *)(current_data + 0x10) = 0xfffffffe;\n    execute_function_if_not_null(data);\n  }\n\n  if ((flag1 & 0x80) && (flag2 & 0x80)) {\n    *(uint32_t *)(current_data + 0x10) = 0xffffff7f;\n    do_nothing3(data);\n  }\n\n  if ((flag1 & 0x40) && (flag2 & 0x40)) {\n    *(uint32_t *)(current_data + 0x10) = 0xffffffbf;\n    do_nothing4(data);\n  }\n\n  if ((flag1 & 0x20) && (flag2 & 0x20)) {\n    *(uint32_t *)(current_data + 0x10) = 0xffffffdf;\n    do_nothing5(data);\n  }\n\n  return;\n}",
            "called": [
                "FUN_08005e6c",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "check_parameter_08004024",
                "param_1": "parameter",
                "*DAT_08004040": "*data_pointer"
            },
            "code": "void check_parameter_08004024(int parameter) {\n  if (parameter != 4) {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 = *DAT_08004040 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "check_parameter_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "check_condition_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "code": "int check_condition_08002400(int index) {\n    uint counter = 0;\n    while (true) {\n        if (counter > 11) {\n            return 0;\n        }\n        if ((PTR_DAT_08002428[(index * 0xc + counter) * 8] & 0x40) != 0) {\n            break;\n        }\n        counter = (counter + 1) & 0xff;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "check_condition_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "update_flags_08000588",
                "param_1": "index",
                "PTR_DAT_080005cc": "char_array",
                "update_flags_if_condition_is_met_08002644": "update_flags_if_condition_is_met",
                "PTR_DAT_080005d0": "offset_array",
                "PTR_DAT_080005d4": "previous_char_ptr",
                "PTR_DAT_080005d8": "next_index_ptr",
                "PTR_DAT_080005dc": "next_char_array"
            },
            "code": "void update_flags_08000588(int index)\n{\n  char current_char = PTR_DAT_080005cc[index];\n  char previous_char = *PTR_DAT_080005d4;\n  if ((current_char == previous_char) && (previous_char != '\\0')) {\n    *PTR_DAT_080005d4 = previous_char - 1;\n  }\n  else if (previous_char != '\\0') {\n    char next_index = *PTR_DAT_080005d8;\n    *PTR_DAT_080005d8 = next_index + 1U;\n    PTR_DAT_080005dc[next_index] = current_char;\n  }\n  PTR_DAT_080005cc[index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_flags_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "update_flags_if_condition_is_met_08002644",
                "*param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "value",
                "uVar2": "index",
                "iVar3": "condition_met"
            },
            "code": "void update_flags_if_condition_is_met_08002644(byte *input, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t index = (uint32_t)*input;\n  byte value = PTR_DAT_08002670[index * 8];\n  PTR_DAT_08002670[index * 8] = value & 0xbf;\n  int condition_met = check_condition_08002400((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)index >> 0x23),param_2,value & 0xbf,(int)((uint64_t)DAT_08002674 * (uint64_t)index),param_4);\n  if (condition_met == 0) {\n    update_flags_and_reset_memory_08002578(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "update_flags_if_condition_is_met_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "code": "void infinite_loop_08008868() {\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "infinite_loop_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "<original_function_name>": "find_character_index",
                "param_1": "character",
                "uVar1": "index",
                "FUN_080036ac": "find_character_index_080036ac"
            },
            "code": "uint find_character_index_080036ac(int character){\n                      uint index;\n                      uint max_index = 0x3c;\n                      uint threshold = 5;\n                      uint shifted_character = (uint)(character << 0x18) >> 0x1c;\n                      if (shifted_character < threshold) {\n                        for (index = 0; (index < max_index && (character != (char)PTR_DAT_080036d0[index])); index = index + 1){}\n                      }\n                      else {\n                        index = 0xffffffff;\n                      }\n                      return index;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "find_character_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "call_function_pointer_08002f1e",
                "param_1": "function_pointer_address"
            },
            "code": "void call_function_pointer_08002f1e(int function_pointer_address) {\n    (**(code **)(*(unsigned int *)(function_pointer_address + 0xc0)))();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "process_data_and_return_0800885c",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "process_data_08008500": "process_data"
            },
            "code": "void process_data_and_return_0800885c(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  process_data(data2, data3, data3, data4, data4);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_data_and_return_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_flags_and_values_0800643c",
                "param_1": "data",
                "param_2": "value",
                "*param_1": "*data",
                "(*param_1)[0x11]": "(*data)[17]",
                "0x8000": "0b1000000000000000",
                "**param_1": "**data"
            },
            "code": "int set_flags_and_values_0800643c(uint **data, int value) {\n  update_flags(*data, value, 4);\n  (*data)[17] |= 0x8000;\n  **data |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "do_something_multiple_times_08002fca",
                "param_1": "unused",
                "param_2": "memory_location",
                "param_3": "iterations",
                "param_4": "value2",
                "param_5": "value1",
                "uVar1": "iteration_count",
                "do_nothing_08008ac4": "do_nothing",
                "set_value_at_address_if_param_not_zero_08008a24": "set_memory_value_if_not_zero"
            },
            "code": "void do_something_multiple_times_08002fca(uint iterations, int* memory_location, uint value1, uint value2)\n{\n  uint iteration_count;\n  for (iteration_count = 0; iteration_count < iterations; iteration_count++) {\n    do_nothing(value2);\n    set_memory_value_if_not_zero(memory_location, value1);\n    do_nothing(value2);\n    set_memory_value_if_not_zero(memory_location, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "do_something_multiple_times_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "param_value",
                "piVar3": "param_ptr",
                "uVar4": "loop_counter",
                "uVar5": "flags",
                "iVar6": "temp_value",
                "unaff_r4": "unused_variable",
                "unaff_r5": "unused_variable",
                "pcVar7": "function_pointer",
                "iVar8": "temp_result",
                "uVar9": "param_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_value",
                "bVar10": "is_negative"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params) {\n  uint32_t result;\n  int *param_ptr;\n  uint32_t param_value;\n  uint32_t loop_counter;\n  uint16_t flags;\n  uint32_t temp_value;\n  uint32_t i;\n  uint32_t jump_table_value;\n  bool is_negative;\n  code *function_pointer;\n  uint32_t temp_result;\n\n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize_data();\n    }\n    if (params == (int *)PTR_DAT_08009cc4) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == (int *)PTR_DAT_08009cc8) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == (int *)PTR_DAT_08009ccc) {\n      param_ptr = (int *)data[3];\n    }\n    if (*(uint16_t *)(param_ptr + 3) != 0) {\n      flags = *(uint16_t *)(param_ptr + 3);\n      if ((int)(flags << 0x1c) < 0) {\n        param_value = params[4];\n        if (param_value != 0) {\n          temp_value = flags << 0x1e;\n          is_negative = temp_value == 0;\n          if (is_negative) {\n            temp_value = 0;\n          }\n          function_pointer = (code *)param_ptr[10];\n          loop_counter = *param_ptr;\n          if (!is_negative) {\n            temp_value = param_ptr[5];\n          }\n          *param_ptr = param_value;\n          param_ptr[2] = temp_value;\n          for (i = loop_counter - param_value; i > 0; i -= temp_value) {\n            temp_result = (*(code *)function_pointer)(data,param_ptr[8],param_value,i,0,0);\n            if (temp_result < 1) {\n              flags = *(uint16_t *)(param_ptr + 3);\n              goto LAB_08009c62;\n            }\n            param_value += temp_result;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_pointer = (code *)param_ptr[0xb]) != NULL)) {\n        param_value = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          temp_result = (*(code *)function_pointer)(data,param_ptr[8],flags & 0x1000,1);\n          if ((temp_result == -1) && ((param_value = *data) != 0)) {\n            if ((param_value != 0x1d) && (param_value != 0x16)) {\n              flags |= 0x40;\n              jump_table_value = UNRECOVERED_JUMPTABLE_00();\n              return jump_table_value;\n            }\n            *data = param_value;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          temp_result = params[0x15];\n        }\n        if (((int)((uint)flags << 0x1d) < 0) && ((temp_result = temp_result - params[1]), param_ptr[0xd] != 0)) {\n          temp_result -= param_ptr[0x10];\n        }\n        temp_result = (*(code *)function_pointer)(data,param_ptr[8],temp_result,0);\n        flags = *(uint16_t *)(param_ptr + 3);\n        if ((temp_result == -1) && ((param_value = *data) > 0x1d || (-1 < (int)((DAT_08009c78 >> (param_value & 0xff)) << 0x1f))))) {\n          flags |= 0x40;\n          jump_table_value = UNRECOVERED_JUMPTABLE_00(0xffffffff);\n          return jump_table_value;\n        }\n        params[1] = 0;\n        *param_ptr = params[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((temp_result != -1) || (*data == 0))) {\n          params[0x15] = temp_result;\n        }\n        param_ptr[0x15] = temp_result;\n        if (param_ptr[0xd] != NULL) {\n          if (param_ptr[0xd] != param_ptr + 0x11) {\n            insert_into_linked_list(data);\n          }\n          param_ptr[0xd] = 0;\n          flags = UNRECOVERED_JUMPTABLE_00();\n          return flags;\n        }\n      }\nLAB_08009b86:\n      flags = UNRECOVERED_JUMPTABLE_00(0);\n      return flags;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_into_linked_list_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "execute_function_08009b5c",
                "puVar1": "input_pointer",
                "iVar2": "input_variable2",
                "piVar3": "input_array1",
                "piVar4": "input_array2",
                "uVar5": "input_variable5",
                "uVar6": "input_variable6",
                "iVar7": "input_variable7",
                "pcVar8": "function_pointer",
                "iVar9": "input_variable9",
                "uVar10": "input_variable10",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_pointer",
                "bVar11": "input_boolean11",
                "uVar12": "input_variable12"
            },
            "code": "void execute_function_08009b5c() {\n  uint *input_pointer;\n  int input_variable2;\n  int *input_array1;\n  int *input_array2;\n  uint input_variable5;\n  ushort input_variable6;\n  int input_variable7;\n  code *function_pointer;\n  int input_variable9;\n  uint input_variable10;\n  code *jumptable_pointer;\n  bool input_boolean11;\n  undefined8 input_variable12;\n  validate_input(6);\n  jumptable_pointer = (code *)0x8009b6b;\n  input_variable12 = infinite_loop(1);\n  input_array1 = (int *)((ulonglong)input_variable12 >> 0x20);\n  input_pointer = (uint *)input_variable12;\n  input_variable6 = *(ushort *)(input_array1 + 3);\n  input_variable5 = (uint)input_variable6;\n  if ((int)(input_variable5 << 0x1c) < 0) {\n    input_variable2 = input_array1[4];\n    if (input_variable2 != 0) {\n      input_variable7 = input_variable5 << 0x1e;\n      input_boolean11 = input_variable7 != 0;\n      if (input_boolean11) {\n        input_variable7 = 0;\n      }\n      input_variable9 = *input_array1;\n      if (!input_boolean11) {\n        input_variable7 = input_array1[5];\n      }\n      *input_array1 = input_variable2;\n      input_array1[2] = input_variable7;\n      for (input_variable9 = input_variable9 - input_variable2; 0 < input_variable9; input_variable9 = input_variable9 - input_variable7) {\n        input_variable7 = (*(code *)input_array1[10])(input_pointer,input_array1[8],input_variable2,input_variable9);\n        if (input_variable7 < 1) {\n          input_variable6 = *(ushort *)(input_array1 + 3);\n          goto LAB_08009c62;\n        }\n        input_variable2 = input_variable2 + input_variable7;\n      }\n    }\n  }\n  else if (((0 < input_array1[1]) || (0 < input_array1[0x10])) &&\n          (function_pointer = (code *)input_array1[0xb], function_pointer != (code *)0x0)) {\n    input_variable10 = *input_pointer;\n    *input_pointer = 0;\n    if ((input_variable6 & 0x1000) == 0) {\n      input_variable2 = (*function_pointer)(input_pointer,input_array1[8],input_variable5 & 0x1000,1);\n      if ((input_variable2 == -1) && (input_variable5 = *input_pointer, input_variable5 != 0)) {\n        if ((input_variable5 != 0x1d) && (input_variable5 != 0x16)) {\n          *(ushort *)(input_array1 + 3) = *(ushort *)(input_array1 + 3) | 0x40;\n          (*jumptable_pointer)();\n          return;\n        }\n        *input_pointer = input_variable10;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      input_variable2 = input_array1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(input_array1 + 3) << 0x1d) < 0) &&\n       (input_variable2 = input_variable2 - input_array1[1], input_array1[0xd] != 0)) {\n      input_variable2 = input_variable2 - input_array1[0x10];\n    }\n    input_variable2 = (*(code *)input_array1[0xb])(input_pointer,input_array1[8],input_variable2,0);\n    input_variable6 = *(ushort *)(input_array1 + 3);\n    if ((input_variable2 == -1) &&\n       ((0x1d < *input_pointer || (-1 < (int)((DAT_08009c78 >> (*input_pointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(input_array1 + 3) = input_variable6 | 0x40;\n      (*jumptable_pointer)(0xffffffff);\n      return;\n    }\n    input_array1[1] = 0;\n    *input_array1 = input_array1[4];\n    if (((int)((uint)input_variable6 << 0x13) < 0) && ((input_variable2 != -1 || (*input_pointer == 0)))) {\n      input_array1[0x15] = input_variable2;\n    }\n    input_array2 = (int *)input_array1[0xd];\n    *input_pointer = input_variable10;\n    if (input_array2 != (int *)0x0) {\n      if (input_array2 != input_array1 + 0x11) {\n        insert_into_linked_list(input_pointer);\n      }\n      input_array1[0xd] = 0;\n      (*jumptable_pointer)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*jumptable_pointer)(0);\n  return;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "index",
                "param_2": "value",
                "param_3": "ptr_data",
                "param_4": "ptr_character_data",
                "iVar2": "character_index",
                "is_valid": "is_valid",
                "PTR_DAT_080002dc": "ptr_character_data",
                "PTR_DAT_080002e8": "ptr_index_data",
                "PTR_DAT_080002d8": "ptr_data",
                "PTR_DAT_080002e0": "ptr_index_data",
                "find_character_index_080036ac": "find_character_index",
                "find_index_0800738a": "find_index",
                "process_data_080088e0": "process_data_080088e0",
                "calculate_and_update_value_080026b0": "calculate_and_update_value",
                "set_value_at_offset_08002fc2": "set_value_at_offset",
                "get_value_at_offset_08002fa0": "get_value_at_offset"
            },
            "code": "void process_data_0800021a(uint index, uint value, uint* PTR_DAT_080002d8, uint* PTR_DAT_080002dc, uint* ptr_character_index, uint* PTR_DAT_080002e8){\n  bool is_valid = false;\n  int character_index = 0;\n  uint index_data = 0;\n  int character = 0;\n  int value_index = 0;\n  int index_offset = 0;\n  \n  index_offset = get_value_at_offset(PTR_DAT_080002d8, index, PTR_DAT_080002dc, ptr_character_index, PTR_DAT_080002e8);\n  if (index_offset == 3) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        character_index = find_character_index();\n        if (character_index == 0) {\n          is_valid = false;\n        }\n        else {\n          character = (int)(char)PTR_DAT_080002dc[index];\n          character_index = find_character_index(character);\n          if (character_index == 1) {\n            is_valid = false;\n          }\n          else {\n            index_data = find_index(character, PTR_DAT_080002e8);\n            is_valid = true;\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      process_data_0800021a_080088e0(index, value);\n    }\n    set_value_at_offset(PTR_DAT_080002d8, index, value);\n  }\n  else if (index_offset == 4) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        character_index = find_character_index();\n        if (character_index == 0) {\n          is_valid = false;\n        }\n        else {\n          character = (int)(char)PTR_DAT_080002dc[index];\n          character_index = find_character_index(character);\n          if (character_index == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      value_index = (int)PTR_DAT_080002e8[(int)(byte)PTR_DAT_080002e8[index]] * 3;\n      calculate_and_update_value(PTR_DAT_080002d8 + value_index, value);\n    }\n    set_value_at_offset(PTR_DAT_080002d8, index, value);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_080026b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "process_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "is_param_included_08008a6c",
                "param_1": "param_index",
                "cVar1": "is_included",
                "iVar2": "bit_position",
                "uVar3": "shifted_data",
                "uVar4": "data"
            },
            "code": "bool is_param_included_08008a6c(uint param_index) {\n    bool is_included = false;\n    uint data = 0xffffffff;\n\n    if (param_index < 0x3c) {\n        data = (uint)(char)PTR_DAT_08008ab4[param_index];\n    }\n\n    if (data != 0xffffffff) {\n        int bit_position = get_bit_position(data, PTR_DAT_08008ab8);\n        if (bit_position != 0) {\n            uint shifted_data = (data << 0x18) >> 0x1c;\n            uint bit_mask = 1 << (data & 0xf) & 0xffff;\n            is_included = is_param_included_08008a6c_in_ptr(shifted_data, bit_mask);\n        }\n    }\n\n    return is_included;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "is_param_included_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_08002708_and_shift_left_080026f8",
                "*param_1": "*input_byte_ptr",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "uint": "uint",
                "byte": "uint8_t",
                "input_byte": "input_byte",
                "ptr_dat_val": "ptr_dat_val",
                "shifted_val": "shifted_val",
                "result": "result"
            },
            "code": "uint get_byte_from_ptr_dat_08002708_and_shift_left_080026f8(uint8_t *input_byte_ptr)\n{\n    uint8_t input_byte = *input_byte_ptr;\n    uint8_t ptr_dat_val = PTR_DAT_08002708[input_byte * 8];\n    uint shifted_val = (uint)ptr_dat_val << 0x19;\n    uint result = shifted_val >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_08002708_and_shift_left_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_valid_input_080085b8",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085d8": "get_input_pointer",
                "byte": "input_byte"
            },
            "code": "bool is_valid_input_080085b8(int input_index)\n{\n  uint16_t combined_bytes = combine_bytes(PTR_DAT_080085d8(input_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "is_valid_input_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "readByteFromDataArray_08001c08",
                "PTR_DAT_08001c14": "dataArrayPointer",
                "uVar1": "byte"
            },
            "code": "unsigned char readByteFromDataArray_08001c08(void)\n{\n    unsigned char byte = read_byte_from_array_08002720(PTR_DAT_08001c14);\n    return byte;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "readByteFromDataArray_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "extract_timer_instance_type_080075dc",
                "param_1": "clock_source",
                "uVar1": "timer_value",
                "iVar2": "timer_type",
                "uVar3": "shift_value",
                "local_20": "data_value",
                "local_1c": "local_1c",
                "local_18": "local_18",
                "local_14": "local_14",
                "local_10": "local_10"
            },
            "code": "int extract_timer_instance_type_080075dc(uint clock_source)\n{\n  uint timer_value;\n  int timer_type;\n  uint shift_value;\n  uint data_value;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  uint local_14;\n  uint local_10;\n  local_1c = 0;\n  local_18 = 0;\n  local_14 = 0;\n  local_10 = 0;\n  timer_value = 0;\n  shift_value = 0;\n  data_value = 0;\n  local_20 = 0;\n  extract_data(&local_1c,&local_20);\n  timer_type = get_timer_instance_type(clock_source);\n  if (timer_type == 1) {\n    timer_value = get_value_shifted_by_pointer();\n  }\n  else if (timer_type == 2) {\n    timer_value = get_shifted_value_from_pointer();\n    shift_value = timer_value;\n  }\n  else {\n    process_data(PTR_s_TIM__Unknown_clock_source_08007644);\n    timer_type = 0;\n    shift_value = 0;\n  }\n  if (shift_value != 0x500) {\n    if (shift_value < 0x501) {\n      if (shift_value != 0x400) {\n        return timer_type;\n      }\n    }\n    else if ((shift_value != 0x600) && (shift_value != 0x700)) {\n      return timer_type;\n    }\n  }\n  return timer_type << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "extract_timer_instance_type_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "get_status_08007544",
                "param_1": "status_code",
                "DAT_08007588": "timer_1",
                "DAT_0800758c": "timer_2",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt"
            },
            "code": "uint32_t get_status_08007544(uint32_t status_code) {\n  if (status_code == 0xffffffff) {\n    return 0;\n  }\n  if (status_code == DAT_08007588) {\n    return 29;\n  }\n  if (DAT_08007588 < status_code) {\n    if (status_code == DAT_0800758c) {\n      return 30;\n    }\n    if (status_code == DAT_0800758c + 0x12400) {\n      return 25;\n    }\n  }\n  else if (status_code == 0x40000000) {\n    return 28;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "get_status_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "check_and_call_function_08007ff0",
                "param_1": "parameter",
                "iVar1": "function_pointer",
                "decrement_by_four_08007f78": "decrement_by_four",
                "set_flags_080049e0": "set_flags"
            },
            "code": "void check_and_call_function_08007ff0(int parameter)\n{\n  int function_pointer;\n  \n  function_pointer = decrement_by_four();\n  if (((*(code **)(function_pointer + 0x60) != (code *)0x0) && (*(char *)(function_pointer + 0x5c) == '\\x01')) &&\n     (*(char *)(function_pointer + 0x2c) != ' ')) {\n    (**(code **)(function_pointer + 0x60))(function_pointer + 0x68);\n  }\n  set_flags(parameter);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_array",
                "iVar1": "bit_value",
                "puVar2": "data_values",
                "iVar3": "data_value_index",
                "PTR_DAT_08008a14": "data_values",
                "get_bit_at_position_08006b28": "get_bit_at_position",
                "find_index_0800738a": "find_index",
                "checkAndUpdateValues_080071e4": "check_and_update_values",
                "set_bit_08006b5c": "set_bit",
                "set_bits_08007258": "set_bits",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "PTR_DAT_08008a18": "bit_array",
                "PTR_DAT_08008a1c": "value_array",
                "PTR_DAT_08008a20": "bit_array_2"
            },
            "code": "void process_data_08008990(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_array){\n  int data_value_index;\n  undefined *PTR_DAT_08008a14;\n  int bit_value;\n  \n  if (data_index < 0x3c) {\n    data_value_index = (int)(char)PTR_DAT_08008a14[data_index];\n    PTR_DAT_08008a14 = PTR_DAT_08008a14;\n  }\n  else {\n    data_value_index = -1;\n    PTR_DAT_08008a14 = data_array;\n  }\n  if (data_value_index != -1) {\n    bit_value = get_bit_at_position_08006b28(data_value_index, PTR_DAT_08008a18, param_3, PTR_DAT_08008a14, data_array);\n    if (bit_value != 0) {\n      int index = find_index_0800738a(data_value_index, PTR_DAT_08008a1c);\n      if (index != 0) {\n        check_and_update_values_080071e4(data_value_index);\n      }\n      set_bit_08006b5c(data_value_index, PTR_DAT_08008a18);\n    }\n    switch(param_2) {\n    case 0:\n      set_bits_08007258(data_value_index, 0);\n      break;\n    case 1:\n      set_bits_08007258(data_value_index, 1, 0);\n      break;\n    case 2:\n      set_bits_08007258(data_value_index, 0, 1);\n      break;\n    case 3:\n      set_bits_08007258(data_value_index, 0, 2);\n    }\n    set_bit_in_array_08006b3e(data_value_index, PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08007258",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_080071e4",
                "FUN_08006b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = check_param_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = check_param_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        set_bits_080040e8(uVar5,&local_20);\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_value_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        set_bits_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        check_and_modify_data_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_0800674e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_value_at_offset_08004396",
                "param_1": "base_address",
                "PTR_": "base_address",
                "DAT_": "value"
            },
            "code": "int set_value_at_offset_08004396(int *PTR_){\n    int offset = 0x10;\n    int DAT_ = PTR_[0x11] & 0xff;\n    *(unsigned int *)(PTR_ + offset) = DAT_;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_at_position_08003fb0",
                "param_1": "position",
                "DAT_08003fd4": "data_ptr"
            },
            "code": "void set_bit_at_position_08003fb0(uint position)\n{\n  if (position >= 0) {\n    int* DAT_08003fd4 = (int*)(DAT_08003fd4 + ((position >> 5) + 0x20) * 4);\n    *DAT_08003fd4 = 1 << (position & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "check_input_080052f0",
                "param_1": "input",
                "puVar2": "input_ptr",
                "uVar3": "flags",
                "uVar4": "control",
                "DAT_080053c8": "FLAG_1",
                "0x100": "CONTROL_MASK",
                "0x10200": "FLAG_4",
                "0x10400": "FLAG_6",
                "0x10800": "FLAG_9",
                "0x10": "16",
                "set_params_08004aec": "set_params",
                "0x3d": "OFFSET_1",
                "0x3e": "OFFSET_2",
                "0x2a": "OFFSET_3",
                "0xc": "12",
                "parse_input_08004f3c": "parse_input",
                "cVar1": "c"
            },
            "code": "void check_input_080052f0(uint **input) {\n  uint *input_ptr = *input;\n  uint flags = input_ptr[5];\n  uint control = input_ptr[1];\n\n  if (((flags & DAT_080053c8) != 0) && ((control & CONTROL_MASK) != 0)) {\n    input[16] = (uint *)((uint)input[16] | FLAG_2);\n    input_ptr[5] = 0xfffffeff;\n    **input = **input | FLAG_3;\n  }\n\n  if (((flags & FLAG_4) != 0) && ((control & CONTROL_MASK) != 0)) {\n    input[16] = (uint *)((uint)input[16] | FLAG_5);\n    (*input)[5] = 0xfffffdff;\n  }\n\n  if (((flags & FLAG_6) != 0) && ((control & CONTROL_MASK) != 0)) {\n    char c = *(char *)((int)input + OFFSET_1);\n    if (((*(char *)((int)input + OFFSET_2) == ' ') && (*(short *)((int)input + OFFSET_3) == 0)) &&\n       (((c == '!' || (c == ')')) || ((c == '(' && (input[12] == (uint *)0x21)))))) {\n      set_params(input);\n    }\n    else {\n      input[16] = (uint *)((uint)input[16] | FLAG_7);\n      if (*(char *)((int)input + OFFSET_2) == '\\x10') {\n        **input = **input | FLAG_8;\n      }\n      (*input)[5] = 0xfffffbff;\n    }\n  }\n\n  if (((flags & FLAG_9) != 0) && ((control & CONTROL_MASK) != 0)) {\n    input[16] = (uint *)((uint)input[16] | DAT_080053c80);\n    (*input)[5] = 0xfffff7ff;\n  }\n\n  if (input[16] != (uint *)0x0) {\n    parse_input(input);\n  }\n}",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "check_input_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "param",
                "**(int **)(param_1 + 0xc0)": "function_ptr_address",
                "**(int **)(param_1 + 0xc0) + 8": "function_ptr",
                "**(code **)(**(int **)(param_1 + 0xc0) + 8)": "function_ptr()"
            },
            "code": "void execute_function_08002ec4(int param)\n{\n  void (*function_ptr)() = *(void (**)(void))(**(int **)(param + 0xc0) + 8);\n  function_ptr();\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_and_return_value_08007306",
                "param_1": "value_to_find",
                "param_2": "data_array",
                "*param_2": "*data_array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_and_return_value_08007306(int value_to_find, char *data_array)\n{\n    while (*data_array != -1)\n    {\n        if (*data_array == value_to_find)\n        {\n            return *(int *)(data_array + 4);\n        }\n        data_array += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_and_return_value_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_bits_and_update_uint_08008f0e",
                "update_bits_of_uint_08003f0c": "update_bits_of_uint",
                "initialize_and_set_bits_080036a2": "set_bits_of_uint"
            },
            "code": "void initialize_bits_and_update_uint_08008f0e(void)\n{\n  update_bits_of_uint(3);\n  set_bits_of_uint();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_bits_and_update_uint_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "data_type",
                "param_2": "data",
                "param_3": "N/A",
                "PTR_DAT_08002f74": "data_ptr_0x90",
                "PTR_DAT_08002f70": "data_ptr_0xc0",
                "PTR_DAT_08002f78": "data_ptr_0xd0",
                "PTR_DAT_08002f6c": "data_ptr_0xe0",
                "PTR_DAT_08002f7c": "data_ptr_0xf4",
                "PTR_DAT_08002f80": "data_ptr_0xf5"
            },
            "code": "void update_data_08002f2c(uint8_t data_type, uint32_t data) {\n    switch(data_type) {\n        case 0x90:\n            *(uint32_t*)PTR_DAT_08002f74 = data;\n            break;\n        case 0xc0:\n            *(uint32_t*)PTR_DAT_08002f70 = data;\n            break;\n        case 0xd0:\n            *(uint32_t*)PTR_DAT_08002f78 = data;\n            break;\n        case 0xe0:\n            *(uint32_t*)PTR_DAT_08002f6c = data;\n            break;\n        case 0xf4:\n            *(uint32_t*)PTR_DAT_08002f7c = data;\n            break;\n        case 0xf5:\n            *(uint32_t*)PTR_DAT_08002f80 = data;\n            break;\n        default:\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_and_set_values_08004954",
                "param_1": "ptr_input",
                "param_2": "ptr_length",
                "param_3": "input_length",
                "param_4": "ptr_values",
                "uVar1": "result",
                "puVar2": "ptr_flags"
            },
            "code": "int validate_input_and_set_values_08004954(uint **ptr_input, uint *ptr_length, int input_length, uint *ptr_values) {\n  int result;\n  uint *ptr_flags;\n  if (*(char *)((int)ptr_input + 0x3d) == '(') {\n    if (ptr_length == NULL) {\n      result = 1;\n    }\n    else if (input_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(ptr_input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptr_input + 0xf) = 1;\n      ptr_flags = *ptr_input;\n      if ((*ptr_flags & 1) == 0) {\n        *ptr_flags = *ptr_flags | 1;\n      }\n      **ptr_input = **ptr_input & 0xfffff7ff;\n      *(undefined *)((int)ptr_input + 0x3d) = 0x2a;\n      *(undefined *)((int)ptr_input + 0x3e) = 0x20;\n      result = 0;\n      ptr_input[0x10] = NULL;\n      ptr_input[9] = ptr_length;\n      *(short *)((int)ptr_input + 0x2a) = (short)input_length;\n      ptr_input[0xb] = ptr_values;\n      *(undefined2 *)(ptr_input + 10) = *(undefined2 *)((int)ptr_input + 0x2a);\n      *(undefined *)(ptr_input + 0xf) = 0;\n      (*ptr_input)[1] = (*ptr_input)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_values_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "modified_value_1",
                "uVar2": "modified_value_2",
                "uVar3": "modified_value_3"
            },
            "code": "void update_data_08005cec(int data_address, uint *data_array)\n{\n  uint modified_value_1;\n  uint modified_value_2;\n  uint modified_value_3;\n\n  modified_value_1 = *(uint *)(data_address + 0x20) & 0xfffffffe;\n  modified_value_2 = *(uint *)(data_address + 4);\n  modified_value_3 = *data_array;\n  modified_value_1 = (modified_value_1 & 0xfffffffd) | data_array[2];\n  if (data_address == PTR_08005d44) {\n    modified_value_1 = (modified_value_1 & 0xfffffff7 | data_array[3]) & 0xfffffffb;\n    modified_value_2 = (modified_value_2 & 0xfffffcff) | data_array[5] | data_array[6];\n  }\n  *(uint *)(data_address + 4) = modified_value_2;\n  *(uint *)(data_address + 0x18) = *(uint *)(data_address + 0x18) & 0xffffff8c | modified_value_3;\n  *(uint *)(data_address + 0x34) = data_array[1];\n  *(uint *)(data_address + 0x20) = modified_value_1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_pointer_to_22_0800886c",
                "PTR_DAT_08008878": "pointer_to_22"
            },
            "code": "void set_pointer_to_22_0800886c(void)\n{\n  int* PTR_DAT_08008878 = (int*) PTR_DAT_08008878;\n  *PTR_DAT_08008878 = 22;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_pointer_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "addByteToUintAndStore_08003748",
                "PTR_DAT_08003758": "target_address",
                "PTR_DAT_0800375c": "byte_to_add",
                "uint": "unsigned int",
                "byte": "unsigned char",
                "int": "signed int",
                "*": "pointer to",
                "value_to_add": "value_to_store",
                "source_address": "source_address"
            },
            "code": "void addByteToUintAndStore_08003748(void)\n{\n  uint *PTR_DAT_08003758 = (uint *)PTR_DAT_08003758;\n  byte PTR_DAT_0800375c = * (byte *)PTR_DAT_0800375c;\n  int *source_address = (int *)PTR_DAT_08003758;\n  uint value_to_add = (uint)PTR_DAT_0800375c + *source_address;\n  *PTR_DAT_08003758 = value_to_add;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "addByteToUintAndStore_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "set_bits_080040e8",
                "param_1": "target",
                "param_2": "source",
                "puVar1": "target_ptr",
                "uVar2": "upper_limit",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "index",
                "uVar6": "source_value",
                "uVar7": "target_value",
                "iVar8": "shift_2",
                "uVar9": "lower_limit",
                "iVar10": "index_2",
                "DAT_080042bc": "source_base",
                "DAT_080042c0": "target_base",
                "DAT_080042c4": "target_mask",
                "DAT_080042c8": "source_limit",
                "DAT_080042cc": "source_limit_plus_4",
                "DAT_080042d0": "target_base",
                "LAB_SKIP": "skip_to_next",
                "LAB_SKIP2": "skip_to_next2"
            },
            "code": "void set_bits_080040e8(uint *target, uint *source)\n{\n    uint *target_ptr;\n    uint bit_mask;\n    uint bit_value;\n    uint index = 0;\n    do {\n        if (index > 0xf) {\n            return;\n        }\n        bit_mask = 1 << (index & 0xff);\n        bit_value = *source & bit_mask;\n        if (bit_mask == bit_value) {\n            uint source_value = source[1];\n            if (source_value == 0x12) {\n                target_ptr = target + 3;\n                *target_ptr += 0xc;\n            }\n            else if (source_value < 0x13) {\n                if (source_value == 2) {\n                    target_ptr = target + 3;\n                    *target_ptr += 8;\n                }\n                else if (source_value < 3) {\n                    if (source_value == 0) goto LAB_SKIP;\n                    if (source_value == 1) {\n                        target_ptr = target + 3;\n                    }\n                }\n                else if (source_value == 3) {\n                    target_ptr = 0;\n                }\n                else if (source_value == 0x11) {\n                    target_ptr = target + 3;\n                    *target_ptr += 4;\n                }\n            }\n            else {\n                if (source_value != DAT_080042c8) {\n                    if (DAT_080042c8 < source_value) {\n                        if (source_value == DAT_080042cc) goto LAB_SKIP;\n                        uint upper_limit = DAT_080042cc + 0x10000;\n                        uint lower_limit = DAT_080042cc;\n                    }\n                    else {\n                        upper_limit = DAT_080042c8 - 0x100000;\n                        lower_limit = DAT_080042c8;\n                    }\n                    if ((source_value != upper_limit) && (source_value != lower_limit - 0xf0000)) goto LAB_SKIP;\n                }\n            LAB_SKIP:\n                if (source[2] == 0) {\n                    target_ptr = target + 4;\n                }\n                else if (source[2] == 1) {\n                    target[4] = bit_mask;\n                    target_ptr = target + 8;\n                }\n                else {\n                    target[5] = bit_mask;\n                    target_ptr = target + 8;\n                }\n            }\n        LAB_SKIP2:\n            uint shift = index;\n            if (0xff < bit_value) {\n                shift = index - 8;\n                target_ptr = target + 1;\n            }\n            *target_ptr = *target_ptr & ~(0xf << (shift << 2 & 0xff)) | (*target_ptr + shift) << (shift << 2 & 0xff);\n            if ((source[1] & 0x10000000) != 0) {\n                *(uint *)(DAT_080042cc + 0x18) = *(uint *)(DAT_080042cc + 0x18) | 1;\n                int shift_2 = (index & 3) << 2;\n                if (target == DAT_080042c0) {\n                    int index_2 = 0;\n                }\n                else if (target == DAT_080042c0 + 0x100) {\n                    index_2 = 1;\n                }\n                else if (target == DAT_080042c0 + 0x200) {\n                    index_2 = 2;\n                }\n                else if (target == DAT_080042c0 + 0x300) {\n                    index_2 = 3;\n                }\n                else {\n                    index_2 = 4;\n                }\n                *(uint *)(DAT_080042c0_plus_40 + ((index >> 2) + 2) * 4) = *(uint *)(DAT_080042c0_plus_40 + ((index >> 2) + 2) * 4) & ~(0xf << shift_2) | index_2 << shift_2;\n                if ((source[1] & 0x10000) == 0) {\n                    *DAT_080042c4 = *DAT_080042c4 & ~bit_value;\n                }\n                else {\n                    *DAT_080042c4 = *DAT_080042c4 | bit_value;\n                }\n                if ((source[1] & 0x20000) == 0) {\n                    DAT_080042c4[1] = DAT_080042c4[1] & ~bit_value;\n                }\n                else {\n                    DAT_080042c4[1] = DAT_080042c4[1] | bit_value;\n                }\n                if ((source[1] & 0x100000) == 0) {\n                    DAT_080042c4[2] = DAT_080042c4[2] & ~bit_value;\n                }\n                else {\n                    DAT_080042c4[2] = DAT_080042c4[2] | bit_value;\n                }\n                if ((source[1] & 0x200000) == 0) {\n                    DAT_080042c4[3] = DAT_080042c4[3] & ~bit_value;\n                }\n                else {\n                    DAT_080042c4[3] = bit_value | DAT_080042c4[3];\n                }\n            }\n        }\n        index++;\n    } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "write_to_linked_list_0800288c",
                "param_1": "destination_address",
                "param_2": "data",
                "puVar1": "linked_list_index",
                "iVar2": "result",
                "uVar3": "return_value",
                "cVar4": "incremented_value",
                "uVar5": "undefined_value",
                "uVar6": "linked_list_size",
                "local_11": "data"
            },
            "code": "int write_to_linked_list_0800288c(int destination_address, char* source_address, int size) {\n    int result = 0;\n    result = write_to_linked_list_0800288c_08007ede(destination_address + 0x14, source_address, 1);\n    if (result != 0) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n\nint write_to_linked_list_0800288c(int param_1, char data) {\n    if (*PTR_DAT_08002908 == '\\0') {\n        if (write_to_linked_list_0800288c(param_1 + 0x14, &data, 1) == 0) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    else {\n        uint linked_list_size = (byte)*PTR_DAT_0800290c + 1;\n        if ((byte)*PTR_DAT_08002910 < linked_list_size) {\n            if (linked_list_size < 0x20) {\n                linked_list_size = 0x20;\n            }\n            int linked_list_item = allocate_and_insert_into_linked_list_08009908(*(int *)PTR_DAT_08002914, linked_list_size);\n            *(int *)PTR_DAT_08002914 = linked_list_item;\n            if (linked_list_item == 0) {\n                return 0;\n            }\n            else {\n                *PTR_DAT_08002910 = (undefined)linked_list_size;\n            }\n        }\n        if (*(int *)PTR_DAT_08002914 == 0) {\n            *(int *)(param_1 + 4) = 1;\n            return 0;\n        }\n        else {\n            *(char *)(*(int *)PTR_DAT_08002914 + (uint)(byte)*PTR_DAT_08002918) = data;\n            char* linked_list_index = PTR_DAT_08002918;\n            *linked_list_index = *linked_list_index + '\\x01';\n            *PTR_DAT_0800290c = *linked_list_index;\n            return 1;\n        }\n    }\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "write_to_linked_list_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_initialized_flag_and_return_function_pointer_if_set_0800010c",
                "param_1": "function_pointer",
                "*PTR_DAT_08000124": "*initialized_flag",
                "DAT_08000128": "global_variable",
                "PTR_FUN_0800012c": "function_pointer_to_return"
            },
            "code": "undefined* check_initialized_flag_and_return_function_pointer_if_set_0800010c(undefined* function_pointer){\\n    if (*PTR_DAT_08000124 == \"\\0\") {\\n        if (DAT_08000128 != 0) {\\n            function_pointer = PTR_FUN_0800012c;\\n        }\\n        *PTR_DAT_08000124 = 1;\\n    }\\n    return function_pointer;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_flag_and_return_function_pointer_if_set_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "copy_and_encode_data_08002e26",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "copy_value_to_pointer_08003154": "copy_value_to_pointer",
                "process_data_with_offset_08002ddc": "process_data_with_offset",
                "encode_and_call_08002df6": "encode_and_call"
            },
            "code": "void copy_and_encode_data_08002e26(int data_ptr, int data_value) {\n  *(int *)(data_ptr + 0xc0) = data_value;\n  copy_value_to_pointer(data_ptr + 0x40);\n  process_data_with_offset(data_ptr);\n  encode_and_call(data_ptr);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "copy_and_encode_data_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "validate_and_initialize_output_buffer_080036d8",
                "param_1": "input",
                "iVar1": "result",
                "PTR_DAT_0800371c": "ptr_data_1",
                "PTR_DAT_08003718": "ptr_data_2",
                "validate_input_and_initialize_output_buffer_08003fd8": "validate_input_and_initialize_output_buffer",
                "set_bits_at_position_08003f30": "set_bits_at_position"
            },
            "code": "int validate_and_initialize_output_buffer_080036d8(uint input) {\n    int result = 0;\n    uint factor = *(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n    result = validate_input_and_initialize_output_buffer_08003fd8(factor);\n    if (result != 0) {\n        return 1;\n    }\n    if (input > 0xf) {\n        return 1;\n    }\n    set_bits_at_position_08003f30(0xffffffff, input, 0);\n    *(uint *)PTR_DAT_08003720 = input;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "validate_and_initialize_output_buffer_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = find_value_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_08007438(param_1);\n  uVar3 = set_flag_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  set_bits_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007438"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_integer_index_080086e8",
                "param_1": "target_integer",
                "uVar1": "index"
            },
            "code": "uint find_integer_index_080086e8(int target_integer) {\n  uint index;\n  if (target_integer == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (index <= 4) {\n      if (target_integer == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "find_integer_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "get_integer_value_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "value"
            },
            "code": "void get_integer_value_0800a110(int *output, undefined4 input){\n    undefined *ptr = PTR_DAT_0800a12c;\n    *(undefined4 *)PTR_DAT_0800a12c = 0;\n    int value = get_one_08008850(input);\n    if ((value == -1) && (*(int *)ptr != 0)) {\n        *output = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "get_integer_value_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_if_data_valid_08003b8c",
                "param_1": "data_ptr",
                "iVar1": "current_data",
                "iVar2": "data_ptr_val",
                "get_data_from_ptr_dat_08003760": "get_current_data",
                "get_initial_data": "get_initial_data"
            },
            "code": "int check_if_data_valid_08003b8c(int *data_ptr) {\n  int data_ptr_val = *data_ptr;\n  if ((*(uint *)(data_ptr_val + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(data_ptr_val + 8) = *(uint *)(data_ptr_val + 8) & 0xfffffffe;\n  int initial_data = get_initial_data();\n  do {\n    if ((*(uint *)(*data_ptr + 8) & 1) == 0) {\n      return 0;\n    }\n    int current_data = get_current_data();\n  } while ((uint)(current_data - initial_data) < 3);\n  data_ptr[10] = data_ptr[10] | 0x10;\n  data_ptr[0xb] = data_ptr[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_if_data_valid_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_and_set_bits_080035b8",
                "iVar1": "result1",
                "uVar2": "input_value",
                "local_30": "constant1",
                "local_20": "constant2",
                "local_1c": "constant3",
                "local_14": "constant4",
                "local_10": "constant5",
                "local_c": "constant6",
                "local_54": "constant12",
                "local_4c": "output_value2",
                "local_44": "constant7",
                "local_40": "constant8",
                "local_3c": "constant9",
                "local_38": "constant10",
                "local_34": "constant11"
            },
            "code": "void initialize_and_set_bits_080035b8(void)\n{\n  int result1;\n  uint input_value;\n  uint constant1 = 2;\n  uint constant2 = 1;\n  uint constant3 = 0x10;\n  uint constant4 = 2;\n  uint constant5 = 0;\n  uint constant6 = 0x380000;\n  uint output_value[2];\n  uint output_value2;\n  uint constant7 = 0xf;\n  uint constant8 = 2;\n  uint constant9 = 0;\n  uint constant10 = 0x400;\n  uint constant11 = 0;\n  uint constant12[2] = {2, 0x8000};\n  result1 = FUNC_08005460(&constant1);\n  if (result1 != 0) {\n    infiniteLoop_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x88);\n  }\n  result1 = validate_and_calculate_080058ac(&constant7, &constant8, &constant9, &constant10, &constant11);\n  if (result1 != 0) {\n    infiniteLoop_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x95);\n  }\n  result1 = update_data_08005aa4(constant12, &output_value, &output_value2);\n  if (result1 != 0) {\n    infiniteLoop_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x9c);\n  }\n  input_value = get_value_from_pointer_08005a1c();\n  validate_input_and_initialize_output_buffer_08003fd8((uint)((ulonglong)DAT_08003650 * (ulonglong)input_value >> 0x26));\n  check_parameter_08004024(4);\n  set_bits_at_position_08003f30(0xffffffff,0);\n  return;\n}",
            "called": [
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c",
                "FUN_080058ac",
                "FUN_08004024",
                "FUN_08005aa4",
                "FUN_08003f30",
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_and_set_bits_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "processData_08001c18",
                "param_1": "device_address",
                "param_2": "data_size",
                "param_3": "expected_size",
                "param_4": "data",
                "puVar1": "data_ptr",
                "uVar2": "byte",
                "iVar3": "difference",
                "iVar4": "temp",
                "bVar5": "flag",
                "PTR_DAT_08001cbc": "linked_list",
                "initialize_data_08002a30": "initialize_data",
                "add_to_linked_list_08001bf8": "add_to_linked_list",
                "process_input_08002a58": "process_input",
                "processDataAndInsertIntoLinkedList_08002c14": "processDataAndInsertIntoLinkedList",
                "calculate_difference_between_pointers_0800270c": "calculate_difference_between_pointers",
                "encode_and_send_data_08002f14": "encode_and_send_data",
                "PTR_DAT_08001cc4": "error_message_1",
                "PTR_s_I2C__Too_many_bytes_received_08001cc0": "error_message_1_len",
                "PTR_DAT_08001ccc": "error_message_2",
                "PTR_s_I2C__Too_few_bytes_received_08001ccc": "error_message_2_len",
                "PTR_DAT_08001cc8": "data_buffer",
                "encode_and_send_08002f0a": "encode_and_send",
                "0x77": "encoded_data",
                "param_3 + 2U & 0xff": "encoded_data_len"
            },
            "code": "void processData_08001c18(uint8_t device_address, uint32_t data_size, int expected_size, uint8_t* data){\n  uint8_t* data_ptr = PTR_DAT_08001cbc;\n  if (data_size == 0xffffffff) {\n    data_size = 0;\n  }\n  else {\n    initialize_data(data_ptr, device_address);\n    add_to_PTR_DAT_08001cbc(data_size & 0xff);\n    process_input(data_ptr, data);\n  }\n  data_ptr = PTR_DAT_08001cbc;\n  processData_08001c18AndInsertIntoLinkedList(PTR_DAT_08001cbc, device_address, expected_size);\n  int difference = calculate_difference_between_pointers(data_ptr);\n  if (expected_size < difference) {\n    encode_and_send_data(PTR_DAT_08001cc4, PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    difference = calculate_difference_between_pointers(PTR_DAT_08001cbc);\n    if (difference < expected_size) {\n      encode_and_send_data(PTR_DAT_08001ccc, PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n  }\n  uint8_t* ptr = PTR_DAT_08001cc8;\n  *ptr = (char)device_address;\n  ptr[1] = (char)data_size;\n  int i = 0;\n  while(i < expected_size) {\n    if (calculate_difference_between_pointers(data_ptr) == 0) {\n      break;\n    }\n    uint8_t byte = readByteFromDataArray();\n    ptr[i + 2] = byte;\n    i++;\n  }\n  encode_and_send(encoded_data, encoded_data_len, ptr);\n  return;\n}",
            "called": [
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002f0a",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002c14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "processData_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "update_flags_and_set_bits_to_zero_08006460",
                "param_1": "data",
                "param_2": "value",
                "puVar1": "data_ptr",
                "*param_1": "*data",
                "puVar1[8]": "data_ptr[8]",
                "puVar1[0x11]": "data_ptr[17]",
                "*puVar1": "*data_ptr"
            },
            "code": "int update_flags_and_set_bits_to_zero_08006460(uint **data, int value){\n  uint *data_ptr = *data;\n  int flags_1 = data_ptr[8] & 0x1111;\n  int flags_2 = data_ptr[8] & 0x444;\n  if (flags_1 == 0 && flags_2 == 0) {\n    data_ptr[17] &= 0xffff7fff;\n  }\n  if (flags_1 == 0 && flags_2 == 0) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_flags_and_set_bits_to_zero_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046_08004046",
                "do_nothing_08004044": "do_nothing_08004044"
            },
            "code": "void do_nothing_and_return_08004046_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "check_data_08008880_08008880",
                "param_1": "data_index",
                "bVar1": "is_valid_index",
                "cVar2": "data_value",
                "uVar3": "data_validity_check_result",
                "uVar4": "data_shift_amount"
            },
            "code": "uint check_data_08008880_08008880(uint data_index) {\n  bool is_valid_index;\n  char data_value;\n  uint data_validity_check_result;\n  uint data_shift_amount;\n  \n  if (data_index < 0xe) {\n    if (data_index + 0x2e < 0x3c) {\n      is_valid_index = true;\n    }\n    else {\n      is_valid_index = false;\n    }\n  }\n  else {\n    is_valid_index = data_index < 0x3c;\n  }\n  if (is_valid_index) {\n    if (data_index < 0xe) {\n      data_index = data_index + 0x2e;\n    }\n    data_value = PTR_DAT_080088d8[data_index];\n  }\n  else {\n    data_value = -1;\n  }\n  if (data_value == -1) {\n    data_validity_check_result = 0;\n  }\n  else {\n    data_validity_check_result = check_data_validity_08006d80();\n    data_shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (data_shift_amount != 0xc) {\n      if (data_shift_amount < 0xc) {\n        return data_validity_check_result >> (0xc - data_shift_amount & 0xff);\n      }\n      return data_validity_check_result << (data_shift_amount - 0xc & 0xff);\n    }\n  }\n  return data_validity_check_result;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "check_data_08008880_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "param_1": "input_parameter",
                "uVar1": "function_return_value",
                "process_input_08003474": "process_input_helper_function"
            },
            "code": "void process_input_08002ed2(uint8_t param_1)\n{\n  uint8_t input_value;\n  uint32_t function_pointer = **(uint32_t **)(param_1 + 0xc0);\n  uint32_t function_address = *(uint32_t *)(function_pointer + 0xc);\n  uint32_t function = *(uint32_t *)function_address;\n  uint32_t return_value = (*(uint32_t (*)())function)();\n  if (return_value != 0xffffffff) {\n    process_input_08002ed2_08003474(param_1 + 0x44,return_value & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_input_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "first_num",
                "param_2": "second_num"
            },
            "code": "int compare_and_return_080073ae(int first_num, int second_num) {\n    if (first_num != second_num) {\n        if (first_num == 0) {\n            return second_num;\n        }\n        if (second_num == 0) {\n            return first_num;\n        }\n        first_num = 0;\n    }\n    return first_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "value",
                "uVar1": "data",
                "PTR_DAT_080004c8": "bit_array",
                "PTR_DAT_080004cc": "is_data_checked",
                "PTR_DAT_080004d0": "server_data"
            },
            "code": "void set_bit_08000488(uint bit_index, int value) {\n  if (bit_index < 0xe) {\n    if (value == 0) {\n      *PTR_DAT_080004c8 &= ~(1 << (bit_index & 0xff));\n      return;\n    }\n    *PTR_DAT_080004c8 = 1 << (bit_index & 0xff) | *PTR_DAT_080004c8;\n    if (!PTR_DAT_080004cc) {\n      uint data = check_data();\n      send_data_to_server_if_possible(data);\n      return;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_bits_of_uint_08003f0c",
                "param_1": "input",
                "*(uint *)(DAT_08003f2c + 0xc)": "*data_ptr",
                "0xf8ff": "mask",
                "0xc": "shift_amount",
                "(param_1 & 7)": "(input & 7)",
                "(param_1 & 7) << 8 | *(uint *)(DAT_08003f2c + 0xc) & 0xf8ff | 0x5fa0000": "new_value"
            },
            "code": "void update_bits_of_uint_08003f0c(uint input)\n{\n    uint* data_ptr = (uint*)(DAT_08003f2c + 0xc);\n    uint mask = 0xf8ff;\n    uint shift_amount = 8;\n    uint (param_1 & 7) << 8 | *(uint *)(DAT_08003f2c + 0xc) & 0xf8ff | 0x5fa0000 = (input & 7) << shift_amount | (*(uint *)(DAT_08003f2c + 0xc) & mask) | 0x5fa0000;\n    *(uint *)(DAT_08003f2c + 0xc) = (param_1 & 7) << 8 | *(uint *)(DAT_08003f2c + 0xc) & 0xf8ff | 0x5fa0000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_bits_of_uint_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "process_server_data_08008f1c",
                "process_and_encode_data_08001b48": "process_and_encode_data",
                "process_data_from_server_080022f8": "process_data_from_server",
                "calculate_resultant_value_if_data_present_08008bf4": "calculate_resultant_value_if_data_present",
                "DAT_08008f38": "data_not_ready"
            },
            "code": "void process_server_data_08008f1c(void)\n{\n  do_nothing();\n  process_and_encode_data();\n  do {\n    do {\n      process_data_from_server();\n    } while (DAT_08008f38);\n    calculate_resultant_value_if_data_present();\n  } while( true );\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "process_server_data_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "validate_and_calculate_080058ac",
                "param_1": "input",
                "param_2": "input_size",
                "puVar1": "data_ptr",
                "iVar2": "elapsed_time",
                "iVar3": "start_time",
                "uVar4": "calculated_value",
                "DAT_08005a0c": "original_data_ptr",
                "DAT_08005a10": "output_data_ptr",
                "PTR_DAT_08005a18": "output_buffer_ptr",
                "PTR_DAT_08005a14": "output_buffer_shift"
            },
            "code": "uint32_t validate_and_calculate_080058ac(uint32_t *input, uint32_t input_size)\\n\\\n{\\n\\\n  uint32_t *data_ptr;\\n\\\n  int32_t elapsed_time, start_time;\\n\\\n  uint32_t calculated_value;\\n\\\n  data_ptr = DAT_08005a0c;\\n\\\n  if (((*DAT_08005a0c & 7) < input_size) &&\\n\\\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_size, input_size != (*data_ptr & 7))) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  if ((*input & 2) != 0) {\\n\\\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | input[2];\\n\\\n  }\\n\\\n  if ((*input & 1) != 0) {\\n\\\n    uint32_t input_value = input[1];\\n\\\n    if (input_value == 1) {\\n\\\n      if ((*DAT_08005a10 & 0x20000) == 0) {\\n\\\n        return 1;\\n\\\n      }\\n\\\n    }\\n\\\n    else if ((input_value != 2) && ((*DAT_08005a10 & 2) == 0)) {\\n\\\n      return 1;\\n\\\n    }\\n\\\n    DAT_08005a10[1] = input_value | DAT_08005a10[1] & 0xfffffffc;\\n\\\n    start_time = get_current_time();\\n\\\n    if (input[1] == 1) {\\n\\\n      while ((DAT_08005a10[1] & 0xc) != 4) {\\n\\\n        elapsed_time = get_elapsed_time(start_time);\\n\\\n        if (5000 < elapsed_time) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else if (input[1] == 2) {\\n\\\n      while ((DAT_08005a10[1] & 0xc) != 8) {\\n\\\n        elapsed_time = get_elapsed_time(start_time);\\n\\\n        if (5000 < elapsed_time) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else {\\n\\\n      while ((DAT_08005a10[1] & 0xc) != 0) {\\n\\\n        elapsed_time = get_elapsed_time(start_time);\\n\\\n        if (5000 < elapsed_time) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  data_ptr = DAT_08005a0c;\\n\\\n  if ((input_size < (*DAT_08005a0c & 7)) &&\\n\\\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_size, input_size != (*data_ptr & 7))) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  if ((*input & 4) != 0) {\\n\\\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | input[3];\\n\\\n  }\\n\\\n  if ((*input & 8) != 0) {\\n\\\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | input[4] << 3;\\n\\\n  }\\n\\\n  calculated_value = calculate_value();\\n\\\n  *(uint32_t *)PTR_DAT_08005a18 = calculated_value >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\\n\\\n  validate_and_initialize_output_buffer(0xf);\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "validate_and_calculate_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08006c48": "data_ptr",
                "DAT_08006c4c": "return_value_0",
                "DAT_08006c50": "return_value_1",
                "DAT_08006c54": "return_value_2",
                "DAT_08006c58": "return_value_3",
                "DAT_08006c5c": "return_value_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag)\n{\n  uint32_t* DAT_08006c48 = (uint32_t*)DAT_08006c48;\n  switch(flag) {\n    case 0:\n      DAT_08006c48[6] |= 0x4;\n      return DAT_08006c4c;\n    case 1:\n      DAT_08006c48[6] |= 0x8;\n      return DAT_08006c50;\n    case 2:\n      DAT_08006c48[6] |= 0x10;\n      return DAT_08006c54;\n    case 3:\n      DAT_08006c48[6] |= 0x20;\n      return DAT_08006c58;\n    case 4:\n      DAT_08006c48[6] |= 0x40;\n      return DAT_08006c5c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "flag_ptr",
                "*param_1": "flag_value",
                "DAT_080074d0": "FLAG_1_PTR",
                "DAT_080074d4": "FLAG_3_PTR",
                "DAT_080074d8": "FLAG_4_PTR",
                "DAT_080074dc": "FLAGS_PTR",
                "PTR_DAT_080074dc": "FLAGS_PTR_PTR",
                "*PTR_DAT_080074dc": "FLAG_PTR_PTR",
                "_DAT_4002101c": "FLAG_2_PTR",
                "0x40000000": "FLAG_2",
                "0xe418": "FLAG_1_BIT",
                "0x20c1c": "FLAG_3_BIT",
                "0x2081c": "FLAG_4_BIT"
            },
            "code": "void set_flags_08007438(int *flag_ptr)\n{\n    int flag_value = *flag_ptr;\n\n    if (flag_value == FLAG_1)\n    {\n        *DAT_080074d0 |= FLAG_1_BIT;\n        *DAT_080074d0_PTR = flag_ptr;\n    }\n\n    if (flag_value == FLAG_2)\n    {\n        *_DAT_4002101c |= FLAG_2_BIT;\n        *_DAT_4002101c_PTR = flag_ptr;\n    }\n\n    if (flag_value == FLAG_3)\n    {\n        *DAT_080074d4 |= FLAG_3_BIT;\n        *DAT_080074d4_PTR = flag_ptr;\n    }\n\n    if (flag_value == FLAG_4)\n    {\n        *DAT_080074d8 |= FLAG_4_BIT;\n        *DAT_080074d8_PTR = flag_ptr;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "set_params_08004aec",
                "param_1": "params",
                "PTR_DAT_08004b7c": "ptr_dat",
                "DAT_08004b7c": "dat",
                "uint": "unsigned_int"
            },
            "code": "int set_params_08004aec(uint **params)\n{\n    if (((*params)[11] == (uint *)0x4) || ((*params)[11] == (uint *)0x8)) && (*(char *)((int)params + 0x3d) == '(')) {\n        (*params)[11] = PTR_DAT_08004b7c;\n        (*params)[0] = (*params)[0] & 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params = **params & 0xfffffbff;\n        (*params)[12] = (uint *)0x0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        *(undefined *)((int)params + 0x3e) = 0;\n        check_and_call_function_08007ff0();\n    }\n    else if (*(char *)((int)params + 0x3d) == '!') {\n        (*params)[11] = PTR_DAT_08004b7c;\n        (*params)[12] = (uint *)0x21;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        *(undefined *)((int)params + 0x3e) = 0;\n        (*params)[0] = (*params)[0] & 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params = **params & 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else {\n        (*params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "set_params_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "return_one_0800887c"
            },
            "code": "int return_one_0800887c() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "process_input_08004728",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "param_ptr",
                "param_4": "flag",
                "uVar1": "result",
                "puVar2": "current_ptr",
                "local_c": "counter"
            },
            "code": "uint32_t process_input_08004728(uint32_t **input_ptr, uint32_t *data_ptr, uint32_t *param_ptr, uint16_t flag) {\n    uint32_t result;\n    uint32_t *current_ptr;\n    int counter;\n    if ((*input_ptr)[0x3d] == ' ') {\n        counter = (uint32_t)(((uint64_t)DAT_080047ec * (uint64_t)((*input_ptr)[2] >> 3)) >> 0x28) * 0x19;\n        do {\n            if (counter == 0) {\n                input_ptr[0xc] = NULL;\n                (*input_ptr)[0x3d] = 0x20;\n                input_ptr[0xf] = 0;\n                return 3;\n            }\n            current_ptr = *input_ptr;\n            counter--;\n        } while ((current_ptr[6] & 2) != 0);\n        if ((*input_ptr)[0xf] == 0x01) {\n            result = 2;\n        }\n        else {\n            input_ptr[0xf] = 1;\n            if ((*current_ptr & 1) == 0) {\n                *current_ptr |= 1;\n            }\n            **input_ptr &= 0xfffff7ff;\n            (*input_ptr)[0x3d] = 0x21;\n            (*input_ptr)[0x3e] = 0x10;\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = param_ptr;\n            (*input_ptr)[0x2a] = flag;\n            input_ptr[0xb] = DAT_080047f0;\n            input_ptr[10] = (*input_ptr)[0x2a];\n            input_ptr[0x11] = data_ptr;\n            **input_ptr |= 0x100;\n            input_ptr[0xf] = 0;\n            (*input_ptr)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "process_input_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_destination_08007ede",
                "param_1": "destination_address",
                "param_2": "source_address",
                "param_3": "data_size",
                "uVar1": "index"
            },
            "code": "int copy_data_to_destination_08007ede(int destination_address, int source_address, uint data_size)\n{\n  uint index;\n  if (data_size > 0x20) {\n    return 2;\n  }\n  for (index = 0; index < data_size; index++) {\n    *(undefined *)(destination_address + index + 0x68) = *(undefined *)(source_address + index);\n    *(char *)(destination_address + 0x88) = *(char *)(destination_address + 0x88) + 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_destination_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "validate_input_and_set_bits_0800863c",
                "param_1": "input_address",
                "param_2": "value",
                "param_3": "array_index",
                "param_4": "bit_position",
                "iVar1": "is_valid",
                "is_valid_input_080085b8": "is_valid_input",
                "uVar2": "index",
                "*(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4)": "*(int *)(array_of_inputs + index * 4)",
                "*(int *)(PTR_DAT_0800868c + uVar2 * 4)": "*(int *)(array_of_input_addresses + index * 4)",
                "set_bits_at_position_08003f30": "set_bits_at_position",
                "*(char *)(param_1 + 0x5a)": "*(char *)(input_address + 0x5a)",
                "set_bit_in_array_08003f94": "set_bit_in_array",
                "validate_input_080068d6": "validate_input",
                "*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(int *)(array_of_inputs + index * 4)"
            },
            "code": "void validate_input_and_set_bits_0800863c(int input_address, int value, int array_index, int bit_position){\n  int is_valid = is_valid_input();\n  if (is_valid){\n    uint index = (uint)*(byte *)(input_address + 0x44);\n    *(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4) = value;\n    *(int *)(PTR_DAT_0800868c + uVar2 * 4) = input_address;\n    set_bits_at_position((int)*(char *)(input_address + 0x5a),0,1,index,bit_position);\n    set_bit_in_array((int)*(char *)(input_address + 0x5a));\n    validate_input(*(undefined4 *)(PTR_DAT_08008688 + uVar2 * 4),input_address + 0x45,1);\n  }\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_bits_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_one_thunk_0800887c"
            },
            "code": "int get_one_thunk_0800887c() {\n    return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_memory_flags_080074e0",
                "param_1": "memory_address",
                "DAT_08007534": "flag_one",
                "DAT_08007538": "flag_three",
                "DAT_0800753c": "flag_four"
            },
            "code": "void update_memory_flags_080074e0(int *memory_address)\n{\n    int DAT_08007534 = 0x800;\n    int flag_two = 0x1;\n    int DAT_08007538 = 0x2;\n    int DAT_0800753c = 0x4;\n\n    if (*memory_address == DAT_08007534) {\n        *(uint *)(PTR_DAT_08007540 + 0x18) &= 0xfffff7ff;\n    }\n    if (*memory_address == 0x40000000) {\n        *(uint *)(PTR_DAT_08007540 + 0x1c) &= 0xfffffffe;\n    }\n    if (*memory_address == DAT_08007538) {\n        *(uint *)(PTR_DAT_08007540 + 0x1c) &= 0xfffffffd;\n    }\n    if (*memory_address == DAT_0800753c) {\n        *(uint *)(PTR_DAT_08007540 + 0x1c) &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": false,
            "current_name": "update_memory_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_function_if_not_null_080073c0",
                "PTR_DAT_080073d0": "function_pointer_data_pointer",
                "PTR_DAT_080073d4": "function_argument_data_pointer",
                "code": "function_pointer",
                "undefined4": "function_argument"
            },
            "code": "void execute_function_if_not_null_080073c0() {\n  code* function_pointer = *(code**)PTR_DAT_080073d0;\n  if (function_pointer != nullptr) {\n    function_pointer(*(undefined4*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "update_config_080084b0",
                "PTR_DAT_080084f0": "config_keys",
                "PTR_DAT_080084f4": "config_params",
                "PTR_DAT_080084f8": "config_values",
                "PTR_DAT_080084fc": "config_data",
                "cVar1": "config_key",
                "iVar4": "param_check_result",
                "uVar5": "param_key",
                "uVar3": "config_value",
                "puVar2": "config_ptr"
            },
            "code": "void update_config_080084b0(void)\n{\n  char config_key;\n  undefined *config_ptr;\n  undefined config_value;\n  int param_check_result;\n  undefined4 param_key;\n  \n  config_key = PTR_DAT_080084f0[1];\n  param_check_result = check_param(config_key, PTR_DAT_080084f4);\n  if (param_check_result != 0) {\n    param_key = check_param(config_key, PTR_DAT_080084f4);\n    config_value = get_value_by_key(param_key, PTR_DAT_080084f8);\n    config_ptr = PTR_DAT_080084fc;\n    PTR_DAT_080084fc[0x59] = config_value;\n    PTR_DAT_080084fc[0x58] = config_key;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x54) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x4c) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x50) = 0;\n    update_PTR_DAT_080084fc(config_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "update_config_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_value_and_set_flag_08004050",
                "param_1": "param_array",
                "uVar1": "value",
                "puVar2": "ptr_value"
            },
            "code": "uint get_value_and_set_flag_08004050(uint **param_array)\n{\n  uint value;\n  uint *ptr_value = *param_array;\n  if (*(char *)((int)param_array + 0x21) != '\\x02') {\n    param_array[0xe] = (uint *)0x4;\n    return 1;\n  }\n  value = **param_array & 0xfffffff1;\n  value = value & 0xfffffffe;\n  if (ptr_value == PTR_DAT_080040e0) {\n    value = 1;\n  }\n  else if (ptr_value == PTR_DAT_080040e0 + 5) {\n    value = 0x10;\n  }\n  else if (ptr_value == PTR_DAT_080040e0 + 10) {\n    value = 0x100;\n  }\n  else if (ptr_value == PTR_DAT_080040e0 + 0xf) {\n    value = 0x1000;\n  }\n  else if (ptr_value == PTR_DAT_080040e0 + 0x14) {\n    value = 0x10000;\n  }\n  else if (ptr_value == PTR_DAT_080040e0 + 0x19) {\n    value = 0x100000;\n  }\n  else {\n    value = 0x1000000;\n  }\n  *(uint *)(PTR_DAT_080040e4 + 4) = value;\n  *(char *)((int)param_array + 0x21) = 1;\n  *(uint *)(param_array + 8) = 0;\n  if (param_array[0xd] != (uint *)0x0) {\n    (*(void (*)())param_array[0xd])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_value_and_set_flag_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "set_pointer_and_values_if_param_1_is_1_and_param_2_is_0xffff_08008e14",
                "param_1": "first_param",
                "param_2": "second_param",
                "PTR_DAT_08008e3c": "PTR_DAT_08008e3c",
                "set_pointer_and_values_08008df8": "set_pointer_and_values"
            },
            "code": "void set_pointer_and_values_if_param_1_is_1_and_param_2_is_0xffff_08008e14(int first_param, int second_param) {\n  if ((first_param == 1) && (second_param == 0xffff)) {\n    set_pointer_and_values(PTR_DAT_08008e3c, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "set_pointer_and_values_if_param_1_is_1_and_param_2_is_0xffff_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_value_shifted_by_pointer_08005a28",
                "uVar1": "value",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "PTR_DAT_08005a44": "pointer_array",
                "DAT_08005a40": "data_array",
                "index": "shifted_index",
                "shifted_value": "shifted_index_value",
                "result": "shifted_value_result"
            },
            "code": "uint get_value_shifted_by_pointer_08005a28(void)\n{\n    uint value = get_value_from_pointer();\n    uint index = *(int *)(DAT_08005a40 + 4) << 0x15;\n    uint shifted_value = index >> 0x1d;\n    uint result = value >> PTR_DAT_08005a44[shifted_value];\n    return result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_value_shifted_by_pointer_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "calculate_length_080095a8",
                "param_1": "start",
                "param_2": "data",
                "param_3": "length",
                "param_4": "end",
                "param_5": "callback",
                "iVar1": "result",
                "uVar2": "max_length",
                "uVar3": "data_length",
                "bVar4": "is_four",
                "i": "offset",
                "length_offset": "length_offset"
            },
            "code": "uint32_t calculate_length_080095a8(uint32_t start, uint32_t *data, uint32_t *length, uint32_t end, code *callback)\n{\n  uint32_t max_length = data[4];\n  if (max_length < data[2]) {\n    max_length = data[2];\n  }\n  *length = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *length = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *length = *length + 2;\n  }\n  uint32_t i = *data & 6;\n  if (i == 0) {\n    for (; (int)i < (int)(data[3] - *length); i++) {\n      int32_t result = (*callback)(start, end, (int)data + 0x19, 1);\n      if (result == -1) {\n        return UINT32_MAX;\n      }\n    }\n  }\n  uint32_t offset = (uint32_t)*(byte *)((int)data + 0x43);\n  if (offset != 0) {\n    offset = 1;\n  }\n  uint32_t length_offset = offset;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + offset + 0x43) = 0x30;\n    length_offset = offset + 2;\n    *(undefined *)((int)data + offset + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  int32_t result = (*callback)(start, end, (int)data + 0x43, length_offset);\n  if (result != -1) {\n    uint32_t data_length = data[3];\n    bool is_four = (*data & 6) != 4;\n    if (is_four) {\n      data_length = 0;\n    }\n    uint32_t length_offset = 0;\n    if (!is_four) {\n      data_length = data_length - *length;\n    }\n    if (!is_four) {\n      data_length = data_length & ~((int)data_length >> 0x1f);\n    }\n    if (max_length < data[2]) {\n      data_length = data_length + (data[2] - data[4]);\n    }\n    while (true) {\n      if (data_length == length_offset) {\n        return 0;\n      }\n      int32_t result = (*callback)(start, end, (int)data + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      length_offset++;\n    }\n  }\n  return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "calculate_length_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "check_and_process_data_08003002",
                "param_1": "input_data",
                "process_data_08008990": "process_data",
                "do_something_multiple_times_08002fca": "do_something_multiple_times",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void check_and_process_data_08003002(int input_data)\n{\n    char* data = (char*)(input_data + 0x1f8);\n    if (*data != '\\0') {\n        return;\n    }\n    process_data(0xd, 1);\n    do_something_multiple_times(input_data, 0xd, 2, 0x28, 0xd2);\n    do_nothing(0xfa);\n    do_something_multiple_times(input_data, 0xd, 5, 0x28, 0xd2);\n    do_nothing(0x7d);\n    return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "check_and_process_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "verify_data_08003bd8",
                "param_1": "data_array",
                "iVar1": "is_valid",
                "uVar2": "data_bitwise_or",
                "uVar3": "data_flags",
                "check_if_data_valid_08003b8c": "check_if_data_valid",
                "DAT_08003ce0": "data_bitwise_and_1",
                "DAT_08003ce4": "data_bitwise_and_2"
            },
            "code": "int verify_data_08003bd8(int *data_array)\n{\n  int is_valid;\n  uint data_bitwise_or, data_bitwise_and, data_flags, data_value;\n\n  if (data_array == NULL) {\n    return 1;\n  }\n\n  if (data_array[10] == 0) {\n    data_array[11] = 0;\n    *(undefined *)(data_array + 9) = 0;\n    set_data_flag_and_bits();\n  }\n\n  is_valid = check_if_data_valid(data_array);\n  data_flags = data_array[10] & 0x10;\n\n  if ((data_flags == 0) && (is_valid == 0)) {\n    data_array[10] = data_array[10] & 0xffffeefdU | 2;\n    data_bitwise_or = data_array[1] | data_array[7] | data_array[3] << 1;\n\n    if (data_array[2] == 0x100 || data_array[2] == 1) {\n      data_value = 0x100;\n    }\n    else {\n      data_value = 0;\n    }\n\n    if (data_array[5] == 1) {\n      if (data_array[3] == 0) {\n        data_value = data_value | (data_array[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        data_array[10] = data_array[10] | 0x20;\n        data_array[11] = data_array[11] | 1;\n      }\n    }\n\n    *(uint *)(*data_array + 4) = data_value | *(uint *)(*data_array + 4) & 0xffff16ff;\n    data_bitwise_and = DAT_08003ce0 & *(uint *)(*data_array + 8) | data_bitwise_or;\n    *(uint *)(*data_array + 8) = data_bitwise_and;\n\n    if (data_array[2] == 0x100 || data_array[2] == 1) {\n      data_value = (data_array[4] + -1) * 0x100000;\n    }\n    else {\n      data_value = 0;\n    }\n\n    *(uint *)(*data_array + 0x2c) = data_value | *(uint *)(*data_array + 0x2c) & 0xff0fffff;\n\n    if (data_bitwise_or != (DAT_08003ce4 & *(uint *)(*data_array + 8))) {\n      data_array[10] = data_array[10] & 0xffffffedU | 0x10;\n      data_array[11] = data_array[11] | 1;\n      return 1;\n    }\n\n    data_array[11] = 0;\n    data_array[10] = data_array[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n\n  data_array[10] = data_array[10] | 0x10;\n  return 1;\n}",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "verify_data_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_memory_blocks_08009d50",
                "param_1": "block_address",
                "uVar1": "unused_block_address",
                "iVar2": "current_block_address",
                "bVar3": "is_current_block_address_same_as_param_1"
            },
            "code": "void initialize_memory_blocks_08009d50(int block_address)\n{\n    undefined4 unused_block_address;\n    int current_block_address;\n    bool is_current_block_address_same_as_param_1;\n    \n    if (*(int *)(block_address + 0x18) == 0) {\n        *(undefined4 *)(block_address + 0x48) = 0;\n        *(undefined4 *)(block_address + 0x4c) = 0;\n        *(undefined4 *)(block_address + 0x50) = 0;\n        current_block_address = *(int *)PTR_PTR_DAT_08009da8;\n        *(undefined **)(block_address + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n        is_current_block_address_same_as_param_1 = block_address == current_block_address;\n        if (is_current_block_address_same_as_param_1) {\n            current_block_address = 1;\n        }\n        if (is_current_block_address_same_as_param_1) {\n            *(int *)(block_address + 0x18) = current_block_address;\n        }\n        unused_block_address = findUnusedMemoryBlock_08009db0();\n        *(undefined4 *)(block_address + 4) = unused_block_address;\n        unused_block_address = findUnusedMemoryBlock_08009db0(block_address);\n        *(undefined4 *)(block_address + 8) = unused_block_address;\n        unused_block_address = findUnusedMemoryBlock_08009db0(block_address);\n        *(undefined4 *)(block_address + 0xc) = unused_block_address;\n        initialize_data_08009cdc(*(undefined4 *)(block_address + 4), 4, 0);\n        initialize_data_08009cdc(*(undefined4 *)(block_address + 8), 9, 1);\n        initialize_data_08009cdc(*(undefined4 *)(block_address + 0xc), 0x12, 2);\n        *(undefined4 *)(block_address + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_memory_blocks_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_values_at_offsets_08003366",
                "param_1": "base_address",
                "param_2": "offset1",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_at_offsets_08003366(int base_address, int offset1, int offset2, int value1, int value2) {\n  if (offset1 == 0x71) {\n    *(undefined4 *)(base_address + 0x68) = value1;\n    *(undefined4 *)(base_address + 0x40) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_at_offsets_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_buffer_080091b0",
                "param_1": "dst_offset",
                "param_2": "dst_buffer",
                "param_3": "src_size",
                "puVar1": "dst_ptr",
                "puVar2": "src_ptr"
            },
            "code": "void copy_buffer_080091b0(int dst_offset, undefined *dst_buffer, int src_size) {\n  undefined *dst_ptr;\n  undefined *src_ptr;\n  dst_ptr = (undefined *)(dst_offset - 1);\n  src_ptr = dst_buffer + src_size;\n  for (; dst_buffer != src_ptr; dst_buffer = dst_buffer + 1) {\n    dst_ptr = dst_ptr + 1;\n    *dst_ptr = *dst_buffer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": false,
            "current_name": "copy_buffer_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "calculate_value_for_param_08009108",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "longlong calculate_value_for_param_08009108(uint32_t value1, uint32_t value2) {\n  if (DAT_08009120 != 0) {\n    return CONCAT44(value1, 2);\n  }\n  return (unsigned long long)value2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "calculate_value_for_param_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "execute_and_update_flags_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_DAT_0800a228": "flag_ptr_1",
                "PTR_DAT_0800a22c": "flag_ptr_2",
                "PTR_DAT_0800a230": "flag_ptr_3",
                "PTR_DAT_0800a234": "flag_ptr_4",
                "PTR_DAT_0800a238": "flag_ptr_5",
                "PTR_DAT_0800a23c": "flag_ptr_6",
                "PTR_DAT_0800a240": "flag_ptr_7",
                "PTR_DAT_0800a244": "flag_ptr_8",
                "PTR_DAT_0800a248": "flag_ptr_9",
                "PTR_DAT_0800a24c": "flag_ptr_10",
                "PTR_DAT_0800a250": "flag_ptr_11",
                "PTR_DAT_0800a254": "flag_ptr_12",
                "execute_function_08009b5c": "execute_function_08009b5c",
                "update_flag": "update_flag"
            },
            "code": "void execute_and_update_flags_0800a18c(void)\n{\n  code *jump_table_ptr;\n  jump_table_ptr = execute_and_update_flags_0800a18c;\n  execute_function_08009b5c();\n  update_flag(PTR_DAT_0800a228);\n  update_flag(PTR_DAT_0800a22c);\n  update_flag(PTR_DAT_0800a230);\n  update_flag(PTR_DAT_0800a234);\n  update_flag(PTR_DAT_0800a238);\n  update_flag(PTR_DAT_0800a23c);\n  update_flag(PTR_DAT_0800a240);\n  update_flag(PTR_DAT_0800a244);\n  update_flag(PTR_DAT_0800a248);\n  update_flag(PTR_DAT_0800a24c);\n  update_flag(PTR_DAT_0800a250);\n  update_flag(PTR_DAT_0800a254);\n  (*jump_table_ptr)();\n  return;\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "execute_and_update_flags_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "<original_function_name>": "allocate_and_insert_into_linked_list",
                "<param_1>": "buffer_address",
                "<param_2>": "buffer_size",
                "uVar1": "memory_block_size",
                "uVar2": "allocated_block_address",
                "uVar3": "calculated_value",
                "FUN_08009908": "allocate_and_insert_into_linked_list_08009908"
            },
            "code": "uint allocate_and_insert_into_linked_list_08009908(uint buffer_address, uint buffer_size){\n                      undefined4 memory_block_size;\n                      uint allocated_block_address;\n                      uint calculated_value;\n                      memory_block_size = *(undefined4 *)PTR_PTR_DAT_08009914;\n                      if(buffer_address != 0){\n                        if(buffer_size == 0){\n                          insert_into_linked_list_080091d8();\n                          allocated_block_address = buffer_size;\n                        }else{\n                          calculated_value = calculate_value_0800a154();\n                          allocated_block_address = buffer_address;\n                          if(calculated_value < buffer_size){\n                            allocated_block_address = allocate_memory_block_08009270(memory_block_size, buffer_size);\n                            if(allocated_block_address != 0){\n                              copy_buffer_080091b0(allocated_block_address, buffer_address, buffer_size);\n                              insert_into_linked_list_080091d8(memory_block_size, buffer_address);\n                            }\n                          }\n                        }\n                        return allocated_block_address;\n                      }\n                      allocated_block_address = allocate_memory_block_08009270(memory_block_size, buffer_size, buffer_size, PTR_PTR_DAT_08009914);\n                      return allocated_block_address;\n                    }",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "allocate_and_insert_into_linked_list_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "set_value_at_address_if_param_not_zero_08008a24",
                "param_1": "address",
                "param_2": "value",
                "param_3": "param",
                "param_4": "unused",
                "iVar1": "bit_value",
                "uVar2": "data",
                "puVar3": "bit_mask_ptr",
                "uVar4": "bit_mask"
            },
            "code": "void set_value_at_address_if_param_not_zero_08008a24(uint address, uint value, uint param) {\n  uint bitMask;\n  uint data = 0xffffffff;\n  if (address < 0x3c) {\n    bitMask = (uint)(char)PTR_DAT_08008a64[address];\n  }\n  else {\n    bitMask = 0xffffffff;\n  }\n  if ((bitMask != 0xffffffff) && (get_bit_at_position(bitMask, PTR_DAT_08008a68, param, PTR_DAT_08008a64, PTR_DAT_08008a64) != 0)) {\n    data = get_data_at_index((bitMask << 0x18) >> 0x1c);\n    bitMask = 1 << (bitMask & 0xf) & 0xffff;\n    set_value_at_address_if_param_not_zero_08008a24_080072d8(data, bitMask, value);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_080005f8",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "set_value_at_address_if_param_not_zero_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "extract_pointer_data_and_return_08008abc",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void extract_pointer_data_and_return_08008abc(void)\n{\n  extract_data_from_pointer_data_0800723c();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "extract_pointer_data_and_return_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "processDataAndInsertIntoLinkedList_08002b68",
                "param_1": "listHead",
                "param_2": "listSize",
                "param_3": "data",
                "param_4": "dataSize",
                "param_5": "inputByte",
                "iVar1": "index",
                "uVar2": "inputByteAsUint",
                "uVar3": "dataSize"
            },
            "code": "int processDataAndInsertIntoLinkedList_08002b68(int *listHead, uint32_t listSize, int *data, uint32_t dataSize, uint8_t inputByte) {\n  int index = 0;\n  uint32_t inputByteAsUint = (uint32_t)inputByte;\n  if (listHead[4] == 0) {\n    return 0;\n  }\n  allocateAndInsertIntoLinkedList(data);\n  if (*listHead != 0) {\n    if (inputByteAsUint != 0) {\n      initializeData(listHead, listSize);\n      if (3 < inputByteAsUint) {\n        inputByteAsUint = 3;\n      }\n      while (true) {\n        if (inputByteAsUint == 0) break;\n        (**(code **)*listHead)(listHead, dataSize >> ((inputByteAsUint - 1 & 0x1f) << 3) & 0xff);\n        inputByteAsUint = inputByteAsUint - 1 & 0xff;\n      }\n      processInput(listHead, 0);\n    }\n    index = processData(listHead + 5, (listSize & 0x7f) << 1, *PTR_DAT_08002bf4, data, dataSize);\n    if (index != 0) {\n      dataSize = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)dataSize;\n    return dataSize;\n  }\n  listHead[1] = 1;\n  return 0;\n}",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "processDataAndInsertIntoLinkedList_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "PTR_DAT_080005f0": "memory_start",
                "PTR_DAT_080005f4": "memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 255;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_set_flags_08008020",
                "param_1": "input_param",
                "iVar1": "var1",
                "decrement_by_four_08007f78": "get_decremented_value",
                "set_flags_080049e0": "set_flags"
            },
            "code": "void check_and_set_flags_08008020(undefined4 input_param)\\n{\\n  int var1;\\n  var1 = get_decremented_value();\\n  if (*(char *)(var1 + 0x5d) == \"\\0\") {\\n    set_flags(input_param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "data2",
                "iVar2": "value1",
                "iVar3": "value3",
                "DAT_08005df0": "specialDataAddress",
                "mask1": "0xffffefff",
                "mask2": "0xffffbfff",
                "mask3": "0xffff8cff",
                "shift1": "6",
                "shift2": "8",
                "shift3": "12",
                "data1": "data1",
                "data2": "data2",
                "data3": "data3",
                "data4": "data4",
                "value1": "value1",
                "value2": "value2",
                "value3": "value3",
                "value4": "value4"
            },
            "code": "void update_data_08005dac(int dataAddress, int *dataValues) {\n    uint mask1 = 0xffffefff;\n    uint mask2 = 0xffffbfff;\n    uint mask3 = 0xffff8cff;\n    uint shift1 = 6;\n    uint shift2 = 8;\n    uint shift3 = 12;\n    uint data1 = *(uint *)(dataAddress + 0x20);\n    uint data2 = *(uint *)(dataAddress + 0x4);\n    uint data3 = *(uint *)(dataAddress + 0x1c);\n    uint data4 = *(uint *)(dataAddress + 0x20);\n    int value1 = *dataValues;\n    int value2 = dataValues[1];\n    int value3 = dataValues[2];\n    int value4 = dataValues[5];\n    data1 = data1 & mask1;\n    if (dataAddress == DAT_08005df0) {\n        data2 = data2 & mask2 | value4 << shift1;\n    }\n    data2 = data2 & ~mask2 | value2 << shift1;\n    data3 = data3 & mask3 | value1 << shift2;\n    data4 = data4 & mask1 | value3 << shift3;\n    *(uint *)(dataAddress + 0x20) = data1;\n    *(uint *)(dataAddress + 0x4) = data2;\n    *(uint *)(dataAddress + 0x1c) = data3;\n    *(uint *)(dataAddress + 0x20) = data4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "check_and_modify_data_0800674e",
                "param_1": "data_ptr",
                "do_nothing_0800674c": "do_nothing",
                "PTR_08006538": "calculate_values",
                "DAT_08009d30": "0xffffdfff",
                "DAT_08009d34": "0xffffb7ff",
                "DAT_08009d38": "0xffffffd5"
            },
            "code": "int check_and_modify_data_0800674e(int *data_ptr) {\n    if (data_ptr != NULL) {\n        if (*(char *)((int)data_ptr + 0x39) == '\\0') {\n            *(undefined *)(data_ptr + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)data_ptr + 0x39) = '$';\n        *(uint *)(*data_ptr + 0xc) &= DAT_08009d30;\n        PTR_08006538(data_ptr);\n        *(uint *)(*data_ptr + 0x10) &= DAT_08009d34;\n        *(uint *)(*data_ptr + 0x14) &= DAT_08009d38;\n        *(uint *)(*data_ptr + 0xc) |= 0x2000;\n        data_ptr[0xf] = 0;\n        *(undefined *)((int)data_ptr + 0x39) = ' ';\n        *(undefined *)((int)data_ptr + 0x3a) = ' ';\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "check_and_modify_data_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_function_if_condition_met_0800771c",
                "param_1": "input_param",
                "iVar1": "subtracted_input"
            },
            "code": "void execute_function_if_condition_met_0800771c(int input_param)\n{\n  int subtracted_input = subtract_four_from_input_08007718();\n  if ((*(code **)(subtracted_input + 0x4c) != (code *)0x0) && (*(char *)(input_param + 0x1c) == '\\x01')) {\n    (**(code **)(subtracted_input + 0x4c))(subtracted_input,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_condition_met_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "parameters",
                "param_2": "parameter_mask",
                "param_3": "expected_value",
                "param_4": "comparison_flag",
                "param_5": "max_value",
                "iVar1": "current_value"
            },
            "code": "int check_parameters_080066e8(uint **parameters, uint parameter_mask, uint expected_value, int comparison_flag, uint max_value)\n{\n    int current_value;\n\n    do {\n        if (((parameter_mask & ~**parameters) == 0) != comparison_flag) {\n            return 0;\n        }\n    } while ((max_value == 0xffffffff) || ((max_value != 0 && (current_value = get_data_from_ptr_dat_08003760(), (uint)(current_value - expected_value) <= max_value))));\n\n    (*parameters)[3] &= 0xfffffe5f;\n    (*parameters)[5] &= 0xfffffffe;\n    *(undefined *)((int)parameters + 0x39) = 0x20;\n    *(undefined *)((int)parameters + 0x3a) = 0x20;\n    *(undefined *)(parameters + 0xe) = 0;\n    return 3;\n}\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "processData_08009358",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "dataLength",
                "iVar1": "index",
                "puVar2": "dataEnd",
                "iVar3": "index"
            },
            "code": "int processData_08009358(undefined4 arg1, undefined4 arg2, undefined *data, int dataLength) {\n  int index = 0;\n  undefined *dataEnd = data + dataLength;\n  while (data != dataEnd) {\n    if (index == 0) {\n      return 0;\n    }\n    index = process_data_0800932c(arg1, *data, arg2, dataLength, index) + 1;\n    data++;\n  }\n  return index;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "processData_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_pointers_0800270c",
                "PTR_DAT_08002718": "first_pointer",
                "PTR_DAT_0800271c": "second_pointer"
            },
            "code": "int calculate_difference_between_pointers_0800270c(void)\n{\n  uint8_t* PTR_DAT_08002718 = PTR_DAT_08002718;\n  uint8_t* PTR_DAT_0800271c = PTR_DAT_0800271c;\n  uint difference = (uint)(*PTR_DAT_08002718) - (uint)(*PTR_DAT_0800271c);\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "struct_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "*(undefined4 *)(param_1 + 0x6c)": "*(int *)(struct_ptr + 0x6c)",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(struct_ptr + 0x44)"
            },
            "code": "void set_values_08003370(int struct_ptr, int value1, int value2, int value3)\n{\n  *(int *)(struct_ptr + 0x6c) = value2;\n  *(int *)(struct_ptr + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "validate_input_08007fa0",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "flag_value",
                "param_4": "param_4",
                "iVar1": "decrement_value"
            },
            "code": "void validate_input_08007fa0(int input_address, int flag, int flag_value, undefined4 param_4)\n{\n  int decrement_value = decrement_by_four();\n  if (flag_value == *(int *)(input_address + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(decrement_value + 0x88) = 0;\n      *(undefined *)(decrement_value + 0x5c) = 0;\n      if (*(code **)(decrement_value + 100) != (code *)0x0) {\n        (**(code **)(decrement_value + 100))();\n      }\n      validate_input_08007fa0_080048c8(input_address, decrement_value + 0x68, *(undefined *)(decrement_value + 0x88), 8);\n      return;\n    }\n    *(undefined *)(decrement_value + 0x5c) = 1;\n    validate_input_08007fa0_and_set_values(input_address, decrement_value + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "validate_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "check_and_set_value_if_greater_than_08003376",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "buffer_size",
                "bVar1": "is_greater_than_buffer_size"
            },
            "code": "void check_and_set_value_if_greater_than_08003376(uint8_t* buffer, uint8_t value, uint32_t buffer_size)\n{\n  bool is_greater_than_buffer_size;\n  \n  if (buffer_size < *(uint32_t *)(buffer + 8)) {\n    is_greater_than_buffer_size = false;\n  }\n  else {\n    is_greater_than_buffer_size = true;\n    if (*(code **)(buffer + 100) != (code *)0x0) {\n      *buffer = 1;\n      (**(code **)(buffer + 100))(*(uint32_t *)(buffer + 0x3c));\n      if (buffer_size < *(uint32_t *)(buffer + 8)) {\n        is_greater_than_buffer_size = false;\n      }\n      else {\n        is_greater_than_buffer_size = true;\n      }\n    }\n  }\n  if (!is_greater_than_buffer_size) {\n    *(uint8_t *)(*(int *)(buffer + 4) + buffer_size) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "check_and_set_value_if_greater_than_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "calculate_resultant_value_if_data_present_08008bf4",
                "DAT_08008c18": "data_present",
                "PTR_DAT_08008c1c": "data_pointer"
            },
            "code": "void calculate_resultant_value_if_data_present_08008bf4() {\n  if (DAT_08008c18) {\n    calculate_resultant_value(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "calculate_resultant_value_if_data_present_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_0x40_08005430",
                "param_1": "address"
            },
            "code": "int get_value_at_offset_0x40_08005430(int address) {\n    return *(int *)(address + 0x40);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x40_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_from_array_08002720",
                "PTR_DAT_08002740": "array_index_ptr",
                "PTR_DAT_08002744": "array_size_ptr",
                "PTR_DAT_08002748": "array_ptr",
                "bVar1": "index",
                "bVar2": "value"
            },
            "code": "uint read_byte_from_array_08002720(void)\n{\n  uint index = *PTR_DAT_08002740;\n  if (index < (uint)(byte)*PTR_DAT_08002744) {\n    byte value = *(byte *)(*(int *)PTR_DAT_08002748 + index);\n    *PTR_DAT_08002740 = index + 1;\n    return (uint)value;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "read_byte_from_array_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "encode_data_and_call_function_if_not_null_080031ce",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "num_iterations",
                "param_5": "param_5",
                "puVar1": "function_pointer",
                "uVar2": "i",
                "encode_data_0800307a": "encode_data_0800307a"
            },
            "code": "void encode_data_and_call_function_if_not_null_080031ce(uint8_t *data, uint32_t data_length, uint32_t param_3, uint32_t num_iterations, int param_5) {\n  uint8_t *function_pointer = (uint8_t *)*data;\n  if (function_pointer != NULL) {\n    void (*function_call)(uint8_t *, uint32_t, uint32_t, void *, uint32_t) = (void (*)(uint8_t *, uint32_t, uint32_t, void *, uint32_t))(*((uint32_t *)function_pointer));\n    void (*function_call_1)(uint8_t *) = (void (*)(uint8_t *))(*((uint32_t **)function_pointer));\n    void (*function_call_2)(uint8_t *, uint32_t) = (void (*)(uint8_t *, uint32_t))(*((uint32_t ***)function_pointer));\n    function_call(function_pointer, 0xf0, param_3, (void *)function_call, num_iterations);\n    function_call_1(function_pointer);\n    function_call_2(function_pointer, data_length);\n    for (uint32_t i = 0; i < num_iterations; i++) {\n      encode_data_0800307a(data, 1, param_5 + i, 0);\n    }\n    function_call_2(function_pointer, 0xf7);\n  }\n}\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "encode_data_and_call_function_if_not_null_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "calculateOffsetAndAssign_08009918",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPtr",
                "iVar2": "offset"
            },
            "code": "void calculateOffsetAndAssign_08009918(int *output, undefined4 input)\n{\n  undefined *dataPtr;\n  int offset;\n  dataPtr = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  offset = calculateOffset_08008804(input);\n  if ((offset == -1) && (*(int *)dataPtr != 0)) {\n    *output = *(int *)dataPtr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "calculateOffsetAndAssign_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "multiplier"
            },
            "code": "void count_down_08005434(int num)\n{\n  int multiplier = (uint)((ulonglong)DAT_0800545c * (ulonglong)*(uint *)PTR_DAT_08005458 >> 0x29);\n  do {\n    num--;\n  } while (num * multiplier != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_flags_and_reset_08005e2e",
                "param_1": "memory_ptr",
                "puVar1": "memory",
                "*(undefined *)((int)param_1 + 0x3d)": "flags",
                "puVar1[8]": "memory[8]",
                "*puVar1": "*memory",
                "update_memory_flags_08007110": "update_memory_flags",
                "*(undefined *)(param_1 + 0xf)": "unknown_value"
            },
            "code": "void update_flags_and_reset_08005e2e(uint **memory_ptr)\n{\n  uint *memory = *memory_ptr;\n  *(undefined *)((int)memory_ptr + 0x3d) = 2;\n  if ((memory[8] & 0x1111) == 0)\n  {\n    if ((memory[8] & 0x444) == 0)\n    {\n      *memory = *memory & 0xfffffffe;\n    }\n  }\n  update_memory_flags_08007110(memory_ptr);\n  *(undefined *)((int)memory_ptr + 0x3d) = 0;\n  *(undefined *)(memory_ptr + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_flags_and_reset_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "iVar1": "input_value",
                "subtract_four_from_input_08007718": "get_input_subtracted_by_four",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int input_value;\n  input_value = get_input_subtracted_by_four();\n  if (*(code **)(input_value + 0x48) != (code *)0x0) {\n    (**(code **)(input_value + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_params_08002968",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "offset1",
                "iVar2": "offset2",
                "PTR_DAT_080029ec": "ptr1",
                "PTR_DAT_080029f0": "ptr2",
                "PTR_DAT_080029f4": "ptr3",
                "PTR_DAT_080029fc": "ptr4",
                "PTR_DAT_08002a00": "ptr5",
                "PTR_DAT_08002a04": "ptr6",
                "PTR_DAT_08002a0c": "ptr7"
            },
            "code": "void initialize_params_08002968(int param1, uint32_t param2)\n{\n    int offset1;\n    int offset2;\n    int *PTR_DAT_080029ec = PTR_DAT_080029ec;\n    int *PTR_DAT_080029f0 = PTR_DAT_080029f0;\n    int *PTR_DAT_080029f4 = (int *)PTR_DAT_080029f4;\n    int *PTR_DAT_080029fc = PTR_DAT_080029fc;\n    int *PTR_DAT_08002a00 = PTR_DAT_08002a00;\n    int *PTR_DAT_08002a04 = (int *)PTR_DAT_08002a04;\n    int *PTR_DAT_08002a0c = PTR_DAT_08002a0c;\n    *PTR_DAT_080029ec = 0;\n    *PTR_DAT_080029f0 = 0;\n    if (*PTR_DAT_080029f4 != 0)\n    {\n        fill_memory_with_value_080091c6(*PTR_DAT_080029f4, 0, *PTR_DAT_080029f8);\n    }\n    *PTR_DAT_080029fc = 0;\n    *PTR_DAT_08002a00 = 0;\n    if (*PTR_DAT_08002a04 != 0)\n    {\n        fill_memory_with_value_080091c6(*PTR_DAT_08002a04, 0, *PTR_DAT_08002a08);\n    }\n    *PTR_DAT_08002a0c = 0;\n    offset1 = (param2 & 0x7f) << 1;\n    *(char *)(param1 + 0x10) = (char)offset1;\n    if (param2 == 0x33)\n    {\n        *(undefined *)(param1 + 0x11) = 1;\n    }\n    else\n    {\n        *(undefined *)(param1 + 0x11) = 0;\n    }\n    offset2 = param1 + 0x14;\n    FUNC_080077b0(offset2, DAT_08002a10, 0x4000, offset1, *(undefined *)(param1 + 0x11));\n    if (*(char *)(param1 + 0x11) == 0)\n    {\n        set_param_08007f8e(offset2, PTR_LAB_08002774_1_08002a14);\n        set_param2_if_param1_not_null_08007f7c(offset2, PTR_LAB_08002b00_1_08002a18);\n    }\n}\n",
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_params_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input_array",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input_array)\n{\n  uint32_t *ptr1;\n  ptr1 = input_array[11];\n  if (*(char *)((int)input_array + 61) == '!') {\n    if (*(uint16_t *)((int)input_array + 42) == 0) {\n      if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        **input_array = **input_array | 0x200;\n        input_array[12] = (uint32_t *)0x0;\n        *(char *)((int)input_array + 61) = 0x20;\n        if (*(char *)((int)input_array + 62) == '@') {\n          *(char *)((int)input_array + 62) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *(char *)((int)input_array + 62) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        input_array[12] = (uint32_t *)0x11;\n        *(char *)((int)input_array + 62) = 0;\n        *(char *)((int)input_array + 61) = 0x20;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      ptr1 = input_array[9];\n      input_array[9] = (uint32_t *)((int)ptr1 + 1);\n      (*input_array)[4] = (uint32_t)*(char *)ptr1;\n      *(uint16_t *)((int)input_array + 42) = *(uint16_t *)((int)input_array + 42) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_included_in_ptr_080042d4",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int is_param2_included_in_ptr_080042d4(uint* PTR_param1, uint param2) {\n  if ((param2 & *(PTR_param1 + 2)) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_included_in_ptr_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_byte_at_offset_0x3d_0800542a",
                "param_1": "base_address"
            },
            "code": "unsigned char get_byte_at_offset_0x3d_0800542a(unsigned int base_address) {\n    return *(unsigned char *)(base_address + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_byte_at_offset_0x3d_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_in_array_0800457c",
                "param_1": "array_ptr",
                "pbVar1": "byte_ptr",
                "*pbVar1": "*byte_ptr",
                "PTR_": "array_ptr",
                "DAT_": "byte"
            },
            "code": "int increment_byte_in_array_0800457c(int *PTR_) {\n  short *array_length_ptr = (short *)((int)PTR_ + 0x2a);\n  if (*array_length_ptr != 0) {\n    DAT_ *DAT__ptr = (DAT_ *)PTR_[9];\n    PTR_[9] = (int)(DAT__ptr + 1);\n    *(uint *)(*PTR_ + 0x10) = (uint)*DAT__ptr;\n    *array_length_ptr = *array_length_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_in_array_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_memory_with_value_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_memory"
            },
            "code": "void fill_memory_with_value_080091c6(unsigned char *memory, unsigned char value, int length)\n{\n  unsigned char *end_memory;\n  \n  end_memory = memory + length;\n  for (; memory != end_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08009d24",
                "FUN_08009cdc",
                "FUN_08002a58",
                "FUN_08009db0",
                "FUN_08002968",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "assign_value_0800a07a",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "mask",
                "bVar3": "is_result_negative"
            },
            "code": "void assign_value_0800a07a(int value, int* data)\n{\n  int result = check_and_assign_value_0800a07a(value, *(short *)(data + 0xe));\n  bool is_result_negative = result == -1;\n  ushort mask = *(ushort *)(data + 0xc);\n  if (is_result_negative) {\n    mask &= 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    mask |= 0x1000;\n  }\n  *(ushort *)(data + 0xc) = mask;\n}\n",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "assign_value_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_data_flag_08003a20",
                "param_1": "data",
                "param_2": "flag_bit",
                "iVar1": "new_data_length",
                "iVar3": "data_ptr",
                "local_14": "i",
                "PTR_DAT_08003a98": "PTR_DATA_CONSTANT_2",
                "DAT_08003a9c": "DATA_CONSTANT_1",
                "get_data_from_ptr_dat_08003760": "get_data_length",
                "data_length": "data_length",
                "DATA_CONSTANT_3": "0x10"
            },
            "code": "int set_data_flag_08003a20(int *data, uint flag_bit)\n{\n  int data_ptr = *data;\n  if ((*(uint *)(data_ptr + 8) & 1) == 0) {\n    *(uint *)(data_ptr + 8) = *(uint *)(data_ptr + 8) | 1;\n    for (uint i = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32); i != 0; i = i - 1) { }\n    int data_length = get_data_length(data, flag_bit, (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      int new_data_length = get_data_length();\n    } while ((uint)(new_data_length - data_length) < 3);\n    data[10] = data[10] | DATA_CONSTANT_3;\n    data[0xb] = data[0xb] | 1;\n    *(undefined *)(data + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": false,
            "current_name": "set_data_flag_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "clear_flags_and_set_space_080064b0",
                "param_1": "memory_address",
                "PTR_": "ptr",
                "DAT_": "mask",
                "undefined": "char",
                "0xc": "+ 0xc",
                "0x14": "+ 0x14"
            },
            "code": "void clear_flags_and_set_space_080064b0(int *memory_address){\n    uint32_t* PTR_1 = (uint32_t*)(*memory_address + 0xc);\n    uint32_t* PTR_2 = (uint32_t*)(*memory_address + 0x14);\n    uint32_t DAT_1 = 0xfffffedf;\n    uint32_t DAT_2 = 0xfffffffe;\n    *PTR_1 = (*PTR_1) & DAT_1;\n    *PTR_2 = (*PTR_2) & DAT_2;\n    char* flag_PTR_ = (char*)(memory_address + 0x3a);\n    *flag_PTR_ = ' ';\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "clear_flags_and_set_space_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "DAT_08009d14": "DAT_CONSTANT",
                "PTR_FUN_0800a042_1_08009d18": "PTR_FUNCTION_1",
                "PTR_FUN_0800a07a_1_08009d1c": "PTR_FUNCTION_2",
                "PTR_LAB_0800a09e_1_08009d20": "PTR_LABEL"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data, undefined2 value1, undefined2 value2) {\n    *data = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[25] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    fill_memory_with_value_080091c6(data + 23, 0, 8);\n    data[8] = data;\n    data[9] = DAT_08009d14;\n    data[10] = PTR_process_data_0800a042_1_08009d18;\n    data[11] = PTR_assign_value_0800a07a_1_08009d1c;\n    data[12] = PTR_LAB_0800a09e_1_08009d20;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "process_input_08002a58",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "result"
            },
            "code": "int process_input_08002a58(int input)\n{\n    int result;\n    if (*(char *)(input + 0x11) == '\\0') {\n        result = 4;\n    }\n    else {\n        result = process_input_08002a58_and_get_result(input);\n        if (result == 0) {\n            result = 0;\n        }\n        else if (result == 1) {\n            result = 1;\n        }\n        else {\n            result = 4;\n        }\n        if (*(int *)PTR_DAT_08002aac != 0) {\n            fill_memory_with_value(*(int *)PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n        }\n        *PTR_DAT_08002ab8 = 0;\n        *PTR_DAT_08002aa8 = 0;\n        *PTR_DAT_08002abc = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002b68",
                "FUN_08002ac0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "process_input_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_and_update_value_080026b0",
                "param_1": "PTR_1",
                "param_2": "value",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "calculate_value_0800267c": "update_value"
            },
            "code": "void calculate_and_update_value_080026b0(int value, int max_value)\n{\n    if (value < max_value)\n    {\n        if (value < 0)\n        {\n            value = 0;\n        }\n        else if (max_value < value)\n        {\n            value = max_value;\n        }\n        value = calculate_new_value(value, 0, max_value, (0x88 - *(char *)(PTR_1 + 1)) * 4, (600 - *(char *)(PTR_1 + 2)) * 4);\n    }\n    update_value(PTR_1, value);\n    return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_and_update_value_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "validate_params_08006092",
                "param_1": "params",
                "FUNC_08006e68": "execute_validation",
                "PTR_08005fe8": "set_parameters",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(params + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)params + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)params + 0x3d)"
            },
            "code": "undefined4 validate_params_08006092(undefined4 *params)\\n{\\n  if (params != NULL) {\\n    if (*(char *)((int)params + 0x3d) == \"\\0\") {\\n      *(undefined *)(params + 0xf) = 0;\\n      execute_validation();\\n    }\\n    *(undefined *)((int)params + 0x3d) = 2;\\n    PTR_08005fe8(*params,params + 1);\\n    *(undefined *)((int)params + 0x3d) = 1;\\n    return 0;\\n  }\\n  return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "validate_params_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_struct_if_first_param_is_one_08008d8c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "initialize_struct_08008d30": "initialize_struct"
            },
            "code": "void initialize_struct_if_first_param_is_one_08008d8c(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param)\n{\n  if (first_param != 1) {\n    return;\n  }\n  if (second_param == 0xffff) {\n    initialize_struct(PTR_DAT_08008dac, DAT_08008da8, third_param, 0xffff, fourth_param);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_struct_if_first_param_is_one_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "increment_bytes_and_store_080004d4",
                "param_1": "num_bytes",
                "param_2": "data",
                "iVar1": "i",
                "puVar2": "data",
                "PTR_DAT_080004fc": "PTR_DAT_080004fc"
            },
            "code": "void increment_bytes_and_store_080004d4(void *data, int num_bytes) {\n  if (num_bytes != 1) {\n    return;\n  }\n  if (data == PTR_DAT_080004fc) {\n    for (int i = 11; i >= 0; i--) {\n      increment_byte_and_store_08002580(data);\n      data += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "increment_bytes_and_store_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = get_value_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = get_value_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      clear_memory_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = get_byte_from_ptr_dat_08002708_and_shift_left_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        update_flags_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = find_character_index_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_character_index_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      set_bit_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    set_value_at_offset_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        process_data_08008990(param_1,0);\n        update_byte_at_offset_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = get_value_at_offset_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          set_value_at_address_if_param_not_zero_08008a24(param_1,0);\n        }\n        process_data_08008990(param_1,1);\n        update_byte_at_offset_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_character_index_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = find_character_index_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          process_data_08008990(param_1,0);\n        }\n        update_byte_at_offset_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = find_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_data_08008990(param_1,1);\n        process_data_080088e0(param_1,0);\n        update_byte_at_offset_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        update_byte_at_offset_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = get_byte_from_ptr_dat_08002708_and_shift_left_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          process_servo_data_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      encode_and_send_data_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = find_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = find_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        update_byte_at_offset_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        process_data_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        update_byte_at_offset_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        set_value_at_offset_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08008990",
                "FUN_080026f8",
                "FUN_08002fa8",
                "FUN_08000588",
                "FUN_08002fc2",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_080005e0",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "process_data_and_call_func_08009124",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uStack_8": "param3",
                "uStack_4": "param4"
            },
            "code": "void process_data_and_call_func_08009124(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  undefined4 param1 = data1;\n  undefined4 param2 = data2;\n  undefined4 param3 = data3;\n  undefined4 param4 = data4;\n  undefined4 stack_param1 = *(undefined4 *)PTR_PTR_DAT_08009144;\n  FUNC_0800937c(stack_param1, param1, param2, &param3, param1, &param3);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_and_call_func_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "data"
            },
            "code": "unsigned char get_value_at_offset_08002fa0(int offset, unsigned char *data) {\n    return *(unsigned char *)(data + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "* (undefined4 *)": "int *",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address) {\n    int offset = 0x28;\n    int* value_ptr = (int*)(base_address + offset);\n    return *value_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "execute_function_if_not_null_08005cb4",
                "param_1": "data",
                "**param_1": "**data",
                "(*param_1)[1]": "(*data)[1]"
            },
            "code": "void execute_function_if_not_null_08005cb4() {\n    uint** data = param_1;\n    bool first_bit_is_set = (**data & 2) != 0;\n    bool second_bit_is_set = ((*data)[1] & 2) != 0;\n    if (first_bit_is_set && second_bit_is_set) {\n        execute_function_if_not_null_08005cb4_080073c0();\n        (*data)[1] = 0xfffffffd;\n    }\n    *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n    *(undefined *)((int)data + 0x11) = 1;\n}\n",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_ptr_plus_offset_08007744",
                "param_1": "ptr_offset",
                "PTR_": "ptr",
                "DAT_": "data",
                "undefined4": "int",
                "*": "value pointed by",
                "+": "plus",
                "return": "return",
                "int": "int"
            },
            "code": "int get_value_from_ptr_plus_offset_08007744(int PTR__offset) {\n    int PTR_ = *(int *)(PTR__offset + 4);\n    int offset = 0x24;\n    int value = *(int *)(PTR_ + offset);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_ptr_plus_offset_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "*param_1": "params",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "val1",
                "iVar4": "val3",
                "iVar5": "val4",
                "iVar6": "val5",
                "iVar7": "val6",
                "iVar8": "param1",
                "iVar9": "param2",
                "iVar10": "param3",
                "iVar11": "param4",
                "iVar12": "ptr"
            },
            "code": "void calculate_values_08006538(int *params)\n{\n  uint value1 = *(uint *)(*params + 0x10);\n  value1 = value1 & 0xffffcfff | params[3];\n  uint value2 = *(uint *)(*params + 0xc);\n  value2 = value2 & 0xffffe9f3 | params[2] | params[4] | params[5];\n  uint value3 = *(uint *)(*params + 0x14);\n  value3 = value3 & 0xfffffcff | params[6];\n  int ptr = *params;\n  if (ptr != PTR_DAT_080066e0) {\n    int val1 = get_value_shifted_by_pointer_08005a28();\n    uint val2 = PTR_DAT_080066e4;\n    int param1 = params[1];\n    int val3 = get_value_shifted_by_pointer_08005a28();\n    int param2 = params[1];\n    int val4 = get_value_shifted_by_pointer_08005a28();\n    int param3 = params[1];\n    int val5 = get_value_shifted_by_pointer_08005a28();\n    int param4 = params[1];\n    int val6 = get_value_shifted_by_pointer_08005a28();\n    int param5 = params[1];\n    int val7 = get_value_shifted_by_pointer_08005a28();\n    *(uint *)(ptr + 8) = ((val2 * (((val6 * 0x19) / (param5 << 2)) + ((val2 * ((val7 * 0x19) / (params[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20 << 0x17 >> 0x1c) + ((val2 * (((val4 * 0x19) / (param2 << 2)) + ((val2 * ((val5 * 0x19) / (param3 << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25 & 0xf0) + (PTR_DAT_080066e4 * (((uint)(val1 * 0x19) / (uint)(param1 << 2))) >> 0x25) * 0x10;\n    return;\n  }\n  int val1 = get_shifted_value_from_pointer_08005a48();\n  uint val2 = PTR_DAT_080066e4;\n  int param1 = params[1];\n  int val3 = get_shifted_value_from_pointer_08005a48();\n  int param2 = params[1];\n  int val4 = get_shifted_value_from_pointer_08005a48();\n  int param3 = params[1];\n  int val5 = get_shifted_value_from_pointer_08005a48();\n  int param4 = params[1];\n  int val6 = get_shifted_value_from_pointer_08005a48();\n  int param5 = params[1];\n  int val7 = get_shifted_value_from_pointer_08005a48();\n  *(uint *)(ptr + 8) = ((val2 * (((val6 * 0x19) / (param5 << 2)) + ((val2 * ((val7 * 0x19) / (params[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20 << 0x17 >> 0x1c) + ((val2 * (((val4 * 0x19) / (param2 << 2)) + ((val2 * ((val5 * 0x19) / (param3 << 2))) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25 & 0xf0) + (PTR_DAT_080066e4 * (((uint)(val1 * 0x19) / (uint)(param1 << 2))) >> 0x25) * 0x10;\n  return;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_value_at_address_080042e2",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift_amount"
            },
            "code": "void set_value_at_address_080042e2(int address, int value, int shift_amount) {\n  if (shift_amount == 0) {\n    *(int *)(address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_value_at_address_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_byte_at_offset_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value",
                "*(char *)(param_1 + param_2 + 0xcc)": "*(unsigned char *)(base_address + offset + 0xcc)",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "*(unsigned char *)(base_address + offset + 0xcc)"
            },
            "code": "void update_byte_at_offset_08002fa8(int base_address, int offset, unsigned char new_value)\n{\n  unsigned char current_value = *(unsigned char *)(base_address + offset + 0xcc);\n  if (current_value != 0x7f) {\n    *(unsigned char *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_byte_at_offset_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "encode_data_and_send_to_device_0800325a",
                "param_1": "device_ptr",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "offset",
                "puVar1": "callback_ptr",
                "uVar2": "i"
            },
            "code": "void encode_data_and_send_to_device_0800325a(uint32_t *device_ptr, uint32_t data, uint32_t data_length, int offset) {\n  uint32_t *callback_ptr;\n  uint32_t i;\n  callback_ptr = (uint32_t *)*device_ptr;\n  if (callback_ptr != (uint32_t *)0x0) {\n    (**(code **)*callback_ptr)(callback_ptr, 0xf0);\n    (***(code ***)(uint32_t *)*device_ptr)((uint32_t *)*device_ptr, data);\n    for (i = 0; i < data_length; i++) {\n      encode_data_0800307a(device_ptr, 1, offset + i, 0);\n    }\n    (***(code ***)(uint32_t *)*device_ptr)((uint32_t *)*device_ptr, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": false,
            "current_name": "encode_data_and_send_to_device_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_into_linked_list_080091d8",
                "param_1": "head",
                "param_2": "size",
                "param_3": "value",
                "param_4": "ignored",
                "puVar1": "ptr_to_pointer_to_head",
                "extraout_r1": "temp",
                "ppiVar2": "current",
                "ppiVar3": "prev",
                "piVar4": "next",
                "ppiVar5": "ppiVar5",
                "ppiVar6": "ppiVar6",
                "ppiVar7": "ppiVar7"
            },
            "code": "void insert_into_linked_list_080091d8(int **head, int size, int value, int ignored) {\n  if (size == 0) {\n    return;\n  }\n  int **current = head;\n  if (**head < 0) {\n    current = (int **)((int)current + **head);\n  }\n  do_nothing_08009f48();\n  int **prev = NULL;\n  while (current != NULL && *current < value) {\n    prev = current;\n    current = (int **)((int)current[1]);\n  }\n  if (current == NULL) {\n    *head = (int *)((int)prev + value);\n  }\n  else if ((int **)((int)current + **current) == (int **)((int)prev + value)) {\n    *current = (int *)((int)*current + value);\n    if ((int **)((int)current[1]) == (int **)((int)current + **current)) {\n      int *next = *current[1];\n      current[1] = (int **)((int)next[1]);\n      *current = (int *)((int)*current + *next);\n    }\n  }\n  else if ((int **)((int)current + **current) > (int **)((int)prev + value)) {\n    return;\n  }\n  else {\n    *head = (int *)((int)prev + value);\n    current[1] = (int **)((int)current + **current);\n    prev[1] = current;\n  }\n  do_nothing_08009f4a(NULL, NULL, NULL, ignored);\n  return;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "create_new_object_0800688e",
                "param_1": "object_ptr",
                "param_2": "object_id",
                "param_3": "object_size",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)object_ptr + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(object_ptr + 0xe)",
                "param_1[8]": "object_ptr[8]",
                "*(short *)(param_1 + 9)": "*(short *)(object_ptr + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)object_ptr + 0x26)",
                "param_1[0xf]": "object_ptr[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)object_ptr + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(object_ptr + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*object_ptr + 0xc)"
            },
            "code": "int create_new_object_0800688e(int *object_ptr, int object_id, int object_size) {\n    if (*(char *)((int)object_ptr + 0x39) != ' ') {\n        return 2;\n    }\n    if (object_id == 0) {\n        return 1;\n    }\n    if (object_size == 0) {\n        return 1;\n    }\n    if (*(char *)(object_ptr + 0xe) != '\\x01') {\n        object_ptr[8] = object_id;\n        *(short *)(object_ptr + 9) = (short)object_size;\n        *(short *)((int)object_ptr + 0x26) = (short)object_size;\n        object_ptr[0xf] = 0;\n        *(undefined *)((int)object_ptr + 0x39) = 0x21;\n        *(undefined *)(object_ptr + 0xe) = 0;\n        *(uint *)(*object_ptr + 0xc) = *(uint *)(*object_ptr + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "create_new_object_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "data_index",
                "param_2": "input_value",
                "iVar1": "index_in_bitarray",
                "iVar3": "index_in_array",
                "PTR_DAT_0800897c": "array_of_indexes",
                "PTR_DAT_08008980": "bit_array",
                "PTR_DAT_08008984": "update_value",
                "PTR_DAT_08008988": "shift_value_address",
                "DAT_0800898c": "0xff",
                "find_index_0800738a": "find_index_in_bitarray",
                "process_data_08008990": "process_data_08008990",
                "set_value_at_address_if_param_not_zero_08008a24": "set_value_at_address_if_param_not_zero_08008a24",
                "get_bit_at_position_08006b28": "get_bit_at_position",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "update_data_08007118": "update_data"
            },
            "code": "void process_data_080088e0(uint data_index, uint input_value) {\n  int index_in_array;\n  uint shift_amount;\n  int bit_value;\n\n  if (data_index < 0x3c) {\n    index_in_array = (int)(char)PTR_DAT_0800897c[data_index];\n  }\n  else {\n    index_in_array = -1;\n  }\n\n  if (index_in_array != -1) {\n    int index_in_bitarray = find_index_in_bitarray(index_in_array, PTR_DAT_08008980);\n    if (index_in_bitarray == 0) {\n      process_data_080088e0_08008990(data_index, 1);\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          input_value = input_value << (8 - shift_amount & DAT_0800898c);\n        }\n        else {\n          input_value = input_value >> (shift_amount - 8 & DAT_0800898c);\n        }\n      }\n      if (input_value < 0x80) {\n        set_value_at_address_if_param_not_zero_08008a24(data_index, 0);\n      }\n      else {\n        set_value_at_address_if_param_not_zero_08008a24(data_index, 1);\n      }\n    }\n    else {\n      bit_value = get_bit_at_position(index_in_array, PTR_DAT_08008980);\n      if (bit_value == 0) {\n        set_bit_in_array(index_in_array, PTR_DAT_08008980);\n      }\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          input_value = input_value << (8 - shift_amount & DAT_0800898c);\n        }\n        else {\n          input_value = input_value >> (shift_amount - 8 & DAT_0800898c);\n        }\n      }\n      update_data(index_in_array, PTR_DAT_08008984, DAT_0800898c, input_value, bit_value == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_08008990",
                "FUN_0800738a",
                "FUN_08008a24",
                "FUN_08007118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "validate_and_copy_input_08008b66",
                "param_1": "input_address",
                "iVar1": "validation_result",
                "uVar2": "new_index",
                "local_9": "local_data"
            },
            "code": "void validate_and_copy_input_08008b66(int input_address, char *input_data) {\n  int validation_result;\n  ushort new_index;\n  char local_data;\n  validation_result = validate_and_copy_input_08008b66_08008600(input_address, &local_data);\n  if ((validation_result == 0) && (new_index = *(short *)(input_address + 0x60) + 1U & 0x3f, new_index != *(ushort *)(input_address + 0x62))) {\n    *(char *)(*(int *)(input_address + 0x5c) + (uint)*(ushort *)(input_address + 0x60)) = local_data;\n    *(ushort *)(input_address + 0x60) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_copy_input_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_integer_operation_0800870c",
                "uVar1": "integer_index",
                "find_integer_index_080086e8": "find_integer_index",
                "PTR_DAT_08008728": "integer_operation_ptr",
                "PTR_DAT_0800872c": "integer_arguments_ptr"
            },
            "code": "void execute_integer_operation_0800870c() {\n  uint integer_index = find_integer_index();\n  if (integer_index < 5) {\n    (**(code **)(PTR_DAT_08008728 + integer_index * 4))(*(undefined4 *)(PTR_DAT_0800872c + integer_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_integer_operation_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "returnMaxValue_08008840",
                "undefined4": "uint32_t",
                "0xffffffff": "UINT32_MAX"
            },
            "code": "uint32_t returnMaxValue_08008840(void)\n{\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "returnMaxValue_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "validate_and_copy_input_08008600",
                "param_1": "input_size",
                "param_2": "input_buffer",
                "param_3": "validation_data",
                "param_4": "validation_size",
                "iVar1": "is_valid",
                "is_valid_input_080085b8": "is_input_valid",
                "*param_2": "*input_buffer",
                "*(undefined *)(param_1 + 0x45)": "*(char*)(input_size + 69)",
                "validate_input_080068d6": "validate_input",
                "PTR_DAT_08008638": "PTR_DAT_08008638",
                "*(byte *)(param_1 + 0x44)": "*(unsigned char*)(input_size + 68)",
                "param_1 + 0x45": "input_size + 69",
                "PTR_DAT_08008638 + (uint)*(byte *)(param_1 + 0x44) * 4": "PTR_DAT_08008638 + (uint)*(unsigned char*)(input_size + 68) * 4"
            },
            "code": "int validate_and_copy_input_08008600(int input_size, char* input_buffer, int validation_data, int validation_size) {\n  int is_valid = is_input_valid();\n  if (input_size == 0) {\n    return -1;\n  }\n  if (is_valid == 0) {\n    *input_buffer = *(char*)(input_size + 69);\n    validate_input(*(int*)(PTR_DAT_08008638 + (uint)*(byte *)(param_1 + 0x44) * 4), input_size + 69, 1, PTR_DAT_08008638, validation_size);\n    return 0;\n  }\n  return -1;\n}\n",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "validate_and_copy_input_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "target_pointer",
                "param_2": "value_to_copy",
                "*param_1": "*target_pointer"
            },
            "code": "void copy_value_to_pointer_08003154(int* target_pointer, int value_to_copy) {\n  *target_pointer = value_to_copy;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "copy_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_flags_08006420",
                "param_1": "memory_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "uint32_t",
                "*": "*",
                "*(uint *)(param_1 + 0x20)": "*memory_address",
                "4": "4",
                "mask": "mask"
            },
            "code": "void update_flags_08006420(uint32_t *memory_address, uint8_t bit_position, uint32_t new_value) {\n\tuint32_t mask = ~(4 << (bit_position & 0xff));\n\t*memory_address &= mask;\n\t*memory_address |= new_value << (bit_position & 0xff);\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": false,
            "current_name": "update_flags_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_parameter_at_index_08007750",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "new_value",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "void set_parameter_at_index_08007750(int base_address, int index, int new_value) {\n    int* PTR_array = *(int *)(base_address + 4);\n    int* PTR_element = PTR_array + 0x34 + index * 4;\n    *PTR_element = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_char_in_string_08009938",
                "param_1": "str",
                "param_2": "ch",
                "pcVar1": "result"
            },
            "code": "char* find_char_in_string_08009938(char* str, char ch) {\n    char* result = str;\n    while (*result != \"\\0\") {\n        if (*result == ch) {\n            return result;\n        }\n        result++;\n    }\n    if (ch != \"\\0\") {\n        result = NULL;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "process_data_08007f0e",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "iVar1": "start_data",
                "iVar2": "value_at_offset",
                "uVar3": "data_diff",
                "iVar4": "result",
                "iVar5": "data_ptr",
                "uVar6": "end_data",
                "get_data_from_ptr_dat_08003760()": "get_data_from_start()",
                "process_data_080047f4()": "process_data_at_ptr()",
                "get_byte_at_offset_0x3d_0800542a()": "get_byte_at_offset()",
                "get_value_at_offset_0x40_08005430()": "get_value_at_offset()"
            },
            "code": "int process_data_08007f0e(int data, int param1, int param2, int param3)\n{\n  int start_data = get_data_from_start();\n  int end_data = start_data + 0x64;\n  int iterations = 2;\n  int result = 2;\n  do {\n    int data_ptr = data + 4;\n    int processed_data = process_data_08007f0e_at_ptr(data_ptr, param1, param2, param3, end_data);\n    if (processed_data == 0) {\n      result = 0;\n      int byte_at_offset = get_byte_at_offset(data_ptr);\n      while (byte_at_offset != 0x20 && result == 0) {\n        int data_ptr = get_data_from_start();\n        int data_diff = data_ptr - start_data;\n        if (data_diff < 0x65) {\n          int value_at_offset = get_value_at_offset(data_ptr);\n          if (value_at_offset != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    int value_at_offset = get_value_at_offset(data_ptr);\n  } while (value_at_offset == 4 && data_diff < 100);\n  return result;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "process_data_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "bit_index",
                "DAT_08004020": "array_ptr"
            },
            "code": "void set_bit_in_array_08004004(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* DAT_08004020 = (uint*)DAT_08004020;\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    DAT_08004020[array_index] = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_data_to_server_if_possible_08003158",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "data_val",
                "puVar1": "func_ptr",
                "local_a": "local_val"
            },
            "code": "void send_data_to_server_if_possible_08003158(uint8_t *data_ptr, uint data_len, uint16_t data_val) {\n    uint8_t *func_ptr;\n    uint16_t local_val;\n    \n    func_ptr = (uint8_t *)*data_ptr;\n    if (func_ptr != (uint8_t *)0x0) {\n        local_val = data_val;\n        if (((int)data_len < 0x10) && (data_val < 0x4000)) {\n            (**(void (**)(uint8_t *, uint))(*func_ptr))(func_ptr, data_len | 0xe0);\n            encode_data(data_ptr, 2, &local_val);\n        }\n        else {\n            encode_and_send_data_to_server(data_ptr, data_len, 2, &local_val);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "send_data_to_server_if_possible_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "calculate_value_and_update_param_080090c2",
                "param_1": "param_value",
                "param_2": "param_ptr",
                "calculate_value_for_param_08009108": "calculate_value_for_param"
            },
            "code": "void calculate_value_and_update_param_080090c2(int param_value, int* param_ptr){\n  calculate_value_for_param_08009108(param_ptr, param_value);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "calculate_value_and_update_param_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    update_data_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    update_data_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    update_data_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    update_data_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_param_included_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    update_data_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_flag_to_0x2000_08008846",
                "param_1": "buffer_start",
                "param_2": "flag_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int set_flag_to_0x2000_08008846(int buffer_start, int flag_address) {\n  *(int *)(flag_address + 4) = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_flag_to_0x2000_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_char_at_address_offset_by_one_0800459c",
                "param_1": "array_ptr",
                "puVar1": "char_ptr"
            },
            "code": "int increment_char_at_address_offset_by_one_0800459c(int *array_ptr)\n{\n  short *short_ptr = (short *)((int)array_ptr + 0x2a);\n  if (*short_ptr != 0) {\n    char *char_ptr = (char *)array_ptr[9];\n    array_ptr[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)*(int *)(*array_ptr + 0x10);\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_char_at_address_offset_by_one_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_parameter_value_0800774a",
                "param_1": "object_address",
                "param_2": "parameter_value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x24)": "*ptr_parameter",
                "*(int *)(param_1 + 4)": "ptr_object",
                "0x24": "parameter_offset"
            },
            "code": "void set_parameter_value_0800774a(int object_address, int parameter_value){\n    int* ptr_object = *(int*)(object_address + 4);\n    int* ptr_parameter = ptr_object + 9;\n    *ptr_parameter = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_value_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "update_bits_080042f0",
                "param_1": "bits_to_update",
                "DAT_08004308": "data_ptr",
                "checkAndExecuteIfSetBitCountNotZero_08009094": "check_and_execute_if_set_bit_count_not_zero"
            },
            "code": "void update_bits_080042f0(uint bits_to_update)\n{\n    uint* DAT_08004308 = (uint*)(DAT_08004308 + 0x14);\n    if ((*DAT_08004308 & bits_to_update) != 0) {\n        *DAT_08004308 = bits_to_update;\n        check_and_execute_if_set_bit_count_not_zero();\n    }\n    return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "update_bits_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "copy_data_to_destination_080027f0",
                "param_1": "source_offset",
                "param_2": "destination_address",
                "param_3": "size",
                "cVar1": "current_char",
                "puVar2": "destination_pointer",
                "iVar3": "result",
                "uVar4": "size_byte",
                "uVar5": "new_size"
            },
            "code": "uint copy_data_to_destination_080027f0(uint source_offset, undefined4 destination_address, uint size)\n{\n  char current_char;\n  undefined *destination_pointer;\n  int result;\n  undefined size_byte;\n  uint new_size;\n  destination_pointer = destination_address;\n  if (*source_offset == '\\0') {\n    result = copy_data_to_destination_080027f0(source_offset + 0x14, destination_address, size & 0xffff);\n    if (result != 0) {\n      return 0;\n    }\n    return size;\n  }\n  new_size = (byte)*source_offset + size;\n  if ((byte)*source_offset < new_size) {\n    if (new_size < 0x20) {\n      new_size = 0x20;\n    }\n    result = allocate_and_insert_into_linked_list(*PTR_DAT_08002884, new_size);\n    *(int *)destination_pointer = result;\n    if (result == 0) {\n      size_byte = 0;\n    }\n    else {\n      size_byte = (undefined)new_size;\n    }\n    *PTR_DAT_08002880 = size_byte;\n  }\n  destination_pointer = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    copy_buffer((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, destination_address, size);\n    current_char = *destination_pointer + (char)size;\n    *destination_pointer = current_char;\n    *source_offset = current_char;\n    return size;\n  }\n  *(undefined4 *)(source_offset + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_to_destination_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_to_zero_0800314e",
                "param_1": "value"
            },
            "code": "void set_to_zero_0800314e(int *value){\n    *value = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "update_flags_and_reset_mem_080076e0",
                "*param_1": "*memory",
                "cVar1": "status",
                "iVar2": "update_result",
                "get_status_08007544": "get_status",
                "set_bit_at_position_08003fb0": "set_bit_at_position",
                "update_memory_flags_and_reset_08005df4": "update_memory_flags_and_reset",
                "clear_bit_080062f4": "clear_bit"
            },
            "code": "void update_flags_and_reset_mem_080076e0(int* memory) {\n    int status = get_status(*memory);\n    set_bit_at_position(status);\n    int update_result = update_memory_flags_and_reset(memory + 1);\n    if (update_result == 0) {\n        clear_bit(memory + 1, 0);\n    }\n    return;\n}",
            "called": [
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "update_flags_and_reset_mem_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "encode_and_send_data_08002f14",
                "param_1": "data",
                "encode_and_send_data_to_device_080032a2": "encode_and_send_data_to_device",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void encode_and_send_data_08002f14(int data) {\n  int encoded_data = data + 0x40;\n  encode_and_send_data_08002f14_to_device_080032a2(encoded_data);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_and_set_bits_080036a2",
                "initialize_and_set_bits_080072fa": "initialize_and_set_bits_080072fa"
            },
            "code": "void initialize_and_set_bits_080036a2() \n{\n  initialize_and_set_bits_080036a2_080072fa();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "initialize_and_set_bits_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "set_param_values_080038e4",
                "param_1": "params",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value",
                "iVar3": "local_var",
                "local_c": "local_var",
                "DAT_08003a10": "DAT_08003a10",
                "PTR_DAT_08003a14": "PTR_DAT_08003a14",
                "DAT_08003a18": "DAT_08003a18"
            },
            "code": "uint32_t set_param_values_080038e4(int *params, uint32_t *values)\n{\n  uint32_t result;\n  uint32_t value;\n  uint32_t shift;\n  uint32_t *param_addr;\n  uint32_t *value_addr;\n  int local_var;\n\n  if (*(char *)(params + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(params + 9) = 1;\n    value = values[1];\n    if (value < 7) {\n      shift = value * 5 - 5;\n      param_addr = (uint32_t *)(*params + 0x34);\n      *param_addr = values[0] << (shift & 0xff) | *param_addr & ~(0x1f << (shift & 0xff));\n    }\n    else if (value < 0xd) {\n      shift = value * 5 - 0x23;\n      param_addr = (uint32_t *)(*params + 0x30);\n      *param_addr = values[0] << (shift & 0xff) | *param_addr & ~(0x1f << (shift & 0xff));\n    }\n    else {\n      shift = value * 5 - 0x41;\n      param_addr = (uint32_t *)(*params + 0x2c);\n      *param_addr = values[0] << (shift & 0xff) | *param_addr & ~(0x1f << (shift & 0xff));\n    }\n    value = values[0];\n    if (value < 10) {\n      shift = value * 3;\n      value_addr = (uint32_t *)(*params + 0x10);\n      *value_addr = values[2] << (shift & 0xff) | *value_addr & ~(7 << (shift & 0xff));\n    }\n    else {\n      shift = value * 3 - 0x1e;\n      value_addr = (uint32_t *)(*params + 0xc);\n      *value_addr = values[2] << (shift & 0xff) | *value_addr & ~(7 << (shift & 0xff));\n    }\n    if (values[0] - 0x10 < 2) {\n      local_var = *params;\n      if (local_var == DAT_08003a10) {\n        if ((*(uint32_t *)(local_var + 8) & 0x800000) == 0) {\n          *(uint32_t *)(local_var + 8) = *(uint32_t *)(local_var + 8) | 0x800000;\n          if (values[0] == 0x10) {\n            for (local_var = (uint32_t)((uint64_t)DAT_08003a18 * (uint64_t)*(uint32_t *)PTR_DAT_08003a14 >> 0x32) * 10; local_var != 0; local_var = local_var + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        params[10] = params[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(params + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_param_values_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_index",
                "param_2": "data_array",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "updated_value_3"
            },
            "code": "void update_data_08005d48(int data_index, uint *data_array)\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint updated_value_3;\n  \n  updated_value_1 = *(uint *)(data_index + 0x20) & 0xfffffeff;\n  updated_value_2 = *(uint *)(data_index + 4);\n  updated_value_3 = *data_array;\n  updated_value_1 = (updated_value_1 & 0xfffffdff) | (data_array[2] << 8);\n  if (data_index == PTR_08005da8) {\n    updated_value_1 = (updated_value_1 & 0xfffff7ff) | (data_array[3] << 8) & 0xfffffbff;\n    updated_value_2 = (updated_value_2 & 0xffffcfff) | (data_array[5] << 4) | (data_array[6] << 4);\n  }\n  *(uint *)(data_index + 4) = updated_value_2;\n  *(uint *)(data_index + 0x1c) = *(uint *)(data_index + 0x1c) & 0xffffff8c | updated_value_3;\n  *(uint *)(data_index + 0x3c) = data_array[1];\n  *(uint *)(data_index + 0x20) = updated_value_1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 288419,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_08005188",
            "FUN_080072fa",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08006d80",
            "FUN_0800885c",
            "FUN_08008990",
            "FUN_0800288c",
            "FUN_080027f0"
        ],
        [
            "FUN_0800a042",
            "FUN_08001bf8",
            "FUN_08000a64",
            "FUN_08008880",
            "FUN_08003002",
            "FUN_08002b68",
            "FUN_080036a2"
        ],
        [
            "FUN_08002c00",
            "FUN_08003048",
            "FUN_08008f0e",
            "FUN_08000488"
        ],
        [
            "FUN_08002c14",
            "FUN_08001b48"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009db0",
            "FUN_08009a80",
            "FUN_080098d8",
            "FUN_08009c7c"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08009358"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_080025ac",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ]
    ],
    "locked_functions": []
}