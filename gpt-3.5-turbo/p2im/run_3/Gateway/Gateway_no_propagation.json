{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "run_all_functions_08007246",
                "FUN_08003748": "initialize_data",
                "FUN_08004046": "setup_configuration",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void run_all_functions_08007246(void)\n{\n  initialize_data();\n  setup_configuration();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004046",
                "FUN_08003748",
                "FUN_08007244"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "run_all_functions_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "result",
                "param_2": "data_address",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "sVar1": "data_length",
                "puVar2": "unused_pointer",
                "iVar3": "temp_result",
                "unaff_r4": "unused_register4",
                "unaff_r5": "unused_register5",
                "in_lr": "unused_register_lr"
            },
            "code": "void process_data_0800a042(int *result, int data_address, int unused_param1, int unused_param2) {\n    short data_length = *(short *)(data_address + 0xe);\n    if ((int)((uint)*(ushort *)(data_address + 0xc) << 0x17) < 0) {\n        process_data_0800a042(result, data_length, 0, 2);\n    }\n    *(ushort *)(data_address + 0xc) = *(ushort *)(data_address + 0xc) & 0xefff;\n    int temp_result = 0;\n    if (FUN_0800885c((int)data_length, unused_param1, unused_param2, unused_param2, unused_param2, PTR_DAT_0800a0c8, PTR_DAT_0800a0cc, in_lr) == -1 && *(int *)PTR_DAT_0800a0c8 != 0) {\n        temp_result = *(int *)PTR_DAT_0800a0c8;\n    }\n    *result = temp_result;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_080086dc": "data_array",
                "PTR_DAT_080086e0": "ptr_array",
                "*(byte *)(param_1 + 0x44)": "*(char *)(data_ptr + 0x44)",
                "data_array[(uint)bVar1 * 4]": "data_array[index]",
                "ptr_array[(uint)bVar1 * 4]": "ptr_array[index]",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_ptr + 0x5a)",
                "FUN_08003f30": "print_data",
                "FUN_08003f94": "print_data",
                "PTR_DAT_080086e4": "ptr_val_array",
                "*(int *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4)": "ptr_val_array[index]",
                "*(int *)(param_1 + 100)": "int_val",
                "*(ushort *)(param_1 + 0x6a)": "*(unsigned short *)(data_ptr + 0x6a)",
                "FUN_0800688e": "update_value"
            },
            "code": "void update_data_08008694(int data_ptr, int new_data) {\n  if (data_ptr != 0) {\n    int index = *(char *)(data_ptr + 0x44);\n    int *PTR_DAT_080086dc = (int *)PTR_DAT_080086dc;\n    int *PTR_DAT_080086e0 = (int *)PTR_DAT_080086e0;\n    PTR_DAT_080086dc[index] = new_data;\n    PTR_DAT_080086e0[index] = data_ptr;\n    int char_val = *(char *)(data_ptr + 0x5a);\n    print_data(char_val);\n    print_data(char_val);\n    int ptr_val = *(int *)(PTR_DAT_080086e4 + index * 4);\n    int int_val = *(int *)(data_ptr + 100) + *(unsigned short *)(data_ptr + 0x6a);\n    update_value(ptr_val, int_val, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_data_structures_08002ce0",
                "param_1": "data_structure",
                "iVar1": "data_structure_ptr",
                "PTR_FUN_08002c2c_1_08002d90": "function_pointer1",
                "PTR_LAB_08002c40_1_08002d94": "function_pointer2",
                "PTR_LAB_08002c7c_1_08002d98": "function_pointer3",
                "PTR_LAB_08002c90_1_08002d9c": "function_pointer4",
                "PTR_LAB_08002c54_1_08002da0": "function_pointer5",
                "PTR_LAB_08002c68_1_08002da4": "function_pointer6",
                "PTR_LAB_08002ca4_1_08002da8": "function_pointer7",
                "PTR_LAB_08002cb8_1_08002dac": "function_pointer8",
                "PTR_LAB_08002e1a_1_08002db0": "function_pointer9",
                "PTR_LAB_08002dea_1_08002db4": "function_pointer10",
                "PTR_LAB_08002cd0_1_08002db8": "function_pointer11"
            },
            "code": "int initialize_data_structures_08002ce0(int data_structure)\n{\n  int data_structure_ptr = data_structure + 0x44;\n  void *PTR_FUN_08002c2c_1_08002d90 = PTR_FUN_08002c2c_1_08002d90;\n  void *PTR_LAB_08002c40_1_08002d94 = PTR_LAB_08002c40_1_08002d94;\n  void *PTR_LAB_08002c7c_1_08002d98 = PTR_LAB_08002c7c_1_08002d98;\n  void *PTR_LAB_08002c90_1_08002d9c = PTR_LAB_08002c90_1_08002d9c;\n  void *PTR_LAB_08002c54_1_08002da0 = PTR_LAB_08002c54_1_08002da0;\n  void *PTR_LAB_08002c68_1_08002da4 = PTR_LAB_08002c68_1_08002da4;\n  void *PTR_LAB_08002ca4_1_08002da8 = PTR_LAB_08002ca4_1_08002da8;\n  void *PTR_LAB_08002cb8_1_08002dac = PTR_LAB_08002cb8_1_08002dac;\n  void *PTR_LAB_08002e1a_1_08002db0 = PTR_LAB_08002e1a_1_08002db0;\n  void *PTR_LAB_08002dea_1_08002db4 = PTR_LAB_08002dea_1_08002db4;\n  void *PTR_LAB_08002cd0_1_08002db8 = PTR_LAB_08002cd0_1_08002db8;\n  FUN_0800314e(data_structure + 0x40);\n  *(undefined *)(data_structure + 0xc4) = 0;\n  *(undefined4 *)(data_structure + 200) = 0;\n  *(undefined *)(data_structure + 0x1f8) = 0;\n  FUN_08003306(data_structure_ptr, 0xe0, PTR_FUN_08002c2c_1_08002d90, 0);\n  FUN_08003306(data_structure_ptr, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  FUN_08003306(data_structure_ptr, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  FUN_08003306(data_structure_ptr, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  FUN_08003306(data_structure_ptr, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  FUN_08003306(data_structure_ptr, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  FUN_08003366(data_structure_ptr, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  FUN_08003370(data_structure_ptr, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  FUN_08003346(data_structure_ptr, 0x79, PTR_LAB_08002e1a_1_08002db0, data_structure);\n  FUN_08003350(data_structure_ptr, 0xf9, PTR_LAB_08002dea_1_08002db4, data_structure);\n  FUN_08003350(data_structure_ptr, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data_structure;\n}",
            "called": [
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_08003306",
                "FUN_08003350",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_08005188",
                "param_1": "data",
                "iVar1": "data_ptr",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "*(uint *)(iVar1 + 0x18)": "*(uint *)(data_ptr + 0x18)",
                "*(uint *)(iVar1 + 0x14)": "*(uint *)(data_ptr + 0x14)",
                "*(uint *)(iVar1 + 4)": "*(uint *)(data_ptr + 4)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)data + 0x3e)",
                "DAT_080052e8": "DAT_080052e8",
                "DAT_080052d4": "DAT_080052d4",
                "DAT_080052dc": "DAT_080052dc",
                "DAT_080052ec": "DAT_080052ec",
                "DAT_080052e4": "DAT_080052e4"
            },
            "code": "void process_data_08005188(int *data)\n{\n  int data_ptr = *data;\n  uint var1 = *(uint *)(data_ptr + 0x18);\n  uint var2 = *(uint *)(data_ptr + 0x14);\n  uint var3 = *(uint *)(data_ptr + 4);\n  char flag = *(char *)((int)data + 0x3e);\n  \n  if (flag == '\\x10' || flag == '@') {\n    if ((var2 & 0x10001) == 0 || (var3 & 0x200) == 0) {\n      if ((DAT_080052e8 & var2) == 0 || (var3 & 0x200) == 0) {\n        if ((DAT_080052d4 & var2) != 0 && (var3 & 0x200) != 0) {\n          execute_function1(data);\n        }\n      }\n      else {\n        execute_function2(data);\n      }\n    }\n    else {\n      execute_function3(data);\n    }\n    if ((DAT_080052dc & var1) == 0) {\n      if ((DAT_080052ec & var2) != 0 && (var3 & 0x400) != 0 && (DAT_080052e4 & var2) == 0) {\n        execute_function4(data);\n        return;\n      }\n      if ((DAT_080052e4 & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function5(data);\n        return;\n      }\n    }\n    else {\n      if ((DAT_080052e0 & var2) != 0 && (var3 & 0x400) != 0 && (DAT_080052e4 & var2) == 0) {\n        execute_function6(data);\n        return;\n      }\n      if ((DAT_080052e4 & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function7(data);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_080052d4 & var2) != 0 && (var3 & 0x200) != 0) {\n      execute_function8();\n      return;\n    }\n    if ((DAT_080052d8 & var2) != 0 && (var3 & 0x200) != 0) {\n      execute_function9(data);\n      return;\n    }\n    if ((DAT_080052dc & var1) == 0) {\n      if ((DAT_080052ec & var2) != 0 && (var3 & 0x400) != 0 && (DAT_080052e4 & var2) == 0) {\n        execute_function10(data);\n        return;\n      }\n      if ((DAT_080052e4 & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function11(data);\n      }\n    }\n    else {\n      if ((DAT_080052e0 & var2) != 0 && (var3 & 0x400) != 0 && (DAT_080052e4 & var2) == 0) {\n        execute_function12(data);\n        return;\n      }\n      if ((DAT_080052e4 & var2) != 0 && (var3 & 0x200) != 0) {\n        execute_function13(data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004396",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_080043a2",
                "FUN_0800457c",
                "FUN_08004ac2",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004b82",
                "FUN_08004ccc",
                "FUN_08004a76",
                "FUN_08004e3c",
                "FUN_0800430c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "find_and_initialize_08009db0",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "node_data_length",
                "piVar2": "node_data",
                "iVar3": "node_data_pointer",
                "ppiVar4": "node_pointer",
                "*ppiVar4": "current_node",
                "PTR_PTR_DAT_08009e24": "node_data_pointer",
                "FUN_08009d50": "initialize_node",
                "FUN_080091c6": "initialize_node_data"
            },
            "code": "int * find_and_initialize_08009db0(int *error_code, int param_2, int param_3, int param_4)\n{\n  int *current_node;\n  int *node_data;\n  int node_data_length;\n  int **node_pointer;\n  int *new_node;\n\n  current_node = *(int **)PTR_PTR_DAT_08009e24;\n  if (*(int *)(current_node + 0x18) == 0) {\n    initialize_node(current_node);\n  }\n  node_pointer = (int **)(current_node + 0x48);\n  do {\n    node_data = node_pointer[2];\n    node_data_length = (int)node_pointer[1];\n    while (node_data_length = node_data_length - 1, node_data_length >= 0) {\n      if (*(short *)(node_data + 3) == 0) {\n        *(undefined2 *)(node_data + 0xe) = 0xffff;\n        node_data[0x19] = 0;\n        *(undefined2 *)(node_data + 3) = 1;\n        *node_data = 0;\n        node_data[2] = 0;\n        node_data[1] = 0;\n        node_data[4] = 0;\n        node_data[5] = 0;\n        node_data[6] = 0;\n        initialize_node_data(node_data + 0x17, 0, 8, 1, param_4);\n        node_data[0xd] = 0;\n        node_data[0xe] = 0;\n        node_data[0x12] = 0;\n        node_data[0x13] = 0;\n        return node_data;\n      }\n      node_data = node_data + 0x1a;\n    }\n    if (*node_pointer == (int *)0x0) {\n      new_node = (int *)create_node_data(error_code, 4);\n      *node_pointer = new_node;\n      if (new_node == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    node_pointer = (int **)*node_pointer;\n  } while(true);\n}",
            "called": [
                "FUN_08009d24",
                "FUN_08009d50",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "find_and_initialize_08009db0"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "pcVar1": "function",
                "PTR_DAT_08002c3c": "function_pointer_ptr"
            },
            "code": "void execute_function_08002c2c(code* func_ptr, int param_1, int param_2, int param_3, int param_4) {\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(param_1, param_2, param_3, func_ptr, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "print_data_08001bf8",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "FUN_0800288c": "call_function"
            },
            "code": "void print_data_08001bf8(undefined4 num1, undefined4 num2, undefined4 num3, undefined4 num4)\n{\n  call_function(PTR_DAT_08001c04, num1, num3, num4, num4);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "print_data_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "process_data_080072f0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "buffer1",
                "param_4": "buffer2",
                "FUN_080042d4": "copy_data"
            },
            "code": "void process_data_080072f0(void *data, int16_t size, void *buffer1, void *buffer2) {\n  copy_data(data, size, buffer1, buffer2, buffer2);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "process_data_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* str){\n                      char* current_char = str;\n                      while(*current_char != \"\\0\"){\n                        current_char++;\n                      }\n                      return current_char;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08002e44",
                "FUN_08008e7c",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "data2",
                "puVar3": "data_ptr",
                "uVar4": "condition2",
                "uVar5": "data1",
                "FUN_0800694c": "process_condition1",
                "FUN_080064cc": "process_condition2",
                "FUN_08006932": "process_condition3",
                "do_nothing_0800877c": "do_nothing",
                "FUN_080064b0": "process_condition4",
                "PTR_LAB_08006b0c_1_08006b08": "some_pointer"
            },
            "code": "void process_data_080069ec(uint **data)\n{\n  int condition1, condition2;\n  uint *data_ptr;\n  uint data1, data2;\n  \n  data_ptr = *data;\n  data1 = *data_ptr;\n  data2 = data_ptr[3];\n  if ((((data1 & 0xf) == 0) && ((data1 & 0x20) != 0)) && ((data2 & 0x20) != 0))) {\n    process_condition1(data);\n    return;\n  }\n  if (((data1 & 0xf) == 0) || ((condition2 = data_ptr[5] & 1, condition2 == 0 && ((data2 & 0x120) == 0)))) {\n    if (((data1 & 0x80) != 0) && ((data2 & 0x80) != 0))) {\n      process_condition2(data);\n      return;\n    }\n    if (((data1 & 0x40) != 0) && ((data2 & 0x40) != 0))) {\n      process_condition3(data);\n    }\n  }\n  else {\n    if (((data1 & 1) != 0) && ((data2 & 0x100) != 0))) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((data1 & 4) != 0) && (condition2 != 0))) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((data1 & 2) != 0) && (condition2 != 0))) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((data1 & 8) != 0) && (condition2 != 0))) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((data1 & 0x20) != 0) && ((data2 & 0x20) != 0))) {\n        process_condition1(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0))) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      process_condition4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int result = some_function(data[13]);\n      if (result != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006932",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_0800694c",
                "FUN_080064b0",
                "FUN_080064cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "initialize_param_0800a168",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void initialize_param_0800a168(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int status = FUN_08008858(param_2, param_3, param_4, param_4, param_4);\n  if(status == -1 && *(int *)ptr != 0)\n  {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "initialize_param_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "flags_ptr",
                "param_3": "data_len",
                "param_4": "param_4",
                "uVar1": "data_value",
                "iVar2": "result"
            },
            "code": "int process_data_080067ac(int *data_ptr, ushort *flags_ptr, int data_len, undefined4 param_4)\n{\n    undefined4 uVar1;\n    int result;\n    \n    if (*(char *)((int)data_ptr + 0x39) == ' ') {\n        if (flags_ptr == (ushort *)0x0) {\n            result = 1;\n        }\n        else if (data_len == 0) {\n            result = 1;\n        }\n        else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(data_ptr + 0xe) = 1;\n            data_ptr[0xf] = 0;\n            *(undefined *)((int)data_ptr + 0x39) = 0x21;\n            uVar1 = get_data(data_ptr, param_4);\n            *(short *)(data_ptr + 9) = (short)data_len;\n            *(short *)((int)data_ptr + 0x26) = (short)data_len;\n            while (*(short *)((int)data_ptr + 0x26) != 0) {\n                *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n                if (data_ptr[2] == 0x1000) {\n                    result = process_data_080067ac(data_ptr, 0x80, 0, uVar1, param_4);\n                    if (result != 0) {\n                        return 3;\n                    }\n                    *(uint *)(*data_ptr + 4) = *flags_ptr & 0x1ff;\n                    if (data_ptr[4] == 0) {\n                        flags_ptr = flags_ptr + 1;\n                    }\n                    else {\n                        flags_ptr = (ushort *)((int)flags_ptr + 1);\n                    }\n                }\n                else {\n                    result = process_data_080067ac(data_ptr, 0x80, 0, uVar1, param_4);\n                    if (result != 0) {\n                        return 3;\n                    }\n                    *(uint *)(*data_ptr + 4) = (uint)*(byte *)flags_ptr;\n                    flags_ptr = (ushort *)((int)flags_ptr + 1);\n                }\n            }\n            result = process_data_080067ac(data_ptr, 0x40, 0, uVar1, param_4);\n            if (result == 0) {\n                *(undefined *)((int)data_ptr + 0x39) = 0x20;\n                *(undefined *)(data_ptr + 0xe) = 0;\n            }\n            else {\n                result = 3;\n            }\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_value_in_array_0800735a(int value_to_find, char *array)\n{\n    while (true)\n    {\n        if (*array == -1)\n        {\n            return 0xffffffff;\n        }\n        if (*array == value_to_find)\n        {\n            break;\n        }\n        array += 0xc;\n    }\n    return *(unsigned int *)(array + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x130)": "*ptr1",
                "*(undefined2 *)(param_1 + 0x134)": "*ptr2",
                "*(undefined2 *)(param_1 + 0x136)": "*ptr3",
                "*(int *)(param_1 + 0x138)": "*ptr4",
                "*(undefined2 *)(param_1 + 0x13c)": "*ptr5",
                "*(undefined2 *)(param_1 + 0x13e)": "*ptr6"
            },
            "code": "void initialize_struct_08008c20(int struct_ptr) {\n    int* ptr1 = (int*)(struct_ptr + 0x130);\n    *ptr1 = struct_ptr + 0x11;\n    \n    short* ptr2 = (short*)(struct_ptr + 0x134);\n    *ptr2 = 0;\n    \n    short* ptr3 = (short*)(struct_ptr + 0x136);\n    *ptr3 = 0;\n    \n    int* ptr4 = (int*)(struct_ptr + 0x138);\n    *ptr4 = struct_ptr + 0x51;\n    \n    short* ptr5 = (short*)(struct_ptr + 0x13c);\n    *ptr5 = 0;\n    \n    short* ptr6 = (short*)(struct_ptr + 0x13e);\n    *ptr6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_execute_commands_08000a64",
                "iVar1": "command_result",
                "uVar2": "command_index",
                "PTR_DAT_08000ad8": "commands_array",
                "PTR_DAT_08000adc": "first_command_parameters_array",
                "PTR_DAT_08000ae0": "second_command_parameters_array",
                "*PTR_DAT_08000ae4": "final_command_status",
                "FUN_080036ac": "execute_command",
                "FUN_0800738a": "check_command",
                "FUNC_080005f8": "print_command_result",
                "FUN_08002a26": "execute_final_command"
            },
            "code": "void check_and_execute_commands_08000a64(void)\n{\n  int command_result;\n  uint8_t command_index;\n  for (command_index = 0; command_index < 0x3c; command_index++) {\n    if (command_index < 0x3c) {\n      if (PTR_DAT_08000ad8[command_index] == -1) {\n        command_result = 0;\n      }\n      else {\n        command_result = execute_command((int)(char)PTR_DAT_08000ad8[command_index]);\n        if (command_result == 0) {\n          command_result = 0;\n        }\n        else {\n          command_result = execute_command_with_parameters((int)(char)PTR_DAT_08000ad8[command_index]);\n          if (command_result == 1) {\n            command_result = 0;\n          }\n          else {\n            command_result = check_command((int)(char)PTR_DAT_08000ad8[command_index], PTR_DAT_08000adc);\n            if (command_result == 0) {\n              command_result = check_command((int)(char)PTR_DAT_08000ad8[command_index], PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      command_result = 0;\n    }\n    if (command_result != 0) {\n      print_command_result(command_index, 6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  execute_final_command(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_execute_commands_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "execute_main_function_0800723c",
                "FUN_08003760": "call_sub_function"
            },
            "code": "void execute_main_function_0800723c(void)\n{\n    call_sub_function();\n    return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "execute_main_function_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "process_input_080043a2",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "DAT_080046b0": "counter_ptr",
                "DAT_080046b4": "state_ptr",
                "DAT_080046b8": "data_ptr",
                "DAT_080046bc": "temp_ptr"
            },
            "code": "uint32_t process_input_080043a2(uint32_t **input)\n{\n    uint32_t *flag_ptr;\n    uint32_t *DAT_080046b0;\n    uint32_t *DAT_080046b4;\n    uint32_t *DAT_080046b8;\n    uint32_t *DAT_080046bc;\n\n    flag_ptr = input[11];\n    DAT_080046b0 = input[10];\n    DAT_080046b4 = input[9];\n    DAT_080046b8 = input[8];\n    DAT_080046bc = input[7];\n\n    if ((*((char *)((int)input + 0x3d)) == '\"') && ((input[20] != (uint32_t *)0x0) || (*(((char *)((int)input + 0x3e))) != '@')))\n    {\n        if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000))\n        {\n            **input = **input | 0x100;\n            input[20] = (uint32_t *)((int)input[20] + 1);\n        }\n        else\n        {\n            switch (*(uint16_t *)((int)input + 0x2a))\n            {\n                case 0:\n                    **input = **input | 0x200;\n                    break;\n                case 1:\n                    if (flag_ptr == (uint32_t *)0xffff0000)\n                    {\n                        **input = **input & 0xfffffbff;\n                        DAT_080046bc = *input;\n                        if ((DAT_080046bc[1] & 0x800) == 0)\n                        {\n                            *DAT_080046bc = *DAT_080046bc | 0x200;\n                        }\n                        else\n                        {\n                            *DAT_080046bc = *DAT_080046bc & 0xfffffbff;\n                        }\n                    }\n                    else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12))\n                    {\n                        **input = **input & 0xfffffbff;\n                        **input = **input | 0x200;\n                    }\n                    else if (flag_ptr == (uint32_t *)0x2)\n                    {\n                        **input = **input | 0x400;\n                    }\n                    else\n                    {\n                        **input = **input & 0xfffffbff;\n                    }\n                    break;\n                case 2:\n                    if (flag_ptr == (uint32_t *)0x2)\n                    {\n                        **input = **input | 0x400;\n                    }\n                    else\n                    {\n                        **input = **input | 0x800;\n                        **input = **input & 0xfffffbff;\n                    }\n                    DAT_080046bc = *input;\n                    if ((DAT_080046bc[1] & 0x800) != 0)\n                    {\n                        DAT_080046bc[1] = DAT_080046bc[1] | 0x1000;\n                    }\n                    break;\n                default:\n                    **input = **input | 0x400;\n                    DAT_080046bc = *input;\n                    if ((DAT_080046bc[1] & 0x800) != 0)\n                    {\n                        DAT_080046bc[1] = DAT_080046bc[1] | 0x1000;\n                    }\n                    break;\n            }\n            input[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "dest_uc",
                "sVar2": "length",
                "puVar3": "dest_c",
                "*param_1": "PTR_data",
                "*(char *)((int)param_1 + 0x3a)": "*str",
                "param_1[2]": "type",
                "param_1[4]": "data_4",
                "*(ushort *)param_1[10]": "*(unsigned short *)dest",
                "*(undefined4 *)(*param_1 + 4)": "*(unsigned int *)(*PTR_data + 4)",
                "param_1[10]": "dest_offset",
                "*(ushort *)param_1[10] = (ushort)((uint)(*(int *)(*param_1 + 4) << 0x17) >> 0x17);\n      param_1[10] = param_1[10] + 2;": "*(unsigned short *)dest = (unsigned short)((*(unsigned int *)(*PTR_data + 4) << 0x17) >> 0x17);\n        dest_offset += 2;",
                "*(ushort *)param_1[10] = (ushort)*(undefined4 *)(*param_1 + 4) & 0xff;\n      param_1[10] = param_1[10] + 1;": "*(unsigned short *)dest = *(unsigned int *)(*PTR_data + 4) & 0xff;\n        dest_offset++;",
                "puVar3 = (undefined *)param_1[10];\n    param_1[10] = (int)(puVar3 + 1);\n    *puVar3 = (char)*(undefined4 *)(*param_1 + 4);": "char *dest = (char *)dest_offset;\n        *dest = *(unsigned int *)(*PTR_data + 4);\n        dest_offset++;",
                "pbVar1 = (byte *)param_1[10];\n    param_1[10] = (int)(pbVar1 + 1);\n    *pbVar1 = (byte)*(undefined4 *)(*param_1 + 4) & 0x7f;": "unsigned char *dest_uc = (unsigned char *)dest_offset;\n        *dest_uc = *(unsigned int *)(*PTR_data + 4) & 0x7f;\n        dest_offset++;",
                "sVar2 = *(short *)((int)param_1 + 0x2e) + -1;\n  *(short *)((int)param_1 + 0x2e) = sVar2;\n  if (sVar2 != 0) {\n    return 0;\n  }": "length--;\n    *(short *)(PTR_data + 0x2e) = length;\n    if (length != 0) {\n        return 0;\n    }",
                "*(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xffffffdf;\n  *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xfffffeff;\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffffe;\n  *(undefined *)((int)param_1 + 0x3a) = 0x20;\n  FUN_0800870c();": "*(unsigned int *)(*PTR_data + 0xc) &= 0xffffffdf;\n    *(unsigned int *)(*PTR_data + 0xc) &= 0xfffffeff;\n    *(unsigned int *)(*PTR_data + 0x14) &= 0xfffffffe;\n    *str = ' ';\n    FUN_0800870c();"
            },
            "code": "int process_data_0800694c(int *data)\n{\n    char *str = (char *)(data + 0x3a);\n    if (*str != '\"') {\n        return 2;\n    }\n    \n    int type = data[2];\n    int length = *(short *)(data + 0x2e);\n    \n    if (type == 0x1000) {\n        if (data[4] == 0) {\n            *(unsigned short *)data[10] = (unsigned short)((*(int *)(*data + 4) << 0x17) >> 0x17);\n            data[10] += 2;\n        }\n        else {\n            *(unsigned short *)data[10] = *(unsigned int *)(*data + 4) & 0xff;\n            data[10]++;\n        }\n    }\n    else {\n        if (data[4] == 0) {\n            char *dest = (char *)data[10];\n            *dest = *(unsigned int *)(*data + 4);\n            data[10]++;\n        }\n        else {\n            unsigned char *dest = (unsigned char *)data[10];\n            *dest = *(unsigned int *)(*data + 4) & 0x7f;\n            data[10]++;\n        }\n    }\n    \n    length--;\n    *(short *)(data + 0x2e) = length;\n    if (length != 0) {\n        return 0;\n    }\n    \n    *(unsigned int *)(*data + 0xc) &= 0xffffffdf;\n    *(unsigned int *)(*data + 0xc) &= 0xfffffeff;\n    *(unsigned int *)(*data + 0x14) &= 0xfffffffe;\n    *str = ' ';\n    FUN_0800870c();\n    return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_flags_and_call_function_08006280",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "data_ptr"
            },
            "code": "int set_flags_and_call_function_08006280(uint **data, int flag)\n{\n  uint *data_ptr = *data;\n  switch(flag) {\n    case 0:\n      data_ptr[3] |= 2;\n      break;\n    case 4:\n      data_ptr[3] |= 4;\n      break;\n    case 8:\n      data_ptr[3] |= 8;\n      break;\n    case 0xc:\n      data_ptr[3] |= 0x10;\n  }\n  call_function(*data, flag, 1);\n  if (data_ptr == PTR_080062f0) {\n    data_ptr[0x11] |= 0x8000;\n  }\n  **data |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "decode_and_process_08007258",
                "param_1": "byte",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "decoded_byte",
                "local_20": "bit_mask",
                "local_1c": "param1",
                "local_18": "param2",
                "local_14": "unused_variable",
                "DAT_080072d0": "data_ptr",
                "DAT_080072d4": "data_ptr2"
            },
            "code": "void decode_and_process_08007258(uint8_t byte, uint32_t param1, uint32_t param2)\n{\n    uint32_t decoded_byte = decode_byte((byte << 0x18) >> 0x1c);\n    uint16_t bit_mask = 1 << (byte & 0xf) & 0xffff;\n    uint32_t* DAT_080072d0 = (uint32_t*)0x080072d0;\n    DAT_080072d0[0x18 / sizeof(uint32_t)] |= 1;\n    if ((byte - 0xd & 0xff) < 2)\n    {\n        uint32_t* DAT_080072d4 = (uint32_t*)0x080072d4;\n        DAT_080072d4[0x4 / sizeof(uint32_t)] &= 0xf8ffffff;\n        DAT_080072d4[0x4 / sizeof(uint32_t)] |= 0x4000000;\n    }\n    if ((byte == 0xf) || (byte == 0x13) || (byte == 0x14))\n    {\n        uint32_t* DAT_080072d4 = (uint32_t*)0x080072d4;\n        DAT_080072d4[0x4 / sizeof(uint32_t)] &= 0xf8ffffff;\n        DAT_080072d4[0x4 / sizeof(uint32_t)] |= 0x2000000;\n    }\n    process_data(decoded_byte, bit_mask, param1, param2);\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "decode_and_process_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "process_data_0800a0ec",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void process_data_0800a0ec(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *data_ptr;\n    int status;\n\n    data_ptr = PTR_DAT_0800a10c;\n    *(undefined4 *)PTR_DAT_0800a10c = 0;\n    status = FUN_08008846(arg1, arg2, arg2, 0, arg3);\n    if ((status == -1) && (*(int *)data_ptr != 0)) {\n        *result = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "process_data_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "set_params_08008df8",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4"
            },
            "code": "void set_params_08008df8(undefined4 *params, undefined param1, undefined param2, undefined param3, undefined param4) {\n    *params = PTR_PTR_LAB_08008dbe_1_08008e10;\n    *(undefined *)(params + 1) = param1;\n    *(undefined *)((int)params + 5) = param2;\n    *(undefined *)((int)params + 6) = param3;\n    *(undefined *)((int)params + 7) = param4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "set_params_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "determine_result_08006c7c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint32_t determine_result_08006c7c(uint32_t input1, uint32_t input2, uint32_t input3, uint32_t input4) {\n  int32_t result = FUN_08007376(input1, PTR_DAT_08006ca4, input3, input4, input4);\n  uint32_t shifted_result = (uint32_t)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 0xc;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "determine_result_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_to_0_at_index_08006b5c",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "bit_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_value",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "bit_mask",
                "uVar1 = (param_1 << 0x18) >> 0x1c;": "bit_index = (index << 0x18) >> 0x1c;",
                "*(uint *)(param_2 + uVar1 * 4) = *(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf));": "*array_value = *array_value & ~bit_mask;"
            },
            "code": "void set_bit_to_0_at_index_08006b5c(uint index, int *array) {\n    uint bit_index = (index << 0x18) >> 0x1c;\n    uint *array_value = (uint *)(array + bit_index * 4);\n    uint bit_mask = 1 << (index & 0xf);\n    *array_value = *array_value & ~bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_to_0_at_index_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "check_param_08007376",
                "param_1": "param",
                "uVar1": "result",
                "FUN_0800735a": "get_result"
            },
            "code": "int check_param_08007376(int param){\n\tif (param == -1){\n\t\treturn -1;\n\t}\n\tint result = get_result();\n\treturn result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "imported": false,
            "current_name": "check_param_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_software_interrupt_08000188",
                "PTR_": "<unchanged>",
                "DAT_": "<unchanged>",
                "software_interrupt": "<unchanged>",
                "0x3f": "SW_INTERRUPT_CODE"
            },
            "code": "void trigger_software_interrupt_08000188(void)\n{\n  software_interrupt(SW_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "count",
                "puVar2": "current_data",
                "puVar3": "previous_data"
            },
            "code": "void process_data_08004f3c(uint **data)\n{\n  int count;\n  uint *current_data;\n  uint *previous_data;\n\n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  previous_data = *data;\n  if ((previous_data[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = (uint *)0x0;\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      process_data_08004f3c_08008020(data);\n    }\n  }\n  else {\n    previous_data[1] = previous_data[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      count = process_data_08004f3c_08004050(data[14]);\n      if (count != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          current_data = data[9];\n          data[9] = (uint *)((int)current_data + 1);\n          *(char *)current_data = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0xd])();\n      }\n    }\n    else {\n      data[13][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      count = process_data_08004f3c_08004050(data[13]);\n      if (count != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_08005080;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_08004f3c_08007ff0(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004050",
                "FUN_08007ff0",
                "FUN_08004f3a",
                "FUN_08008020"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_data_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "cVar1": "current_char",
                "iVar2": "temp_int",
                "pcVar3": "input_string"
            },
            "code": "void process_input_080033cc(int input_ptr, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    char current_char;\n    int temp_int;\n    char* input_string;\n    input_string = *(char**)(input_ptr + 4);\n    current_char = *input_string;\n    if (current_char == 'q') {\n        if (*(int*)(input_ptr + 0x68) != 0) {\n            temp_int = process_input_080033cc(input_ptr, *(int*)(input_ptr + 0x18) - 1, input_string + 1, input_string, arg4);\n            process_output(input_ptr, 0, temp_int + 1);\n            (**(code**)(input_ptr + 0x68))(*(undefined4*)(input_ptr + 0x40), *(int*)(input_ptr + 4) + 1);\n            return;\n        }\n    }\n    else if (current_char == 'y') {\n        if (*(code**)(input_ptr + 0x70) != (code*)0x0) {\n            if (*(uint*)(input_ptr + 0x18) < 3) {\n                (**(code**)(input_ptr + 0x70))(*(undefined4*)(input_ptr + 0x34), 0, 0);\n                return;\n            }\n            temp_int = process_input_080033cc(input_ptr, *(uint*)(input_ptr + 0x18) - 3, input_string + 3, input_string, arg4);\n            process_output(input_ptr, 0, temp_int + 3);\n            temp_int = *(int*)(input_ptr + 4);\n            (**(code**)(input_ptr + 0x70))(*(undefined4*)(input_ptr + 0x34), *(undefined*)(temp_int + 1), *(undefined*)(temp_int + 2), temp_int + 3);\n            return;\n        }\n    }\n    else if (*(code**)(input_ptr + 0x6c) != (code*)0x0) {\n        (**(code**)(input_ptr + 0x6c))(*(undefined4*)(input_ptr + 0x44), current_char, *(int*)(input_ptr + 0x18) - 1, input_string + 1);\n    }\n    return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_status_08003de4",
                "param_1": "status",
                "iVar1": "result",
                "*(char *)(param_1 + 0x24)": "*status_ptr",
                "*(undefined *)(param_1 + 0x24)": "*status_ptr",
                "FUN_08003b8c()": "check_connection()",
                "*(uint *)(param_1 + 0x28)": "*flag_ptr",
                "0xffffeefe": "FLAG_MASK",
                "1": "FLAG_SET"
            },
            "code": "int check_status_08003de4(int status)\n{\n  int result;\n  char* status_ptr = (char*)(status + 0x24);\n  if (*status_ptr == 1)\n  {\n    return 2;\n  }\n  *status_ptr = 1;\n  result = check_connection();\n  if (result == 0)\n  {\n    uint* flag_ptr = (uint*)(status + 0x28);\n    *flag_ptr = (*flag_ptr & 0xffffeefe) | 1;\n  }\n  *status_ptr = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servo_index",
                "param_2": "pin",
                "param_3": "angle",
                "param_4": "param_4",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000570": "last_servo_index_ptr",
                "PTR_DAT_08000574": "servo_pin_numbers",
                "PTR_DAT_08000578": "servo_pins",
                "PTR_DAT_0800057c": "servo_data_ptr",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached_ptr",
                "FUN_08002f14": "print_error_msg",
                "FUN_080025ac": "set_servo_angle",
                "FUN_08002634": "set_servo_angle"
            },
            "code": "void attach_servo_08000500(int servo_index, int pin, int angle, undefined4 param_4)\n{\n  byte servo_count = *PTR_DAT_0800056c;\n  if (servo_count > 11) {\n    print_error_msg(PTR_s_Max_servos_attached_08000580, \"Max servos attached.\", angle, param_4, param_4);\n    return;\n  }\n  byte last_servo_index = *PTR_DAT_08000570;\n  if (last_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = servo_count;\n    *PTR_DAT_0800056c = servo_count + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_servo_index - 1];\n    *PTR_DAT_08000570 = last_servo_index - 1;\n  }\n  if ((pin > 0) && (angle > 0)) {\n    set_servo_angle(PTR_DAT_0800057c + (uint)PTR_DAT_08000578[servo_index] * 3, servo_index, pin, angle);\n    return;\n  }\n  set_servo_angle(PTR_DAT_0800057c + (uint)PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}",
            "called": [
                "FUN_080025ac",
                "FUN_08002f14",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "attach_servo_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_memory_for_struct_08009d24",
                "param_1": "num_of_elements",
                "param_2": "struct_size",
                "iVar2": "total_size",
                "puVar1": "allocated_memory",
                "FUN_08009270": "allocate_memory",
                "FUN_080091c6": "initialize_memory"
            },
            "code": "undefined4* allocate_memory_for_struct_08009d24(int num_of_elements, int struct_size){\n  int total_size = (num_of_elements - 1) * struct_size;\n  undefined4* allocated_memory = (undefined4*)allocate_memory(total_size + 0x74);\n  if (allocated_memory != NULL) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_of_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    initialize_memory(allocated_memory + 3, 0, total_size + struct_size);\n  }\n  return allocated_memory;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_data_structures_0800344a",
                "param_1": "data_structure_ptr",
                "uVar1": "index"
            },
            "code": "void initialize_data_structures_0800344a(int data_structure_ptr)\n{\n    uint index = 0;\n    *(undefined4 *)(data_structure_ptr + 0x10) = 0;\n    *(undefined *)(data_structure_ptr + 0xc) = 0;\n    *(undefined *)(data_structure_ptr + 0xd) = 0;\n    for (index = 0; index < *(uint *)(data_structure_ptr + 8); index++)\n    {\n        *(undefined *)(*(int *)(data_structure_ptr + 4) + index) = 0;\n    }\n    *(undefined *)(data_structure_ptr + 0x14) = 0;\n    *(undefined4 *)(data_structure_ptr + 0x18) = 0;\n    if (*(code **)(data_structure_ptr + 0x78) != (code *)0x0)\n    {\n        (**(code **)(data_structure_ptr + 0x78))(*(undefined4 *)(data_structure_ptr + 0x48));\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "process_data_080071e4",
                "param_1": "data",
                "local_50": "local_array",
                "FUN_08007320": "get_data",
                "FUN_08006c7c": "check_status",
                "FUN_08007376": "get_flags",
                "FUN_080063c0": "process_array",
                "FUN_08006460": "process_array_with_flags",
                "FUN_08005e2e": "finalize_process"
            },
            "code": "void process_data_080071e4(undefined4 data)\n{\n  int status;\n  uint flags;\n  int local_array [17];\n  local_array[0] = get_data(data, PTR_DATA);\n  if ((local_array[0] != 0) && ((((status = check_status(data), status == 0 || (status == 4)) || (status == 8)) || ((status == 0xc || (status == 0x18)))))) {\n    flags = get_flags(data, PTR_DATA);\n    if ((flags & 0x100000) == 0) {\n      process_array(local_array,status);\n    }\n    else {\n      process_array_with_flags(local_array,status);\n    }\n    finalize_process(local_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c",
                "FUN_08006460",
                "FUN_080063c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "process_data_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(code **function_pointer)\n{\n  (**function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "FUN_08000ef8": "initialize",
                "FUN_08002ec4": "get_data",
                "FUN_08002ed2": "process",
                "FUN_08008abc": "get_value",
                "PTR_DAT_080023e0": "PTR_DATA",
                "PTR_DAT_080023e4": "PTR_INDEX_1",
                "PTR_DAT_080023ec": "PTR_INDEX_3",
                "PTR_DAT_080023e8": "PTR_INDEX_2",
                "PTR_DAT_080023f4": "PTR_DATA_1",
                "FUN_080036ac": "validate",
                "FUN_08002fa0": "check",
                "PTR_DAT_080023f0": "PTR_DATA_2",
                "FUN_08008880": "get_value_2",
                "FUN_08002ef2": "update_data",
                "PTR_DAT_080023f8": "PTR_DATA_3",
                "PTR_DAT_080023fc": "PTR_DATA_4",
                "FUN_08001c18": "process_data_2"
            },
            "code": "void process_data_080022f8()\n{\n  bool is_valid;\n  int result;\n  undefined4 value_1;\n  uint index_1;\n  uint index_2;\n  \n  initialize();\n  while (result = get_data(PTR_DAT_080023e0), result != 0) {\n    process(PTR_DAT_080023e0);\n  }\n  result = get_value();\n  *(int *)PTR_DAT_080023e4 = result;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(result - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index_1 = 0; index_1 < 0x3c; index_1 = (index_1 + 1) & 0xff) {\n      index_2 = index_1 - 0x2e & 0xff;\n      if (index_2 < 0xe) {\n        if (index_1 < 0x3c) {\n          result = (int)(char)PTR_DAT_080023f4[index_1];\n        }\n        else {\n          result = -1;\n        }\n        result = validate(result);\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          if (index_1 < 0x3c) {\n            result = (int)(char)PTR_DAT_080023f4[index_1];\n          }\n          else {\n            result = -1;\n          }\n          result = validate(result);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            result = check(PTR_DAT_080023e0, index_1);\n            if (result == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((*(int *)PTR_DAT_080023f0 >> index_2 & 1U) != 0)) {\n        value_1 = get_value_2(index_2);\n        update_data(PTR_DAT_080023e0, index_2, value_1);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index_1 = 0; (int)index_1 < (char)*PTR_DAT_080023f8 + 1; index_1 = (index_1 + 1) & 0xff) {\n        result = index_1 * 0xc;\n        process_data_080022f8_2(PTR_DAT_080023fc[result], *(undefined4 *)(PTR_DAT_080023fc + result + 4),\n                     PTR_DAT_080023fc[result + 8],PTR_DAT_080023fc[result + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08002ef2",
                "FUN_08002ec4",
                "FUN_08002fa0",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "run_application_080072fa",
                "FUN_08003724": "initialize_network",
                "FUN_080035b8": "connect_to_database"
            },
            "code": "void run_application_080072fa(void)\n{\n  initialize_network();\n  connect_to_database();\n  return;\n}",
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "run_application_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_input_08005084",
                "param_1": "input_params",
                "cVar1": "current_char",
                "puVar2": "current_param",
                "puVar3": "next_param"
            },
            "code": "int process_input_08005084(uint **input_params) {\n  char current_char = *(char *)((int)input_params + 0x3d);\n  uint *current_param = *input_params;\n  uint *next_param = NULL;\n  \n  current_param[1] = current_param[1] & 0xfffff8ff;\n  *current_param = *current_param | 1;\n  *current_param = *current_param & 0xfffffbff;\n\n  if ((current_param[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_params + 0x3d) == '\"') || (*(char *)((int)input_params + 0x3d) == '*')) {\n      *(short *)((int)input_params + 0x2a) = (short)*(undefined4 *)(*current_param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input_params + 0x2a) = (short)*(undefined4 *)(*current_param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input_params + 0x2a) != 0) {\n    if ((current_param[5] & 4) != 0) {\n      next_param = input_params[9];\n      input_params[9] = (uint *)((int)next_param + 1);\n      *(char *)next_param = (char)current_param[4];\n      *(short *)((int)input_params + 0x2a) = *(short *)((int)input_params + 0x2a) + -1;\n    }\n    if (((*current_param)[5] & 0x40) != 0) {\n      next_param = input_params[9];\n      input_params[9] = (uint *)((int)next_param + 1);\n      *(char *)next_param = (char)(*current_param)[4];\n      *(short *)((int)input_params + 0x2a) = *(short *)((int)input_params + 0x2a) + -1;\n    }\n    input_params[0x10] = (uint *)((uint)input_params[0x10] | 4);\n  }\n  if (input_params[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_params[0xb] = DAT_08005184;\n      input_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_params + 0x3d) = 0x20;\n      *(undefined *)((int)input_params + 0x3e) = 0;\n      do_something_with_input();\n    }\n    else if ((input_params[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      input_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_params + 0x3d) = 0x20;\n      *(undefined *)((int)input_params + 0x3e) = 0;\n      do_nothing();\n    }\n  }\n  else {\n    do_something_else();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "init_param_array_0800291c",
                "param_1": "params",
                "PTR_PTR_FUN_0800288c_1_08002940": "FUNC_PTR_1",
                "PTR_DAT_08002944": "DAT_PTR_1"
            },
            "code": "void init_param_array_0800291c(undefined4 *params) {\n  params[0] = PTR_PTR_FUN_0800288c_1_08002940;\n  params[1] = 0;\n  params[2] = 1000;\n  params[27] = PTR_DAT_08002944[0xe];\n  params[0x6d] = PTR_DAT_08002944[0xf];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "init_param_array_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "initialize_data_structure_08002ac0",
                "param_1": "data_structure",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "FUN_08002a58": "initialize_subsystem"
            },
            "code": "void initialize_data_structure_08002ac0(void* data_structure, int size, void* arg1, void* arg2) {\n  initialize_subsystem(data_structure, 1, arg1, arg2, arg2);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "base_address",
                "param_2": "value_to_check",
                "param_3": "new_value_1",
                "param_4": "new_value_2",
                "*(undefined4 *)(param_1 + 0x70)": "*(int *)(base_address + 112)",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(base_address + 52)"
            },
            "code": "void update_data_08003346(int base_address, int value_to_check, int new_value_1, int new_value_2) {\n  if (value_to_check == 121) {\n    *(int *)(base_address + 112) = new_value_1;\n    *(int *)(base_address + 52) = new_value_2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2"
            },
            "code": "void initialize_data_structure_080032bc(int* data, int param1, int param2)\n{\n  int i;\n  for(i=0; i<28; i++)\n      data[i] = 0;\n  data[28] = count_leading_zeroes(param1) >> 5;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "process_function_08003106",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "sub_function_ptr",
                "*puVar1": "*sub_function_ptr",
                "0x0": "0",
                "**(code **)*puVar1": "(*sub_function_ptr)",
                "***code ***)*param_1": "(*(code ***)function_ptr)",
                "***code ***)*param_1)((undefined4 *)*param_1,0x6f)": "(*(code ***)function_ptr)((undefined4 *)function_ptr, 0x6f)",
                "***code ***)*param_1)((undefined4 *)*param_1,param_2)": "(*(code ***)function_ptr)((undefined4 *)function_ptr, arg1)",
                "FUN_0800307a": "call_another_function",
                "***code ***)*param_1)((undefined4 *)*param_1,0xf7)": "(*(code ***)function_ptr)((undefined4 *)function_ptr, 0xf7)"
            },
            "code": "void process_function_08003106(undefined4 *function_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n    undefined4 *sub_function_ptr;\n    sub_function_ptr = (undefined4 *)*function_ptr;\n    if (sub_function_ptr != (undefined4 *)0x0) {\n        (**(code **) *sub_function_ptr)(sub_function_ptr, 0xf0);\n        (***(code ***) (undefined4 *)*function_ptr)((undefined4 *)*function_ptr, 0x6f);\n        (***(code ***) (undefined4 *)*function_ptr)((undefined4 *)*function_ptr, arg1);\n        call_another_function(function_ptr, arg2, arg3, arg2);\n        (***(code ***) (undefined4 *)*function_ptr)((undefined4 *)*function_ptr, 0xf7);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "process_function_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = FUN_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        FUN_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        FUN_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_08007320",
                "FUN_080073ae",
                "FUN_080045c0",
                "FUN_08003f30",
                "FUN_08003f94",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "execute_main_function_08007708",
                "FUN_08007438": "execute_helper_function"
            },
            "code": "void execute_main_function_08007708(void)\n{\n  execute_helper_function();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "execute_main_function_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "check_and_call_function_0800018c",
                "param_1": "arg1",
                "param_4": "arg4",
                "uVar1": "result",
                "FUN_08000188": "call_function"
            },
            "code": "int check_and_call_function_0800018c(int arg1, int arg4) {\n    int result = 0;\n    if (*(int *)PTR_DAT_080001a4 == 0) {\n        result = call_function(1, arg1, 0, 0, arg4);\n    }\n    return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_call_function_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_index",
                "PTR_DAT_08003fac": "array_ptr",
                "DAT_08003fac": "array_base_address"
            },
            "code": "void set_bit_in_array_08003f94(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_offset = bit_index & 0x1f;\n    uint* PTR_DAT_08003fac = (uint*)(DAT_08003fac + array_index * 4);\n    uint bit_mask = 1 << bit_offset;\n    *PTR_DAT_08003fac = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "set_flags_08008c44",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "flag_bits",
                "iVar2": "count",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void set_flags_08008c44(int base_address, int value, byte flags) {\n    int count = 0;\n    *(int *)(base_address + 0x11c) = value;\n    *(byte *)(base_address + 0x140) = flags;\n    byte flag_bits = flags & 7;\n    switch (flag_bits) {\n        case 4:\n            count = 7;\n            break;\n        case 6:\n            count = 8;\n            break;\n        case 2:\n            count = 6;\n            break;\n        default:\n            count = 0;\n            break;\n    }\n    if ((flags & 0x30) == 0x30) {\n        *(int *)(base_address + 0x128) = 0x600;\n        count++;\n    }\n    else if ((flags & 0x20) == 0) {\n        *(int *)(base_address + 0x128) = 0;\n    }\n    else {\n        *(int *)(base_address + 0x128) = 0x400;\n        count++;\n    }\n    *(int *)(base_address + 0x124) = ((flags & 8) == 0) ? 0 : 0x2000;\n    switch (count) {\n        case 8:\n            *(int *)(base_address + 0x120) = 0;\n            break;\n        case 9:\n            *(int *)(base_address + 0x120) = 0x1000;\n            break;\n        default:\n            count = 0;\n            break;\n    }\n    if (count != 0) {\n        FUNC_08008078(base_address + 0xd4);\n        FUN_0800863c(base_address + 0xd4,uRam08008cf0);\n        return;\n    }\n    code *jumptable = (code *)0x8008cee;\n    FUN_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\n    if (extraout_r1 < 0x3c) {\n        uRam0000012d = PTR_DAT_08008d14[extraout_r1];\n    }\n    else {\n        uRam0000012d = 0xff;\n    }\n    (*jumptable)(0,extraout_r1,&stack0x00000148);\n    return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_080090cc",
                "FUN_0800863c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_flags_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "send_data_to_server_08002a26",
                "param_1": "server_address",
                "param_2": "data_size",
                "param_3": "data_buffer",
                "param_4": "timeout_value",
                "FUN_08002a1c": "send_data"
            },
            "code": "void send_data_to_server_08002a26(undefined4 server_address, undefined4 data_size, undefined4 data_buffer, undefined4 timeout_value) {\n  send_data(server_address, 0x33, data_size, data_buffer, timeout_value);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "send_data_to_server_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_flags_0800430c",
                "param_1": "params",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)(ptr + 62)",
                "param_1[0x14]": "ptr[20]",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*ptr + 16)",
                "param_1[0x11]": "ptr[17]",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(ptr + 61)",
                "uint": "unsigned int",
                "0xffU": "0xff",
                "0x4000": "16384"
            },
            "code": "int set_flags_0800430c(int *params)\n{\n    int flag_value = 0;\n    int *ptr = params;\n    \n    if (*(char *)(ptr + 62) == '@') {\n        if (ptr[20] == 0) {\n            *(uint *)(*ptr + 16) = ptr[17] & 0xfe;\n        }\n        else {\n            *(uint *)(*ptr + 16) = ptr[17] & 0xffU | 1;\n        }\n    }\n    else if (ptr[4] == 0x4000) {\n        if (*(char *)(ptr + 61) == '!') {\n            *(uint *)(*ptr + 16) = ptr[17] & 0xfe;\n        }\n        else {\n            *(uint *)(*ptr + 16) = ptr[17] & 0xffU | 1;\n        }\n    }\n    else if (ptr[20] == 0) {\n        flag_value = (ptr[17] << 16) >> 23 & 6 | 0xf0;\n        *(uint *)(*ptr + 16) = flag_value;\n    }\n    else if (ptr[20] == 1) {\n        flag_value = (ptr[17] << 16) >> 23 & 6 | 0xf1;\n        *(uint *)(*ptr + 16) = flag_value;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "check_data_validity_08006060",
                "param_1": "data_array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int check_data_validity_08006060(unsigned int *data_array)\\n\\\n{\\n\\\n  if (data_array != NULL) {\\n\\\n    if (*(char *)((int)data_array + 0x3d) == \"\\0\") {\\n\\\n      *(unsigned char *)(data_array + 0xf) = 0;\\n\\\n      initialize_data();\\n\\\n    }\\n\\\n    *(unsigned char *)((int)data_array + 0x3d) = 2;\\n\\\n    process_data(*data_array,data_array + 1);\\n\\\n    *(unsigned char *)((int)data_array + 0x3d) = 1;\\n\\\n    return 0;\\n\\\n  }\\n\\\n  return 1;\\n\\\n}",
            "called": [
                "FUN_08007708",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_data_validity_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_params_08003350",
                "param_1": "base_addr",
                "param_2": "param_value",
                "param_3": "first_param",
                "param_4": "second_param"
            },
            "code": "void set_params_08003350(int base_addr, int param_value, undefined4 first_param, undefined4 second_param)\n{\n    if (param_value == 0xf9) {\n        *(undefined4 *)(base_addr + 0x74) = first_param;\n        *(undefined4 *)(base_addr + 0x38) = second_param;\n        return;\n    }\n    if (param_value != 0xff) {\n        return;\n    }\n    *(undefined4 *)(base_addr + 0x78) = first_param;\n    *(undefined4 *)(base_addr + 0x48) = second_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_params_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = FUN_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "set_flags_08006186",
                "param_1": "ptr_param",
                "param_2": "param_offset",
                "param_3": "flag",
                "*param_1": "ptr",
                "*(char *)(param_1 + 0xf)": "*(char *)(ptr_param + 0xf)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(ptr_param + 0xf)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)ptr_param + 0x3d)",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(ptr + 0x18)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(ptr + 0x1c)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(param_offset + 0x10)",
                "*(int *)(param_2 + 0x10)": "*(int *)(param_offset + 0x10)",
                "FUN_08005cec": "set_flag",
                "FUN_080060c4": "set_flag",
                "FUN_08005d48": "set_flag",
                "FUN_08005dac": "set_flag"
            },
            "code": "int set_flags_08006186(int *ptr_param,int param_offset, int flag){\n  if (*(char *)(ptr_param + 0xf) != '\\x01') {\n    *(undefined *)(ptr_param + 0xf) = 1;\n    *(undefined *)((int)ptr_param + 0x3d) = 2;\n    switch(flag) {\n    case 0:\n      set_flag(*ptr_param, 8, 0);\n      set_flag(*ptr_param, 4, 1);\n      set_flag(*ptr_param, *(uint *)(param_offset + 0x10), 1);\n      break;\n    case 4:\n      set_flag(*ptr_param, 0x800, 0);\n      set_flag(*ptr_param, 0x400, 1);\n      set_flag(*ptr_param, *(int *)(param_offset + 0x10) << 8, 1);\n      break;\n    case 8:\n      set_flag(*ptr_param, 8, 2);\n      set_flag(*ptr_param, 4, 3);\n      set_flag(*ptr_param, *(uint *)(param_offset + 0x10), 3);\n      break;\n    case 0xc:\n      set_flag(*ptr_param, 0x800, 2);\n      set_flag(*ptr_param, 0x400, 3);\n      set_flag(*ptr_param, *(int *)(param_offset + 0x10) << 8, 3);\n    }\n    *(undefined *)((int)ptr_param + 0x3d) = 1;\n    *(undefined *)(ptr_param + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\nvoid set_flag(int ptr, int flag, int operation){\n  if(operation == 0){\n    *(uint *)(ptr + 0x18) = *(uint *)(ptr + 0x18) | flag;\n  }\n  else if(operation == 1){\n    *(uint *)(ptr + 0x18) = *(uint *)(ptr + 0x18) & ~flag;\n  }\n  else if(operation == 2){\n    *(uint *)(ptr + 0x1c) = *(uint *)(ptr + 0x1c) | flag;\n  }\n  else if(operation == 3){\n    *(uint *)(ptr + 0x1c) = *(uint *)(ptr + 0x1c) & ~flag;\n  }\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "execute_main_function_08007710",
                "FUN_080074e0": "initialize_program"
            },
            "code": "void execute_main_function_08007710(void)\n{\n  initialize_program();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "execute_main_function_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "bVar1": "current_byte",
                "handle_data": "handle_data_segment",
                "handle_end_of_data": "handle_end_of_data_segment",
                "handle_reset": "handle_reset_segment"
            },
            "code": "void process_data_08003474(int data_ptr, uint data_len) {\\n  byte current_byte;\\n  if (*(char *)(data_ptr + 0x14) != \"\\0\") {\\n    if (data_len != 0xf7) {\\n      handle_data(data_ptr, data_len, *(undefined4 *)(data_ptr + 0x18));\\n      *(int *)(data_ptr + 0x18) = *(int *)(data_ptr + 0x18) + 1;\\n      return;\\n    }\\n    *(undefined *)(data_ptr + 0x14) = 0;\\n    handle_end_of_data();\\n    return;\\n  }\\n  if ((*(int *)(data_ptr + 0x10) == 0) || (0x7f < (int)data_len)) {\\n    if ((int)data_len < 0xf0) {\\n      *(byte *)(data_ptr + 0xd) = (byte)data_len & 0xf;\\n      data_len = data_len & 0xf0;\\n    }\\n    if (data_len == 0xf0) {\\n      *(undefined *)(data_ptr + 0x14) = 1;\\n      *(undefined4 *)(data_ptr + 0x18) = 0;\\n      return;\\n    }\\n    if (data_len < 0xf1) {\\n      if (data_len != 0xc0) {\\n        if (data_len < 0xc1) {\\n          if (data_len != 0x90) {\\n            return;\\n          }\\n        }\\n        else {\\n          if (data_len == 0xd0) goto LAB_0800359c;\\n          if (data_len != 0xe0) {\\n            return;\\n          }\\n        }\\nLAB_08003586:\\n        *(undefined4 *)(data_ptr + 0x10) = 2;\\n        *(char *)(data_ptr + 0xc) = (char)data_len;\\n        return;\\n      }\\nLAB_0800359c:\\n      *(undefined4 *)(data_ptr + 0x10) = 1;\\n      *(char *)(data_ptr + 0xc) = (char)data_len;\\n      return;\\n    }\\n    if (data_len != 0xf9) {\\n      if (0xf9 < data_len) {\\n        if (data_len == 0xff) {\\n          handle_reset(data_ptr);\\n          return;\\n        }\\n        return;\\n      }\\n      if (1 < data_len - 0xf4) {\\n        return;\\n      }\\n      goto LAB_08003586;\\n    }\\n    if (*(code **)(data_ptr + 0x74) != (code *)0x0) {\\n      (**(code **)(data_ptr + 0x74))(*(undefined4 *)(data_ptr + 0x38));\\n    }\\n  }\\n  else {\\n    *(int *)(data_ptr + 0x10) = *(int *)(data_ptr + 0x10) + -1;\\n    handle_data(data_ptr);\\n    if ((*(int *)(data_ptr + 0x10) == 0) && (current_byte = *(byte *)(data_ptr + 0xc), current_byte != 0)) {\\n      if (current_byte == 0xd0) {\\n        if (*(code **)(data_ptr + 0x58) != (code *)0x0) {\\n          (**(code **)(data_ptr + 0x58))(*(undefined4 *)(data_ptr + 0x28),*(undefined *)(data_ptr + 0xd),**(undefined **)(data_ptr + 4));\\n        }\\n      }\\n      else if (current_byte < 0xd1) {\\n        if (current_byte == 0x90) {\\n          if (*(code **)(data_ptr + 0x50) != (code *)0x0) {\\n            (**(code **)(data_ptr + 0x50))(*(undefined4 *)(data_ptr + 0x20),*(undefined *)(data_ptr + 0xd),(uint)(*(byte **)(data_ptr + 4))[1] + (uint)**(byte **)(data_ptr + 4) * 0x80);\\n          }\\n        }\\n        else if ((current_byte == 0xc0) && (*(code **)(data_ptr + 0x54) != (code *)0x0)) {\\n          (**(code **)(data_ptr + 0x54))(*(undefined4 *)(data_ptr + 0x24),*(undefined *)(data_ptr + 0xd),**(undefined **)(data_ptr + 4));\\n        }\\n      }\\n      else if (current_byte == 0xf4) {\\n        if (*(code **)(data_ptr + 0x5c) != (code *)0x0) {\\n          (**(code **)(data_ptr + 0x5c))(*(undefined4 *)(data_ptr + 0x2c),(*(undefined **)(data_ptr + 4))[1],**(undefined **)(data_ptr + 4));\\n        }\\n      }\\n      else if (current_byte == 0xf5) {\\n        if (*(code **)(data_ptr + 0x60) != (code *)0x0) {\\n          (**(code **)(data_ptr + 0x60))(*(undefined4 *)(data_ptr + 0x30),(*(undefined **)(data_ptr + 4))[1],**(undefined **)(data_ptr + 4));\\n        }\\n      }\\n      else if ((current_byte == 0xe0) && (*(code **)(data_ptr + 0x4c) != (code *)0x0)) {\\n        (**(code **)(data_ptr + 0x4c))(*(undefined4 *)(data_ptr + 0x1c),*(undefined *)(data_ptr + 0xd),(uint)(*(byte **)(data_ptr + 4))[1] + (uint)**(byte **)(data_ptr + 4) * 0x80);\\n      }\\n      *(undefined *)(data_ptr + 0xc) = 0;\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_0800344a",
                "FUN_080033cc",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_data_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_dat_value_08006b7c",
                "param_1": "param"
            },
            "code": "int get_dat_value_08006b7c(int param){\n  switch(param) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_dat_value_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "param_array",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_base_08008e7c(int *param_array, uint number, uint base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits [9];\n  reversed_digits[0] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = reversed_digits + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint num_digits = FUN_08000178(current_digit);\n    result = (**(code **)(*param_array + 4))(param_array,current_digit,num_digits);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "check_and_update_flags_08003aa0",
                "param_1": "flags",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_08003b84": "PTR_DAT_08003b84",
                "DAT_08003b88": "PTR_DAT_08003b88"
            },
            "code": "int check_and_update_flags_08003aa0(undefined4 *flags)\n{\n  int result;\n  undefined4 *ptr;\n  \n  if (*(char *)(flags + 9) != '\\x01') {\n    *(undefined *)(flags + 9) = 1;\n    result = check_access();\n    if (result == 0) {\n      flags[10] = flags[10] & 0xfffffcfe | 0x100;\n      ptr = (undefined4 *)*flags;\n      if ((ptr == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        flags[10] = flags[10] | 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          flags[10] = flags[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        flags[10] = flags[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          flags[10] = flags[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((flags[10] & 0x1000) == 0) {\n        flags[0xb] = 0;\n      }\n      else {\n        flags[0xb] = flags[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(flags + 9) = 0;\n      *ptr = 0xfffffffd;\n      flags = (undefined4 *)*flags;\n      if (((flags[2] & 0xe0000) == 0xe0000) &&\n         ((flags != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        flags[2] = flags[2] | 0x500000;\n      }\n      else {\n        flags[2] = flags[2] | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(flags + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "initialize_08003ce8",
                "param_1": "config",
                "iVar1": "result"
            },
            "code": "int initialize_08003ce8(int *config)\n{\n    int result;\n    if (config == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        config[10] |= 2;\n        result = FUN_08003b8c();\n        if (result == 0)\n        {\n            *(unsigned int *)*config = 0xffffffe0;\n            *(unsigned int *)(*config + 4) &= DAT_08003ddc;\n            *(unsigned int *)(*config + 8) &= DAT_08003de0;\n            *(unsigned int *)(*config + 0xc) &= 0xff000000;\n            *(unsigned int *)(*config + 0x10) &= 0xc0000000;\n            *(unsigned int *)(*config + 0x14) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x18) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x1c) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x20) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x24) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x28) &= 0xfffff000;\n            *(unsigned int *)(*config + 0x2c) &= 0xff000000;\n            *(unsigned int *)(*config + 0x30) &= 0xc0000000;\n            *(unsigned int *)(*config + 0x34) &= 0xc0000000;\n            *(unsigned int *)(*config + 0x38) &= 0xffc00000;\n            FUN_08006d24(config);\n            config[11] = 0;\n            config[10] = 0;\n        }\n        *(char *)(config + 9) = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "initialize_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_registers_08005fe8",
                "param_1": "register_values",
                "param_2": "new_values",
                "uVar1": "current_value",
                "DAT_0800605c": "ptr_0800605c"
            },
            "code": "void update_registers_08005fe8(uint *register_values, uint *new_values) {\n  uint current_value;\n  current_value = *register_values;\n  if ((((register_values == DAT_0800605c) || (register_values == (uint *)0x40000000)) || (register_values == DAT_0800605c - 0x4a00)) || (register_values == DAT_0800605c - 0x4900)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n  }\n  if (((register_values == DAT_0800605c) || (register_values == (uint *)0x40000000)) || ((register_values == DAT_0800605c - 0x4a00 || (register_values == DAT_0800605c - 0x4900)))) {\n    current_value = current_value & 0xfffffcff | new_values[3];\n  }\n  *register_values = current_value & 0xffffff7f | new_values[5];\n  register_values[0xb] = new_values[2];\n  register_values[10] = *new_values;\n  if (register_values == DAT_0800605c) {\n    register_values[0xc] = new_values[4];\n  }\n  register_values[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "update_registers_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "get_offset_08008804",
                "param_1": "base_offset",
                "iVar1": "current_offset",
                "puVar2": "next_pointer"
            },
            "code": "int get_offset_08008804(int base_offset) {\n  int current_offset = *PTR_DAT_08008834;\n  undefined *next_pointer = (undefined *)(base_offset + current_offset);\n  if (next_pointer <= &stack0x00000000) {\n    *PTR_DAT_08008834 = (int)next_pointer;\n    return current_offset;\n  }\n  *PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "get_offset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "check_param_0800738a",
                "param_1": "target_value",
                "param_2": "param_array",
                "*param_2": "*param_array"
            },
            "code": "int check_param_0800738a(int target_value, char *param_array)\n{\n    if (target_value == -1) {\n        return 0;\n    }\n    while (true) {\n        if (*param_array == -1) {\n            return 0;\n        }\n        if (target_value == *param_array) break;\n        param_array = param_array + 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "check_param_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "temp_ptr"
            },
            "code": "uint32_t process_data_08004e3c(uint32_t **data)\n{\n  uint32_t *temp_ptr;\n  temp_ptr = data[11];\n  if (*(int16_t *)((int)data + 42) == 3) {\n    if (((temp_ptr == (uint32_t *)0x4) || (temp_ptr == (uint32_t *)0x8)) || (temp_ptr == (uint32_t *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    temp_ptr = data[9];\n    data[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(int16_t *)((int)data + 42) = *(int16_t *)((int)data + 42) + -1;\n  }\n  else if (*(int16_t *)((int)data + 42) == 2) {\n    if (((temp_ptr == (uint32_t *)0x4) || (temp_ptr == (uint32_t *)0x8)) || (temp_ptr == (uint32_t *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (temp_ptr == (uint32_t *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    temp_ptr = data[9];\n    data[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(int16_t *)((int)data + 42) = *(int16_t *)((int)data + 42) + -1;\n    temp_ptr = data[9];\n    data[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(char *)((int)data + 61) = 0x20;\n    data[12] = (uint32_t *)0x0;\n    if (*(char *)((int)data + 62) == '@') {\n      *(char *)((int)data + 62) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(char *)((int)data + 62) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    temp_ptr = data[9];\n    data[9] = (uint32_t *)((int)temp_ptr + 1);\n    *(char *)temp_ptr = (char)(*data)[4];\n    *(int16_t *)((int)data + 42) = *(int16_t *)((int)data + 42) + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "call_function_with_param_080091a0",
                "param_1": "parameter",
                "PTR_PTR_DAT_080091ac": "function_table",
                "FUN_080091d8": "function_ptr"
            },
            "code": "void call_function_with_param_080091a0(void* PTR_PTR_DAT_080091ac, int parameter){\n  void (*function_ptr)(int) = *(void (**)(int))PTR_PTR_DAT_080091ac;\n  function_ptr(parameter);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "call_function_with_param_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "execute_function_with_params_08002a1c",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "FUN_08002968": "execute_function",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void execute_function_with_params_08002a1c(void* function_pointer, void* param1, void* param2, void* param3)\n{\n  execute_function(function_pointer, param1, param2, param3, param3);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_param_08007718",
                "param_1": "input_param",
                "return": "result"
            },
            "code": "int subtract_four_from_param_08007718(int input_param) {\n    int result = input_param - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "check_param_and_call_08002948",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_0800291c": "call_with_pointer"
            },
            "code": "void check_param_and_call_08002948(int param1, int param2)\n{\n    if (param1 != 1)\n    {\n        return;\n    }\n    if (param2 == 0xffff)\n    {\n        call_with_pointer(PTR_DAT_08002964);\n    }\n    return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "check_param_and_call_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_file_permission_and_type_08009e64",
                "param_1": "file_descriptor",
                "param_2": "file_mode",
                "param_3": "permission",
                "param_4": "file_type",
                "iVar1": "status",
                "uVar2": "permission_mask",
                "auStack_4c": "file_permission",
                "local_48": "file_mode_copy"
            },
            "code": "int check_file_permission_and_type_08009e64(int file_descriptor, int file_mode, int *permission, uint *file_type) {\n    int status;\n    uint file_mode_mask = 0xf000;\n    if (*(short *)(file_mode + 0xe) < 0 ||\n        (status = get_file_permission(file_descriptor, (int)*(short *)(file_mode + 0xe), permission)) < 0) {\n        *file_type = 0;\n        if ((int)((uint)*(ushort *)(file_mode + 0xc) << 0x18) < 0) {\n            *permission = 0x40;\n            goto LAB_08009ea4;\n        }\n    }\n    else {\n        *file_type = (uint)((file_mode_mask & 0xf000) == 0x2000);\n    }\n    *permission = 0x400;\nLAB_08009ea4:\n    return 0;\n}\n",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_file_permission_and_type_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "checkAndUpdateSize_08002acc",
                "param_1": "sizeToCheck",
                "puVar1": "ptr1",
                "iVar2": "result",
                "uVar3": "newsize"
            },
            "code": "void checkAndUpdateSize_08002acc(uint sizeToCheck, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr1 = PTR_DAT_08002afc;\n  int result = 0;\n  undefined newsize = 0;\n  if ((byte)*PTR_DAT_08002af8 < sizeToCheck) {\n    if (sizeToCheck < 0x20) {\n      sizeToCheck = 0x20;\n    }\n    result = FUN_08009908(*(undefined4 *)PTR_DAT_08002afc,sizeToCheck,param_3,(uint)(byte)*PTR_DAT_08002af8,param_4);\n    *(int *)ptr1 = result;\n    if (result == 0) {\n      newsize = 0;\n    }\n    else {\n      newsize = (undefined)sizeToCheck;\n    }\n    *PTR_DAT_08002af8 = newsize;\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "checkAndUpdateSize_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "flag",
                "param_2": "value",
                "*PTR_DAT_08002a48": "*PTR_DATA_1",
                "*PTR_DAT_08002a4c": "*PTR_DATA_2",
                "*PTR_DAT_08002a50": "*PTR_DATA_3",
                "*PTR_DAT_08002a54": "*PTR_DATA_4"
            },
            "code": "void initialize_data_08002a30(int flag, int value) {\n    *PTR_DAT_08002a48 = 1;\n    *PTR_DAT_08002a4c = (char)(value << 1);\n    *PTR_DAT_08002a50 = 0;\n    *PTR_DAT_08002a54 = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "input_buffer",
                "iVar1": "buffer_index",
                "pbVar2": "buffer_pointer_1",
                "pbVar3": "buffer_pointer_2",
                "uVar4": "return_value"
            },
            "code": "unsigned int process_input_0800932c(int input_length, unsigned char input_char, unsigned char **input_buffer) {\n    int buffer_index;\n    unsigned char *buffer_pointer_1;\n    unsigned char *buffer_pointer_2;\n    unsigned int return_value;\n\n    buffer_pointer_1 = (*input_buffer) + 1;\n    (*input_buffer) = buffer_pointer_1;\n    if ((buffer_pointer_1 >= (*input_buffer + 6)) && (input_char != 0xa)) {\n        if ((input_length != 0) && (*(int *)(input_length + 24) == 0)) {\n            print_error();\n        }\n        if (input_buffer == (unsigned char **)PTR_DAT_08009a74) {\n            input_buffer = *(unsigned char ***)(input_length + 4);\n        }\n        else if (input_buffer == (unsigned char **)PTR_DAT_08009a78) {\n            input_buffer = *(unsigned char ***)(input_length + 8);\n        }\n        else if (input_buffer == (unsigned char **)PTR_DAT_08009a7c) {\n            input_buffer = *(unsigned char ***)(input_length + 12);\n        }\n        (*input_buffer) = (*input_buffer + 4);\n        buffer_pointer_2 = (unsigned char *)(unsigned int)*(unsigned short *)(input_buffer + 6);\n        buffer_index = (int)buffer_pointer_2 << 28;\n        if (((buffer_index < 0) && (buffer_pointer_2 = input_buffer[8], buffer_pointer_2 != (unsigned char *)0x0)) || (buffer_index = process_buffer(input_length, input_buffer, buffer_index, buffer_pointer_2, buffer_pointer_1), buffer_index == 0)) {\n            return_value = (unsigned int)input_char;\n            buffer_index = (*input_buffer - input_buffer[8]);\n            if ((buffer_index >= (int)input_buffer[10]) || (buffer_index = process_input_0800932c(input_length, input_buffer), buffer_index == 0)) {\n                (*input_buffer) = (*input_buffer - 1);\n                buffer_pointer_1 = (*input_buffer);\n                (*input_buffer) = buffer_pointer_1 + 1;\n                *buffer_pointer_1 = input_char;\n                if ((unsigned char *)(buffer_index + 1) != input_buffer[10]) {\n                    if (((unsigned int)*(unsigned short *)(input_buffer + 6) << 31) < 0) {\n                        return return_value;\n                    }\n                    if (return_value != 10) {\n                        return return_value;\n                    }\n                }\n                buffer_index = process_input_0800932c(input_length, input_buffer);\n                if (buffer_index == 0) {\n                    return return_value;\n                }\n            }\n        }\n        return 0xffffffff;\n    }\n    buffer_pointer_2 = (*input_buffer);\n    (*input_buffer) = buffer_pointer_2 + 1;\n    *buffer_pointer_2 = input_char;\n    return (unsigned int)input_char;\n}\n",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "process_data_0800322c",
                "param_1": "data_ptr",
                "param_2": "data_2",
                "param_3": "data_3",
                "puVar1": "function_ptr"
            },
            "code": "void process_data_0800322c(undefined4 *data_ptr, undefined4 data_2, undefined4 data_3) {\n  undefined4 *function_ptr;\n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf9);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,data_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,data_3);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "process_data_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "current_char_in_string",
                "pcVar2": "temp_char_in_string",
                "pcVar3": "current_char_in_substring"
            },
            "code": "char* find_substring_080099a4(char *string, char *substring) {\n    char *current_char_in_string;\n    char *current_char_in_substring;\n\n    if (*string == '\\0') {\n        if (*substring != '\\0') {\n            string = NULL;\n        }\n        return string;\n    }\n\n    do {\n        current_char_in_string = string;\n        if (*current_char_in_string == '\\0') {\n            return NULL;\n        }\n\n        current_char_in_substring = substring - 1;\n        char *temp_char_in_string = current_char_in_string - 1;\n\n        do {\n            current_char_in_substring++;\n            if (*current_char_in_substring == '\\0') {\n                return current_char_in_string;\n            }\n            temp_char_in_string++;\n            string = current_char_in_string + 1;\n        } while (*temp_char_in_string == *current_char_in_substring);\n    } while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "ptr"
            },
            "code": "int get_value_from_pointer_08005a1c() {\n    int* PTR_DAT_08005a24 = (int*)PTR_DAT_08005a24;\n    return *PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n    FUN_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    FUN_08002f1e(PTR_DAT_08002044,0xf0);\n    FUN_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_08002044,0);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,0xb);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,2);\n        FUN_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,3);\n        FUN_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,4);\n        FUN_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,6);\n        FUN_08002f1e(puVar4,1);\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n      FUN_08002f1e(puVar5,0x6e);\n      FUN_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = FUN_08002fa0(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar6);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = FUN_08002fba(puVar5,bVar1);\n          FUN_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n          FUN_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      FUN_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = FUN_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          FUN_08000588(uVar12);\n        }\n        FUN_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      FUN_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        FUN_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          FUN_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        FUN_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        FUN_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        FUN_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      FUN_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_08002f14",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000a64",
                "FUN_08002a30",
                "FUN_08001bf8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_value_from_pointer_08003760",
                "undefined4": "uint32_t",
                "PTR_DAT_08003768": "data_pointer"
            },
            "code": "uint32_t get_value_from_pointer_08003760() {\n    uint32_t* PTR_DAT_08003768 = (uint32_t*) PTR_DAT_08003768;\n    return *PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08003b8c",
                "FUN_08003e20",
                "FUN_080066e8",
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_0800723c",
                "FUN_0800376c",
                "FUN_080067ac",
                "FUN_08007f0e",
                "FUN_08005460",
                "FUN_08005aa4",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08007306": "get_result"
            },
            "code": "int check_param_08007320(int param){\n                    int result = 0;\n                    if(param != -1){\n                      result = get_result();\n                    }\n                    return result;\n                  }",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "update_data_08000be8",
                "param_1": "data_index",
                "param_2": "bit_mask",
                "param_3": "update_flag",
                "param_4": "param_4",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2"
            },
            "code": "void update_data_08000be8(int data_index, uint8_t bit_mask, int update_flag, uint32_t param_4)\n{\n  uint8_t *data_ptr_1;\n  uint8_t *data_ptr_2;\n  \n  data_ptr_2 = (uint8_t *)((byte)PTR_DAT_08000c0c[data_index] & bit_mask);\n  data_ptr_1 = PTR_DAT_08000c0c;\n  if ((update_flag != 0) || (data_ptr_1 = (uint8_t *)(uint)(byte)PTR_DAT_08000c10[data_index], data_ptr_2 != data_ptr_1)) {\n    update_data_08000be8_helper(PTR_DAT_08000c14, data_index, data_ptr_2, data_ptr_1, param_4);\n    PTR_DAT_08000c10[data_index] = (char)data_ptr_2;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "update_data_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "check_param_and_set_values_08003fd8",
                "param_1": "param",
                "puVar1": "values_array"
            },
            "code": "int check_param_and_set_values_08003fd8(int param)\n{\n  int* values_array = DAT_08003ffc;\n  if (param - 1U < 0x1000000) {\n    values_array[1] = param - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    values_array[2] = 0;\n    *values_array = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "check_param_and_set_values_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_message_0800307a",
                "param_1": "message_encoder",
                "param_2": "message_encoder_size",
                "param_3": "message",
                "param_4": "message_size",
                "uVar1": "encoded_byte",
                "uVar2": "current_bit_index",
                "uVar3": "encoded_bits",
                "uVar4": "current_byte_index"
            },
            "code": "void encode_message_0800307a(uint32_t *message_encoder, uint message_encoder_size, byte *message, uint message_size)\n{\n  uint current_byte_index = 0;\n  uint current_bit_index = 0;\n  uint encoded_byte = (uint)*message;\n  if (message_size == 0) {\n    message_size = 0xffffffff;\n  }\n  uint encoded_bits = 0;\n  while ((current_byte_index < message_encoder_size && (encoded_bits < message_size))) {\n    (***(code ***)(uint32_t *)*message_encoder)\n              ((uint32_t *)*message_encoder,((uint)message[current_byte_index] << (current_bit_index & 0xff) | encoded_byte) & 0x7f);\n    encoded_byte = (int)(uint)message[current_byte_index] >> (7 - current_bit_index & 0xff) & 0xff;\n    current_bit_index = current_bit_index + 1;\n    while ((encoded_bits = encoded_bits + 1, 6 < current_bit_index && (encoded_bits < message_size))) {\n      (***(code ***)(uint32_t *)*message_encoder)((uint32_t *)*message_encoder,encoded_byte & 0x7f);\n      encoded_byte = encoded_byte >> 7;\n      current_bit_index = current_bit_index - 7;\n    }\n    current_byte_index = current_byte_index + 1;\n  }\n  if ((current_bit_index != 0) && (encoded_bits < message_size)) {\n    (***(code ***)(uint32_t *)*message_encoder)((uint32_t *)*message_encoder,(1 << (current_bit_index & 0xff)) - 1U & encoded_byte)\n    ;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce",
                "FUN_08003158",
                "FUN_0800325a"
            ],
            "imported": false,
            "current_name": "encode_message_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_at_address_if_not_null_0800319e",
                "param_1": "function_address_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "function_ptr",
                "local_a": "modified_param_3",
                "FUN_0800307a": "update_function_address_ptr"
            },
            "code": "void execute_function_at_address_if_not_null_0800319e(uint32_t *function_address_ptr, uint32_t param_2, uint16_t param_3)\n{\n  uint32_t *function_ptr = (uint32_t *)*function_address_ptr;\n  if (function_ptr != (uint32_t *)0x0) {\n    uint32_t modified_param_2 = param_2 & 0xf | 0x90;\n    (**(void (**)(uint32_t *, uint32_t))(function_ptr))(function_ptr, modified_param_2);\n    update_function_address_ptr(function_address_ptr, 2, &param_3);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_if_not_null_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_color_08008d00",
                "param_1": "address",
                "param_2": "color_index",
                "uVar1": "color_value",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE",
                "PTR_DAT_08008d14": "PTR_DAT_08008d14"
            },
            "code": "void set_color_08008d00(int address, uint color_index) {\n    uint MAX_COLOR_INDEX = 0x3c;\n    uint DEFAULT_COLOR_VALUE = 0xff;\n    undefined color_value;\n\n    if (color_index < MAX_COLOR_INDEX) {\n        color_value = PTR_DAT_08008d14[color_index];\n    }\n    else {\n        color_value = DEFAULT_COLOR_VALUE;\n    }\n\n    code *UNRECOVERED_JUMPTABLE;\n    *(undefined *)(address + 0x12d) = color_value;\n    (*UNRECOVERED_JUMPTABLE)();\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_color_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "call_function_with_param_08009190",
                "param_1": "param",
                "PTR_PTR_DAT_0800919c": "ptr_array",
                "FUN_08009270": "call_another_function"
            },
            "code": "void call_function_with_param_08009190(void* PTR_PTR_DAT_0800919c, int param) {\n  call_another_function(*(int*)PTR_PTR_DAT_0800919c, param);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "call_function_with_param_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input_data",
                "cVar1": "current_char",
                "puVar2": "ptr1"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input_data){\n  char current_char;\n  uint32_t *ptr1;\n  uint32_t *ptr2;\n  uint32_t *ptr3;\n  uint32_t *ptr4;\n  \n  current_char = *(char *)((int)input_data + 0x3d);\n  ptr1 = input_data[0xb];\n  if ((*(uint16_t *)(input_data + 10) == 0) && (current_char == '!')) {\n    if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      input_data[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(uint16_t *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      ptr2 = input_data[0x14];\n      ptr3 = input_data[0x13];\n      ptr4 = input_data[0x12];\n      if (ptr2 == (uint32_t *)0x0) {\n        if (ptr3 == (uint32_t *)0x1) {\n          (*input_data)[4] = (uint32_t)ptr4 & 0xff;\n          input_data[0x14] = (uint32_t *)((int)ptr2 + 2);\n        }\n        else {\n          (*input_data)[4] = (uint32_t)((int)ptr4 << 0x10) >> 0x18;\n          input_data[0x14] = (uint32_t *)((int)ptr2 + 1);\n        }\n      }\n      else if (ptr2 == (uint32_t *)0x1) {\n        (*input_data)[4] = (uint32_t)ptr4 & 0xff;\n        input_data[0x14] = (uint32_t *)((int)ptr2 + 1);\n      }\n      else if (ptr2 == (uint32_t *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          ptr1 = input_data[9];\n          input_data[9] = (uint32_t *)((int)ptr1 + 1);\n          (*input_data)[4] = (uint32_t)*(uint8_t *)ptr1;\n          *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr1 = input_data[9];\n      input_data[9] = (uint32_t *)((int)ptr1 + 1);\n      (*input_data)[4] = (uint32_t)*(uint8_t *)ptr1;\n      *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "start_index",
                "param_2": "end_index",
                "iVar1": "current_index",
                "iVar2": "last_occurrence_index",
                "FUN_08009938": "find_occurrence"
            },
            "code": "int find_last_occurrence_0800997e(int start_index, int end_index, undefined4 param_3, undefined4 param_4) {\n  int last_occurrence_index = 0;\n  if (end_index != 0) {\n    int current_index = 0;\n    while (current_index = find_occurrence(start_index, end_index, param_3, start_index, param_4), current_index != 0) {\n      start_index = current_index + 1;\n      last_occurrence_index = current_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = find_occurrence();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "check_param_and_execute_08002dbc",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_08002ce0": "execute_function"
            },
            "code": "void check_param_and_execute_08002dbc(int param1, int param2) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        execute_function(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "check_param_and_execute_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "parse_input_and_create_string_08002e44",
                "param_1": "output_str_ptr",
                "param_2": "input_str_ptr",
                "param_3": "input_char_1",
                "param_4": "input_char_2",
                "iVar3": "diff",
                "iVar4": "slash_pos",
                "puVar5": "output_str_ptr_new",
                "PTR_s__cpp_08002ec0": "cpp_string_ptr",
                "*(char *)(param_1 + 0xc4)": "*(char *)(output_str_ptr + 196)",
                "*(undefined **)(param_1 + 200)": "*(undefined **)(output_str_ptr + 200)",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(output_str_ptr + 196)"
            },
            "code": "void parse_input_and_create_string_08002e44(int output_str_ptr, int input_str_ptr, undefined input_char_1, undefined input_char_2)\n{\n  int slash_pos = find_last_char(input_str_ptr, '/');\n  if (slash_pos == 0) {\n    slash_pos = find_last_char(input_str_ptr, '\\');\n  }\n  if (slash_pos != 0) {\n    input_str_ptr = slash_pos + 1;\n  }\n  int diff = compute_diff(input_str_ptr, get_cpp_string());\n  if (diff == 0) {\n    char c = get_char(input_str_ptr);\n    *(char *)(output_str_ptr + 196) = c + 2;\n  }\n  else {\n    *(char *)(output_str_ptr + 196) = ((char)diff - (char)input_str_ptr) + 2;\n  }\n  allocate_memory_for_string(*(int *)(output_str_ptr + 200));\n  byte output_str_len = *(byte *)(output_str_ptr + 196);\n  undefined *output_str_ptr_new = get_string_memory(output_str_len + 1);\n  *(undefined **)(output_str_ptr + 200) = output_str_ptr_new;\n  output_str_ptr_new[output_str_len] = 0;\n  *output_str_ptr_new = input_char_1;\n  output_str_ptr_new[1] = input_char_2;\n  copy_string(output_str_ptr_new + 2, input_str_ptr, output_str_len - 2);\n  return;\n}",
            "called": [
                "FUN_080091a0",
                "FUN_0800997e",
                "FUN_080099a4",
                "FUN_08009954",
                "FUN_08009190",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "parse_input_and_create_string_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "send_data_to_server_0800242c",
                "param_1": "socket_fd",
                "param_2": "data_length",
                "param_3": "port",
                "param_4": "server_address",
                "FUN_08007648": "sendto",
                "PTR_LAB_08002444_1_08002440": "flags"
            },
            "code": "void send_data_to_server_0800242c(int socket_fd, int data_length, int port, char *server_address, int PTR_LAB_08002444_1_08002440)\n{\n  sendto(socket_fd, data_length, port, server_address, PTR_LAB_08002444_1_08002440);\n  return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "process_input_080058d2",
                "param_1": "input_flags",
                "param_2": "input_value",
                "puVar1": "global_data",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "temp_var",
                "DAT_08005a10": "global_array_1",
                "DAT_08005a0c": "global_array_2"
            },
            "code": "uint32_t process_input_080058d2(uint32_t *input_flags, uint32_t input_value)\n{\n  uint32_t *global_data = DAT_08005a0c;\n  int start_time = FUN_08003760();\n  uint32_t temp_var;\n  \n  if ((*input_flags & 2) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffff0f) | input_flags[2];\n  }\n  \n  if ((*input_flags & 1) != 0) {\n    uint32_t flag_value = input_flags[1];\n    if (flag_value == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag_value != 2) && ((*DAT_08005a10 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = flag_value | (DAT_08005a10[1] & 0xfffffffc);\n    \n    if (flag_value == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        int current_time = FUN_08003760();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_value == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        int current_time = FUN_08003760();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        int current_time = FUN_08003760();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  \n  if ((input_value < (*global_data & 7)) && (*global_data = (*global_data & 0xfffffff8) | input_value, input_value != (*global_data & 7))) {\n    return 1;\n  }\n  \n  if ((*input_flags & 4) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xfffff8ff) | input_flags[3];\n  }\n  \n  if ((*input_flags & 8) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffc7ff) | (input_flags[4] << 3);\n  }\n  \n  temp_var = FUN_08005840();\n  *(uint32_t *)PTR_DAT_08005a18 = temp_var >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080036d8",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "process_input_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "execute_main_function_08002c00",
                "FUN_08002b68": "call_helper_function"
            },
            "code": "void execute_main_function_08002c00(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "execute_main_function_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "write_bits_to_memory_08003f30",
                "param_1": "memory_address",
                "param_2": "bit_value",
                "param_3": "bit_mask",
                "uVar1": "mask_shifted_left",
                "uVar2": "mask_shifted_right",
                "uVar3": "bits_to_write"
            },
            "code": "void write_bits_to_memory_08003f30(uint memory_address, uint bit_value, uint bit_mask)\n{\n  uint mask_shifted_left = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint mask_shifted_right = 7 - mask_shifted_left;\n  \n  if (mask_shifted_right > 3) {\n    mask_shifted_right = 4;\n  }\n  \n  if (mask_shifted_left + 4 < 7) {\n    mask_shifted_left = 0;\n  }\n  else {\n    mask_shifted_left = mask_shifted_left - 3;\n  }\n  \n  uint bits_to_write = (bit_value & (1 << (mask_shifted_right & 0xff)) - 1U) << (mask_shifted_left & 0xff) | (1 << (mask_shifted_left & 0xff)) - 1U & bit_mask;\n  \n  if ((int)memory_address < 0) {\n    *(char *)(DAT_08003f90 + (memory_address & 0xf)) = (char)(bits_to_write << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(bits_to_write << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "write_bits_to_memory_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "num",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_08007f78(int num)\n{\n    int result = num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "subtract_four_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_08006b28",
                "param_1": "num",
                "param_2": "bit_position",
                "PTR_": "ptr",
                "DAT_": "value"
            },
            "code": "uint get_bit_08006b28(uint num, int bit_position)\n{\n  uint* PTR_ = (uint*)(bit_position + ((num << 0x18) >> 0x1c) * 4);\n  uint DAT_ = *PTR_;\n  uint bit = (num & 0xf);\n  return (DAT_ >> bit) & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_valid_080085dc",
                "param_1": "index",
                "uVar1": "result",
                "PTR_DAT_080085fc": "data_ptr"
            },
            "code": "bool is_valid_080085dc(int index) {\n    uint32_t address = *(uint32_t *)(PTR_DAT_080085fc + (uint32_t)*(uint8_t *)(index + 0x44) * 4);\n    uint32_t result = FUN_08006b1c(address);\n    return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "data_address",
                "*(byte *)(param_1 + 0x3a)": "byte_1",
                "*(byte *)(param_1 + 0x39)": "byte_2"
            },
            "code": "byte combine_bytes_08006b1c(int data_address){\n    byte byte_1 = *(byte*)(data_address + 0x3a);\n    byte byte_2 = *(byte*)(data_address + 0x39);\n    return byte_1 | byte_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "execute_function_08008ed6",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "FUN_08008e7c": "execute_function"
            },
            "code": "void execute_function_08008ed6(uint32_t *function_ptr, uint32_t arg1, uint32_t arg2, uint32_t arg3) {\n  if (arg2 != 0) {\n    execute_function_08008ed6(function_ptr, arg1, arg2 & 0xff, arg3);\n    return;\n  }\n  (**(void (**)(void)) *function_ptr)(function_ptr, arg1 & 0xff, 0, *(void (**)(void)) *function_ptr, arg3);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "execute_function_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "initialize_0800a130",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "iVar2": "func_result"
            },
            "code": "void initialize_0800a130(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n    undefined *ptr = PTR_DAT_0800a150;\n    *(undefined4 *)PTR_DAT_0800a150 = 0;\n    int func_result = FUN_08008854(param_2, param_3, param_4, param_4, param_4);\n    if (func_result == -1 && *(int *)ptr != 0) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a042",
                "FUN_0800a07a"
            ],
            "imported": false,
            "current_name": "initialize_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    bit_count++;\n    num = num >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "copy_data_to_new_location_08002ef2",
                "param_1": "source_addr",
                "param_2": "dest_addr",
                "param_3": "data_length",
                "param_4": "param_4"
            },
            "code": "void copy_data_to_new_location_08002ef2(int source_addr, int dest_addr, short data_length, int param_4) {\n  copy_data(source_addr + 0x40, dest_addr, data_length, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "copy_data_to_new_location_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_by_index_08007332",
                "param_1": "index",
                "param_2": "data_array",
                "*param_2": "*data_array"
            },
            "code": "int find_value_by_index_08007332(int index, char *data_array)\n{\n    while( true ) {\n        if (*(int *)(data_array + 4) == 0) {\n            return -1;\n        }\n        if (*(int *)(data_array + 4) == index) break;\n        data_array = data_array + 0xc;\n    }\n    return (int)*data_array;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "imported": false,
            "current_name": "find_value_by_index_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "process_request_08006128",
                "param_1": "request",
                "param_2": "request_type",
                "param_3": "param",
                "*(char *)(param_1 + 0xf)": "*(char *)(request + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)request + 0x3d)",
                "FUN_08005cec": "handle_request_type_0",
                "FUN_080060c4": "handle_request_type_4",
                "FUN_08005d48": "handle_request_type_8",
                "FUN_08005dac": "handle_request_type_12"
            },
            "code": "int process_request_08006128(int *request, int request_type, int param){\n  if (*(char *)(request + 0xf) != '\\x01') {\n    *(char *)(request + 0xf) = 1;\n    *(char *)((int)request + 0x3d) = 2;\n    switch(request_type) {\n    case 0:\n      handle_request_type_0(*request);\n      break;\n    case 4:\n      handle_request_type_4(*request);\n      break;\n    case 8:\n      handle_request_type_8(*request);\n      break;\n    case 0xc:\n      handle_request_type_12(*request);\n    }\n    *(char *)((int)request + 0x3d) = 1;\n    *(char *)(request + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_request_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_data_and_call_function_08003658",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void copy_data_and_call_function_08003658(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table_ptr;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08003698; data_ptr < PTR_DAT_0800369c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  FUN_080073ec();\n  FUN_08009148();\n  jump_table_ptr = (code *)0x800368a;\n  FUN_08008f1c();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_call_function_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "decode_packet_08009a80",
                "param_1": "result",
                "param_2": "packet",
                "uVar1": "packet_type",
                "uVar2": "flags",
                "iVar3": "decoder_data_ptr",
                "PTR_PTR_DAT_08009b4c": "decoder_data_ptr_ptr",
                "PTR_DAT_08009b50": "packet_type_1",
                "PTR_DAT_08009b54": "packet_type_2",
                "PTR_DAT_08009b58": "packet_type_3"
            },
            "code": "uint decode_packet_08009a80(uint32_t *result, uint32_t *packet) {\n  uint32_t packet_type;\n  uint32_t *decoder_data;\n  uint16_t flags;\n  int decoder_data_ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if (decoder_data_ptr != 0 && *(int *)(decoder_data_ptr + 0x18) == 0) {\n    cleanup_decoder(decoder_data_ptr);\n  }\n  if (packet == (uint32_t *)PTR_DAT_08009b50) {\n    decoder_data = *(uint32_t **)(decoder_data_ptr + 4);\n  }\n  else if (packet == (uint32_t *)PTR_DAT_08009b54) {\n    decoder_data = *(uint32_t **)(decoder_data_ptr + 8);\n  }\n  else if (packet == (uint32_t *)PTR_DAT_08009b58) {\n    decoder_data = *(uint32_t **)(decoder_data_ptr + 0xc);\n  }\n  flags = *(uint16_t *)(decoder_data + 3);\n  packet_type = (uint32_t)flags;\n  if ((int32_t)(packet_type << 0x1c) >= 0) {\n    if ((int32_t)(packet_type << 0x1b) >= 0) {\n      *result = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int32_t)(packet_type << 0x1d) < 0) {\n      if ((uint32_t *)decoder_data[0xd] != (uint32_t *)0x0) {\n        if ((uint32_t *)decoder_data[0xd] != decoder_data + 0x11) {\n          cleanup_decoder(result);\n        }\n        decoder_data[0xd] = 0;\n      }\n      *(uint16_t *)(decoder_data + 3) = *(uint16_t *)(decoder_data + 3) & 0xffdb;\n      decoder_data[1] = 0;\n      *decoder_data = decoder_data[4];\n    }\n    *(uint16_t *)(decoder_data + 3) = *(uint16_t *)(decoder_data + 3) | 8;\n  }\n  if (decoder_data[4] == 0 && (*(uint16_t *)(decoder_data + 3) & 0x280) != 0x200) {\n    handle_error(result, decoder_data);\n  }\n  flags = *(uint16_t *)(decoder_data + 3);\n  packet_type = flags & 1;\n  if ((flags & 1) == 0) {\n    if ((int32_t)((uint32_t)flags << 0x1e) >= 0) {\n      packet_type = decoder_data[5];\n    }\n    decoder_data[2] = packet_type;\n  }\n  else {\n    decoder_data[2] = 0;\n    decoder_data[6] = -decoder_data[5];\n  }\n  if (decoder_data[4] == 0) {\n    flags = *(uint16_t *)(decoder_data + 3);\n    packet_type = (int16_t)flags & 0x80;\n    if (packet_type != 0) {\n      *(uint16_t *)(decoder_data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    packet_type = 0;\n  }\n  return packet_type;\n}",
            "called": [
                "FUN_08009eac",
                "FUN_08009d50",
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "decode_packet_08009a80"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08005084",
                "FUN_08004a76"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "set_bits_080062f4",
                "param_1": "bits",
                "param_2": "bit_mask",
                "puVar1": "bit_array",
                "DAT_0800638c": "PTR_0800638c"
            },
            "code": "uint32_t set_bits_080062f4(uint32_t **bits, uint32_t bit_mask) {\n  uint32_t *bit_array = *bits;\n  switch(bit_mask) {\n    case 0x0:\n      bit_array[3] &= 0xfffffffd;\n      break;\n    case 0x4:\n      bit_array[3] &= 0xfffffffb;\n      break;\n    case 0x8:\n      bit_array[3] &= 0xfffffff7;\n      break;\n    case 0xc:\n      bit_array[3] &= 0xffffffef;\n      break;\n  }\n\n  set_bits_080062f4_helper(bit_array, bit_mask, 0);\n\n  if (((bit_array == DAT_0800638c) && ((bit_array[8] & 0x1111) == 0)) && ((bit_array[8] & 0x444) == 0)) {\n    bit_array[0x11] &= 0xffff7fff;\n  }\n\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    *bit_array &= 0xfffffffe;\n  }\n\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bits_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "code": "void infinite_loop_080073e8(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "infinite_loop_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "data_ptr"
            },
            "code": "int process_data_08004a76(int *data)\n{\n  char current_char;\n  int *data_ptr;\n  \n  current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    data_ptr = (int *)data[9];\n    data[9] = (int)(data_ptr + 1);\n    *data_ptr = (char)*(int *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) - 1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(char *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "check_and_set_value_0800267c",
                "param_1": "input_array",
                "param_2": "index",
                "iVar1": "calculated_value"
            },
            "code": "void check_and_set_value_0800267c(byte *input_array, int index) {\n  int calculated_value;\n  if (*input_array < 0xc) {\n    calculated_value = (0x88 - (char)input_array[1]) * 4;\n    if ((calculated_value - index == 0 || calculated_value < index) &&\n        (calculated_value = (600 - (char)input_array[2]) * 4,\n        index == calculated_value || index + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(index, calculated_value))) {\n      calculated_value = index;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "check_and_set_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_input_080047f4",
                "param_1": "input_array",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "puVar2": "current_element",
                "local_c": "local_counter"
            },
            "code": "uint32_t process_input_080047f4(uint32_t **input_array, uint32_t *input_2, uint32_t *input_3, uint16_t input_4)\n{\n  uint32_t result;\n  uint32_t *current_element;\n  uint32_t local_counter;\n  \n  if ((*input_array)[0x3d] == ' ') {\n    local_counter = ((uint64_t)GLOBAL_CONST_1 * ((uint64_t)(*(uint32_t *)GLOBAL_PTR_1) >> 3) >> 0x28) * 0x19;\n    do {\n      if (local_counter == 0) {\n        input_array[0xc] = NULL;\n        (*input_array)[0x3d] = 0x20;\n        input_array[0xf] = 0;\n        return 3;\n      }\n      current_element = *input_array;\n      local_counter--;\n    } while ((current_element[6] & 2) != 0);\n    \n    if ((*input_array)[0xf] == 1) {\n      result = 2;\n    }\n    else {\n      (*input_array)[0xf] = 1;\n      if ((*current_element & 1) == 0) {\n        *current_element = *current_element | 1;\n      }\n      **input_array = **input_array & 0xfffff7ff;\n      (*input_array)[0x3d] = 0x22;\n      (*input_array)[0x3e] = 0x10;\n      result = 0;\n      input_array[0x10] = NULL;\n      input_array[9] = input_3;\n      (*input_array)[0xb] = GLOBAL_CONST_2;\n      input_array[10] = input_4;\n      input_array[0x11] = input_2;\n      **input_array = **input_array | 0x400;\n      **input_array = **input_array | 0x100;\n      (*input_array)[0xf] = 0;\n      (*input_array)[1] = (*input_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_input_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "process_input_0800376c",
                "param_1": "input",
                "param_2": "limit",
                "iVar1": "start_time",
                "uVar2": "divisor",
                "iVar3": "count",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "threshold",
                "local_1c": "local_count",
                "PTR_DAT_080038c8": "DIVISOR_PTR",
                "FUN_08005bb8": "DIVISOR_FUNC",
                "DAT_080038cc": "CONST1",
                "DAT_080038d0": "CONST2",
                "DAT_080038d4": "CONST3",
                "DAT_080038d8": "CONST4"
            },
            "code": "uint32_t process_input_0800376c(uint32_t **input, uint32_t limit)\\n\\\n{\\n\\\n  int32_t start_time = get_time();\\n\\\n  uint32_t divisor, threshold, count, flags;\\n\\\n  uint32_t *data = *input;\\n\\\n  uint32_t local_count = 0;\\n\\\n  \\n\\\n  flags = data[2];\\n\\\n  if ((flags & 0x100) == 0) {\\n\\\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\\n\\\n      do {\\n\\\n        if ((**input & 2) != 0) goto finish;\\n\\\n        count = get_time() - start_time;\\n\\\n      } while ((limit == 0xffffffff) || ((limit != 0) && (count <= limit)));\\n\\\n      (*input)[10] |= 4;\\n\\\n      *(uint8_t *)(*input + 9) = 0;\\n\\\n      return 3;\\n\\\n    }\\n\\\n    else {\\n\\\n      divisor = *(uint32_t *)PTR_DAT_080038c8;\\n\\\n      threshold = 0x14;\\n\\\n      if (((data[4] & DAT_080038cc) == 0) && ((data[3] & DAT_080038cc + 0xdc000000) == 0)) {\\n\\\n        if ((data[4] & DAT_080038d0) == 0) {\\n\\\n          if ((data[3] & DAT_080038d4) != 0) threshold = 0x29;\\n\\\n        }\\n\\\n        else threshold = 0x29;\\n\\\n      }\\n\\\n      else if (((data[4] & DAT_080038d0) == 0) && ((data[3] & DAT_080038d0 + 0xee000000) == 0)) {\\n\\\n        threshold = 0x54;\\n\\\n      }\\n\\\n      else if ((DAT_080038d8 & data[4]) == 0) {\\n\\\n        if ((DAT_080038d8 & data[3]) != 0) threshold = 0xfc;\\n\\\n        else threshold = 0x54;\\n\\\n      }\\n\\\n      else threshold = 0xfc;\\n\\\n      threshold = (divisor / FUN_08005bb8(2)) * threshold;\\n\\\n      for (; local_count <= threshold && threshold - local_count != 0; local_count++) {\\n\\\n        count = get_time() - start_time;\\n\\\n        if ((limit != 0xffffffff) && ((limit == 0) || (count > limit))) {\\n\\\n          (*input)[10] |= 4;\\n\\\n          *(uint8_t *)(*input + 9) = 0;\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n      **input = 0xffffffed;\\n\\\n      (*input)[10] |= 0x200;\\n\\\n      if (((*input)[2] & 0xe0000) == 0xe0000) {\\n\\\n        if ((*input)[3] == (uint32_t *)0x0) {\\n\\\n          (*input)[10] &= 0xfffffeff;\\n\\\n          if (((*input)[10] & 0x1000) == 0) {\\n\\\n            (*input)[10] |= 1;\\n\\\n            return 0;\\n\\\n          }\\n\\\n          else return 0;\\n\\\n        }\\n\\\n        else return 0;\\n\\\n      }\\n\\\n      else return 0;\\n\\\n    }\\n\\\n  }\\n\\\n  else {\\n\\\n    (*input)[10] |= 0x20;\\n\\\n    *(uint8_t *)(*input + 9) = 0;\\n\\\n    return 1;\\n\\\n  }\\n\\\nfinish:\\n\\\n  (*input)[10] |= 0x200;\\n\\\n  *(uint8_t *)(*input + 9) = 0;\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "process_input_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "check_status_08003e20",
                "param_1": "status_array",
                "iVar1": "result",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "temp_value",
                "local_14": "i"
            },
            "code": "int check_status_08003e20(int *status_array) {\n  int result = 0;\n  uint divisor = 0;\n  int start_time = 0;\n  int current_time = 0;\n  int temp_time = 0;\n  uint temp_value = 0;\n  if (*(char *)(status_array + 9) == 1) {\n    return 2;\n  }\n  *(undefined *)(status_array + 9) = 1;\n  result = check_connection();\n  if (result == 0) {\n    status_array[10] = (status_array[10] & 0xffffeefd) | 2;\n    temp_value = *(uint *)PTR_DAT_08003f08;\n    divisor = FUN_08005bb8(2);\n    for (int i = temp_value / divisor << 1; i != 0; i--) {\n    }\n    update_status(status_array);\n    *(uint *)(*status_array + 8) = *(uint *)(*status_array + 8) | 8;\n    start_time = get_time();\n    while ((*(uint *)(*status_array + 8) & 8) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        status_array[10] = (status_array[10] & 0xffffffed) | 0x10;\n        *(undefined *)(status_array + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(*status_array + 8) = *(uint *)(*status_array + 8) | 4;\n    temp_time = get_time();\n    while ((*(uint *)(*status_array + 8) & 4) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - temp_time)) {\n        status_array[10] = (status_array[10] & 0xffffffed) | 0x10;\n        *(undefined *)(status_array + 9) = 0;\n        return 1;\n      }\n    }\n    status_array[10] = (status_array[10] & 0xfffffffc) | 1;\n  }\n  *(undefined *)(status_array + 9) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08003b8c",
                "FUN_08005bb8",
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_status_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "calculate_shifted_result_08005a48",
                "FUN_08005a1c": "get_initial_value",
                "PTR_DAT_08005a64": "SHIFT_AMOUNTS_START_ADDRESS",
                "DAT_08005a60": "DATA_START_ADDRESS"
            },
            "code": "unsigned int calculate_shifted_result_08005a48(void)\n{\n  unsigned int result;\n  result = get_initial_value();\n  int* data_pointer = (int *)(DAT_08005a60 + 4);\n  int shifted_value = (*data_pointer) << 0x12;\n  int index = shifted_value >> 0x1d;\n  unsigned int* shift_amounts = (unsigned int*)PTR_DAT_08005a64;\n  result = result >> shift_amounts[index];\n  return result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_result_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_bytes_and_shift_left_bit_080033a8",
                "param_1": "dest",
                "param_2": "src_size",
                "param_3": "src",
                "iVar2": "dest_index",
                "uVar3": "src_index",
                "bVar1": "b"
            },
            "code": "void copy_bytes_and_shift_left_bit_080033a8(uint8_t* dest, uint src_size, uint8_t* src){\n  uint dest_index = 0;\n  for (uint src_index = 0; src_index < src_size; src_index += 2) {\n    uint8_t b = *(src + src_index);\n    *(dest + dest_index) = b;\n    *(dest + dest_index) = (*(src + src_index + 1) << 7) | b;\n    dest_index++;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_bytes_and_shift_left_bit_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "execute_function_08002c14",
                "FUN_08002c00": "execute_subfunction"
            },
            "code": "void execute_function_08002c14(void)\n{\n  execute_subfunction();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "execute_function_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "getByteFromTableAndStore_08008d18",
                "param_1": "storageAddress",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "code": "void getByteFromTableAndStore_08008d18(int storageAddress, uint index)\n{\n  undefined byteValue;\n  if (index < 0x3c) {\n    byteValue = PTR_DAT_08008d2c[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(storageAddress + 300) = byteValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "getByteFromTableAndStore_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "param_1": "param",
                "iVar1": "index",
                "FUN_0800a18c": "initialize",
                "FUN_08008f3c": "get_index"
            },
            "code": "void execute_function_08009084(int param)\n{\n  int index;\n  \n  if (*(int *)(param + 8) != 0) {\n    (**(code **)(param + 0xc))();\n    return;\n  }\n  initialize();\n  index = get_index();\n  if (*(int *)(PTR_DAT_080090b0 + index * 0x14 + 0xc) != 0) {\n    execute_function_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_function_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "data",
                "param_2": "counter",
                "iVar1": "offset",
                "uVar2": "new_counter",
                "bVar3": "is_positive"
            },
            "code": "void update_data_0800a020(uint16_t *data, uint32_t *counter) {\n    int offset = get_offset(*((uint16_t *)(data + 0xe)));\n    bool is_positive = offset >= 0;\n    uint32_t new_counter = is_positive ? *(counter) + offset : *(data + 0xc) & 0xffffefff;\n    if (is_positive) {\n        *(counter) = new_counter;\n    }\n    else {\n        *(data + 0xc) = (uint16_t)new_counter;\n    }\n}\n",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "uVar1": "value",
                "uVar2": "flags",
                "local_1c": "data",
                "abStack_18": "array"
            },
            "code": "uint calculate_value_08005840(void)\n{\n  uint value;\n  uint flags;\n  undefined2 data;\n  byte array[4];\n  undefined4 uStack_c;\n  undefined4 uStack_10;\n  undefined4 uStack_14;\n  \n  uStack_c = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  uStack_10 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  uStack_14 = *(undefined4 *)PTR_DAT_0800589c;\n  data = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  flags = *(uint *)(DAT_080058a0 + 4);\n  value = DAT_080058a8;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      value = DAT_080058a4 * (uint)array[(flags << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_080058a8 * array[(flags << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&data - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_param2_if_param1_not_zero_08007f7c",
                "param_1": "param1",
                "param_2": "param2",
                "*(int *)(param_1 + 0x60)": "*ptr",
                "FUN_080049e0": "call_function_with_param1_ptr_plus4"
            },
            "code": "void set_param2_if_param1_not_zero_08007f7c(int param1, int param2) {\n  if (param1 != 0) {\n    if (param2 != 0) {\n      int *ptr = (int *)(param1 + 0x60);\n      *ptr = param2;\n      call_function_with_param1_ptr_plus4(ptr);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param2_if_param1_not_zero_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "validate_input_08006d80",
                "param_1": "input",
                "local_46": "result",
                "local_44": "num_bytes_read",
                "local_40": "error_code",
                "local_3c": "error_code",
                "local_38": "buffer",
                "local_34": "error_code",
                "local_30": "error_code",
                "local_2c": "error_code",
                "local_28": "offset",
                "local_24": "error_code",
                "local_20": "error_code",
                "local_1c": "num_digits",
                "local_10": "result",
                "PTR_DAT_08006e64": "buffer[0]",
                "PTR_DAT_08006e60": "whitespace_characters",
                "FUN_080091c6": "memset",
                "FUN_08007320": "read_input",
                "FUN_08006c60": "extract_data_from_buffer",
                "FUN_080038e4": "skip_whitespace",
                "FUN_08003e20": "extract_number",
                "FUN_08003aa0": "extract_number",
                "FUN_0800376c": "extract_number",
                "FUN_08003a1c": "extract_number"
            },
            "code": "typedef unsigned short ushort; \n\nushort validate_input_08006d80(ushort input) {\n  int error_code = 0;\n  uint num_bytes_read = 0;\n  ushort result = 0;\n\n  char buffer[48];\n  memset(buffer, 0, sizeof(buffer));\n\n  error_code = read_input(input, buffer);\n  if (error_code != 0) {\n    return result;\n  }\n\n  num_bytes_read = strlen(buffer);\n  if (num_bytes_read < 18) {\n    return result;\n  }\n\n  error_code = extract_data_from_buffer(buffer, num_bytes_read, &result);\n  if (error_code != 0) {\n    return result;\n  }\n\n  return result;\n}\n\nint read_input(ushort input, char* buffer) {\n  int error_code = 0;\n\n  if (input == 0) {\n    error_code = -1;\n  }\n  else {\n    PTR_DAT_08006e64 = (char)input;\n  }\n\n  return error_code;\n}\n\nint extract_data_from_buffer(char* buffer, uint buffer_size, ushort* result) {\n  int error_code = 0;\n  int offset = 0;\n\n  offset = skip_whitespace(buffer, buffer_size, offset);\n  if (offset == -1) {\n    error_code = -1;\n  }\n  else {\n    *result = extract_number(buffer, buffer_size, offset);\n  }\n\n  return error_code;\n}\n\nint skip_whitespace(char* buffer, uint buffer_size, int offset) {\n  while (offset < buffer_size && isspace(buffer[offset])) {\n    offset++;\n  }\n\n  if (offset == buffer_size) {\n    return -1;\n  }\n\n  return offset;\n}\n\nushort extract_number(char* buffer, uint buffer_size, int offset) {\n  ushort result = 0;\n  uint num_digits = 0;\n\n  while (offset < buffer_size && isdigit(buffer[offset])) {\n    num_digits++;\n    result = result * 10 + (buffer[offset] - '0');\n    offset++;\n  }\n\n  if (num_digits == 0) {\n    return 0;\n  }\n\n  return result;\n}",
            "called": [
                "FUN_0800376c",
                "FUN_08003aa0",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_080038dc",
                "FUN_08003de4",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003a1c",
                "FUN_08006c60",
                "FUN_08003ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "validate_input_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "calculateResult_08006c60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shiftedResult"
            },
            "code": "uint calculateResult_08006c60(uint input1, uint input2, uint input3, uint input4)\n{\n  int result;\n  uint shiftedResult;\n  \n  result = performOperation(input1, PTR_DAT_08006c78, input3, input4, input4);\n  shiftedResult = (uint)(result << 0xc) >> 0x1b;\n  if (shiftedResult > 0x11) {\n    shiftedResult = 0;\n  }\n  return shiftedResult;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculateResult_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "update_data_08003306",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "data_type1",
                "param_4": "data_type2",
                "PTR_": "data_address + ",
                "DAT_": "data_type"
            },
            "code": "void update_data_08003306(int data_address, uint data_value, undefined4 DAT_1, undefined4 DAT_2)\n{\n  if (data_value == 208) {\n    *(undefined4 *)(PTR_88) = DAT_1;\n    *(undefined4 *)(PTR_40) = DAT_2;\n    return;\n  }\n  if (208 < data_value) {\n    if (data_value == 244) {\n      *(undefined4 *)(PTR_92) = DAT_1;\n      *(undefined4 *)(PTR_44) = DAT_2;\n      return;\n    }\n    if (data_value == 245) {\n      *(undefined4 *)(PTR_96) = DAT_1;\n      *(undefined4 *)(PTR_48) = DAT_2;\n    }\n    else if (data_value == 224) {\n      *(undefined4 *)(PTR_76) = DAT_1;\n      *(undefined4 *)(PTR_28) = DAT_2;\n      return;\n    }\n    return;\n  }\n  if (data_value == 144) {\n    *(undefined4 *)(PTR_80) = DAT_1;\n    *(undefined4 *)(PTR_32) = DAT_2;\n    return;\n  }\n  if (data_value == 192) {\n    *(undefined4 *)(PTR_84) = DAT_1;\n    *(undefined4 *)(PTR_36) = DAT_2;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "initialize_application_08002578",
                "FUN_080076e0": "initialize_graphics"
            },
            "code": "void initialize_application_08002578(void)\n{\n  initialize_graphics();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "initialize_application_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_flag_and_call_function_08006932",
                "param_1": "base_address",
                "*param_1": "*base_address",
                "uint": "uint32_t",
                "PTR_": "base_",
                "DAT_": "data_",
                "undefined": "char",
                "FUN_08008730": "call_some_function"
            },
            "code": "int set_flag_and_call_function_08006932(int *PTR_address)\n{\n    uint32_t *flag_address = (uint32_t *)(*PTR_address + 0xc);\n    *flag_address &= 0xffffffbf;\n    char *status_address = (char *)(PTR_address + 0x39);\n    *status_address = 0x20;\n    call_some_function();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data_word1",
                "uVar2": "data_word2",
                "iVar3": "data_value1",
                "PTR_DAT_08006124": "PTR_DAT_special_case",
                "mask1": "MASK1",
                "mask2": "MASK2",
                "mask3": "MASK3",
                "mask4": "MASK4",
                "param_2[1]": "data_value2",
                "param_2[2]": "data_value3",
                "param_2[3]": "data_value4",
                "param_2[4]": "data_value5",
                "param_2[5]": "data_value6"
            },
            "code": "void update_data_080060c4(int data_address, int *data_values) {\n    uint32_t mask1 = 0xffffffef;\n    uint32_t mask2 = 0xfffff3ff;\n    uint32_t mask3 = 0xffffffdf;\n    uint32_t mask4 = 0xffffff7f;\n    uint32_t data_word1 = *(uint32_t *)(data_address + 0x20) & mask1;\n    uint32_t data_word2 = *(uint32_t *)(data_address + 0x4);\n    int data_value1 = *data_values;\n    int data_value2 = data_values[1];\n    int data_value3 = data_values[2];\n    int data_value4 = data_values[3];\n    int data_value5 = data_values[4];\n    int data_value6 = data_values[5];\n    data_word1 = (data_word1 & mask3) | (data_value3 << 4);\n    if (data_address == PTR_DAT_08006124) {\n        data_word1 = (data_word1 & mask4) | (data_value4 << 4);\n        data_word2 = (data_word2 & mask2) | (data_value5 << 2) | (data_value6 << 2);\n    }\n    *(uint32_t *)(data_address + 0x20) = data_word1;\n    *(uint32_t *)(data_address + 0x4) = data_word2;\n    *(uint32_t *)(data_address + 0x18) = (*(uint32_t *)(data_address + 0x18) & 0xffff8cff) | (data_value1 << 8);\n    *(int *)(data_address + 0x38) = data_value2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "process_data_08009eac",
                "param_1": "data",
                "param_2": "info",
                "local_18": "value1",
                "local_14": "temp_ptr",
                "uVar1": "flag",
                "iVar2": "value2"
            },
            "code": "void process_data_08009eac(int data, int *info)\n{\n  ushort flag;\n  int value1;\n  int value2;\n  int *temp_ptr;\n\n  if (-1 < (int)((uint)*(ushort *)(info + 3) << 0x1e)) {\n    value1 = data;\n    temp_ptr = info;\n    flag = calculate_flag(data, info, &value1, &temp_ptr);\n    value2 = calculate_value(data, value1);\n    if (value2 != 0) {\n      *(undefined **)(data + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *info = value2;\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x80;\n      info[4] = value2;\n      info[5] = value1;\n      if ((temp_ptr != (int *)0x0) &&\n         (value2 = check_value(data,(int)*(short *)((int)info + 0xe)), value2 != 0)) {\n        *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(info + 3) = flag | *(ushort *)(info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xfffc | 2;\n  }\n  *info = (int)info + 0x47;\n  info[4] = (int)info + 0x47;\n  info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08009e64",
                "FUN_08009270",
                "FUN_0800a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "process_data_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "process_data_080072d8",
                "param_1": "data_ptr",
                "param_2": "data_val",
                "param_3": "data_len",
                "param_4": "data_buf",
                "FUN_080042e2": "process_data_helper"
            },
            "code": "void process_data_080072d8(undefined4 data_ptr, undefined2 data_val, int data_len, undefined4 data_buf) {\n  if (data_len == 0) {\n    process_data_080072d8_helper(data_ptr, data_val, 0, data_buf, data_buf);\n    return;\n  }\n  process_data_080072d8_helper(data_ptr, data_val, 1, data_buf, data_buf);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "process_data_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "param_1": "params",
                "bVar1": "is_within_range",
                "uVar2": "result",
                "puVar3": "ptr1"
            },
            "code": "uint32_t calculate_parameters_080045c0(uint32_t **params)\\n{\\n    bool is_within_range;\\n    uint32_t uVar1;\\n    uint32_t *ptr1;\\n    uint32_t uVar2;\\n\\n    if (params == (uint32_t **)0x0) {\\n        return 1;\\n    }\\n    if (*(char *)((int)params + 0x3d) == \"\\0\") {\\n        *(undefined *)(params + 0xf) = 0;\\n        do_nothing_080045bc();\\n    }\\n    *(undefined *)((int)params + 0x3d) = 0x24;\\n    **params = **params & 0xfffffffe;\\n    uVar1 = FUN_08005a28();\\n    if (DAT_08004714 < params[1]) {\\n        is_within_range = uVar1 <= DAT_08004720;\\n    }\\n    else if (DAT_08004718 < uVar1) {\\n        is_within_range = false;\\n    }\\n    else {\\n        is_within_range = true;\\n    }\\n    if (is_within_range) {\\n        return 1;\\n    }\\n    uVar2 = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)uVar1 >> 0x32);\\n    (*params)[1] = uVar2;\\n    if (DAT_08004714 < params[1]) {\\n        uVar2 = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(uVar2 * 300) >> 0x26);\\n    }\\n    (*params)[8] = uVar2 + 1;\\n    ptr1 = params[1];\\n    if (DAT_08004714 < ptr1) {\\n        if (params[2] == (uint32_t *)0x0) {\\n            uVar2 = count_leading_zeroes((uVar1 - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff);\\n        }\\n        else {\\n            uVar2 = count_leading_zeroes((uVar1 - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff);\\n        }\\n        if (uVar2 >> 5 == 0) {\\n            if (params[2] == (uint32_t *)0x0) {\\n                uVar1 = (uVar1 - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff | 0x8000;\\n            }\\n            else {\\n                uVar1 = (uVar1 - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff | 0xc000;\\n            }\\n        }\\n        else {\\n            uVar1 = 1;\\n        }\\n    }\\n    else {\\n        uVar1 = (uVar1 - 1) / (uint32_t)((int)ptr1 << 1) + 1 & 0xfff;\\n        if (uVar1 < 4) {\\n            uVar1 = 4;\\n        }\\n    }\\n    (*params)[7] = uVar1;\\n    **params = (uint32_t)params[7] | (uint32_t)params[8];\\n    (*params)[2] = (uint32_t)params[4] | (uint32_t)params[3];\\n    (*params)[3] = (uint32_t)params[5] | (uint32_t)params[6];\\n    **params = **params | 1;\\n    params[0x10] = (uint32_t *)0x0;\\n    *(undefined *)((int)params + 0x3d) = 0x20;\\n    params[0xc] = (uint32_t *)0x0;\\n    *(undefined *)((int)params + 0x3e) = 0;\\n    return 0;\\n}",
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_parameters_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_for_valid_input_08007e74",
                "param_1": "input_length",
                "param_2": "input_data1",
                "param_3": "input_data2",
                "param_4": "input_data3",
                "iVar1": "start_index",
                "iVar2": "check_result",
                "uVar3": "difference",
                "iVar4": "result",
                "iVar5": "current_index",
                "uVar6": "input_data4"
            },
            "code": "int check_for_valid_input_08007e74(int input_length, undefined4 input_data1, undefined4 input_data2, undefined4 input_data3)\n{\n  int start_index = FUN_08003760();\n  int loop_count = 2;\n  uint difference = 0;\n  int result = 2;\n  undefined4 input_data4 = input_data3;\n  do {\n    int current_index = input_length + 4;\n    int check_result = FUN_08004728(current_index, input_data1, input_data2, input_data3, input_data4);\n    if (check_result == 0) {\n      result = 0;\n      while ((check_result = FUN_0800542a(current_index), check_result != 0x20 && (result == 0))) {\n        int difference_temp = FUN_08003760() - start_index;\n        difference = difference_temp;\n        if (difference < 0x65) {\n          int check_result2 = FUN_08005430(current_index);\n          if (check_result2 != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    check_result = FUN_08005430(current_index);\n  } while ((check_result == 4) && (difference < 100));\n  return result;\n}\n",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_for_valid_input_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "process_data_08002efe",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "param_4"
            },
            "code": "void process_data_08002efe(int data_offset, int data_size, short data_type, int param_4)\n{\n  call_data_processing(data_offset + 0x40, data_size, data_type, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "process_data_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "set_param_if_max_value_08002f84",
                "param_1": "value_to_set",
                "param_2": "current_value",
                "param_3": "max_value_ptr"
            },
            "code": "void set_param_if_max_value_08002f84(int value_to_set, int current_value, int *max_value_ptr) {\n  if (current_value == 255) {\n    *(int *)PTR_DAT_08002f90 = value_to_set;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_param_if_max_value_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "calculate_and_print_result_08002ddc",
                "param_1": "input_value",
                "param_2": "constant1",
                "param_3": "constant2",
                "param_4": "constant3",
                "FUN_0800322c": "print_result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_and_print_result_08002ddc(int input_value, int constant1, int constant2, int constant3)\n{\n  int result = input_value + constant1;\n  int modifier1 = 2;\n  int modifier2 = 5;\n  print_result(result + modifier1, modifier1, modifier2, constant3, constant3);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "calculate_and_print_result_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "check_if_valid_08009094",
                "iVar1": "random_index",
                "FUN_08008f3c": "get_random_index",
                "PTR_DAT_080090b0": "ptr_dat",
                "*ptr": "value_at_ptr",
                "FUN_08009084": "perform_validity_check"
            },
            "code": "void check_if_valid_08009094() {\n  int random_index = get_random_index();\n  int* ptr = (int*)(PTR_DAT_080090b0 + random_index * 0x14 + 0xc);\n  if (*ptr != 0) {\n    perform_validity_check();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "check_if_valid_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_in_string_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "previous_char"
            },
            "code": "char* find_character_in_string_08009f2c(char* string, char character, int length) {\n  char* current_char = string;\n  while (current_char != string + length) {\n    if (*current_char == character) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "starting_value",
                "param_2": "array",
                "iVar1": "array_index",
                "PTR_": "PTR_ (no change)",
                "DAT_": "DAT_ (no change)"
            },
            "code": "int calculate_value_0800a154(int starting_value, int *array) {\n  int array_index = starting_value - 4;\n  if (starting_value < 0) {\n    array_index += array[array_index];\n  }\n  return array_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "set_byte_08002580",
                "*param_1": "*output_byte",
                "byte bVar1": "byte current_byte",
                "bVar1": "current_byte"
            },
            "code": "void set_byte_08002580(byte *output_byte) {\n  byte current_byte = *PTR_DAT_080025a4;\n  if (current_byte > 0xb) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_byte + 1;\n  *output_byte = current_byte;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_byte * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "set_byte_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_value_08007f8e",
                "param_1": "obj_ptr",
                "param_2": "param_value",
                "*(int *)(param_1 + 100)": "*(int *)(obj_ptr + 100)",
                "FUN_080049e0": "initialize_object"
            },
            "code": "void set_param_value_08007f8e(int obj_ptr,int param_value)\n{\n  if (obj_ptr == 0 || param_value == 0) {\n    return;\n  }\n  *(int *)(obj_ptr + 100) = param_value;\n  initialize_object(obj_ptr + 4);\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_value_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "array_index",
                "PTR_": "array_element",
                "DAT_": "bit_mask"
            },
            "code": "void set_bit_in_array_08006b3e(uint bit_index, int* array) {\n    uint array_index = (bit_index << 0x18) >> 0x1c;\n    uint* PTR_ = (uint*)(array + array_index * 4);\n    uint DAT_ = 1 << (bit_index & 0xf);\n    *PTR_ |= DAT_;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_08006262",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*": "*",
                "(uint *)(param_1 + 0x20)": "data_pointer",
                "*(uint *)(param_1 + 0x20)": "*data_pointer",
                "param_2 & 0xff": "bit_position & 0xff",
                "1 << (param_2 & 0xff)": "mask",
                "&~": "&~",
                "|": "|",
                "return;": "return;"
            },
            "code": "void set_bit_08006262(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t *data_pointer = data + 0x20;\n    uint8_t mask = 1 << (bit_position & 0xff);\n    *data_pointer &= ~mask;\n    *data_pointer |= bit_value << (bit_position & 0xff);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_08006390",
                "FUN_080063c0"
            ],
            "imported": false,
            "current_name": "set_bit_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "initialize_program_08007110",
                "FUN_080074e0": "initialize_database"
            },
            "code": "void initialize_program_08007110(void)\n{\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "initialize_program_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_timer_08007594",
                "param_1": "timer_value",
                "DAT_080075d0": "timer_threshold",
                "DAT_080075d4": "timer_threshold_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance"
            },
            "code": "int check_timer_08007594(uint32_t timer_value) {\n    if (timer_value == UINT32_MAX) {\n        return 0;\n    }\n    if (timer_value == DAT_080075d0) {\n        return 1;\n    }\n    if (DAT_080075d0 < timer_value) {\n        if (timer_value == DAT_080075d4) {\n            return 1;\n        }\n        if (timer_value == DAT_080075d4 + TIMER_INCREMENT) {\n            return 2;\n        }\n    }\n    else if (timer_value == TIMER_MIN_VALUE) {\n        return 1;\n    }\n    unknown_timer_func(PTR_s_TIM__Unknown_timer_instance_080075d8);\n    return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_timer_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_mask_080073ec",
                "puVar1": "ptr",
                "DAT_0800742c": "data_ptr",
                "DAT_08007430": "mask",
                "DAT_08007434": "other_data_ptr"
            },
            "code": "void set_bit_and_mask_080073ec(uint *DAT_0800742c) {\n  uint *ptr = DAT_0800742c;\n  *ptr |= 1;\n  ptr[1] &= ptr[2];\n  *ptr &= 0xfef6ffff;\n  *ptr &= 0xfffbffff;\n  ptr[1] &= 0xff80ffff;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_0800742c + 0x8) = 0x8000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_mask_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "start_range",
                "param_4": "end_range",
                "param_5": "value_to_map"
            },
            "code": "uint32_t calculate_new_value_08008ef4(uint32_t start_value, uint32_t end_value, uint32_t start_range, uint32_t end_range, uint32_t value_to_map)\n{\n    uint32_t range_diff = end_range - start_range;\n    uint32_t value_diff = end_value - start_value;\n    uint32_t value_ratio = value_diff / range_diff;\n    uint32_t mapped_value = (value_to_map - start_range) * value_ratio + start_value;\n    return mapped_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "param_1": "data_address",
                "puVar1": "data_ptr",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(data_address + DATA_FLAG_OFFSET)",
                "*(undefined **)(param_1 + 200)": "*(undefined **)(data_address + DATA_PTR_OFFSET)",
                "FUN_080031ce": "process_data_helper"
            },
            "code": "void process_data_08002df6(int data_address)\n{\n  if (*(byte *)(data_address + DATA_FLAG_OFFSET) == 0) {\n    return;\n  }\n  undefined *data_ptr = *(undefined **)(data_address + DATA_PTR_OFFSET);\n  process_data_08002df6_helper(data_address + DATA_OFFSET, *data_ptr, data_ptr[1],*(byte *)(data_address + DATA_FLAG_OFFSET) - 2, data_ptr + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "process_data_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_input_data_08007118",
                "param_1": "input_data",
                "param_2": "divisor",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "flag",
                "uVar1": "quotient",
                "iVar2": "result",
                "iVar3": "process_result",
                "local_74": "local_variable_1",
                "local_70": "local_variable_2",
                "local_6c": "local_variable_3",
                "local_68": "local_variable_4",
                "local_64": "local_variable_5",
                "local_60": "local_variable_6",
                "local_5c": "local_variable_7",
                "local_58": "allocated_memory",
                "local_54": "result_1",
                "local_50": "local_variable_8",
                "local_4c": "result_2",
                "local_48": "local_variable_9",
                "local_44": "local_variable_10",
                "local_1b": "local_variable_11",
                "FUN_080091c6": "allocate_memory",
                "PTR_DAT_080071dc": "input_data_type_pointer",
                "PTR_DAT_080071e0": "input_data_pointer"
            },
            "code": "void process_input_data_08007118(undefined4 input_data, uint divisor, int param_3, undefined4 param_4, char flag) {\n  uint quotient;\n  int result;\n  int input_data_type;\n  undefined4 local_74;\n  undefined4 local_70;\n  undefined4 local_6c;\n  undefined4 local_68;\n  undefined4 local_64;\n  undefined4 local_60;\n  undefined4 local_5c;\n  int local_58;\n  int local_54;\n  undefined4 local_50;\n  int local_4c;\n  undefined4 local_48;\n  undefined4 local_44;\n  undefined local_1b;\n  allocate_memory(&local_58, 0, 0x40);\n  local_74 = 0;\n  local_70 = 0;\n  local_6c = 0;\n  local_68 = 0;\n  local_64 = 0;\n  local_60 = 0;\n  local_5c = 0;\n  local_58 = get_input_data(input_data, PTR_DAT_080071dc);\n  if (local_58 != 0) {\n    quotient = calculate_quotient();\n    local_54 = quotient / divisor - 1;\n    local_4c = param_3 + -1;\n    local_48 = 0;\n    local_50 = 0;\n    local_44 = 0;\n    local_1b = 0;\n    if (flag == '\\x01') {\n      *PTR_DAT_080071e0 = (char)input_data;\n      result = check_input_data(&local_58);\n      if (result != 0) {\n        return;\n      }\n    }\n    input_data_type = get_input_data_type(input_data);\n    if ((((input_data_type == 0) || (input_data_type == 4)) || (input_data_type == 8)) || ((input_data_type == 0xc || (input_data_type == 0x18)))) {\n      local_74 = 0x60;\n      local_6c = 0;\n      local_64 = 0;\n      local_68 = 0;\n      local_5c = 0;\n      local_60 = 0;\n      local_70 = param_4;\n      result = process_input_data_08007118_type(&local_58,&local_74,input_data_type);\n      if (result == 0) {\n        quotient = check_input_data_flag(input_data, PTR_DAT_080071dc);\n        if ((quotient & 0x100000) == 0) {\n          free_memory(&local_58,input_data_type);\n        }\n        else {\n          process_input_data_08007118_flag(&local_58,input_data_type);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08006186",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_08006c7c",
                "FUN_080091c6",
                "FUN_08006092",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_input_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "function_index",
                "puVar1": "error_ptr",
                "uVar2": "function_array_ptr_value",
                "piVar3": "function_array",
                "iVar4": "error_code",
                "pcVar5": "function_ptr",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr",
                "puVar6": "function_array_ptr",
                "PTR_PTR_DAT_08009ff4": "function_array_ptr_ptr",
                "PTR_DAT_0800a018": "error_code_ptr",
                "thunk_FUN_0800887c": "thunk_function_array_ptr",
                "FUN_0800886c": "execute_function_with_args"
            },
            "code": "int execute_function_08009fe8(uint function_index)\n{\n    int *function_array = *(int **)PTR_PTR_DAT_08009ff4;\n    if (function_index > 31) {\n        *function_array = 22;\n        return -1;\n    }\n    int function_ptr = function_array[17];\n    if ((function_ptr != 0) && (*(code **)(function_ptr + function_index * 4) != (code *)0) && (*(code **)(function_ptr + function_index * 4) != (code *)1)) {\n        *(undefined4 *)(function_ptr + function_index * 4) = 0;\n        (*(code **)(function_ptr + function_index * 4))(function_index);\n        return 0;\n    }\n    undefined *function_array_ptr = PTR_PTR_DAT_08009ff4;\n    undefined4 function_array_ptr_value = thunk_function_array_ptr(function_array);\n    undefined *error_ptr = PTR_DAT_0800a018;\n    *(undefined4 *)PTR_DAT_0800a018 = 0;\n    int error_code = execute_function_08009fe8_with_args(function_array_ptr_value, function_index, function_index, 0, function_array_ptr, unaff_r4, unaff_r5, in_lr);\n    if ((error_code == -1) && (*(int *)error_ptr != 0)) {\n        *function_array = *(int *)error_ptr;\n    }\n    return error_code;\n}",
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "execute_function_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_data_structure_08002c1e",
                "param_1": "start_index",
                "param_2": "max_value",
                "param_3": "data_ptr",
                "param_4": "data_end_ptr",
                "FUN_08002948": "set_data_values"
            },
            "code": "void initialize_data_structure_08002c1e(int start_index, int max_value, int* data_ptr, int* data_end_ptr)\n{\n  set_data_values(start_index, max_value, data_ptr, data_end_ptr, data_end_ptr);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structure_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "decode_data_08005a68",
                "param_1": "decoded_data",
                "param_2": "metadata",
                "iVar1": "data_ptr"
            },
            "code": "void decode_data_08005a68(uint8_t *decoded_data, uint32_t *metadata) {\n  decoded_data[0] = 0xf;\n  uint32_t data_ptr = DAT_08005a9c;\n  decoded_data[1] = *(uint32_t *)(data_ptr + 4) & 3;\n  decoded_data[2] = *(uint32_t *)(data_ptr + 4) & 0xf0;\n  decoded_data[3] = *(uint32_t *)(data_ptr + 4) & 0x700;\n  decoded_data[4] = *(uint32_t *)(data_ptr + 4) >> 3 & 0x700;\n  *metadata = *DAT_08005aa0 & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "decode_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "data_ptr": "data",
                "PTR_DAT_08009018": "data_start",
                "PTR_LAB_08008f50_1_08009020": "label_ptr",
                "PTR_DAT_0800901c": "data_ptr",
                "param_3": "unused_param",
                "param_4": "unused_param"
            },
            "code": "void initialize_data_08008f78(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *PTR_DAT_0800901c = PTR_DAT_08009018;\n  if (param_1 != 1) {\n    return;\n  }\n  if (param_2 == 0xffff) {\n    *PTR_DAT_0800901c = 6;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xc) = 0;\n    PTR_DAT_0800901c[0x14] = 7;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x20) = 0;\n    PTR_DAT_0800901c[0x28] = 8;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x34) = 0;\n    PTR_DAT_0800901c[0x3c] = 9;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x48) = 0;\n    PTR_DAT_0800901c[0x50] = 10;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x5c) = 0;\n    PTR_DAT_0800901c[100] = 0x17;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x70) = 0;\n    PTR_DAT_0800901c[0x78] = 0x17;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x84) = 0;\n    PTR_DAT_0800901c[0x8c] = 0x17;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x98) = 0;\n    PTR_DAT_0800901c[0xa0] = 0x17;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xac) = 0;\n    PTR_DAT_0800901c[0xb4] = 0x17;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xc0) = 0;\n    PTR_DAT_0800901c[200] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xd4) = 0;\n    PTR_DAT_0800901c[0xdc] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xe8) = 0;\n    PTR_DAT_0800901c[0xf0] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0xfc) = 0;\n    PTR_DAT_0800901c[0x104] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x110) = 0;\n    PTR_DAT_0800901c[0x118] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x124) = 0;\n    PTR_DAT_0800901c[300] = 0x28;\n    *(undefined4 *)(PTR_DAT_0800901c + 0x138) = 0;\n    FUN_080090c2(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, PTR_DAT_0800901c, param_4);\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_params_08008d30",
                "param_1": "params_array",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "character_1"
            },
            "code": "undefined4* initialize_params_08008d30(undefined4* params_array, undefined4 value_1, undefined4 value_2, undefined4 value_3) {\n  undefined character_1;\n  params_array[1] = 0;\n  params_array[2] = 1000;\n  *params_array = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (params_array == (undefined4*)PTR_DAT_08008d80) {\n    FUN_08008d00(params_array, 0, value_3, PTR_DAT_08008d80, value_4);\n    FUN_08008d18(params_array, 1);\n  }\n  else {\n    character_1 = FUN_0800734a(value_2, PTR_DAT_08008d84);\n    *(undefined*)((int)params_array + 0x12d) = character_1;\n    character_1 = FUN_0800734a(value_2, PTR_DAT_08008d88);\n    *(undefined*)(params_array + 0x4b) = character_1;\n  }\n  FUN_08008c20(params_array);\n  return params_array;\n}",
            "called": [
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_params_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "save_parameter_to_pointer_08002f94",
                "param_1": "ptr",
                "param_2": "unused",
                "param_3": "parameter",
                "PTR_DAT_08002f9c": "ptr"
            },
            "code": "void save_parameter_to_pointer_08002f94(void* PTR_DAT_08002f9c, int parameter){\n    *(int*)PTR_DAT_08002f9c = parameter;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "save_parameter_to_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "check_param_0800734a",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08007332": "call_function"
            },
            "code": "int check_param_0800734a(int param) {\n    int result;\n    if (param != 0) {\n        result = call_function();\n        return result;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "check_param_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "analyze_data_08000aec",
                "bVar1": "is_valid",
                "iVar2": "value",
                "uVar3": "i",
                "PTR_DAT_08000bc0": "ptr_1",
                "PTR_DAT_08000bc4": "ptr_2",
                "FUN_080005e0": "read_data",
                "PTR_DAT_08000bc8": "ptr_arr_1",
                "PTR_DAT_08000bcc": "ptr_arr_2",
                "PTR_DAT_08000bd0": "ptr_arr_3",
                "PTR_DAT_08000bd4": "ptr_arr_4",
                "FUN_080036ac": "check_value",
                "FUNC_080005f8": "process_data",
                "PTR_DAT_08000bd8": "ptr_arr_5",
                "PTR_DAT_08000bdc": "ptr_3",
                "PTR_DAT_08000be0": "ptr_4",
                "PTR_DAT_08000be4": "ptr_5"
            },
            "code": "void analyze_data_08000aec()\n{\n    bool is_valid;\n    int value;\n    uint i;\n    *PTR_DAT_08000bc0 = 1;\n    if (*PTR_DAT_08000bc4 != '\\0') {\n        read_data();\n    }\n    for (i = 0; i < 5; i++) {\n        PTR_DAT_08000bc8[i] = 0;\n        PTR_DAT_08000bcc[i] = 0;\n        PTR_DAT_08000bd0[i] = 0;\n    }\n    for (i = 0; i < 0x3c; i++) {\n        if ((i - 0x2e & 0xff) < 0xe) {\n            if (i < 0x3c) {\n                value = (int)(char)PTR_DAT_08000bd4[i];\n            }\n            else {\n                value = -1;\n            }\n            value = check_value(value);\n            if (value == 0) {\n                is_valid = false;\n            }\n            else {\n                if (i < 0x3c) {\n                    value = (int)(char)PTR_DAT_08000bd4[i];\n                }\n                else {\n                    value = -1;\n                }\n                value = check_value(value);\n                if (value == 1) {\n                    is_valid = false;\n                }\n                else {\n                    is_valid = true;\n                }\n            }\n        }\n        else {\n            is_valid = false;\n        }\n        if (is_valid) {\n            process_data(i, 2);\n        }\n        else {\n            if (i < 0x3c) {\n                if (((PTR_DAT_08000bd4[i] != -1) && (value = check_value(), value != 0)) &&\n                    (value = check_value((int)(char)PTR_DAT_08000bd4[i]), value != 1)) {\n                    is_valid = true;\n                }\n            }\n            if (is_valid) {\n                process_data(i, 1);\n            }\n        }\n        PTR_DAT_08000bd8[i] = 0xff;\n    }\n    *(undefined4 *)PTR_DAT_08000bdc = 0;\n    *PTR_DAT_08000be0 = 0;\n    *PTR_DAT_08000be4 = 0;\n    *PTR_DAT_08000bc0 = 0;\n    return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "analyze_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "call_first_function_08008eec",
                "FUN_08008ed6": "call_second_function"
            },
            "code": "void call_first_function_08008eec(void)\n{\n  call_second_function();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "call_first_function_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "*(char *)((int)param_1 + 0x3a)": "input_array[10]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[30]",
                "param_1[0xf]": "input_array[14]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "input_array[58]",
                "*(uint *)(*param_1 + 0x14)": "input_array[84]"
            },
            "code": "int validate_input_080068d6(int *input_array, int array_size, int element_size) {\n    if (input_array[10] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[10] = array_size;\n        input_array[11] = (short)element_size;\n        input_array[14] = 0;\n        input_array[30] = (short)element_size;\n        input_array[58] |= 0x100;\n        input_array[84] |= 1;\n        input_array[58] |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_data_to_server_080032a2",
                "param_1": "server_address",
                "param_2": "data_type",
                "param_3": "data",
                "param_4": "data_size",
                "uVar1": "converted_data",
                "FUN_08000178": "convert_data",
                "FUN_0800325a": "send_packet_to_server"
            },
            "code": "void send_data_to_server_080032a2(int server_address,int data_type,int data,int data_size){\n  int converted_data = convert_data(data);\n  send_packet_to_server(server_address,data_type,converted_data,data,data_size);\n  return;\n}",
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "send_data_to_server_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48",
                "PTR_DAT_08001bc0": "device_data_ptr",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "device_firmware_name",
                "PTR_FUN_08000214_1_08001bc8": "device_setup_function_ptr",
                "PTR_LAB_080002ec_1_08001bcc": "device_reset_label_ptr",
                "DAT_08001bd0": "device_data_ptr_2",
                "PTR_LAB_08000c18_1_08001bd4": "device_function_label_ptr",
                "DAT_08001bd8": "device_data_ptr_3",
                "PTR_LAB_080001a8_1_08001bdc": "device_label_ptr_2",
                "PTR_FUNC_08001cd0_1_08001be0": "device_function_ptr",
                "DAT_08001be4": "device_data_ptr_4"
            },
            "code": "void initialize_device_08001b48(void)\n{\n  undefined *device_ptr;\n  device_ptr = PTR_DAT_08001bc0;\n  setup_device(PTR_DAT_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  set_device_property(device_ptr, 0xe0, PTR_FUN_08000214_1_08001bc8);\n  set_device_property(device_ptr, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  set_device_property(device_ptr, 0xc0, DAT_08001bd0);\n  set_device_property(device_ptr, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  set_device_property(device_ptr, 0xf4, DAT_08001bd8);\n  set_device_property(device_ptr, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  set_device_property(device_ptr, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  set_device_property(device_ptr, 0xff, DAT_08001be4);\n  set_device_property(device_ptr, 0xe100, PTR_DAT_08001bc0_5);\n  setup_device_components();\n  set_device_state(0);\n  return;\n}",
            "called": [
                "FUN_08002f94",
                "FUN_08000aec",
                "FUN_08002e44",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f2c",
                "FUN_0800018c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "initialize_device_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_flag_and_increment_counter_08006390",
                "param_1": "pointer_to_pointer",
                "param_2": "flag_value",
                "puVar1": "pointer",
                "*param_1": "*pointer_to_pointer",
                "DAT_080063bc": "PTR_DAT_080063bc"
            },
            "code": "int set_flag_and_increment_counter_08006390(uint **pointer_to_pointer, uint flag_value){\n    uint *pointer = *pointer_to_pointer;\n    if (pointer == DAT_080063bc) {\n        pointer[0x11] |= 0x8000;\n    }\n    *pointer_to_pointer[0] |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flag_and_increment_counter_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "process_data_08008730",
                "uVar1": "random_index",
                "iVar2": "data_index",
                "iVar3": "data_address"
            },
            "code": "void process_data_08008730()\n{\n  uint random_index;\n  int data_index;\n  int data_address;\n  \n  random_index = get_random_index();\n  data_address = *(int *)(PTR_DAT_08008770 + random_index * 4);\n  if ((random_index < 5) && (data_index = (**(code **)(PTR_DAT_08008774 + random_index * 4))(data_address), data_index != -1)) {\n    process_data_08008730(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(data_address + 0x44) * 4),\n                 *(int *)(data_address + 100) + (uint)*(ushort *)(data_address + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "process_data_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_data_08005df4",
                "param_1": "data_ptr",
                "puVar1": "data",
                "PTR_08007710": "update_data_helper"
            },
            "code": "void update_data_08005df4(uint **data_ptr)\n{\n  uint *data = *data_ptr;\n  *(undefined *)((int)data_ptr + 0x3d) = 2;\n  if ((data[8] & 0x1111) == 0) {\n    if ((data[8] & 0x444) == 0) {\n      *data = *data & 0xfffffffe;\n    }\n  }\n  PTR_08007710(data_ptr);\n  *(undefined *)((int)data_ptr + 0x3d) = 0;\n  *(undefined *)(data_ptr + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_data_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointers",
                "iVar2": "num_functions",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  void **function_pointers = PTR_DAT_08009180;\n  int num_functions = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i != num_functions >> 2; i++) {\n    (**(void (**)(void))(function_pointers + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_pointers = PTR_DAT_08009188;\n  num_functions = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i != num_functions >> 2; i++) {\n    (**(void (**)(void))(function_pointers + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = FUN_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = FUN_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = FUN_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "pbVar2": "data_value",
                "sVar1": "counter",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int process_data_080064cc(int *data)\n{\n    char first_char = *(char *)(data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    \n    int DAT_type = data[2];\n    int *PTR_data = *(int **)data;\n    int *DAT_offset = data + 8;\n    \n    if (DAT_type == 0x1000) {\n        uint16_t *DAT_value = (uint16_t *)DAT_offset;\n        uint32_t *PTR_DAT_value = (uint32_t *)(PTR_data + 4);\n        *PTR_DAT_value = *DAT_value & 0x1ff;\n        if (data[4] == 0) {\n            *DAT_offset += 2;\n        }\n        else {\n            *DAT_offset += 1;\n        }\n    }\n    else {\n        uint8_t *DAT_value = (uint8_t *)DAT_offset;\n        uint32_t *PTR_DAT_value = (uint32_t *)(PTR_data + 4);\n        *PTR_DAT_value = *DAT_value;\n        *DAT_offset += 1;\n    }\n    \n    int *counter = data + 0x26;\n    *counter -= 1;\n    if (*counter == 0) {\n        uint32_t *control = (uint32_t *)(PTR_data + 0xc);\n        *control &= 0xffffff7f;\n        *control |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "do_something_08004d6c",
                "param_1": "ptr_param",
                "puVar1": "ptr_temp",
                "ptr_11": "ptr_11",
                "ptr_1": "ptr_1",
                "ptr_2": "ptr_2",
                "ptr_9": "ptr_9",
                "ptr_c": "ptr_c",
                "current_char": "current_char",
                "current_short": "current_short"
            },
            "code": "uint do_something_08004d6c(uint **ptr_param)\n{\n  uint *ptr_temp;\n  char current_char = *(char *)((int)ptr_param + 0x3d);\n  ushort current_short = *(ushort *)((int)ptr_param + 0x2a);\n  uint *ptr_11 = param_1[0xb];\n  uint *ptr_1 = *ptr_param;\n  uint *ptr_2 = (*ptr_param)+1;\n  uint *ptr_9 = ptr_param[9];\n  uint *ptr_c = ptr_param[0xc];\n  if (current_char == '\"') {\n    if (current_short < 4) {\n      if (current_short - 2 < 2) {\n        if (ptr_11 == (uint *)0x2) {\n          *ptr_1 |= 0x400;\n        }\n        else {\n          *ptr_1 &= 0xfffffbff;\n          *ptr_1 |= 0x800;\n        }\n        *ptr_2 &= 0xfffffbff;\n      }\n      else {\n        if (ptr_11 == (uint *)0x2) {\n          *ptr_1 |= 0x400;\n        }\n        else {\n          *ptr_1 &= 0xfffffbff;\n        }\n        *ptr_2 &= 0xfffff8ff;\n        *ptr_9 = (uint *)((int)*ptr_9 + 1);\n        *(char *)ptr_9 = (char)(*ptr_1)[4];\n        current_short = current_short - 1;\n        *(undefined *)((int)ptr_param + 0x3d) = 0x20;\n        ptr_param[0xc] = (uint *)0x0;\n        if (*(char *)((int)ptr_param + 0x3e) == '@') {\n          *(undefined *)((int)ptr_param + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(undefined *)((int)ptr_param + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      ptr_temp = ptr_param[9];\n      ptr_param[9] = (uint *)((int)ptr_temp + 1);\n      *(char *)ptr_temp = (char)(*ptr_1)[4];\n      current_short = current_short - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "do_something_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_data_08004ac2",
                "param_1": "data_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "code": "int process_data_08004ac2(int *data_ptr, int param1, int param2, int param3)\n{\n  int flag = *(unsigned int *)(*data_ptr + 0x18);\n  int value;\n  if ((flag & 0x80) == 0) {\n    value = *(int *)(data_ptr + 3);\n  }\n  else {\n    value = *(int *)(data_ptr + 6);\n  }\n  call_function(data_ptr, (*(unsigned int *)(*data_ptr + 0x18) & 4) == 0, value, flag, param3);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850"
            },
            "code": "int return_one_08008850(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "check_and_set_flag_08006ca8",
                "param_1": "flag",
                "param_2": "param",
                "iVar2": "FLAG_VAR",
                "uVar3": "flag_value",
                "uVar4": "new_flag",
                "uVar5": "current_flag",
                "local_18": "bit_mask",
                "local_14": "arg2",
                "local_10": "arg3",
                "puVar1": "FLAG_PTR_2"
            },
            "code": "void check_and_set_flag_08006ca8(uint *flag, undefined4 param) {\n  uint current_flag = *flag;\n  uint new_flag;\n  if (current_flag == FLAG_A) {\n    new_flag = *(uint *)(FLAG_PTR + 0x18) | 0x200;\n    *(uint *)(FLAG_PTR + 0x18) = new_flag;\n    current_flag = *(uint *)(FLAG_VAR + 0x18) & 0x200;\n  }\n  else {\n    new_flag = FLAG_B;\n    if (current_flag == FLAG_B) {\n      new_flag = *(uint *)(FLAG_PTR + 0x18) | 0x400;\n      *(uint *)(FLAG_PTR + 0x18) = new_flag;\n      current_flag = *(uint *)(FLAG_VAR + 0x18) & 0x400;\n    }\n  }\n  undefined *flag_ptr = FLAG_PTR_2;\n  uint flag_value = FUN_08006bb8((uint)((int)(char)*FLAG_PTR_2 << 0x18) >> 0x1c, param, new_flag, current_flag);\n  uint bit_mask = 1 << ((byte)*flag_ptr & 0xf) & 0xffff;\n  uint arg2 = 3;\n  uint arg3 = 0;\n  FUN_080040e8(flag_value, &bit_mask);\n}\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "store_value_at_offset_08002fc2",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value",
                "*PTR_": "*",
                "DAT_": ""
            },
            "code": "void store_value_at_offset_08002fc2(int base_address, int offset, int value) {\n    int address_to_store = base_address + ((offset + 0x42) *PTR_ 4);\n    *PTR_(int *PTR_) address_to_store = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "store_value_at_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "get_checksum_08008afa",
                "param_1": "data_address",
                "*(short *)(param_1 + 0x134)": "*(ushort *)(data_address + 0x134)",
                "*(short *)(param_1 + 0x136)": "*(ushort *)(data_address + 0x136)",
                "ushort": "ushort",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "ushort get_checksum_08008afa(int data_address){\n    ushort checksum = (*(ushort *)(data_address + 0x134) + 0x40) - *(ushort *)(data_address + 0x136) & 0x3f;\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "get_checksum_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "print_message_and_address_of_pointer_08003048",
                "param_1": "message",
                "param_2": "pointer",
                "param_3": "unused",
                "param_4": "unused",
                "PTR_DAT_08003068": "pointer_address",
                "FUN_08008c44": "unused_function",
                "FUN_08003002": "printf",
                "FUN_08002e26": "printf"
            },
            "code": "void print_message_and_address_of_pointer_08003048(char* message, void* pointer) {\n    void* PTR_DAT_08003068 = &pointer;\n    printf(\"%s: %p\\n\", message, PTR_DAT_08003068);\n}",
            "called": [
                "FUN_08003002",
                "FUN_08002e26",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "print_message_and_address_of_pointer_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009698",
                "FUN_08009d50",
                "FUN_08009f2c",
                "FUN_08009358",
                "FUN_08009a80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "process_input_08000214",
                "param_1": "input_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "is_valid_input",
                "iVar2": "function_result",
                "PTR_DAT_080002d8": "ptr_data_1",
                "PTR_DAT_080002dc": "ptr_data_2",
                "PTR_DAT_080002e0": "ptr_data_3",
                "PTR_DAT_080002e4": "ptr_data_4",
                "PTR_DAT_080002e8": "ptr_data_5"
            },
            "code": "void process_input_08000214(uint input_index, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  bool is_valid_input = false;\n  int function_result = 0;\n  \n  if (input_index <= 0x3b) {\n    function_result = FUN_08002fa0(PTR_DAT_080002d8, input_index, param_3, param_4, param_4);\n    if (function_result == 3) {\n      if (input_index < 0x3c) {\n        if (PTR_DAT_080002dc[input_index] == -1) {\n          is_valid_input = true;\n        }\n        else {\n          int first_function_result = FUN_080036ac();\n          if (first_function_result == 0) {\n            is_valid_input = true;\n          }\n          else {\n            int second_function_result = FUN_080036ac((int)(char)PTR_DAT_080002dc[input_index]);\n            if (second_function_result == 1) {\n              is_valid_input = true;\n            }\n            else {\n              int third_function_result = FUN_0800738a((int)(char)PTR_DAT_080002dc[input_index],PTR_DAT_080002e8);\n              if (third_function_result != 0) {\n                FUN_080088e0(input_index, param_2);\n              }\n            }\n          }\n        }\n      }\n      else {\n        is_valid_input = true;\n      }\n      if (is_valid_input) {\n        FUN_08002fc2(PTR_DAT_080002d8, input_index, param_2);\n      }\n    }\n    else if (function_result == 4) {\n      if (input_index < 0x3c) {\n        if (PTR_DAT_080002dc[input_index] != -1) {\n          int first_function_result = FUN_080036ac();\n          if (first_function_result != 0) {\n            int second_function_result = FUN_080036ac((int)(char)PTR_DAT_080002dc[input_index]);\n            if (second_function_result != 1) {\n              is_valid_input = true;\n            }\n          }\n        }\n      }\n      if (is_valid_input) {\n        FUN_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[input_index] * 3, param_2);\n        FUN_08002fc2(PTR_DAT_080002d8, input_index, param_2);\n      }\n    }\n  }\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_input_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_call_functions_08003724",
                "*DAT_08003744": "PTR_FLAG_REGISTER",
                "FUN_08003f0c": "call_function_1",
                "FUN_080036d8": "call_function_2",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "int set_flag_and_call_functions_08003724() {\n    *DAT_08003744 |= 0x10;\n    call_function_1(3);\n    call_function_2(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_080036d8",
                "FUN_08003f0c",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_at_offset_080038dc",
                "param_1": "base_address",
                "*param_1": "*base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_080038dc(int *base_address)\n{\n  int offset = 0x4c;\n  int *target_address = base_address + offset;\n  int value = *target_address;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "process_data_080025ac",
                "*param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "byte_value",
                "uVar2": "index",
                "uVar3": "calculated_value3",
                "iVar4": "calculated_value1, calculated_value2",
                "FUN_08008990": "call_function1",
                "PTR_DAT_08002628": "PTR_DAT_08002628",
                "DAT_0800262c": "DAT_0800262c",
                "PTR_DAT_08002630": "PTR_DAT_08002630"
            },
            "code": "byte process_data_080025ac(byte *data, uint data_size, int param_3, int param_4)\n{\n  uint index;\n  uint byte_value;\n  uint modified_byte_value;\n  int calculated_value1;\n  int calculated_value2;\n  uint calculated_value3;\n  \n  if (*data < 0xc) {\n    call_function1(data_size, 1, param_3, *data, param_4);\n    index = (uint)*data;\n    byte_value = (byte)PTR_DAT_08002628[index * 8] & 0xffffffc0 | data_size & 0x3f;\n    PTR_DAT_08002628[index * 8] = (char)byte_value;\n    calculated_value1 = -param_3 + 0x220;\n    if (calculated_value1 < 0) {\n      calculated_value1 = -param_3 + 0x223;\n    }\n    data[1] = (byte)((uint)(calculated_value1 << 0x16) >> 0x18);\n    calculated_value2 = -param_4 + 0x960;\n    if (calculated_value2 < 0) {\n      calculated_value2 = -param_4 + 0x963;\n    }\n    data[2] = (byte)((uint)(calculated_value2 << 0x16) >> 0x18);\n    calculated_value3 = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n    if (call_function2(calculated_value3, byte_value, index, (int)((ulonglong)DAT_0800262c * (ulonglong)*data)) == 0) {\n      PTR_DAT_08002630[0x44] = (char)calculated_value3;\n      call_function3();\n    }\n    PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}",
            "called": [
                "FUN_08008990",
                "FUN_08002400",
                "FUN_0800242c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "process_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "send_data_to_device_08002634",
                "param_1": "device_id",
                "param_2": "data_size",
                "param_3": "start_address",
                "param_4": "data_checksum",
                "FUN_080025ac": "send_data",
                "0x220": "data_size_limit",
                "0x960": "start_address_offset"
            },
            "code": "void send_data_to_device_08002634(int device_id, int data_size, int start_address, int data, int checksum) {\n  send_data(device_id, data_size, start_address, data, checksum);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "send_data_to_device_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "print_message_after_offset_08002f0a",
                "param_1": "offset",
                "FUN_0800325a": "print_message"
            },
            "code": "void print_message_after_offset_08002f0a(int offset) {\n  print_message(offset + 0x40);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "print_message_after_offset_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_variable_1",
                "uStack_18": "stack_variable_2",
                "uStack_14": "stack_variable_3"
            },
            "code": "uint calculate_value_08005bb8(int input)\n{\n  uint result;\n  undefined2 local_variable_1;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = FUN_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_0800376c",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_array_08007648",
                "param_1": "array",
                "param_2": "size",
                "param_3": "value",
                "param_4": "param_4",
                "puVar4": "ptr",
                "local_34": "local_34",
                "local_30": "local_30",
                "local_2c": "local_2c",
                "local_28": "local_28",
                "local_24": "local_24",
                "local_20": "local_20",
                "local_1c": "local_1c",
                "FUN_080075dc": "calculate_value",
                "DAT_080076dc": "0x43ec80",
                "FUN_08007544": "get_character",
                "FUN_08003f30": "print_message",
                "FUN_08003f94": "print_message",
                "FUN_08006060": "process",
                "FUN_08006128": "process",
                "FUN_08006280": "process"
            },
            "code": "void initialize_array_08007648(uint32_t *array, uint32_t size, uint32_t value, uint32_t param_4)\n{\n  uint32_t result;\n  uint32_t *ptr;\n  uint32_t local_34 = 0;\n  uint32_t local_30 = 0;\n  uint32_t local_2c = 0;\n  uint32_t local_28 = 0;\n  uint32_t local_24 = 0;\n  uint32_t local_20 = 0;\n  uint32_t local_1c = 0;\n  ptr = array + 1;\n  *array = 0x40000000;\n  array[1] = 0x40000000;\n  array[4] = size;\n  result = calculate_value();\n  array[2] = (uint32_t)(((uint64_t)DAT_080076dc * (uint64_t)result) >> 0x32) - 1;\n  array[5] = 0;\n  array[3] = 0;\n  array[6] = 0;\n  array[0x13] = param_4;\n  local_34 = 0;\n  local_2c = 0;\n  local_24 = 0;\n  local_28 = 0;\n  local_20 = 0;\n  local_1c = 0;\n  local_30 = value;\n  uint32_t cVar = get_character(*array);\n  print_message((int)cVar,0xe,0);\n  cVar = get_character(*array);\n  print_message((int)cVar);\n  int iVar = process(ptr);\n  if ((iVar == 0) && (iVar = process(ptr,&local_34,0), iVar == 0)) {\n    process(ptr,0);\n  }\n}",
            "called": [
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08006060",
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08006128"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_array_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int return_zero_08008858(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "disable_feature_080063c0",
                "param_1": "feature",
                "param_2": "feature_length",
                "puVar1": "feature_ptr",
                "DAT_0800641c": "PTR_DAT_0800641c"
            },
            "code": "uint32_t disable_feature_080063c0(uint32_t **feature, uint32_t feature_length)\n{\n  uint32_t *feature_ptr = *feature;\n  FUN_08006262(feature_ptr, feature_length, 0);\n  if (((feature_ptr == DAT_0800641c) && ((feature_ptr[8] & 0x1111) == 0)) && ((feature_ptr[8] & 0x444) == 0)) {\n    feature_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((feature_ptr[8] & 0x1111) == 0) && ((feature_ptr[8] & 0x444) == 0)) {\n    *feature_ptr &= 0xfffffffe;\n  }\n  *(uint8_t *)((int)feature + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "disable_feature_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "parse_data_08004a24",
                "param_1": "data_ptr",
                "cVar1": "closing_bracket",
                "pbVar2": "data",
                "*pbVar2": "parsed_value"
            },
            "code": "int parse_data_08004a24(int *data_ptr) {\n  char closing_bracket = *(char *)((int)data_ptr + 0x3d);\n  if (*(short *)((int)data_ptr + 0x2a) != 0) {\n    byte *data = (byte *)data_ptr[9];\n    data_ptr[9] = (int)(data + 1);\n    uint8_t parsed_value = (uint8_t)*data;\n    *(uint *)(*data_ptr + 0x10) = parsed_value;\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) - 1;\n    if ((*(short *)((int)data_ptr + 0x2a) == 0) && (closing_bracket == ')')) {\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xfffffbff;\n      data_ptr[0xc] = 0x21;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "parse_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset",
                "* (undefined4 *)": "int *",
                "PTR_": "base_",
                "DAT_": "data_"
            },
            "code": "int get_value_at_offset_08002fba(int PTR_address, int offset) {\n  int* target_address = PTR_address + (offset + 0x42) * 4;\n  return *target_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "handle_assertion_failure_080090cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "assertion_failure_message",
                "param_4": "param4",
                "uVar1": "ptr_dat_080090f8_value",
                "puVar2": "ptr_s_function_080090fc",
                "uVar3": "uVar3",
                "uVar4": "param4_copy"
            },
            "code": "void handle_assertion_failure_080090cc(uint32_t param1, uint32_t param2, char* assertion_failure_message, uint32_t param4) {\n  uint32_t ptr_dat_080090f8_value = *(uint32_t *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  char* ptr_s_function_080090fc = PTR_s___function__080090fc;\n  uint32_t param4_copy = param4;\n  if (assertion_failure_message == NULL) {\n    return;\n  }\n  do {\n    FUN_08009124(ptr_dat_080090f8_value, PTR_s_assertion___s__failed__file___s__08009100, param4_copy, param1, param2, ptr_s_function_080090fc, assertion_failure_message, param4_copy);\n    uint64_t uVar3 = FUN_08009b5c();\n    param2 = (uint32_t)(uVar3 >> 0x20);\n    ptr_dat_080090f8_value = (uint32_t)uVar3;\n  } while(true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "handle_assertion_failure_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_values_for_data_080049e0",
                "param_1": "data_ptr",
                "puVar1": "data",
                "first_char": "first_char",
                "*puVar1": "*data",
                "**param_1": "**data_ptr",
                "(*param_1)[1]": "(*data_ptr)[1]"
            },
            "code": "int set_values_for_data_080049e0(uint **data_ptr)\n{\n  uint *data = *data_ptr;\n  char first_char = *(char *)((int)data_ptr + 0x3d);\n  if (first_char != ' ')\n  {\n    return 2;\n  }\n  *(char *)((int)data_ptr + 0x3d) = '(';\n  if ((*data & 1) == 0)\n  {\n    *data |= 1;\n  }\n  **data_ptr |= 0x400;\n  (*data_ptr)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f7c",
                "FUN_08007ff0",
                "FUN_08007f8e",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "set_values_for_data_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_flags_08006d24",
                "param_1": "flag_ptr",
                "iVar1": "flag_base"
            },
            "code": "void set_flags_08006d24(int *flag_ptr) {\n  int flag_base = DAT_08006d7c;\n  if (*flag_ptr != DAT_08006d74) {\n    if (*flag_ptr == DAT_08006d78) {\n      *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(uint *)(flag_base + 0xc) &= 0xfffffbff;\n      *(uint *)(flag_base + 0x18) &= 0xfffffbff;\n      *(uint *)(flag_base + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(uint *)(flag_base + 0xc) &= 0xfffffdff;\n  *(uint *)(flag_base + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_iVar1",
                "uVar2": "param_1",
                "uStack_c": "param_2",
                "uStack_8": "param_3",
                "uStack_4": "param_4",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "cleanup": "cleanup",
                "FUNC_0800937c": "process_data_internal"
            },
            "code": "void process_data_080098d8(int data_1, int data_2, int data_3, int data_4)\n{\n  int ptr_iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  int param_1 = data_1;\n  int param_2 = data_2;\n  int param_3 = data_3;\n  int param_4 = data_4;\n  if ((ptr_iVar1 != 0) && (*(int *)(ptr_iVar1 + 0x18) == 0)) {\n    cleanup(ptr_iVar1);\n  }\n  process_data_080098d8_internal(ptr_iVar1, *(int *)(ptr_iVar1 + 8), data_1, &data_2, param_1, &param_2);\n  return;\n}",
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "out_block_address",
                "param_2": "requested_size",
                "puVar1": "unused_pointer",
                "uVar2": "result",
                "puVar3": "free_block",
                "iVar4": "block_size",
                "puVar5": "current_block",
                "uVar6": "block_size_difference",
                "puVar7": "previous_block",
                "uVar8": "aligned_size",
                "PTR_DAT_08009328": "unused_pointer_1",
                "PTR_DAT_08009324": "free_block_list"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *out_block_address, uint requested_size)\n{\n  uint aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *out_block_address = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *free_block = *(uint **)PTR_DAT_08009324;\n    uint *previous_block = *(uint **)PTR_DAT_08009324;\n    while (uint *current_block = free_block, current_block != (uint *)0x0) {\n      uint block_size = *current_block - aligned_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            aligned_size = previous_block[1];\n            *(uint *)PTR_DAT_08009324 = aligned_size;\n          }\n          else {\n            aligned_size = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = aligned_size;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = aligned_size;\n          previous_block = (uint *)((int)current_block + block_size);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = current_block;\n      free_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      undefined4 result = FUN_08009918(out_block_address);\n      *(undefined4 *)PTR_DAT_08009328 = result;\n    }\n    free_block = (uint *)FUN_08009918(out_block_address,aligned_size);\n    if ((free_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)free_block + 3U & 0xfffffffc), free_block == previous_block ||\n        (uint result = FUN_08009918(out_block_address,(int)previous_block - (int)free_block), result != -1)))) {\n      *previous_block = aligned_size;\nLAB_080092d4:\n      do_nothing_08009f4a(out_block_address);\n      uint block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int block_size = block_end - (int)(previous_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)previous_block + block_size) = -block_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_block_address = 0xc;\n    do_nothing_08009f4a(out_block_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009eac",
                "FUN_08009908",
                "FUN_08009190"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "check_param_08008500",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "char_val",
                "iVar2": "start_time",
                "iVar3": "result",
                "uVar4": "i",
                "PTR_DAT_080085a8": "char_array",
                "PTR_DAT_080085ac": "int_array",
                "PTR_DAT_080085b0": "int_array",
                "PTR_DAT_080085b4": "byte_array",
                "FUN_08003760": "get_time",
                "FUN_08007320": "find_index",
                "FUN_080067ac": "do_calculation"
            },
            "code": "uint check_param_08008500(uint param1, uint param2) {\n  int start_time = get_time();\n  char char_val = PTR_DAT_080085a8[1];\n  int result = find_index((int)char_val, PTR_DAT_080085ac);\n  if (result == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_080085ac + i * 4) == 0 || (result = find_index((int)char_val, PTR_DAT_080085ac), **(int **)(PTR_DAT_080085ac + i * 4) != result))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (do_something(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    result = do_calculation(*(undefined4 *)(PTR_DAT_080085ac + i * 4), param1, param2 & 0xffff, 1000);\n    if (result == 0) {\n      return param2;\n    }\n    start_time = get_time();\n  } while ((uint)(get_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08007320",
                "FUN_080067ac",
                "FUN_080084b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "check_param_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "validate_input_and_initialize_080048c8",
                "param_1": "input_pointer",
                "param_2": "input_array",
                "param_3": "input_size",
                "param_4": "output_array",
                "uVar1": "return_value",
                "puVar2": "temp_pointer"
            },
            "code": "int validate_input_and_initialize_080048c8(uint **input_pointer, uint *input_array, int input_size, uint *output_array)\n{\n  int return_value;\n  uint *temp_pointer;\n  \n  if (*(char *)((int)input_pointer + 0x3d) == '(') {\n    if (input_array == (uint *)0x0) {\n      return_value = 1;\n    }\n    else if (input_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(input_pointer + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(input_pointer + 0xf) = 1;\n      temp_pointer = *input_pointer;\n      if ((*temp_pointer & 1) == 0) {\n        *temp_pointer = *temp_pointer | 1;\n      }\n      **input_pointer = **input_pointer & 0xfffff7ff;\n      *(undefined *)((int)input_pointer + 0x3d) = 0x29;\n      *(undefined *)((int)input_pointer + 0x3e) = 0x20;\n      return_value = 0;\n      input_pointer[0x10] = (uint *)0x0;\n      input_pointer[9] = input_array;\n      *(short *)((int)input_pointer + 0x2a) = (short)input_size;\n      input_pointer[0xb] = output_array;\n      *(undefined2 *)(input_pointer + 10) = *(undefined2 *)((int)input_pointer + 0x2a);\n      *(undefined *)(input_pointer + 0xf) = 0;\n      (*input_pointer)[1] = (*input_pointer)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_and_initialize_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "max_length",
                "cVar1": "current_char",
                "iVar2": "length",
                "pcVar3": "dest_start"
            },
            "code": "void copy_string_08009954(char *dest, char *src, int max_length) {\n  char current_char;\n  int length = max_length;\n  do {\n    current_char = *src;\n    dest = dest + 1;\n    *dest = current_char;\n    src = src + 1;\n    length = length - 1;\n  } while (current_char != '\\0');\n  for (; dest != dest + max_length; dest = dest + 1) {\n    *dest = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_configuration_08005aa4",
                "*param_1": "*config",
                "puVar1": "config_ptr",
                "iVar2": "device_config_address",
                "iVar3": "current_time",
                "uVar4": "device_config_value",
                "bVar5": "is_device_not_busy",
                "DAT_08005bac": "device_config",
                "DAT_08005bb0": "device_status",
                "DAT_08005bb4": "device_config_ptr"
            },
            "code": "int set_configuration_08005aa4(uint *config){\n  bool is_DAT_08005bacured = (*config & 1) != 0;\n  if (is_DAT_08005bacured) {\n    bool is_device_not_busy = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_device_not_busy) {\n      *(uint *)(DAT_08005bac + 0x1c) = *(uint *)(DAT_08005bac + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 = *DAT_08005bb0 | 0x100;\n      int start_time = get_time();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        int current_time = get_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *config_ptr = DAT_08005bb4;\n    int DAT_08005bac_address = DAT_08005bac;\n    uint DAT_08005bac_value = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((DAT_08005bac_value != 0) && (DAT_08005bac_value != (config[1] & 0x300))) {\n      DAT_08005bac_value = *(uint *)(DAT_08005bac + 0x20);\n      *config_ptr = 1;\n      *config_ptr = 0;\n      *(uint *)(DAT_08005bac_address + 0x20) = DAT_08005bac_value & 0xfffffcff;\n      if ((DAT_08005bac_value & 1) != 0) {\n        int start_time = get_time();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          int current_time = get_time();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int DAT_08005bac_address = DAT_08005bac;\n    *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | config[1];\n    if (is_device_not_busy) {\n      *(uint *)(DAT_08005bac_address + 0x1c) = *(uint *)(DAT_08005bac_address + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | config[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_configuration_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "check_and_update_08005e6e",
                "param_1": "params",
                "iVar1": "ptr1",
                "val1": "val1",
                "val2": "val2"
            },
            "code": "void check_and_update_08005e6e(int *params)\n{\n  int ptr1;\n  ptr1 = *params;\n  uint val1 = *(uint *)(ptr1 + 0x10);\n  uint val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 2) != 0) && ((val2 & 2) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffd;\n    *(undefined *)(params + 7) = 1;\n    if ((*(uint *)(*params + 0x18) & 3) == 0) {\n      execute_0800771c();\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 4) != 0) && ((val2 & 4) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffb;\n    *(undefined *)(params + 7) = 2;\n    if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n      execute_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 8) != 0) && ((val2 & 8) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffff7;\n    *(undefined *)(params + 7) = 4;\n    if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n      execute_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 0x10) != 0) && ((val2 & 0x10) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffef;\n    *(undefined *)(params + 7) = 8;\n    if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n      execute_0800771c(params);\n      do_nothing_08005e6a(params);\n    }\n    else {\n      do_nothing_08005e68(params);\n    }\n    *(undefined *)(params + 7) = 0;\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 1) != 0) && ((val2 & 1) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xfffffffe;\n    execute_08007736(params);\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 0x80) != 0) && ((val2 & 0x80) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(params);\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 0x40) != 0) && ((val2 & 0x40) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(params);\n  }\n  ptr1 = *params;\n  val1 = *(uint *)(ptr1 + 0x10);\n  val2 = *(uint *)(ptr1 + 0xc);\n  if (((val1 & 0x20) != 0) && ((val2 & 0x20) != 0)) {\n    *(undefined4 *)(ptr1 + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08005e6c",
                "FUN_0800771c",
                "FUN_08005e6a",
                "FUN_08005e68",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_080064ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flag_value",
                "*DAT_08004040": "*flag_ptr"
            },
            "code": "void set_flag_08004024(int flag_value) {\n    if (flag_value != 4) {\n        *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n        return;\n    }\n    *DAT_08004040 = *DAT_08004040 | 4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "find_bit_in_data_08002400",
                "param_1": "data_index",
                "uVar1": "bit_index"
            },
            "code": "int find_bit_in_data_08002400(int data_index) {\n  int bit_index = 0;\n  while (true) {\n    if (bit_index > 11) {\n      return 0;\n    }\n    if ((PTR_DAT_08002428[(data_index * 0xc + bit_index) * 8] & 0x40) != 0) {\n      break;\n    }\n    bit_index = (bit_index + 1) & 0xff;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "find_bit_in_data_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "decode_and_update_08000588",
                "param_1": "index",
                "cVar1": "current_char",
                "cVar2": "target_char",
                "puVar3": "char_array",
                "PTR_DAT_080005cc": "char_index_array",
                "FUN_08002644": "decode",
                "PTR_DAT_080005d0": "char_data",
                "PTR_DAT_080005d4": "target",
                "PTR_DAT_080005d8": "next_index",
                "PTR_DAT_080005dc": "decoded_chars"
            },
            "code": "void decode_and_update_08000588(int index) {\n    char current_char = 0;\n    char PTR_DAT_080005d4_char = *PTR_DAT_080005d4;\n    char* char_array = PTR_DAT_080005d0 + (uint)(byte)PTR_DAT_080005cc[index] * 3;\n\n    decode(char_array);\n    current_char = PTR_DAT_080005cc[index];\n\n    if ((current_char == PTR_DAT_080005d4_char) && (PTR_DAT_080005d4_char != '\\0')) {\n        *PTR_DAT_080005d4 = PTR_DAT_080005d4_char - 1;\n    }\n    else if (PTR_DAT_080005d4_char != '\\0') {\n        char next_char = *PTR_DAT_080005d8;\n        *PTR_DAT_080005d8 = next_char + 1U;\n        PTR_DAT_080005dc[(byte)(next_char + 1U) - 1] = current_char;\n    }\n\n    PTR_DAT_080005cc[index] = 0xff;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_and_update_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "modified_byte",
                "uVar2": "byte_value",
                "iVar3": "result"
            },
            "code": "void process_byte_08002644(byte *input, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n    uint32_t byte_value = (uint32_t)*input;\n    uint8_t modified_byte = PTR_DAT_08002670[byte_value * 8];\n    PTR_DAT_08002670[byte_value * 8] = modified_byte & 0xbf;\n    int32_t result = FUN_08002400((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)byte_value >> 0x23), param_2, modified_byte & 0xbf, (int32_t)((uint64_t)DAT_08002674 * (uint64_t)byte_value), param_4);\n    if (result == 0) {\n        FUN_08002578(PTR_DAT_08002678);\n    }\n    return;\n}",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "run_infinite_loop_08008868"
            },
            "code": "void run_infinite_loop_08008868(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index",
                "PTR_DAT_080036d0": "character_array"
            },
            "code": "uint find_character_index_080036ac(int character) {\n  uint index;\n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)PTR_DAT_080036d0[index])); index++) {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_080022f8",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "find_character_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_pointer_08002f1e",
                "param_1": "function_pointer_address"
            },
            "code": "void execute_function_pointer_08002f1e(int function_pointer_address) {\n  (**(code **)**(undefined4 **)(function_pointer_address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "execute_function_with_params_0800885c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08008500": "call_function"
            },
            "code": "void execute_function_with_params_0800885c(void* param1, void* param2, void* param3, void* param4)\n{\n  call_function(param2, param3, param3, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bit_and_flag_0800643c",
                "param_1": "ptr_param",
                "param_2": "flag_bit",
                "FUN_08006420": "set_bits",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void set_bit_and_flag_0800643c(uint** PTR_param, uint flag_bit) {\n    uint* data = *PTR_param;\n    uint flag_mask = 0x8000;\n    uint DAT_mask = 1;\n    set_bits(data, flag_bit, flag_mask);\n    set_bits(&data[0], 0, DAT_mask);\n}\n\nvoid set_bits(uint* data, uint bit_index, uint bit_mask) {\n    data[bit_index] |= bit_mask;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "repeat_action_08002fca",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "data_length",
                "param_4": "param2",
                "param_5": "param3",
                "uVar1": "i",
                "do_nothing_08008ac4": "do_nothing",
                "FUN_08008a24": "set_bit"
            },
            "code": "void repeat_action_08002fca(uint8_t *data, uint32_t data_length, uint8_t *param1, uint8_t *param2, uint8_t *param3) {\n  for (uint32_t i = 0; i < data_length; i++) {\n    do_nothing(param3);\n    set_bit(param1, 1);\n    do_nothing(param2);\n    set_bit(param1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "repeat_action_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "param_4",
                "piVar3": "param_ptr",
                "uVar4": "value_4",
                "uVar5": "flag_1",
                "iVar6": "value_2",
                "unaff_r4": "param_8",
                "unaff_r5": "param_10",
                "pcVar7": "function_ptr",
                "iVar8": "function_result",
                "uVar9": "value_1",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "flag_3"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params)\n{\n    uint32_t result;\n    int *param_ptr;\n    uint32_t value_1;\n    uint32_t value_2;\n    uint32_t value_3;\n    uint32_t value_4;\n    uint16_t flag_1;\n    uint16_t flag_2;\n    int param_4;\n    int function_result;\n    code *function_ptr;\n    int param_8;\n    uint32_t param_10;\n    uint32_t *data_ptr;\n    bool flag_3;\n\n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            initialize_data();\n        }\n        if (params == (int *)PTR_DAT_08009cc4) {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08009cc8) {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_08009ccc) {\n            param_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0) {\n            flag_1 = *(uint16_t *)(param_ptr + 3);\n            value_1 = (uint32_t)flag_1;\n            if ((int)(value_1 << 0x1c) < 0) {\n                param_4 = params[4];\n                if (param_4 != 0) {\n                    value_2 = value_1 << 0x1e;\n                    flag_3 = value_2 == 0;\n                    if (flag_3) {\n                        value_2 = 0;\n                    }\n                    value_3 = *param_ptr;\n                    if (!flag_3) {\n                        value_2 = param_ptr[5];\n                    }\n                    *param_ptr = param_4;\n                    param_ptr[2] = value_2;\n                    for (value_3 = value_3 - param_4; value_3 > 0; value_3 = value_3 - value_2) {\n                        function_ptr = (code *)param_ptr[10];\n                        function_result = (*function_ptr)(data, param_ptr[8], param_4, value_3, unaff_r4, unaff_r5);\n                        if (function_result < 1) {\n                            flag_1 = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08009c62;\n                        }\n                        param_4 = param_4 + function_result;\n                    }\n                }\n            }\n            else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_ptr = (code *)param_ptr[0xb]) != NULL)) {\n                value_4 = *data;\n                *data = 0;\n                if ((flag_1 & 0x1000) == 0) {\n                    function_result = (*function_ptr)(data, param_ptr[8], value_1 & 0x1000, 1);\n                    if ((function_result == -1) && ((param_10 = *data) != 0)) {\n                        if ((param_10 != 0x1d) && (param_10 != 0x16)) {\n                            flag_1 = *(uint16_t *)(param_ptr + 3);\n                            *(uint16_t *)(param_ptr + 3) = flag_1 | 0x40;\n                            result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n                            return result;\n                        }\n                        *data = value_4;\n                        goto LAB_08009b86;\n                    }\n                }\n                else {\n                    function_result = params[0x15];\n                }\n                if (((int)((uint)flag_1 << 0x1d) < 0) && ((function_result = function_result - params[1]), (param_ptr[0xd] != 0))) {\n                    function_result = function_result - params[0x10];\n                }\n                function_result = (*function_ptr)(data, param_ptr[8], function_result, 0);\n                flag_1 = *(uint16_t *)(param_ptr + 3);\n                if ((function_result == -1) && ((param_10 = *data) > 0x1d || (-1 < (int)((DAT_08009c78 >> (param_10 & 0xff)) << 0x1f))))) {\n                    goto LAB_08009c62;\n                }\n                params[1] = 0;\n                *param_ptr = params[4];\n                if (((int)((uint)flag_1 << 0x13) < 0) && ((function_result != -1) || (*data == 0))) {\n                    params[0x15] = function_result;\n                }\n                data_ptr = (uint32_t *)param_ptr[0xd];\n                *data = value_4;\n                if (data_ptr != NULL) {\n                    if (data_ptr != param_ptr + 0x11) {\n                        initialize_data(data);\n                    }\n                    param_ptr[0xd] = 0;\n                    result = (*UNRECOVERED_JUMPTABLE_00)();\n                    return result;\n                }\n            }\nLAB_08009b86:\n            result = (*UNRECOVERED_JUMPTABLE_00)(0);\n            return result;\n        }\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "data_ptr",
                "iVar2": "data_len",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "data_flag",
                "uVar6": "flag",
                "iVar7": "len_diff",
                "iVar9": "temp1",
                "pcVar8": "func_ptr",
                "uVar10": "temp2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "bVar",
                "uVar12": "uVar"
            },
            "code": "void process_data_08009b5c(void)\n{\n  uint *data_ptr;\n  int data_len;\n  int *ptr1;\n  int *ptr2;\n  uint data_flag;\n  ushort flag;\n  int len_diff;\n  code *func_ptr;\n  int temp1;\n  uint temp2;\n  code *jump_table;\n  bool bVar;\n  undefined8 uVar;\n  \n  initialize(6);\n  jump_table = (code *)0x8009b6b;\n  uVar = get_data(1);\n  ptr1 = (int *)((ulonglong)uVar >> 0x20);\n  data_ptr = (uint *)uVar;\n  flag = *(ushort *)(ptr1 + 3);\n  data_flag = (uint)flag;\n  if ((int)(data_flag << 0x1c) < 0) {\n    data_len = ptr1[4];\n    if (data_len != 0) {\n      len_diff = data_flag << 0x1e;\n      bVar = len_diff == 0;\n      if (bVar) {\n        len_diff = 0;\n      }\n      temp1 = *ptr1;\n      if (!bVar) {\n        len_diff = ptr1[5];\n      }\n      *ptr1 = data_len;\n      ptr1[2] = len_diff;\n      for (temp1 = temp1 - data_len; 0 < temp1; temp1 = temp1 - len_diff) {\n        len_diff = (*(code *)ptr1[10])(data_ptr,ptr1[8],data_len,temp1);\n        if (len_diff < 1) {\n          flag = *(ushort *)(ptr1 + 3);\n          goto LAB_08009c62;\n        }\n        data_len = data_len + len_diff;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (func_ptr = (code *)ptr1[0xb], func_ptr != (code *)0x0)) {\n    temp2 = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flag & 0x1000) == 0) {\n      len_diff = (*func_ptr)(data_ptr,ptr1[8],data_flag & 0x1000,1);\n      if ((len_diff == -1) && (data_flag = *data_ptr, data_flag != 0)) {\n        if ((data_flag != 0x1d) && (data_flag != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*jump_table)();\n          return;\n        }\n        *data_ptr = temp2;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      len_diff = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (len_diff = len_diff - ptr1[1], ptr1[0xd] != 0)) {\n      len_diff = len_diff - ptr1[0x10];\n    }\n    len_diff = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],len_diff,0);\n    flag = *(ushort *)(ptr1 + 3);\n    if ((len_diff == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08009c78 >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(ptr1 + 3) = flag | 0x40;\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((len_diff != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = len_diff;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = temp2;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        cleanup_data(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*jump_table)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*jump_table)(0);\n  return;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "is_valid",
                "iVar2": "result",
                "PTR_DAT_080002d8": "data_ptr",
                "PTR_DAT_080002dc": "data_check_ptr",
                "PTR_DAT_080002e8": "data_entry_ptr",
                "PTR_DAT_080002e4": "data_entry_start_ptr",
                "PTR_DAT_080002e0": "data_entry_offset_ptr",
                "FUN_08002fa0": "get_data",
                "FUN_080036ac": "check_data",
                "FUN_0800738a": "process_data_entry",
                "FUN_080026b0": "update_data"
            },
            "code": "void process_data_0800021a(uint data_index, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  bool is_valid;\n  int result;\n  result = get_data(PTR_DAT_080002d8, data_index, param_3, param_4, param_4);\n  if (result == 3) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_data();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_data((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = process_data_0800021a((int)(char)PTR_DAT_080002dc[data_index], PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_0800021a_entry(data_index, param_2);\n    }\n    update_data(PTR_DAT_080002d8, data_index, param_2);\n  }\n  else if (result == 4) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = check_data();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = check_data((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      process_data_0800021a_entry(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[data_index] * 3, param_2);\n    }\n    update_data(PTR_DAT_080002d8, data_index, param_2);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fc2",
                "FUN_080026b0",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "process_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "is_valid_char_for_param_08008a6c",
                "param_1": "param",
                "uVar4": "char_index",
                "cVar1": "result_char",
                "iVar2": "check_result",
                "uVar3": "final_value"
            },
            "code": "bool is_valid_char_for_param_08008a6c(uint8_t param) {\n  uint32_t char_index;\n  if (param < 0x3c) {\n    char_index = (uint32_t)(char)PTR_DAT_08008ab4[param];\n  }\n  else {\n    char_index = 0xffffffff;\n  }\n  if (char_index == 0xffffffff) {\n    return false;\n  }\n  else {\n    uint32_t check_result = FUN_08006b28(char_index, PTR_DAT_08008ab8);\n    if (check_result == 0) {\n      return false;\n    }\n    else {\n      uint32_t shift_amount = (char_index & 0xf);\n      uint32_t shifted_value = (1 << shift_amount) & 0xffff;\n      uint32_t final_value = FUN_08006b7c((char_index << 0x18) >> 0x1c);\n      char result_char = FUN_080072f0(final_value, shifted_value);\n      if (result_char != '\\0') {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "is_valid_char_for_param_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_080026f8",
                "param_1": "input_byte_ptr",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "*param_1": "*input_byte_ptr"
            },
            "code": "uint get_byte_from_ptr_dat_080026f8(byte *input_byte_ptr) {\n  uint index = (uint)*input_byte_ptr * 8;\n  uint shifted_byte = (uint)(byte)PTR_DAT_08002708[index] << 0x19;\n  uint result = shifted_byte >> 0x1f;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_flag_set_080085b8",
                "param_1": "flag_position",
                "uVar1": "flag_value",
                "PTR_DAT_080085d8": "data_pointer",
                "byte": "byte_value",
                "FUN_08006b1c": "get_flag_value"
            },
            "code": "bool is_flag_set_080085b8(int flag_position) {\n  uint32_t offset = *(uint32_t *)(PTR_DAT_080085d8 + (uint32_t)*(uint8_t *)(flag_position + 0x44) * 4);\n  uint32_t flag_value = FUN_08006b1c(offset);\n  return (flag_value & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "is_flag_set_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "execute_function_08001c08",
                "PTR_DAT_08001c14": "PTR_FUNCTION_ADDRESS",
                "uVar1": "result",
                "FUN_08002720": "call_function",
                "undefined": "unsigned char"
            },
            "code": "unsigned char execute_function_08001c08() {\n  unsigned char result = call_function(PTR_DAT_08001c14);\n  return result;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "execute_function_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "determine_clock_source_080075dc",
                "param_1": "clock_source",
                "local_20": "time_ptr",
                "local_1c": "date_ptr",
                "local_18": "unused_ptr_1",
                "local_14": "unused_ptr_2",
                "local_10": "unused_uint_1",
                "local_c": "unused_uint_2",
                "uVar1": "clock_source_a",
                "uVar3": "clock_source_b",
                "iVar2": "result"
            },
            "code": "int determine_clock_source_080075dc(uint clock_source)\n{\n  uint local_0x20 = 0;\n  uint local_0x1c = 0;\n  uint local_0x18 = 0;\n  uint local_0x14 = 0;\n  uint uVar1 = 0;\n  uint uVar2 = 0;\n  get_local_time(&local_0x1c, &local_0x20);\n  int result = check_clock_source(clock_source);\n  uVar1 = uVar2;\n  if (result == 1) {\n    result = get_clock_source_a();\n  }\n  else if (result == 2) {\n    result = get_clock_source_b();\n    uVar1 = uVar2;\n  }\n  else {\n    print_error_message(PTR_s_TIM__Unknown_clock_source_08007644);\n    result = 0;\n    uVar1 = 0;\n  }\n  if (uVar1 != 0x500) {\n    if (uVar1 < 0x501) {\n      if (uVar1 != 0x400) {\n        return result;\n      }\n    }\n    else if ((uVar1 != 0x600) && (uVar1 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a28",
                "FUN_08005a68",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "determine_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "get_status_08007544",
                "param_1": "input_val",
                "DAT_08007588": "timer_start_val",
                "DAT_0800758c": "timer_end_val",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "unknown_timer"
            },
            "code": "uint32_t get_status_08007544(uint32_t input_val) {\n\tuint32_t status = 0;\n\tif (input_val == 0xffffffff) {\n\t\tstatus = 0;\n\t}\n\telse if (input_val == DAT_08007588) {\n\t\tstatus = 29;\n\t}\n\telse if (DAT_08007588 < input_val) {\n\t\tif (input_val == DAT_0800758c) {\n\t\t\tstatus = 30;\n\t\t}\n\t\telse if (input_val == DAT_0800758c + 0x12400) {\n\t\t\tstatus = 25;\n\t\t}\n\t}\n\telse if (input_val == 0x40000000) {\n\t\tstatus = 28;\n\t}\n\telse {\n\t\tstart_timer(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n\t}\n\treturn status;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "get_status_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "check_and_call_function_08007ff0",
                "param_1": "arg",
                "iVar1": "function_ptr_address",
                "FUN_08007f78": "get_function_ptr_address",
                "*(code **)(iVar1 + 0x60)": "function_ptr",
                "*(char *)(iVar1 + 0x5c)": "is_valid",
                "*(char *)(iVar1 + 0x2c)": "is_space",
                "(code *)0x0": "NULL",
                "(iVar1 + 0x68)": "function_arg",
                "FUN_080049e0": "execute"
            },
            "code": "void check_and_call_function_08007ff0(undefined4 param_1)\n{\n  int function_ptr_address = get_function_ptr_address();\n  code* function_ptr = *(code**)(function_ptr_address + 0x60);\n  char is_valid = *(char*)(function_ptr_address + 0x5c);\n  char is_space = *(char*)(function_ptr_address + 0x2c);\n  if (function_ptr != (code *)0x0 && is_valid == '\\x01' && is_space != ' ')\n  {\n    (*function_ptr)(function_ptr_address + 0x68);\n  }\n  execute(param_1);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08005084",
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "data_index",
                "param_2": "operation_type",
                "param_3": "flag_1",
                "param_4": "data_array",
                "iVar1": "ret_val",
                "puVar2": "data_ptr",
                "iVar3": "index_val"
            },
            "code": "void process_data_08008990(uint data_index, uint operation_type, uint flag_1, undefined *data_array){\n  int index_val;\n  undefined *data_ptr;\n  int ret_val;\n  if (data_index < 0x3c) {\n    index_val = (int)(char)PTR_DAT_08008a14[data_index];\n    data_ptr = PTR_DAT_08008a14;\n  }\n  else {\n    index_val = -1;\n    data_ptr = data_array;\n  }\n  if (index_val != -1) {\n    ret_val = FUN_08006b28(index_val,PTR_DAT_08008a18,flag_1,data_ptr,data_array);\n    if (ret_val != 0) {\n      ret_val = FUN_0800738a(index_val,PTR_DAT_08008a1c);\n      if (ret_val != 0) {\n        FUN_080071e4(index_val);\n      }\n      FUN_08006b5c(index_val,PTR_DAT_08008a18);\n    }\n    switch(operation_type) {\n    case 0:\n      FUN_08007258(index_val,0);\n      break;\n    case 1:\n      FUN_08007258(index_val,1,0);\n      break;\n    case 2:\n      FUN_08007258(index_val,0,1);\n      break;\n    case 3:\n      FUN_08007258(index_val,0,2);\n    }\n    FUN_08006b3e(index_val,PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_0800738a",
                "FUN_08007258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = FUN_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        FUN_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_080040e8(uVar5,&local_20);\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_080098d8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "param_1": "param_array",
                "PTR_": "",
                "DAT_": "",
                "*param_1": "*param_array",
                "0x10": "PARAM_OFFSET",
                "param_1[0x11]": "param_array[index]",
                "0xff": "VALUE_MASK",
                "*(uint *)(*param_1 + 0x10)": "*ptr",
                "undefined4": "int",
                "index": "index",
                "value": "value",
                "ptr": "ptr"
            },
            "code": "int set_param_value_08004396(int *param_array)\n{\n    int index = 0x11;\n    int value = param_array[index] & 0xff;\n    uint32_t *ptr = (uint32_t *)(param_array + 0x10);\n    *ptr = value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_param_value_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_data_08003fb0",
                "param_1": "bit_index",
                "DAT_08003fd4": "data_ptr",
                "uint": "unsigned int",
                "DataSynchronizationBarrier": "sync_data",
                "InstructionSynchronizationBarrier": "sync_instruction"
            },
            "code": "void set_bit_in_data_08003fb0(uint bit_index) {\n  if (bit_index >= 0) {\n    uint* DAT_08003fd4 = (uint*)(DAT_08003fd4 + ((bit_index >> 5) + 0x20) * 4);\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *DAT_08003fd4 = bit_mask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_data_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "process_data_080052f0",
                "param_1": "data",
                "puVar2": "ptr_data",
                "uVar3": "flags",
                "uVar4": "status",
                "DAT_080053c8": "DATA_FLAG_1",
                "0x100": "STATUS_FLAG_1",
                "0x10200": "DATA_FLAG_2",
                "0x10400": "DATA_FLAG_3",
                "0x10800": "DATA_FLAG_4",
                "cVar1": "c"
            },
            "code": "void process_data_080052f0(uint **data)\n{\n    uint *ptr_data = *data;\n    uint flags = ptr_data[5];\n    uint status = ptr_data[1];\n    if (((flags & DAT_080053c8) != 0) && ((status & STATUS_FLAG_1) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 1);\n        ptr_data[5] = 0xfffffeff;\n        **data = **data | 0x8000;\n    }\n    if (((flags & DATA_FLAG_2) != 0) && ((status & STATUS_FLAG_1) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 2);\n        (*data)[5] = 0xfffffdff;\n    }\n    if (((flags & DATA_FLAG_3) != 0) && ((status & STATUS_FLAG_1) != 0)) {\n        char c = *(char *)((int)data + 0x3d);\n        if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (data[12] == (uint *)0x21)))))) {\n            process_sub_data(data);\n        }\n        else {\n            data[16] = (uint *)((uint)data[16] | 4);\n            if (*(char *)((int)data + 0x3e) == '\\x10') {\n                **data = **data | 0x200;\n            }\n            (*data)[5] = 0xfffffbff;\n        }\n    }\n    if (((flags & DATA_FLAG_4) != 0) && ((status & STATUS_FLAG_1) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 8);\n        (*data)[5] = 0xfffff7ff;\n    }\n    if (data[16] != (uint *)0x0) {\n        process_sub_data(data);\n    }\n    return;\n}",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "param",
                "**(int **)(param_1 + 0xc0)": "ptr",
                "**(code **)(**(int **)(param_1 + 0xc0) + 8)": "function_pointer",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void execute_function_08002ec4(int param)\n{\n  void (*function_pointer)();\n  int** ptr = *(int**)(param + 0xc0);\n  int* PTR_func = *ptr;\n  function_pointer = (void (*)())*(PTR_func + 8);\n  function_pointer();\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_matching_character_08007306",
                "param_1": "character_to_find",
                "param_2": "string",
                "*param_2": "*string",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_matching_character_08007306(int character_to_find, char *string) {\n  while (*string != -1) {\n    if (*string == character_to_find) {\n      return *(int *)(string + 4);\n    }\n    string += 12;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_matching_character_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_and_run_program_08008f0e",
                "FUN_08003f0c": "initialize_system",
                "FUN_080036a2": "run_main_program"
            },
            "code": "void initialize_and_run_program_08008f0e(void)\n{\n  initialize_system(3);\n  run_main_program();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_and_run_program_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_value_08002f2c",
                "param_1": "type",
                "param_2": "value",
                "param_3": "value",
                "PTR_DAT_08002f74": "ptr_0x90",
                "PTR_DAT_08002f70": "ptr_0xc0",
                "PTR_DAT_08002f78": "ptr_0xd0",
                "PTR_DAT_08002f6c": "ptr_0xe0",
                "PTR_DAT_08002f7c": "ptr_0xf4",
                "PTR_DAT_08002f80": "ptr_0xf5"
            },
            "code": "void update_value_08002f2c(uint8_t type, uint32_t value) {\n  switch (type) {\n    case 0x90:\n      *(uint32_t *)PTR_DAT_08002f74 = value;\n      break;\n    case 0xc0:\n      *(uint32_t *)PTR_DAT_08002f70 = value;\n      break;\n    case 0xd0:\n      *(uint32_t *)PTR_DAT_08002f78 = value;\n      break;\n    case 0xe0:\n      *(uint32_t *)PTR_DAT_08002f6c = value;\n      break;\n    case 0xf4:\n      *(uint32_t *)PTR_DAT_08002f7c = value;\n      break;\n    case 0xf5:\n      *(uint32_t *)PTR_DAT_08002f80 = value;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_value_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "process_request_08004954",
                "param_1": "request",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "puVar2": "request_ptr"
            },
            "code": "int process_request_08004954(uint **request, uint *param_2, int param_3, uint *param_4) {\n  int result;\n  uint *request_ptr;\n  if ((*request)[61] == '(') {\n    if (param_2 == NULL) {\n      result = 1;\n    }\n    else if (param_3 == 0) {\n      result = 1;\n    }\n    else if ((*request)[15] == 1) {\n      result = 2;\n    }\n    else {\n      (*request)[15] = 1;\n      request_ptr = *request;\n      if ((*request_ptr & 1) == 0) {\n        *request_ptr |= 1;\n      }\n      **request &= 0xfffff7ff;\n      (*request)[61] = '*';\n      (*request)[62] = ' ';\n      result = 0;\n      request[16] = NULL;\n      request[9] = param_2;\n      (*request)[42] = (short)param_3;\n      request[11] = param_4;\n      request[10] = request[42];\n      (*request)[15] = 0;\n      (*request)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "process_request_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "update_data_structure_08005cec",
                "param_1": "data_structure_index",
                "param_2": "new_data",
                "uVar1": "updated_bits",
                "uVar2": "old_bits",
                "uVar3": "new_bits"
            },
            "code": "void update_data_structure_08005cec(int data_structure_index, uint *new_data) {\n  uint updated_bits;\n  uint old_bits;\n  uint new_bits;\n  \n  old_bits = *(uint *)(data_structure_index + 0x20) & 0xfffffffe;\n  updated_bits = *(uint *)(data_structure_index + 4);\n  new_bits = *new_data;\n  \n  updated_bits = (data_structure_index == data_structure_constant) ? (updated_bits & 0xfffffcff | new_data[5] | new_data[6]) : updated_bits;\n  updated_bits = (updated_bits & 0xfffffffd | new_data[2]);\n  updated_bits = (data_structure_index == data_structure_constant) ? (updated_bits & 0xfffffff7 | new_data[3]) & 0xfffffffb : updated_bits;\n  \n  *(uint *)(data_structure_index + 4) = updated_bits;\n  *(uint *)(data_structure_index + 0x18) = *(uint *)(data_structure_index + 0x18) & 0xffffff8c | new_bits;\n  *(uint *)(data_structure_index + 0x34) = new_data[1];\n  *(uint *)(data_structure_index + 0x20) = old_bits | updated_bits;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_structure_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_value_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_to_value"
            },
            "code": "void set_value_to_22_0800886c(void)\n{\n  int* PTR_DAT_08008878 = (int*)PTR_DAT_08008878;\n  *PTR_DAT_08008878 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_value_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "calculate_and_update_value_08003748",
                "PTR_DAT_0800375c": "byte_ptr",
                "PTR_DAT_08003758": "int_ptr"
            },
            "code": "void calculate_and_update_value_08003748(void)\n{\n  uint8_t* PTR_DAT_0800375c = PTR_DAT_0800375c;\n  uint32_t* PTR_DAT_08003758 = PTR_DAT_08003758;\n  uint32_t value = *PTR_DAT_0800375c + *PTR_DAT_08003758;\n  *PTR_DAT_08003758 = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "calculate_and_update_value_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "decode_080040e8",
                "param_1": "bits",
                "param_2": "data",
                "puVar1": "bit_ptr",
                "uVar2": "current_bit",
                "uVar3": "current_value",
                "uVar4": "value_1",
                "uVar5": "value_2",
                "uVar6": "value_3",
                "uVar7": "value_4",
                "iVar8": "index",
                "uVar9": "value_5",
                "iVar10": "value_6"
            },
            "code": "void decode_080040e8(uint *bits, uint *data)\n{\n  uint *bit_ptr;\n  uint current_bit;\n  uint current_value;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  uint value_4;\n  int index;\n  uint value_5;\n  int value_6;\n  \n  value_4 = 0;\n  value_2 = 0;\n  do {\n    if (value_2 > 15) {\n      return;\n    }\n    current_bit = 1 << (value_2 & 0xff);\n    current_value = *data & current_bit;\n    if (current_bit == current_value) {\n      value_3 = data[1];\n      if (value_3 == 0x12) {\n        value_4 = data[3] + 0xc;\n      }\n      else if (value_3 < 0x13) {\n        if (value_3 == 2) {\n          value_4 = data[3] + 8;\n        }\n        else if (value_3 < 3) {\n          if (value_3 == 0) goto LAB_0800423a;\n          if (value_3 == 1) {\n            value_4 = data[3];\n          }\n        }\n        else if (value_3 == 3) {\n          value_4 = 0;\n        }\n        else if (value_3 == 0x11) {\n          value_4 = data[3] + 4;\n        }\n      }\n      else {\n        if (value_3 != PTR_DAT_080042c8) {\n          if (PTR_DAT_080042c8 < value_3) {\n            if (value_3 == PTR_DAT_080042cc) goto LAB_0800423a;\n            value_5 = PTR_DAT_080042cc + 0x10000;\n            value_1 = PTR_DAT_080042cc;\n          }\n          else {\n            value_5 = PTR_DAT_080042c8 - 0x100000;\n            value_1 = PTR_DAT_080042c8;\n          }\n          if ((value_3 != value_5) && (value_3 != value_1 - 0xf0000)) goto LAB_080040fe;\n        }\nLAB_0800423a:\n        if (data[2] == 0) {\n          value_4 = 4;\n        }\n        else if (data[2] == 1) {\n          bits[4] = current_bit;\n          value_4 = 8;\n        }\n        else {\n          bits[5] = current_bit;\n          value_4 = 8;\n        }\n      }\nLAB_080040fe:\n      current_bit = value_2;\n      bit_ptr = bits;\n      if (0xff < current_value) {\n        current_bit = value_2 - 8;\n        bit_ptr = bits + 1;\n      }\n      *bit_ptr = *bit_ptr & ~(0xf << (current_bit << 2 & 0xff)) | value_4 << (current_bit << 2 & 0xff);\n      if ((data[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_080042bc + 0x18) = *(uint *)(PTR_DAT_080042bc + 0x18) | 1;\n        index = (value_2 & 3) << 2;\n        if (bits == PTR_DAT_080042d0) {\n          value_6 = 0;\n        }\n        else if (bits == PTR_DAT_080042d0 + 0x100) {\n          value_6 = 1;\n        }\n        else if (bits == PTR_DAT_080042d0 + 0x200) {\n          value_6 = 2;\n        }\n        else if (bits == PTR_DAT_080042d0 + 0x300) {\n          value_6 = 3;\n        }\n        else {\n          value_6 = 4;\n        }\n        *(uint *)(PTR_DAT_080042c0 + ((value_2 >> 2) + 2) * 4) =\n             *(uint *)(PTR_DAT_080042c0 + ((value_2 >> 2) + 2) * 4) & ~(0xf << index) | value_6 << index;\n        if ((data[1] & 0x10000) == 0) {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 & ~current_value;\n        }\n        else {\n          *PTR_DAT_080042c4 = *PTR_DAT_080042c4 | current_value;\n        }\n        if ((data[1] & 0x20000) == 0) {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] & ~current_value;\n        }\n        else {\n          PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] | current_value;\n        }\n        if ((data[1] & 0x100000) == 0) {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] & ~current_value;\n        }\n        else {\n          PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] | current_value;\n        }\n        if ((data[1] & 0x200000) == 0) {\n          PTR_DAT_080042c4[3] = PTR_DAT_080042c4[3] & ~current_value;\n        }\n        else {\n          PTR_DAT_080042c4[3] = current_value | PTR_DAT_080042c4[3];\n        }\n      }\n    }\n    value_2 = value_2 + 1;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "decode_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "write_to_memory_0800288c",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "int_ptr1",
                "iVar2": "result",
                "uVar3": "result",
                "cVar4": "incremented_value",
                "uVar5": "value",
                "uVar6": "incremented_value",
                "local_11": "value",
                "PTR_DAT_08002914": "int_ptr1",
                "PTR_DAT_08002908": "PTR_DAT_08002908",
                "PTR_DAT_0800290c": "PTR_DAT_0800290c",
                "PTR_DAT_08002910": "PTR_DAT_08002910",
                "PTR_DAT_08002918": "char_ptr1"
            },
            "code": "int write_to_memory_0800288c(int address, char value) {\n    int* PTR_DAT_08002914;\n    int result;\n    char* PTR_DAT_08002918;\n    PTR_DAT_08002918 = &value;\n    PTR_DAT_08002914 = PTR_DAT_08002914;\n    if (*PTR_DAT_08002908 == '\\0') {\n        result = FUN_08007ede(address + 20, PTR_DAT_08002918, 1);\n        if (result == 0) {\n            result = 1;\n        }\n        else {\n            result = 0;\n        }\n    }\n    else {\n        uint incremented_value = (uint)*PTR_DAT_0800290c + 1;\n        if ((byte)*PTR_DAT_08002910 < incremented_value) {\n            if (incremented_value < 32) {\n                incremented_value = 32;\n            }\n            PTR_DAT_08002914 = PTR_DAT_08002914;\n            result = FUN_08009908(*(undefined4*)PTR_DAT_08002914, incremented_value);\n            *PTR_DAT_08002914 = result;\n            if (result == 0) {\n                value = 0;\n            }\n            else {\n                value = (char)incremented_value;\n            }\n            *PTR_DAT_08002910 = value;\n        }\n        PTR_DAT_08002918 = PTR_DAT_08002918;\n        if (*(int*)PTR_DAT_08002914 == 0) {\n            *(undefined4*)(address + 4) = 1;\n            result = 0;\n        }\n        else {\n            *(char*)(*(int*)PTR_DAT_08002914 + (uint)(byte)*PTR_DAT_08002918) = value;\n            char incremented_value = *PTR_DAT_08002918 + '\\x01';\n            *PTR_DAT_08002918 = incremented_value;\n            *PTR_DAT_0800290c = incremented_value;\n            result = 1;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "write_to_memory_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "is_initialized_0800010c",
                "param_1": "return_value",
                "*PTR_DAT_08000124": "*status_ptr",
                "DAT_08000128": "error_code",
                "PTR_FUN_0800012c": "default_return_value"
            },
            "code": "bool is_initialized_0800010c() {\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      return true;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return false;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "is_initialized_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "set_parameter_08002e26",
                "param_1": "obj_ptr",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0xc0)": "*(int *)(parameter_ptr)",
                "FUN_08003154": "update_object",
                "FUN_08002ddc": "set_obj_flags",
                "FUN_08002df6": "N/A"
            },
            "code": "void set_parameter_08002e26(int obj_ptr, int value) {\n    int parameter_ptr = obj_ptr + 0xc0;\n    *(int *)(parameter_ptr) = value;\n    update_object(obj_ptr);\n    set_obj_flags(obj_ptr);\n    return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_parameter_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "check_and_set_value_080036d8",
                "param_1": "value",
                "iVar1": "result",
                "PTR_DAT_0800371c": "divisor_ptr",
                "PTR_DAT_08003718": "byte_ptr",
                "value": "value",
                "0xf": "MAX_VALUE",
                "FUN_08003fd8": "check_divisor",
                "FUN_08003f30": "set_negative_one"
            },
            "code": "int check_and_set_value_080036d8(uint value) {\n  uint divisor = *(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n  int result = FUN_08003fd8(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (value > 0xf) {\n    return 1;\n  }\n  FUN_08003f30(0xffffffff, value, 0);\n  *(uint *)PTR_DAT_08003720 = value;\n  return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "check_and_set_value_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = FUN_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  FUN_08007438(param_1);\n  uVar3 = FUN_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  FUN_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "uint find_index_080086e8(int search_value) {\n  uint index;\n  if (search_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (index < 5) {\n      if (search_value == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "imported": false,
            "current_name": "find_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "process_input_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_input_0800a110(int *output, undefined4 input) {\n  undefined *data_pointer = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  int result = perform_computation(input);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "process_input_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_update_08003b8c",
                "param_1": "data",
                "iVar1": "current_time",
                "iVar2": "current_data"
            },
            "code": "int check_and_update_08003b8c(int *data)\n{\n  int current_data = *data;\n  if ((*(unsigned int *)(current_data + 8) & 1) == 0) {\n    return 0;\n  }\n  *(unsigned int *)(current_data + 8) = *(unsigned int *)(current_data + 8) & 0xfffffffe;\n  int initial_time = get_current_time();\n  do {\n    if ((*(unsigned int *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    int current_time = get_current_time();\n  } while ((unsigned int)(current_time - initial_time) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003de4",
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "check_and_update_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_board_080035b8",
                "local_54": "timer_config",
                "local_4c": "timer_config_1",
                "local_44": "gpio_pins",
                "local_40": "gpio_pins_1",
                "local_3c": "gpio_pins_2",
                "local_38": "gpio_pins_3",
                "local_34": "gpio_pins_4",
                "local_30": "clock_speeds",
                "local_20": "clock_speeds_1",
                "local_1c": "clock_speeds_2",
                "local_14": "clock_speeds_3",
                "local_10": "clock_speeds_4",
                "local_c": "DAT_08003650"
            },
            "code": "void initialize_board_080035b8() {\n  int result;\n  uint32_t clock_speeds[4] = {2, 0x10, 2, 0};\n  uint32_t gpio_pins[5] = {0xf, 2, 0, 0x400, 0};\n  uint32_t timer_config[2] = {2, 0x8000};\n  result = configure_clocks(clock_speeds);\n  if (result != 0) {\n    print_error(\"Failed to configure clocks\", 0x88);\n  }\n  result = configure_gpio(gpio_pins);\n  if (result != 0) {\n    print_error(\"Failed to configure GPIO pins\", 0x95);\n  }\n  result = configure_timer(timer_config);\n  if (result != 0) {\n    print_error(\"Failed to configure timer\", 0x9c);\n  }\n  uint32_t multiplier = (uint32_t)(((uint64_t)DAT_08003650 * (uint64_t)get_timer_value()) >> 0x26);\n  set_multiplier(multiplier);\n  set_mode(4);\n  set_leds(0xffffffff, 0);\n}\n",
            "called": [
                "FUN_080073e8",
                "FUN_08005a1c",
                "FUN_08004024",
                "FUN_08003fd8",
                "FUN_080058ac",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08005aa4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_board_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "receive_i2c_data_and_validate_08001c18",
                "param_1": "device_address",
                "param_2": "data_length",
                "param_3": "expected_data_length",
                "param_4": "received_data",
                "puVar1": "i2c_data_buffer",
                "uVar2": "received_byte",
                "iVar3": "received_data_length",
                "iVar4": "i",
                "bVar5": "is_data_available"
            },
            "code": "void receive_i2c_data_and_validate_08001c18(uint8_t device_address, uint32_t data_length, int expected_data_length, uint8_t* received_data) {\n    uint8_t* i2c_data_buffer = PTR_DAT_08001cbc;\n    if (data_length == 0xffffffff) {\n        data_length = 0;\n    } else {\n        i2c_slave_address(i2c_data_buffer, device_address);\n        i2c_send_byte(data_length & 0xff);\n        i2c_send_byte(*((uint8_t*)&expected_data_length));\n        i2c_send_byte(*((uint8_t*)&expected_data_length + 1));\n        i2c_send_byte(*((uint8_t*)&expected_data_length + 2));\n        i2c_send_byte(*((uint8_t*)&expected_data_length + 3));\n    }\n    i2c_slave_address(i2c_data_buffer, device_address);\n    i2c_receive_bytes(i2c_data_buffer, data_length);\n    int received_data_length = FUN_0800270c(PTR_DAT_08001cbc);\n    if (expected_data_length < received_data_length) {\n        i2c_send_string(PTR_DAT_08001cc4, PTR_s_I2C__Too_many_bytes_received_08001cc0);\n    }\n    else if (received_data_length < expected_data_length) {\n        i2c_send_string(PTR_DAT_08001cc4, PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n    uint8_t* received_data_buffer = PTR_DAT_08001cc8;\n    *received_data_buffer = device_address;\n    *(received_data_buffer + 1) = data_length & 0xff;\n    for (int i = 0; i < received_data_length; i++) {\n        uint8_t received_byte = FUN_08001c08();\n        *(received_data_buffer + i + 2) = received_byte;\n    }\n    i2c_send_bytes(PTR_DAT_08001cc4, 0x77, received_data_length + 2U & 0xff, received_data_buffer);\n}",
            "called": [
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002a30",
                "FUN_08002c14",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "receive_i2c_data_and_validate_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "disable_feature_if_not_needed_08006460",
                "param_1": "data",
                "param_2": "feature_bitmask",
                "puVar1": "data_ptr"
            },
            "code": "uint32_t disable_feature_if_not_needed_08006460(uint32_t **data, uint32_t feature_bitmask) {\n  uint32_t *data_ptr = *data;\n  uint32_t is_feature_needed = ((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0);\n  if (is_feature_needed) {\n    data_ptr[0x11] &= 0xffff7fff;\n  }\n  is_feature_needed = ((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0);\n  if (is_feature_needed) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "disable_feature_if_not_needed_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "get_value_08008880",
                "param_1": "input",
                "bVar1": "is_less_than_60",
                "cVar2": "input_char",
                "uVar3": "result",
                "uVar4": "shift"
            },
            "code": "uint get_value_08008880(uint input) {\n    bool is_less_than_14 = input < 0xe;\n    bool is_less_than_60 = input + 0x2e < 0x3c;\n    bool is_valid_input = is_less_than_14 ? is_less_than_60 : input < 0x3c;\n    char input_char = is_valid_input ? PTR_DAT_080088d8[input + 0x2e] : -1;\n    if (input_char == -1) {\n        return 0;\n    }\n    else {\n        uint result = FUN_08006d80();\n        uint shift = *(uint *)PTR_DAT_080088dc;\n        if (shift != 0xc) {\n            if (shift < 0xc) {\n                return result >> (0xc - shift & 0xff);\n            }\n            else {\n                return result << (shift - 0xc & 0xff);\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "get_value_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "execute_function_08002ed2",
                "param_1": "input_param",
                "uVar1": "function_return_value",
                "FUN_08003474": "call_another_function"
            },
            "code": "void execute_function_08002ed2(int input_param){\n  uint function_return_value;\n  function_return_value = (**(code **)(**(int **)(input_param + 0xc0) + 0xc))();\n  if (function_return_value != 0xffffffff) {\n    call_another_function(input_param + 0x44,function_return_value & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int compare_and_return_080073ae(int a, int b) {\n  if (a != b) {\n    if (a == 0) {\n      return b;\n    }\n    if (b == 0) {\n      return a;\n    }\n    a = 0;\n  }\n  return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "value",
                "uVar1": "random_value",
                "PTR_DAT_080004c8": "bit_array_ptr",
                "*bit_array": "bit_array",
                "*is_initialized": "is_initialized",
                "*PTR_DAT_080004cc": "is_initialized",
                "FUN_08008880": "generate_random_value",
                "FUN_08002ef2": "initialize_bit_array",
                "PTR_DAT_080004d0": "bit_array_ptr"
            },
            "code": "void set_bit_08000488(uint bit_index, int value) {\n  if (bit_index < 0xe) {\n    if (value == 0) {\n      *bit_array &= ~(1 << (bit_index & 0xff));\n      return;\n    }\n    *bit_array = 1 << (bit_index & 0xff) | *bit_array;\n    if (**PTR_DAT_080004cc == 0) {\n      uint random_value = generate_random_value();\n      initialize_bit_array(PTR_DAT_080004c8, bit_index, random_value);\n      return;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ef2",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "set_bits_in_address_08003f0c",
                "param_1": "address",
                "PTR_DAT_08003f2c": "ptr",
                "DAT_08003f2c": "address_base",
                "mask": "mask",
                "value": "value"
            },
            "code": "void set_bits_in_address_08003f0c(uint address)\n{\n    uint* PTR_DAT_08003f2c = (uint*)(DAT_08003f2c + 0xc);\n    uint mask = 0xf8ff;\n    uint value = (address & 7) << 8 | (*PTR_DAT_08003f2c & mask) | 0x5fa0000;\n    *PTR_DAT_08003f2c = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "set_bits_in_address_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "run_program_08008f1c",
                "FUN_08001b48": "initialize",
                "FUN_080022f8": "execute_task",
                "FUN_08008bf4": "cleanup",
                "DAT_08008f38": "flag",
                "do_nothing_08008f0c": "do_nothing"
            },
            "code": "void run_program_08008f1c(void)\n{\n  do_nothing();\n  initialize();\n  do {\n    do {\n      execute_task();\n    } while (DAT_08008f38 == 0);\n    cleanup();\n  } while( true );\n}",
            "called": [
                "FUN_080022f8",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "run_program_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "perform_operation_080058ac",
                "param_1": "operation_params",
                "param_2": "num_params",
                "puVar1": "flag_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "function_result",
                "flag_val": "flag_val",
                "param_val": "param_val",
                "DAT_08005a0c": "flag_ptr",
                "DAT_08005a10": "data_array",
                "PTR_DAT_08005a18": "ptr_data_1",
                "PTR_DAT_08005a14": "ptr_data_2"
            },
            "code": "uint32_t perform_operation_080058ac(uint32_t *operation_params, uint32_t num_params)\\n\\\n    {\\n\\\n        uint32_t *DAT_08005a0c = DAT_08005a0c;\\n\\\n        uint32_t flag_val = *DAT_08005a0c & 7;\\n\\\n        uint32_t result = 0;\\n\\\n        if (flag_val < num_params && (*DAT_08005a0c = (*DAT_08005a0c & 0xfffffff8) | num_params, num_params != (flag_val & 7))) {\\n\\\n            return 1;\\n\\\n        }\\n\\\n        if ((*operation_params & 2) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | operation_params[2];\\n\\\n        }\\n\\\n        if ((*operation_params & 1) != 0) {\\n\\\n            uint32_t param_val = operation_params[1];\\n\\\n            if (param_val == 1) {\\n\\\n                if ((*DAT_08005a10 & 0x20000) == 0) {\\n\\\n                    return 1;\\n\\\n                }\\n\\\n            }\\n\\\n            else if (param_val != 2 && ((*DAT_08005a10 & 2) == 0)) {\\n\\\n                return 1;\\n\\\n            }\\n\\\n            DAT_08005a10[1] = param_val | DAT_08005a10[1] & 0xfffffffc;\\n\\\n            uint32_t start_time = FUN_08003760();\\n\\\n            if (operation_params[1] == 1) {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 4) {\\n\\\n                    uint32_t current_time = FUN_08003760();\\n\\\n                    if (5000 < current_time - start_time) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n            else if (operation_params[1] == 2) {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 8) {\\n\\\n                    uint32_t current_time = FUN_08003760();\\n\\\n                    if (5000 < current_time - start_time) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n            else {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 0) {\\n\\\n                    uint32_t current_time = FUN_08003760();\\n\\\n                    if (5000 < current_time - start_time) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        DAT_08005a0c = DAT_08005a0c;\\n\\\n        flag_val = *DAT_08005a0c & 7;\\n\\\n        if (num_params < flag_val && (*DAT_08005a0c = (*DAT_08005a0c & 0xfffffff8) | num_params, num_params != (flag_val & 7))) {\\n\\\n            return 1;\\n\\\n        }\\n\\\n        if ((*operation_params & 4) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | operation_params[3];\\n\\\n        }\\n\\\n        if ((*operation_params & 8) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | operation_params[4] << 3;\\n\\\n        }\\n\\\n        uint32_t function_result = FUN_08005840();\\n\\\n        *(uint32_t *)PTR_DAT_08005a18 = function_result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\\n\\\n        FUN_080036d8(0xf);\\n\\\n        return result;\\n\\\n    }",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "perform_operation_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_value_08006bb8",
                "param_1": "flag",
                "uVar1": "new_flag_value",
                "DAT_08006c48": "data_address",
                "DAT_08006c4c": "flag_value_1",
                "DAT_08006c50": "flag_value_2",
                "DAT_08006c54": "flag_value_3",
                "DAT_08006c58": "flag_value_4",
                "DAT_08006c5c": "flag_value_5"
            },
            "code": "uint32_t set_flag_value_08006bb8(uint32_t flag)\n{\n  uint32_t new_flag_value;\n  switch(flag) {\n    case 0:\n      *(uint32_t *)(DAT_08006c48 + 0x18) |= 4;\n      new_flag_value = DAT_08006c4c;\n      break;\n    case 1:\n      *(uint32_t *)(DAT_08006c48 + 0x18) |= 8;\n      new_flag_value = DAT_08006c50;\n      break;\n    case 2:\n      *(uint32_t *)(DAT_08006c48 + 0x18) |= 0x10;\n      new_flag_value = DAT_08006c54;\n      break;\n    case 3:\n      *(uint32_t *)(DAT_08006c48 + 0x18) |= 0x20;\n      new_flag_value = DAT_08006c58;\n      break;\n    case 4:\n      *(uint32_t *)(DAT_08006c48 + 0x18) |= 0x40;\n      new_flag_value = DAT_08006c5c;\n      break;\n    default:\n      new_flag_value = 0;\n  }\n  return new_flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "set_flag_value_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "flag_ptr",
                "*param_1": "flag_value",
                "DAT_080074d0": "flag_a",
                "*(uint *)(DAT_080074d0 + 0xe418)": "*(uint *)(flag_a + 0xe418)",
                "PTR_DAT_080074dc": "ptr_a",
                "*(int **)PTR_DAT_080074dc": "*(int **)ptr_a",
                "DAT_080074d4": "flag_c",
                "*(uint *)(DAT_080074d4 + 0x20c1c)": "*(uint *)(flag_c + 0x20c1c)",
                "DAT_080074d8": "flag_d",
                "*(uint *)(DAT_080074d8 + 0x2081c)": "*(uint *)(flag_d + 0x2081c)",
                "_DAT_4002101c": "_DAT_4002101c",
                "_DAT_4002101c | 1": "_DAT_4002101c |= 1",
                "*(int **)(PTR_DAT_080074dc + 4)": "*(int **)(ptr_a + 4)",
                "*(int **)(PTR_DAT_080074dc + 8)": "*(int **)(ptr_a + 8)",
                "*(int **)(PTR_DAT_080074dc + 0xc)": "*(int **)(ptr_a + 0xc)"
            },
            "code": "void set_flags_08007438(int *flag_ptr)\n{\n  int flag_value = *flag_ptr;\n  if (flag_value == DAT_080074d0) {\n    *(uint *)(DAT_080074d0 + 0xe418) |= 0x800;\n    *(int **)PTR_DAT_080074dc = flag_ptr;\n  }\n  if (flag_value == flag_b) {\n    _DAT_4002101c | 1;\n    *(int **)(PTR_DAT_080074dc + 4) = flag_ptr;\n  }\n  if (flag_value == DAT_080074d4) {\n    *(uint *)(DAT_080074d4 + 0x20c1c) |= 2;\n    *(int **)(PTR_DAT_080074dc + 8) = flag_ptr;\n  }\n  if (flag_value == DAT_080074d8) {\n    *(uint *)(DAT_080074d8 + 0x2081c) |= 4;\n    *(int **)(PTR_DAT_080074dc + 0xc) = flag_ptr;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "modify_input_08004aec",
                "param_1": "input_ptr",
                "DAT_08004b7c": "ptr_data_08004b7c"
            },
            "code": "int modify_input_08004aec(uint **input_ptr) {\\\n        if (((*input_ptr)[11] == (uint *)0x4) || ((*input_ptr)[11] == (uint *)0x8)) {\\\n            (*input_ptr)[11] = DAT_08004b7c;\\\n            (*input_ptr)[0][1] &= 0xfffff8ff;\\\n            (*input_ptr)[0][5] = 0xfffffbff;\\\n            (*input_ptr)[0][0] &= 0xfffffbff;\\\n            (*input_ptr)[12] = (uint *)0x0;\\\n            input_ptr[0][0x3d] = 0x20;\\\n            input_ptr[0][0x3e] = 0;\\\n            function_08007ff0();\\\n        }\\\n        else if (input_ptr[0][0x3d] == \"!\") {\\\n            (*input_ptr)[11] = DAT_08004b7c;\\\n            input_ptr[0][12] = (uint *)0x21;\\\n            input_ptr[0][0x3d] = 0x20;\\\n            input_ptr[0][0x3e] = 0;\\\n            (*input_ptr)[0][1] &= 0xfffff8ff;\\\n            (*input_ptr)[0][5] = 0xfffffbff;\\\n            (*input_ptr)[0][0] &= 0xfffffbff;\\\n            do_nothing_08004a22();\\\n        }\\\n        else {\\\n            (*input_ptr)[0][5] = 0xfffffbff;\\\n        }\\\n        return 0;\\\n    }",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "modify_input_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "get_one_0800887c"
            },
            "code": "int get_one_0800887c() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "get_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "process_input_08004728",
                "param_1": "input_ptr",
                "param_2": "input_data_1",
                "param_3": "input_data_2",
                "param_4": "input_flag",
                "uVar1": "result",
                "puVar2": "input",
                "local_c": "loop_counter"
            },
            "code": "uint32_t process_input_08004728(uint32_t **input_ptr, uint32_t *input_data_1, uint32_t *input_data_2, uint16_t input_flag)\n{\n    uint32_t result = 0;\n    uint32_t *input = *input_ptr;\n    int loop_counter;\n    if (*(char *)((int)input_ptr + 0x3d) == ' ')\n    {\n        loop_counter = (uint32_t)((uint64_t)DAT_080047ec * (uint64_t)(*(uint32_t *)PTR_DAT_080047e8 >> 3) >> 0x28) * 0x19;\n        do\n        {\n            if (loop_counter == 0)\n            {\n                input_ptr[0xc] = (uint32_t *)0x0;\n                *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n                *(undefined *)(input_ptr + 0xf) = 0;\n                return 3;\n            }\n            input = *input_ptr;\n            loop_counter--;\n        } while ((input[6] & 2) != 0);\n        if (*(char *)(input_ptr + 0xf) == '\\x01')\n        {\n            result = 2;\n        }\n        else\n        {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            if ((*input & 1) == 0)\n            {\n                *input = *input | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x21;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x10;\n            result = 0;\n            input_ptr[0x10] = (uint32_t *)0x0;\n            input_ptr[9] = input_data_2;\n            *(uint16_t *)((int)input_ptr + 0x2a) = input_flag;\n            input_ptr[0xb] = DAT_080047f0;\n            *(uint16_t *)(input_ptr + 10) = *(uint16_t *)((int)input_ptr + 0x2a);\n            input_ptr[0x11] = input_data_1;\n            **input_ptr = **input_ptr | 0x100;\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "process_input_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_1": "dst_buffer",
                "param_2": "src_buffer",
                "param_3": "buffer_size",
                "uVar1": "i"
            },
            "code": "int copy_data_to_buffer_08007ede(int dst_buffer, int src_buffer, uint buffer_size)\n{\n    uint i;\n    if (buffer_size > 32)\n    {\n        return 2;\n    }\n    for (i = 0; i < buffer_size; i++)\n    {\n        *(char *)(dst_buffer + i + 104) = *(char *)(src_buffer + i);\n        *(char *)(dst_buffer + 136) = *(char *)(dst_buffer + 136) + 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "add_param_to_list_0800863c",
                "param_1": "param_address",
                "param_2": "param_value",
                "param_3": "param_flag",
                "param_4": "param_4",
                "iVar1": "list_index",
                "uVar2": "list_size",
                "PTR_DAT_08008688": "LIST_ADDRESS_1",
                "PTR_DAT_0800868c": "LIST_ADDRESS_2",
                "PTR_DAT_08008690": "LIST_ADDRESS_3"
            },
            "code": "void add_param_to_list_0800863c(int param_address, int param_value, int param_flag, int param_4)\n{\n  int list_index;\n  uint8_t list_size;\n  if (param_address != 0) {\n    list_index = get_list_index();\n    if (list_index != -1) {\n      list_size = *(uint8_t *)(param_address + 0x44);\n      *(int *)(PTR_DAT_08008688 + list_size * 4) = param_value;\n      *(int *)(PTR_DAT_0800868c + list_size * 4) = param_address;\n      set_flag_of_list_item(list_index, *(char *)(param_address + 0x5a), param_flag);\n      set_flag_of_list(list_index, *(char *)(param_address + 0x5a));\n      copy_list_item_to_buffer(*(int *)(PTR_DAT_08008690 + list_size * 4), param_address + 0x45, 1);\n    }\n  }\n}\n",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "add_param_to_list_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "return_one_thunk_0800887c",
                "undefined4": "int"
            },
            "code": "int return_one_thunk_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "return_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_flags_080074e0",
                "param_1": "flag_ptr",
                "*param_1": "current_flag_value",
                "DAT_08007534": "FLAG_A",
                "DAT_08007540": "FLAG_PTR",
                "0x18": "BITMASK_A",
                "0x1c": "BITMASK_B",
                "0x40000000": "FLAG_B",
                "DAT_08007538": "FLAG_C",
                "DAT_0800753c": "FLAG_D",
                "*(uint *)(DAT_08007540 + 0x18)": "*(uint *)(FLAG_PTR + BITMASK_A)",
                "*(uint *)(DAT_08007540 + 0x1c)": "*(uint *)(FLAG_PTR + BITMASK_B)",
                "& 0xfffff7ff": "& ~0x800",
                "& 0xfffffffe": "& ~0x1",
                "& 0xfffffffd": "& ~0x2",
                "& 0xfffffffb": "& ~0x4"
            },
            "code": "void update_flags_080074e0(int *flag_ptr)\n{\n    int current_flag_value = *flag_ptr;\n    if (current_flag_value == DAT_08007534)\n    {\n        *(uint *)(DAT_08007540 + 0x18) &= ~0x800;\n    }\n    if (current_flag_value == FLAG_B)\n    {\n        *(uint *)(DAT_08007540 + 0x1c) &= ~0x1;\n    }\n    if (current_flag_value == DAT_08007538)\n    {\n        *(uint *)(DAT_08007540 + 0x1c) &= ~0x2;\n    }\n    if (current_flag_value == DAT_0800753c)\n    {\n        *(uint *)(DAT_08007540 + 0x1c) &= ~0x4;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "imported": false,
            "current_name": "update_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_if_not_null_080073c0",
                "PTR_DAT_080073d0": "ptr_to_code_ptr",
                "PTR_DAT_080073d4": "ptr_to_arg"
            },
            "code": "void execute_code_if_not_null_080073c0(void)\n{\n  code* ptr_to_code = *(code **)PTR_DAT_080073d0;\n  if (ptr_to_code != (code *)0x0) {\n    (*ptr_to_code)(*(undefined4 *)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "process_data_080084b0",
                "PTR_DAT_080084f0": "data_array",
                "PTR_DAT_080084f4": "data_array_2",
                "PTR_DAT_080084f8": "data_array_3",
                "cVar1": "data",
                "iVar4": "result",
                "uVar5": "result_2",
                "uVar3": "processed_data",
                "puVar2": "data_array_3",
                "FUNC_08008078": "execute_function"
            },
            "code": "void process_data_080084b0()\n{\n  char data = PTR_DAT_080084f0[1];\n  int result = calculate_result((int)data, PTR_DAT_080084f0);\n  if (result != 0) {\n    int result_2 = calculate_result((int)data, PTR_DAT_080084f0);\n    char processed_data = process_result(result_2, PTR_DAT_080084f4);\n    PTR_DAT_080084f8[0x59] = processed_data;\n    PTR_DAT_080084f8[0x58] = data;\n    *(int *)(PTR_DAT_080084f8 + 0x48) = 0x2580;\n    *(int *)(PTR_DAT_080084f8 + 0x54) = 0;\n    *(int *)(PTR_DAT_080084f8 + 0x4c) = 0;\n    *(int *)(PTR_DAT_080084f8 + 0x50) = 0;\n    execute_function(PTR_DAT_080084f8);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08008078",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_data_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_permission_level_08004050",
                "param_1": "permission_data",
                "uVar1": "permission_level",
                "puVar2": "permission_value"
            },
            "code": "uint32_t get_permission_level_08004050(uint32_t **permission_data)\n{\n  uint32_t permission_level;\n  uint32_t *permission_value;\n  if (*(char *)((int)permission_data + 0x21) != '\\x02') {\n    permission_data[0xe] = (uint32_t *)0x4;\n    return 1;\n  }\n  **permission_data = **permission_data & 0xfffffff1;\n  **permission_data = **permission_data & 0xfffffffe;\n  permission_value = *permission_data;\n  if (permission_value == PTR_DAT_080040e0) {\n    permission_level = 1;\n  }\n  else if (permission_value == PTR_DAT_080040e0 + 5) {\n    permission_level = 0x10;\n  }\n  else if (permission_value == PTR_DAT_080040e0 + 10) {\n    permission_level = 0x100;\n  }\n  else if (permission_value == PTR_DAT_080040e0 + 0xf) {\n    permission_level = 0x1000;\n  }\n  else if (permission_value == PTR_DAT_080040e0 + 0x14) {\n    permission_level = 0x10000;\n  }\n  else if (permission_value == PTR_DAT_080040e0 + 0x19) {\n    permission_level = 0x100000;\n  }\n  else {\n    permission_level = 0x1000000;\n  }\n  *(uint32_t *)(PTR_DAT_080040e4 + 4) = permission_level;\n  *(char *)((int)permission_data + 0x21) = 1;\n  *(uint32_t *)(permission_data + 8) = 0;\n  if (permission_data[0xd] != (uint32_t *)0x0) {\n    (*(void (*)())permission_data[0xd])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_permission_level_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "check_params_and_call_function_08008e14",
                "param_1": "first_param",
                "param_2": "second_param",
                "FUN_08008df8": "call_function_with_zeroes"
            },
            "code": "void check_params_and_call_function_08008e14(int first_param, int second_param) {\n    if ((first_param == 1) && (second_param == 0xffff)) {\n        call_function_with_zeroes(PTR_DAT_08008e3c, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "check_params_and_call_function_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "calculate_shifted_value_08005a28",
                "uVar1": "shifted_value",
                "FUN_08005a1c": "get_initial_value",
                "DAT_08005a40": "data_array",
                "PTR_DAT_08005a44": "shift_array",
                "index": "shift_amount"
            },
            "code": "uint calculate_shifted_value_08005a28(void)\n{\n    uint shifted_value;\n    shifted_value = get_initial_value();\n    uint index = (uint)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d;\n    uint shifted_amount = PTR_DAT_08005a44[index];\n    return shifted_value >> shifted_amount;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_080045c0",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "calculate_checksum_080095a8",
                "param_1": "start_val",
                "param_2": "data",
                "param_3": "checksum",
                "param_4": "end_val",
                "param_5": "callback",
                "iVar1": "status",
                "uVar2": "max_val",
                "uVar3": "remaining",
                "bVar4": "is_diff",
                "i": "i",
                "j": "j",
                "k": "k"
            },
            "code": "int calculate_checksum_080095a8(unsigned int start_val, unsigned int *data, unsigned int *checksum, unsigned int end_val, code *callback) {\\n  int status = 0;\\n  unsigned int max_val = data[4];\\n  if ((int)data[4] < (int)data[2]) {\\n    max_val = data[2];\\n  }\\n  *checksum = max_val;\\n  if (*(char *)((int)data + 0x43) != \"\\0\") {\\n    *checksum = max_val + 1;\\n  }\\n  if ((int)(*data << 0x1a) < 0) {\\n    *checksum = *checksum + 2;\\n  }\\n  unsigned int i = *data & 6;\\n  if (i == 0) {\\n    for (; (int)i < (int)(data[3] - *checksum); i++) {\\n      int result = (*callback)(start_val, end_val, (int)data + 0x19, 1);\\n      if (result == -1) {\\n        return 0xffffffff;\\n      }\\n    }\\n  }\\n  unsigned int j = (unsigned int)*(unsigned char *)((int)data + 0x43);\\n  if (j != 0) {\\n    j = 1;\\n  }\\n  unsigned int k = j;\\n  if ((int)(*data << 0x1a) < 0) {\\n    *(unsigned char *)((int)data + j + 0x43) = 0x30;\\n    k = j + 2;\\n    *(unsigned char *)((int)data + j + 0x44) = *(unsigned char *)((int)data + 0x45);\\n  }\\n  status = (*callback)(start_val, end_val, (int)data + 0x43, k);\\n  if (status != -1) {\\n    unsigned int diff = data[3];\\n    bool is_diff = (*data & 6) != 4;\\n    if (is_diff) {\\n      diff = 0;\\n    }\\n    unsigned int remaining = 0;\\n    if (!is_diff) {\\n      diff = diff - *checksum;\\n    }\\n    if (!is_diff) {\\n      diff = diff & ~((int)diff >> 0x1f);\\n    }\\n    if ((int)data[4] < (int)data[2]) {\\n      diff = diff + (data[2] - data[4]);\\n    }\\n    while (true) {\\n      if (diff == remaining) {\\n        return 0;\\n      }\\n      int result = (*callback)(start_val, end_val, (int)data + 0x1a, 1);\\n      if (result == -1) break;\\n      remaining++;\\n    }\\n  }\\n  return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "calculate_checksum_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "data_address",
                "*(char *)(param_1 + 0x1f8)": "*data_ptr",
                "FUN_08008990": "send_signal",
                "FUN_08002fca": "copy_data",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void process_data_08003002(int data_address) {\n  char* data_ptr = (char*)(data_address + 0x1f8);\n  if (*data_ptr != '\\0') {\n    return;\n  }\n  send_signal(0xd, 1);\n  copy_data(data_address, 0xd, 2, 0x28, 0xd2);\n  do_nothing(0xfa);\n  copy_data(data_address, 0xd, 5, 0x28, 0xd2);\n  do_nothing(0x7d);\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "check_parameters_08003bd8",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "flags",
                "uVar3": "var2",
                "FUN_08006ca8": "do_something",
                "FUN_08003b8c": "check_params"
            },
            "code": "int check_parameters_08003bd8(int *params)\n{\n    int result;\n    int flags;\n    int var1;\n    int var2;\n\n    if (params == NULL)\n    {\n        return 1;\n    }\n\n    if (params[10] == 0)\n    {\n        params[11] = 0;\n        *(unsigned char *)(params + 9) = 0;\n        do_something();\n    }\n\n    result = check_params(params);\n    flags = params[10] & 0x10;\n\n    if (flags == 0 && result == 0)\n    {\n        params[10] = params[10] & 0xffffeefd | 2;\n        var1 = params[1] | params[7] | params[3] << 1;\n\n        if (params[2] == 0x100 || params[2] == 1)\n        {\n            var2 = (params[4] - 1) * 0x100000;\n        }\n        else\n        {\n            var2 = 0;\n        }\n\n        if (params[5] == 1)\n        {\n            if (params[3] == 0)\n            {\n                var2 |= (params[6] - 1) * 0x2000 | 0x800;\n            }\n            else\n            {\n                params[10] |= 0x20;\n                params[11] |= 1;\n            }\n        }\n\n        *(unsigned int *)(*params + 4) = var2 | *(unsigned int *)(*params + 4) & 0xffff16ff;\n        *(unsigned int *)(*params + 8) = DAT_08003ce0 & *(unsigned int *)(*params + 8) | var1;\n\n        if (var1 != (DAT_08003ce4 & *(unsigned int *)(*params + 8)))\n        {\n            params[10] = params[10] & 0xffffffed | 0x10;\n            params[11] |= 1;\n            return 1;\n        }\n\n        params[11] = 0;\n        params[10] = params[10] & 0xfffffffc | 1;\n        return 0;\n    }\n\n    params[10] |= 0x10;\n    return 1;\n}",
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_parameters_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data_address",
                "uVar1": "result",
                "iVar2": "current_data_address",
                "bVar3": "is_current_data_address"
            },
            "code": "void initialize_data_08009d50(int data_address)\n{\n  if (*(int *)(data_address + 0x18) == 0) {\n    *(int *)(data_address + 0x48) = 0;\n    *(int *)(data_address + 0x4c) = 0;\n    *(int *)(data_address + 0x50) = 0;\n    int current_data_address = *(int *)PTR_PTR_DAT_08009da8;\n    *(void **)(data_address + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n    bool is_current_data_address = data_address == current_data_address;\n    if (is_current_data_address) {\n      current_data_address = 1;\n    }\n    if (is_current_data_address) {\n      *(int *)(data_address + 0x18) = current_data_address;\n    }\n    int result = FUN_08009db0();\n    *(int *)(data_address + 4) = result;\n    result = FUN_08009db0(data_address);\n    *(int *)(data_address + 8) = result;\n    result = FUN_08009db0(data_address);\n    *(int *)(data_address + 0xc) = result;\n    FUN_08009cdc(*(int *)(data_address + 4),4,0);\n    FUN_08009cdc(*(int *)(data_address + 8),9,1);\n    FUN_08009cdc(*(int *)(data_address + 0xc),0x12,2);\n    *(int *)(data_address + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800937c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_data_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_values_if_param2_equals_113_08003366",
                "param_1": "struct_ptr",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x68)": "*(int *)(struct_ptr + 104)",
                "*(undefined4 *)(param_1 + 0x40)": "*(int *)(struct_ptr + 64)"
            },
            "code": "void set_values_if_param2_equals_113_08003366(int struct_ptr, int param2, int value1, int value2)\n{\n  if (param2 == 113) {\n    *(int *)(struct_ptr + 104) = value1;\n    *(int *)(struct_ptr + 64) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_if_param2_equals_113_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "<original_function_name>": "FUN_080091b0",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "buffer_end_ptr",
                "puVar2": "buffer_ptr",
                "FUN_080091b0": "copy_data_to_buffer_080091b0"
            },
            "code": "void copy_data_to_buffer_080091b0(int buffer_start_index, undefined *data, int data_length) {\n                      undefined *buffer_ptr;\n                      undefined *data_ptr;\n                      \n                      buffer_ptr = (undefined *)(buffer_start_index - 1);\n                      data_ptr = data + data_length;\n                      for (; data != data_ptr; data = data + 1) {\n                        buffer_ptr = buffer_ptr + 1;\n                        *buffer_ptr = *data;\n                      }\n                      return;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "get_value_if_not_null_08009108",
                "param_1": "input_value",
                "param_2": "bit_shift",
                "DAT_08009120": "PTR_DAT_08009120"
            },
            "code": "long long get_value_if_not_null_08009108(int input_value, unsigned int bit_shift) {\n  if (DAT_08009120 != 0) {\n    return CONCAT44(input_value,2);\n  }\n  return (unsigned long long)bit_shift << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "get_value_if_not_null_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "set_pointers_to_one_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800a228": "ptr_1",
                "PTR_DAT_0800a22c": "ptr_2",
                "PTR_DAT_0800a230": "ptr_3",
                "PTR_DAT_0800a234": "ptr_4",
                "PTR_DAT_0800a238": "ptr_5",
                "PTR_DAT_0800a23c": "ptr_6",
                "PTR_DAT_0800a240": "ptr_7",
                "PTR_DAT_0800a244": "ptr_8",
                "PTR_DAT_0800a248": "ptr_9",
                "PTR_DAT_0800a24c": "ptr_10",
                "PTR_DAT_0800a250": "ptr_11",
                "PTR_DAT_0800a254": "ptr_12",
                "set_pointer_to_one": "set_pointer_to_one"
            },
            "code": "void set_pointers_to_one_0800a18c(void)\n{\n  void (*jump_table)(void);\n  jump_table = set_pointers_to_one_0800a18c;\n  set_pointer_to_one(PTR_DAT_0800a228);\n  set_pointer_to_one(PTR_DAT_0800a22c);\n  set_pointer_to_one(PTR_DAT_0800a230);\n  set_pointer_to_one(PTR_DAT_0800a234);\n  set_pointer_to_one(PTR_DAT_0800a238);\n  set_pointer_to_one(PTR_DAT_0800a23c);\n  set_pointer_to_one(PTR_DAT_0800a240);\n  set_pointer_to_one(PTR_DAT_0800a244);\n  set_pointer_to_one(PTR_DAT_0800a248);\n  set_pointer_to_one(PTR_DAT_0800a24c);\n  set_pointer_to_one(PTR_DAT_0800a250);\n  set_pointer_to_one(PTR_DAT_0800a254);\n  jump_table();\n  return;\n}\n\nvoid set_pointer_to_one(int *ptr)\n{\n  if (*ptr < 0)\n  {\n    *ptr = 1;\n  }\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "set_pointers_to_one_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "calculate_result_08009908",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "default_value",
                "uVar2": "result",
                "uVar3": "calculate_result_value",
                "PTR_PTR_DAT_08009914": "default_value_pointer",
                "FUN_080091d8": "reset",
                "FUN_0800a154": "calculate",
                "FUN_08009270": "get_value",
                "FUN_080091b0": "set_values"
            },
            "code": "uint calculate_result_08009908(uint input_1, uint input_2)\n{\n  undefined4 default_value = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (input_1 != 0) {\n    if (input_2 == 0) {\n      reset();\n      return input_2;\n    }\n    else {\n      uint result = calculate(input_1);\n      if ((result < input_2) && (result = get_value(default_value, input_2), result != 0)) {\n        set_values(result, input_1, input_2);\n        reset(default_value, input_1);\n      }\n      return result;\n    }\n  }\n  uint result = get_value(default_value, input_2, input_2, PTR_PTR_DAT_08009914);\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_0800a154"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "calculate_result_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "parse_data_08008a24",
                "param_1": "index",
                "param_2": "value",
                "param_3": "bitmask",
                "param_4": "buffer",
                "iVar1": "parse_data_value",
                "uVar2": "parse_result",
                "puVar3": "data_buffer",
                "uVar4": "data_value",
                "PTR_DAT_08008a64": "ptr_data",
                "PTR_DAT_08008a68": "ptr_data_2",
                "FUN_08006b28": "parse_data_func",
                "FUN_08006b7c": "set_data_value"
            },
            "code": "void parse_data_08008a24(uint8_t index, uint32_t value, uint32_t bitmask, uint8_t* buffer)\n{\n    uint32_t data_value;\n    uint8_t* data_buffer;\n    if (index < 0x3c) {\n        data_value = (uint32_t)(char)PTR_DAT_08008a64[index];\n        data_buffer = PTR_DAT_08008a64;\n    }\n    else {\n        data_value = 0xffffffff;\n        data_buffer = buffer;\n    }\n    if ((data_value != 0xffffffff) &&\n        (parse_data_08008a24_value = parse_data_08008a24_func(data_value, PTR_DAT_08008a68, bitmask, data_buffer, buffer), parse_data_08008a24_value != 0)) {\n        uint32_t parse_result = parse_data_08008a24_value << 0x18 >> 0x1c;\n        uint32_t parse_mask = 1 << (parse_data_08008a24_value & 0xf) & 0xffff;\n        set_data_value(parse_result, parse_mask, value);\n    }\n    return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_08002fca",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "parse_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "initialize_system_08008abc",
                "FUN_0800723c": "initialize_network"
            },
            "code": "void initialize_system_08008abc(void)\n{\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "initialize_system_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "reverse_byte_order_and_send_to_function_08002b68",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "value",
                "param_4": "value_size",
                "param_5": "endianness",
                "iVar1": "status",
                "uVar2": "byte_index",
                "uVar3": "value_size_copy",
                "PTR_DAT_08002bf4": "function_pointer",
                "PTR_DAT_08002bf8": "global_variable_1",
                "PTR_DAT_08002bfc": "global_variable_2"
            },
            "code": "int reverse_byte_order_and_send_to_function_08002b68(uint32_t *buffer, uint32_t buffer_size, uint32_t value, uint32_t value_size, byte endianness) {\n  int status;\n  uint32_t byte_index = (uint32_t)endianness;\n  if (buffer[4] == 0) {\n    return 0;\n  }\n  reverse_byte_order(&value, value_size);\n  if (*(int *)PTR_DAT_08002bf4 != 0) {\n    if (byte_index != 0) {\n      send_to_function(buffer, buffer_size);\n      if (3 < byte_index) {\n        byte_index = 3;\n      }\n      while (byte_index > 0) {\n        (**(code **)*buffer)(buffer, value >> ((byte_index - 1) << 3) & 0xff);\n        byte_index--;\n      }\n      send_to_function(buffer, 0);\n    }\n    status = call_function(buffer + 5, (buffer_size & 0x7f) << 1, *(uint32_t *)PTR_DAT_08002bf4, value, value_size);\n    if (status != 0) {\n      value_size = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)value_size;\n    return value_size;\n  }\n  buffer[1] = 1;\n  return 0;\n}",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a58",
                "FUN_08002a30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "reverse_byte_order_and_send_to_function_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "*PTR_DAT_080005f0": "*memory_start",
                "*PTR_DAT_080005f4": "*memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n    *PTR_DAT_080005f0 = 0;\n    *PTR_DAT_080005f4 = 255;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_execute_function_08008020",
                "param_1": "input_parameter",
                "iVar1": "function_result",
                "FUN_08007f78": "get_function_result",
                "FUN_080049e0": "execute_function"
            },
            "code": "void check_and_execute_function_08008020(int input_parameter)\\n{\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n    execute_function(input_parameter);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data_register",
                "iVar2": "value1",
                "iVar3": "value2",
                "DAT_08005df0": "special_data_address"
            },
            "code": "void update_data_08005dac(int data_address, int *data_values)\n{\n    uint data_mask = 0xffffefff;\n    uint data_register = *(uint *)(data_address + 4);\n    int value1 = *data_values;\n    int value2 = data_values[2];\n\n    if (data_address == DAT_08005df0) {\n        data_mask = data_mask & 0xffffbfff | data_values[5] << 6;\n    }\n\n    *(uint *)(data_address + 4) = data_register & data_mask;\n    *(uint *)(data_address + 0x1c) = *(uint *)(data_address + 0x1c) & 0xffff8cff | value1 << 8;\n    *(int *)(data_address + 0x40) = data_values[1];\n    *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffdfff | value2 << 0xc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "check_and_update_0800674e",
                "param_1": "array",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(array + 0xe)",
                "do_nothing_0800674c": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)array + 0x39)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*array + 0xc)",
                "FUN_08006538": "update_array",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*array + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*array + 0x14)",
                "param_1[0xf]": "array[0xf]"
            },
            "code": "int check_and_update_0800674e(int *array) {\n    if (array != NULL) {\n        if (*(char *)((int)array + 0x39) == '\\0') {\n            *(undefined *)(array + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)array + 0x39) = 0x24;\n        *(uint *)(*array + 0xc) &= 0xffffdfff;\n        update_array(array);\n        *(uint *)(*array + 0x10) &= 0xffffb7ff;\n        *(uint *)(*array + 0x14) &= 0xffffffd5;\n        *(uint *)(*array + 0xc) |= 0x2000;\n        array[0xf] = 0;\n        *(undefined *)((int)array + 0x39) = 0x20;\n        *(undefined *)((int)array + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "check_and_update_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_0800771c",
                "param_1": "callback_param",
                "iVar1": "callback_address"
            },
            "code": "void execute_callback_0800771c(int callback_param) {\n  int callback_address = get_callback_address();\n  if ((*(code **)(callback_address + 0x4c) != (code *)0x0) && (*(char *)(callback_param + 0x1c) == '\\x01')) {\n    (**(code **)(callback_address + 0x4c))(callback_address, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "params",
                "param_2": "param1",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "function_result",
                "**param_1": "**params"
            },
            "code": "uint32_t check_parameters_080066e8(uint32_t **params, uint32_t param1, bool param2, int param3, uint32_t param4)\n{\n  int comparison_result;\n  while (true) {\n    comparison_result = (param1 & ~**params) == 0;\n    if (comparison_result != param2) {\n      return 0;\n    }\n    if (param4 == 0xffffffff) {\n      break;\n    }\n    if (param4 != 0) {\n      int function_result = FUN_08003760();\n      if ((function_result - param3) > param4) {\n        break;\n      }\n    }\n  }\n  (*params)[3] &= 0xfffffe5f;\n  (*params)[5] &= 0xfffffffe;\n  *((uint8_t*)(*params) + 0x39) = 0x20;\n  *((uint8_t*)(*params) + 0x3a) = 0x20;\n  *((uint32_t*)(params) + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_len",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "index",
                "FUN_0800932c": "process_byte"
            },
            "code": "int process_data_08009358(undefined4 arg1, undefined4 arg2, undefined *data, int data_len) {\n  int index = 0;\n  undefined *end_of_data = data + data_len;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    int result = process_byte(arg1, *data, arg2, data_len, index);\n    data++;\n    index = result + 1;\n  } while (index != 0);\n  return result;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_two_bytes_0800270c",
                "PTR_DAT_08002718": "pointer_to_first_byte",
                "PTR_DAT_0800271c": "pointer_to_second_byte"
            },
            "code": "int calculate_difference_between_two_bytes_0800270c(void)\n{\n  byte first_byte = *PTR_DAT_08002718;\n  byte second_byte = *PTR_DAT_0800271c;\n  uint difference = (uint)first_byte - (uint)second_byte;\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_two_bytes_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "*(undefined4 *)(param_1 + 0x6c)": "*(int *)(object_address + 0x6c)",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(object_address + 0x44)"
            },
            "code": "void set_values_08003370(int object_address, int value1, int value2, int value3) {\n  *(int *)(object_address + 0x6c) = value2;\n  *(int *)(object_address + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_params_08007fa0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "code": "void process_params_08007fa0(int param1, int param2, int param3, undefined4 param4)\n{\n  int result = FUN_08007f78();\n  if (param3 == *(int *)(param1 + 0xc)) {\n    if (param2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_080048c8(param1, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    FUN_08004954(param1, result + 0x68, 0x20, 8, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_080048c8",
                "FUN_08007f78",
                "FUN_08004954"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_params_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "process_data_08003376",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "buffer_size",
                "bVar1": "is_buffer_overflowed",
                "max_buffer_size": "*(uint32_t *)(buffer + 8)",
                "func_ptr": "*(code **)(buffer + 100)"
            },
            "code": "void process_data_08003376(char *buffer, char data, uint32_t buffer_size)\n{\n    bool is_buffer_overflowed;\n    uint32_t max_buffer_size = *(uint32_t *)(buffer + 8);\n    if (buffer_size < max_buffer_size)\n    {\n        is_buffer_overflowed = false;\n    }\n    else\n    {\n        is_buffer_overflowed = true;\n        code *func_ptr = *(code **)(buffer + 100);\n        if (func_ptr != (code *)0x0)\n        {\n            *buffer = 1;\n            (*func_ptr)(*(uint32_t *)(buffer + 0x3c));\n            if (buffer_size < max_buffer_size)\n            {\n                is_buffer_overflowed = false;\n            }\n            else\n            {\n                is_buffer_overflowed = true;\n            }\n        }\n    }\n    if (!is_buffer_overflowed)\n    {\n        *(char *)(*(int *)(buffer + 4) + buffer_size) = data;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_data_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "check_and_call_08008bf4",
                "DAT_08008c18": "flag",
                "PTR_DAT_08008c1c": "pointer",
                "FUN_08008afa": "call_function"
            },
            "code": "void check_and_call_08008bf4(void)\n{\n  if (DAT_08008c18 != 0) {\n    call_function(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "check_and_call_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_0x40_08005430",
                "param_1": "address"
            },
            "code": "int get_value_at_offset_0x40_08005430(int address) {\n    return *(int *)(address + 0x40);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x40_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "get_next_byte_from_table_08002720",
                "bVar1": "current_byte_index",
                "bVar2": "next_byte",
                "PTR_DAT_08002740": "current_index_ptr",
                "PTR_DAT_08002744": "end_index_ptr",
                "PTR_DAT_08002748": "start_index_ptr"
            },
            "code": "uint get_next_byte_from_table_08002720(void)\n{\n  uint current_byte_index = *PTR_DAT_08002740;\n  if (current_byte_index < (uint)(byte)*PTR_DAT_08002744) {\n    uint next_byte = *(byte *)(*(int *)PTR_DAT_08002748 + current_byte_index);\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "get_next_byte_from_table_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "execute_command_080031ce",
                "param_1": "command_ptr",
                "param_2": "command_param1",
                "param_3": "command_param2",
                "param_4": "command_param3",
                "param_5": "command_param4",
                "puVar1": "function_ptr",
                "uVar2": "i",
                "FUN_0800307a": "sub_function4",
                "*puVar1": "*function_ptr",
                "**(code **)*puVar1": "(void (*)(uint32_t *, uint32_t, uint32_t, void *, uint32_t)) *function_ptr",
                "***sub_function1": "(void (*)(uint32_t *)) **(uint32_t ***)command_ptr",
                "***sub_function2": "(void (*)(uint32_t *, uint32_t)) **(uint32_t ***)command_ptr",
                "***sub_function3": "(void (*)(uint32_t *)) **(uint32_t ***)command_ptr"
            },
            "code": "void execute_command_080031ce(uint32_t *command_ptr, uint32_t command_param1, uint32_t command_param2, uint32_t command_param3, int command_param4) {\n  uint32_t *function_ptr = (uint32_t *)*command_ptr;\n  if (function_ptr != NULL) {\n    void (*function)(uint32_t *, uint32_t, uint32_t, void *, uint32_t) = (void (*)(uint32_t *, uint32_t, uint32_t, void *, uint32_t)) *function_ptr;\n    function(function_ptr, 0xf0, command_param3, (void *) *function_ptr, command_param3);\n    void (*sub_function1)(uint32_t *) = (void (*)(uint32_t *)) **(uint32_t ***)command_ptr;\n    sub_function1((uint32_t *)*command_ptr);\n    void (*sub_function2)(uint32_t *, uint32_t) = (void (*)(uint32_t *, uint32_t)) **(uint32_t ***)command_ptr;\n    sub_function2((uint32_t *)*command_ptr, command_param1);\n    sub_function2((uint32_t *)*command_ptr, command_param2);\n    sub_function2((uint32_t *)*command_ptr, command_param3);\n    for (uint32_t i = 0; i < command_param4; i++) {\n      FUN_0800307a(command_ptr, 1, command_param4 + i, 0);\n    }\n    void (*sub_function3)(uint32_t *) = (void (*)(uint32_t *)) **(uint32_t ***)command_ptr;\n    sub_function3((uint32_t *)*command_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "execute_command_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "initialize_param_08009918",
                "param_1": "output_param",
                "param_2": "input_param",
                "puVar1": "ptr_dat",
                "iVar2": "result"
            },
            "code": "void initialize_param_08009918(int *output_param, undefined4 input_param)\n{\n    undefined *ptr_dat = PTR_DAT_08009934;\n    *(undefined4 *)PTR_DAT_08009934 = 0;\n    int result = calculate(input_param);\n    if ((result == -1) && (*(int *)ptr_dat != 0)) {\n        *output_param = *(int *)ptr_dat;\n    }\n    return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "initialize_param_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "reverse_countdown_08005434",
                "param_1": "num",
                "local_4": "countdown_length"
            },
            "code": "void reverse_countdown_08005434(int num) {\n  int countdown_length = num * (uint64_t)DAT_0800545c * (uint64_t)*(uint *)PTR_DAT_08005458 >> 0x29;\n  while (countdown_length > 0) {\n    countdown_length--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "reverse_countdown_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_flags_if_necessary_08005e2e",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "void update_flags_if_necessary_08005e2e(uint **data)\n{\n  uint *data_ptr;\n  *(undefined *)((int)data + 0x3d) = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  execute_other_function(data);\n  *(undefined *)((int)data + 0x3d) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_flags_if_necessary_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "iVar1": "function_pointer_address",
                "FUN_08007718": "get_function_pointer_address",
                "PTR_": "PTR_ (no change)",
                "DAT_": "DAT_ (no change)",
                "code": "code_pointer"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  if (*(code **)(function_pointer_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_pointer_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_08002968",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "iVar1": "data_offset",
                "iVar2": "data_ptr_offset",
                "PTR_DAT_080029ec": "data_ptr_offset_1",
                "PTR_DAT_080029f0": "data_ptr_offset_2",
                "PTR_DAT_080029f4": "data_ptr_offset_3",
                "FUN_080091c6": "function_1",
                "PTR_DAT_080029f8": "data_ptr_offset_4",
                "PTR_DAT_080029fc": "data_ptr_offset_5",
                "PTR_DAT_08002a00": "data_ptr_offset_6",
                "PTR_DAT_08002a04": "data_ptr_offset_7",
                "PTR_DAT_08002a08": "data_ptr_offset_8",
                "PTR_DAT_08002a0c": "data_ptr_offset_9",
                "DAT_08002a10": "data_offset_1",
                "FUNC_080077b0": "function_2",
                "PTR_LAB_08002774_1_08002a14": "data_offset_2",
                "FUN_08007f8e": "function_3",
                "PTR_LAB_08002b00_1_08002a18": "data_offset_3"
            },
            "code": "void initialize_data_08002968(int data_ptr, uint data_size) {\n  int data_offset;\n  int is_data_type_33;\n  char* data_ptr_offset;\n  *PTR_DAT_080029ec = 0;\n  *PTR_DAT_080029f0 = 0;\n  if (*(int *)PTR_DAT_080029f4 != 0) {\n    FUN_080091c6(*(int *)PTR_DAT_080029f4,0,*PTR_DAT_080029f8);\n  }\n  *PTR_DAT_080029fc = 0;\n  *PTR_DAT_08002a00 = 0;\n  if (*(int *)PTR_DAT_08002a04 != 0) {\n    FUN_080091c6(*(int *)PTR_DAT_08002a04,0,*PTR_DAT_08002a08);\n  }\n  *PTR_DAT_08002a0c = 0;\n  data_offset = (data_size & 0x7f) << 1;\n  data_ptr_offset = (char*)(data_ptr + 0x10);\n  *data_ptr_offset = (char)data_offset;\n  is_data_type_33 = (data_size == 0x33) ? 1 : 0;\n  *(undefined *)(data_ptr_offset + 1) = is_data_type_33;\n  FUNC_080077b0(data_ptr + 0x14, DAT_08002a10, 0x4000, data_offset, is_data_type_33);\n  if (!is_data_type_33) {\n    FUN_08007f8e(data_ptr + 0x14, PTR_LAB_08002774_1_08002a14);\n    FUN_08007f7c(data_ptr + 0x14, PTR_LAB_08002b00_1_08002a18);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_080077b0",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input_array",
                "puVar1": "ptr1",
                "char1": "char1",
                "short1": "short1",
                "do_nothing_08004b80": "do_nothing_1",
                "do_nothing_08004a1e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input_array)\n{\n  uint32_t *ptr1;\n  uint32_t *ptr2;\n  uint32_t *ptr3;\n  uint8_t char1;\n  uint16_t short1;\n\n  ptr1 = input_array[11];\n  char1 = *((uint8_t *)input_array + 61);\n  if (char1 == '!') {\n    short1 = *((uint16_t *)input_array + 21);\n    if (short1 == 0) {\n      if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (ptr1 == (uint32_t *)0xffff0000)) {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        **input_array = **input_array | 0x200;\n        input_array[12] = (uint32_t *)0x0;\n        *((uint8_t *)input_array + 61) = 0x20;\n        if (*((uint8_t *)input_array + 62) == '@') {\n          *((uint8_t *)input_array + 62) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *((uint8_t *)input_array + 62) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*input_array)[1] = (*input_array)[1] & 0xfffff8ff;\n        input_array[12] = (uint32_t *)0x11;\n        *((uint8_t *)input_array + 62) = 0;\n        *((uint8_t *)input_array + 61) = 0x20;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      ptr2 = input_array[9];\n      input_array[9] = (uint32_t *)((int)ptr2 + 1);\n      (*input_array)[4] = (uint32_t)*(uint8_t *)ptr2;\n      short1--;\n      *((uint16_t *)input_array + 10) = short1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_included_080042d4",
                "param_1": "param_array",
                "param_2": "param_value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int is_param2_included_080042d4(uint param_value, uint* param_array) {\n    if ((param_value & *(param_array + 2)) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_included_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_value_from_offset_0800542a",
                "param_1": "data",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "unsigned char get_value_from_offset_0800542a(unsigned char* data, int offset){\n    return *(unsigned char*)(data + offset + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_in_array_0800457c",
                "param_1": "array_ptr",
                "pbVar1": "byte_ptr",
                "PTR_": "array_",
                "DAT_": "data_"
            },
            "code": "int increment_byte_in_array_0800457c(int *PTR_ptr)\n{\n  int *PTR_end_ptr = PTR_ptr + 9;\n  short *short_ptr = (short *)(PTR_ptr + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)*PTR_end_ptr;\n    *PTR_end_ptr = (int)(byte_ptr + 1);\n    *(unsigned int *)(*PTR_ptr + 0x10) = (unsigned int)*byte_ptr;\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_in_array_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "set_memory_to_value_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_memory"
            },
            "code": "void set_memory_to_value_080091c6(char* memory, char value, int size) {\n  char* end_of_memory = memory + size;\n  for (; memory != end_of_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08009cdc",
                "FUN_08009d24",
                "FUN_08007118",
                "FUN_08002a58",
                "FUN_08002968",
                "FUN_08006d80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "set_memory_to_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "check_and_update_value_0800a07a",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_invalid_result"
            },
            "code": "void check_and_update_value_0800a07a(undefined4 value, int* data){\n    int result = FUN_0800a130(value, (int)*(short *)(data + 0xe));\n    bool is_invalid_result = result == -1;\n    ushort updated_value;\n    \n    if (is_invalid_result) {\n        updated_value = *(ushort *)(data + 0xc) & 0xefff;\n    }\n    else {\n        *(int *)(data + 0x54) = result;\n        updated_value = *(ushort *)(data + 0xc) | 0x1000;\n    }\n    \n    *(ushort *)(data + 0xc) = updated_value;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_value_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_flag_and_wait_08003a20",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "current_value",
                "iVar3": "data_address",
                "uVar2": "return_value",
                "local_14": "wait_time",
                "PTR_DAT_08003a98": "constant_pointer",
                "DAT_08003a9c": "time_constant"
            },
            "code": "int set_flag_and_wait_08003a20(int *data, uint flag) {\\\n  int data_address = *data;\\\n  if ((*(uint *)(data_address + 8) & 1) == 0) {\\\n    *(uint *)(data_address + 8) |= 1;\\\n    uint wait_time = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32);\\\n    while (wait_time != 0) {\\\n      wait_time--;\\\n    }\\\n    int initial_value = perform_operation(data, flag,\\\n                         (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\\\n    do {\\\n      if ((*(uint *)(*data + 8) & 1) != 0) {\\\n        return 0;\\\n      }\\\n      int current_value = perform_operation();\\\n    } while ((uint)(current_value - initial_value) < 3);\\\n    data[10] |= 0x10;\\\n    data[0xb] |= 1;\\\n    *(undefined *)(data + 9) = 0;\\\n    return 1;\\\n  }\\\n  else {\\\n    return 0;\\\n  }\\\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003aa0",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "set_flag_and_wait_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "updateValues_080064b0",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "*(uint *)(*param_1 + 0xc)": "*ptr_value1",
                "*(uint *)(*param_1 + 0x14)": "*ptr_value2",
                "0xfffffedf": "MASK1",
                "0xfffffffe": "MASK2"
            },
            "code": "void updateValues_080064b0(int *ptr_param){\n    uint *ptr_value1 = (uint *)(*ptr_param + 0xc);\n    uint *ptr_value2 = (uint *)(*ptr_param + 0x14);\n    *ptr_value1 = *ptr_value1 & 0xfffffedf;\n    *ptr_value2 = *ptr_value2 & 0xfffffffe;\n    *(undefined *)((int)ptr_param + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "updateValues_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "DAT_08009d14",
                "FUN_080091c6": "initialize_memory"
            },
            "code": "void initialize_data_structure_08009cdc(undefined4 *data, undefined2 value_1, undefined2 value_2) {\n    data[0] = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value_1;\n    data[0x19] = 0;\n    *(undefined2 *)((int)data + 0xe) = value_2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    initialize_memory(data + 0x17, 0, 8);\n    data[8] = data;\n    data[9] = DAT_08009d14;\n    data[10] = PTR_FUN_0800a042_1_08009d18;\n    data[0xb] = PTR_FUN_0800a07a_1_08009d1c;\n    data[0xc] = PTR_LAB_0800a09e_1_08009d20;\n    return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "validate_input_08002a58",
                "param_1": "input",
                "iVar1": "validation_result",
                "uVar2": "result",
                "PTR_DAT_08002ab0": "data_pointer_1",
                "PTR_DAT_08002aac": "data_pointer_2",
                "PTR_DAT_08002aa8": "data_pointer_3",
                "PTR_DAT_08002ab4": "memory_pointer",
                "PTR_DAT_08002ab8": "memory_pointer_2",
                "PTR_DAT_08002abc": "memory_pointer_3"
            },
            "code": "int validate_input_08002a58(int input){\n    int result;\n    if (*(char *)(input + 0x11) == '\\0') {\n        result = 4;\n    }\n    else {\n        int validation_result = validate_data(input + 0x14,*PTR_DAT_08002ab0,*(undefined4 *)PTR_DAT_08002aac,*PTR_DAT_08002aa8);\n        if (validation_result == 0) {\n            result = 0;\n        }\n        else if (validation_result == 1) {\n            result = 1;\n        }\n        else {\n            result = 4;\n        }\n        if (*(int *)PTR_DAT_08002aac != 0) {\n            clear_memory(*(int *)PTR_DAT_08002aac,0,*PTR_DAT_08002ab4);\n        }\n        *PTR_DAT_08002ab8 = 0;\n        *PTR_DAT_08002aa8 = 0;\n        *PTR_DAT_08002abc = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "validate_input_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "limit_and_call_080026b0",
                "param_1": "limit",
                "param_2": "value",
                "FUN_08008ef4": "calculate_value",
                "FUN_0800267c": "call_function"
            },
            "code": "void limit_and_call_080026b0(int limit, int value)\n{\n    if (value < limit)\n    {\n        if (value < 0)\n        {\n            value = 0;\n        }\n        else if (limit < value)\n        {\n            value = limit;\n        }\n        value = calculate_value(value, 0, limit, (0x88 - *(char *)(param_1 + 1)) * 4, (600 - *(char *)(param_1 + 2)) * 4);\n    }\n    call_function(param_1, value);\n    return;\n}",
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "limit_and_call_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "check_and_set_flag_08006092",
                "param_1": "ptr_param",
                "*(char *)((int)param_1 + 0x3d)": "ptr_param[61]",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(ptr_param + 15)",
                "FUNC_08006e68": "call_func_08006e68",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char *)(ptr_param + 60)",
                "FUN_08005fe8": "call_func_08005fe8"
            },
            "code": "int check_and_set_flag_08006092(int *ptr_param) {\n    if (ptr_param != NULL) {\n        if (ptr_param[15] == 0) {\n            *(char *)(ptr_param + 60) = 0;\n            FUNC_08006e68();\n        }\n        *(char *)(ptr_param + 60) = 2;\n        call_func_08005fe8(*ptr_param, ptr_param + 1);\n        *(char *)(ptr_param + 60) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "validate_input_08008d8c",
                "param_1": "input_value",
                "param_2": "input_flag",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "FUN_08008d30": "execute_function"
            },
            "code": "void validate_input_08008d8c(int input_value, int input_flag, undefined4 unknown_param_1, undefined4 unknown_param_2)\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (input_flag == 0xffff) {\n    execute_function(PTR_DAT_08008dac, DAT_08008da8, unknown_param_1, 0xffff, unknown_param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "print_if_param1_is_one_080004d4",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "i",
                "puVar2": "data_ptr",
                "PTR_DAT_080004fc": "PTR_DAT_080004fc",
                "FUN_08002580": "print_data"
            },
            "code": "void print_if_param1_is_one_080004d4(int param1, int param2) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    unsigned char* data_ptr = PTR_DAT_080004fc;\n    for (int i = 11; i >= 0; i--) {\n      print_data(data_ptr);\n      data_ptr += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "print_if_param1_is_one_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      FUN_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = FUN_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = FUN_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      FUN_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    FUN_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = FUN_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          FUN_08008a24(param_1,0);\n        }\n        FUN_08008990(param_1,1);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = FUN_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08008990(param_1,0);\n        }\n        FUN_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08008990(param_1,1);\n        FUN_080088e0(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = FUN_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      FUN_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        FUN_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08002fa8",
                "FUN_08002f14",
                "FUN_08000488",
                "FUN_08008a24",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_080026f8",
                "FUN_08008990",
                "FUN_08000588",
                "FUN_080005e0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_function_with_args_08009124",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "var1",
                "uStack_4": "var2"
            },
            "code": "void execute_function_with_args_08009124(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined4 var1;\n  undefined4 var2;\n  var1 = arg3;\n  var2 = arg4;\n  call_function(*(undefined4 *)PTR_PTR_DAT_08009144, arg1, arg2, &var1, arg1, &var1);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "code": "unsigned char get_value_at_offset_08002fa0(int offset, int base_address) {\n    return *(unsigned char *)(base_address + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "PTR_": "value_pointer",
                "*(undefined4 *)": "*",
                "DAT_": "0x28"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address)\n{\n    int* PTR_ = (int*)(base_address + DAT_);\n    return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "check_and_set_flag_08005cb4",
                "param_1": "flag_ptr",
                "**param_1": "flag_value",
                "*param_1": "flag_array",
                "DAT_08005ce8": "data_address"
            },
            "code": "void check_and_set_flag_08005cb4(uint **flag_ptr)\n{\n  bool flag_is_set = ((**flag_ptr & 2) != 0);\n  bool second_flag_is_set = (((*flag_ptr)[1] & 2) != 0);\n  if (flag_is_set && second_flag_is_set) {\n    call_reset_function();\n    (*flag_ptr)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(undefined *)((int)flag_ptr + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_at_offset_08007744",
                "param_1": "base_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int get_value_at_offset_08007744(int base_address)\n{\n    int offset_address = *(int *)(base_address + 4);\n    int value = *(int *)(offset_address + 0x24);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_at_offset_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_result_08006538",
                "param_1": "input",
                "*param_1": "*input",
                "uVar1": "multiplier_6",
                "uVar2": "PTR_DAT_080066e4",
                "iVar3": "multiplier_1",
                "iVar4": "multiplier_2",
                "iVar5": "multiplier_3",
                "iVar6": "multiplier_4",
                "iVar7": "multiplier_5",
                "iVar8": "input_value",
                "iVar9": "multiplier_2",
                "iVar10": "multiplier_3",
                "iVar11": "multiplier_4",
                "iVar12": "input_value",
                "DAT_080066e0": "PTR_DAT_080066e0"
            },
            "code": "void calculate_result_08006538(int *input)\n{\n    // Update values in input pointer\n    uint *ptr_1 = (uint *)(*input + 0x10);\n    *ptr_1 = (*ptr_1 & 0xffffcfff) | input[3];\n    uint *ptr_2 = (uint *)(*input + 0xc);\n    *ptr_2 = (input[2] | input[4] | input[5] | (*ptr_2 & 0xffffe9f3));\n    uint *ptr_3 = (uint *)(*input + 0x14);\n    *ptr_3 = (*ptr_3 & 0xfffffcff) | input[6];\n\n    // Calculate result\n    int input_value = *input;\n    int multiplier_1 = FUN_08005a28();\n    int multiplier_2 = FUN_08005a28();\n    int multiplier_3 = FUN_08005a28();\n    int multiplier_4 = FUN_08005a28();\n    int multiplier_5 = FUN_08005a28();\n    int multiplier_6 = FUN_08005a28();\n    uint *result_ptr = (uint *)(input_value + 8);\n    uint result = 0;\n    if (input_value != DAT_080066e0) {\n        result = ((uint)((int)(((ulonglong)PTR_DAT_080066e4 * (ulonglong)(((uint)(multiplier_4 * 0x19) / (uint)(input[1] << 2)) + (uint)(((ulonglong)PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_5 * 0x19) / (ulonglong)(uint)(input[1] << 2))) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c;\n        result += ((uint)((ulonglong)PTR_DAT_080066e4 * (ulonglong)(((uint)(multiplier_2 * 0x19) / (uint)(input[1] << 2)) + (uint)(((ulonglong)PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_3 * 0x19) / (ulonglong)(uint)(input[1] << 2))) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x25;\n        result += (uint)(PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_1 * 0x19) / (ulonglong)(uint)(input[1] << 2)) >> 0x25) * 0x10;\n    } else {\n        result = ((uint)((int)(((ulonglong)PTR_DAT_080066e4 * (ulonglong)(((uint)(multiplier_4 * 0x19) / (uint)(input[1] << 2)) + (uint)(((ulonglong)PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_5 * 0x19) / (ulonglong)(uint)(input[1] << 2))) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c;\n        result += ((uint)((ulonglong)PTR_DAT_080066e4 * (ulonglong)(((uint)(multiplier_2 * 0x19) / (uint)(input[1] << 2)) + (uint)(((ulonglong)PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_3 * 0x19) / (ulonglong)(uint)(input[1] << 2))) >> 0x25)) * -100) * 0x10 + 0x32) >> 0x25;\n        result += (uint)(PTR_DAT_080066e4 * ((ulonglong)(uint)(multiplier_1 * 0x19) / (ulonglong)(uint)(input[1] << 2)) >> 0x25) * 0x10;\n    }\n    *result_ptr = result;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_result_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_param_value_080042e2(int base_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_param_value_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value",
                "*(char *)(param_1 + param_2 + 0xcc)": "current_value",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "new_value"
            },
            "code": "void update_memory_08002fa8(int base_address, int offset, undefined new_value) {\n  char current_value = *(char *)(base_address + offset + 0xcc);\n  if (current_value != '\\x7f') {\n    *(undefined *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "execute_function_on_data_0800325a",
                "param_1": "function_ptr",
                "param_2": "data",
                "param_3": "data_count",
                "param_4": "offset",
                "puVar1": "function_data_ptr",
                "uVar2": "i"
            },
            "code": "void execute_function_on_data_0800325a(void **function_ptr, uint32_t data, uint32_t data_count, int32_t offset)\n{\n    void (*function)(void *, uint32_t);\n    void *function_data_ptr;\n\n    function_data_ptr = (void *)*function_ptr;\n\n    if (function_data_ptr != NULL)\n    {\n        function = *(void (**)(void *, uint32_t))(function_data_ptr);\n        function(function_data_ptr, 0xf0);\n\n        void (*data_function)(void *, uint32_t) = *(void (***)(void *, uint32_t))(function_data_ptr);\n        data_function(function_data_ptr, data);\n\n        for (uint32_t i = 0; i < data_count; ++i)\n        {\n            FUN_0800307a(function_ptr, 1, offset + i, 0);\n        }\n\n        data_function(function_data_ptr, 0xf7);\n    }\n}\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "execute_function_on_data_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_into_linked_list_080091d8",
                "param_1": "head",
                "param_2": "size",
                "param_3": "element",
                "param_4": "param_4",
                "puVar1": "pointer",
                "extraout_r1": "next",
                "ppiVar2": "next",
                "ppiVar3": "previous",
                "piVar4": "value",
                "ppiVar5": "start",
                "ppiVar6": "current",
                "ppiVar7": "end"
            },
            "code": "void insert_into_linked_list_080091d8(int **head, int size, int element, int param_4)\n{\n  int **current = head;\n  if (size == 0) {\n    return;\n  }\n  int **end = current + size - 1;\n  if (**head < 0) {\n    end = (int **)((int)end + **head);\n  }\n  do_nothing_08009f48();\n  int **start = *(int ***)PTR_DAT_0800926c;\n  if (start == (int **)0x0) {\n    end[1] = (int *)0x0;\n    *(int ***)PTR_DAT_0800926c = end;\n    current = head;\n  }\n  else if (end < start) {\n    int **next = (int **)*end;\n    int **previous = (int **)((int)end + (int)next);\n    if (start == previous) {\n      int *value = *start;\n      start = (int **)start[1];\n      previous = (int **)((int)value + (int)next);\n      *end = (int *)previous;\n    }\n    end[1] = (int *)start;\n    *(int ***)PTR_DAT_0800926c = end;\n  }\n  else {\n    while (current <= end) {\n      int **next = *current;\n      int **previous = (int **)((int)current + (int)next);\n      if (previous == (int **)0x0) {\n        break;\n      }\n      if (previous <= end) {\n        if ((int **)((int)previous + (int)next) == end) {\n          next = (int **)((int)next + (int)*end);\n          *previous = (int *)next;\n          if ((int **)((int)previous + (int)next) == start) {\n            int *value = *start;\n            start = (int **)start[1];\n            next = (int **)((int)value + (int)next);\n            *previous = (int *)next;\n            previous[1] = (int *)start;\n          }\n        }\n        else if (end < (int **)((int)previous + (int)next)) {\n          return 0xc;\n        }\n        else {\n          next = (int **)((int)end + (int)*end);\n          if ((int **)((int)previous + (int)next) == start) {\n            int *value = *start;\n            start = (int **)start[1];\n            next = (int **)((int)value + (int)*end);\n            *end = (int *)next;\n          }\n          end[1] = (int *)previous;\n          current[1] = (int *)end;\n        }\n        break;\n      }\n      current = previous;\n    }\n  }\n  do_nothing_08009f4a(param_1,next,previous,param_4);\n  return;\n}",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_and_update_params_0800688e",
                "param_1": "param_arr",
                "param_2": "param1",
                "param_3": "param2",
                "*(char *)((int)param_1 + 0x39)": "*(char *)(param_arr + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(param_arr + 0xe)",
                "param_1[8]": "param_arr[8]",
                "*(short *)(param_1 + 9)": "param_arr[9]",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)param_arr + 0x26)",
                "param_1[0xf]": "param_arr[0xf]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*param_arr + 0xc)"
            },
            "code": "int check_and_update_params_0800688e(int *param_arr, int param1, int param2)\n{\n    int status = 0;\n    char *char_ptr = (char *)(param_arr + 0x39);\n    if (*char_ptr != ' ')\n    {\n        status = 2;\n    }\n    else if (param1 == 0 || param2 == 0)\n    {\n        status = 1;\n    }\n    else\n    {\n        if (*(char *)(param_arr + 0xe) != '\\x01')\n        {\n            param_arr[8] = param1;\n            param_arr[9] = (short)param2;\n            *(short *)((int)param_arr + 0x26) = (short)param2;\n            param_arr[0xf] = 0;\n            *char_ptr = 0x21;\n            *(char *)(param_arr + 0xe) = 0;\n            *(uint *)(*param_arr + 0xc) |= 0x80;\n        }\n        else\n        {\n            status = 2;\n        }\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "imported": false,
            "current_name": "check_and_update_params_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "check_and_modify_value_080088e0",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "check_result",
                "uVar2": "bit_shift",
                "iVar3": "character_value"
            },
            "code": "void check_and_modify_value_080088e0(uint index, uint value) {\n  int character_value;\n  uint bit_shift;\n  int check_result;\n  if (index < 0x3c) {\n    character_value = (int)(char)PTR_DAT_0800897c[index];\n  }\n  else {\n    character_value = -1;\n  }\n  if (character_value != -1) {\n    check_result = FUN_0800738a(character_value, PTR_DAT_08008980);\n    if (check_result == 0) {\n      FUN_08008990(index, 1);\n      bit_shift = *(uint *)PTR_DAT_08008988;\n      if (bit_shift != 8) {\n        if (bit_shift < 9) {\n          value = value << (8 - bit_shift & 0xff);\n        }\n        else {\n          value = value >> (bit_shift - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        FUN_08008a24(index, 0);\n      }\n      else {\n        FUN_08008a24(index, 1);\n      }\n    }\n    else {\n      check_result = FUN_08006b28(character_value, PTR_DAT_08008984);\n      if (check_result == 0) {\n        FUN_08006b3e(character_value, PTR_DAT_08008984);\n      }\n      bit_shift = *(uint *)PTR_DAT_08008988;\n      if (bit_shift != 8) {\n        if (bit_shift < 9) {\n          value = value << (8 - bit_shift & 0xff);\n        }\n        else {\n          value = value >> (bit_shift - 8 & 0xff);\n        }\n      }\n      FUN_08007118(character_value, DAT_0800898c, 0xff, value, check_result == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_0800738a",
                "FUN_08007118",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "check_and_modify_value_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "update_data_08008b66",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "data"
            },
            "code": "void update_data_08008b66(int data_ptr) {\n  int result = 0;\n  ushort index = 0;\n  undefined data = 0;\n  result = get_data(data_ptr,&data);\n  if ((result == 0) && (index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = data;\n    *(ushort *)(data_ptr + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_command_if_valid_0800870c",
                "uVar1": "command_index",
                "FUN_080086e8": "get_valid_command_index",
                "PTR_DAT_08008728": "command_function_ptr_array",
                "PTR_DAT_0800872c": "command_parameter_array"
            },
            "code": "void execute_command_if_valid_0800870c(void)\n{\n  uint8_t command_index;\n  command_index = get_valid_command_index();\n  if (command_index < 5) {\n    (**(command_function_ptr *)(PTR_DAT_08008728 + command_index * 4))(*(command_parameter_ptr *)(PTR_DAT_0800872c + command_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_command_if_valid_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840",
                "undefined4": "int",
                "0xffffffff": "-1"
            },
            "code": "int get_error_code_08008840(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "get_value_at_offset_08008600",
                "param_1": "offset",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "iVar1": "value",
                "*param_2": "*buffer",
                "PTR_DAT_08008638": "some_pointer",
                "*(undefined *)(param_1 + 0x45)": "some_value",
                "byte *)(param_1 + 0x44)": "byte_value",
                "some_function": "some_function",
                "0xffffffff": "default_value"
            },
            "code": "int get_value_at_offset_08008600(int offset, char* buffer, int buffer_size, int default_value) {\n  if (offset == 0) {\n    return default_value;\n  }\n  int value = get_some_value();\n  if (value == 0) {\n    *buffer = *(char *)(offset + 0x45);\n    some_function(PTR_DAT_08008638 + (uint)*(byte *)(offset + 0x44) * 4, offset + 0x45,1,PTR_DAT_08008638,buffer_size);\n    return 0;\n  }\n  return default_value;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "assign_value_to_pointer_08003154",
                "param_1": "pointer",
                "param_2": "value",
                "*param_1": "*pointer"
            },
            "code": "void assign_value_to_pointer_08003154(int *pointer, int value)\n{\n  *pointer = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "assign_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "set_bit_in_uint_array_08006420",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "target_uint_ptr",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "bit_mask",
                "param_3 << (param_2 & 0xff)": "shifted_bit_value"
            },
            "code": "void set_bit_in_uint_array_08006420(uint* array, uint bit_index, uint bit_value) {\n\tuint* target_uint_ptr = array + 0x20;\n\tuint bit_mask = ~(4 << (bit_index & 0xff));\n\t*target_uint_ptr &= bit_mask;\n\tuint shifted_bit_value = bit_value << (bit_index & 0xff);\n\t*target_uint_ptr |= shifted_bit_value;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_parameter_value_08007750",
                "param_1": "parameter_list",
                "param_2": "parameter_index",
                "param_3": "value",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void set_parameter_value_08007750(int parameter_list, int parameter_index, int value) {\n    int* parameter_ptr = *(int*)(parameter_list + 4);\n    int* parameter_value_ptr = parameter_ptr + 0x34 + parameter_index * 4;\n    *parameter_value_ptr = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_value_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char_pointer"
            },
            "code": "char* find_character_in_string_08009938(char* string, char character) {\n    char* current_char_pointer;\n    do {\n        current_char_pointer = string;\n        if (*current_char_pointer == '\\0') {\n            if (character != '\\0') {\n                current_char_pointer = (char*)0x0;\n            }\n            return current_char_pointer;\n        }\n        string = current_char_pointer + 1;\n    } while (character != *current_char_pointer);\n    return current_char_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "check_string_08007f0e",
                "param_1": "str_len",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "start_time",
                "iVar2": "str_check",
                "uVar3": "time_diff",
                "iVar4": "found_flag",
                "iVar5": "str_ptr",
                "uVar6": "arg4"
            },
            "code": "int check_string_08007f0e(int str_len, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  int start_time = FUN_08003760();\n  int found_flag = 2;\n  uint time_diff = 0;\n  do {\n    int str_ptr = str_len + 4;\n    int str_check = FUN_080047f4(str_ptr, arg2, arg3, arg4, arg4);\n    if (str_check == 0) {\n      found_flag = 0;\n      while ((str_check = FUN_0800542a(str_ptr), str_check != 0x20 && (found_flag == 0))) {\n        int current_time = FUN_08003760();\n        time_diff = current_time - start_time;\n        if (time_diff < 0x65) {\n          str_check = FUN_08005430(str_ptr);\n          if (str_check != 0) {\n            found_flag = 2;\n          }\n        }\n        else {\n          found_flag = 1;\n        }\n      }\n    }\n    str_check = FUN_08005430(str_ptr);\n  } while ((str_check == 4) && (time_diff < 100));\n  return found_flag;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_string_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "bit_position",
                "DAT_08004020": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08004004(uint bit_position) {\n  if (bit_position >= 0) {\n    int array_index = (bit_position >> 5) + 0x60;\n    int* array_ptr = (int*)(DAT_08004020 + array_index * 4);\n    int bit_offset = bit_position & 0x1f;\n    int bit_mask = 1 << bit_offset;\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_data_to_device_08003158",
                "param_1": "device_data",
                "param_2": "data_length",
                "param_3": "data_type",
                "puVar1": "device_ptr",
                "local_a": "local_data_type"
            },
            "code": "void send_data_to_device_08003158(uint8_t *device_data, uint data_length, uint16_t data_type)\n{\n  uint8_t *device_ptr;\n  uint16_t local_data_type;\n  device_ptr = (uint8_t *)*device_data;\n  if (device_ptr != (uint8_t *)0x0) {\n    local_data_type = data_type;\n    if (((int)data_length < 0x10) && (data_type < 0x4000)) {\n      (**(code **)*device_ptr)(device_ptr,data_length | 0xe0);\n      send_data_to_device_08003158(device_data, 2, &local_data_type);\n    }\n    else {\n      send_data_to_device_08003158(device_data, data_length, 2, &local_data_type);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "send_data_to_device_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "swap_arguments_and_call_080090c2",
                "param_1": "first_argument",
                "param_2": "second_argument",
                "FUN_08009108": "call_function_with_swapped_arguments"
            },
            "code": "void swap_arguments_and_call_080090c2(void* first_argument, void* second_argument) {\n  call_function_with_swapped_arguments(second_argument, first_argument);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08000be8",
                "FUN_08008a6c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "setMemoryPageSizeTo8192Bytes_08008846",
                "param_1": "memoryAddress",
                "param_2": "pageSize",
                "PTR_": "",
                "DAT_": "",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(memoryAddress + 4)"
            },
            "code": "void setMemoryPageSizeTo8192Bytes_08008846(int *memoryAddress, int pageSize) {\n  *(int *)(memoryAddress + 4) = pageSize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "setMemoryPageSizeTo8192Bytes_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "write_value_to_memory_0800459c",
                "param_1": "memory_address",
                "puVar1": "current_memory_address"
            },
            "code": "int write_value_to_memory_0800459c(int *memory_address)\n{\n  undefined *current_memory_address;\n  \n  if (*(short *)((int)memory_address + 0x2a) != 0) {\n    current_memory_address = (undefined *)memory_address[9];\n    memory_address[9] = (int)(current_memory_address + 1);\n    *current_memory_address = (char)*(undefined4 *)(*memory_address + 0x10);\n    *(short *)((int)memory_address + 0x2a) = *(short *)((int)memory_address + 0x2a) + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "write_value_to_memory_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_parameter_0800774a",
                "param_1": "object_address",
                "param_2": "parameter_value",
                "PTR_": "ptr",
                "DAT_": "parameter_address"
            },
            "code": "void set_parameter_0800774a(int object_address, int parameter_value) {\n    int PTR_ = *(int *)(object_address + 4);\n    int DAT_ = PTR_ + 0x24;\n    *(int *)(DAT_) = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "update_data_080042f0",
                "param_1": "data",
                "*(uint *)(DAT_08004308 + 0x14)": "*data_ptr",
                "FUN_08009094": "call_function"
            },
            "code": "void update_data_080042f0(uint data){\n    uint* data_ptr = (uint*)(DAT_08004308 + 0x14);\n    if ((*(uint *)(DAT_08004308 + 0x14) & data) != 0) {\n        *(uint *)(DAT_08004308 + 0x14) = data;\n        call_function();\n    }\n    return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "data_index",
                "param_2": "data_pointer",
                "param_3": "data_value",
                "cVar1": "current_char",
                "puVar2": "data_pointer_1",
                "iVar3": "function_result",
                "uVar4": "undefined_var",
                "uVar5": "updated_data_value"
            },
            "code": "uint process_data_080027f0(int data_index, undefined4 data_pointer, uint data_value) {\\n  char current_char;\\n  undefined *data_pointer_1;\\n  int function_result;\\n  undefined undefined_var;\\n  uint updated_data_value;\\n  \\n  data_pointer_1 = PTR_DAT_08002884;\\n  if (*PTR_DAT_08002878 == \"\\0\") {\\n    function_result = FUN_08007ede(data_index + 0x14, data_pointer, data_value & 0xffff);\\n    if (function_result != 0) {\\n      return 0;\\n    }\\n    return data_value;\\n  }\\n  updated_data_value = (byte)*PTR_DAT_0800287c + data_value;\\n  if ((byte)*PTR_DAT_08002880 < updated_data_value) {\\n    if (updated_data_value < 0x20) {\\n      updated_data_value = 0x20;\\n    }\\n    function_result = FUN_08009908(*(undefined4 *)PTR_DAT_08002884, updated_data_value);\\n    *(int *)data_pointer_1 = function_result;\\n    if (function_result == 0) {\\n      undefined_var = 0;\\n    }\\n    else {\\n      undefined_var = (undefined)updated_data_value;\\n    }\\n    *PTR_DAT_08002880 = undefined_var;\\n  }\\n  data_pointer_1 = PTR_DAT_08002888;\\n  if (*(int *)PTR_DAT_08002884 != 0) {\\n    FUN_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data_pointer, data_value);\\n    current_char = *data_pointer_1 + (char)data_value;\\n    *data_pointer_1 = current_char;\\n    *PTR_DAT_0800287c = current_char;\\n    return data_value;\\n  }\\n  *(undefined4 *)(data_index + 4) = 1;\\n  return 0;\\n}",
            "called": [
                "FUN_08007ede",
                "FUN_080091b0",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param"
            },
            "code": "void set_param_to_zero_0800314e(undefined4 *param){\n  *param = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "process_data_080076e0",
                "param_1": "data_array",
                "char cVar1": "char result",
                "iVar2": "int status",
                "FUN_08007544": "get_data",
                "FUN_08003fb0": "display_data",
                "FUN_08005df4": "check_data",
                "FUN_080062f4": "process_subdata"
            },
            "code": "void process_data_080076e0(undefined4 *data_array)\n{\n  char result;\n  int status;\n  data_array[0x13] = 0;\n  result = get_data(*data_array);\n  display_data((int)result);\n  status = check_data(data_array + 1);\n  if (status == 0) {\n    process_subdata(data_array + 1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007544",
                "FUN_080062f4",
                "FUN_08003fb0",
                "FUN_08005df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "process_data_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "call_function_with_offset_08002f14",
                "param_1": "offset",
                "FUN_080032a2": "call_function",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void call_function_with_offset_08002f14(int offset)\n{\n  call_function(offset + 0x40);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "call_function_with_offset_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "execute_application_080036a2",
                "FUN_080072fa": "initialize_application"
            },
            "code": "void execute_application_080036a2(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "execute_application_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "set_data_080038e4",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "index",
                "iVar3": "temp",
                "local_c": "i"
            },
            "code": "int set_data_080038e4(int *data, uint *values){\n  int result = 0;\n  uint value = values[0];\n  if (*(char *)(data + 9) == 1){\n    result = 2;\n  }\n  else{\n    *(char *)(data + 9) = 0;\n    uint index = values[1];\n    if (index < 7){\n      index = index * 5 - 5;\n      *(uint *)(*data + 0x34) = values[0] << (index & 0xff) | *(uint *)(*data + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd){\n      index = index * 5 - 0x23;\n      *(uint *)(*data + 0x30) = values[0] << (index & 0xff) | *(uint *)(*data + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else{\n      index = index * 5 - 0x41;\n      *(uint *)(*data + 0x2c) = values[0] << (index & 0xff) | *(uint *)(*data + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = values[0];\n    if (index < 10){\n      *(uint *)(*data + 0x10) = values[2] << ((index * 3) & 0xff) | *(uint *)(*data + 0x10) & ~(7 << ((index * 3) & 0xff));\n    }\n    else{\n      index = index * 3 - 0x1e;\n      *(uint *)(*data + 0xc) = values[2] << (index & 0xff) | *(uint *)(*data + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (values[0] - 0x10 < 2){\n      int temp = *data;\n      if (temp == DAT_08003a10){\n        if ((*(uint *)(temp + 8) & 0x800000) == 0){\n          *(uint *)(temp + 8) |= 0x800000;\n          if (values[0] == 0x10){\n            for (int i = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*(uint *)PTR_DAT_08003a14 >> 0x32) * 10; i != 0; i = i + -1){}\n            result = 0;\n          }\n          else{\n            result = 0;\n          }\n        }\n        else{\n          result = 0;\n        }\n      }\n      else{\n        data[10] |= 0x20;\n        result = 1;\n      }\n    }\n    else{\n      result = 0;\n    }\n    *(char *)(data + 9) = 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_data_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_params_08005d48",
                "param_1": "param_index",
                "param_2": "param_values",
                "uVar1": "new_val1",
                "uVar2": "new_val2",
                "uVar3": "new_val3",
                "DAT_08005da8": "PTR_DAT_08005da8",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "*(uint *)(param_1 + 0x20)": "*(uint *)(param_index + 0x20)",
                "*(uint *)(param_1 + 4)": "*(uint *)(param_index + 4)",
                "*(uint *)(param_1 + 0x1c)": "*(uint *)(param_index + 0x1c)",
                "*(uint *)(param_1 + 0x3c)": "*(uint *)(param_index + 0x3c)"
            },
            "code": "void update_params_08005d48(int param_index, uint *param_values)\n{\n    uint mask1 = 0xfffffeff;\n    uint mask2 = 0xfffffdff;\n    uint mask3 = 0xfffffbff;\n    uint new_val1 = (*(uint *)(param_index + 0x20) & mask1) | (param_values[2] << 8);\n    uint new_val2 = *(uint *)(param_index + 4);\n    uint new_val3 = *(uint *)(param_index + 0x1c) & 0xffffff8c | param_values[0];\n    uint new_val4 = param_values[1];\n\n    if (param_index == DAT_08005da8)\n    {\n        new_val1 = (new_val1 & mask3) | (param_values[3] << 8);\n        new_val2 = (new_val2 & 0xffffcfff) | (param_values[5] << 4) | (param_values[6] << 4);\n    }\n\n    *(uint *)(param_index + 0x20) = new_val1;\n    *(uint *)(param_index + 4) = new_val2;\n    *(uint *)(param_index + 0x1c) = new_val3;\n    *(uint *)(param_index + 0x3c) = new_val4;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_params_08005d48"
        }
    },
    "used_tokens": 286125,
    "layers": [
        [
            "FUN_0800a18c",
            "FUN_08002968",
            "FUN_0800542a",
            "FUN_08009cdc",
            "FUN_08002a58",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_080004d4",
            "FUN_08009124",
            "FUN_08003a1c",
            "FUN_08005cb4",
            "FUN_08007744",
            "FUN_08006538",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_0800325a",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800870c",
            "FUN_08008840",
            "FUN_08008600",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08007f0e",
            "FUN_08004004",
            "FUN_08003158",
            "FUN_080090c2",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_080042f0",
            "FUN_080027f0",
            "FUN_0800314e",
            "FUN_080076e0",
            "FUN_08002f14",
            "FUN_080036a2",
            "FUN_080038e4",
            "FUN_08005d48"
        ]
    ],
    "locked_functions": []
}