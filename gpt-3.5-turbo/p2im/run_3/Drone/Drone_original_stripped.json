{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "FUNC_080050fc"
            },
            "code": "\nint FUNC_080050fc(undefined4 *param_1,int *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  void *pvVar5;\n  undefined4 *puVar6;\n  int *piVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  undefined4 *unaff_r9;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = _malloc_r(param_1,0x40);\n    *param_2 = iVar3;\n    param_2[4] = iVar3;\n    if (iVar3 == 0) {\n      *param_1 = 0xc;\n      return -1;\n    }\n    param_2[5] = 0x40;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar8 = param_3;\nLAB_08005146:\n  pbVar9 = pbVar8;\n  if (*pbVar9 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  pbVar8 = pbVar9 + 1;\n  if (*pbVar9 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  iVar3 = (int)pbVar9 - (int)param_3;\n  if (iVar3 != 0) {\n    iVar4 = __ssputs_r(param_1,param_2,param_3,iVar3);\n    if (iVar4 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar3;\n  }\n  if (*pbVar9 == 0) goto LAB_080052ac;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar8 = pbVar9 + 1;\n  while( true ) {\n    pvVar5 = memchr(PTR_DAT_080052d0,(uint)*pbVar8,5);\n    puVar2 = PTR_DAT_080052d4;\n    param_3 = pbVar8 + 1;\n    if (pvVar5 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar5 - (int)PTR_DAT_080052d0 & 0xffU) | local_88;\n    pbVar8 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar8 == 0x2a) {\n    piVar7 = local_8c + 1;\n    iVar3 = *local_8c;\n    local_8c = piVar7;\n    if (-1 < iVar3) goto LAB_080051ee;\n    local_7c = -iVar3;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar3 = local_7c;\n    param_3 = pbVar8;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080051ee:\n      local_7c = iVar3;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar7 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar7;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar3 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar3 = iVar3 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar3;\n      }\n    }\n  }\n  pvVar5 = memchr(PTR_DAT_080052d4,(uint)*param_3,3);\n  if (pvVar5 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar5 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar5 = memchr(PTR_s_efgEFG_080052d8,(uint)local_70,6);\n  if (pvVar5 == (void *)0x0) {\n    puVar6 = (undefined4 *)_printf_i(param_1,&local_88,param_2,DAT_080052e0,&local_8c);\n  }\n  else {\n    puVar6 = param_1;\n    if (DAT_080052dc == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      puVar6 = unaff_r9;\n      goto LAB_08005260;\n    }\n  }\n  if (puVar6 == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  local_74 = local_74 + (int)puVar6;\n  pbVar8 = param_3;\n  unaff_r9 = puVar6;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "__ssputs_r",
                "memchr",
                "_printf_i",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080050fc",
            "calling": [
                "siprintf"
            ],
            "imported": false,
            "current_name": "FUNC_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "updateDeltaTime_08003320",
                "_deltat": "deltaTime",
                "in_r0": "value"
            },
            "code": "void updateDeltaTime_08003320(float deltaTime) { \n  undefined4 value; \n  *(undefined4 *)PTR_deltat_08003328 = value; \n  return; \n }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "updateDeltaTime_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_attitude_data_08004410",
                "in_r1": "unused_variable",
                "local_10": "attitude_data",
                "local_c": "combined_data"
            },
            "code": "void send_attitude_data_08004410(void)\n{\n  uint16_t attitude_data = *(uint16_t *)PTR_msp_txf_attitude_08004430;\n  uint32_t combined_data = (uint32_t)(attitude_data << 16) | (uint32_t)(*(uint16_t *)(PTR_msp_txf_attitude_08004430 + 4));\n  MSP_SendFrame('l', (uint8_t *)&combined_data, 6);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_attitude_data_08004410"
        },
        "FUN_08003ef2": {
            "renaming": {
                "FUN_08003ef2": "initialize_circular_buffer_08003ef2",
                "cb": "circular_buffer",
                "iVar1": "index"
            },
            "code": "void initialize_circular_buffer_08003ef2(CircularBuffer *cb) {\n  int index = 0;\n  cb->head = 0;\n  cb->tail = 0;\n  cb->size = 0;\n  do {\n    cb->buffer[index] = '\\0';\n    index++;\n  } while (index != 2048);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ef2",
            "calling": [
                "serialFlush"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08003ef2"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "configure_gpio_pins_08001264",
                "GPIOx": "gpio_port",
                "GPIO_Init": "gpio_init",
                "puVar1": "register_values",
                "uVar2": "alternate_function_1",
                "uVar3": "alternate_function_2",
                "uVar4": "pin_speed",
                "uVar5": "pin_mask",
                "uVar6": "pin_mode",
                "iVar7": "alternate_function_index",
                "uVar8": "i",
                "uVar9": "register_mask",
                "uVar10": "alternate_function_offset",
                "unaff_r10": "register_pointer",
                "tmpreg": "tmp_register",
                "DAT_08001404": "register_values",
                "DAT_08001408": "exti_values",
                "DAT_08001410": "GPIO_MODE_ANALOG",
                "DAT_08001414": "GPIO_MODE_IT_RISING_FALLING",
                "DAT_08001418": "GPIO_MODE_EVT_RISING_FALLING",
                "DAT_0800141c": "GPIO_MODE_EVT_RISING",
                "DAT_08001420": "GPIO_MODE_EVT_FALLING"
            },
            "code": "void configure_gpio_pins_08001264(GPIO_TypeDef *gpio_port, GPIO_InitTypeDef *gpio_init)\n{\n    uint32_t pin_mask = 0;\n    uint32_t pin_speed = 0;\n    uint32_t pull_config = 0;\n    uint32_t pin_mode = 0;\n    uint32_t crl_or_crh = 0;\n    uint32_t cr_offset = 0;\n    uint32_t bit_shift = 0;\n    uint32_t register_value = 0;\n    uint32_t alternate_function = 0;\n    uint32_t alternate_function_index = 0;\n    uint32_t alternate_function_offset = 0;\n    uint32_t register_index = 0;\n    uint32_t register_offset = 0;\n    uint32_t register_mask = 0;\n    \n    for (uint32_t i = 0; i < 16; i++) {\n        pin_mask = 1 << i;\n        if (pin_mask & gpio_init->Pin) {\n            pin_mode = gpio_init->Mode;\n            if (pin_mode == GPIO_MODE_AF_PP || pin_mode == GPIO_MODE_AF_OD) {\n                alternate_function = gpio_init->Alternate;\n                alternate_function_index = i % 8;\n                alternate_function_offset = alternate_function_index * 4;\n                register_index = i / 8;\n                register_offset = register_index * 4;\n                register_mask = 0xF << alternate_function_offset;\n                register_value = gpio_port->AFR[register_index];\n                register_value &= ~register_mask;\n                register_value |= alternate_function << alternate_function_offset;\n                gpio_port->AFR[register_index] = register_value;\n            }\n            else {\n                if (pin_mode == GPIO_MODE_INPUT) {\n                    pull_config = gpio_init->Pull;\n                    if (pull_config == GPIO_NOPULL) {\n                        pull_config = GPIO_PULLUP;\n                    }\n                    else if (pull_config == GPIO_PULLDOWN) {\n                        gpio_port->BSRR = pin_mask << 16;\n                    }\n                    crl_or_crh = gpio_port->CRL;\n                    cr_offset = i * 4;\n                    bit_shift = cr_offset;\n                }\n                else {\n                    if (pin_mode == GPIO_MODE_OUTPUT_PP || pin_mode == GPIO_MODE_OUTPUT_OD) {\n                        pin_speed = gpio_init->Speed;\n                        if (pin_speed == GPIO_SPEED_FREQ_HIGH) {\n                            pin_speed = GPIO_SPEED_FREQ_VERY_HIGH;\n                        }\n                        crl_or_crh = gpio_port->CRL;\n                        cr_offset = i * 4;\n                        bit_shift = cr_offset;\n                    }\n                    else {\n                        if (pin_mode == GPIO_MODE_IT_RISING || pin_mode == GPIO_MODE_IT_FALLING || pin_mode == DAT_0800141c || pin_mode == DAT_08001420) {\n                            register_index = i / 4;\n                            register_offset = register_index * 4;\n                            bit_shift = (i % 4) * 4;\n                            register_mask = 0xF << bit_shift;\n                            register_value = SYSCFG->EXTICR[register_index];\n                            register_value &= ~register_mask;\n                            register_value |= (gpio_port == GPIOA ? 0 : gpio_port == GPIOB ? 1 : gpio_port == GPIOC ? 2 : 3) << bit_shift;\n                            SYSCFG->EXTICR[register_index] = register_value;\n                            if (pin_mode == GPIO_MODE_IT_RISING || pin_mode == DAT_0800141c) {\n                                EXTI->RTSR |= pin_mask;\n                            }\n                            else {\n                                EXTI->FTSR |= pin_mask;\n                            }\n                        }\n                    }\n                }\n                if (pin_mode != GPIO_MODE_AF_PP && pin_mode != GPIO_MODE_AF_OD) {\n                    if (i < 8) {\n                        crl_or_crh = gpio_port->CRL;\n                    }\n                    else {\n                        crl_or_crh = gpio_port->CRH;\n                        cr_offset = (i - 8) * 4;\n                        bit_shift = cr_offset;\n                    }\n                    crl_or_crh &= ~(0xF << bit_shift);\n                    crl_or_crh |= (pin_mode & 0xF) << bit_shift;\n                    gpio_port->CRL = crl_or_crh;\n                    if (pull_config == GPIO_PULLUP) {\n                        gpio_port->BSRR = pin_mask;\n                    }\n                    else if (pull_config == GPIO_PULLDOWN) {\n                        gpio_port->BRR = pin_mask;\n                    }\n                }\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "HAL_UART_MspInit",
                "Peripherals_Init",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "imported": false,
            "current_name": "configure_gpio_pins_08001264"
        },
        "FUN_080058fc": {
            "renaming": {
                "FUN_080058fc": "calculate_result_080058fc",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "param_5": "e",
                "uVar1": "div_result",
                "extraout_r1": "extraout_r1",
                "extraout_r1_00": "fabs_result",
                "unaff_r4": "unaff_r4",
                "iVar2": "fabs_result",
                "uVar3": "bitwise_or_result",
                "uVar4": "abs_b",
                "uVar6": "abs_d",
                "iVar5": "diff",
                "uVar7": "result",
                "uVar8": "sub_result"
            },
            "code": "undefined8 calculate_result_080058fc(uint a, uint b, uint c, uint d, double e) {\n  uint abs_c = c & 0x7fffffff;\n  uint abs_a = a & 0x7fffffff;\n  if (DAT_08006220 < (abs_c | (-c | c) >> 0x1f) || DAT_08006220 < (abs_a | (-a | a) >> 0x1f)) {\n    return __aeabi_dadd(a, b);\n  }\n  if ((d + 0xc0100000 | c) == 0) {\n    atan(e);\n    return CONCAT44(extraout_r1, a);\n  }\n  uint uVar3 = (int)d >> 0x1e & 2U | b >> 0x1f;\n  if ((a | abs_a) == 0) {\n    if (uVar3 == 2) {\n      return CONCAT44(DAT_080061fc, DAT_080061f8);\n    }\n    if (uVar3 != 3) {\n      return CONCAT44(b, a);\n    }\n  }\n  else {\n    if ((c | abs_c) != 0) {\n      if (abs_c == DAT_08006220) {\n        if (abs_a == abs_c) {\n          if (uVar3 == 2) {\n            return CONCAT44(DAT_080061ec, DAT_080061e8);\n          }\n          if (uVar3 == 3) {\n            return CONCAT44(DAT_080061f4, DAT_080061f0);\n          }\n          if (uVar3 != 1) {\n            return CONCAT44(DAT_0800621c, DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4, DAT_080061e0);\n        }\n        if (uVar3 == 2) {\n          return CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        if (uVar3 == 3) {\n          return CONCAT44(DAT_08006204, DAT_08006200);\n        }\n        if (uVar3 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (abs_a != DAT_08006220) {\n        int diff = (int)(abs_a - abs_c) >> 0x14;\n        undefined4 div_result = DAT_08006210;\n        int fabs_result = DAT_08006214;\n        if (diff < 0x3d) {\n          if (((int)d < 0) && (diff + 0x3c < 0 != SCARRY4(diff, 0x3c))) {\n            div_result = 0;\n            fabs_result = 0;\n          }\n          else {\n            div_result = __divdf3(a, b);\n            fabs((double)CONCAT44(unaff_r4, d));\n            atan((double)CONCAT44(unaff_r4, d));\n            fabs_result = extraout_r1_00;\n          }\n        }\n        if (uVar3 != 1) {\n          if (uVar3 == 2) {\n            undefined8 sub_result = __subdf3(div_result, fabs_result, DAT_08006208, DAT_0800620c);\n            return CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          else {\n            if (uVar3 == 0) {\n              return CONCAT44(fabs_result, div_result);\n            }\n            undefined8 sub_result = __subdf3(div_result, fabs_result, DAT_08006208, DAT_0800620c);\n            return CONCAT44(sub_result, CONCAT44(DAT_080061fc, DAT_080061f8));\n          }\n        }\n        return CONCAT44(fabs_result + -0x80000000, div_result);\n      }\n    }\n    undefined8 result = CONCAT44(DAT_08006214, DAT_08006210);\n    if ((int)b < 0) {\n      result = CONCAT44(DAT_080061dc, DAT_080061d8);\n    }\n    return result;\n  }\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_080058fc"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "__x": "input",
                "in_r0": "significand_1",
                "in_r1": "exponent_bits_1",
                "exponent_bits_2": "exponent_bits_2",
                "sign_bit": "sign_bit",
                "exponent": "exponent",
                "result": "result"
            },
            "code": "double calculate_080070b0(double input) {\n  int sign_bit;\n  uint exponent_bits_1;\n  uint exponent_bits_2;\n  uint exponent;\n  uint significand_1;\n  uint significand_2;\n  double result;\n  \n  exponent_bits_1 = (in_r1 << 1) >> 0x15;\n  exponent = exponent_bits_1 - 0x3ff;\n  sign_bit = (int)in_r1 >> 0x1f;\n  \n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if ((in_r1 & 0x7fffffff | in_r0) == 0) {\n        return input;\n      }\n      significand_1 = in_r1 & 0xfffff | in_r0;\n      result = __aeabi_dadd(in_r0,(-significand_1 | significand_1) >> 0xc & 0x80000 | in_r1 & 0xfffe0000,*(undefined4 *)(PTR_TWO52_080071b8 + sign_bit * -8),*(undefined4 *)((int)(PTR_TWO52_080071b8 + sign_bit * -8) + 4));\n      result = (double)__subdf3((int)result,(int)((ulonglong)result >> 0x20),*(undefined4 *)(PTR_TWO52_080071b8 + sign_bit * -8),*(undefined4 *)((int)(PTR_TWO52_080071b8 + sign_bit * -8) + 4));\n      return result;\n    }\n    exponent_bits_2 = DAT_080071bc >> (exponent & 0xff);\n    if ((in_r1 & exponent_bits_2 | in_r0) == 0) {\n      return input;\n    }\n    exponent_bits_2 = exponent_bits_2 >> 1;\n    in_r0 = in_r1 & exponent_bits_2 | in_r0;\n    if (in_r0 != 0) {\n      if (exponent == 0x13) {\n        in_r0 = 0x80000000;\n      }\n      else {\n        in_r0 = 0;\n      }\n      in_r1 = 0x40000 >> (exponent & 0xff) | in_r1 & ~exponent_bits_2;\n    }\n  }\n  else {\n    if (0x33 < (int)exponent) {\n      if (exponent != 0x400) {\n        return input;\n      }\n      result = (double)__aeabi_dadd();\n      return result;\n    }\n    exponent_bits_1 = exponent_bits_1 - 0x413;\n    exponent = 0xffffffff >> (exponent_bits_1 & 0xff);\n    if ((in_r0 & exponent) == 0) {\n      return input;\n    }\n    exponent = exponent >> 1;\n    if ((in_r0 & exponent) != 0) {\n      in_r0 = 0x40000000 >> (exponent_bits_1 & 0xff) | in_r0 & ~exponent;\n    }\n  }\n  result = __aeabi_dadd(in_r0,in_r1,*(undefined4 *)(PTR_TWO52_080071b8 + sign_bit * -8),*(undefined4 *)((int)(PTR_TWO52_080071b8 + sign_bit * -8) + 4));\n  result = (double)__subdf3((int)result,(int)((ulonglong)result >> 0x20),*(undefined4 *)(PTR_TWO52_080071b8 + sign_bit * -8),*(undefined4 *)((int)(PTR_TWO52_080071b8 + sign_bit * -8) + 4));\n  return result;\n}",
            "called": [
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "check_if_null_terminated_08001028",
                "in_CY": "current_char"
            },
            "code": "bool check_if_null_terminated_08001028(char input_string[]) {\n  char current_char;\n  __aeabi_cfcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "PID_Update",
                "AHRS_GetYaw",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "check_if_null_terminated_08001028"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "extract_bits_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp1",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "unknown_value",
                "bVar4": "is_zero"
            },
            "code": "ulonglong extract_bits_080006ac(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool is_zero;\n  \n  temp1 = input4 >> 0x14;\n  if (input2 != input3 && temp1 != input3) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input2 == 0) {\n      temp3 = input2 & 0x80000000;\n      do {\n        temp2 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp2 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp3;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp3 = input2;\n  if (((!is_zero) && ((input2 != input3 || ((input1 | input2 << 0xc) == 0)))) && ((temp1 != input3 || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "extract_bits_080006ac"
        },
        "FUN_0800125a": {
            "renaming": {
                "FUN_0800125a": "run_systick_callback_0800125a"
            },
            "code": "void run_systick_callback_0800125a(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800125a",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "run_systick_callback_0800125a"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "i2c_write_08001828",
                "*hi2c": "*handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_address_size",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "*pIVar4": "*instance",
                "uVar5": "cr1",
                "I2C_RequestMemoryWrite": "I2C_RequestMemoryWrite",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_I2C_STATE_BUSY_TX": "HAL_I2C_STATE_BUSY_TX",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEM",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_OK": "HAL_OK",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "I2C_WaitOnTXEFlagUntilTimeout": "I2C_WaitOnTXEFlagUntilTimeout"
            },
            "code": "HAL_StatusTypeDef i2c_write_08001828(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_time;\n  uint32_t current_time;\n  I2C_TypeDef *instance;\n  uint16_t data_index = 0;\n  if (handle->State != HAL_I2C_STATE_READY)\n  {\n    return HAL_BUSY;\n  }\n  if (data == NULL || size == 0)\n  {\n    return HAL_ERROR;\n  }\n  start_time = HAL_GetTick();\n  do\n  {\n    instance = handle->Instance;\n    if ((~instance->SR2 & 2) != 0)\n    {\n      if (handle->Lock == HAL_LOCKED)\n      {\n        return HAL_BUSY;\n      }\n      uint16_t cr1 = instance->CR1;\n      handle->Lock = HAL_LOCKED;\n      instance->CR1 = cr1 & 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX;\n      handle->Mode = HAL_I2C_MODE_MEM;\n      handle->ErrorCode = 0;\n      status = I2C_RequestMemoryWrite(handle, dev_address, mem_address, mem_address_size, timeout);\n      if (status != HAL_OK)\n      {\n        handle->Lock = HAL_UNLOCKED;\n        if (handle->ErrorCode == 4)\n        {\n          return HAL_ERROR;\n        }\n        return HAL_TIMEOUT;\n      }\n      else\n      {\n        break;\n      }\n    }\n    current_time = HAL_GetTick();\n  } while (current_time - start_time < 10000);\n  handle->Lock = HAL_UNLOCKED;\n  handle->State = HAL_I2C_STATE_READY;\n  return HAL_BUSY;\n  while (size != 0)\n  {\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status != HAL_OK)\n    {\n      goto end;\n    }\n    instance = handle->Instance;\n    instance->DR = (uint16_t)data[data_index];\n    if ((int)(instance->SR1 << 29) < 0)\n    {\n      if ((uint16_t)(size - 1) == 0)\n      {\n        break;\n      }\n      size -= 2;\n      instance->DR = (uint16_t)data[data_index + 1];\n      data_index += 2;\n    }\n    else\n    {\n      data_index++;\n      size--;\n    }\n  }\n  status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n  if (status == HAL_OK)\n  {\n    handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n    handle->Lock = HAL_UNLOCKED;\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Mode = HAL_I2C_MODE_NONE;\n    return HAL_OK;\n  }\nend:\n  if (handle->ErrorCode == 4)\n  {\n    handle->Instance->CR1 = handle->Instance->CR1 | 0x200;\n    return HAL_ERROR;\n  }\n  return HAL_TIMEOUT;\n}",
            "called": [
                "I2C_RequestMemoryWrite",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "I2C_WriteByte"
            ],
            "imported": false,
            "current_name": "i2c_write_08001828"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "FUNC_0800016c"
            },
            "code": "\nulonglong FUNC_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800016c",
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "__ieee754_sqrt",
                "__aeabi_drsub",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "FUNC_08001b58"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nHAL_StatusTypeDef FUNC_08001b58(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1f) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uVar6 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar3 = RCC_OscInitStruct->HSEState;\n      if (uVar3 == 0x10000) {\nLAB_08001c1e:\n        uVar6 = *puVar1 | 0x10000;\n      }\n      else {\n        if (uVar3 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *puVar1 = *puVar1 & 0xfffbffff;\n          uVar3 = HAL_GetTick();\n          while (uVar6 = count_leading_zeroes(0x4000),\n                (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            uVar4 = HAL_GetTick();\n            if (100 < uVar4 - uVar3) {\n              return HAL_TIMEOUT;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (uVar3 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uVar6 = *puVar1 & 0xfffbffff;\n      }\n      *puVar1 = uVar6;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x4000), -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f))\n      {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1e) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uVar6 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uVar6 & 0x1f)) << 0x1f) < 0) &&\n         (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSIState == 0) {\n        iVar5 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n        uVar3 = HAL_GetTick();\n        while (uVar6 = count_leading_zeroes(0x40000000),\n              (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n          uVar4 = HAL_GetTick();\n          if (2 < uVar4 - uVar3) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    uVar6 = count_leading_zeroes(0x1f000000);\n    *puVar1 = RCC_OscInitStruct->HSICalibrationValue << (uVar6 & 0xff) | *puVar1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  puVar1 = DAT_08001e70;\n  if ((int)(RCC_OscInitStruct->OscillatorType << 0x1c) < 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 0;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      iVar5 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + iVar5 * 4) = 1;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            -1 < (int)((puVar1[9] >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  puVar2 = DAT_08001e78;\n  puVar1 = DAT_08001e70;\n  if (-1 < (int)(RCC_OscInitStruct->OscillatorType << 0x1d)) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *puVar2 = *puVar2 | 0x100;\n  uVar3 = HAL_GetTick();\n  while (-1 < (int)(*puVar2 << 0x17)) {\n    uVar4 = HAL_GetTick();\n    if (100 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\n  uVar3 = RCC_OscInitStruct->LSEState;\n  if (uVar3 == 1) {\nLAB_08001e1a:\n    uVar6 = puVar1[8] | 1;\n  }\n  else {\n    if (uVar3 == 0) {\n      puVar1[8] = puVar1[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n      uVar3 = HAL_GetTick();\n      while (uVar6 = count_leading_zeroes(0x40000000),\n            (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar3) {\n          return HAL_TIMEOUT;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (uVar3 == 5) {\n      puVar1[8] = puVar1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    puVar1[8] = puVar1[8] & 0xfffffffe;\n    uVar6 = puVar1[8] & 0xfffffffb;\n  }\n  puVar1[8] = uVar6;\n  uVar3 = HAL_GetTick();\n  while (uVar6 = count_leading_zeroes(0x40000000), -1 < (int)((puVar1[8] >> (uVar6 & 0x1f)) << 0x1f)\n        ) {\n    uVar4 = HAL_GetTick();\n    if (5000 < uVar4 - uVar3) {\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001bc2:\n  puVar1 = DAT_08002004;\n  uVar3 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar3 == 0) {\n    return HAL_OK;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (uVar3 != 2) {\n      iVar5 = count_leading_zeroes(0x80);\n      *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n      uVar3 = HAL_GetTick();\n      do {\n        uVar6 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n          return HAL_OK;\n        }\n        uVar4 = HAL_GetTick();\n      } while (uVar4 - uVar3 < 3);\n      return HAL_TIMEOUT;\n    }\n    iVar5 = count_leading_zeroes(0x80);\n    *(undefined4 *)(iVar5 * 4 + 0x42420000) = 0;\n    uVar3 = HAL_GetTick();\n    do {\n      uVar6 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f)) {\n        uVar6 = (RCC_OscInitStruct->PLL).PLLSource;\n        if (uVar6 == 0x10000) {\n          puVar1[1] = puVar1[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        puVar1[1] = uVar6 | (RCC_OscInitStruct->PLL).PLLMUL | puVar1[1] & 0xffc2ffff;\n        iVar5 = count_leading_zeroes(0x80);\n        *(undefined4 *)(iVar5 * 4 + 0x42420000) = 1;\n        uVar3 = HAL_GetTick();\n        do {\n          uVar6 = count_leading_zeroes(0x40);\n          if ((int)((*puVar1 >> (uVar6 & 0x1f)) << 0x1f) < 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar3 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar3 < 3);\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_Delay",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001b58",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08001b58"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "receive_data_from_UART_0800290c",
                "*huart": "*uart",
                "HAL_StatusTypeDef": "HAL_Status",
                "uVar1": "parity",
                "bVar2": "data_byte",
                "pUVar3": "usart",
                "uVar4": "word_length",
                "puVar5": "rx_buffer_ptr",
                "puVar6": "next_rx_buffer_ptr",
                "bVar7": "transfer_complete"
            },
            "code": "HAL_StatusTypeDef receive_data_from_UART_0800290c(UART_HandleTypeDef *uart)\n{\n  uint32_t parity;\n  byte data_byte;\n  USART_TypeDef *usart;\n  uint16_t word_length;\n  ushort *rx_buffer_ptr;\n  ushort *next_rx_buffer_ptr;\n  bool transfer_complete;\n  \n  if ((uart->State & HAL_UART_STATE_BUSY_RX) != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  parity = (uart->Init).Parity;\n  usart = uart->Instance;\n  rx_buffer_ptr = (ushort *)uart->pRxBuffPtr;\n  word_length = (uart->Init).WordLength;\n  if (word_length == UART_WORDLENGTH_9B) {\n    if (parity == UART_PARITY_NONE) {\n      next_rx_buffer_ptr = rx_buffer_ptr + 1;\n      *rx_buffer_ptr = (ushort)((usart->DR << 0x17) >> 0x17);\n    }\n    else {\n      next_rx_buffer_ptr = (ushort *)((int)rx_buffer_ptr + 1);\n      *rx_buffer_ptr = (ushort)usart->DR & 0xff;\n    }\n    uart->pRxBuffPtr = (uint8_t *)next_rx_buffer_ptr;\n  }\n  else {\n    if (parity == UART_PARITY_NONE) {\n      data_byte = (byte)usart->DR;\n      uart->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n    }\n    else {\n      parity = usart->DR;\n      uart->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n      data_byte = (byte)parity & 0x7f;\n    }\n    *(byte *)rx_buffer_ptr = data_byte;\n  }\n  transfer_complete = uart->RxXferCount - 1 == 0;\n  uart->RxXferCount = uart->RxXferCount - 1;\n  if (transfer_complete) {\n    usart->CR1 = usart->CR1 & 0xffffffdf;\n    transfer_complete = uart->State != HAL_UART_STATE_READY;\n    if (transfer_complete) {\n      usart->CR1 = usart->CR1 & 0xfffffeff;\n      usart->CR3 = usart->CR3 & 0xfffffffe;\n      uart->State = HAL_UART_STATE_READY;\n      HAL_UART_RxCpltCallback(uart);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_from_UART_0800290c"
        },
        "FUN_080028a6": {
            "renaming": {
                "FUN_080028a6": "receive_data_from_uart_080028a6",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "HVar1": "uart_state",
                "uVar2": "cr1_reg",
                "pUVar3": "uart_instance"
            },
            "code": "HAL_StatusTypeDef receive_data_from_uart_080028a6(UART_HandleTypeDef *uart_handle,uint8_t *data,uint16_t size)\n{\n  HAL_UART_StateTypeDef uart_state;\n  uint cr1_reg;\n  USART_TypeDef *uart_instance;\n  \n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_TX)) {\n    if ((data == NULL) || (size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->RxXferSize = size;\n      uart_handle->RxXferCount = size;\n      uart_handle->Lock = HAL_UNLOCKED;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_TX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_RX;\n      }\n      uart_instance = uart_handle->Instance;\n      uart_handle->State = uart_state;\n      cr1_reg = uart_instance->CR1;\n      uart_handle->pRxBuffPtr = data;\n      uart_instance->CR1 = cr1_reg | 0x100;\n      uart_instance->CR3 = uart_instance->CR3 | 1;\n      uart_instance->CR1 = uart_instance->CR1 | 0x20;\n      return HAL_OK;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028a6",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "serialBegin"
            ],
            "imported": false,
            "current_name": "receive_data_from_uart_080028a6"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "printDataWithChecksum_08004300",
                "code": "checksum_seed",
                "data": "data_array",
                "data_length": "data_array_length",
                "ch": "checksum",
                "pbVar1": "current_byte"
            },
            "code": "void printDataWithChecksum_08004300(uint8_t code, uint8_t *data, uint16_t data_length) {\n  uint8_t checksum = 0;\n  uint8_t *current_byte;\n  serialPrint(PTR_DAT_08004344);\n  serialWrite((byte)data_length);\n  checksum ^= (byte)data_length ^ code;\n  serialWrite(code);\n  for (current_byte = data; current_byte < data + data_length; current_byte++) {\n    serialWrite(*current_byte);\n    checksum ^= *current_byte;\n  }\n  serialWrite(checksum);\n  return;\n}",
            "called": [
                "serialPrint",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "MSP_SendStatus",
                "MSP_SendPID",
                "MSP_SendAltitude",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "imported": false,
            "current_name": "printDataWithChecksum_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_memory_08005630",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "src_end_ptr",
                "puVar2": "dest_end_ptr"
            },
            "code": "void* copy_memory_08005630(void* destination,void* source,size_t size) {\n  unsigned char* dest_ptr = (unsigned char*)destination - 1;\n  unsigned char* src_ptr = (unsigned char*)source + size;\n  for (; source != src_ptr; source = (void*)((unsigned char*)source + 1)) {\n    dest_ptr++;\n    *dest_ptr = *source;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330\n               (float ax,float ay,float az,float gx,float gy,float gz,float mx,float my,float mz,\n               float *angle)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 in_r2;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_00000000;\n  undefined4 in_stack_00000004;\n  undefined4 in_stack_00000008;\n  undefined4 in_stack_0000000c;\n  undefined4 in_stack_00000010;\n  undefined4 *in_stack_00000014;\n  undefined4 in_stack_ffffff78;\n  float hy;\n  float hx;\n  \n  uVar28 = *(undefined4 *)PTR_q_080035d8;\n  iVar29 = *(int *)(PTR_q_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_q_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_q_080035d8 + 0xc);\n  uVar2 = __aeabi_fmul(ax,mz,mz);\n  uVar3 = __aeabi_fmul(angle);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar3 = __aeabi_fmul(in_r2);\n  __addsf3(uVar2,uVar3);\n  __aeabi_f2d();\n  sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n  uVar2 = __truncdfsf2();\n  iVar4 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = __aeabi_fmul(in_stack_00000008);\n    uVar5 = __aeabi_fmul(in_stack_0000000c);\n    uVar3 = __addsf3(uVar3,uVar5);\n    uVar5 = __aeabi_fmul(in_stack_00000010);\n    __addsf3(uVar3,uVar5);\n    __aeabi_f2d();\n    sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n    uVar3 = __truncdfsf2();\n    iVar4 = __aeabi_fcmpeq(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = __aeabi_f2d();\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000000);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000004);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = __truncdfsf2();\n      iVar4 = __addsf3(uVar28);\n      uVar8 = __addsf3(iVar29);\n      iVar9 = __addsf3(uVar31,uVar31);\n      uVar10 = __addsf3(uVar30,uVar30);\n      uVar11 = __aeabi_fmul(uVar28);\n      uVar12 = __aeabi_fmul(uVar28,iVar29);\n      uVar13 = __aeabi_fmul(uVar28,uVar31);\n      uVar14 = __aeabi_fmul(iVar29);\n      uVar15 = __aeabi_fmul(iVar29,uVar30);\n      uVar16 = __aeabi_fmul(uVar31,uVar31);\n      uVar17 = __aeabi_fmul(uVar30,uVar30);\n      uVar2 = __aeabi_fdiv(0x3f800000,uVar2);\n      uVar3 = __aeabi_fdiv(0x3f800000,uVar3);\n      uVar18 = __aeabi_fmul(in_stack_00000008,uVar3);\n      uVar19 = __aeabi_fmul(in_stack_0000000c,uVar3);\n      uVar3 = __aeabi_fmul(in_stack_00000010,uVar3);\n      iVar20 = __aeabi_fmul(iVar4,uVar18);\n      uVar21 = __aeabi_fmul(iVar4,uVar19);\n      uVar22 = __aeabi_fmul(iVar4,uVar3);\n      uVar23 = __aeabi_fmul(uVar8,uVar18);\n      uVar24 = __aeabi_fmul(uVar11,uVar18);\n      uVar25 = __aeabi_fmul(uVar30,uVar21);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar31,uVar22);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar18);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar19);\n      uVar25 = __aeabi_fmul(uVar25,uVar31);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar30,iVar20);\n      uVar26 = __aeabi_fmul(uVar11,uVar19);\n      uVar25 = __addsf3(uVar25,uVar26);\n      uVar22 = __aeabi_fmul(iVar29,uVar22);\n      uVar22 = __aeabi_fsub(uVar25,uVar22);\n      uVar25 = __aeabi_fmul(uVar31,uVar23);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar19);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(iVar9,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar24 = __aeabi_fmul(uVar24,uVar24);\n      uVar22 = __aeabi_fmul(uVar22,uVar22);\n      __addsf3(uVar24,uVar22);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      iVar27 = __truncdfsf2();\n      uVar22 = __aeabi_fmul(iVar20 + -0x80000000,uVar31);\n      uVar21 = __aeabi_fmul(iVar29,uVar21);\n      uVar21 = __addsf3(uVar22,uVar21);\n      uVar11 = __aeabi_fmul(uVar11,uVar3);\n      uVar11 = __addsf3(uVar21,uVar11);\n      uVar21 = __aeabi_fmul(uVar30,uVar23);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar14,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(iVar9,uVar19);\n      uVar21 = __aeabi_fmul(uVar21,uVar30);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar16,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar17,uVar3);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __addsf3(uVar11,uVar11);\n      uVar22 = __addsf3(uVar15);\n      uVar23 = __aeabi_fmul(uVar31,iVar4);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(mz,uVar2);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(uVar30,iVar9);\n      uVar24 = __addsf3(uVar12);\n      uVar23 = __addsf3(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(angle,uVar2);\n      uVar23 = __aeabi_fsub(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(uVar31,uVar11);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar16);\n      uVar17 = __aeabi_fsub(uVar25,uVar17);\n      uVar17 = __aeabi_fmul(uVar17,iVar27);\n      uVar25 = __aeabi_fsub(uVar15,uVar13);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar17 = __addsf3(uVar17,uVar25);\n      uVar17 = __aeabi_fsub(uVar17,uVar18);\n      uVar18 = __aeabi_fmul(iVar29,uVar11);\n      uVar25 = __aeabi_fmul(iVar29,uVar31);\n      uVar26 = __aeabi_fmul(uVar28,uVar30);\n      uVar25 = __aeabi_fsub(uVar25,uVar26);\n      uVar25 = __aeabi_fmul(uVar25,iVar27);\n      uVar26 = __aeabi_fmul(uVar31,uVar30);\n      uVar12 = __addsf3(uVar26,uVar12);\n      uVar12 = __aeabi_fmul(uVar12,uVar11);\n      uVar12 = __addsf3(uVar25,uVar12);\n      uVar12 = __aeabi_fsub(uVar12,uVar19);\n      uVar19 = __aeabi_fmul(uVar31,iVar27);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar14);\n      uVar25 = __aeabi_fsub(uVar25,uVar16);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar13 = __aeabi_fmul(uVar13,iVar27);\n      uVar13 = __addsf3(uVar25,uVar13);\n      uVar3 = __aeabi_fsub(uVar13,uVar3);\n      uVar13 = __aeabi_fmul(iVar9 + -0x80000000,uVar22);\n      uVar15 = __aeabi_fmul(uVar8,uVar23);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar24,uVar17);\n      uVar13 = __aeabi_fsub(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar30,iVar27 + -0x80000000);\n      uVar15 = __addsf3(uVar15,uVar18);\n      uVar15 = __aeabi_fmul(uVar15,uVar12);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar19,uVar3);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar14 = __addsf3(uVar14);\n      uVar14 = __aeabi_fsub(0x3f800000,uVar14);\n      uVar15 = __addsf3(uVar16);\n      uVar14 = __aeabi_fsub(uVar14,uVar15);\n      uVar2 = __aeabi_fmul(in_r2,uVar2);\n      uVar2 = __aeabi_fsub(uVar14,uVar2);\n      uVar14 = __aeabi_fmul(uVar30,uVar11);\n      uVar11 = __aeabi_fmul(uVar28,uVar11);\n      uVar15 = __aeabi_fmul(uVar10,uVar22);\n      uVar16 = __aeabi_fmul(iVar4,uVar23);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(iVar29,0x40800000);\n      uVar16 = __aeabi_fmul(uVar16,uVar2);\n      uVar15 = __aeabi_fsub(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar17,uVar14);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __addsf3(uVar19,uVar11);\n      uVar16 = __aeabi_fmul(uVar16,uVar12);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar30,iVar27);\n      uVar19 = __aeabi_fmul(iVar29,uVar21);\n      uVar16 = __aeabi_fsub(uVar16,uVar19);\n      uVar16 = __aeabi_fmul(uVar16,uVar3);\n      uVar15 = __addsf3(uVar15,uVar16);\n      iVar20 = __addsf3(iVar27,iVar27);\n      uVar16 = __aeabi_fmul(iVar29,iVar27);\n      uVar19 = __aeabi_fmul(iVar4 + -0x80000000,uVar22);\n      uVar10 = __aeabi_fmul(uVar10,uVar23);\n      uVar10 = __addsf3(uVar19,uVar10);\n      uVar19 = __aeabi_fmul(uVar31,0x40800000);\n      uVar2 = __aeabi_fmul(uVar19,uVar2);\n      uVar2 = __aeabi_fsub(uVar10,uVar2);\n      uVar10 = __aeabi_fmul(uVar31,iVar20 + -0x80000000);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __addsf3(uVar14,uVar16);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27);\n      uVar11 = __aeabi_fmul(uVar31,uVar21);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar3);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar8 = __aeabi_fmul(uVar8,uVar22);\n      uVar10 = __aeabi_fmul(iVar9,uVar23);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar30,iVar20 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar18);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar24);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar3 = __aeabi_fmul(uVar3,uVar16);\n      uVar3 = __addsf3(uVar8,uVar3);\n      uVar8 = __aeabi_fmul(uVar13);\n      uVar10 = __aeabi_fmul(uVar15);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar2,uVar2);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar8,uVar10);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      uVar8 = __truncdfsf2();\n      uVar8 = __aeabi_fdiv(0x3f800000,uVar8);\n      puVar1 = PTR_deltat_08003d84;\n      uVar12 = *(undefined4 *)PTR_beta_08003d80;\n      uVar14 = *(undefined4 *)PTR_beta_08003d80;\n      uVar16 = *(undefined4 *)PTR_beta_08003d80;\n      uVar17 = *(undefined4 *)PTR_beta_08003d80;\n      uVar10 = __aeabi_fmul(iVar29 + -0x80000000,uVar5);\n      uVar11 = __aeabi_fmul(uVar31,uVar6);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar11 = __aeabi_fmul(uVar30,uVar7);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,0x3f000000);\n      uVar11 = __aeabi_fmul(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __aeabi_fmul(uVar11,uVar12);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar13);\n      uVar10 = __addsf3(uVar10,uVar28);\n      uVar11 = __aeabi_fmul(uVar28,uVar5);\n      uVar12 = __aeabi_fmul(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __addsf3(uVar11,uVar12);\n      uVar12 = __aeabi_fmul(uVar30,uVar6);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,0x3f000000);\n      uVar12 = __aeabi_fmul(uVar15,uVar8);\n      uVar12 = __aeabi_fmul(uVar12,uVar14);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,uVar13);\n      uVar11 = __addsf3(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = __aeabi_fmul(uVar28,uVar6);\n      uVar13 = __aeabi_fmul(iVar29,uVar7);\n      uVar12 = __aeabi_fsub(uVar12,uVar13);\n      uVar13 = __aeabi_fmul(uVar30,uVar5);\n      uVar12 = __addsf3(uVar12,uVar13);\n      uVar12 = __aeabi_fmul(uVar12,0x3f000000);\n      uVar2 = __aeabi_fmul(uVar2,uVar8);\n      uVar2 = __aeabi_fmul(uVar2,uVar16);\n      uVar2 = __aeabi_fsub(uVar12,uVar2);\n      uVar2 = __aeabi_fmul(uVar2,uVar14);\n      uVar2 = __addsf3(uVar2,uVar31);\n      uVar28 = __aeabi_fmul(uVar28,uVar7);\n      uVar6 = __aeabi_fmul(iVar29,uVar6);\n      uVar28 = __addsf3(uVar28,uVar6);\n      uVar31 = __aeabi_fmul(uVar31,uVar5);\n      uVar31 = __aeabi_fsub(uVar28,uVar31);\n      uVar31 = __aeabi_fmul(uVar31,0x3f000000);\n      uVar3 = __aeabi_fmul(uVar3,uVar8);\n      uVar3 = __aeabi_fmul(uVar3,uVar17);\n      uVar5 = *(undefined4 *)puVar1;\n      uVar3 = __aeabi_fsub(uVar31,uVar3);\n      uVar3 = __aeabi_fmul(uVar3,uVar5);\n      uVar3 = __addsf3(uVar3,uVar30);\n      uVar30 = __aeabi_fmul(uVar10,uVar10);\n      uVar31 = __aeabi_fmul(uVar11,uVar11);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar2,uVar2);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar30,uVar31);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar30 = __truncdfsf2();\n      uVar30 = __aeabi_fdiv(0x3f800000,uVar30);\n      uVar31 = __aeabi_fmul(uVar10,uVar30);\n      puVar1 = PTR_q_08003d88;\n      *(undefined4 *)PTR_q_08003d88 = uVar31;\n      uVar5 = __aeabi_fmul(uVar11,uVar30);\n      *(undefined4 *)(puVar1 + 4) = uVar5;\n      uVar2 = __aeabi_fmul(uVar2,uVar30);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = __aeabi_fmul(uVar3,uVar30);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = __aeabi_fmul(uVar5,uVar3);\n      uVar2 = __aeabi_fmul(uVar31,uVar2);\n      uVar2 = __aeabi_fsub(uVar3,uVar2);\n      __addsf3(uVar2,uVar2);\n      __aeabi_f2d();\n      asin((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar32 = __muldf3();\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = __truncdfsf2();\n      *in_stack_00000014 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar31,uVar31);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar30,uVar30);\n      __addsf3(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar28,uVar30);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar30,uVar30);\n      uVar3 = __aeabi_fmul(uVar31,uVar31);\n      uVar2 = __addsf3(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      __aeabi_fsub(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar30,uVar28);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "asin",
                "__aeabi_fmul",
                "__divdf3",
                "__addsf3",
                "__muldf3",
                "sqrt",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "atan2",
                "__aeabi_fcmpeq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_double_values_08000980",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value1_to_compare",
                "param_4": "value2_to_compare"
            },
            "code": "void compare_double_values_08000980(double value1, double value2) {\n\t__aeabi_cdcmpeq(value1, value2);\n\treturn;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000980"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "set_timer_08002368",
                "TIMx": "timer",
                "Structure": "config",
                "uVar1": "cr1_value",
                "pTVar2": "repetition_counter",
                "DAT_080023cc": "timer1",
                "CounterMode": "counter_mode",
                "ClockDivision": "clock_division",
                "Period": "period",
                "Prescaler": "prescaler",
                "RepetitionCounter": "repetition_counter_value"
            },
            "code": "void set_timer_08002368(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\n\tuint32_t cr1_value = timer->CR1;\n\tif (timer == DAT_080023cc || timer == timer2 || timer == timer3 || timer == timer4) {\n\t\tcr1_value = cr1_value & 0xffffff8f | config->CounterMode;\n\t\tif (timer == DAT_080023cc || timer == timer2 || timer == timer3) {\n\t\t\tcr1_value = cr1_value & 0xfffffcff | config->ClockDivision;\n\t\t}\n\t}\n\ttimer->CR1 = cr1_value;\n\ttimer->ARR = config->Period;\n\ttimer->PSC = config->Prescaler;\n\tTIM_TypeDef *repetition_counter = DAT_080023cc;\n\tif (timer == DAT_080023cc) {\n\t\trepetition_counter = (TIM_TypeDef *)config->RepetitionCounter;\n\t}\n\tif (timer == DAT_080023cc) {\n\t\ttimer->RCR = (uint32_t)repetition_counter;\n\t}\n\ttimer->EGR = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "set_timer_08002368"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_PLLMUL_factor_08002008",
                "uVar1": "value1",
                "uVar2": "PLLMUL_factor",
                "uVar3": "value2",
                "uVar4": "RCC_CFGR_value",
                "uVar5": "leading_zeroes",
                "uVar6": "prediv_index",
                "puVar7": "PLLMUL_factor_table_ptr",
                "puVar8": "PLLMUL_factor_table_copy_ptr",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "PLLMUL_factor_table",
                "PTR_DAT_0800208c": "PLLMUL_factor_table_src",
                "DAT_08002090": "RCC_BASE_ADDRESS",
                "DAT_08002094": "DEFAULT_PLLMUL_FACTOR",
                "DAT_08002098": "DEFAULT_PRESCALER_FACTOR",
                "count_leading_zeroes": "count_leading_zero_bits"
            },
            "code": "uint32_t calculate_PLLMUL_factor_08002008(void)\n{\n    uint32_t PLLMUL_factor;\n    uint32_t RCC_CFGR_value = *(uint32_t *)(RCC_CFGR_REG_ADDRESS + 4);\n    uint8_t prediv_factor_table[2] = {1, 2};\n    uint8_t PLLMUL_factor_table[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20};\n\n    uint leading_zeroes = count_leading_zeroes(0x3c00);\n\n    if ((RCC_CFGR_value & 0xc) == 8)\n    {\n        uint PLLMUL_index = (RCC_CFGR_value & 0x3c0000) >> leading_zeroes;\n        PLLMUL_factor = PLLMUL_factor_table[PLLMUL_index];\n\n        if ((int)(RCC_CFGR_value << 0xf) < 0)\n        {\n            uint prediv_index = count_leading_zeroes(0x4000);\n            PLLMUL_factor *= prediv_factor_table[(RCC_CFGR_value & 0x20000) >> prediv_index];\n        }\n    }\n    else\n    {\n        PLLMUL_factor = DAT_08002094;\n    }\n\n    return PLLMUL_factor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_PLLMUL_factor_08002008"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_params_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_first_zero",
                "bVar3": "is_second_zero",
                "are_equal": "are_params_equal"
            },
            "code": "uint check_params_080008fc(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_negative_first = ((int)(second_param << 1) >> 0x15 == -1);\n  bool is_negative_second = ((int)(fourth_param << 1) >> 0x15 == -1);\n  if (is_negative_first || is_negative_second)\n  {\n    if ((is_negative_first && ((first_param | (second_param << 0xc)) != 0)) || (is_negative_second && ((third_param | (fourth_param << 0xc)) != 0)))\n    {\n      result = 1;\n      return result;\n    }\n  }\n  bool is_first_zero = (first_param | (second_param << 1)) == 0;\n  bool is_second_zero = (third_param | (fourth_param << 1)) == 0;\n  if (!is_first_zero && !is_second_zero)\n  {\n    bool are_equal = (second_param == fourth_param) && (first_param == third_param);\n    if (!are_equal)\n    {\n      uint xor_result = second_param ^ fourth_param;\n      bool is_xor_result_zero = (xor_result == 0);\n      if (-1 < (int)xor_result)\n      {\n        is_xor_result_zero = (second_param == fourth_param);\n      }\n      bool is_fourth_param_less_or_equal_to_second_param = (-1 < (int)xor_result) && (fourth_param <= second_param);\n      if (is_xor_result_zero)\n      {\n        is_fourth_param_less_or_equal_to_second_param = (third_param <= first_param);\n      }\n      int shift_amount = 0x1f;\n      if (!is_fourth_param_less_or_equal_to_second_param)\n      {\n        shift_amount = ~shift_amount;\n      }\n      result = shift_amount | 1;\n      return result;\n    }\n  }\n  result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [],
            "imported": false,
            "current_name": "check_params_080008fc"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_uwTick_0800114c",
                "PTR_uwTick_08001158": "uwTickPtr"
            },
            "code": "void increment_uwTick_0800114c(void)\n{\n  int *PTR_uwTick_08001158 = (int *)PTR_uwTick_08001158;\n  *PTR_uwTick_08001158 = *PTR_uwTick_08001158 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "main",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_uwTick_0800114c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "get_APB_prescaler_value_08002250",
                "uVar1": "leading_zeroes",
                "PTR_SystemCoreClock_0800227c": "system_core_clock",
                "PTR_APBPrescTable_08002278": "apb_prescaler_table",
                "DAT_08002274": "apb_prescaler_index_data"
            },
            "code": "uint32_t get_APB_prescaler_value_08002250(void)\n{\n    uint32_t leading_zeroes = count_leading_zeroes(0x1c0000);\n    uint32_t PTR_SystemCoreClock_0800227c = *(uint32_t *)PTR_SystemCoreClock_0800227c;\n    uint32_t apb_prescaler_index = (*(uint32_t *)(DAT_08002274 + 4) & 0x3800) >> (leading_zeroes & 0xff);\n    uint32_t apb_prescaler_value = PTR_APBPrescTable_08002278[apb_prescaler_index];\n    return PTR_SystemCoreClock_0800227c >> apb_prescaler_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_APB_prescaler_value_08002250"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_interrupt_priority_080011fc",
                "IRQn": "interrupt_number",
                "DAT_08001210": "interrupt_priority_address"
            },
            "code": "void set_interrupt_priority_080011fc(IRQn_Type interrupt_number)\n{\n    int* interrupt_priority_register = (int *)(DAT_08001210 + ((uint)(int)interrupt_number >> 5) * 4);\n    int interrupt_priority_bit = 1 << ((int)interrupt_number & 0x1fU);\n    *interrupt_priority_register = interrupt_priority_bit;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_080011fc"
        },
        "FUN_08003f7c": {
            "renaming": {
                "FUN_08003f7c": "blinkLEDs_08003f7c",
                "iVar1": "num_blinks"
            },
            "code": "void blinkLEDs_08003f7c(void)\n{\n  int num_blinks = 3;\n  do {\n    toggleLED(1, 0, 0);\n    delay_ms(100);\n    toggleLED(0, 1, 0);\n    delay_ms(100);\n    toggleLED(0, 0, 1);\n    delay_ms(100);\n    num_blinks--;\n  } while (num_blinks > 0);\n  toggleLED(1, 1, 1);\n  return;\n}",
            "called": [
                "toggleLED",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f7c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "blinkLEDs_08003f7c"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_08005646",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dest_ptr",
                "iVar2": "overlap",
                "puVar3": "src_ptr"
            },
            "code": "void *reverse_copy_08005646(void *destination, const void *source, size_t num_bytes) {\n    unsigned char *dest_ptr = (unsigned char *)destination;\n    const unsigned char *src_ptr = (const unsigned char *)source + num_bytes;\n    if (source < destination && destination < src_ptr) {\n        dest_ptr += num_bytes;\n        size_t overlap = num_bytes - (size_t)(src_ptr - destination);\n        while (src_ptr + overlap != NULL) {\n            src_ptr--;\n            dest_ptr--;\n            *dest_ptr = *src_ptr;\n        }\n        return destination;\n    }\n    dest_ptr--;\n    for (; source != src_ptr; source = (const void *)((const unsigned char *)source + 1)) {\n        dest_ptr++;\n        *dest_ptr = *(const unsigned char *)source;\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "convert_double_to_float_08000990",
                "param_1": "float_value"
            },
            "code": "undefined4 convert_double_to_float_08000990(undefined4 float_value) {\n  __nedf2();\n  return float_value;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq"
            ],
            "imported": false,
            "current_name": "convert_double_to_float_08000990"
        },
        "FUN_08004ee6": {
            "renaming": {
                "FUN_08004ee6": "infiniteLoop_08004ee6"
            },
            "code": "void infiniteLoop_08004ee6(void) {\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "HardFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee6",
            "calling": [
                "HardFault_Handler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_08004ee6"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "send_altitude_08004434",
                "in_r1": "unused_variable",
                "local_10": "altitude",
                "local_c": "combined_reading"
            },
            "code": "void send_altitude_08004434(void)\n{\n  uint16_t altitude_reading;\n  uint32_t combined_reading;\n  uint8_t frame_data[6];\n  altitude_reading = *(uint16_t *)PTR_msp_txf_altitude_08004454;\n  combined_reading = (uint32_t)(altitude_reading << 16) | (uint32_t)(*(uint16_t *)(PTR_msp_txf_altitude_08004454 + 4));\n  frame_data[0] = 'm';\n  memcpy(&frame_data[1], &combined_reading, sizeof(combined_reading));\n  MSP_SendFrame(frame_data, sizeof(frame_data));\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_altitude_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08004ee4": {
            "renaming": {
                "FUN_08004ee4": "do_nothing_08004ee4"
            },
            "code": "\nvoid do_nothing_08004ee4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee4",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ee4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "wait_forever_08004ee8"
            },
            "code": "void wait_forever_08004ee8(void)\n{\n  while(true)\n  {\n     //Do nothing block with infinite loop\n  }\n}",
            "called": [
                "MemManage_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [
                "MemManage_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004ee8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "printf_wrapper_08004ffc",
                "__s": "output_string",
                "__format": "format_string",
                "local_78": "output_string_array",
                "local_70": "max_output_length",
                "local_6c": "output_string_length",
                "local_6a": "max_output_string_length",
                "local_68": "output_string_position",
                "local_64": "max_output_string_position",
                "pcStack_c": "format_string_position",
                "uStack_8": "in_r2",
                "uStack_4": "in_r3",
                "iVar1": "num_chars_written"
            },
            "code": "int printf_wrapper_08004ffc(char *output_string, char *format_string, ...) {\n  va_list args;\n  va_start(args, format_string);\n  int num_chars_written = vsnprintf(output_string, INT_MAX, format_string, args);\n  va_end(args);\n  return num_chars_written;\n}",
            "called": [
                "_svfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "serialInt"
            ],
            "imported": false,
            "current_name": "printf_wrapper_08004ffc"
        },
        "FUN_0800103c": {
            "renaming": {
                "FUN_0800103c": "check_equality_0800103c",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "__aeabi_cfcmpeq": "check_equality_with_float"
            },
            "code": "bool check_equality_0800103c(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  \n  is_CY_zero = __aeabi_cfcmpeq();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800103c",
            "calling": [],
            "imported": false,
            "current_name": "check_equality_0800103c"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_uwTick_value_0800115c",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_0800115c(void)\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_I2C_Mem_Write",
                "HAL_RCC_OscConfig",
                "HAL_I2C_Mem_Read",
                "millis",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "micros",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_0800115c"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "get_uwTick_value_08004f60",
                "PTR_uwTick_08001164": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08004f60(void)\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f60"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "read_magnetometer_data_08002d88",
                "puVar3": "src_ptr",
                "puVar4": "mag_raw_ptr",
                "puVar5": "mag_calib_ptr",
                "puVar6": "mag_bias_ptr",
                "bVar7": "i2c_status",
                "uVar8": "mag_resolution",
                "uVar9": "mag_resolution_val",
                "raw_data": "raw_data",
                "PTR_s____Src_MPU9250_c_08002e80": "MPU9250_SRC",
                "PTR_magRaw_08002e84": "mag_raw_data",
                "PTR_magCalib_08002e98": "mag_calibration",
                "PTR_magBias_08002e9c": "mag_bias",
                "PTR_mRes_08002e88": "mag_resolution_val",
                "PTR_magScale_08002e8c": "mag_scale",
                "PTR_magData_08002e90": "mag_raw_data",
                "PTR_msp_txf_status_08002e94": "msp_txf_status"
            },
            "code": "void read_magnetometer_data_08002d88(void)\n{\n    short byte1;\n    short byte2;\n    undefined *src_ptr;\n    undefined *mag_raw_ptr;\n    undefined *mag_calib_ptr;\n    undefined *PTR_magBias_08002e9c_ptr;\n    byte i2c_status;\n    undefined4 mag_resolution;\n    uint8_t raw_data[7];\n    src_ptr = PTR_s____Src_MPU9250_c_08002e80;\n    mag_raw_ptr = PTR_magRaw_08002e84;\n    mag_calib_ptr = PTR_magCalib_08002e98;\n    PTR_magBias_08002e9c_ptr = PTR_magBias_08002e9c;\n    raw_data[0] = 0;\n    raw_data[1] = 0;\n    raw_data[2] = 0;\n    raw_data[3] = 0;\n    raw_data[4] = 0;\n    raw_data[5] = 0;\n    raw_data[6] = 0;\n    i2c_status = I2C_ReadByte(0x18, 2, PTR_s____Src_MPU9250_c_08002e80, 0xd7);\n    if (i2c_status < 0)\n    {\n        I2C_ReadByteArray(0x18, 3, raw_data, 7, src_ptr, 0xda);\n        if (raw_data[6] < 0)\n        {\n            *(short *)(PTR_msp_txf_status_08002e94 + 2) = *(short *)(PTR_msp_txf_status_08002e94 + 2) + 1;\n        }\n        else\n        {\n            byte1 = (raw_data[3] << 8) | raw_data[2];\n            byte2 = (raw_data[5] << 8) | raw_data[4];\n            *(undefined2 *)mag_raw_ptr = raw_data[0] | (raw_data[1] << 8);\n            *(short *)(mag_raw_ptr + 2) = byte1;\n            *(short *)(mag_raw_ptr + 4) = byte2;\n            mag_resolution = *(undefined4 *)PTR_mRes_08002e88;\n            float byte1_f = (float)byte1;\n            float byte2_f = (float)byte2;\n            float mag_resolution_f = *(float *)mag_calib_ptr;\n            float PTR_magBias_08002e9c_f = *(float *)PTR_magBias_08002e9c_ptr;\n            float PTR_magScale_08002e8c_f = *(float *)PTR_magScale_08002e8c;\n            float mag_data_x_f = byte1_f * mag_resolution_f * (*(float *)(mag_calib_ptr + 4)) - *(float *)(PTR_magBias_08002e9c_ptr + 4);\n            float mag_data_y_f = byte2_f * mag_resolution_f * (*(float *)(mag_calib_ptr + 8)) - *(float *)(PTR_magBias_08002e9c_ptr + 8);\n            float mag_data_z_f = (float)raw_data[0] * mag_resolution_f * *(float *)(mag_calib_ptr + 12) - *(float *)(PTR_magBias_08002e9c_ptr + 12);\n            *(float *)PTR_magRaw_08002e84 = mag_data_x_f * PTR_magScale_08002e8c_f;\n            *(float *)(PTR_magRaw_08002e84 + 4) = mag_data_y_f * PTR_magScale_08002e8c_f;\n            *(float *)(PTR_magRaw_08002e84 + 8) = mag_data_z_f * PTR_magScale_08002e8c_f;\n        }\n    }\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_magnetometer_data_08002d88"
        },
        "FUN_08004f64": {
            "renaming": {
                "FUN_08004f64": "do_nothing_08004f64"
            },
            "code": "\nvoid do_nothing_08004f64(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "LED_StartupSequence",
                "I2C_WriteByte",
                "_Error_Handler",
                "MS5611_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f64"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_accelerometer_data_08002b48",
                "in_r3": "input",
                "raw_data": "raw_data",
                "I2C_ReadByteArray": "I2C_ReadByteArray",
                "PTR_s____Src_MPU9250_c_08002be4": "src_mpu9250",
                "PTR_accelRaw_08002be8": "raw_data_ptr",
                "ushort": "uint16_t",
                "short": "int16_t",
                "PTR_accelData_08002bec": "accel_data",
                "__floatsisf": "__floatsisf",
                "__aeabi_fmul": "__aeabi_fmul"
            },
            "code": "void read_accelerometer_data_08002b48(void)\n{\n  uint16_t raw_data[3];\n  I2C_ReadByteArray(0xd0,0x3b,raw_data,6,PTR_s____Src_MPU9250_c_08002be4,0x58);\n  float scaled_data[3];\n  scaled_data[0] = (float)((int16_t)((raw_data[0] << 8) | raw_data[1])) * 0.0000610352f;\n  scaled_data[1] = (float)((int16_t)((raw_data[2] << 8) | raw_data[3])) * 0.0000610352f;\n  scaled_data[2] = (float)((int16_t)((raw_data[4] << 8) | raw_data[5])) * 0.0000610352f;\n  PTR_accelData_08002bec[0] = scaled_data[0];\n  PTR_accelData_08002bec[1] = scaled_data[1];\n  PTR_accelData_08002bec[2] = scaled_data[2];\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_accelerometer_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "PTR_completed_8672_08004fa8": "completed_ptr",
                "PTR_gyroBias_08004fa0": "gyro_bias_ptr",
                "PTR__sidata_08004f9c": "initialized_data_ptr",
                "PTR__ebss_08004fac": "uninitialized_data_end_ptr",
                "SystemInit": "initialize_hardware",
                "__libc_init_array": "initialize_library",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr"
            },
            "code": "void initialize_system_08004f68(void)\n{\n  int index;\n  undefined4 *PTR_completed_8672_08004fa8 = (undefined4 *)PTR_completed_8672_08004fa8;\n  undefined4 *PTR_gyroBias_08004fa0 = (undefined4 *)PTR_gyroBias_08004fa0;\n  code *UNRECOVERED_JUMPTABLE;\n\n  // Copy initialized data from flash to RAM\n  for (index = 0; PTR_gyroBias_08004fa0 + index < (undefined4 *)PTR_completed_8672_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_gyroBias_08004fa0 + index) = *(undefined4 *)(PTR__sidata_08004f9c + index);\n  }\n\n  // Zero out uninitialized data\n  for (; PTR_completed_8672_08004fa8 < (undefined4 *)PTR__ebss_08004fac; PTR_completed_8672_08004fa8++) {\n    *PTR_completed_8672_08004fa8 = 0;\n  }\n\n  // Initialize system\n  SystemInit();\n  __libc_init_array();\n\n  // Call main function\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  main();\n\n  // Call function at address 0x08004f9a\n  (*UNRECOVERED_JUMPTABLE)();\n\n  return;\n}",
            "called": [
                "SystemInit",
                "main",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_priority_group_08001170",
                "PriorityGroup": "priority_group",
                "DAT_08001190": "DAT_START_ADDRESS",
                "PTR_": "ptr",
                "mask": "mask",
                "value": "value"
            },
            "code": "void set_priority_group_08001170(uint32_t priority_group) {\n    uint* PTR_ = (uint*)(DAT_08001190 + 0xc);\n    uint mask = 0xf8ff;\n    uint value = 0x5fa0000 | ((priority_group & 7) << 8);\n    *PTR_ = (*PTR_ & mask) | value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "HAL_Init",
                "HAL_MspInit"
            ],
            "imported": false,
            "current_name": "set_priority_group_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "read_gyro_data_08002bf0",
                "raw_data": "raw_data",
                "PTR_s____Src_MPU9250_c_08002c9c": "src_mpu9250",
                "gyroRaw_08002ca0": "gyro_raw_data",
                "gyroBias_08002ca4": "gyro_bias_offset",
                "gyroData_08002cac": "gyro_data",
                "DAT_08002ca8": "gyro_scale_factor"
            },
            "code": "void read_gyro_data_08002bf0(void)\n{\n  uint8_t raw_data[6];\n  raw_data[0] = 0;\n  raw_data[1] = 0;\n  I2C_ReadByteArray(0xd0,0x43,raw_data,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  gyro_raw_data[0] = (raw_data[0] << 8) | raw_data[1];\n  gyro_raw_data[1] = (raw_data[2] << 8) | raw_data[3];\n  gyro_raw_data[2] = (raw_data[4] << 8) | raw_data[5];\n  float gyro_bias = (float)gyro_raw_data[0] * DAT_08002ca8 * 0.5f;\n  gyro_bias -= gyro_bias_offset;\n  gyro_data[0] = gyro_bias;\n  gyro_bias = (float)gyro_raw_data[1] * DAT_08002ca8 * 0.5f;\n  gyro_bias -= gyro_bias_offset;\n  gyro_data[1] = gyro_bias;\n  gyro_bias = (float)gyro_raw_data[2] * DAT_08002ca8 * 0.5f;\n  gyro_bias -= gyro_bias_offset;\n  gyro_data[2] = gyro_bias;\n}",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_gyro_data_08002bf0"
        },
        "FUN_08004ef0": {
            "renaming": {
                "FUN_08004ef0": "do_nothing_08004ef0"
            },
            "code": "\nvoid do_nothing_08004ef0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "read_MPU9250_data_08002ad0",
                "0xd0": "MPU9250_ADDRESS",
                "0x75": "ACCEL_XOUT_H",
                "PTR_s____Src_MPU9250_c_08002b44": "accelData",
                "0x6b": "PWR_MGMT_1",
                "0x80": "PWR_MGMT_1_RESET",
                "0x01": "PWR_MGMT_1_CLKSEL",
                "0x6c": "CONFIG",
                "0x19": "SMPLRT_DIV",
                "0x1d": "GYRO_CONFIG",
                "0x1a": "ACCEL_CONFIG",
                "0x1b": "ACCEL_CONFIG_2",
                "0x1c": "INT_PIN_CFG"
            },
            "code": "void read_MPU9250_data_08002ad0(void)\n{\n  I2C_ReadByte(MPU9250_ADDRESS, ACCEL_XOUT_H, PTR_s____Src_MPU9250_c_08002b44, 14);\n  I2C_WriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, CONFIG, 0x00, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x03, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x03, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, ACCEL_CONFIG_2, 0x10, 1);\n  I2C_WriteByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x08, 1);\n}\n",
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_MPU9250_data_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "is_less_than_or_equal_to_one_08001050",
                "in_CY": "is_greater_than_one",
                "in_ZR": "num"
            },
            "code": "bool is_less_than_or_equal_to_one_08001050(float num) {\n  bool is_greater_than_one = __aeabi_cfrcmple(num, 1.0);\n  return !is_greater_than_one || num == 1.0;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "AHRS_GetYaw"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_one_08001050"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "increment_system_tick_08004ef4"
            },
            "code": "void increment_system_tick_08004ef4(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [],
            "imported": false,
            "current_name": "increment_system_tick_08004ef4"
        },
        "FUN_08004ef2": {
            "renaming": {
                "FUN_08004ef2": "do_nothing_08004ef2"
            },
            "code": "\nvoid do_nothing_08004ef2(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef2"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_imu_data_and_send_frame_080043bc",
                "puVar3": "local_data_ptr",
                "puVar4": "imu_data_ptr",
                "uVar1": "imu_data_value_1",
                "uVar2": "imu_data_value_2",
                "local_24": "imu_data",
                "local_1c": "unused_variable"
            },
            "code": "void copy_imu_data_and_send_frame_080043bc(void)\n{\n  uint16_t imu_data[6];\n  uint16_t *imu_data_ptr = (uint16_t*)PTR_msp_txf_raw_imu_080043ec;\n  uint16_t *local_data_ptr = imu_data;\n  for(int i = 0; i < 6; i++) {\n    *local_data_ptr = *imu_data_ptr;\n    local_data_ptr++;\n    imu_data_ptr++;\n  }\n  MSP_SendFrame('f', (uint8_t*)imu_data, 0x12);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_imu_data_and_send_frame_080043bc"
        },
        "FUN_08004f5c": {
            "renaming": {
                "FUN_08004f5c": "get_uwTick_value_08004f5c",
                "PTR_uwTick_08001164": "uwTick_address"
            },
            "code": "uint32_t get_uwTick_value_08004f5c(void)\n{\n  uint32_t* PTR_uwTick_08001164 = (uint32_t*)PTR_uwTick_08001164;\n  return *PTR_uwTick_08001164;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f5c",
            "calling": [
                "MS5611_Update",
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08004f5c"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "number",
                "uVar1": "shift_amount",
                "uVar2": "positive_number",
                "uVar3": "shift_amount_3",
                "iVar4": "shift_amount_4",
                "uVar5": "count_leading_zeroes_result",
                "uVar6": "sign_bit",
                "bVar7": "shift_amount_negative",
                "bVar8": "shift_amount_zero",
                "bVar9": "is_shift_amount_valid",
                "in_r12": "in_r12",
                "SBORROW4": "SBORROW4",
                "SCARRY4": "SCARRY4"
            },
            "code": "ulonglong calculate_shifted_value_08000404(uint number) {\n  ulonglong count = 0;\n  if (number == 0) {\n    return 32;\n  }\n  while ((number & 0x80000000) == 0) {\n    count++;\n    number <<= 1;\n  }\n  return count;\n}\n\nulonglong calculate_shifted_value_08000404(uint number) {\n  uint sign_bit = number & 0x80000000;\n  uint positive_number = number;\n  if ((int)sign_bit < 0) {\n    positive_number = -number;\n  }\n  ulonglong shifted_value = 0;\n  ulonglong calculate_shifted_value_08000404_result = calculate_shifted_value_08000404(positive_number);\n  uint shift_amount = calculate_shifted_value_08000404_result + 0x15;\n  bool shift_amount_negative = shift_amount < 0x20;\n  bool shift_amount_zero = shift_amount == 0;\n  bool is_shift_amount_valid = shift_amount_negative == SBORROW4(shift_amount, 0xc);\n  if (shift_amount_zero || is_shift_amount_valid) {\n    shifted_value = positive_number << (shift_amount & 0xff);\n    uint shift_amount_2 = 0xc - calculate_shifted_value_08000404_result;\n    if (shift_amount_negative == SBORROW4(shift_amount_2, 0xc)) {\n      shifted_value >>= shift_amount_2 & 0xff;\n    }\n  } else {\n    uint in_r12 = 0x20 - calculate_shifted_value_08000404_result;\n    shifted_value = positive_number << (calculate_shifted_value_08000404_result & 0xff);\n    shifted_value |= 0U >> (in_r12 & 0xff);\n    ulonglong zero_shifted_value = 0 << (calculate_shifted_value_08000404_result & 0xff);\n  }\n  if (shift_amount < 0x433) {\n    return CONCAT44(shifted_value + (0x432 - shift_amount) * 0x100000 | sign_bit, zero_shifted_value);\n  }\n  uint shift_amount_3 = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount_3) {\n    return CONCAT44(number, shifted_value >> (shift_amount_3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_4 = shift_amount_3 - 0x13;\n  if (shift_amount_4 == 0 || shift_amount_4 < 0 != SCARRY4(shift_amount_3 - 0x1f, 0xc)) {\n    shift_amount_3++;\n    return CONCAT44(sign_bit | shifted_value >> (shift_amount_3 & 0xff), zero_shifted_value >> (shift_amount_3 & 0xff) | shifted_value << (0x20 - shift_amount_3 & 0xff));\n  }\n  return CONCAT44(number, zero_shifted_value >> (0x20 - (0xcU - shift_amount_4) & 0xff) | shifted_value << (0xcU - shift_amount_4 & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000404"
        },
        "FUN_08004eec": {
            "renaming": {
                "FUN_08004eec": "infinite_loop_08004eec"
            },
            "code": "void infinite_loop_08004eec(void)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "UsageFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eec",
            "calling": [
                "UsageFault_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004eec"
        },
        "FUN_08004eea": {
            "renaming": {
                "FUN_08004eea": "infinite_loop_08004eea"
            },
            "code": "void infinite_loop_08004eea(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "BusFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eea",
            "calling": [
                "BusFault_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004eea"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "shift_amount",
                "param_4": "sign_bit",
                "param_5": "input_value",
                "uVar1": "temp_var1",
                "extraout_r1": "temp_var2",
                "extraout_r1_00": "temp_var3",
                "unaff_r4": "temp_var4",
                "iVar2": "temp_var5",
                "uVar3": "temp_var6",
                "uVar4": "temp_var7",
                "iVar5": "temp_var8",
                "uVar6": "temp_result",
                "uVar7": "result",
                "uVar8": "temp_result"
            },
            "code": "undefined8 calculate_result_08006070(uint numerator,uint denominator,uint shift_amount,uint sign_bit,double input_value)\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result = CONCAT44(DAT_08006204,DAT_08006200);\n  temp_var7 = shift_amount & 0x7fffffff;\n  if ((DAT_08006220 < (temp_var7 | (-sign_bit | sign_bit) >> 0x1f)) || (temp_var6 = denominator & 0x7fffffff, DAT_08006220 < (temp_var6 | (-numerator | numerator) >> 0x1f))) {\n    temp_result = __aeabi_dadd(numerator, denominator);\n    return temp_result;\n  }\n  if ((shift_amount + 0xc0100000 | sign_bit) == 0) {\n    atan(input_value);\n    return CONCAT44(temp_var2,numerator);\n  }\n  temp_var8 = (int)shift_amount >> 0x1e & 2U | denominator >> 0x1f;\n  if ((numerator | temp_var6) == 0) {\n    if (temp_var8 == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (temp_var8 != 3) {\n      return CONCAT44(denominator,numerator);\n    }\n  }\n  else {\n    if ((sign_bit | temp_var7) != 0) {\n      if (temp_var7 == DAT_08006220) {\n        if (temp_var6 == temp_var7) {\n          if (temp_var8 == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (temp_var8 == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (temp_var8 != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (temp_var8 == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (temp_var8 == 3) {\n          return result;\n        }\n        if (temp_var8 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (temp_var6 != DAT_08006220) {\n        temp_var5 = (int)(temp_var6 - temp_var7) >> 0x14;\n        temp_var1 = DAT_08006210;\n        temp_var4 = DAT_08006214;\n        if (temp_var5 < 0x3d) {\n          if (((int)shift_amount < 0) && (temp_var5 + 0x3c < 0 != SCARRY4(temp_var5,0x3c))) {\n            temp_var1 = 0;\n            temp_var4 = 0;\n          }\n          else {\n            temp_var1 = __divdf3(numerator,denominator);\n            fabs((double)CONCAT44(temp_var4,shift_amount));\n            atan((double)CONCAT44(temp_var4,shift_amount));\n            temp_var3 = extraout_r1;\n          }\n        }\n        if (temp_var8 != 1) {\n          if (temp_var8 == 2) {\n            temp_result = __subdf3(temp_var1,temp_var3,DAT_08006208,DAT_0800620c);\n            result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (temp_var8 == 0) {\n              return CONCAT44(temp_var3,temp_var1);\n            }\n            result = __subdf3(temp_var1,temp_var3,DAT_08006208,DAT_0800620c);\n            temp_result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n          return result;\n        }\n        return CONCAT44(temp_var3 + -0x80000000,temp_var1);\n      }\n    }\n    result = CONCAT44(DAT_08006214,DAT_08006210);\n    if ((int)denominator < 0) {\n      result = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result;\n}",
            "called": [
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "transmitData_08004cac",
                "val": "value",
                "data": "dataBuffer",
                "PTR_tx_buffer_08004cc4": "txBuffer",
                "PTR_DAT_08004cc8": "data"
            },
            "code": "void transmitData_08004cac(int value)\n{\n  undefined *PTR_DAT_08004cc8Buffer;\n  PTR_DAT_08004cc8Buffer = PTR_tx_buffer_08004cc4;\n  siprintf(PTR_tx_buffer_08004cc4, PTR_DAT_08004cc8, value);\n  serialPrint(PTR_DAT_08004cc8Buffer);\n  return;\n}",
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "transmitData_08004cac"
        },
        "FUN_08004eee": {
            "renaming": {
                "FUN_08004eee": "do_nothing_08004eee"
            },
            "code": "\nvoid do_nothing_08004eee(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eee",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004eee"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "transmitDataToUart_08004c18",
                "ch": "data",
                "pData": "bufferPointer",
                "PTR_tx_buffer_08004c28": "txBufferPointer",
                "HAL_UART_Transmit": "HAL_UART_Transmit",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "PTR_huart1_08004c2c": "huart1Pointer"
            },
            "code": "void transmitDataToUart_08004c18(uchar data) {\n  undefined *bufferPointer;\n  bufferPointer = PTR_tx_buffer_08004c28;\n  *PTR_tx_buffer_08004c28 = data;\n  HAL_UART_Transmit((UART_HandleTypeDef *)PTR_huart1_08004c2c, bufferPointer, 1, 5);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "MSP_SendFrame",
                "_Error_Handler",
                "serialPrint"
            ],
            "imported": false,
            "current_name": "transmitDataToUart_08004c18"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "printData_08004c8c",
                "*data": "data",
                "*puVar2": "ptr",
                "sVar1": "len"
            },
            "code": "void printData_08004c8c(char *data)\n{\n    size_t len = strlen(data);\n    for (char *ptr = data; ptr < data+len; ptr++) {\n        serialWrite(*ptr);\n    }\n    return;\n}",
            "called": [
                "strlen",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "MSP_SendFrame",
                "serialInt",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "printData_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "checkI2CStatus_08001460",
                "*hi2c": "*i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "uVar1": "start_time",
                "uVar2": "current_time",
                "uVar3": "status_register",
                "*pIVar4": "*i2c_instance"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08001460(I2C_HandleTypeDef *i2c_handle, uint32_t flag, uint32_t timeout)\n{\n  uint32_t start_time = HAL_GetTick();\n  do {\n    I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n    uint32_t status_register = (flag << 8) >> 0x18 == 1 ? i2c_instance->SR1 : i2c_instance->SR2;\n    if ((flag & 0xffff & ~status_register) == 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x15) < 0) {\n      i2c_instance->CR1 |= 0x200;\n      i2c_instance->SR1 &= 0xfffffbff;\n      i2c_handle->ErrorCode = 4;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - start_time <= timeout))));\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08001460"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_pwm_value_08003fd0",
                "pwm": "pwm_value",
                "PTR_htim4_08003fd8": "htim4_ptr"
            },
            "code": "void set_pwm_value_08003fd0(int pwm_value)\n{\n  int* PTR_htim4_08003fd8 = *(int*)PTR_htim4_08003fd8;\n  int* pwm_reg_ptr = PTR_htim4_08003fd8 + 0x3c;\n  *pwm_reg_ptr = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fd0"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concat_params_if_dat_not_zero_08000134",
                "param_1": "init_ptr",
                "param_2": "object_ptr"
            },
            "code": "undefined8 concat_params_if_dat_not_zero_08000134(undefined *init_ptr, undefined *object_ptr)\n{\n  if (DAT_08000144 != 0) {\n    init_ptr = PTR__init_0800014c;\n    object_ptr = PTR_object_8677_08000148;\n  }\n  return CONCAT44(object_ptr, init_ptr);\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "concat_params_if_dat_not_zero_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "execute_afl_call_if_no_hypercall_08003eb0",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08003ec4": "PTR_noHyperCall_08003ec4",
                "aflCall": "aflCall"
            },
            "code": "uint32_t execute_afl_call_if_no_hypercall_08003eb0(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08003ec4 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_if_no_hypercall_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffc8;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = __divdf3((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = __muldf3(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = __muldf3(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = __aeabi_dadd((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = __muldf3(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = __muldf3(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = __muldf3(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    fabs((double)CONCAT44(param_2,in_stack_ffffffc8));\n    uVar10 = __subdf3(0,DAT_08005f98,param_1,extraout_r1);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __muldf3(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = __ieee754_sqrt(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = __aeabi_dadd((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = __aeabi_dadd(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __muldf3(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = __aeabi_dadd(uVar7,uVar6,0,uVar6);\n      uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                        (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = __subdf3(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __aeabi_dadd(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = __subdf3(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "asin"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "calculate_angle_08002ee8",
                "iVar1": "comparison_result",
                "uVar2": "angle_value",
                "fVar3": "angle_in_degrees"
            },
            "code": "float calculate_angle_08002ee8(void)\n{\n  int comparison_result;\n  undefined4 angle_value;\n  float angle_in_degrees;\n  angle_value = *(undefined4 *)(PTR_AHRS_Angle_08002f18 + 8);\n  comparison_result = __aeabi_fcmpge(angle_value, DAT_08002f1c);\n  if ((comparison_result != 0) && (comparison_result = __aeabi_fcmplt(angle_value, DAT_08002f20), comparison_result != 0)) {\n    angle_in_degrees = (float)__addsf3(angle_value, DAT_08002f20);\n    return angle_in_degrees;\n  }\n  angle_in_degrees = (float)__aeabi_fsub(angle_value, DAT_08002f24);\n  return angle_in_degrees;\n}",
            "called": [
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_angle_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "configureSysTick_08001104",
                "TickPriority": "tickPriority",
                "uVar1": "hclkFreq",
                "SysTick_IRQn": "SysTick_IRQn",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureSysTick_08001104(uint32_t tickPriority)\n{\n  uint32_t hclkFreq = HAL_RCC_GetHCLKFreq();\n  uint32_t systickFreq = hclkFreq / 1000;\n  HAL_SYSTICK_Config(systickFreq);\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08001104"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "initialize_pid_parameters_08004978",
                "puVar1": "roll_pid",
                "puVar2": "pitch_pid",
                "puVar3": "yaw_pid",
                "puVar4": "altitude_pid"
            },
            "code": "void initialize_pid_parameters_08004978(void)\n{\n  float *roll_pid = PTR_pid_roll_080049e8;\n  float *pitch_pid = PTR_pid_pitch_080049ec;\n  float *yaw_pid = PTR_pid_yaw_080049f0;\n  float *altitude_pid = PTR_pid_altitude_080049f4;\n  roll_pid[19] = 1.0;\n  pitch_pid[19] = 1.0;\n  yaw_pid[19] = -1.0;\n  altitude_pid[19] = 0.0;\n  pitch_pid[5] = DAT_080049fc;\n  roll_pid[5] = DAT_08004a04;\n  yaw_pid[5] = DAT_08004a0c;\n  altitude_pid[5] = 0.0;\n  pitch_pid[0] = DAT_08004a10;\n  pitch_pid[1] = DAT_08004a10;\n  pitch_pid[2] = DAT_08004a08;\n  pitch_pid[3] = DAT_08004a14;\n  pitch_pid[4] = DAT_08004a18;\n  pitch_pid[6] = DAT_08004a1c;\n  pitch_pid[7] = DAT_08004a20;\n  yaw_pid[0] = DAT_08004a24;\n  yaw_pid[1] = DAT_08004a28;\n  yaw_pid[2] = DAT_08004a10;\n  yaw_pid[3] = 0.0;\n  yaw_pid[4] = 0.0;\n  yaw_pid[6] = 0.0;\n  altitude_pid[0] = DAT_08004a2c;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_pid_parameters_08004978"
        },
        "FUN_08000c60": {
            "renaming": {
                "FUN_08000c60": "calculate_hash_08000c60",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3",
                "uVar4": "var4",
                "iVar5": "constant1",
                "uVar6": "var5"
            },
            "code": "uint calculate_hash_08000c60(uint input1, uint input2)\n{\n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n  uint var1 = input1;\n  uint var2 = input2;\n  if (input2 == 0) {\n    var1 = 0;\n    var2 = input1;\n  }\n  int constant1 = 0x5b000000;\n  if (input2 == 0) {\n    constant1 = 0x4b000000;\n  }\n  int var3 = count_leading_zeroes(var2);\n  uint var4 = var3 - 8;\n  constant1 = constant1 + -0x800000 + var4 * -0x800000;\n  if (var3 < 8) {\n    var4 = var2 << (var3 + 0x18U & 0xff);\n    var2 = constant1 + ((var2 >> (0x20 - (var3 + 0x18U) & 0xff)) - ((int)var4 >> 0x1f));\n    if ((var1 | var4 << 1) == 0) {\n      var2 = var2 & ~(var4 >> 0x1f);\n    }\n    return var2;\n  }\n  uint var5 = var1 << (var4 & 0xff);\n  var2 = constant1 + (var2 << (var4 & 0xff)) + (var1 >> (0x20 - var4 & 0xff)) + (uint)(0x7fffffff < var5);\n  if (var5 == 0x80000000) {\n    var2 = var2 & 0xfffffffe;\n  }\n  return var2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000c60"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "FUNC_08006d68"
            },
            "code": "\ndouble FUNC_08006d68(double __x)\n\n{\n  int in_r0;\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint in_r1;\n  undefined4 extraout_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 *puVar9;\n  double in_d0;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar11 = CONCAT44(in_r1,in_r0);\n  uVar8 = in_r1 & 0x7fffffff;\n  if (DAT_08007058 < (int)uVar8) {\n    if (((int)DAT_0800705c < (int)uVar8) || ((uVar8 == DAT_0800705c && (in_r0 != 0)))) {\n      in_d0 = (double)__aeabi_dadd();\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)uVar8) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08007070 < (int)uVar8) {\n        if (DAT_08007074 < (int)uVar8) {\n          uVar11 = __divdf3(0,DAT_0800707c,in_r0,extraout_r1);\n          iVar1 = 3;\n        }\n        else {\n          uVar11 = __subdf3();\n          uVar10 = __muldf3(in_r0,extraout_r1,0,DAT_08007078);\n          uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n          uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                            (int)((ulonglong)uVar10 >> 0x20));\n          iVar1 = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)uVar8) {\n        uVar11 = __subdf3();\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_0800706c);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 1;\n      }\n      else {\n        uVar11 = __aeabi_dadd();\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_0800706c);\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar10,\n                          (int)((ulonglong)uVar10 >> 0x20));\n        iVar1 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_08007068 + -0x1bc0000) {\n        uVar10 = __aeabi_dadd(in_r0,in_r1,DAT_08006ff8,DAT_08006ffc);\n        iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800706c);\n        if (iVar1 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar1 = -1;\n    }\n    uVar7 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar6 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar6,uVar7,uVar6,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar2 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar3 = (undefined4)uVar11;\n    uVar11 = __muldf3(uVar3,uVar5,DAT_08007000,DAT_08007004);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007008,DAT_0800700c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007010,DAT_08007014);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007018,DAT_0800701c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007020,DAT_08007024);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar3,uVar5);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08007028,DAT_0800702c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __muldf3(uVar3,uVar5,DAT_08007030,DAT_08007034);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007038,DAT_0800703c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007040,DAT_08007044);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007048,DAT_0800704c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08007050,DAT_08007054);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar1 == -1) {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(uVar6,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n    else {\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar10,uVar3);\n      uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      puVar9 = (undefined4 *)(PTR_FUNC_08006d68hi_08007080 + iVar1 * 8);\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),\n                        *(undefined4 *)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8),\n                        *(undefined4 *)((int)(PTR_FUNC_08006d68lo_08007084 + iVar1 * 8) + 4));\n      uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar6,uVar7);\n      in_d0 = (double)__subdf3(*puVar9,puVar9[1],(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    }\n  }\n  return in_d0;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006d68",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_08006d68"
        },
        "FUN_08004f04": {
            "renaming": {
                "FUN_08004f04": "handle_uart_interrupt_08004f04",
                "PTR_huart1_08004f0c": "uart_handle"
            },
            "code": "void handle_uart_interrupt_08004f04(UART_HandleTypeDef* PTR_huart1_08004f0c)\n{\n  HAL_UART_IRQHandler(PTR_huart1_08004f0c);\n  return;\n}",
            "called": [
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f04",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08004f04"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "allocate_memory_080072b8",
                "__delta": "delta",
                "puVar1": "heap_end",
                "pvVar2": "allocated_memory"
            },
            "code": "void * allocate_memory_080072b8(intptr_t delta){\n    undefined *heap_end;\n    void *allocated_memory;\n\n    heap_end = PTR_heap_end_4116_080072cc;\n    if (*(int *)PTR_heap_end_4116_080072cc == 0) {\n        *(undefined **)PTR_heap_end_4116_080072cc = PTR__ebss_080072d0;\n    }\n    allocated_memory = *(void **)heap_end;\n    *(intptr_t *)heap_end = delta + (int)allocated_memory;\n    return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pvVar2": "allocated_memory"
            },
            "code": "void allocate_memory_0800581c(int* error_code, intptr_t size) {\n    undefined* error_ptr = PTR_errno_08005838;\n    *(undefined4*)PTR_errno_08005838 = 0;\n    void* allocated_memory = _sbrk(size);\n    if (allocated_memory == (void*)0xffffffff && *(int*)error_ptr != 0) {\n        *error_code = *(int*)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800581c"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "interrupt_and_return_08003eac",
                "a0": "return_value",
                "a1": "interrupt_number",
                "a2": "parameter"
            },
            "code": "uint32_t interrupt_and_return_08003eac(uint32_t return_value, uint32_t interrupt_number, int32_t parameter) {\n  software_interrupt(interrupt_number);\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_and_return_08003eac"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_impure_ptr_value_080072ac",
                "undefined4": "int",
                "PTR__impure_ptr_080072b4": "PTR__impure_ptr_080072b4",
                "*PTR__impure_ptr_080072b4": "*impure_ptr",
                "impure_ptr": "impure_ptr"
            },
            "code": "int get_impure_ptr_value_080072ac() {\n    int* impure_ptr = (int*)PTR__impure_ptr_080072b4;\n    return *PTR__impure_ptr_080072b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_080072ac"
        },
        "FUN_08000ad0": {
            "renaming": {
                "FUN_08000ad0": "FUNC_08000ad0"
            },
            "code": "\nuint FUNC_08000ad0(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000c12:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000ad0"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "read_and_calculate_magnetometer_calibration_data_08002cb0",
                "in_r3": "raw_data",
                "_rawData": "i2c_address",
                "PTR_s____Src_MPU9250_c_08002d80": "i2c_read_buffer",
                "PTR_magCalib_08002d84": "magnetic_field_offsets",
                "uVar2": "temp_float",
                "rawData": "i2c_data",
                "puVar1": "temp_pointer"
            },
            "code": "void read_and_calculate_magnetometer_calibration_data_08002cb0(void)\n{\n  uint8_t rawData[3];\n  uint i2c_address = 0xd0;\n  uint8_t i2c_data[2] = {'\\\"', '\\x01'};\n  uint8_t PTR_s____Src_MPU9250_c_08002d80[6];\n  uint8_t i2c_command;\n  float PTR_magCalib_08002d84[3];\n  float magnetic_field_scale_factors[3];\n\n  i2c_command = 0x6a;\n  i2c_write_byte(i2c_address, i2c_command, i2c_data, 2);\n\n  i2c_read_byte(0x18, 0, PTR_s____Src_MPU9250_c_08002d80, 0xad);\n\n  i2c_command = 0xb;\n  i2c_write_byte(0x18, i2c_command, i2c_data, 2);\n\n  i2c_command = 10;\n  i2c_write_byte(0x18, i2c_command, '\\0', '\\x01');\n  i2c_command = 10;\n  i2c_write_byte(0x18, i2c_command, '\\x0f', '\\x01');\n\n  i2c_read_byte_array(0x18, 0x10, PTR_s____Src_MPU9250_c_08002d80, 6, PTR_s____Src_MPU9250_c_08002d80 + 6);\n\n  PTR_magCalib_08002d84[0] = calculate_magnetometer_offset(PTR_s____Src_MPU9250_c_08002d80[0]);\n  PTR_magCalib_08002d84[1] = calculate_magnetometer_offset(PTR_s____Src_MPU9250_c_08002d80[1]);\n  PTR_magCalib_08002d84[2] = calculate_magnetometer_offset(PTR_s____Src_MPU9250_c_08002d80[2]);\n\n  magnetic_field_scale_factors[0] = calculate_magnetometer_scale_factor(PTR_s____Src_MPU9250_c_08002d80[3]);\n  magnetic_field_scale_factors[1] = calculate_magnetometer_scale_factor(PTR_s____Src_MPU9250_c_08002d80[4]);\n  magnetic_field_scale_factors[2] = calculate_magnetometer_scale_factor(PTR_s____Src_MPU9250_c_08002d80[5]);\n\n  i2c_command = 10;\n  i2c_write_byte(0x18, i2c_command, '\\0', '\\x01');\n  i2c_command = 10;\n  i2c_write_byte(0x18, i2c_command, '\\x16', '\\x01');\n}\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "__addsf3",
                "I2C_ReadByteArray",
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "read_and_calculate_magnetometer_calibration_data_08002cb0"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "configure_timer_08002324",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "cr2_value",
                "uVar2": "output_mode",
                "uVar3": "output_polarity",
                "pTVar4": "oc_idle_state",
                "DAT_08002364": "dat_08002364"
            },
            "code": "void configure_timer_08002324(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n  uint32_t cr2_value = timer->CR2;\n  uint32_t output_mode = output_channel_config->OCMode;\n  uint32_t output_polarity = output_channel_config->OCPolarity;\n  TIM_TypeDef *oc_idle_state = timer;\n  TIM_TypeDef *DAT_08002364 = (TIM_TypeDef *)0x08002364;\n  \n  timer->CCER &= 0xffffefff;\n  \n  if (timer == DAT_08002364) {\n    oc_idle_state = (TIM_TypeDef *)output_channel_config->OCIdleState;\n    cr2_value &= 0xffffbfff;\n  }\n  \n  if (timer == DAT_08002364) {\n    cr2_value |= (uint32_t)oc_idle_state << 6;\n  }\n  \n  timer->CR2 = cr2_value;\n  timer->CCMR2 = (timer->CCMR2 & 0xffff8cff) | (output_mode << 8);\n  timer->CCR4 = output_channel_config->Pulse;\n  timer->CCER = (timer->CCER & 0xffffdfff) | (output_polarity << 0xc);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002324"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "configure_break_dead_time_08002564",
                "htim": "timer_handle",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "HVar1": "status",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_UNLOCKED": "HAL_UNLOCKED"
            },
            "code": "HAL_StatusTypeDef configure_break_dead_time_08002564(TIM_HandleTypeDef *timer_handle, TIM_BreakDeadTimeConfigTypeDef *break_dead_time_config)\n{\n  HAL_StatusTypeDef status = HAL_BUSY;\n\n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    timer_handle->Instance->BDTR =\n         break_dead_time_config->OffStateRunMode | break_dead_time_config->OffStateIDLEMode |\n         break_dead_time_config->LockLevel | break_dead_time_config->DeadTime |\n         break_dead_time_config->BreakState | break_dead_time_config->BreakPolarity |\n         break_dead_time_config->AutomaticOutput;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timer_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_break_dead_time_08002564"
        },
        "FUN_08004fb0": {
            "renaming": {
                "FUN_08004fb0": "wait_forever_08004fb0"
            },
            "code": "void wait_forever_08004fb0(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb0",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "wait_forever_08004fb0"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "FUNC_08000ad8"
            },
            "code": "\nuint FUNC_08000ad8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000c12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ad8",
            "calling": [
                "AK8963_ReadData",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "AHRS_GetYaw",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "add_data_to_circular_buffer_08003ec8",
                "cb": "circular_buffer",
                "data": "data",
                "size": "size",
                "buffer": "buffer",
                "tail": "tail"
            },
            "code": "int add_data_to_circular_buffer_08003ec8(CircularBuffer *circular_buffer, uint8_t data) {\n    circular_buffer->size++;\n    circular_buffer->buffer[circular_buffer->tail] = data;\n    circular_buffer->tail = (circular_buffer->tail + 1) & 0x7ff;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "add_data_to_circular_buffer_08003ec8"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_pwm_value_08003fe8",
                "pwm": "pwm_value",
                "PTR_htim3_08003ff0": "htim3_ptr"
            },
            "code": "void set_pwm_value_08003fe8(int pwm_value)\n{\n    int* PTR_htim3_08003ff0 = *(int*)PTR_htim3_08003ff0;\n    int* pwm_reg_ptr = PTR_htim3_08003ff0 + 0x3c;\n    *pwm_reg_ptr = pwm_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "start",
                "uVar2": "result",
                "puVar3": "free_list",
                "iVar4": "excess_space",
                "puVar5": "block",
                "uVar6": "excess_space",
                "puVar7": "prev_free_list",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *error_code, uint size) {\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    void *start = PTR___malloc_sbrk_start_080057cc;\n    uint *free_list = *(uint **)PTR___malloc_free_list_080057c8;\n    uint *prev_free_list = *(uint **)PTR___malloc_free_list_080057c8;\n    while (uint *block = free_list, block != (uint *)0x0) {\n      uint excess_space = *block - aligned_size;\n      if (-1 < (int)excess_space) {\n        if (excess_space < 0xc) {\n          if (prev_free_list == block) {\n            uint next_block = prev_free_list[1];\n            *(uint *)PTR___malloc_free_list_080057c8 = next_block;\n          }\n          else {\n            uint next_block = block[1];\n          }\n          if (prev_free_list != block) {\n            prev_free_list[1] = next_block;\n            prev_free_list = block;\n          }\n        }\n        else {\n          *block = excess_space;\n          *(uint *)((int)block + excess_space) = aligned_size;\n          prev_free_list = (uint *)((int)block + excess_space);\n        }\n        goto END;\n      }\n      prev_free_list = block;\n      free_list = (uint *)block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_080057cc == 0) {\n      uint result = _sbrk_r(error_code);\n      *(undefined4 *)start = result;\n    }\n    uint *new_block = (uint *)_sbrk_r(error_code,aligned_size);\n    if ((new_block != (uint *)0xffffffff) &&\n       ((prev_free_list = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == prev_free_list ||\n        (_sbrk_r(error_code,(int)prev_free_list - (int)new_block) != -1)))) {\n      *prev_free_list = aligned_size;\nEND:\n      __malloc_unlock(error_code);\n      uint aligned_block = (int)prev_free_list + 0xbU & 0xfffffff8;\n      int excess_space = aligned_block - (int)(prev_free_list + 1);\n      if (excess_space != 0) {\n        *(int *)((int)prev_free_list + excess_space) = -excess_space;\n        return aligned_block;\n      }\n      return aligned_block;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "__ssputs_r",
                "_svfiprintf_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "initialize_08004fb4",
                "param_1": "ctx",
                "puVar1": "init_array_start",
                "iVar2": "init_array_size",
                "iVar3": "i",
                "_init": "_init",
                "PTR___frame_dummy_init_array_entry_08004fec": "PTR___frame_dummy_init_array_entry_08004fec",
                "PTR___frame_dummy_init_array_entry_08004ff0": "PTR___frame_dummy_init_array_entry_08004ff0",
                "PTR___frame_dummy_init_array_entry_08004ff4": "PTR___frame_dummy_init_array_entry_08004ff4",
                "PTR___do_global_dtors_aux_fini_array_entry_08004ff8": "PTR___do_global_dtors_aux_fini_array_entry_08004ff8"
            },
            "code": "void initialize_08004fb4(EVP_PKEY_CTX *ctx)\n{\n    undefined *init_array_start = PTR___frame_dummy_init_array_entry_08004fec;\n    int init_array_size = (int)PTR___frame_dummy_init_array_entry_08004ff0 - (int)init_array_start;\n    for (int i = 0; i < init_array_size >> 2; i++) {\n        ctx = (EVP_PKEY_CTX *)(**(code **)(init_array_start + i * 4))();\n    }\n    _init(ctx);\n    undefined *fini_array_start = PTR___frame_dummy_init_array_entry_08004ff4;\n    int fini_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_08004ff8 - (int)fini_array_start;\n    for (int i = 0; i < fini_array_size >> 2; i++) {\n        (**(code **)(fini_array_start + i * 4))();\n    }\n}",
            "called": [
                "frame_dummy",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_08004fb4"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_not_CY_or_ZR_080009dc",
                "in_CY": "is_CY_greater_than_ZR",
                "in_ZR": "is_ZR_greater_than_CY"
            },
            "code": "bool is_not_CY_or_ZR_080009dc(void)\n{\n  bool is_CY_greater_than_ZR = __aeabi_cdrcmple();\n  return !is_CY_greater_than_ZR || !is_ZR_greater_than_CY;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_080009dc"
        },
        "FUN_08000c70": {
            "renaming": {
                "FUN_08000c70": "calculate_bitwise_multiplication_08000c70",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "shifted_multiplier",
                "uVar2": "temp_multiplicand",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar6": "intermediate_result",
                "uVar5": "mask",
                "uVar7": "shifted_multiplicand",
                "bVar8": "is_result_negative"
            },
            "code": "uint calculate_bitwise_multiplication_08000c70(uint multiplicand, uint multiplier)\n{\n    uint result = 0;\n    if ((multiplicand | multiplier) == 0) {\n        return multiplicand;\n    }\n    bool is_result_negative = false;\n    if ((int)(multiplier & 0x80000000) < 0) {\n        is_result_negative = multiplicand != 0;\n        multiplicand = -multiplicand;\n        multiplier = -multiplier - (uint)is_result_negative;\n    }\n    uint temp_multiplicand = multiplicand;\n    uint temp_multiplier = multiplier;\n    if (multiplier == 0) {\n        temp_multiplicand = 0;\n        temp_multiplier = multiplicand;\n    }\n    uint mask = (multiplier & 0x80000000) | 0x5b000000;\n    if (multiplier == 0) {\n        mask += 0xf0000000;\n    }\n    int leading_zeroes = count_leading_zeroes(temp_multiplier);\n    uint shift_amount = leading_zeroes - 8;\n    int intermediate_result = (mask - 0x800000) + shift_amount * -0x800000;\n    if (leading_zeroes < 8) {\n        uint shifted_multiplier = temp_multiplier << (leading_zeroes + 0x18U & 0xff);\n        intermediate_result += ((temp_multiplier >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_multiplier >> 0x1f)) + (temp_multiplicand | shifted_multiplier << 1 ? 0 : ~(shifted_multiplier >> 0x1f));\n        result = intermediate_result;\n    }\n    else {\n        uint shifted_multiplicand = temp_multiplicand << (shift_amount & 0xff);\n        uint shifted_multiplier = temp_multiplier << (shift_amount & 0xff);\n        intermediate_result += shifted_multiplicand + shifted_multiplier + (temp_multiplicand >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < (shifted_multiplicand << 1));\n        result = intermediate_result & (shifted_multiplicand == 0x80000000 ? 0xfffffffe : 0xffffffff);\n    }\n    if (is_result_negative) {\n        result = -result;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_bitwise_multiplication_08000c70"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "configure_timer_080023d0",
                "*htim": "*timer",
                "HAL_TIM_STATE_RESET": "TIM_RESET",
                "HAL_UNLOCKED": "TIM_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "initialize_timer_pwm_gpio",
                "HAL_TIM_STATE_BUSY": "TIM_BUSY",
                "HAL_TIM_STATE_READY": "TIM_READY",
                "HAL_OK": "TIMER_CONFIG_OK",
                "HAL_ERROR": "TIMER_CONFIG_ERROR",
                "TIM_Base_SetConfig": "configure_timer_base"
            },
            "code": "HAL_StatusTypeDef configure_timer_080023d0(TIM_HandleTypeDef *timer)\n{\n    if (timer != NULL) {\n        if (timer->State == HAL_TIM_STATE_RESET) {\n            timer->Lock = HAL_UNLOCKED;\n            HAL_TIM_PWM_MspInit(timer);\n        }\n        timer->State = HAL_TIM_STATE_BUSY;\n        TIM_Base_SetConfig(timer->Instance, &timer->Init);\n        timer->State = HAL_TIM_STATE_READY;\n        return HAL_OK;\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_080023d0"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "float_bits",
                "param_2": "exponent",
                "uVar1": "new_float_bits",
                "uVar2": "fraction_bits",
                "uVar3": "biased_exponent",
                "in_r12": "denormalized_fraction_bits",
                "bVar4": "is_zero",
                "bVar5": "is_normalized",
                "SCARRY4": "is_overflow"
            },
            "code": "uint calculate_float_bits_08000a30(uint float_bits, uint exponent) {\n  uint sign_bit = float_bits & 0x80000000;\n  uint fraction = float_bits & 0x7fffff;\n  uint biased_exponent = (float_bits & 0x7f800000) >> 23;\n  bool is_denormal = biased_exponent == 0;\n  bool is_inf_or_nan = biased_exponent == 0xff;\n  if (is_inf_or_nan) {\n    if ((fraction != 0) || (biased_exponent == 0xff && !is_denormal)) {\n      return 0x7fc00000 | sign_bit;\n    }\n    return 0x7f800000 | sign_bit;\n  }\n  uint new_exponent = biased_exponent - 127 + exponent;\n  bool is_overflow = new_exponent >= 0xff;\n  bool is_underflow = new_exponent < 0;\n  if (is_overflow) {\n    return 0x7f800000 | sign_bit;\n  }\n  if (is_underflow) {\n    if (new_exponent < -23) {\n      return sign_bit;\n    }\n    fraction = (fraction | 0x800000) >> (1 - new_exponent);\n    new_exponent = 0;\n  }\n  else {\n    fraction = (fraction | 0x800000);\n  }\n  uint new_float_bits = sign_bit | (new_exponent << 23) | (fraction >> (new_exponent + 1));\n  return new_float_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08000a30"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_pwm_value_08003fdc",
                "pwm": "pwm_value",
                "PTR_htim2_08003fe4": "htim2_ptr"
            },
            "code": "void set_pwm_value_08003fdc(int pwm_value)\n{\n  int* PTR_htim2_08003fe4 = *(int*)PTR_htim2_08003fe4;\n  int pwm_offset = 0x38;\n  *(int *)(PTR_htim2_08003fe4 + pwm_offset) = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "isEndOfString_080009f0",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009f0(void)\n{\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "asin",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_flags_and_values_08004f10",
                "puVar1": "flag_ptr",
                "DAT_08004f50": "flag_values",
                "*DAT_08004f50": "*flag_values",
                "DAT_08004f54": "flag_mask",
                "puVar1[1]": "flag_values[1]",
                "*puVar1": "*flag_ptr",
                "puVar1[2]": "flag_values[2]",
                "DAT_08004f58": "flag_location"
            },
            "code": "void set_flags_and_values_08004f10(void)\n{\n  uint32_t *flag_ptr = DAT_08004f50;\n  *flag_ptr |= 0x1;\n  flag_ptr[1] &= DAT_08004f54;\n  *flag_ptr &= 0xfef6ffff;\n  *flag_ptr &= 0xfffbffff;\n  flag_ptr[1] &= 0xff80ffff;\n  flag_ptr[2] = 0x9f0000;\n  *(uint32_t *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "copy_data_to_buffer_08005044",
                "param_1": "error_code",
                "param_2": "buffer_start",
                "param_3": "data_start",
                "param_4": "data_end",
                "pvVar1": "new_buffer_start",
                "pvVar2": "buffer_end",
                "__n": "data_size"
            },
            "code": "int copy_data_to_buffer_08005044(unsigned int *error_code, void **buffer_start, void *data_start, void *data_end)\n{\n    void *buffer_end;\n    void *new_buffer_start;\n    size_t data_size;\n\n    buffer_end = buffer_start[2];\n    if ((buffer_end <= data_end) && ((*(unsigned short *)(buffer_start + 3) & 0x480) != 0)) {\n        data_size = (int)*buffer_start - (int)buffer_start[4];\n        buffer_end = (void *)((unsigned int)((int)buffer_start[5] * 3) / 2);\n        new_buffer_start = (void *)((int)data_end + data_size + 1);\n        if (buffer_end < new_buffer_start) {\n            buffer_end = new_buffer_start;\n        }\n        if ((int)((unsigned int)*(unsigned short *)(buffer_start + 3) << 0x15) < 0) {\n            new_buffer_start = (void *)malloc(*error_code, buffer_end);\n            if (new_buffer_start == (void *)0x0) {\n                *error_code = 0xc;\n                *(unsigned short *)(buffer_start + 3) = *(unsigned short *)(buffer_start + 3) | 0x40;\n                return -1;\n            }\n            memcpy(new_buffer_start, buffer_start[4], data_size);\n            *(unsigned short *)(buffer_start + 3) = *(unsigned short *)(buffer_start + 3) & 0xfb7f | 0x80;\n        }\n        else {\n            new_buffer_start = (void *)realloc(*error_code, buffer_start[4], buffer_end);\n            if (new_buffer_start == (void *)0x0) {\n                free(*error_code, buffer_start[4]);\n                goto LAB_0800508a;\n            }\n        }\n        buffer_start[4] = new_buffer_start;\n        *buffer_start = (void *)((int)new_buffer_start + data_size);\n        buffer_start[5] = buffer_end;\n        buffer_start[2] = (void *)((int)buffer_end - data_size);\n        buffer_end = data_end;\n    }\n    if (data_end <= buffer_end) {\n        buffer_end = data_end;\n    }\n    memmove(*buffer_start, data_start, (size_t)buffer_end);\n    buffer_start[2] = (void *)((int)buffer_start[2] - (int)buffer_end);\n    *buffer_start = (void *)((int)buffer_end + (int)*buffer_start);\n    return 0;\n}",
            "called": [
                "_free_r",
                "memmove",
                "_malloc_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initializeDevicesAndSensors_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611",
                "PID_Init": "initializePID"
            },
            "code": "void initializeDevicesAndSensors_08004194(void)\n{\n  initializeDevices();\n  initializeSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  initializePID();\n  return;\n}",
            "called": [
                "Devices_Init",
                "PID_Init",
                "MS5611_Init",
                "IMU_Init",
                "serialBegin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeDevicesAndSensors_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "set_clock_source_08001240",
                "CLKSource": "clock_source",
                "uVar1": "clock_value",
                "*DAT_08001254": "*clock_register"
            },
            "code": "void set_clock_source_08001240(uint32_t CLKSource)\n{\n  uint32_t clock_value;\n  if (CLKSource == 4) {\n    clock_value = *DAT_08001254 | 4;\n  }\n  else {\n    clock_value = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = clock_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "param_1": "initial_value",
                "param_2": "data_array",
                "iVar1": "array_index"
            },
            "code": "int calculate_value_08005840(int initial_value, int* data_array)\n{\n  int array_index = initial_value - 4;\n  if (initial_value < 0) {\n    array_index += data_array[array_index];\n  }\n  return array_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "calculate_string_length_08000150",
                "__s": "string",
                "pcVar3": "current_position",
                "pcVar2": "next_position",
                "cVar1": "current_char"
            },
            "code": "size_t calculate_string_length_08000150(char* string) {\n  char current_char;\n  char* current_position = string;\n  while (current_char = *current_position) {\n    current_position++;\n  }\n  return (size_t)(current_position - string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "serialPrint"
            ],
            "imported": false,
            "current_name": "calculate_string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "write_leds_08003f3c",
                "led_white": "white_led",
                "led_red": "red_led",
                "led_blue": "blue_led",
                "GPIOx": "GPIO_port",
                "uVar1": "leading_zeroes",
                "DAT_08003f78": "led_GPIO_port",
                "HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(led_GPIO_port, LED_WHITE_PIN, (GPIO_PinState)(leading_zeroes >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x4000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIO_port, LED_RED_PIN, (GPIO_PinState)(leading_zeroes >> 5))",
                "HAL_GPIO_WritePin(GPIOx,0x2000,(GPIO_PinState)(uVar1 >> 5))": "HAL_GPIO_WritePin(GPIO_port, LED_BLUE_PIN, (GPIO_PinState)(leading_zeroes >> 5))"
            },
            "code": "void write_leds_08003f3c(int white_led, int red_led, int blue_led)\n{\n  GPIO_TypeDef *GPIO_port;\n  uint32_t leading_zeroes;\n  \n  GPIO_port = DAT_08003f78;\n  leading_zeroes = count_leading_zeroes(white_led);\n  HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(uVar1 >> 5));\n  leading_zeroes = count_leading_zeroes(red_led);\n  HAL_GPIO_WritePin(GPIO_port, LED_RED_PIN, (GPIO_PinState)(leading_zeroes >> 5));\n  leading_zeroes = count_leading_zeroes(blue_led);\n  HAL_GPIO_WritePin(GPIO_port, LED_BLUE_PIN, (GPIO_PinState)(leading_zeroes >> 5));\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "PID_Update",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "write_leds_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "getSystemCoreClock_08002214",
                "PTR_SystemCoreClock_0800221c": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClock_08002214(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_08002214"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "start_PWM_timers_08003ff4",
                "htim": "timer4",
                "PTR_htim2_08004020": "timer2",
                "PTR_htim3_08004024": "timer3",
                "4": "PWM_channel_4",
                "8": "PWM_channel_8",
                "0xc": "PWM_channel_0xc"
            },
            "code": "void start_PWM_timers_08003ff4(void)\n{\n  TIM_HandleTypeDef *PTR_htim2_08004020 = PTR_htim2_08004020;\n  TIM_HandleTypeDef *PTR_htim3_08004024 = PTR_htim3_08004024;\n  TIM_HandleTypeDef *timer4 = PTR_htim4_0800401c;\n  HAL_TIM_PWM_Start(PTR_htim2_08004020, 4);\n  HAL_TIM_PWM_Start(PTR_htim3_08004024, 8);\n  HAL_TIM_PWM_Start(timer4, 8);\n  HAL_TIM_PWM_Start(timer4, 0xc);\n  return;\n}",
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "start_PWM_timers_08003ff4"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "compare_and_concatenate_08001004",
                "param_1": "first_num",
                "param_2": "second_num"
            },
            "code": "float32_t compare_and_concatenate_08001004(float32_t first_num, float32_t second_num)\n{\n    __cmpsf2();\n    return CONCAT44(second_num, first_num);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08001004"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "initialize_08001128",
                "FUN_08001128Tick": "initializeTick",
                "DAT_08001148": "data_pointer"
            },
            "code": "HAL_StatusTypeDef initialize_08001128(void)\n{\n  *DAT_08001148 = *DAT_08001148 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  initialize_08001128Tick(0);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "configure_RCC_clocks_08004514",
                "HVar1": "RCC_status",
                "uVar3": "HCLK_freq",
                "line": "line_num",
                "FLatency": "flash_latency",
                "RCC_ClkInitStruct": "RCC_ClkInit_structure",
                "RCC_OscInitStruct": "RCC_OscInit_structure",
                "puVar2": "pointer_to_void"
            },
            "code": "void configure_RCC_clocks_08004514(void)\n{\n  HAL_StatusTypeDef RCC_status;\n  uint32_t HCLK_freq;\n  int line_num;\n  uint32_t flash_latency;\n  RCC_ClkInitTypeDef RCC_ClkInit_structure;\n  RCC_OscInitTypeDef RCC_OscInit_structure;\n  undefined *pointer_to_void;\n  RCC_OscInit_structure.HSIState = 1;\n  RCC_OscInit_structure.HSICalibrationValue = 0x10;\n  flash_latency = 2;\n  RCC_OscInit_structure.PLL.PLLSource = 0;\n  RCC_OscInit_structure.OscillatorType = 2;\n  RCC_OscInit_structure.PLL.PLLState = 2;\n  RCC_OscInit_structure.PLL.PLLMUL = 0x380000;\n  RCC_status = HAL_RCC_OscConfig(&RCC_OscInit_structure);\n  pointer_to_void = (undefined *)(uint)RCC_status;\n  if (pointer_to_void == (undefined *)0x0) goto LABEL_08004540;\n  line_num = 0x3c;\n  while (true) {\n    pointer_to_void = PTR_s____Src_peripherals_c_08004588;\n    _Error_Handler(PTR_s____Src_peripherals_c_08004588, line_num);\nLABEL_08004540:\n    RCC_ClkInit_structure.ClockType = 0xf;\n    RCC_ClkInit_structure.APB1CLKDivider = 0x400;\n    RCC_ClkInit_structure.SYSCLKSource = flash_latency;\n    RCC_ClkInit_structure.AHBCLKDivider = (uint32_t)pointer_to_void;\n    RCC_ClkInit_structure.APB2CLKDivider = (uint32_t)pointer_to_void;\n    RCC_status = HAL_RCC_ClockConfig(&RCC_ClkInit_structure, flash_latency);\n    flash_latency = (uint)RCC_status;\n    if (flash_latency == 0) break;\n    line_num = 0x49;\n  }\n  HCLK_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(HCLK_freq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n  return;\n}",
            "called": [
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_RCC_clocks_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "flightControl_08004a84",
                "puVar1": "pidPitch",
                "puVar2": "pidRoll",
                "puVar3": "pidYaw",
                "puVar4": "mspTxfPid",
                "puVar5": "pidAltitude",
                "in_r0": "ahrsOrientation",
                "iVar7": "comparisonResult",
                "uVar8": "multiplicationResult",
                "extraout_s0": "throttleOutput",
                "extraout_s0_00": "throttleOutputWithAltitudeCorrection",
                "extraout_s1": "pitchOutput",
                "extraout_s1_00": "pitchOutputWithAltitudeCorrection",
                "extraout_s2": "rollOutput",
                "extraout_s2_00": "rollOutputWithAltitudeCorrection",
                "extraout_s3": "yawOutput",
                "throttle": "throttleOutputWithoutAltitudeCorrection",
                "pitch": "pitchOutputWithoutAltitudeCorrection",
                "roll": "rollOutputWithoutAltitudeCorrection",
                "yaw": "yawOutputWithoutAltitudeCorrection",
                "altitude": "altitudeOutput",
                "pitchGreaterThanZero": "isPitchGreaterThanZero",
                "pitchLessThanMax": "isPitchLessThanMax",
                "rollGreaterThanZero": "isRollGreaterThanZero",
                "rollLessThanMax": "isRollLessThanMax"
            },
            "code": "void flightControl_08004a84()\n{\n  float throttle, pitch, roll, yaw;\n  float altitude;\n  int pitchGreaterThanZero, pitchLessThanMax, rollGreaterThanZero, rollLessThanMax;\n  AHRS_GetPitch();\n  AHRS_GetRoll();\n  AHRS_GetYaw();\n  flightControl_08004a84Altitude();\n  pitchGreaterThanZero = __aeabi_fcmpgt(pidPitch.lastInput, 0);\n  if (pitchGreaterThanZero == 0) {\n    pitchLessThanMax = __aeabi_fcmplt(pidPitch.lastInput, pidPitch.maxInput);\n  }\n  else {\n    pitchLessThanMax = __aeabi_fcmpgt(pidPitch.lastInput, pidPitch.minInput);\n  }\n  rollGreaterThanZero = __aeabi_fcmpgt(pidRoll.lastInput, 0);\n  if (rollGreaterThanZero == 0) {\n    rollLessThanMax = __aeabi_fcmplt(pidRoll.lastInput, pidRoll.maxInput);\n  }\n  else {\n    rollLessThanMax = __aeabi_fcmpgt(pidRoll.lastInput, pidRoll.minInput);\n  }\n  if (pitchLessThanMax == 1 && rollLessThanMax == 1) {\n    toggleLED(1,1,1);\n    PID_Compute(&pidPitch);\n    PID_Compute(&pidRoll);\n    PID_Compute(&pidYaw);\n    throttle = pidThrottle.lastOutput;\n    pitch = pidPitch.lastOutput;\n    roll = pidRoll.lastOutput;\n    yaw = pidYaw.lastOutput;\n    if (joystick[1] != 0) {\n      PID_Compute(&pidAltitude);\n      altitude = pidAltitude.lastOutput;\n      throttle += altitude;\n    }\n    else {\n      throttle = joystick[2];\n    }\n    Motor_DistributeSpeed(throttle, pitch, roll, yaw);\n  }\n  else {\n    Motor_StopAll();\n    toggleLED(0, 1, 0);\n  }\n}\n",
            "called": [
                "__aeabi_fcmpgt",
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "AHRS_GetRoll",
                "AHRS_GetYaw",
                "PID_Compute",
                "Motor_StopAll",
                "__aeabi_fcmplt",
                "PID_UpdateAltitude",
                "__aeabi_fmul",
                "toggleLED",
                "__addsf3",
                "__fixunssfsi"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "flightControl_08004a84"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "allocate_memory_080057d0",
                "param_1": "size",
                "param_2": "ptr",
                "param_3": "new_ptr",
                "param_4": "new_size",
                "pvVar1": "result",
                "pvVar2": "usable_size"
            },
            "code": "void * allocate_memory_080057d0(size_t size, void *ptr, void *new_ptr, size_t new_size) {\n  void *result;\n  if (ptr != NULL) {\n    if (new_ptr == NULL) {\n      free(ptr);\n      result = new_ptr;\n    }\n    else {\n      size_t usable_size = malloc_usable_size(ptr);\n      result = ptr;\n      if ((usable_size < new_size) && (result = malloc(new_size), result != NULL)) {\n        memcpy(result, ptr, new_size);\n        free(ptr);\n      }\n    }\n    return result;\n  }\n  result = malloc(new_size);\n  return result;\n}",
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080057d0"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "get_context_pointer_080072d4",
                "ctx": "context_pointer"
            },
            "code": "int get_context_pointer_080072d4(EVP_PKEY_CTX *context_pointer) {\n  return (int)context_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "__do_global_dtors_aux",
                "frame_dummy",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "get_context_pointer_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "FUNC_08000adc"
            },
            "code": "\nuint FUNC_08000adc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000c12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000c12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000adc",
            "calling": [
                "__aeabi_frsub",
                "MS5611_Update",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "PID_Update",
                "AHRS_GetYaw",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000adc"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08000160": {
            "renaming": {
                "FUN_08000160": "FUNC_08000160"
            },
            "code": "\nulonglong FUNC_08000160(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000278;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000160",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000160"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "get_clock_frequency_08002220",
                "uVar1": "leading_zeroes",
                "PTR_SystemCoreClock_0800224c": "system_core_clock",
                "DAT_08002244": "data_08002244",
                "PTR_APBPrescTable_08002248": "apb_presc_table"
            },
            "code": "uint32_t get_clock_frequency_08002220(void)\n{\n  uint32_t leading_zeroes = count_leading_zeroes(0xe00000);\n  uint32_t PTR_SystemCoreClock_0800224c = *(uint32_t *)PTR_SystemCoreClock_0800224c;\n  uint32_t PTR_APBPrescTable_08002248 = PTR_APBPrescTable_08002248[(*(uint32_t *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes & 0xff)];\n  return PTR_SystemCoreClock_0800224c >> PTR_APBPrescTable_08002248;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_clock_frequency_08002220"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "setBeta_08003314",
                "_beta": "newBeta",
                "in_r0": "betaValue",
                "PTR_beta_0800331c": "betaPtr"
            },
            "code": "void setBeta_08003314(float newBeta) {\n    *(float *)PTR_beta_0800331c = newBeta;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "setBeta_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "calculate_result_08005854",
                "__x": "input",
                "puVar1": "fdlib_version",
                "iVar2": "unordered",
                "puVar3": "errno_pointer",
                "dVar4": "result",
                "extraout_d0": "result",
                "extraout_d0_00": "absolute_value",
                "extraout_d0_01": "result",
                "extraout_d0_02": "result",
                "in_stack_ffffffb8": "comparison_result",
                "in_stack_ffffffbc": "stack_pointer"
            },
            "code": "double calculate_result_08005854(double input)\n{\n    double result;\n    char *fdlib_version;\n    int unordered;\n    int comparison_result;\n    int errno_value;\n    \n    result = (double) __ieee754_calculate_result_08005854();\n    fdlib_version = PTR___fdlib_version_080058f8;\n    \n    if (*PTR___fdlib_version_080058f8 != -1)\n    {\n        unordered = __unorddf2();\n        if (unordered == 0)\n        {\n            double absolute_value = fabs(input);\n            comparison_result = __aeabi_dcmpgt();\n            \n            if (comparison_result != 0)\n            {\n                if (*fdlib_version == '\\x02')\n                {\n                    errno_value = matherr((exception *)&stack0xffffffb8);\n                    if (errno_value == 0)\n                    {\n                        errno_value = 0x21;\n                    }\n                    result = extraout_d0_02;\n                }\n            }\n        }\n    }\n    \n    return result;\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dcmpgt",
                "fabs",
                "matherr",
                "__errno",
                "nan",
                "__ieee754_asin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "FUNC_08000168"
            },
            "code": "\nulonglong FUNC_08000168(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000168",
            "calling": [
                "MS5611_Update",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "is_not_null_08001014",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_null_08001014(char input_char) {\n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "is_not_null_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_080071c0",
                "__x": "x",
                "__n": "n",
                "in_r1": "shiftCount",
                "extraout_r1": "extraout",
                "in_r2": "count",
                "uVar1": "result",
                "in_d0": "product",
                "dVar3": "sum",
                "DAT_08007290": "PTR_DAT_08007290",
                "DAT_08007294": "PTR_DAT_08007294",
                "unaff_r4": "PTR_unaff_r4",
                "unaff_r5": "PTR_unaff_r5",
                "unaff_r6": "PTR_unaff_r6"
            },
            "code": "double calculate_080071c0(double x, int n)\n{\n  uint shiftCount;\n  int extraout;\n  int count;\n  uint result;\n  double product;\n  \n  shiftCount = (shiftCount << 1) >> 0x15;\n  if (shiftCount == 0) {\n    if ((shiftCount & 0x7fffffff | n) == 0) {\n      return product;\n    }\n    product = (double)__muldf3(n, shiftCount, 0, DAT_08007290);\n    if (count < DAT_08007294) goto LAB_0800722e;\n    shiftCount = ((uint)(extraout << 1) >> 0x15) - 0x36;\n  }\n  else if (shiftCount == 0x7ff) {\n    double sum = (double)__aeabi_dadd(n, shiftCount, n);\n    return sum;\n  }\n  count = shiftCount + count;\n  if (count < 0x7ff) {\n    if (0 < count) {\n      return product;\n    }\n    if (count + 0x35 < 0 == SCARRY4(count, 0x35)) goto LAB_0800722e;\n    if (count < 0xc351) {\n      copysign((double)CONCAT44(PTR_unaff_r4, in_r3), (double)CONCAT44(PTR_unaff_r6, PTR_unaff_r5));\n      goto LAB_0800722e;\n    }\n  }\n  copysign((double)CONCAT44(PTR_unaff_r4, in_r3), (double)CONCAT44(PTR_unaff_r6, PTR_unaff_r5));\nLAB_0800722e:\n  product = (double)__muldf3();\n  return product;\n}",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "copysign"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_byte_08005614",
                "__s": "data",
                "__c": "byte_to_find",
                "__n": "size",
                "pbVar1": "ptr",
                "pbVar2": "current_byte"
            },
            "code": "void* find_byte_08005614(void* data, int byte_to_find, size_t size){\n    unsigned char* ptr = (unsigned char*)data;\n    while(ptr < (unsigned char*)(data + size)){\n        if(*ptr == byte_to_find){\n            return ptr;\n        }\n        ptr++;\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_byte_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "FUNC_08000724"
            },
            "code": "\nulonglong FUNC_08000724(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_double_precision_08000892();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_08000842;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_08000842:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000724",
            "calling": [
                "__ieee754_atan2",
                "MadgwickQuaternionUpdate",
                "sqrt",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "calculate_tagb_value_080070a4",
                "__tagb": "tagb",
                "in_d0": "tagb_value"
            },
            "code": "double calculate_tagb_value_080070a4(char* tagb)\n{\n  double tagb_value = 0.0;\n  \n  return tagb_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_tagb_value_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_i2c_byte_0800407c",
                "device_add": "device_address",
                "register_add": "register_address",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "status",
                "byte": "data_buffer"
            },
            "code": "uint8_t read_i2c_byte_0800407c(uint16_t device_address, uint16_t register_address, char *file_name, int line_number)\\n{\\n  HAL_StatusTypeDef status;\\n  uint8_t data_buffer[1];\\n  data_buffer[0] = \"\\0\";\\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040b4, device_address, register_address, 1, data_buffer, 1, 200);\\n  if (status != HAL_OK) {\\n    _Error_Handler(file_name, line_number);\\n  }\\n  return data_buffer[0];\\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "MPU9250_Init",
                "AK8963_ReadData",
                "I2C_ReadByteArray",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "read_i2c_byte_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nHAL_StatusTypeDef\nFUNC_08001938(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint8_t *puVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  I2C_TypeDef *pIVar5;\n  uint uVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  \n  if (hi2c->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (pData == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (Size == 0) {\n    return HAL_ERROR;\n  }\n  uVar3 = HAL_GetTick();\n  while (pIVar5 = hi2c->Instance, (~pIVar5->SR2 & 2) == 0) {\n    uVar4 = HAL_GetTick();\n    if (10000 < uVar4 - uVar3) {\n      hi2c->Lock = HAL_UNLOCKED;\n      hi2c->State = HAL_I2C_STATE_READY;\n      return HAL_BUSY;\n    }\n  }\n  if (hi2c->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  uVar6 = pIVar5->CR1;\n  hi2c->Lock = HAL_LOCKED;\n  pIVar5->CR1 = uVar6 & 0xfffff7ff;\n  hi2c->State = HAL_I2C_STATE_BUSY_RX;\n  hi2c->Mode = HAL_I2C_MODE_MEM;\n  hi2c->ErrorCode = 0;\n  HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout);\n  if (HVar2 != HAL_OK) {\n    hi2c->Lock = HAL_UNLOCKED;\n    if (hi2c->ErrorCode == 4) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  pIVar5 = hi2c->Instance;\n  uVar6 = pIVar5->CR1;\n  if (Size == 1) {\n    pIVar5->CR1 = uVar6 & 0xfffffbff;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n    enableIRQinterrupts();\n    HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n    if (HVar2 == HAL_OK) {\n      *pData = (uint8_t)hi2c->Instance->DR;\nLAB_08001ab8:\n      hi2c->State = HAL_I2C_STATE_READY;\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      hi2c->Lock = HAL_UNLOCKED;\n      return HAL_OK;\n    }\nLAB_08001a18:\n    if (hi2c->ErrorCode != 0x20) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  if (Size == 2) {\n    pIVar5->CR1 = uVar6 | 0x800;\n    disableIRQinterrupts();\n    hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    pIVar5->CR1 = uVar6 | 0x400;\n    while (3 < Size) {\n      HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout);\n      if (HVar2 != HAL_OK) goto LAB_08001a18;\n      *pData = (uint8_t)hi2c->Instance->DR;\n      pIVar5 = hi2c->Instance;\n      bVar8 = (int)(pIVar5->SR1 << 0x1d) < 0;\n      if (bVar8) {\n        pIVar5 = (I2C_TypeDef *)pIVar5->DR;\n        puVar7 = pData + 2;\n        Size = Size - 2;\n      }\n      else {\n        puVar7 = pData + 1;\n        Size = Size - 1;\n      }\n      puVar1 = pData + 1;\n      pData = puVar7;\n      if (bVar8) {\n        *puVar1 = (uint8_t)pIVar5;\n      }\n    }\n    if (Size != 2) {\n      uVar3 = HAL_GetTick();\n      do {\n        pIVar5 = hi2c->Instance;\n        do {\n          if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n            pIVar5->CR1 = pIVar5->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            *pData = (uint8_t)hi2c->Instance->DR;\n            uVar3 = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (Timeout == 0xffffffff);\n      } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n      goto LAB_08001afa;\n    }\n  }\n  uVar3 = HAL_GetTick();\n  do {\n    do {\n      if ((int)(hi2c->Instance->SR1 << 0x1d) < 0) {\n        disableIRQinterrupts();\n        pIVar5 = hi2c->Instance;\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        *pData = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[1] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\nLAB_08001afa:\n  hi2c->State = HAL_I2C_STATE_READY;\n  hi2c->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\nLAB_08001b3a:\n  do {\n    pIVar5 = hi2c->Instance;\n    do {\n      if ((int)(pIVar5->SR1 << 0x1d) < 0) {\n        pIVar5->CR1 = pIVar5->CR1 | 0x200;\n        pData[1] = (uint8_t)pIVar5->DR;\n        enableIRQinterrupts();\n        pData[2] = (uint8_t)hi2c->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (Timeout == 0xffffffff);\n  } while ((Timeout != 0) && (uVar4 = HAL_GetTick(), uVar4 - uVar3 <= Timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryRead"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "configure_timer_080022d0",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "output_compare_polarity",
                "uVar2": "cr2_value",
                "uVar3": "output_compare_mode",
                "DAT_08002320": "special_timer"
            },
            "code": "void configure_timer_080022d0(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config) {\n  uint32_t cc_enable_mask = timer->CCER & 0xfffffeff;\n  uint32_t cr2_value = timer->CR2;\n  uint8_t output_compare_mode = output_channel_config->OCMode;\n  uint8_t output_compare_polarity = output_channel_config->OCPolarity << 8;\n  if (timer == DAT_08002320) {\n    output_compare_polarity = (output_compare_polarity & 0xfffff7ff) | (output_channel_config->OCNPolarity << 8);\n    cr2_value = (cr2_value & 0xffffcfff) | ((output_channel_config->OCIdleState | output_channel_config->OCNIdleState) << 4);\n  }\n  timer->CR2 = cr2_value;\n  timer->CCMR2 = (timer->CCMR2 & 0xffffff8c) | output_compare_mode;\n  timer->CCR3 = output_channel_config->Pulse;\n  timer->CCER = (timer->CCER & 0xfffffdff) | output_compare_polarity;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "calculate_shifted_value_080010c4",
                "param_1": "value",
                "uVar1": "shift_amount",
                "msb": "most_significant_bit",
                "exponent": "exponent_bits",
                "mantissa": "mantissa_bits",
                "normalized_value": "normalized_mantissa"
            },
            "code": "uint32_t calculate_shifted_value_080010c4(uint32_t value)\n{\n  uint32_t shifted_value = value << 1;\n  uint32_t msb = shifted_value & 0x80000000;\n  uint32_t exponent = (shifted_value & 0x7F800000) >> 23;\n  uint32_t mantissa = shifted_value & 0x007FFFFF;\n  \n  if (msb != 0 || exponent < 0x7E)\n  {\n    return 0;\n  }\n  \n  uint32_t normalized_value = mantissa | 0x00800000;\n  uint32_t shift_amount = 0x9E - exponent;\n  \n  if (shift_amount < 0 || shift_amount > 31)\n  {\n    return 0xFFFFFFFF;\n  }\n  \n  return normalized_value >> shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080010c4"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "configureTimerChannel_0800245c",
                "htim": "timerHandle",
                "sConfig": "outputChannelConfig",
                "Channel": "channel",
                "extraout_r1": "",
                "extraout_r1_00": "",
                "extraout_r1_01": "",
                "uVar1": "",
                "extraout_r1_02": "",
                "iVar2": "",
                "uVar3": "",
                "pTVar4": "timerInstance"
            },
            "code": "HAL_StatusTypeDef configureTimerChannel_0800245c(TIM_HandleTypeDef *timerHandle, TIM_OC_InitTypeDef *outputChannelConfig, uint32_t channel)\n{\n  uint32_t ccmrValue;\n  TIM_TypeDef *timerInstance = timerHandle->Instance;\n\n  if (timerHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n\n  timerHandle->State = HAL_TIM_STATE_BUSY;\n  timerHandle->Lock = HAL_LOCKED;\n\n  switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerInstance, outputChannelConfig);\n      ccmrValue = timerInstance->CCMR1 | *(uint *)(extraout_r1 + 0x10);\n      timerInstance->CCMR1 = (ccmrValue | 8) & 0xfffffffb;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerInstance, outputChannelConfig);\n      ccmrValue = timerInstance->CCMR1 | (*(int *)(extraout_r1_00 + 0x10) << 8);\n      timerInstance->CCMR1 = (ccmrValue | 0x800) & 0xfffffbff;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerInstance, outputChannelConfig);\n      ccmrValue = timerInstance->CCMR2 | *(uint *)(extraout_r1_01 + 0x10);\n      timerInstance->CCMR2 = (ccmrValue | 8) & 0xfffffffb;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerInstance, outputChannelConfig);\n      ccmrValue = timerInstance->CCMR2 | (*(int *)(extraout_r1_02 + 0x10) << 8);\n      timerInstance->CCMR2 = (ccmrValue | 0x800) & 0xfffffbff;\n      break;\n  }\n\n  if (channel != 0xc) {\n    timerInstance->CCMR1 = ccmrValue;\n  } else {\n    timerInstance->CCMR2 = ccmrValue;\n  }\n\n  timerHandle->State = HAL_TIM_STATE_READY;\n  timerHandle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureTimerChannel_0800245c"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "compare_values_080008f4",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "third_value",
                "param_4": "fourth_value",
                "uVar1": "xor_result",
                "bVar2": "is_xor_result_zero",
                "bVar3": "is_fourth_value_less_than_or_equal_to_second_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint compare_values_080008f4(uint first_value, uint second_value, uint third_value, uint fourth_value)\n{\n  uint result;\n  bool has_first_two_bits_set = ((int)(second_value << 1) >> 0x15 == -1 || (int)(fourth_value << 1) >> 0x15 == -1);\n  bool has_second_two_bits_set = ((int)(second_value << 1) >> 0x15 == -1 && ((first_value | second_value << 0xc) != 0)) || (((int)(fourth_value << 1) >> 0x15 == -1 && ((third_value | fourth_value << 0xc) != 0)));\n  if (has_first_two_bits_set && has_second_two_bits_set) {\n    return 0xffffffff;\n  }\n  bool is_first_value_zero = (first_value | second_value << 1) == 0;\n  bool is_third_value_zero = (third_value | fourth_value << 1) == 0;\n  if (!is_first_value_zero && !is_third_value_zero) {\n    bool are_second_and_fourth_values_equal = second_value == fourth_value;\n    bool are_first_and_third_values_equal = first_value == third_value;\n    if (!are_second_and_fourth_values_equal && !are_first_and_third_values_equal) {\n      uint xor_result = second_value ^ fourth_value;\n      bool is_xor_result_zero = xor_result == 0;\n      if (-1 < (int)xor_result) {\n        is_xor_result_zero = second_value == fourth_value;\n      }\n      bool is_fourth_value_less_than_or_equal_to_second_value = -1 < (int)xor_result && fourth_value <= second_value;\n      if (is_xor_result_zero) {\n        is_fourth_value_less_than_or_equal_to_second_value = third_value <= first_value;\n      }\n      int sign_bit = (int)fourth_value >> 0x1f;\n      if (!is_fourth_value_less_than_or_equal_to_second_value) {\n        sign_bit = ~sign_bit;\n      }\n      result = sign_bit | 1;\n    } else {\n      result = 0;\n    }\n  } else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "compare_values_080008f4"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "configureGPIOBasedOnTimer_08004e14",
                "htim": "timer",
                "pGVar1": "gpio",
                "pTVar2": "tim",
                "GPIO_InitStruct": "gpioInit",
                "DAT_08004e6c": "gpioForTimer(TIMER_1)",
                "DAT_08004e68": "TIMER_1",
                "(TIM_TypeDef *)0x40000000": "TIMER_2",
                "DAT_08004e74": "gpioForOtherTimers(TIMER_3)",
                "DAT_08004e70": "TIMER_3",
                "DAT_08004e78": "TIMER_4"
            },
            "code": "void configureGPIOBasedOnTimer_08004e14(TIM_HandleTypeDef *timer)\n{\n  GPIO_TypeDef *gpio;\n  TIM_TypeDef *tim;\n  GPIO_InitTypeDef gpioInit;\n  tim = timer->Instance;\n  gpio = gpioForTimer(tim);\n  if (tim == DAT_08004e68) {\n    gpioInit.Pin = GPIO_PIN_11;\n  }\n  else if (tim == TIMER_2) {\n    gpioInit.Pin = GPIO_PIN_1;\n  }\n  else {\n    gpio = gpioForOtherTimers(tim);\n    if (tim == DAT_08004e70) {\n      gpioInit.Pin = GPIO_PIN_2;\n    }\n    else {\n      if (tim != DAT_08004e78) {\n        return;\n      }\n      gpioInit.Pin = GPIO_PIN_8 | GPIO_PIN_9;\n    }\n  }\n  gpioInit.Speed = GPIO_SPEED_FREQ_LOW;\n  gpioInit.Mode = GPIO_MODE_OUTPUT_PP;\n  HAL_GPIO_Init(gpio, &gpioInit);\n  return;\n}\n",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureGPIOBasedOnTimer_08004e14"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "_beta": "beta_value",
                "_deltat": "deltat_value"
            },
            "code": "void initialize_sensors_08002ea0(void)\n{\n  float beta_value;\n  float deltat_value;\n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(beta_value);\n  MadgwickSetDelta(deltat_value);\n  return;\n}",
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_sensors_08002ea0"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_GPIO_Pin_State_08001424",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_num",
                "PinState": "state",
                "uVar1": "pin_mask"
            },
            "code": "void set_GPIO_Pin_State_08001424(GPIO_TypeDef *GPIO_port, uint16_t pin_num, GPIO_PinState state) {\n    uint32_t pin_mask = (uint32_t)pin_num;\n    if (state == GPIO_PIN_RESET) {\n        pin_mask = pin_mask << 16;\n    }\n    GPIO_port->BSRR = pin_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "toggleLED",
                "_Error_Handler",
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_GPIO_Pin_State_08001424"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "FUNC_08005900"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble FUNC_08005900(double __x,double __y)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  int iVar3;\n  int iVar4;\n  int *piVar5;\n  undefined4 *puVar6;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 uVar7;\n  double extraout_d0;\n  double extraout_d0_00;\n  double extraout_d0_01;\n  double extraout_d0_02;\n  double extraout_d0_03;\n  double extraout_d0_04;\n  double extraout_d0_05;\n  double extraout_d0_06;\n  double extraout_d0_07;\n  double extraout_d0_08;\n  double extraout_d0_09;\n  double extraout_d0_10;\n  double extraout_d0_11;\n  double extraout_d0_12;\n  double dVar8;\n  undefined8 uVar9;\n  undefined local_50 [24];\n  undefined8 local_38;\n  int local_30;\n  \n  dVar8 = (double)__ieee754_FUNC_08005900();\n  puVar2 = PTR___fdlib_version_08005ba8;\n  cVar1 = *PTR___fdlib_version_08005ba8;\n  if (cVar1 == -1) {\n    return extraout_d0;\n  }\n  local_30 = __unorddf2();\n  if (local_30 != 0) {\n    return extraout_d0_00;\n  }\n  iVar3 = __unorddf2();\n  if (iVar3 != 0) {\n    iVar3 = __aeabi_dcmpeq();\n    if (iVar3 == 0) {\n      return extraout_d0_01;\n    }\n    local_50._0_4_ = 1;\n    local_50._4_4_ = PTR_DAT_08005bac;\n    local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n    if (cVar1 == '\\x02') {\n      return extraout_d0_01;\n    }\n    goto LAB_08005978;\n  }\n  iVar4 = __aeabi_dcmpeq();\n  if (iVar4 == 0) {\n    iVar3 = finite(dVar8);\n    if ((iVar3 == 0) && (iVar4 = finite(dVar8), iVar4 != 0)) {\n      iVar4 = finite(dVar8);\n      if (iVar4 == 0) goto LAB_08005b4c;\n      local_30 = __unorddf2(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20));\n      cVar1 = *puVar2;\n      if (local_30 != 0) {\n        local_50._4_4_ = PTR_DAT_08005bac;\n        local_50._0_4_ = 1;\n        local_30 = iVar3;\n        if (cVar1 == '\\0') goto LAB_08005a22;\n        local_38 = (double)__divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_50._0_4_ = 3;\n      if (cVar1 != '\\0') {\n        local_38._0_4_ = 0;\n        local_38._4_4_ = DAT_08005bc4;\n        iVar3 = __aeabi_dcmplt();\n        if (iVar3 != 0) {\n          uVar9 = __muldf3();\n          uVar7 = (int)uVar9;\n          rint(dVar8);\n          iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1_00);\n          if (iVar3 == 0) {\n            local_38._0_4_ = 0;\n            local_38._4_4_ = DAT_08005bb4;\n          }\n        }\n        goto LAB_08005afa;\n      }\n      local_38._0_4_ = 0xe0000000;\n      local_38._4_4_ = DAT_08005bb8;\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 != 0) {\n        uVar9 = __muldf3();\n        uVar7 = (int)uVar9;\n        rint(dVar8);\n        iVar3 = __aeabi_dcmpeq((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,extraout_r1);\n        if (iVar3 == 0) {\n          local_38._0_4_ = 0xe0000000;\n          local_38._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_12;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    else {\nLAB_08005b4c:\n      iVar3 = __aeabi_dcmpeq(SUB84(dVar8,0),(int)((ulonglong)dVar8 >> 0x20),0,0);\n      if (iVar3 == 0) {\n        return extraout_d0_09;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_10;\n      }\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_11;\n      }\n      local_50._0_4_ = 4;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_30 = 0;\n      local_38._0_4_ = 0;\n      local_38._4_4_ = 0;\nLAB_08005afa:\n      if (*puVar2 != '\\x02') goto LAB_08005b98;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x22;\n    dVar8 = extraout_d0_08;\n  }\n  else {\n    local_30 = __aeabi_dcmpeq();\n    if (local_30 == 0) {\n      iVar3 = finite(dVar8);\n      if (iVar3 == 0) {\n        return extraout_d0_05;\n      }\n      iVar3 = __aeabi_dcmplt();\n      if (iVar3 == 0) {\n        return extraout_d0_06;\n      }\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      cVar1 = *puVar2;\n      if (cVar1 == '\\0') {\nLAB_08005a22:\n        local_50._0_4_ = 1;\n        local_38 = 0.0;\n        local_50._4_4_ = PTR_DAT_08005bac;\n        goto LAB_08005978;\n      }\n      local_38 = (double)((ulonglong)DAT_08005bb4 << 0x20);\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n    }\n    else {\n      local_50._0_4_ = 1;\n      local_50._4_4_ = PTR_DAT_08005bac;\n      local_38 = 0.0;\n      local_30 = iVar3;\n      if (cVar1 != '\\0') {\n        local_38 = (double)((ulonglong)DAT_08005bb0 << 0x20);\n        dVar8 = extraout_d0_03;\n        goto LAB_080059d0;\n      }\nLAB_08005978:\n      iVar3 = matherr((exception *)local_50);\n      dVar8 = extraout_d0_02;\n      if (iVar3 != 0) goto LAB_080059d0;\n    }\n    puVar6 = (undefined4 *)__errno();\n    uVar7 = 0x21;\n    dVar8 = extraout_d0_07;\n  }\n  *puVar6 = uVar7;\nLAB_080059d0:\n  if (local_30 != 0) {\n    piVar5 = (int *)__errno();\n    *piVar5 = local_30;\n    dVar8 = extraout_d0_04;\n  }\n  return dVar8;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__aeabi_dcmpeq",
                "__muldf3",
                "finite",
                "matherr",
                "rint",
                "__errno",
                "__ieee754_pow"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005900",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "FUNC_08005900"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_circular_buffer_08004c64",
                "PTR_rxc_08004c6c": "PTR_circular_buffer"
            },
            "code": "void initialize_circular_buffer_08004c64() {\n  CB_Init((CircularBuffer *)PTR_rxc_08004c6c);\n  return;\n}",
            "called": [
                "CB_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08004c64"
        },
        "FUN_080041e4": {
            "renaming": {
                "FUN_080041e4": "set_motor_pwm_080041e4",
                "m1": "motor1_pwm",
                "m2": "motor2_pwm",
                "m3": "motor3_pwm",
                "m4": "motor4_pwm",
                "puVar1": "motor_pwm_ptr",
                "puVar2": "msp_txf_motor_ptr",
                "pwm": "pwm_value"
            },
            "code": "void set_motor_pwm_080041e4(int motor1_pwm, int motor2_pwm, int motor3_pwm, int motor4_pwm)\n{\n  uint pwm;\n  if (motor1_pwm > 999) {\n    motor1_pwm = 1000;\n  }\n  if (motor2_pwm > 999) {\n    motor2_pwm = 1000;\n  }\n  if (motor3_pwm > 999) {\n    motor3_pwm = 1000;\n  }\n  if (motor4_pwm > 999) {\n    motor4_pwm = 1000;\n  }\n  pwm = motor1_pwm & ~(motor1_pwm >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 8) = motor3_pwm & ~(motor3_pwm >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 0xc) = motor4_pwm & ~(motor4_pwm >> 0x1f);\n  *(int *)(PTR_motor_pwm_08004264 + 4) = motor2_pwm & ~(motor2_pwm >> 0x1f);\n  *(uint *)PTR_motor_pwm_08004264 = pwm;\n  Motor1_SetPWM(pwm);\n  Motor2_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 4));\n  Motor3_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 8));\n  Motor4_SetPWM(*(int *)(PTR_motor_pwm_08004264 + 0xc));\n  *(short *)PTR_msp_txf_motor_08004268 = (short)*(int *)PTR_motor_pwm_08004264 + 1000;\n  *(short *)(PTR_msp_txf_motor_08004268 + 2) = (short)*(int *)(PTR_motor_pwm_08004264 + 4) + 1000;\n  *(short *)(PTR_msp_txf_motor_08004268 + 4) = (short)*(int *)(PTR_motor_pwm_08004264 + 8) + 1000;\n  *(short *)(PTR_msp_txf_motor_08004268 + 6) = (short)*(int *)(PTR_motor_pwm_08004264 + 0xc) + 1000;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041e4",
            "calling": [
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "set_motor_pwm_080041e4"
        },
        "FUN_080003e4": {
            "renaming": {
                "FUN_080003e4": "calculate_shifted_value_080003e4",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount2",
                "in_r12": "shift_mask",
                "bVar5": "is_negative_shift",
                "bVar6": "is_zero_shift",
                "bVar7": "is_negative_shift2"
            },
            "code": "ulonglong calculate_shifted_value_080003e4(uint input_value)\n{\n  uint leading_zeroes_count;\n  uint shift_amount;\n  uint shift_mask;\n  uint shifted_value = 0;\n  uint shifted_value2 = 0;\n  bool is_negative_shift;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes_count + 21;\n  is_negative_shift = shift_amount < 32;\n  if (!is_negative_shift) {\n    shift_amount = shift_amount - 32;\n  }\n  shift_mask = is_negative_shift ? ((1 << shift_amount) - 1) : 0xFFFFFFFF;\n  shifted_value = (input_value << shift_amount) & shift_mask;\n  if (!is_negative_shift) {\n    shifted_value2 = (input_value >> (64 - shift_amount)) & (shift_mask ^ 0xFFFFFFFF);\n  }\n  return ((ulonglong)shifted_value2 << 32) | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003e4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_shifted_value_080003e4"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_sign_bit_08007092",
                "__value": "value",
                "in_r1": "sign_mask"
            },
            "code": "int set_sign_bit_08007092(double value){\n                    uint sign_mask;\n                    sign_mask = 0x80000000;\n                    return (sign_mask | value) + 0x100000 >> 0x1f;\n                }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "set_sign_bit_08007092"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "calculateAttitude_08002f28",
                "puVar2": "lastUpdatePtr",
                "puVar3": "timeNowPtr",
                "puVar4": "accelRawData",
                "uVar5": "tempData",
                "uVar6": "currentTime",
                "uVar7": "timeDiff",
                "iVar8": "lastUpdateTime",
                "_deltat": "deltaTime",
                "ax": "accelX",
                "ay": "accelY",
                "az": "accelZ",
                "gx": "gyroX",
                "gy": "gyroY",
                "gz": "gyroZ",
                "mx": "magX",
                "my": "magY"
            },
            "code": "void calculateAttitude_08002f28(void)\n{\n    short accelerationValue;\n    uint32_t currentTime;\n    float deltaTime;\n    float ax, ay, az, gx, gy, gz, mx, my;\n\n    MPU9250_ReadAccelData();\n    MPU9250_ReadGyroData();\n    AK8963_ReadData();\n    currentTime = micros();\n    deltaTime = (float)(currentTime - lastUpdateTime) / timeInterval;\n    MadgwickSetDelta(deltaTime);\n    accelerationValue = (short)((int)accelRawData / 100);\n    MadgwickQuaternionUpdate(ax, ay, az, gx, gy, gz, mx, my, accelerationValue, gyroRawData);\n    msp_txf_raw_imu[0] = (short)accelerationValue;\n    msp_txf_raw_imu[1] = (short)((int)accelRawData[1] / 100);\n    msp_txf_raw_imu[2] = (short)((int)accelRawData[2] / 100);\n    msp_txf_raw_imu[3] = (short)((int)gyroRawData[0] / 100);\n    msp_txf_raw_imu[4] = (short)((int)gyroRawData[1] / 100);\n    msp_txf_raw_imu[5] = (short)((int)gyroRawData[2] / 100);\n    msp_txf_raw_imu[6] = (short)((int)magRawData[0]);\n    msp_txf_raw_imu[7] = (short)((int)magRawData[1]);\n    msp_txf_raw_imu[8] = (short)((int)magRawData[2]);\n    msp_txf_attitude[0] = (short)(__aeabi_f2iz(AHRS_GetRoll()));\n    msp_txf_attitude[1] = (short)(__aeabi_f2iz(AHRS_GetPitch()));\n    msp_txf_attitude[2] = (short)(__aeabi_f2iz(AHRS_GetYaw()));\n    lastUpdateTime = currentTime;\n}\n",
            "called": [
                "AK8963_ReadData",
                "AHRS_GetPitch",
                "MadgwickQuaternionUpdate",
                "AHRS_GetRoll",
                "__aeabi_fdiv",
                "AHRS_GetYaw",
                "micros",
                "__aeabi_f2iz",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "__floatunsisf",
                "MadgwickSetDelta",
                "MPU9250_ReadGyroData"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "calculateAttitude_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "send_msp_txf_status_08004384",
                "puVar1": "msp_txf_status",
                "in_r3": "frame_data",
                "local_14": "local_var1",
                "uStack_10": "local_var2",
                "local_c": "unused_variable"
            },
            "code": "void send_msp_txf_status_08004384(void)\n{\n    undefined *msp_txf_status = PTR_msp_txf_status_080043b8;\n    msp_txf_status[4] = 7;\n    msp_txf_status[5] = 0;\n    msp_txf_status[6] = 0x2a;\n    msp_txf_status[7] = 0;\n    undefined4 local_var1 = *(undefined4 *)msp_txf_status;\n    undefined4 local_var2 = *(undefined4 *)(msp_txf_status + 4);\n    msp_txf_status[8] = 0;\n    msp_txf_status[9] = 0;\n    msp_txf_status[10] = 0;\n    uint frame_data = in_r3 & 0xff000000 | (uint)*(ushort *)(msp_txf_status + 8);\n    MSP_SendFrame('e', (uint8_t *)&local_var1, 0xb);\n    return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_txf_status_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "check_if_not_zero_080009a0",
                "in_ZR": "input"
            },
            "code": "bool check_if_not_zero_080009a0(char input) {\n  __aeabi_cdcmpeq();\n  return input != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "check_if_not_zero_080009a0"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "read_MS5611_coefficients_08003298",
                "file": "MS5611_COEFFICIENTS",
                "puVar1": "coefficients",
                "puVar2": "filter",
                "iVar3": "coefficient_index",
                "rxbuf": "rx_buffer"
            },
            "code": "void read_MS5611_coefficients_08003298(void)\n{\n  uint8_t rx_buffer[2];\n  int coefficient_index = 0;\n  I2C_WriteByte(MS5611_I2C_ADDRESS, MS5611_RESET_COMMAND, MS5611_RESET_PARAMETER_1, MS5611_RESET_PARAMETER_2);\n  delay_ms(10);\n  uint8_t* coefficients = MS5611_COEFFICIENTS;\n  uint8_t* filter = MS5611_FILTER;\n  *MS5611_OSR = MS5611_OSR_4096;\n  do {\n    rx_buffer[0] = 0;\n    rx_buffer[1] = 0;\n    I2C_ReadByteArray(MS5611_I2C_ADDRESS, coefficient_index + MS5611_COEFFICIENTS_START_ADDRESS, rx_buffer, 2, coefficients, MS5611_COEFFICIENTS_LENGTH);\n    *(uint16_t *)(coefficients + coefficient_index) = (rx_buffer[0] << 8) | rx_buffer[1];\n    coefficient_index += 2;\n  } while (coefficient_index != MS5611_COEFFICIENTS_LENGTH);\n  coefficient_index = 0;\n  do {\n    *(uint32_t *)(filter + coefficient_index * 4) = 0;\n    coefficient_index++;\n  } while (coefficient_index != MS5611_FILTER_LENGTH);\n}\n",
            "called": [
                "I2C_ReadByteArray",
                "delay_ms",
                "I2C_WriteByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "read_MS5611_coefficients_08003298"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "initialize_peripherals_and_LED_sequence_08004028",
                "Peripherals_Init": "initialize_peripherals",
                "PWM_Init": "initialize_PWM",
                "LED_StartupSequence": "start_LED_startup_sequence"
            },
            "code": "void initialize_peripherals_and_LED_sequence_08004028(void)\n{\n  initialize_peripherals();\n  initialize_PWM();\n  start_LED_startup_sequence();\n  return;\n}",
            "called": [
                "LED_StartupSequence",
                "PWM_Init",
                "Peripherals_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_and_LED_sequence_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "calculate_0800708c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_0800708c(double input){\n  double result;\n  // Perform calculations here using input and any necessary variables\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "asin",
                "__ieee754_atan2",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_0800708c"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_TIMx_channel_state_08002520",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "channel_control_register",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void update_TIMx_channel_state_08002520(TIM_TypeDef *timer, uint32_t channel, uint32_t channel_state) {\n    uint32_t channel_bit_offset = channel & 0xff;\n    uint32_t channel_bit_mask = 1 << channel_bit_offset;\n    timer->CCER = (timer->CCER & ~channel_bit_mask) | (channel_state << channel_bit_offset);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "update_TIMx_channel_state_08002520"
        },
        "FUN_08000464": {
            "renaming": {
                "FUN_08000464": "calculate_08000464",
                "param_1": "a",
                "param_2": "b",
                "iVar5": "count",
                "uVar2": "tmp_a",
                "uVar3": "shift",
                "uVar4": "tmp_b",
                "uVar6": "leading_zeros",
                "uVar8": "high_b",
                "bVar1": "bool_a",
                "bVar9": "bool_b",
                "bVar10": "bool_c",
                "bVar11": "bool_d",
                "CARRY4": "carry",
                "SBORROW4": "sub_borrow",
                "SCARRY4": "shift_carry"
            },
            "code": "ulonglong calculate_08000464(uint a, uint b) {\n  uint carry, leading_zeros, shift, tmp_a, tmp_b;\n  bool bool_a, bool_b, bool_c;\n  if ((a | b) == 0) {\n    return CONCAT44(b, a);\n  }\n  int count = 0x432;\n  uint high_b = b >> 0x16;\n  if (high_b != 0) {\n    count = 3;\n    if (b >> 0x19 != 0) {\n      count = 6;\n    }\n    if (b >> 0x1c != 0) {\n      count += 3;\n    }\n    shift = count - ((int)b >> 0x1f);\n    tmp_a = a << (0x20 - shift & 0xff);\n    a = a >> (shift & 0xff) | b << (0x20 - shift & 0xff);\n    b = b >> (shift & 0xff);\n    count = shift + 0x432;\n  }\n  if (0xfffff < b) {\n    if (0x1fffff < b) {\n      bool_b = b & 1;\n      b = b >> 1;\n      bool_a = a & 1;\n      a = (uint)bool_b << 0x1f | a >> 1;\n      high_b = (uint)(bool_a & 1) << 0x1f | high_b >> 1;\n      count += 1;\n      if (0xffbfffff < (uint)(count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\n    while (high_b == 0x80000000) {\n      bool_c = (a & 1) != 0;\n      a = a >> 1;\n      high_b = high_b >> 1;\n      count += 1;\n      if (0xffbfffff < (uint)(count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\n    carry = 0x7fffffff < high_b;\n    if (high_b == 0x80000000) {\n      carry = (a & 1) != 0;\n    }\n    return CONCAT44(b + count * 0x100000 + (uint)CARRY4(a, (uint)carry), a + carry);\n  }\n  bool_a = (high_b & 0x80000000) != 0;\n  high_b = high_b << 1;\n  tmp_b = a * 2;\n  carry = CARRY4(a, a);\n  a = a * 2 + (uint)bool_a;\n  b = b * 2 + (uint)(carry || CARRY4(tmp_b, (uint)bool_a));\n  count -= 1;\n  while ((b & 0x100000) != 0) {\n    bool_b = b & 1;\n    b = b >> 1;\n    bool_a = a & 1;\n    a = (uint)bool_b << 0x1f | a >> 1;\n    high_b = (uint)(bool_a & 1) << 0x1f | high_b >> 1;\n    count += 1;\n    if (0xffbfffff < (uint)(count * 0x200000)) {\n      return 0x7ff0000000000000;\n    }\n  }\n  tmp_a = a;\n  tmp_b = b;\n  if (b == 0) {\n    tmp_a = 0;\n    tmp_b = a;\n  }\n  leading_zeros = count_leading_zeroes(tmp_b);\n  if (b == 0) {\n    leading_zeros += 0x20;\n  }\n  shift = leading_zeros - 0xb;\n  bool_c = SBORROW4(shift, 0x20);\n  uint shift_2 = leading_zeros - 0x2b;\n  bool_a = (int)shift_2 < 0;\n  bool_b = shift_2 == 0;\n  if ((int)shift < 0x20) {\n    bool_c = SCARRY4(shift_2, 0xc);\n    leading_zeros -= 0x1f;\n    bool_a = leading_zeros < 0;\n    bool_b = leading_zeros == 0;\n    shift = shift_2;\n    if (!bool_b && bool_a == bool_c) {\n      tmp_a = tmp_b << (shift & 0xff);\n      tmp_b = tmp_b >> (0xcU - leading_zeros & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bool_b || bool_a != bool_c) {\n    shift_2 = 0x20 - shift;\n  }\n  tmp_b = tmp_b << (shift & 0xff);\n  if (bool_b || bool_a != bool_c) {\n    tmp_b |= tmp_a >> (shift_2 & 0xff);\n  }\n  if (bool_b || bool_a != bool_c) {\n    tmp_a = tmp_a << (shift & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift <= count) {\n    return CONCAT44(tmp_b + (count - shift) * 0x100000, tmp_a);\n  }\n  shift_2 = ~(count - shift);\n  if (0x1e < (int)shift_2) {\n    return (ulonglong)(tmp_b >> (shift_2 - 0x1f & 0xff));\n  }\n  count = shift_2 - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift_2 - 0x1f, 0xc)) {\n    shift_2 += 1;\n    return CONCAT44(tmp_b >> (shift_2 & 0xff), tmp_a >> (shift_2 & 0xff) | tmp_b << (0x20 - shift_2 & 0xff));\n  }\n  return (ulonglong)(tmp_a >> (0x20 - (0xcU - count) & 0xff) | tmp_b << (0xcU - count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000464",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000464"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "set_timer_output_compare_08002404",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "cc_enabled",
                "uVar2": "cr2",
                "uVar3": "oc_mode",
                "DAT_08002458": "TIMER1"
            },
            "code": "void set_timer_output_compare_08002404(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config)\n{\n  uint32_t cc_enabled_mask = 0xffffffef;\n  uint32_t cr2 = timer->CR2;\n  uint32_t oc_mode = config->OCMode;\n  uint32_t cc_enabled = (timer->CCER & cc_enabled_mask) | (config->OCPolarity << 4);\n  if (timer == DAT_08002458) {\n    cc_enabled = (cc_enabled & 0xffffff7f) | (config->OCNPolarity << 4);\n    cr2 = (cr2 & 0xfffff3ff) | ((config->OCIdleState | config->OCNIdleState) << 2);\n  }\n  timer->CR2 = cr2;\n  timer->CCMR1 = (timer->CCMR1 & 0xffff8cff) | (oc_mode << 8);\n  timer->CCR2 = config->Pulse;\n  timer->CCER = cc_enabled;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_08005bc8",
                "__x": "input",
                "cVar1": "versionChar",
                "iVar2": "errorFlag",
                "piVar3": "errorPtr",
                "puVar4": "errnoPtr",
                "dVar5": "result",
                "extraout_d0": "nanResult",
                "extraout_d0_00": "zeroResult",
                "extraout_d0_01": "divResult",
                "extraout_d0_02": "nanResult",
                "extraout_d0_03": "divResult",
                "local_50": "errInfo",
                "local_38": "zeroInfo",
                "local_30": "mathErr"
            },
            "code": "double calculate_08005bc8(double input) {\n  double result;\n  char versionChar;\n  int errorFlag;\n  int *errorPtr;\n  undefined4 *errnoPtr;\n  double nanResult;\n  double zeroResult;\n  double divResult;\n  undefined errInfo [24];\n  undefined8 zeroInfo;\n  int mathErr;\n  result = (double)__ieee754_calculate_08005bc8();\n  versionChar = *PTR___fdlib_version_08005c68;\n  if (versionChar == -1) {\n    return result;\n  }\n  errorFlag = __unorddf2();\n  if (errorFlag != 0) {\n    return nanResult;\n  }\n  if (__aeabi_dcmplt() == 0) {\n    return zeroResult;\n  }\n  errInfo._0_4_ = 1;\n  errInfo._4_4_ = PTR_DAT_08005c6c;\n  if (versionChar == '\\0') {\n    zeroInfo = 0.0;\nLAB_08005c26:\n    mathErr = matherr((exception *)errInfo);\n    result = divResult;\n    if (mathErr != 0) goto LAB_08005c2e;\n  }\n  else {\n    zeroInfo = (double)__divdf3(0,0,0,0);\n    if (versionChar != '\\x02') goto LAB_08005c26;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\n  result = divResult;\nLAB_08005c2e:\n  if (errorFlag != 0) {\n    errorPtr = (int *)__errno();\n    *errorPtr = errorFlag;\n    result = nanResult;\n  }\n  return result;\n}",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "matherr",
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "checkI2CStatus_08001436",
                "*hi2c": "*i2c_handle",
                "pIVar1": "i2c_instance",
                "SR1": "I2C_SR1_AF",
                "ErrorCode": "HAL_I2C_ERROR_AF",
                "State": "HAL_I2C_STATE_READY",
                "Lock": "HAL_UNLOCKED",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef checkI2CStatus_08001436(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_TypeDef *i2c_instance;\n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->SR1 & I2C_SR1_AF) != 0)\n  {\n    i2c_instance->SR1 &= ~I2C_SR1_AF;\n    i2c_handle->ErrorCode = HAL_I2C_ERROR_AF;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "checkI2CStatus_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "get_altitude_pid_08004a30",
                "PTR_pid_altitude_08004a7c": "pid_altitude",
                "PTR_ALT_FLAG_08004a78": "alt_flag",
                "PTR_joystick_08004a74": "joystick"
            },
            "code": "void get_altitude_pid_08004a30(void)\\n{\\n  float *PTR_pid_altitude_08004a7c = PTR_PTR_pid_altitude_08004a7c_08004a7c;\\n  char *PTR_ALT_FLAG_08004a78 = PTR_ALT_FLAG_08004a78;\\n  char *PTR_joystick_08004a74 = PTR_PTR_joystick_08004a74_08004a74;\\n  if (PTR_joystick_08004a74[1] != \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 == \"\\0\") {\\n      MS5611_GetFilteredAltitude();\\n      float altitude = __aeabi_fmul();\\n      *(float *)(PTR_pid_altitude_08004a7c + 0x1c) = altitude;\\n      *PTR_ALT_FLAG_08004a78 = 1;\\n    }\\n    else {\\n      MS5611_GetFilteredAltitude();\\n      float altitude = __aeabi_fmul();\\n      *(float *)(PTR_pid_altitude_08004a7c + 0x30) = altitude;\\n    }\\n  }\\n  if (PTR_joystick_08004a74[1] == \"\\0\") {\\n    if (*PTR_ALT_FLAG_08004a78 != \"\\0\") {\\n      *PTR_ALT_FLAG_08004a78 = 0;\\n    }\\n    *(float *)(PTR_pid_altitude_08004a7c + 0x48) = *(float *)(PTR_joystick_08004a74 + 4);\\n  }\\n  return;\\n}",
            "called": [
                "__aeabi_fmul",
                "MS5611_GetFilteredAltitude"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "get_altitude_pid_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "receive_uart_data_08004c70",
                "PTR_huart1_08004c88": "huart1_ptr",
                "PTR_rx_buffer_08004c84": "rx_buffer_ptr"
            },
            "code": "void receive_uart_data_08004c70(void)\n{\n  serialFlush();\n  HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_huart1_08004c88,PTR_rx_buffer_08004c84,1);\n  return;\n}",
            "called": [
                "serialFlush",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_collision_08000904",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "bVar2": "x_diff_zero",
                "bVar3": "x2_gt_x1",
                "uVar1": "x_diff"
            },
            "code": "uint check_collision_08000904(uint x1, uint y1, uint x2, uint y2)\n{\n  bool x1_y1_zero = (x1 | y1 << 1) == 0;\n  bool x2_y2_zero = (x2 | y2 << 1) == 0;\n  if (x1_y1_zero && x2_y2_zero)\n  {\n    return 1;\n  }\n  if (x1 == x2 && y1 == y2)\n  {\n    return 1;\n  }\n  uint x_diff = x1 ^ x2;\n  bool x_diff_zero = x_diff == 0;\n  if (x_diff_zero)\n  {\n    return y1 <= y2;\n  }\n  bool x2_gt_x1 = x2 > x1;\n  bool y2_gt_y1 = y2 > y1;\n  bool x_diff_gt_y_diff = x_diff > (y2 - y1);\n  if (x_diff_gt_y_diff == x2_gt_x1)\n  {\n    return y1 <= y2;\n  }\n  return y1 > y2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_collision_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "receive_uart_data": "receive_uart_data",
                "*huart": "*huart",
                "uint": "uint32_t",
                "uint16_t": "uint16_t",
                "puVar4": "tx_buffer_ptr",
                "HVar5": "state",
                "pUVar6": "uart_instance",
                "uVar1": "control_register",
                "uVar2": "tx_transfer_count",
                "uVar3": "status_register",
                "uVar7": "error_code",
                "uVar8": "is_transmitting_and_receiving",
                "bVar9": "is_parity_error",
                "FUN_0800299a": "receive_uart_data_0800299a"
            },
            "code": "void receive_uart_data_0800299a(UART_HandleTypeDef *huart)\n{\n  uint32_t status_register;\n  uint32_t control_register;\n  uint32_t error_code;\n  HAL_UART_StateTypeDef state;\n  USART_TypeDef *uart_instance;\n  uint32_t tx_transfer_count;\n  uint16_t *tx_buffer_ptr;\n  uint32_t parity;\n  uint32_t word_length;\n  bool is_transmitting_and_receiving;\n  bool is_transmitting;\n  bool is_receiving;\n\n  uart_instance = huart->Instance;\n  status_register = uart_instance->SR;\n  control_register = uart_instance->CR1;\n  is_transmitting_and_receiving = (huart->State == HAL_UART_STATE_BUSY_TX_RX);\n  is_transmitting = (huart->State == HAL_UART_STATE_BUSY_TX);\n  is_receiving = (huart->State == HAL_UART_STATE_BUSY_RX);\n\n  if ((status_register & USART_SR_RXNE) == 0)\n  {\n    if (((int32_t)(status_register << USART_SR_RXNE_Pos) < 0) && ((int32_t)(control_register << USART_CR1_RXNEIE_Pos) < 0))\n    {\n      UART_Receive_IT(huart);\n      return;\n    }\n  }\n  else\n  {\n    if ((uart_instance->CR3 & USART_CR3_EIE) || ((control_register & (USART_CR1_PEIE | USART_CR1_RXNEIE)) != 0))\n    {\n      error_code = status_register << USART_SR_ERROR_Pos;\n      if ((int32_t)error_code < 0)\n      {\n        bool is_parity_error = (int32_t)(control_register << USART_CR1_M_Pos) < 0;\n        if (is_parity_error)\n        {\n          error_code = huart->ErrorCode | HAL_UART_ERROR_PE;\n        }\n        if (is_parity_error)\n        {\n          huart->ErrorCode = error_code;\n        }\n      }\n      if (((int32_t)(status_register << USART_SR_FE_Pos) < 0) && (uart_instance->CR3 & USART_CR3_EIE))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_FE;\n      }\n      if (((int32_t)(status_register << USART_SR_NE_Pos) < 0) && (uart_instance->CR3 & USART_CR3_EIE))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_NE;\n      }\n      if (((int32_t)(status_register << USART_SR_ORE_Pos) < 0) && (uart_instance->CR3 & USART_CR3_EIE))\n      {\n        huart->ErrorCode |= HAL_UART_ERROR_ORE;\n      }\n      if (huart->ErrorCode == 0)\n      {\n        return;\n      }\n      if (((int32_t)(status_register << USART_SR_RXNE_Pos) < 0) && ((int32_t)(control_register << USART_CR1_RXNEIE_Pos) < 0))\n      {\n        UART_Receive_IT(huart);\n      }\n      if ((int32_t)(huart->ErrorCode << HAL_UART_ERROR_CODE_Pos) >= -2147483647 && ((uart_instance->CR3 & USART_CR3_EIE) == 0))\n      {\n        HAL_UART_ErrorCallback(huart);\n        huart->ErrorCode = 0;\n        return;\n      }\n      uart_instance->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_RXNEIE);\n      uart_instance->CR3 &= ~USART_CR3_HDSEL;\n      state = HAL_UART_STATE_READY;\n      if (is_transmitting_and_receiving || is_transmitting)\n      {\n        state = HAL_UART_STATE_BUSY_TX;\n      }\n      huart->State = state;\n      HAL_UART_ErrorCallback(huart);\n      return;\n    }\n  }\n  if (((int32_t)(status_register << USART_SR_TC_Pos) < 0) && ((int32_t)(control_register << USART_CR1_TCIE_Pos) < 0))\n  {\n    if ((huart->State & HAL_UART_STATE_BUSY_TX) == HAL_UART_STATE_BUSY_TX)\n    {\n      tx_buffer_ptr = (uint16_t *)huart->pTxBuffPtr;\n      parity = (huart->Init).Parity;\n      word_length = (huart->Init).WordLength;\n      if (word_length == USART_WORDLENGTH_9B)\n      {\n        uart_instance->DR = (*tx_buffer_ptr) & 0x1FF;\n        if (parity == USART_PARITY_NONE)\n        {\n          tx_buffer_ptr++;\n        }\n        else\n        {\n          tx_buffer_ptr = (uint16_t *)((uint32_t)tx_buffer_ptr + 1);\n        }\n        huart->pTxBuffPtr = (uint8_t *)tx_buffer_ptr;\n      }\n      else\n      {\n        huart->pTxBuffPtr = (uint8_t *)((uint32_t)tx_buffer_ptr + 1);\n        uart_instance->DR = (uint32_t)(*(uint8_t *)tx_buffer_ptr);\n      }\n      tx_transfer_count = huart->TxXferCount - 1;\n      huart->TxXferCount = tx_transfer_count;\n      if (tx_transfer_count == 0)\n      {\n        uart_instance->CR1 &= ~USART_CR1_TXEIE;\n        uart_instance->CR1 |= USART_CR1_TCIE;\n        return;\n      }\n    }\n  }\n  else if (((int32_t)(status_register << USART_SR_TXE_Pos) < 0) && ((int32_t)(control_register << USART_CR1_TXEIE_Pos) < 0))\n  {\n    uart_instance->CR1 &= ~USART_CR1_TXEIE;\n    if (is_transmitting_and_receiving)\n    {\n      huart->State = HAL_UART_STATE_BUSY_RX;\n    }\n    else\n    {\n      huart->State = HAL_UART_STATE_READY;\n    }\n    HAL_UART_TxCpltCallback(huart);\n  }\n}\n",
            "called": [
                "HAL_UART_ErrorCallback",
                "HAL_UART_TxCpltCallback",
                "UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [
                "USART1_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_uart_data_0800299a"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "data_start",
                "param_2": "data",
                "param_3": "data_end",
                "param_4": "data_type",
                "param_5": "callback",
                "iVar1": "current_byte_index",
                "uVar2": "data_length",
                "uVar3": "padding_length",
                "bVar4": "is_padded"
            },
            "code": "undefined4 process_data_080052e4(uint32_t data_start, uint32_t *data, uint32_t *data_end, uint32_t data_type, code *callback)\n{\n  int current_byte_index;\n  uint32_t data_length;\n  uint32_t padding_length;\n  bool is_padded;\n  \n  data_length = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    data_length = data[2];\n  }\n  *data_end = data_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *data_end = data_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *data_end = *data_end + 2;\n  }\n  current_byte_index = *data & 6;\n  if (current_byte_index == 0) {\n    for (; (int)current_byte_index < (int)(data[3] - *data_end); current_byte_index = current_byte_index + 1) {\n      int callback_return = (*callback)(data_start, data_type, (int)data + 0x19, 1);\n      if (callback_return == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  padding_length = (uint32_t)*(byte *)((int)data + 0x43);\n  if (padding_length != 0) {\n    padding_length = 1;\n  }\n  uint32_t data_text_start = padding_length;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + padding_length + 0x43) = 0x30;\n    data_text_start = padding_length + 2;\n    *(undefined *)((int)data + padding_length + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  int callback_return = (*callback)(data_start, data_type, (int)data + 0x43, data_text_start);\n  if (callback_return != -1) {\n    uint32_t data_total_length = data[3];\n    is_padded = (*data & 6) != 4;\n    if (is_padded) {\n      data_total_length = 0;\n    }\n    uint32_t data_text_length = 0;\n    if (!is_padded) {\n      data_total_length = data_total_length - *data_end;\n    }\n    if (!is_padded) {\n      data_total_length = data_total_length & ~((int)data_total_length >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      data_total_length = data_total_length + (data[2] - data[4]);\n    }\n    while (true) {\n      if (data_total_length == data_text_length) {\n        return 0;\n      }\n      int callback_return = (*callback)(data_start, data_type, (int)data + 0x1a, 1);\n      if (callback_return == -1) {\n        break;\n      }\n      data_text_length = data_text_length + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_08000f94": {
            "renaming": {
                "FUN_08000f94": "calculate_result_08000f94",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "combined_input",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f94(uint input_1,uint input_2)\n{\n  bool is_negative;\n  uint result_1;\n  uint result_2;\n  uint combined_input;\n  bool is_zero;\n  \n  result_1 = input_1 * 2;\n  result_2 = input_2 * 2;\n  \n  if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) &&\n     ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  combined_input = result_1 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = result_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && result_2 <= result_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || result_2 > result_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f94",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f94"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "wait_for_i2c_ack_080014e2",
                "*hi2c": "*i2c_handler",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "Timeout": "timeout"
            },
            "code": "HAL_StatusTypeDef wait_for_i2c_ack_080014e2(I2C_HandleTypeDef *i2c_handler, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time = HAL_GetTick();\n    while(1) {\n        if ((int)(i2c_handler->Instance->SR1 << 0x18) < 0) {\n            return HAL_OK;\n        }\n        status = I2C_IsAcknowledgeFailed(i2c_handler);\n        if (status != HAL_OK) {\n            break;\n        }\n        if ((timeout != 0xffffffff) && (timeout == 0 || (HAL_GetTick() - start_time) > timeout)) {\n            i2c_handler->ErrorCode |= 0x20;\n            i2c_handler->State = HAL_I2C_STATE_READY;\n            i2c_handler->Lock = HAL_UNLOCKED;\n            return HAL_TIMEOUT;\n        }\n    }\n    return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "wait_for_i2c_ack_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "toggle_gpio_output_pin_0800142e",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "ODR": "current_odr_value",
                "uint": "uint32_t",
                "^": "^ (uint32_t)"
            },
            "code": "void toggle_gpio_output_pin_0800142e(GPIO_TypeDef *gpio, uint16_t pin)\n{\n  uint32_t current_odr_value = gpio->ODR;\n  uint32_t new_odr_value = current_odr_value ^ (uint32_t)pin;\n  gpio->ODR = new_odr_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "toggle_gpio_output_pin_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_timer_flags_08004d8c",
                "htim_pwm": "timer_handle",
                "pTVar1": "timer_instance",
                "tmpreg": "timer_flag",
                "tmpreg_1": "timer_flag_bit_1",
                "tmpreg_2": "timer_control_register_1",
                "tmpreg_3": "timer_flag_bit_2",
                "DAT_08004e04": "timer_1_instance",
                "TIM_TypeDef": "timer_instance",
                "uint": "uint32_t",
                "_DAT_4002101c": "timer_control_register_1",
                "(TIM_TypeDef *)0x40000000": "timer_2_instance",
                "DAT_08004e0c": "timer_3_instance",
                "DAT_08004e10": "timer_4_instance",
                "*(uint *)(DAT_08004e08 + 0x18)": "timer_flag_register_1",
                "*(uint *)(DAT_08004e08 + 0x1c)": "timer_flag_register_2"
            },
            "code": "void update_timer_flags_08004d8c(TIM_HandleTypeDef *timer_handle)\n{\n  TIM_TypeDef *timer_instance;\n  uint32_t timer_flag;\n  timer_instance = timer_handle->Instance;\n  if (timer_instance == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) |= timer_flag_bit_1;\n  }\n  else if (timer_instance == timer_2_instance) {\n    _DAT_4002101c |= timer_control_bit_1;\n  }\n  else if (timer_instance == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= timer_flag_bit_2;\n  }\n  else if (timer_instance == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= timer_flag_bit_3;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "update_timer_flags_08004d8c"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009b4(void)\n{\n  char current_char;\n  __aeabi_cdcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009b4"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "calculate_result_08003068",
                "in_s0": "input_value"
            },
            "code": "float calculate_result_08003068(void)\n{\n  float input_value;\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "calculate_result_08003068"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "calculate_result_08000f8c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "abs_input_1",
                "uVar3": "abs_input_2",
                "uVar4": "result",
                "bVar1": "is_result_negative",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_08000f8c(uint input_1, uint input_2)\n{\n  bool is_negative_1 = input_1 >> 31;\n  bool is_negative_2 = input_2 >> 31;\n  uint abs_input_1 = (input_1 ^ (input_1 >> 31)) - (input_1 >> 31);\n  uint abs_input_2 = (input_2 ^ (input_2 >> 31)) - (input_2 >> 31);\n  if ((is_negative_1 || is_negative_2) && ((is_negative_1 && abs_input_1 != 0) || (is_negative_2 && abs_input_2 != 0))) {\n    return 0xffffffff;\n  }\n  uint result = (input_1 << 1) | (input_2 & 0x7fffffff);\n  bool is_result_zero = result == 0;\n  if (!is_result_zero) {\n    result = input_1 ^ input_2;\n    is_result_zero = result == 0;\n  }\n  bool is_result_negative = (int)result < 0;\n  if (is_result_negative) {\n    result = (input_1 << 1) + (input_2 << 31);\n    is_result_zero = result == 0;\n  }\n  if (is_result_negative && abs_input_2 <= abs_input_1 && !is_result_zero) {\n    input_1 = (int)input_2 >> 31;\n  }\n  if (!is_result_negative || abs_input_2 > abs_input_1) {\n    input_1 = ~(int)input_2 >> 31;\n  }\n  if (!is_result_zero) {\n    input_1 |= 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f8c"
        },
        "FUN_08000474": {
            "renaming": {
                "FUN_08000474": "calculate_08000474",
                "param_1": "dividend",
                "param_2": "divisor",
                "bVar1": "low_byte",
                "uVar2": "low_bits",
                "uVar3": "quotient",
                "uVar4": "dividend_copy",
                "iVar5": "leading_zeros",
                "iVar7": "shift",
                "uVar6": "double_dividend",
                "uVar8": "sign_mask",
                "uVar9": "high_bits",
                "bVar10": "dividend_sign",
                "bVar11": "round_up",
                "bVar12": "shift_overflow",
                "non_zero_dividend": "non_zero_dividend",
                "adjustment": "adjustment",
                "adjustment_copy": "adjustment_copy",
                "low_bit": "low_bit",
                "shift_amount": "shift_amount",
                "shift_amount_copy": "shift_amount_copy",
                "carry": "carry",
                "high_bits_copy": "high_bits_copy"
            },
            "code": "ulonglong calculate_08000474(uint dividend, uint divisor)\n{\n  if ((dividend | divisor) == 0) {\n    return CONCAT44(divisor, dividend);\n  }\n  uint sign_mask = divisor & 0x80000000;\n  uint dividend_copy = dividend;\n  if ((int)sign_mask < 0) {\n    bool non_zero_dividend = dividend != 0;\n    dividend = -dividend;\n    dividend_copy = -divisor - (uint)non_zero_dividend;\n  }\n  int shift = 0x432;\n  uint quotient = dividend_copy >> 0x16;\n  if (quotient != 0) {\n    shift = 3;\n    if (dividend_copy >> 0x19 != 0) {\n      shift = 6;\n    }\n    if (dividend_copy >> 0x1c != 0) {\n      shift += 3;\n    }\n    int adjustment = shift - ((int)dividend_copy >> 0x1f);\n    uint high_bits = dividend << (0x20 - adjustment & 0xff);\n    dividend = dividend >> (adjustment & 0xff) | dividend_copy << (0x20 - adjustment & 0xff);\n    dividend_copy = dividend_copy >> (adjustment & 0xff);\n    shift = adjustment + 0x432;\n  }\n  if (0xfffff < dividend_copy) {\n    if (0x1fffff < dividend_copy) {\n      uint low_bit = dividend_copy & 1;\n      dividend_copy = dividend_copy >> 1;\n      uint low_byte = (byte)dividend;\n      dividend = (uint)(low_bit != 0) << 0x1f | dividend >> 1;\n      high_bits = (uint)(low_byte & 1) << 0x1f | high_bits >> 1;\n      shift += 1;\n      if (0xffbfffff < (uint)(shift * 0x200000)) {\n        return (ulonglong)(sign_mask | 0x7ff00000) << 0x20;\n      }\n    }\n    bool round_up = 0x7fffffff < high_bits;\n    if (high_bits == 0x80000000) {\n      round_up = (dividend & 1) != 0;\n    }\n    return CONCAT44(dividend_copy + shift * 0x100000 + (uint)CARRY4(dividend,(uint)round_up) | sign_mask, dividend + round_up);\n  }\n  bool dividend_sign = (quotient & 0x80000000) != 0;\n  quotient = quotient << 1;\n  uint double_dividend = dividend * 2;\n  bool carry = CARRY4(dividend, dividend);\n  dividend = double_dividend + (uint)dividend_sign;\n  dividend_copy = dividend_copy * 2 + (uint)(carry || CARRY4(double_dividend,(uint)dividend_sign));\n  shift = shift + -1;\n  if ((dividend_copy & 0x100000) != 0) goto LAB_08000278;\n  uint low_bits = dividend;\n  uint high_bits_copy = dividend_copy;\n  if (dividend_copy == 0) {\n    low_bits = 0;\n    high_bits_copy = dividend;\n  }\n  int leading_zeros = count_leading_zeroes(high_bits_copy);\n  if (dividend_copy == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  int shift_amount = leading_zeros - 0xb;\n  bool shift_overflow = SBORROW4(shift_amount, 0x20);\n  int adjustment = leading_zeros - 0x2b;\n  bool adjustment_negative = adjustment < 0;\n  bool adjustment_zero = adjustment == 0;\n  if ((int)shift_amount < 0x20) {\n    shift_overflow = SCARRY4(adjustment, 0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    adjustment_negative = leading_zeros < 0;\n    adjustment_zero = leading_zeros == 0;\n    shift_amount = shift_amount;\n    if (!adjustment_zero && adjustment_negative == shift_overflow) {\n      low_bits = high_bits_copy << (shift_amount & 0xff);\n      high_bits_copy = high_bits_copy >> (0xcU - leading_zeros & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (adjustment_zero || adjustment_negative != shift_overflow) {\n    int shift_amount_copy = 0x20 - shift_amount;\n    low_bits = high_bits_copy << (shift_amount & 0xff);\n    if (adjustment_zero || adjustment_negative != shift_overflow) {\n      low_bits = low_bits | low_bits >> (shift_amount_copy & 0xff);\n    }\n    if (adjustment_zero || adjustment_negative != shift_overflow) {\n      high_bits_copy = high_bits_copy << (shift_amount & 0xff);\n    }\n  }\nLAB_080002f0:\n  if ((int)shift_amount <= shift) {\n    return CONCAT44(high_bits_copy + (shift - shift_amount) * 0x100000 | sign_mask, low_bits);\n  }\n  uint shift_amount_copy = ~(shift - shift_amount);\n  if (0x1e < (int)shift_amount_copy) {\n    return CONCAT44(divisor, high_bits_copy >> (shift_amount_copy - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int adjustment_copy = shift_amount_copy - 0x13;\n  if (adjustment_copy == 0 || adjustment_copy < 0 != SCARRY4(shift_amount_copy - 0x1f, 0xc)) {\n    shift_amount_copy = shift_amount_copy + 1;\n    return CONCAT44(sign_mask | high_bits_copy >> (shift_amount_copy & 0xff), low_bits >> (shift_amount_copy & 0xff) | high_bits_copy << (0x20 - shift_amount_copy & 0xff));\n  }\n  return CONCAT44(divisor, low_bits >> (0x20 - (0xcU - adjustment_copy) & 0xff) | high_bits_copy << (0xcU - adjustment_copy & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000474",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000474"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_init_status_and_return_pointer_08000110",
                "param_1": "pointer_to_data"
            },
            "code": "undefined * check_init_status_and_return_pointer_08000110(undefined *pointer_to_data){\n    if (*PTR_completed_8672_08000128 == \"\\0\") {\n        if (DAT_0800012c != 0) {\n            pointer_to_data = PTR__init_08000130;\n        }\n        *PTR_completed_8672_08000128 = 1;\n    }\n    return pointer_to_data;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_init_status_and_return_pointer_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "returnZeroOnException_0800709e",
                "__exc": "__exception"
            },
            "code": "int returnZeroOnException_0800709e(exception *__exc) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "returnZeroOnException_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_filtered_pitch_angle_08002ec0",
                "in_s0": "current_pitch_angle",
                "fVar1": "filtered_pitch_angle",
                "lowPassFilter": "low_pass_filter_pitch_angle",
                "PTR_lpf_pitch_08002ed0": "PTR_lpf_pitch_filter"
            },
            "code": "float calculate_filtered_pitch_angle_08002ec0(void)\n{\n  float current_pitch_angle;\n  float filtered_pitch_angle;\n\n  current_pitch_angle = read_current_pitch_angle();\n  filtered_pitch_angle = low_pass_filter_pitch_angle((LPF *)PTR_lpf_pitch_08002ed0,current_pitch_angle);\n\n  return filtered_pitch_angle;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_filtered_pitch_angle_08002ec0"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_product_08006c0c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "quotient1",
                "uVar2": "quotient2",
                "iVar3": "exponent1",
                "uVar4": "exponent2",
                "uVar5": "quotient3",
                "uVar6": "quotient4",
                "iVar7": "exponent3",
                "uVar8": "product",
                "uVar9": "uVar9",
                "uVar11": "uVar11",
                "uVar12": "uVar12"
            },
            "code": "uint calculate_product_08006c0c(uint num1, uint num2)\n{\n    uint quotient1;\n    uint quotient2;\n    int exponent1;\n    uint exponent2;\n    uint quotient3;\n    uint quotient4;\n    int exponent3;\n    uint product;\n    if ((0x80000000 & ~num2) == 0) {\n        product = num1 * num2;\n        product = product + num1 + num2;\n        return product;\n    }\n    if ((int)num2 < 1) {\n        if ((num2 & 0x7fffffff | num1) == 0) {\n            return ((uint64_t)num2 << 32) | num1;\n        }\n        if (num2 != 0) {\n            product = num1 - num2;\n            quotient1 = product / num2;\n            return quotient1;\n        }\n    }\n    exponent1 = (int)num2 >> 0x14;\n    if (exponent1 == 0) {\n        while (num2 == 0) {\n            exponent1 = exponent1 + -0x15;\n            num2 = num1 >> 0xb;\n            num1 = num1 << 0x15;\n        }\n        quotient2 = 0;\n        for (; -1 < (int)(num2 << 0xb); num2 = num2 << 1) {\n            quotient2 = quotient2 + 1;\n        }\n        exponent1 = exponent1 - (quotient2 - 1);\n        num2 = num2 | num1 >> (0x20 - quotient2 & 0xff);\n        num1 = num1 << (quotient2 & 0xff);\n    }\n    exponent2 = 0x16;\n    quotient3 = num2 & 0xfffff | 0x100000;\n    if ((exponent1 + -0x3ff) * -0x80000000 < 0) {\n        quotient3 = quotient3 * 2 - (num1 >> 0x1f);\n        num1 = num1 << 1;\n    }\n    quotient3 = quotient3 * 2 - (num1 >> 0x1f);\n    quotient4 = 0;\n    uint bit_shift = 0x200000;\n    num1 = num1 << 1;\n    do {\n        int sum = quotient4 + bit_shift;\n        if (sum <= (int)quotient3) {\n            quotient3 = quotient3 - sum;\n            quotient4 = sum + bit_shift;\n            exponent2 = exponent2 + bit_shift;\n        }\n        exponent2 = exponent2 - 1;\n        quotient3 = quotient3 * 2 - (num1 >> 0x1f);\n        bit_shift = bit_shift >> 1;\n        num1 = num1 << 1;\n    } while (exponent2 != 0);\n    uint exponent4 = 0x20;\n    uint divisor = 0x80000000;\n    quotient4 = exponent2;\n    do {\n        uint sum = divisor + quotient4;\n        uint quotient5 = quotient4;\n        if (((int)exponent2 < (int)quotient3) || ((quotient3 == exponent2) && (sum <= num1)))) {\n            quotient4 = sum + divisor;\n            if (((int)sum < 0) && (-1 < (int)quotient4)) {\n                quotient5 = quotient4 + 1;\n            }\n            exponent2 = exponent2 - quotient5;\n            if (num1 < sum) {\n                exponent2 = exponent2 - 1;\n            }\n            num1 = num1 - sum;\n            exponent4 = exponent4 + divisor;\n        }\n        quotient3 = quotient3 * 2 - (num1 >> 0x1f);\n        exponent4 = exponent4 - 1;\n        num1 = num1 << 1;\n        divisor = divisor >> 1;\n        quotient4 = quotient5;\n    } while (exponent4 != 0);\n    if ((num1 | quotient3) != 0) {\n        if (quotient4 == 0xffffffff) {\n            exponent2 = exponent2 + 1;\n            quotient4 = exponent4;\n        }\n        else {\n            quotient4 = quotient4 + 1 & 0xfffffffe;\n        }\n    }\n    quotient4 = quotient4 >> 1;\n    if (exponent2 < 0) {\n        quotient4 = quotient4 | 0x80000000;\n    }\n    return ((exponent4 >> 1) + 0x3fe00000 + (exponent1 + -0x3ff >> 1) * 0x100000) << 32 | quotient4;\n}",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "sqrt",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_product_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "Motor_SpeedControl_0800426c",
                "throttle": "throttle",
                "pitch": "pitch",
                "roll": "roll",
                "yaw": "yaw",
                "uVar1": "throttle_diff",
                "uVar2": "pitch_diff",
                "uVar3": "roll_diff",
                "m4": "motor4_speed",
                "m3": "motor3_speed",
                "m2": "motor2_speed",
                "m1": "motor1_speed",
                "PTR_080042fc": "THROTTLE_OFFSET",
                "__aeabi_fsub": "subtract_float",
                "__addsf3": "add_float",
                "__aeabi_f2iz": "convert_float_to_int",
                "DAT_080042fc": "THROTTLE_OFFSET"
            },
            "code": "void Motor_SpeedControl_0800426c(float throttle, float pitch, float roll, float yaw)\n{\n  float throttle_diff = throttle - PTR_080042fc;\n  float pitch_diff = pitch - PITCH_OFFSET;\n  float roll_diff = roll - ROLL_OFFSET;\n  float yaw_diff = yaw - YAW_OFFSET;\n  int motor4_speed = (int)(throttle_diff + pitch_diff - roll_diff + yaw_diff);\n  int motor3_speed = (int)(throttle_diff - pitch_diff - roll_diff - yaw_diff);\n  int motor2_speed = (int)(throttle_diff - pitch_diff + roll_diff + yaw_diff);\n  int motor1_speed = (int)(throttle_diff + pitch_diff + roll_diff - yaw_diff);\n  Motor_SetSpeed(motor1_speed, motor2_speed, motor3_speed, motor4_speed);\n  return;\n}",
            "called": [
                "Motor_SetSpeed",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "Motor_SpeedControl_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "set_timer_channel_08002538",
                "*htim": "*timer_handle",
                "Channel": "channel",
                "*pTVar1": "*dat_08002560",
                "*pTVar2": "*timer_instance"
            },
            "code": "HAL_StatusTypeDef set_timer_channel_08002538(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  TIM_TypeDef *timer_instance = timer_handle->Instance;\n  TIM_TypeDef *dat_08002560 = DAT_08002560;\n  TIM_CCxChannelCmd(timer_instance, channel, 1);\n  if (timer_instance == dat_08002560) {\n    dat_08002560 = (TIM_TypeDef *)(timer_instance->BDTR | 0x8000);\n  }\n  if (timer_instance == dat_08002560) {\n    timer_instance->BDTR = (uint32_t)dat_08002560;\n  }\n  timer_instance->CR1 |= 1;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "PWM_Init"
            ],
            "imported": false,
            "current_name": "set_timer_channel_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "read_i2c_data_080040e8",
                "device_add": "device_address",
                "register_add": "register_address",
                "byte_array": "data_array",
                "size": "data_size",
                "file": "filename",
                "line": "line_number",
                "uVar1": "data_byte",
                "iVar2": "i",
                "puVar3": "data_ptr"
            },
            "code": "void read_i2c_data_080040e8(uint16_t device_address, uint16_t register_address, uint8_t *data_array, uint16_t data_size, char *filename, int line_number)\n{\n    uint8_t *data_ptr = data_array - 1;\n    for (int i = 0; i < (int)data_size; i++) {\n        uint8_t data_byte = I2C_ReadByte(device_address, register_address + (short)i, PTR_s____Src_i2c_c_08004118, 0x4c);\n        data_ptr++;\n        *data_ptr = data_byte;\n    }\n    return;\n}",
            "called": [
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "AK8963_ReadData",
                "MS5611_Init",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080040e8"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar4": "initial_value",
                "uVar3": "sign_bit",
                "uVar5": "carry",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "result": "result",
                "shifted_output": "shifted_output"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint sign_bit = input & 0x80000000;\n  uint abs_input = (sign_bit < 0) ? -input : input;\n\n  if (abs_input == 0) {\n    return 0;\n  }\n\n  uint shift_amount = leading_zeroes_count - 8;\n  uint initial_value = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n\n  if (leading_zeroes_count > 7) {\n    uint shifted_input = abs_input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = initial_value + shifted_input + shifted_zero + carry;\n\n    if (shifted_zero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n\n    return result;\n  }\n\n  uint shifted_input = abs_input << (leading_zeroes_count + 0x18U & 0xff);\n  uint shifted_output = (abs_input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n\n  if ((shifted_input & 0x7fffffff) == 0) {\n    shifted_output = shifted_output & ~(shifted_input >> 0x1f);\n  }\n\n  return shifted_output + initial_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "MS5611_Update",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a04(uint32_t input1, int input2, uint32_t input3, int input4) {\n\tint is_valid = 1;\n\tint shift_value = 0x15;\n\tuint32_t mask = 0xFFF;\n\tif (((input2 << 1) >> shift_value != -1) || ((input1 | (input2 << 0xC)) == 0) || ((input4 << 1) >> shift_value != -1 || ((input3 | (input4 << 0xC)) == 0)))) {\n\t\tis_valid = 0;\n\t}\n\treturn is_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "configure_uart_080025e8",
                "*huart": "*uart_handle",
                "uVar1": "pclk_freq",
                "uVar2": "baud_div",
                "uVar3": "oversampling",
                "iVar4": "mantissa",
                "uVar5": "stop_bits",
                "iVar6": "fraction",
                "pUVar7": "uart_instance",
                "(huart->Init).Parity": "parity",
                "(huart->Init).StopBits": "stop_bits",
                "(huart->Init).WordLength": "oversampling",
                "(huart->Init).Mode": "mode",
                "(huart->Init).HwFlowCtl": "hw_flow_control",
                "DAT_08002720": "PTR_DAT_08002720",
                "(huart->Init).BaudRate": "baud_rate",
                "CR1": "cr1",
                "CR2": "cr2",
                "CR3": "cr3",
                "BRR": "baud_rate_register"
            },
            "code": "void configure_uart_080025e8(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq, baud_div, mantissa, fraction, oversampling, parity, stop_bits, hw_flow_control, cr1, cr2, cr3;\n  USART_TypeDef *uart_instance;\n  uart_instance = uart_handle->Instance;\n  parity = (uart_handle->Init).Parity;\n  stop_bits = (uart_handle->Init).StopBits;\n  oversampling = (uart_handle->Init).WordLength;\n  cr1 = uart_instance->CR1 & 0xffffe9f3 | (uart_handle->Init).Mode | parity | oversampling;\n  hw_flow_control = (uart_handle->Init).HwFlowCtl;\n  cr2 = uart_instance->CR2 & 0xffffcfff | stop_bits;\n  cr3 = uart_instance->CR3 & 0xfffffcff | hw_flow_control;\n  if (uart_instance == DAT_08002720) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  } else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  baud_div = (pclk_freq * 25) / ((uart_handle->Init).BaudRate * 2);\n  mantissa = baud_div / 100;\n  fraction = (((baud_div - mantissa * 100) * 16) + 50) / 100;\n  uart_instance->BRR = (mantissa << 4) | fraction;\n  uart_instance->CR1 = cr1;\n  uart_instance->CR2 = cr2;\n  uart_instance->CR3 = cr3;\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_080025e8"
        },
        "FUN_08003078": {
            "renaming": {
                "FUN_08003078": "FUNC_08003078"
            },
            "code": "\nvoid FUNC_08003078(void)\n\n{\n  undefined4 *puVar1;\n  byte bVar2;\n  longlong lVar3;\n  uint uVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  uint32_t uVar13;\n  undefined4 extraout_r1;\n  uint uVar14;\n  undefined4 unaff_r4;\n  uint uVar15;\n  uint uVar16;\n  uint uVar17;\n  undefined4 *puVar18;\n  undefined4 unaff_r5;\n  undefined4 unaff_r6;\n  undefined4 unaff_r7;\n  int iVar19;\n  int iVar20;\n  int iVar21;\n  bool bVar22;\n  undefined8 uVar23;\n  \n  puVar6 = PTR_PRESSURE_READY_08003254;\n  puVar5 = PTR_TEMP_READY_08003250;\n  if ((*PTR_TEMP_READY_08003250 != '\\0') && (*PTR_PRESSURE_READY_08003254 != '\\0')) {\n    iVar21 = *(int *)PTR_MS5611_RawTemperature_0800325c +\n             (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 10) * -0x100;\n    uVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x17 |\n             (int)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)iVar21) >> 0x20) << 9;\n    uVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                    (longlong)iVar21 >> 7);\n    uVar16 = uVar15 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 4) * 0x10000;\n    uVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                   (longlong)iVar21) >> 8);\n    iVar19 = uVar14 + 2000;\n    uVar9 = uVar8 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000;\n    bVar22 = (int)uVar14 < 0;\n    if (1999 < iVar19) {\n      uVar14 = 0;\n    }\n    uVar4 = uVar14;\n    if (bVar22 != SBORROW4(iVar19,2000)) {\n      iVar20 = uVar14 * uVar14 * 5;\n      uVar14 = iVar20 >> 2;\n      uVar4 = iVar20 >> 1;\n    }\n    uVar17 = uVar16 - uVar4;\n    lVar3 = (ulonglong)(uVar9 - uVar14) * (ulonglong)*(uint *)PTR_MS5611_RawPressure_08003260;\n    iVar20 = *(uint *)PTR_MS5611_RawPressure_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                      (longlong)iVar21 >> 0x28) +\n               (uint)CARRY4(uVar8,(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000))\n              - ((int)uVar14 >> 0x1f)) - (uint)(uVar9 < uVar14)) + (int)((ulonglong)lVar3 >> 0x20);\n    uVar8 = (uint)lVar3 >> 0x15 | iVar20 * 0x800;\n    uVar10 = __floatsisf(uVar8 - uVar17 >> 0xf |\n                         (((iVar20 >> 0x15) -\n                          ((((int)((longlong)\n                                   (int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                                   (longlong)iVar21 >> 0x27) +\n                            (uint)CARRY4(uVar15,(uint)*(ushort *)\n                                                       (PTR_MS5611_Coefficients_08003258 + 4) *\n                                                0x10000)) - ((int)uVar4 >> 0x1f)) -\n                          (uint)(uVar16 < uVar4))) - (uint)(uVar8 < uVar17)) * 0x20000);\n    uVar11 = __aeabi_fdiv(uVar10,DAT_08003264);\n    *(undefined4 *)PTR_MS5611_CompensatedPressure_08003268 = uVar11;\n    uVar10 = __floatsisf(iVar19);\n    uVar12 = __aeabi_fdiv(uVar10,DAT_08003264);\n    uVar10 = DAT_08003270;\n    *(undefined4 *)PTR_MS5611_CompensatedTemperature_0800326c = uVar12;\n    __aeabi_fdiv(uVar11,uVar10);\n    uVar10 = __aeabi_f2d();\n    pow((double)CONCAT44(unaff_r5,unaff_r4),(double)CONCAT44(unaff_r7,unaff_r6));\n    uVar23 = __subdf3(0,DAT_08003274,uVar10,extraout_r1);\n    __muldf3((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),DAT_08003248,DAT_0800324c);\n    uVar10 = __truncdfsf2();\n    puVar7 = PTR_alt_filter_08003278;\n    *(undefined4 *)PTR_MS5611_Altitude_0800327c = uVar10;\n    uVar11 = 0;\n    puVar18 = (undefined4 *)puVar7;\n    do {\n      puVar1 = puVar18 + 1;\n      *puVar18 = *puVar1;\n      uVar11 = __addsf3(uVar11);\n      puVar18 = puVar1;\n    } while ((undefined4 *)(puVar7 + 0x4c) != puVar1);\n    *(undefined4 *)(puVar7 + 0x4c) = uVar10;\n    uVar10 = __addsf3(uVar11,uVar10);\n    uVar10 = __aeabi_fdiv(uVar10,DAT_08003280);\n    *(undefined4 *)PTR_MS5611_FilteredAltitude_08003284 = uVar10;\n    iVar19 = __aeabi_f2iz();\n    puVar7 = PTR_MS5611_OSR_0800328c;\n    *(int *)PTR_msp_txf_altitude_08003288 = iVar19 * 100;\n    bVar2 = *puVar7;\n    *puVar5 = 0;\n    *puVar6 = 0;\n    I2C_WriteByte(0xee,bVar2 + 0x50,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)PTR_temp_time_08003290 = uVar13;\n  }\n  uVar13 = millis();\n  puVar6 = PTR_pressure_time_08003294;\n  if (((10 < uVar13 - *(int *)PTR_temp_time_08003290) && (*puVar5 == '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    puVar7 = PTR_MS5611_RawTemperature_0800325c;\n    *puVar5 = 1;\n    *(uint32_t *)puVar7 = uVar13;\n    I2C_WriteByte(0xee,(byte)*PTR_MS5611_OSR_0800328c + 0x40,'\\x01','\\0');\n    uVar13 = millis();\n    *(uint32_t *)puVar6 = uVar13;\n  }\n  uVar13 = millis();\n  puVar7 = PTR_PRESSURE_READY_08003254;\n  if (((10 < uVar13 - *(int *)puVar6) && (*puVar5 != '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    uVar13 = MS5611_ReadADC();\n    *(uint32_t *)PTR_MS5611_RawPressure_08003260 = uVar13;\n    *puVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "__floatsisf",
                "__muldf3",
                "__addsf3",
                "millis",
                "__aeabi_fdiv",
                "__aeabi_f2d",
                "__truncdfsf2",
                "I2C_WriteByte",
                "__subdf3",
                "MS5611_ReadADC",
                "pow",
                "__aeabi_f2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003078",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "FUNC_08003078"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_for_equality_080009c8",
                "in_ZR": "zero_register",
                "in_CY": "carry_register"
            },
            "code": "bool check_for_equality_080009c8(void)\n{\n    undefined zero_register;\n    undefined carry_register;\n\n    __aeabi_cdcmpeq();\n    return !(bool)carry_register || (bool)zero_register;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "check_for_equality_080009c8"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "temp_input_1",
                "uVar3": "temp_input_2",
                "uVar4": "temp_result",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f9c(uint input_1, uint input_2)\n{\n    bool is_negative;\n    uint temp_input_1 = input_1 * 2;\n    uint temp_input_2 = input_2 * 2;\n    if (((int)temp_input_1 >> 0x18 == -1 || (int)temp_input_2 >> 0x18 == -1) && ((((int)temp_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)temp_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    uint temp_result = temp_input_1 | input_2 & 0x7fffffff;\n    bool is_zero = temp_result == 0;\n    if (!is_zero) {\n        temp_result = input_1 ^ input_2;\n        is_zero = temp_result == 0;\n    }\n    is_negative = -1 < (int)temp_result;\n    if (is_negative) {\n        input_1 = temp_input_1 + input_2 * -2;\n        is_zero = input_1 == 0;\n    }\n    if ((is_negative && temp_input_2 <= temp_input_1) && !is_zero) {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    if (!is_negative || temp_input_2 > temp_input_1) {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    if (!is_zero) {\n        input_1 = input_1 | 1;\n    }\n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "applyLowPassFilterToRoll_08002ed4",
                "in_s0": "rollAngle",
                "fVar1": "filteredRollAngle"
            },
            "code": "float applyLowPassFilterToRoll_08002ed4(void)\n{\n  float rollAngle;\n  float filteredRollAngle;\n  \n  filteredRollAngle = lowPassFilter((LPF *)PTR_lpf_roll_08002ee4, rollAngle);\n  return filteredRollAngle;\n}",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "applyLowPassFilterToRoll_08002ed4"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nvoid FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  undefined4 extraout_r1;\n  uint extraout_r1_00;\n  undefined4 uVar2;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  uint extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  longlong lVar16;\n  ulonglong uVar17;\n  undefined8 uVar18;\n  undefined4 uVar19;\n  undefined4 in_stack_ffffff94;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar9 = param_4 & 0x7fffffff;\n  if ((uVar9 | param_3) == 0) {\n    return;\n  }\n  uVar7 = param_2 & 0x7fffffff;\n  if ((int)uVar7 <= (int)DAT_08006428) {\n    if (uVar7 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar7 < uVar9) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar9 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar9) {\n            uVar1 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar9 == DAT_08006428) {\n                return;\n              }\nLAB_0800630c:\n              if (uVar9 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return;\n                }\n                uVar7 = 0;\n                uVar9 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                __ieee754_sqrt(param_1,param_2);\n                return;\n              }\n            }\n          }\n          else {\n            if ((int)uVar9 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              uVar1 = 0;\n              goto LAB_080062ba;\n            }\n            iVar4 = ((int)uVar9 >> 0x14) + -0x3ff;\n            if (0x14 < iVar4) {\n              uVar1 = param_3 >> (0x34U - iVar4 & 0xff);\n              if (param_3 == uVar1 << (0x34U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar5 = (int)uVar9 >> (0x14U - iVar4 & 0xff);\n              uVar1 = param_3;\n              if (uVar9 == uVar5 << (0x14U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar5 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            uVar1 = 0;\n          }\n          uVar5 = param_1;\n          fabs((double)CONCAT44(in_stack_ffffff94,uVar1));\n          uVar17 = CONCAT44(param_2,uVar5) & 0x7fffffffffffffff;\n          if ((param_1 == 0) && ((uVar7 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              __divdf3(0,DAT_08006438,uVar5,extraout_r1);\n            }\n            if (-1 < (int)param_2) {\n              return;\n            }\n            if ((uVar1 | uVar7 + 0xc0100000) != 0) {\n              return;\n            }\n          }\n          else {\n            uVar5 = 0xffffffff - ((int)param_2 >> 0x1f);\n            if ((uVar1 | uVar5) != 0) {\n              if (DAT_08006440 < (int)uVar9) {\n                if (DAT_08006440 + 0x2100000 < (int)uVar9) {\n                  if (DAT_08006434 < (int)uVar7) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  if (-1 < (int)param_4) {\n                    return;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar7 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar7) goto LAB_08006418;\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar8 = (undefined4)uVar12;\n                uVar12 = __muldf3(uVar8,uVar10,DAT_080065a8,DAT_080065ac);\n                uVar13 = __muldf3(uVar8,uVar10,DAT_080065b0,DAT_080065b4);\n                uVar14 = __muldf3(uVar8,uVar10,0,DAT_080065d4);\n                uVar14 = __subdf3(DAT_080065b8,DAT_080065bc,(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar8,uVar10);\n                uVar14 = __subdf3(0,DAT_080065d8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar15 = __muldf3(uVar8,uVar10,uVar8,uVar10);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                  (int)((ulonglong)uVar15 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),DAT_080065c0,\n                                  DAT_080065c4);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                             (int)((ulonglong)uVar13 >> 0x20));\n                lVar16 = (ulonglong)extraout_r1_00 << 0x20;\n                uVar9 = extraout_r1_00;\n              }\n              else {\n                local_54 = 0;\n                if (uVar7 < 0x100000) {\n                  uVar17 = __muldf3();\n                  local_54 = -0x35;\n                }\n                uVar9 = (uint)(uVar17 >> 0x20);\n                local_54 = ((int)uVar9 >> 0x14) + -0x3ff + local_54;\n                uVar9 = uVar9 & 0xfffff;\n                uVar7 = uVar9 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar9) {\n                  if (DAT_08006920 < (int)uVar9) {\n                    uVar7 = uVar7 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar4 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar4 = 0;\n                }\n                uVar6 = *(undefined4 *)(PTR_bp_08006924 + iVar4 * 8);\n                uVar19 = *(undefined4 *)((int)(PTR_bp_08006924 + iVar4 * 8) + 4);\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __aeabi_dadd((int)uVar17,uVar7,uVar6,uVar19);\n                uVar13 = __divdf3(0,DAT_08006928,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3((int)uVar12,uVar10,(int)uVar13,uVar11);\n                uVar2 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar8 = (undefined4)uVar14;\n                uVar14 = __muldf3(0,uVar2);\n                uVar12 = __subdf3((int)uVar12,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __subdf3(0,((int)uVar7 >> 1 | 0x20000000U) + 0x80000 + iVar4 * 0x40000,\n                                  uVar6,uVar19);\n                uVar14 = __subdf3((int)uVar17,uVar7,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),0,uVar2);\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,uVar11);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar8,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar10 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar10,uVar6,DAT_080068d0,DAT_080068d4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar14 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __aeabi_dadd(uVar8,uVar2,0,uVar2);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar11);\n                uVar13 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar10 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(0,uVar2,0,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = __aeabi_dadd((int)uVar14,uVar6,0,DAT_0800692c);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar10);\n                uVar15 = __muldf3(0,uVar2,0,extraout_r1_01);\n                uVar19 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar18 = __subdf3(0,extraout_r1_01,0,DAT_0800692c);\n                uVar14 = __subdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar14,uVar6);\n                uVar13 = __subdf3((int)uVar13,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar8,uVar2);\n                uVar12 = __muldf3((int)uVar12,uVar11,0,extraout_r1_01);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar8 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                __aeabi_dadd((int)uVar15,uVar19,(int)uVar13,uVar8);\n                uVar12 = __muldf3(0,extraout_r1_02,DAT_08006900,DAT_08006904);\n                uVar14 = __subdf3(0,extraout_r1_02,(int)uVar15,uVar19);\n                uVar13 = __subdf3((int)uVar13,uVar8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006908,\n                                  DAT_0800690c);\n                uVar14 = __muldf3(0,extraout_r1_02,DAT_08006910,DAT_08006914);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),\n                                      *(undefined4 *)(PTR_dp_l_08006930 + iVar4 * 8),\n                                      *(undefined4 *)((int)(PTR_dp_l_08006930 + iVar4 * 8) + 4));\n                uVar14 = __aeabi_i2d(local_54);\n                uVar8 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = *(undefined4 *)(PTR_dp_h_08006934 + iVar4 * 8);\n                uVar11 = *(undefined4 *)((int)(PTR_dp_h_08006934 + iVar4 * 8) + 4);\n                uVar15 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar15 = __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar10,uVar11);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,uVar8);\n                uVar14 = __subdf3(0,extraout_r1_03,(int)uVar14,uVar8);\n                lVar16 = __subdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar10,uVar11);\n                uVar9 = extraout_r1_03;\n              }\n              uVar12 = __subdf3((int)lVar16,(int)((ulonglong)lVar16 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar8 = DAT_080065dc;\n              if ((uVar1 - 1 | uVar5) != 0) {\n                uVar8 = DAT_080065d0;\n              }\n              uVar19 = 0;\n              uVar13 = __subdf3(param_3,param_4,0,param_4);\n              uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar9);\n              uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),param_3,param_4);\n              uVar12 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar10 = (undefined4)uVar12;\n              uVar12 = __muldf3(0,uVar9,0,param_4);\n              uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar11 = (undefined4)uVar12;\n              lVar16 = __aeabi_dadd(uVar10,uVar2,uVar11,uVar6);\n              uVar7 = (uint)((ulonglong)lVar16 >> 0x20);\n              uVar9 = (uint)lVar16;\n              if (DAT_080065e0 < (int)uVar7) {\n                if ((uVar7 + 0xbf700000 | uVar9) == 0) {\n                  uVar13 = __aeabi_dadd(uVar10,uVar2,DAT_08006ba8,DAT_08006bac);\n                  uVar14 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmpgt((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                         (int)((ulonglong)uVar14 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_080065c8,DAT_080065cc);\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar7 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar7 | uVar9) == 0) {\n                  uVar13 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmple(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_08006bf0,DAT_08006bf4);\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar7 & 0x7fffffff)) {\n                  uVar7 = (0x100000 >> (((int)(uVar7 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar7;\n                  uVar9 = (uVar7 * 2 >> 0x15) - 0x3ff;\n                  iVar4 = (int)(uVar7 & 0xfffff | 0x100000) >> (0x14 - uVar9 & 0xff);\n                  if (lVar16 < 0) {\n                    iVar4 = -iVar4;\n                  }\n                  uVar12 = __subdf3(uVar11,uVar6,0,uVar7 & ~(DAT_08006bfc >> (uVar9 & 0xff)));\n                }\n                else {\n                  iVar4 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                local_68 = (undefined4)uVar12;\n                __aeabi_dadd(local_68,local_64,uVar10,uVar2);\n                uVar12 = __muldf3(0,extraout_r1_04,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __subdf3(0,extraout_r1_04,local_68,local_64);\n                uVar13 = __subdf3(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bb8,\n                                  DAT_08006bbc);\n                uVar14 = __muldf3(0,extraout_r1_04,DAT_08006bc0,DAT_08006bc4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __aeabi_dadd((int)uVar12,uVar11,(int)uVar13,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = (undefined4)uVar14;\n                uVar12 = __subdf3(uVar10,uVar6,(int)uVar12,uVar11);\n                uVar12 = __subdf3((int)uVar13,uVar2,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar11 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar11,uVar3,DAT_08006bc8,DAT_08006bcc);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd0,\n                                  DAT_08006bd4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be0,\n                                  DAT_08006be4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3(uVar10,uVar6,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar13,uVar11);\n                uVar13 = __subdf3((int)uVar13,uVar11,0,0x40000000);\n                uVar13 = __divdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                  (int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar12,uVar2);\n                uVar12 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar2\n                                     );\n                uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                  (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar10,uVar6);\n                uVar12 = __subdf3(0,DAT_08006c00,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                if ((int)((ulonglong)uVar12 >> 0x20) + iVar4 * 0x100000 < 0x100000) {\n                  scalbn((double)CONCAT44(uVar8,uVar19),(int)uVar12);\n                }\n              }\nLAB_0800634a:\n              __muldf3();\n              return;\n            }\n          }\n          uVar12 = __subdf3();\n          uVar9 = (uint)((ulonglong)uVar12 >> 0x20);\n          uVar7 = (uint)uVar12;\n          param_1 = uVar7;\n          param_2 = uVar9;\nLAB_08006320:\n          __divdf3(uVar7,uVar9,param_1,param_2);\n          return;\n        }\n      }\n    }\n    else if ((int)uVar9 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar7 + 0xc0100000 | param_1) == 0) {\n    return;\n  }\nLAB_08006278:\n  nan(PTR_DAT_0800642c);\n  return;\n}\n\n",
            "called": [
                "scalbn",
                "__aeabi_dcmple",
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeros",
                "uVar2": "shift",
                "iVar3": "offset",
                "uVar4": "high_bits",
                "result": "result",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_08000c3c(uint input)\n{\n  int leading_zeros = count_leading_zeroes(input);\n  int shift = leading_zeros - 8;\n  int offset = shift * -0x800000 + 0x4a800000;\n  if (leading_zeros > 7) {\n    uint high_bits = 0 << (shift & 0xff);\n    uint low_bits = (0U >> (0x20 - shift & 0xff));\n    uint result = input << (shift & 0xff);\n    result += high_bits + low_bits + (uint)(0x7fffffff < high_bits);\n    if (high_bits == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint high_bits = input << (leading_zeros + 0x18U & 0xff);\n  uint low_bits = ((input >> (0x20 - (leading_zeros + 0x18U) & 0xff)) - ((int)high_bits >> 0x1f));\n  uint result = offset + low_bits;\n  if ((high_bits & 0x7fffffff) == 0) {\n    result = result & ~(high_bits >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_08000c3c"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "calculate_ticks_08001214",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_ptr",
                "iVar2": "data_value"
            },
            "code": "uint32_t calculate_ticks_08001214(uint32_t ticks_number)\n{\n  undefined4 *ticks_ptr;\n  int data_value;\n  \n  data_value = DAT_0800123c;\n  ticks_ptr = DAT_08001238;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08001238[1] = ticks_number - 1;\n    *(undefined *)(data_value + 0x23) = 0xf0;\n    ticks_ptr[2] = 0;\n    *ticks_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_pwm_value_08003fc4",
                "pwm": "pwm_value",
                "PTR_htim4_08003fcc": "htim4_ptr",
                "*(int *)PTR_htim4_08003fcc + 0x40": "pwm_ptr",
                "*pwm_ptr": "pwm_value"
            },
            "code": "void set_pwm_value_08003fc4(int pwm_value)\n{\n  int* PTR_htim4_08003fcc = (int*) PTR_htim4_08003fcc;\n  int* *(int *)PTR_htim4_08003fcc + 0x40 = (int*) (*PTR_htim4_08003fcc + 0x40);\n  **(int *)PTR_htim4_08003fcc + 0x40 = pwm_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fc4"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "configureClock_0800209c",
                "RCC_ClkInitStruct": "clkInit",
                "FLatency": "latency",
                "cVar1": "cVarFirst",
                "cVar2": "cVarSecond",
                "puVar3": "ahbApbClk",
                "uVar4": "tick",
                "uVar5": "clockType",
                "uVar6": "sysClockSource",
                "uVar7": "leadingZeroes"
            },
            "code": "HAL_StatusTypeDef configureClock_0800209c(RCC_ClkInitTypeDef *clkInit, uint32_t latency) {\n    uint32_t clockType = clkInit->ClockType;\n    uint32_t *ahbApbClk = DAT_08002208;\n    uint32_t *flashLatency = DAT_08002204;\n    uint32_t sysClockFreq;\n    uint32_t leadingZeroes;\n    uint32_t tickStart;\n    uint32_t timeout = 5000;\n    if (latency <= (*flashLatency & 7)) {\n        *flashLatency = *flashLatency & 0xfffffff8 | latency;\n        if (latency != (*ahbApbClk & 7)) {\n            return HAL_ERROR;\n        }\n    }\n    if ((int)(clockType << 0x1e) >= 0) {\n        uint32_t sysClockSource = clkInit->SYSCLKSource;\n        if (sysClockSource == 1) {\n            uint32_t ahbClkDivider = clkInit->AHBCLKDivider;\n            ahbApbClk[1] = ahbApbClk[1] & 0xffffff0f | ahbClkDivider;\n        } else if (sysClockSource == 2) {\n            uint32_t apb1ClkDivider = clkInit->APB1CLKDivider;\n            ahbApbClk[1] = ahbApbClk[1] & 0xfffff8ff | apb1ClkDivider;\n        }\n        if ((int)(clockType << 0x1c) < 0) {\n            uint32_t apb2ClkDivider = clkInit->APB2CLKDivider;\n            ahbApbClk[1] = ahbApbClk[1] & 0xffffc7ff | apb2ClkDivider << 3;\n        }\n        sysClockFreq = HAL_RCC_GetSysClockFreq();\n        leadingZeroes = count_leading_zeroes(0xf000000);\n        *(uint32_t *)PTR_SystemCoreClock_08002210 = sysClockFreq >> PTR_AHBPrescTable_0800220c[(ahbApbClk[1] & 0xf0) >> (leadingZeroes & 0xff)];\n        HAL_InitTick(0);\n        return HAL_OK;\n    } else {\n        uint32_t sysClockSource = clkInit->SYSCLKSource;\n        uint32_t cVar1;\n        uint32_t cVar2;\n        if (sysClockSource == 2) {\n            goto LAB_08002176;\n        }\n        if (sysClockSource == 1) {\n            cVar2 = 1;\n            cVar1 = 0;\n        } else {\n            cVar2 = 0;\n            cVar1 = 1;\n        }\n        leadingZeroes = count_leading_zeroes((uint)(byte)(cVar1 << 6) << 0x18 | (uint)(byte)(cVar2 << 6) << 8);\n        if ((int)((*ahbApbClk >> (leadingZeroes & 0x1f)) << 0x1f) < 0) {\n            LAB_08002176:\n            ahbApbClk[1] = ahbApbClk[1] & 0xfffffffc | sysClockSource;\n            tickStart = HAL_GetTick();\n            while ((HAL_GetTick() - tickStart) < timeout) {\n                if ((sysClockSource == 1 && (ahbApbClk[1] & 0xc) == 4) || (sysClockSource == 2 && (ahbApbClk[1] & 0xc) == 8) || (sysClockSource != 1 && sysClockSource != 2 && (ahbApbClk[1] & 0xc) == 0)) {\n                    goto LAB_080020ba;\n                }\n            }\n            return HAL_TIMEOUT;\n        }\n    }\n    LAB_080020ba:\n    return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClock_0800209c"
        },
        "FUN_08003f0e": {
            "renaming": {
                "FUN_08003f0e": "calculate_new_value_08003f0e",
                "var": "filter",
                "current": "current_value",
                "uVar1": "one_minus_beta_times_current",
                "uVar2": "beta_times_last",
                "fVar3": "beta",
                "extraout_s0": "new_value"
            },
            "code": "float calculate_new_value_08003f0e(LPF *filter, float current_value)\n{\n    float beta = filter->beta;\n    float one_minus_beta = 1 - beta;\n    float beta_times_last = beta * filter->last;\n    float one_minus_beta_times_current = one_minus_beta * current_value;\n    float new_value = beta_times_last + one_minus_beta_times_current;\n    filter->last = new_value;\n    return new_value;\n}",
            "called": [
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0e",
            "calling": [
                "AHRS_GetPitch",
                "AHRS_GetRoll"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08003f0e"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "write_register_0800403c",
                "device_add": "device_address",
                "register_add": "register_address",
                "register_val": "register_value",
                "delay_mode": "delay_enabled",
                "HVar1": "status",
                "byte": "buffer",
                "PTR_hi2c1_08004074": "hi2c1",
                "PTR_s____Src_i2c_c_08004078": "__FILE__",
                "0x1b": "__LINE__",
                "delay_ms": "delay_ms"
            },
            "code": "void write_register_0800403c(uint16_t device_address, uint16_t register_address, uint8_t register_value, uint8_t delay_enabled) {\n  HAL_StatusTypeDef status;\n  uint8_t buffer[1];\n  buffer[0] = register_value;\n  status = HAL_I2C_Mem_Write(&PTR_hi2c1_08004074, device_address, register_address, 1, buffer, 1, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____Src_i2c_c_08004078, __LINE__);\n  }\n  if (delay_enabled) {\n    delay_ms(50);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "MPU9250_Init",
                "MS5611_Update",
                "MS5611_Init",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "write_register_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "FUNC_08000cec"
            },
            "code": "\nuint FUNC_08000cec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e3c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e3c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cec",
            "calling": [
                "AK8963_ReadData",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "FUNC_08000cec"
        },
        "FUN_0800277c": {
            "renaming": {
                "FUN_0800277c": "uart_transmit_0800277c",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "current_time",
                "uVar2": "timeout_time",
                "HVar3": "uart_state",
                "pUVar4": "uart_instance"
            },
            "code": "HAL_StatusTypeDef uart_transmit_0800277c(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t current_time;\n  uint32_t timeout_time;\n  HAL_UART_StateTypeDef uart_state;\n  USART_TypeDef *uart_instance;\n  \n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_RX)) {\n    if ((data == NULL) || (size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->TxXferSize = size;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_RX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_TX;\n      }\n      uart_handle->TxXferCount = size;\n      uart_handle->State = uart_state;\nLAB_080027c4:\n      if (uart_handle->TxXferCount == 0) {\n        current_time = HAL_GetTick();\n        do {\n          do {\n            if ((int)(uart_handle->Instance->SR << 0x19) < 0) {\n              if (uart_handle->State == HAL_UART_STATE_BUSY_TX_RX) {\n                uart_state = HAL_UART_STATE_BUSY_RX;\n              }\n              else {\n                uart_state = HAL_UART_STATE_READY;\n              }\n              uart_handle->State = uart_state;\n              uart_handle->Lock = HAL_UNLOCKED;\n              return HAL_OK;\n            }\n          } while (timeout == 0xffffffff);\n        } while ((timeout != 0) && (timeout_time = HAL_GetTick(), timeout_time - current_time <= timeout));\n      }\n      else {\n        uart_handle->TxXferCount = uart_handle->TxXferCount - 1;\n        if ((uart_handle->Init).WordLength == 0x1000) {\n          current_time = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = *(ushort *)data & 0x1ff;\n                if ((uart_handle->Init).Parity == 0) {\n                  data = (uint8_t *)((int)data + 2);\n                }\n                else {\nLAB_08002812:\n                  data = (uint8_t *)((int)data + 1);\n                }\n                goto LAB_080027c4;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (timeout_time = HAL_GetTick(), timeout_time - current_time <= timeout));\n        }\n        else {\n          current_time = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = (uint)*data;\n                goto LAB_08002812;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (timeout_time = HAL_GetTick(), timeout_time - current_time <= timeout));\n        }\n      }\n      uart_instance = uart_handle->Instance;\n      uart_instance->CR1 = uart_instance->CR1 & 0xffffff7f;\n      uart_instance->CR1 = uart_instance->CR1 & 0xffffffdf;\n      uart_instance->CR1 = uart_instance->CR1 & 0xfffffeff;\n      uart_instance->CR3 = uart_instance->CR3 & 0xfffffffe;\n      uart_handle->State = HAL_UART_STATE_READY;\n      uart_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800277c",
            "calling": [
                "serialWrite"
            ],
            "imported": false,
            "current_name": "uart_transmit_0800277c"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_PID_output_0800483c",
                "pid": "PID",
                "uVar1": "result",
                "iVar2": "comparison_result",
                "uVar3": "unused",
                "fVar4": "proportional",
                "fVar5": "derivative_constant",
                "fVar6": "integral_constant",
                "input": "input_value",
                "set_point_with_offset": "set_point_with_offset",
                "error": "error",
                "is_error_positive": "is_error_positive",
                "is_error_less_than_threshold": "is_error_less_than_threshold",
                "error_times_constant": "error_times_constant",
                "is_error_negative": "is_error_negative",
                "proportional": "proportional_value",
                "integral": "integral_value",
                "is_integral_less_than_lower_threshold": "is_integral_less_than_lower_threshold",
                "threshold": "threshold_value",
                "is_integral_greater_than_upper_threshold": "is_integral_greater_than_upper_threshold",
                "derivative": "derivative_value",
                "output": "output_value",
                "direction": "output_direction"
            },
            "code": "void calculate_PID_output_0800483c(PID_TypeDef *pid) {\n  float input = pid->input;\n  float set_point_with_offset = pid->set_point + pid->offset;\n  float error = set_point_with_offset - input;\n  pid->error = error;\n  if (pid->instance == 3) {\n    int is_error_positive = error > 0;\n    if (!is_error_positive) {\n      int is_error_less_than_threshold = error < DAT_08004974;\n      if (!is_error_less_than_threshold) {\n        float error_times_constant = error * DAT_08004968;\n        int is_error_negative = error < 0;\n        if (is_error_negative) {\n          error_times_constant /= -2147483648.0 - error;\n        } else {\n          error_times_constant /= error + 2147483647.0;\n        }\n        error = error - error_times_constant;\n      }\n    } else {\n      int is_error_greater_than_threshold = error > DAT_08004964;\n      if (is_error_greater_than_threshold) {\n        float error_times_constant = error * DAT_08004968;\n        int is_error_negative = error < 0;\n        if (is_error_negative) {\n          error_times_constant /= -2147483648.0 - error;\n        } else {\n          error_times_constant /= error + 2147483647.0;\n        }\n        error = error - error_times_constant;\n      }\n    }\n  }\n  float proportional = pid->con_KP * error;\n  float integral = error + pid->integral;\n  int is_integral_less_than_lower_threshold = integral < DAT_0800496c;\n  float threshold = DAT_0800496c;\n  if (!is_integral_less_than_lower_threshold) {\n    int is_integral_greater_than_upper_threshold = integral > DAT_08004970;\n    threshold = DAT_08004970;\n    if (!is_integral_greater_than_upper_threshold) {\n      threshold = integral;\n    }\n  }\n  pid->integral = threshold;\n  float derivative = input - pid->last_input;\n  pid->derivative = derivative;\n  float output = pid->con_KI * threshold + proportional - pid->con_KD * derivative;\n  int direction = pid->direction;\n  int is_output_less_than_lower_threshold = output < DAT_0800496c;\n  threshold = DAT_0800496c;\n  if (!is_output_less_than_lower_threshold) {\n    int is_output_greater_than_upper_threshold = output > DAT_08004970;\n    threshold = DAT_08004970;\n    if (!is_output_greater_than_upper_threshold) {\n      threshold = output;\n    }\n  }\n  pid->output = threshold * direction;\n  pid->last_input = input;\n  pid->last_error = error;\n  pid->last_time = pid->time;\n}",
            "called": [
                "__aeabi_fmul",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fdiv",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_PID_output_0800483c"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "isEndOfString_08001064",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_08001064(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "PID_Update",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "isEndOfString_08001064"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_double_precision_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "output1",
                "unaff_r4": "bit_mask",
                "uVar2": "bitwise_and",
                "uVar3": "output2",
                "in_r12": "register_value",
                "bVar4": "check"
            },
            "code": "unsigned long long calculate_double_precision_08000892(uint input1, uint input2, uint input3, uint input4) {\n    uint bit_mask = input4 >> 0x14;\n    uint output2 = input2;\n    uint output1;\n    uint temp;\n    bool check;\n    \n    if (input3 != input4 || bit_mask != input4) {\n        if (input3 == input4) {\n            if (((input1 | input2 << 0xc) == 0) && (input1 = input3, output2 = input4, bit_mask != input4)) {\n                return (unsigned long long)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n            }\n        }\n        else if (bit_mask == input4) {\n            input1 = input3;\n            output2 = input4;\n            if ((input3 | input4 << 0xc) == 0) {\n                return (unsigned long long)((input2 ^ input4) & 0x80000000) << 0x20;\n            }\n        }\n        else {\n            check = (input1 | input2 << 1) == 0;\n            if (!check) {\n                check = (input3 | input4 << 1) == 0;\n            }\n            if (!check) {\n                if (input3 == 0) {\n                    temp = input2 & 0x80000000;\n                    do {\n                        output1 = input1 & 0x80000000;\n                        input1 = input1 << 1;\n                        input2 = input2 * 2 + (uint)(output1 != 0);\n                    } while ((input2 & 0x100000) == 0);\n                    input2 = input2 | temp;\n                    if (bit_mask != 0) {\n                        return ((unsigned long long)input2) << 0x20 | input1;\n                    }\n                }\n                do {\n                    temp = input3 & 0x80000000;\n                    input3 = input3 << 1;\n                    input4 = input4 * 2 + (uint)(temp != 0);\n                } while ((input4 & 0x100000) == 0);\n                return ((unsigned long long)output2) << 0x20 | output1;\n            }\n            if ((input1 | input2 << 1) != 0) {\n                return (unsigned long long)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n            }\n            if ((input3 | input4 << 1) != 0) {\n                return (unsigned long long)((input2 ^ input4) & 0x80000000) << 0x20;\n            }\n        }\n    }\n    return ((unsigned long long)output2) << 0x20 | output1 | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_and_send_data_08004458",
                "puVar1": "destination_ptr",
                "uVar2": "temp_value_2",
                "puVar3": "destination_ptr",
                "puVar4": "source_ptr",
                "puVar5": "source_ptr",
                "local_30": "data_array",
                "local_24": "temp_value_4"
            },
            "code": "void copy_and_send_data_08004458(void)\n{\n  uint32_t *source_ptr;\n  uint32_t *destination_ptr;\n  uint32_t temp_value_1;\n  uint32_t temp_value_2;\n  uint32_t temp_value_3;\n  uint16_t temp_value_4;\n  uint8_t data_array[30];\n  source_ptr = (uint32_t *)msp_txf_pid;\n  destination_ptr = (uint32_t *)data_array;\n  for(int i = 0; i < 9; i++)\n  {\n    temp_value_1 = *source_ptr;\n    temp_value_2 = *(source_ptr + 1);\n    temp_value_3 = *(source_ptr + 2);\n    temp_value_4 = *(uint16_t *)(source_ptr + 3);\n    *destination_ptr = temp_value_1;\n    *(destination_ptr + 1) = temp_value_2;\n    *(destination_ptr + 2) = temp_value_3;\n    *(uint16_t *)(destination_ptr + 3) = temp_value_4;\n    source_ptr += 4;\n    destination_ptr += 5;\n  }\n  temp_value_1 = *source_ptr;\n  temp_value_3 = *(source_ptr + 2);\n  *destination_ptr = temp_value_1;\n  *(uint16_t *)(destination_ptr + 1) = temp_value_3;\n  MSP_SendFrame('p', data_array, 0x1e);\n}\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_and_send_data_08004458"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "initialize_I2C_GPIO_pins_08004d48",
                "*hi2c": "*i2c_handle",
                "GPIO_InitStruct": "GPIO_Init",
                "hi2c->Instance": "i2c_handle->Instance",
                "DAT_08004d80": "I2C1",
                "0xc0": "GPIO_PIN_6 | GPIO_PIN_7",
                "0x12": "GPIO_MODE_AF_OD",
                "3": "GPIO_SPEED_FREQ_HIGH",
                "DAT_08004d84": "GPIOB",
                "*(uint *)(DAT_08004d88 + 0x1c)": "*(uint *)(0x40022000 + 0x1c)",
                "| 0x200000": "| 0x200000"
            },
            "code": "void initialize_I2C_GPIO_pins_08004d48(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t tmpreg;\n  GPIO_InitTypeDef GPIO_Init;\n  if (i2c_handle->Instance == DAT_08004d80) {\n    GPIO_Init.Pin = GPIO_PIN_6 | GPIO_PIN_7;\n    GPIO_Init.Mode = GPIO_MODE_AF_OD;\n    GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(DAT_08004d84,&GPIO_Init);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "initialize_I2C_GPIO_pins_08004d48"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "configure_timer_08002280",
                "TIMx": "timer",
                "OC_Config": "output_config",
                "uVar1": "cc_enable_value",
                "uVar2": "cr2_value",
                "uVar3": "oc_mode",
                "DAT_080022cc": "PTR_080022cc",
                "CCER": "cc_enable_mask",
                "CCMR1": "ccmr1_value",
                "CCR1": "ccr1_value",
                "OCPolarity": "oc_polarity",
                "OCNPolarity": "ocn_polarity",
                "OCIdleState": "oc_idle_state",
                "OCNIdleState": "ocn_idle_state",
                "Pulse": "pulse_value"
            },
            "code": "void configure_timer_08002280(TIM_TypeDef *timer,TIM_OC_InitTypeDef *output_config)\n{\n  uint32_t cc_enable_mask = 0xfffffffe;\n  uint32_t cr2_value = timer->CR2;\n  uint oc_mode = output_config->OCMode;\n  uint32_t cc_enable_value = (timer->CCER & 0xfffffffd) | output_config->OCPolarity;\n  if (timer == DAT_080022cc) {\n    cc_enable_value = (cc_enable_value & 0xfffffff7 | output_config->OCNPolarity) & 0xfffffffb;\n    cr2_value = (cr2_value & 0xfffffcff) | output_config->OCIdleState | output_config->OCNIdleState;\n  }\n  timer->CR2 = cr2_value;\n  timer->CCMR1 = (timer->CCMR1 & 0xffffff8c) | oc_mode;\n  timer->CCR1 = output_config->Pulse;\n  timer->CCER = cc_enable_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "set_interrupt_priority_08001194",
                "IRQn": "IRQn",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq",
                "uVar2": "priority",
                "uVar3": "group_priority",
                "uVar4": "group_priority_bits",
                "uVar5": "sub_priority_bits"
            },
            "code": "void set_interrupt_priority_08001194(IRQn_Type IRQn, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq = (uint32_t)IRQn;\n  uint32_t group_priority_bits = (*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  uint32_t group_priority = 7 - group_priority_bits;\n  uint32_t sub_priority_bits = group_priority_bits + 4;\n  if (group_priority > 3) {\n    group_priority = 4;\n  }\n  if (sub_priority_bits < 7) {\n    group_priority_bits = 0;\n  }\n  group_priority = (1 << (group_priority & 0xff)) - 1;\n  if (sub_priority_bits > 6) {\n    group_priority_bits = group_priority_bits - 3;\n  }\n  undefined priority = (undefined)((sub_priority & (1 << (group_priority_bits & 0xff)) - 1U | (preempt_priority & group_priority) << (group_priority_bits & 0xff)) << 4);\n  if (irq >= 0) {\n    uint32_t nvic_priority_register = irq + 0xe000e100;\n    *(undefined *)(nvic_priority_register + 0x300) = priority;\n  }\n  else {\n    uint32_t index = irq & 0xf;\n    uint32_t nvic_priority_table = DAT_080011f8;\n    *(undefined *)(nvic_priority_table + index) = priority;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "HAL_InitTick",
                "HAL_UART_MspInit",
                "HAL_MspInit",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001194"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "send_msp_txf_identification_frame_08004348",
                "in_r1": "msp_txf_identification_data",
                "local_10": "msp_txf_identification_data[1]",
                "local_c": "msp_txf_identification_frame"
            },
            "code": "void send_msp_txf_identification_frame_08004348(void)\n{\n    uint32_t msp_txf_identification_data[2] = {0x040300e9, 0x00000000};\n    uint32_t msp_txf_identification_frame = ((uint32_t)msp_txf_identification_data[1] << 24) | ((uint32_t)msp_txf_identification_data[0] & 0x00FFFFFF);\n    MSP_SendFrame('d', (uint8_t *)&msp_txf_identification_frame, 7);\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_txf_identification_frame_08004348"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "convert_to_int32_08001078",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "diff_from_158",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_to_int32_08001078(uint input) {\n  uint shift_amount = (input << 1) >> 0x18;\n  uint diff_from_158 = 0x9e - shift_amount;\n  if (shift_amount >= 0x9f || diff_from_158 == 0) {\n    if (diff_from_158 == 0xffffff9f && (input & 0x7fffff) != 0) {\n      return 0;\n    }\n    if ((input & 0x80000000) == 0) {\n      return 0x7fffffff;\n    }\n    return input;\n  }\n  uint shifted_input = (input << 8) | 0x80000000;\n  uint shifted_result = shifted_input >> (diff_from_158 & 0xff);\n  if ((input & 0x80000000) != 0) {\n    shifted_result = -shifted_result;\n  }\n  return shifted_result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "convert_to_int32_08001078"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "initializeI2C_08001754",
                "hi2c": "i2c",
                "uVar1": "pclk1Freq",
                "extraout_r1": "unused",
                "uVar2": "ccr",
                "pIVar3": "i2cInstance",
                "uVar4": "clockSpeed",
                "uVar5": "DAT_08001820",
                "uVar6": "uVar6",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_I2C_STATE_RESET": "HAL_I2C_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_I2C_STATE_BUSY": "HAL_I2C_STATE_BUSY",
                "HAL_OK": "HAL_OK",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "HAL_I2C_MspInit": "HAL_I2C_MspInit",
                "DAT_08001824": "250000",
                "NoStretchMode": "NoStretchMode",
                "GeneralCallMode": "GeneralCallMode",
                "AddressingMode": "AddressingMode",
                "OwnAddress1": "OwnAddress1",
                "DualAddressMode": "DualAddressMode",
                "OwnAddress2": "OwnAddress2",
                "CR1": "CR1",
                "CR2": "CR2",
                "TRISE": "TRISE",
                "CCR": "CCR",
                "Instance": "Instance",
                "State": "State",
                "Lock": "Lock",
                "ErrorCode": "ErrorCode",
                "Mode": "Mode",
                "ClockSpeed": "ClockSpeed",
                "DutyCycle": "DutyCycle"
            },
            "code": "HAL_StatusTypeDef initializeI2C_08001754(I2C_HandleTypeDef *i2c)\n{\n    uint32_t pclk1Freq = HAL_RCC_GetPCLK1Freq();\n    uint32_t clockSpeed = (i2c->Init).ClockSpeed;\n    uint32_t uVar6 = pclk1Freq / DAT_08001824;\n    uint32_t ccr = 0;\n    uint32_t riseTime = 0;\n\n    if (i2c == NULL) {\n        return HAL_ERROR;\n    }\n\n    if (i2c->State == HAL_I2C_STATE_RESET) {\n        i2c->Lock = HAL_UNLOCKED;\n        HAL_I2C_MspInit(i2c);\n    }\n\n    i2c->State = HAL_I2C_STATE_BUSY;\n\n    if (clockSpeed <= 100000) {\n        ccr = uVar6 / (clockSpeed << 1);\n        if (ccr < 0x1) {\n            ccr = 0x1;\n        }\n        riseTime = uVar6 / 1000000 + 1;\n        if ((i2c->Init).DutyCycle == 0) {\n            ccr |= (uVar6 / (clockSpeed * 3)) << 14;\n        }\n        else {\n            ccr |= (uVar6 / (clockSpeed * 25)) << 14;\n        }\n    }\n    else {\n        ccr |= 0x4000;\n        riseTime = uVar6 / 1000000 * 300 + 1;\n    }\n\n    I2C_TypeDef *i2cInstance = i2c->Instance;\n    i2cInstance->CR2 = uVar6;\n    i2cInstance->CCR = ccr;\n    i2cInstance->TRISE = riseTime;\n    i2cInstance->CR1 |= (i2c->Init).GeneralCallMode | (i2c->Init).NoStretchMode;\n    i2cInstance->OAR1 = (i2c->Init).AddressingMode | (i2c->Init).OwnAddress1;\n    i2cInstance->OAR2 = (i2c->Init).DualAddressMode | (i2c->Init).OwnAddress2;\n    i2cInstance->CR1 |= 0x1;\n    i2c->ErrorCode = 0;\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n\n    return HAL_OK;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initializeI2C_08001754"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "huart": "uart_handle",
                "pUVar1": "uart_instance",
                "UART_HandleTypeDef": "UART_HandleTypeDef",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "HAL_UART_STATE_RESET": "HAL_UART_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_UART_STATE_BUSY": "HAL_UART_STATE_BUSY",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR",
                "CR1": "CR1",
                "CR2": "CR2",
                "CR3": "CR3",
                "ErrorCode": "ErrorCode",
                "Instance": "Instance",
                "State": "State",
                "UART_SetConfig": "UART_SetConfig"
            },
            "code": "HAL_StatusTypeDef initialize_uart_08002724(UART_HandleTypeDef *uart_handle)\n{\n  USART_TypeDef *uart_instance;\n  \n  if (uart_handle != NULL) {\n    if (uart_handle->State == HAL_UART_STATE_RESET) {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    uart_handle->State = HAL_UART_STATE_BUSY;\n    uart_handle->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(uart_handle);\n    uart_instance = uart_handle->Instance;\n    uart_instance->CR2 &= ~(1 << 11);\n    uart_instance->CR3 &= ~(1 << 2);\n    uart_instance->CR1 |= (1 << 13);\n    uart_handle->ErrorCode = 0;\n    uart_handle->State = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002724"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "send_motor_data_080043f0",
                "local_10": "motor_data_1",
                "uStack_c": "motor_data_2"
            },
            "code": "void send_motor_data_080043f0(void)\n{\n  uint32_t motor_data_1 = *(uint32_t *)PTR_msp_txf_motor_0800440c;\n  uint32_t motor_data_2 = *(uint32_t *)(PTR_msp_txf_motor_0800440c + 4);\n  MSP_SendFrame('h', (uint8_t *)&motor_data_1, 8);\n  return;\n}",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_motor_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "reverseBits_08000428",
                "param_1": "n",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "uVar1": "msb",
                "uVar2": "reversed",
                "uVar3": "highBits",
                "uVar4": "shifted",
                "uVar5": "temp",
                "uVar7": "shiftAmount",
                "bVar8": "isZero",
                "bVar9": "isFF",
                "bVar10": "carry",
                "in_r12": "unused4",
                "count_leading_zeroes": "clz"
            },
            "code": "uint64_t reverseBits_08000428(uint32_t n) {\n    uint32_t reversed = 0;\n    for (int i = 0; i < 32; i++) {\n        reversed = (reversed << 1) | (n & 1);\n        n >>= 1;\n    }\n    return (uint64_t)reversed << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "reverseBits_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "enable_interrupts_08004ccc",
                "tmpreg": "tmp_reg",
                "interrupt_priority_reg": "interrupt_priority_reg",
                "interrupt_priority_value": "interrupt_priority_value"
            },
            "code": "void enable_interrupts_08004ccc(void)\n{\n  uint32_t tmp_reg;\n  uint32_t *interrupt_priority_reg;\n  uint32_t interrupt_priority_value = 0;\n\n  // Enable interrupts\n  interrupt_priority_reg = (uint32_t *)(DAT_08004d44 + 0x18);\n  *interrupt_priority_reg |= 1;\n\n  // Set interrupt priorities\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  for (uint32_t i = 0; i < 8; i++)\n  {\n    switch (i)\n    {\n      case MemoryManagement_IRQn:\n      case BusFault_IRQn:\n      case UsageFault_IRQn:\n      case SVCall_IRQn:\n      case DebugMonitor_IRQn:\n      case PendSV_IRQn:\n      case SysTick_IRQn:\n        interrupt_priority_value = NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0);\n        break;\n      default:\n        break;\n    }\n    HAL_NVIC_SetPriority((IRQn_Type)i, interrupt_priority_value);\n  }\n}\n",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "enable_interrupts_08004ccc"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "receive_uart_data_08004c30",
                "*huart": "&huart_instance",
                "*pData": "*data_ptr",
                "PTR_rx_buffer_08004c58": "rx_buffer",
                "DAT_08004c54": "uart_instance",
                "PTR_rxc_08004c5c": "&rx_circular_buffer",
                "PTR_huart1_08004c60": "&huart_instance"
            },
            "code": "void receive_uart_data_08004c30(UART_HandleTypeDef *huart) {\n  uint8_t *data_ptr;\n  data_ptr = PTR_rx_buffer_08004c58;\n  if (huart->Instance == DAT_08004c54) {\n    circular_buffer_write(PTR_rxc_08004c5c, *PTR_rx_buffer_08004c58);\n    HAL_UART_Receive_IT(PTR_huart1_08004c60, data_ptr, 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "CB_Write",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "FUNC_080004d0"
            },
            "code": "\nulonglong FUNC_080004d0(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = extract_bits_080006ac();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004d0",
            "calling": [
                "MS5611_Update",
                "scalbn",
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "FUNC_080004d0"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "calculate_distance_0800729c",
                "__x": "x1",
                "__y": "y1",
                "in_d0": "distance"
            },
            "code": "double calculate_distance_0800729c(double x1, double y1)\n{\n  double distance;\n  distance = sqrt(x1*x1 + y1*y1);\n  return distance;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "scalbn"
            ],
            "imported": false,
            "current_name": "calculate_distance_0800729c"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "runForkServerAndTaskScheduler_080041ae",
                "setup": "setupTaskScheduler",
                "taskScheduler": "runTaskScheduler"
            },
            "code": "int runForkServerAndTaskScheduler_080041ae(void)\n{\n  startForkserver(0);\n  setupTaskScheduler();\n  do {\n    HAL_IncTick();\n    runTaskScheduler();\n  } while( true );\n}",
            "called": [
                "HAL_IncTick",
                "setup",
                "taskScheduler",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runForkServerAndTaskScheduler_080041ae"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "FUNC_080053d4"
            },
            "code": "\nuint FUNC_080053d4(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800558e;\n          if (bVar1 != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_08005404;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08005424;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08005424:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080054fa;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08005464:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800548a:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08005498;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08005498:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_08005610;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800544a:\n            puVar6 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800548a;\n          if (bVar1 == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08005464;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_0800557a:\n    *puVar3 = uVar7;\n  }\nLAB_0800558e:\n  param_2[4] = 0;\nLAB_080054fa:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_0800550e:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_0800550e;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053d4",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080053d4"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "stop_motors_080041c4",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void stop_motors_080041c4(void)\n{\n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0);\n  return;\n}",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "stop_motors_080041c4"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "*param_1": "*error_code",
                "param_2": "size",
                "param_3": "filler1",
                "param_4": "filler2",
                "puVar1": "current_value",
                "extraout_r1": "extraout_pointer",
                "ppiVar2": "pointer1",
                "ppiVar3": "pointer2",
                "piVar4": "value",
                "ppiVar5": "free_list_pointer",
                "ppiVar6": "temp_pointer",
                "ppiVar7": "current_pointer",
                "PTR___malloc_free_list_08005710": "free_list"
            },
            "code": "void allocate_memory_0800567c(int* error_code, int size, int filler1, int filler2) {\n  if (size == 0) {\n    return;\n  }\n  int** current_pointer = (int**)(size - 4);\n  if (*(int*)(size - 4) < 0) {\n    current_pointer = (int**)((int)current_pointer + *(int*)(size - 4));\n  }\n  __malloc_lock();\n  void* PTR___malloc_free_list_08005710 = PTR___malloc_PTR___malloc_free_list_08005710_08005710;\n  int** PTR___malloc_free_list_08005710_pointer = *(int***)(PTR___malloc_PTR___malloc_free_list_08005710_08005710);\n  if (PTR___malloc_free_list_08005710_pointer == (int**)0x0) {\n    current_pointer[1] = (int*)0x0;\n    *(int***)PTR___malloc_free_list_08005710 = current_pointer;\n    int** extraout_r1 = NULL;\n    int** current_pointer_copy = (int**)PTR___malloc_free_list_08005710;\n  }\n  else if (current_pointer < PTR___malloc_free_list_08005710_pointer) {\n    int** pointer1 = (int**)*current_pointer;\n    int** pointer2 = (int**)((int)current_pointer + (int)pointer1);\n    if (PTR___malloc_free_list_08005710_pointer == pointer2) {\n      int* value = *PTR___malloc_free_list_08005710_pointer;\n      PTR___malloc_free_list_08005710_pointer = (int**)PTR___malloc_free_list_08005710_pointer[1];\n      pointer2 = (int**)((int)value + (int)pointer1);\n      *current_pointer = (int*)pointer2;\n    }\n    current_pointer[1] = (int*)PTR___malloc_free_list_08005710_pointer;\n    *(int***)PTR___malloc_free_list_08005710 = current_pointer;\n  }\n  else {\n    do {\n      int** temp_pointer = PTR___malloc_free_list_08005710_pointer;\n      int** next_pointer = (int**)temp_pointer[1];\n      if (next_pointer == (int**)0x0) break;\n      PTR___malloc_free_list_08005710_pointer = next_pointer;\n    } while (next_pointer <= current_pointer);\n    int** pointer1 = (int**)*temp_pointer;\n    if ((int**)((int)temp_pointer + (int)pointer1) == current_pointer) {\n      pointer1 = (int**)((int)pointer1 + (int)*current_pointer);\n      *temp_pointer = (int*)pointer1;\n      if (next_pointer == (int**)((int)temp_pointer + (int)pointer1)) {\n        int* value = *next_pointer;\n        next_pointer = (int**)next_pointer[1];\n        pointer1 = (int**)((int)pointer1 + (int)value);\n        *temp_pointer = (int*)pointer1;\n        temp_pointer[1] = (int*)next_pointer;\n      }\n    }\n    else if (current_pointer < (int**)((int)temp_pointer + (int)pointer1)) {\n      *error_code = 0xc;\n    }\n    else {\n      int** pointer1 = (int**)((int)current_pointer + (int)*current_pointer);\n      if (next_pointer == pointer1) {\n        int* value = *next_pointer;\n        next_pointer = (int**)next_pointer[1];\n        pointer1 = (int**)((int)value + (int)*current_pointer);\n        *current_pointer = (int*)pointer1;\n      }\n      current_pointer[1] = (int*)next_pointer;\n      temp_pointer[1] = (int*)current_pointer;\n    }\n  }\n  __malloc_unlock(error_code, pointer1, pointer2, filler2);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "FUNC_0800458c"
            },
            "code": "\nvoid FUNC_0800458c(void)\n\n{\n  GPIO_TypeDef *GPIOx;\n  undefined4 uVar1;\n  undefined *huart;\n  HAL_StatusTypeDef HVar2;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  TIM_MasterConfigTypeDef sMasterConfig;\n  TIM_OC_InitTypeDef sConfigOC;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  undefined *puVar3;\n  \n  HAL_Init();\n  SystemClock_Config();\n  GPIOx = DAT_08004800;\n  iVar5 = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  uVar6 = 2;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 4;\n  uVar1 = DAT_08004804;\n  *(uint *)(iVar5 + 0x18) = *(uint *)(iVar5 + 0x18) | 8;\n  HAL_GPIO_WritePin(GPIOx,0xe000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004808,0x20,GPIO_PIN_RESET);\n  GPIO_InitStruct.Pin = 0xe000;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004800,&GPIO_InitStruct);\n  GPIO_InitStruct.Pin = 0x20;\n  GPIO_InitStruct.Mode = 1;\n  GPIO_InitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004808,&GPIO_InitStruct);\n  puVar3 = PTR_hi2c1_0800480c;\n  *(undefined4 *)PTR_hi2c1_0800480c = DAT_08004810;\n  *(undefined4 *)(puVar3 + 4) = uVar1;\n  *(undefined4 *)(puVar3 + 0x10) = 0x4000;\n  *(undefined4 *)(puVar3 + 8) = 0;\n  *(undefined4 *)(puVar3 + 0xc) = 0;\n  *(undefined4 *)(puVar3 + 0x14) = 0;\n  *(undefined4 *)(puVar3 + 0x18) = 0;\n  *(undefined4 *)(puVar3 + 0x1c) = 0;\n  *(undefined4 *)(puVar3 + 0x20) = 0;\n  HVar2 = HAL_I2C_Init((I2C_HandleTypeDef *)puVar3);\n  puVar3 = (undefined *)(uint)HVar2;\n  if (puVar3 == (undefined *)0x0) goto LAB_0800463a;\n  iVar5 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  puVar3 = PTR_s____Src_peripherals_c_08004814;\n                                  _Error_Handler(PTR_s____Src_peripherals_c_08004814,iVar5);\nLAB_0800463a:\n                                  uVar1 = DAT_0800481c;\n                                  huart = PTR_huart1_08004818;\n                                  *(undefined **)(PTR_huart1_08004818 + 8) = puVar3;\n                                  *(undefined **)(huart + 0xc) = puVar3;\n                                  *(undefined **)(huart + 0x10) = puVar3;\n                                  *(undefined **)(huart + 0x18) = puVar3;\n                                  *(undefined **)(huart + 0x1c) = puVar3;\n                                  *(undefined4 *)huart = uVar1;\n                                  *(undefined4 *)(huart + 4) = 0x1c200;\n                                  *(undefined4 *)(huart + 0x14) = 0xc;\n                                  HVar2 = HAL_UART_Init((UART_HandleTypeDef *)huart);\n                                  uVar1 = DAT_08004824;\n                                  puVar3 = PTR_htim1_08004820;\n                                  if (HVar2 == HAL_OK) break;\n                                  iVar5 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_htim1_08004820 + 8) = 0;\n                                *(undefined4 *)(puVar3 + 0x10) = 0;\n                                *(undefined4 *)(puVar3 + 0x14) = 0;\n                                *(undefined4 *)puVar3 = uVar1;\n                                *(uint *)(puVar3 + 4) = uVar6;\n                                *(undefined4 *)(puVar3 + 0xc) = 1000;\n                                HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                                uVar4 = (uint)HVar2;\n                                if (uVar4 == 0) break;\n                                iVar5 = 0x88;\n                              }\n                              sMasterConfig.MasterOutputTrigger = uVar4;\n                              sMasterConfig.MasterSlaveMode = uVar4;\n                              HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                                ((TIM_HandleTypeDef *)puVar3,&sMasterConfig);\n                              uVar4 = (uint)HVar2;\n                              if (uVar4 == 0) break;\n                              iVar5 = 0x8f;\n                            }\n                            sConfigOC.OCMode = 0x60;\n                            sConfigOC.Pulse = uVar4;\n                            sConfigOC.OCPolarity = uVar4;\n                            sConfigOC.OCFastMode = uVar4;\n                            sConfigOC.OCIdleState = uVar4;\n                            sConfigOC.OCNIdleState = uVar4;\n                            HVar2 = HAL_TIM_PWM_ConfigChannel\n                                              ((TIM_HandleTypeDef *)puVar3,&sConfigOC,0xc);\n                            uVar4 = (uint)HVar2;\n                            if (uVar4 == 0) break;\n                            iVar5 = 0x9a;\n                          }\n                          GPIO_InitStruct.Pin = uVar4;\n                          GPIO_InitStruct.Mode = uVar4;\n                          GPIO_InitStruct.Pull = uVar4;\n                          GPIO_InitStruct.Speed = uVar4;\n                          HVar2 = HAL_TIMEx_ConfigBreakDeadTime\n                                            ((TIM_HandleTypeDef *)puVar3,\n                                             (TIM_BreakDeadTimeConfigTypeDef *)&GPIO_InitStruct);\n                          if (HVar2 == HAL_OK) break;\n                          iVar5 = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                        puVar3 = PTR_htim2_08004828;\n                        *(undefined4 *)PTR_htim2_08004828 = 0x40000000;\n                        *(uint *)(puVar3 + 4) = uVar6;\n                        *(undefined4 *)(puVar3 + 8) = 0;\n                        *(undefined4 *)(puVar3 + 0xc) = 1000;\n                        *(undefined4 *)(puVar3 + 0x10) = 0;\n                        HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                        uVar4 = (uint)HVar2;\n                        if (uVar4 == 0) break;\n                        iVar5 = 0xc3;\n                      }\n                      sConfigOC.OCMode = uVar4;\n                      sConfigOC.Pulse = uVar4;\n                      HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                        ((TIM_HandleTypeDef *)puVar3,\n                                         (TIM_MasterConfigTypeDef *)&sConfigOC);\n                      uVar4 = (uint)HVar2;\n                      if (uVar4 == 0) break;\n                      iVar5 = 0xca;\n                    }\n                    GPIO_InitStruct.Pin = 0x60;\n                    GPIO_InitStruct.Mode = uVar4;\n                    GPIO_InitStruct.Pull = uVar4;\n                    HVar2 = HAL_TIM_PWM_ConfigChannel\n                                      ((TIM_HandleTypeDef *)puVar3,\n                                       (TIM_OC_InitTypeDef *)&GPIO_InitStruct,4);\n                    if (HVar2 == HAL_OK) break;\n                    iVar5 = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n                  uVar1 = DAT_08004830;\n                  puVar3 = PTR_htim3_0800482c;\n                  *(undefined4 *)(PTR_htim3_0800482c + 0xc) = 1000;\n                  *(undefined4 *)puVar3 = uVar1;\n                  *(uint *)(puVar3 + 4) = uVar6;\n                  *(undefined4 *)(puVar3 + 8) = 0;\n                  *(undefined4 *)(puVar3 + 0x10) = 0;\n                  HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n                  if (HVar2 == HAL_OK) break;\n                  iVar5 = 0xf0;\n                }\n                sConfigOC.OCMode = 0;\n                sConfigOC.Pulse = 0;\n                HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                                  ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                   (TIM_MasterConfigTypeDef *)&sConfigOC);\n                uVar4 = (uint)HVar2;\n                if (uVar4 == 0) break;\n                iVar5 = 0xf7;\n              }\n              GPIO_InitStruct.Pin = 0x60;\n              GPIO_InitStruct.Mode = uVar4;\n              GPIO_InitStruct.Pull = uVar4;\n              HVar2 = HAL_TIM_PWM_ConfigChannel\n                                ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                 (TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n              if (HVar2 == HAL_OK) break;\n              iVar5 = 0x100;\n            }\n            HVar2 = HAL_TIM_PWM_ConfigChannel\n                              ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                               (TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n            uVar6 = (uint)HVar2;\n            if (uVar6 == 0) break;\n            iVar5 = 0x105;\n          }\n          HAL_TIM_MspPostInit((TIM_HandleTypeDef *)PTR_htim3_0800482c);\n          puVar3 = PTR_htim4_08004834;\n          *(undefined4 *)PTR_htim4_08004834 = DAT_08004838;\n          *(undefined4 *)(puVar3 + 4) = 2;\n          *(undefined4 *)(puVar3 + 8) = 0;\n          *(undefined4 *)(puVar3 + 0xc) = 1000;\n          *(undefined4 *)(puVar3 + 0x10) = 0;\n          HVar2 = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)puVar3);\n          uVar4 = (uint)HVar2;\n          if (uVar4 == 0) break;\n          iVar5 = 0x122;\n        }\n        sConfigOC.OCMode = uVar4;\n        sConfigOC.Pulse = uVar4;\n        HVar2 = HAL_TIMEx_MasterConfigSynchronization\n                          ((TIM_HandleTypeDef *)puVar3,(TIM_MasterConfigTypeDef *)&sConfigOC);\n        uVar4 = (uint)HVar2;\n        if (uVar4 == 0) break;\n        iVar5 = 0x129;\n      }\n      GPIO_InitStruct.Pin = 0x60;\n      GPIO_InitStruct.Mode = uVar4;\n      GPIO_InitStruct.Pull = uVar4;\n      HVar2 = HAL_TIM_PWM_ConfigChannel\n                        ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,8);\n      if (HVar2 == HAL_OK) break;\n      iVar5 = 0x132;\n    }\n    HVar2 = HAL_TIM_PWM_ConfigChannel\n                      ((TIM_HandleTypeDef *)puVar3,(TIM_OC_InitTypeDef *)&GPIO_InitStruct,0xc);\n    if (HVar2 == HAL_OK) break;\n    iVar5 = 0x137;\n  }\n  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)puVar3);\n  return;\n}\n\n",
            "called": [
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_I2C_Init",
                "_Error_Handler",
                "HAL_GPIO_Init",
                "HAL_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "SystemClock_Config",
                "HAL_UART_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800458c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "FUNC_0800458c"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "first",
                "param_2": "second"
            },
            "code": "void compare_floats_08000ffc(float first, float second) {\n    __aeabi_cfcmpeq(second, first);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compare_floats_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "I2C_wait_for_TXE_080016f4",
                "*hi2c": "*i2c_handle",
                "Timeout": "timeout_ms",
                "uVar1": "start_time_ms",
                "uVar2": "current_time_ms",
                "*pIVar3": "*i2c_instance",
                "SR1": "I2C_SR1",
                "HAL_OK": "HAL_OK",
                "ErrorCode": "I2C_ERROR_CODE",
                "State": "I2C_STATE",
                "HAL_I2C_STATE_READY": "I2C_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIMEOUT": "I2C_TIMEOUT",
                "HAL_ERROR": "I2C_ERROR",
                "0x40": "I2C_SR1_TXE",
                "0x20": "I2C_ERROR_TIMEOUT",
                "<< 0x1b": "I2C_SR1_TIMEOUT_SHIFT",
                "0xffffffef": "I2C_SR1_TIMEOUT_CLEAR"
            },
            "code": "HAL_StatusTypeDef I2C_wait_for_TXE_080016f4(I2C_HandleTypeDef *i2c_handle, uint32_t timeout_ms)\n{\n  uint32_t start_time_ms = HAL_GetTick();\n  while(1)\n  {\n    I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n    if ((i2c_instance->SR1 & I2C_SR1_TXE) != 0)\n    {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << I2C_SR1_TIMEOUT_SHIFT) < 0)\n    {\n      break;\n    }\n    if ((timeout_ms != 0) && (HAL_GetTick() - start_time_ms > timeout_ms))\n    {\n      i2c_handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_instance->SR1 = i2c_instance->SR1 & I2C_SR1_TIMEOUT_CLEAR;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "I2C_wait_for_TXE_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "configureTimer_080025a4",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "uVar1": "mode",
                "HVar2": "status",
                "pTVar3": "timer",
                "uVar4": "trigger"
            },
            "code": "HAL_StatusTypeDef configureTimer_080025a4(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  uint32_t trigger;\n  uint32_t mode;\n  HAL_StatusTypeDef status = HAL_BUSY;\n  if (timer_handle->Lock != HAL_LOCKED) {\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    TIM_TypeDef *timer = timer_handle->Instance;\n    trigger = master_config->MasterOutputTrigger;\n    mode = master_config->MasterSlaveMode;\n    timer->CR2 &= ~TIM_CR2_MMS;\n    timer->CR2 |= trigger;\n    timer->SMCR &= ~TIM_SMCR_SMS;\n    timer->SMCR |= mode;\n    timer_handle->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n    timer_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_080025a4"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "read_MS5611_sensor_data_08003034",
                "in_r3": "input_parameter",
                "_rxbuf": "rx_buffer",
                "rxbuf": "rx_buffer",
                "PTR_s____Src_MS5611_c_08003064": "sensor_data_ptr",
                "CONCAT12": "concatenate_12_bits",
                "CONCAT11": "concatenate_11_bits"
            },
            "code": "uint32_t read_MS5611_sensor_data_08003034(void)\n{\n  uint8_t rx_buffer[3];\n  uint32_t sensor_data;\n  I2C_ReadBytes(0xee, 0, rx_buffer, 3, PTR_s____Src_MS5611_c_08003064, 0x8c);\n  sensor_data = (uint32_t) CONCAT12(rx_buffer[0], CONCAT11(rx_buffer[1], rx_buffer[2]));\n  return sensor_data;\n}",
            "called": [
                "I2C_ReadBytes"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "read_MS5611_sensor_data_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "initialize_uart_08004e7c",
                "*huart": "*uart",
                "DAT_08004edc": "USART1",
                "GPIO_InitStruct": "gpio_init_structure",
                "DAT_08004ee0": "GPIOA",
                "USART1_IRQn": "USART1_IRQn",
                "0x7b7": "0x7b7",
                "CR3": "cr3_value"
            },
            "code": "void initialize_uart_08004e7c(UART_HandleTypeDef *uart)\n{\n    uint32_t cr3_value;\n    GPIO_InitTypeDef gpio_init_structure;\n\n    if (uart->Instance == DAT_08004edc) {\n        cr3_value = uart->Instance->CR3 | 0x4000;\n        uart->Instance->CR3 = cr3_value;\n        gpio_init_structure.Pin = GPIO_PIN_9;\n        gpio_init_structure.Mode = GPIO_MODE_AF_PP;\n        gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;\n        HAL_GPIO_Init(DAT_08004ee0, &gpio_init_structure);\n        gpio_init_structure.Pin = GPIO_PIN_10;\n        gpio_init_structure.Mode = GPIO_MODE_INPUT;\n        gpio_init_structure.Pull = GPIO_NOPULL;\n        HAL_GPIO_Init(DAT_08004ee0, &gpio_init_structure);\n        HAL_NVIC_SetPriority(DAT_08004edc_IRQn, 0, 0);\n        HAL_NVIC_EnableIRQ(DAT_08004edc_IRQn);\n    }\n    return;\n}",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "i2c_write_08001530",
                "*hi2c": "*handle",
                "DevAddress": "dev_address",
                "MemAddress": "mem_address",
                "MemAddSize": "mem_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pIVar4": "instance"
            },
            "code": "HAL_StatusTypeDef i2c_write_08001530(I2C_HandleTypeDef *handle, uint16_t dev_address, uint16_t mem_address, uint16_t mem_address_size, uint32_t timeout)\n{\n    HAL_StatusTypeDef status;\n    uint32_t start_time = HAL_GetTick();\n    I2C_TypeDef *instance = handle->Instance;\n    instance->CR1 |= 0x100;\n    do {\n        if ((int)(instance->SR1 << 0x1f) >= 0) {\n            continue;\n        }\n        instance->DR = dev_address & 0xfe;\n        status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080015e4, timeout);\n        if (status != HAL_OK) {\n            if (handle->ErrorCode != 4) {\n                status = HAL_TIMEOUT;\n            } else {\n                instance->CR1 |= 0x200;\n            }\n            return status;\n        }\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status != HAL_OK) {\n            if (handle->ErrorCode != 4) {\n                status = HAL_TIMEOUT;\n            } else {\n                instance->CR1 |= 0x200;\n            }\n            return status;\n        }\n        if (mem_address_size == 1) {\n            instance->DR = (uint8_t)mem_address;\n            return HAL_OK;\n        }\n        instance->DR = (uint8_t)(mem_address >> 8);\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status != HAL_OK) {\n            if (handle->ErrorCode != 4) {\n                status = HAL_TIMEOUT;\n            } else {\n                instance->CR1 |= 0x200;\n            }\n            return status;\n        }\n        instance->DR = (uint8_t)mem_address;\n        return HAL_OK;\n    } while (timeout == 0xffffffff || HAL_GetTick() - start_time <= timeout);\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_write_08001530"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "detectAndSendUpdates_0800411c",
                "puVar1": "lastTick",
                "uVar2": "currentMillis",
                "PTR_last_tick1_08004188": "lastTick1",
                "PTR_last_tick2_08004190": "lastTick2",
                "PTR_last_tick3_0800418c": "lastTick3",
                "AHRS_ComputeAngles": "computeAHRSAngles",
                "PID_Update": "updatePID",
                "MSP_SendIdent": "sendMSPIdent",
                "MSP_SendStatus": "sendMSPStatus",
                "MSP_SendMotor": "sendMSPMotor",
                "MSP_SendAttitude": "sendMSPAttitude",
                "MSP_SendAltitude": "sendMSPAltitude",
                "MSP_SendRawIMU": "sendMSPRawIMU",
                "MSP_SendPID": "sendMSPPID",
                "MS5611_Update": "updateMS5611"
            },
            "code": "void detectAndSendUpdates_0800411c(void)\n{\n    uint32_t currentMillis = millis();\n    uint32_t *PTR_last_tick1_08004188 = PTR_last_tick1_08004188;\n    uint32_t *PTR_last_tick2_08004190 = PTR_last_tick2_08004190;\n    uint32_t *PTR_last_tick3_0800418c = PTR_last_tick3_0800418c;\n\n    if (currentMillis - *PTR_last_tick1_08004188 > 1)\n    {\n        *PTR_last_tick1_08004188 = currentMillis;\n        AHRS_ComputeAngles();\n    }\n\n    if (currentMillis - *PTR_last_tick3_0800418c > 2)\n    {\n        *PTR_last_tick3_0800418c = currentMillis;\n        PID_Update();\n    }\n\n    if (currentMillis - *PTR_last_tick2_08004190 > 3)\n    {\n        *PTR_last_tick2_08004190 = currentMillis;\n        MSP_SendIdent();\n        MSP_SendStatus();\n        MSP_SendMotor();\n        MSP_SendAttitude();\n        MSP_SendAltitude();\n        MSP_SendRawIMU();\n        MSP_SendPID();\n    }\n\n    MS5611_Update();\n}",
            "called": [
                "MS5611_Update",
                "MSP_SendPID",
                "MSP_SendStatus",
                "AHRS_ComputeAngles",
                "MSP_SendAltitude",
                "millis",
                "PID_Update",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "detectAndSendUpdates_0800411c"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "read_i2c_memory_080040b8",
                "device_add": "device_address",
                "register_add": "register_address",
                "bytes": "data",
                "size": "data_size",
                "file": "file_name",
                "line": "line_number",
                "HVar1": "status"
            },
            "code": "void read_i2c_memory_080040b8(uint16_t device_address, uint16_t register_address, uint8_t *data, uint16_t data_size, char *file_name, int line_number)\n{\n  HAL_StatusTypeDef status;\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040e4, device_address, register_address, 1, data, data_size, 200);\n  if (status != HAL_OK) {\n    _Error_Handler(file_name, line_number);\n    return;\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "MS5611_ReadADC"
            ],
            "imported": false,
            "current_name": "read_i2c_memory_080040b8"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "log_error_08004490",
                "file": "file_path",
                "line": "line_number",
                "GPIOx": "GPIO",
                "data_00": "error_message",
                "data": "line_message",
                "PTR_s_Error_with_08004510": "s_Error_with",
                "PTR_s__at_line__0800450c": "s__at_line__"
            },
            "code": "void log_error_08004490(char* file_path, int line_number)\n{\n  GPIO_TypeDef *GPIO;\n  char* error_message;\n  char* line_message;\n  HAL_GPIO_WritePin(GPIO, GPIO_PIN_14, GPIO_PIN_SET);\n  HAL_GPIO_WritePin(GPIO, GPIO_PIN_15, GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(GPIO, GPIO_PIN_13, GPIO_PIN_RESET);\n  error_message = PTR_s_Error_with_08004510;\n  line_message = PTR_s__at_line__0800450c;\n  GPIO = DAT_08004508;\n  do {\n    HAL_GPIO_TogglePin(GPIO, GPIO_PIN_14);\n    HAL_GPIO_TogglePin(GPIO, GPIO_PIN_15);\n    HAL_GPIO_TogglePin(GPIO, GPIO_PIN_13);\n    serialPrint(error_message);\n    serialPrint(file_path);\n    serialPrint(line_message);\n    serialInt(line_number);\n    serialWrite('\n');\n    delay_ms(500);\n  } while( true );\n}",
            "called": [
                "serialInt",
                "HAL_GPIO_TogglePin",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "I2C_WriteByte",
                "I2C_ReadByte",
                "Peripherals_Init",
                "I2C_ReadBytes",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "log_error_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "FUNC_08000e54"
            },
            "code": "\nuint FUNC_08000e54(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e4a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e6c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e6c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e54",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "FUNC_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "I2C_Write_080015e8",
                "hi2c": "handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_tick",
                "pIVar4": "instance",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef I2C_Write_080015e8(I2C_HandleTypeDef *handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout) {\n    HAL_StatusTypeDef status;\n    uint32_t start_tick = HAL_GetTick();\n    I2C_TypeDef *instance = handle->Instance;\n    instance->CR1 |= 0x400;\n    instance->CR1 |= 0x100;\n    while (-1 < (int)(instance->SR1 << 0x1f)) {\n        if (timeout != 0xffffffff) {\n            goto TIMEOUT;\n        }\n    }\n    instance->DR = (byte)device_address & 0xfe;\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n    if (status != HAL_OK) {\n        goto ERROR;\n    }\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status != HAL_OK) {\n        goto ERROR;\n    }\n    if (memory_address_size != 1) {\n        instance->DR = (uint)(memory_address >> 8);\n        status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n        if (status != HAL_OK) {\n            goto ERROR;\n        }\n    }\n    instance->DR = (uint)(byte)memory_address;\n    status = I2C_WaitOnTXEFlagUntilTimeout(handle, timeout);\n    if (status != HAL_OK) {\n        goto ERROR;\n    }\n    instance->CR1 |= 0x100;\n    do {\n        if ((int)(instance->SR1 << 0x1f) < 0) {\n            instance->DR = (byte)device_address | 1;\n            status = I2C_WaitOnMasterAddressFlagUntilTimeout(handle, DAT_080016f0, timeout);\n            if (status == HAL_OK) {\n                return HAL_OK;\n            }\n            if (handle->ErrorCode != 4) {\n                goto TIMEOUT;\n            }\n            goto ERROR;\n        }\n    } while ((timeout != 0) && (HAL_GetTick() - start_tick <= timeout));\n    TIMEOUT:\n    handle->State = HAL_I2C_STATE_READY;\n    handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n    ERROR:\n    if (handle->ErrorCode == 4) {\n        instance->CR1 |= 0x200;\n        return HAL_ERROR;\n    }\n    goto TIMEOUT;\n}",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "I2C_Write_080015e8"
        }
    },
    "used_tokens": 171750,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08003ef2",
            "FUN_08001264",
            "FUN_080058fc",
            "FUN_080070b0",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_0800125a",
            "FUN_08001828",
            "FUN_0800290c",
            "FUN_080028a6",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08000980",
            "FUN_08002368",
            "FUN_08002008",
            "FUN_080008fc",
            "FUN_0800114c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003f7c",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08004ee6",
            "FUN_08004434",
            "FUN_08004ee8",
            "FUN_08004ffc",
            "FUN_0800103c",
            "FUN_0800115c",
            "FUN_08004f60",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_08004ef4",
            "FUN_080043bc",
            "FUN_08004f5c",
            "FUN_08000404",
            "FUN_08004eec",
            "FUN_08004eea",
            "FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08003fd0",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08002ee8",
            "FUN_08001104",
            "FUN_08004978",
            "FUN_08000c60",
            "FUN_08004f04",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08003eac",
            "FUN_080072ac",
            "FUN_08002cb0",
            "FUN_08002324",
            "FUN_08002564",
            "FUN_08004fb0",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080009dc",
            "FUN_08000c70",
            "FUN_080023d0",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08003ff4",
            "FUN_08001004",
            "FUN_08004514",
            "FUN_080057d0",
            "FUN_080072d4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_0800245c",
            "FUN_080008f4",
            "FUN_08004e14",
            "FUN_08002ea0",
            "FUN_08001424",
            "FUN_08004c64",
            "FUN_080041e4",
            "FUN_080003e4",
            "FUN_08007092",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004028",
            "FUN_0800708c",
            "FUN_08002520",
            "FUN_08000464",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_080052e4",
            "FUN_08000f94",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_080009b4",
            "FUN_08003068",
            "FUN_08000f8c",
            "FUN_08000474",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_080009c8",
            "FUN_08000f9c",
            "FUN_08002ed4",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_0800209c",
            "FUN_08003f0e",
            "FUN_0800403c",
            "FUN_0800277c",
            "FUN_0800483c",
            "FUN_08001064",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08004d48",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08004348",
            "FUN_08001078",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08004c30",
            "FUN_0800729c",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800567c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_0800411c",
            "FUN_080040b8",
            "FUN_08004490",
            "FUN_080015e8"
        ],
        [
            "FUN_08001128",
            "FUN_08004a84",
            "FUN_08005854",
            "FUN_08005bc8"
        ],
        [
            "FUN_0800299a"
        ]
    ],
    "locked_functions": []
}