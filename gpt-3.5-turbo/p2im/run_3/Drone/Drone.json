{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_words_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_words_08000134(undefined4 input_word_1,undefined4 input_word_2)\n\n{\n  return CONCAT44(input_word_2,input_word_1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_words_08000134",
                "param_1": "input_word_1",
                "param_2": "input_word_2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char_value;\n  char *next_char;\n  char *current_char;\n  \n  current_char = str;\n  do {\n    next_char = current_char + 1;\n    current_char_value = *current_char;\n    current_char = next_char;\n  } while (current_char_value != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "pcVar2": "next_char",
                "pcVar3": "current_char",
                "cVar1": "current_char_value"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "perform_arithmetic_operation_08000168",
            "code": "\nulonglong performArithmeticOperation_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp7;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint result1;\n  uint temp6;\n  int temp8;\n  uint result2;\n  uint uVar10;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  result1 = input4 ^ 0x80000000;\n  result2 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ result1) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)result2 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp7 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp7 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp7 == -1) {\n      result2 = result1;\n      result3 = input3;\n      if (temp8 == -1) {\n        result2 = input2;\n        result3 = input1;\n      }\n      if (temp8 != -1 || temp7 != -1) {\n        input3 = result3;\n        result1 = result2;\n      }\n      flag2 = (result3 | result2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | result1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result2 == result1;\n      }\n      if (!flag2) {\n        result2 = result2 | 0x80000;\n      }\n      return CONCAT44(result2,result3);\n    }\n    if (((input2 ^ result1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result2 | input1) == 0) {\n        input1 = input3;\n        input2 = result1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != result1) {\n      return 0;\n    }\n    if (result2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      result1 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,input1 << 1);\n    }\n    if (result2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result2 = result2 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result2;\n  flag2 = result3 != 0;\n  if (input4 < result2) {\n    result3 = -result3;\n  }\n  uVar10 = input1;\n  temp6 = input2;\n  if (flag2 && result2 <= input4) {\n    result2 = result2 + result3;\n    uVar10 = input3;\n    temp6 = result1;\n    input3 = input1;\n    result1 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp6,uVar10);\n  }\n  temp4 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    flag2 = uVar10 != 0;\n    uVar10 = -uVar10;\n    temp4 = -temp4 - (uint)flag2;\n  }\n  temp6 = result1 & 0xfffff | 0x100000;\n  if ((result1 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp6 = -temp6 - (uint)flag2;\n  }\n  if (result2 == result3) {\n    temp6 = temp6 ^ 0x100000;\n    if (result2 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      result2 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  result1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (result1 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp3 = uVar10 + input3;\n    temp5 = temp6 << (result1 & 0xff);\n    result1 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(uVar10,input3) + ((int)temp6 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    result4 = temp6 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp6 = (int)temp6 >> (result3 - 0x20 & 0xff);\n    result1 = uVar10 + temp6;\n    temp4 = temp4 + ((int)temp6 >> 0x1f) + (uint)CARRY4(uVar10,temp6);\n  }\n  input2 = temp4 & 0x80000000;\n  result3 = temp4;\n  if ((int)temp4 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -result1;\n    result1 = -(uint)!flag2 - result1;\n    result3 = -(uint)(flag2 <= result3) - temp4;\n  }\n  if (0xfffff < result3) {\n    uVar10 = result2 - 1;\n    if (0x1fffff < result3) {\n      uVar10 = result3 & 1;\n      result3 = result3 >> 1;\n      temp2 = (byte)result1;\n      result1 = (uint)(uVar10 != 0) << 0x1f | result1 >> 1;\n      result4 = (uint)(temp2 & 1) << 0x1f | result4 >> 1;\n      uVar10 = result2;\n      if (0xffbfffff < result2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (result1 & 1) != 0;\n    }\n    return CONCAT44(result3 + uVar10 * 0x100000 + (uint)CARRY4(result1,(uint)flag2) | input2,\n                    result1 + flag2);\n  }\n  flag1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  uVar10 = result1 * 2;\n  flag2 = CARRY4(result1,result1);\n  result1 = result1 * 2 + (uint)flag1;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(uVar10,(uint)flag1));\n  uVar10 = result2 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000278;\n  temp6 = result1;\n  result2 = result3;\n  if (result3 == 0) {\n    temp6 = 0;\n    result2 = result1;\n  }\n  temp8 = LZCOUNT(result2);\n  if (result3 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  result3 = temp8 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  result1 = temp8 - 0x2b;\n  flag2 = (int)result1 < 0;\n  flag1 = result1 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(result1,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    result1 = result3;\n    if (!flag1 && flag2 == flag3) {\n      temp6 = result2 << (result3 & 0xff);\n      result2 = result2 >> (0xcU - temp8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result4 = 0x20 - result1;\n  }\n  result2 = result2 << (result1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result2 = result2 | temp6 >> (result4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp6 = temp6 << (result1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result3 <= (int)uVar10) {\n    return CONCAT44(result2 + (uVar10 - result3) * 0x100000 | input2,temp6);\n  }\n  result1 = ~(uVar10 - result3);\n  if ((int)result1 < 0x1f) {\n    temp8 = result1 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(result1 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp6 >> (0x20 - (0xcU - temp8) & 0xff) | result2 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result1 = result1 + 1;\n    return CONCAT44(input2 | result2 >> (result1 & 0xff),\n                    temp6 >> (result1 & 0xff) | result2 << (0x20 - result1 & 0xff));\n  }\n  return CONCAT44(temp4,result2 >> (result1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "perform_arithmetic_operation_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar6": "result1",
                "uVar9": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "iVar8": "temp8",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar7": "temp6",
                "iVar1": "temp7"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_0800016c",
            "code": "\nulonglong calculate_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp4 = input_2 << 1;\n  temp6 = input_4 << 1;\n  condition1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input_1 == input_3;\n  if (!condition1 || input_1 != input_3) {\n    condition2 = (temp4 | input_1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (temp6 | input_3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)temp6 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp6 = input_4;\n      temp4 = input_3;\n      if (shift2 == -1) {\n        temp6 = input_2;\n        temp4 = input_1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input_3 = temp4;\n        input_4 = temp6;\n      }\n      condition2 = (temp4 | temp6 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp6 == input_4;\n      }\n      if (!condition2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp4);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp4 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition2 = (input_1 & 0x80000000) != 0;\n      temp6 = input_2 * 2 + (uint)condition2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)condition2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input_1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  temp6 = temp6 >> 0x15;\n  temp7 = temp6 - temp4;\n  condition2 = temp7 != 0;\n  if (temp6 < temp4) {\n    temp7 = -temp7;\n  }\n  temp5 = input_1;\n  temp3 = input_2;\n  if (condition2 && temp4 <= temp6) {\n    temp4 = temp4 + temp7;\n    temp5 = input_3;\n    temp3 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < temp7) {\n    return CONCAT44(temp3,temp5);\n  }\n  temp6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = temp5 != 0;\n    temp5 = -temp5;\n    temp6 = -temp6 - (uint)condition2;\n  }\n  temp3 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    condition2 = input_3 != 0;\n    input_3 = -input_3;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (temp4 == temp7) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      temp6 = temp6 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp7 = temp7 - 1;\n    }\n  }\n  temp9 = -temp7 + 0x20;\n  if ((int)temp7 < 0x21) {\n    temp8 = input_3 << (temp9 & 0xff);\n    input_3 = input_3 >> (temp7 & 0xff);\n    temp1 = temp5 + input_3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    temp6 = temp6 + CARRY4(temp5,input_3) + ((int)temp3 >> (temp7 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-temp7 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (temp7 - 0x20 & 0xff);\n    temp9 = temp5 + temp3;\n    temp6 = temp6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  input_2 = temp6 & 0x80000000;\n  temp7 = temp6;\n  if ((int)temp6 < 0) {\n    condition2 = temp8 == 0;\n    temp8 = -temp8;\n    temp7 = -temp9;\n    temp9 = -(uint)!condition2 - temp9;\n    temp7 = -(uint)(condition2 <= temp7) - temp6;\n  }\n  if (0xfffff < temp7) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < temp7) {\n      temp6 = temp7 & 1;\n      temp7 = temp7 >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(temp6 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      condition2 = (temp9 & 1) != 0;\n    }\n    return CONCAT44(temp7 + temp5 * 0x100000 + (uint)CARRY4(temp9,(uint)condition2) | input_2,\n                    temp9 + condition2);\n  }\n  condition1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  temp5 = temp9 * 2;\n  condition2 = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)condition1;\n  temp7 = temp7 * 2 + (uint)(condition2 || CARRY4(temp5,(uint)condition1));\n  temp5 = temp4 - 2;\n  if ((temp7 & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp9;\n  temp4 = temp7;\n  if (temp7 == 0) {\n    temp3 = 0;\n    temp4 = temp9;\n  }\n  shift2 = LZCOUNT(temp4);\n  if (temp7 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  condition3 = SBORROW4(temp9,0x20);\n  temp7 = shift2 - 0x2b;\n  condition2 = (int)temp7 < 0;\n  condition1 = temp7 == 0;\n  if ((int)temp9 < 0x20) {\n    condition3 = SCARRY4(temp7,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp7 = temp9;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = temp4 << (temp9 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp8 = 0x20 - temp7;\n  }\n  temp4 = temp4 << (temp7 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 | temp3 >> (temp8 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (temp7 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp9 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp9) * 0x100000 | input_2,temp3);\n  }\n  temp7 = ~(temp5 - temp9);\n  if ((int)temp7 < 0x1f) {\n    shift2 = temp7 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp7 - 0x1f,0xc)) {\n      return CONCAT44(temp6,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp7 = temp7 + 1;\n    return CONCAT44(input_2 | temp4 >> (temp7 & 0xff),\n                    temp3 >> (temp7 & 0xff) | temp4 << (0x20 - temp7 & 0xff));\n  }\n  return CONCAT44(temp6,temp4 >> (temp7 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "bitwise_shift_08000404",
            "code": "\nulonglong bitwiseShift_08000404(uint number)\n\n{\n  uint zeroCount;\n  uint absNumber;\n  uint shiftValue;\n  int leadingZeroes;\n  uint totalShift;\n  uint sign;\n  uint bitmask;\n  bool isNegative;\n  bool isZero;\n  bool overflow;\n  \n  if (number == 0) {\n    return 0;\n  }\n  sign = number & 0x80000000;\n  absNumber = number;\n  if ((int)sign < 0) {\n    absNumber = -number;\n  }\n  zeroCount = 0;\n  leadingZeroes = LZCOUNT(absNumber);\n  totalShift = leadingZeroes + 0x15;\n  overflow = SBORROW4(totalShift,0x20);\n  shiftValue = leadingZeroes - 0xb;\n  isNegative = (int)shiftValue < 0;\n  isZero = shiftValue == 0;\n  if (totalShift < 0x20) {\n    overflow = SCARRY4(shiftValue,0xc);\n    isNegative = false;\n    isZero = leadingZeroes + 1 == 0;\n    shiftValue = totalShift;\n    if (!isZero && overflow == false) {\n      zeroCount = absNumber << totalShift;\n      absNumber = absNumber >> (0xcU - (leadingZeroes + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != overflow) {\n    bitmask = 0x20 - shiftValue;\n  }\n  absNumber = absNumber << (shiftValue & 0xff);\n  if (isZero || isNegative != overflow) {\n    absNumber = absNumber | 0U >> (bitmask & 0xff);\n  }\n  if (isZero || isNegative != overflow) {\n    zeroCount = 0 << (shiftValue & 0xff);\n  }\nLAB_080002f0:\n  if (totalShift < 0x433) {\n    return CONCAT44(absNumber + (0x432 - totalShift) * 0x100000 | sign,zeroCount);\n  }\n  shiftValue = ~(0x432 - totalShift);\n  if (0x1e < (int)shiftValue) {\n    return CONCAT44(number,absNumber >> (shiftValue - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeroes = shiftValue - 0x13;\n  if (leadingZeroes == 0 || leadingZeroes < 0 != SCARRY4(shiftValue - 0x1f,0xc)) {\n    shiftValue = shiftValue + 1;\n    return CONCAT44(sign | absNumber >> (shiftValue & 0xff),\n                    zeroCount >> (shiftValue & 0xff) | absNumber << (0x20 - shiftValue & 0xff));\n  }\n  return CONCAT44(number,zeroCount >> (0x20 - (0xcU - leadingZeroes) & 0xff) | absNumber << (0xcU - leadingZeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "bitwise_shift_08000404",
                "param_1": "number",
                "uVar1": "zeroCount",
                "uVar2": "absNumber",
                "uVar3": "shiftValue",
                "iVar4": "leadingZeroes",
                "uVar5": "totalShift",
                "uVar6": "sign",
                "in_r12": "bitmask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "overflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "decode_binary_08000428",
            "code": "\nulonglong decodeBinary_08000428(uint input,undefined4 flag,undefined4 state,uint mask)\n\n{\n  uint highBitMask;\n  uint result1;\n  uint result2;\n  uint shiftedInput;\n  uint shiftedInput2;\n  int bitCount;\n  uint shiftAmount;\n  uint remainder;\n  bool check1;\n  bool check2;\n  bool check3;\n  \n  shiftedInput2 = input << 1;\n  check2 = shiftedInput2 == 0;\n  highBitMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)shiftedInput2 >> 3) >> 1;\n  result2 = highBitMask | shiftedInput;\n  input = input << 0x1d;\n  if (!check2) {\n    mask = shiftedInput2 & 0xff000000;\n    check2 = mask == 0;\n  }\n  if (!check2) {\n    check2 = mask == 0xff000000;\n  }\n  if (!check2) {\n    return CONCAT44(result2,input) ^ 0x3800000000000000;\n  }\n  if (shiftedInput2 == 0 || mask == 0xff000000) {\n    return CONCAT44(result2,input);\n  }\n  result1 = input;\n  shiftedInput2 = shiftedInput;\n  if (shiftedInput == 0) {\n    result1 = 0;\n    shiftedInput2 = input;\n  }\n  bitCount = LZCOUNT(shiftedInput2);\n  if (shiftedInput == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftAmount = bitCount - 0xb;\n  check3 = SBORROW4(shiftAmount,0x20);\n  shiftedInput = bitCount - 0x2b;\n  check2 = (int)shiftedInput < 0;\n  check1 = shiftedInput == 0;\n  if ((int)shiftAmount < 0x20) {\n    check3 = SCARRY4(shiftedInput,0xc);\n    bitCount = bitCount + -0x1f;\n    check2 = bitCount < 0;\n    check1 = bitCount == 0;\n    shiftedInput = shiftAmount;\n    if (!check1 && check2 == check3) {\n      result1 = shiftedInput2 << (shiftAmount & 0xff);\n      shiftedInput2 = shiftedInput2 >> (0xcU - bitCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (check1 || check2 != check3) {\n    remainder = 0x20 - shiftedInput;\n  }\n  shiftedInput2 = shiftedInput2 << (shiftedInput & 0xff);\n  if (check1 || check2 != check3) {\n    shiftedInput2 = shiftedInput2 | result1 >> (remainder & 0xff);\n  }\n  if (check1 || check2 != check3) {\n    result1 = result1 << (shiftedInput & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shiftedInput2 + (0x380 - shiftAmount) * 0x100000 | highBitMask,result1);\n  }\n  shiftedInput = ~(0x380 - shiftAmount);\n  if ((int)shiftedInput < 0x1f) {\n    bitCount = shiftedInput - 0x13;\n    if (bitCount != 0 && bitCount < 0 == SCARRY4(shiftedInput - 0x1f,0xc)) {\n      return CONCAT44(result2,result1 >> (0x20 - (0xcU - bitCount) & 0xff) | shiftedInput2 << (0xcU - bitCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(highBitMask | shiftedInput2 >> (shiftedInput & 0xff),\n                    result1 >> (shiftedInput & 0xff) | shiftedInput2 << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(result2,shiftedInput2 >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "decode_binary_08000428",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "state",
                "param_4": "mask",
                "uVar1": "highBitMask",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "shiftedInput",
                "uVar5": "shiftedInput2",
                "iVar6": "bitCount",
                "uVar7": "shiftAmount",
                "in_r12": "remainder",
                "bVar8": "check1",
                "bVar9": "check2",
                "bVar10": "check3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_shift_080004d0",
            "code": "\nulonglong calculate_shift_080004d0(undefined4 input_value_1,uint input_value_2,uint input_value_3,uint input_value_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint value_1;\n  uint value_2;\n  int value_3;\n  uint value_4;\n  uint value_5;\n  uint value_6;\n  uint value_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong combined_values;\n  \n  combined_values = CONCAT44(input_value_2,input_value_1);\n  value_6 = 0x7ff;\n  value_2 = input_value_2 >> 0x14 & 0x7ff;\n  flag_1 = value_2 == 0;\n  if (!flag_1) {\n    value_5 = input_value_4 >> 0x14 & 0x7ff;\n    flag_1 = value_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = value_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = value_5 == 0x7ff;\n  }\n  if (flag_1) {\n    combined_values = calculate_xor_shift_080006ac();\n  }\n  value_1 = (uint)(combined_values >> 0x20);\n  value_3 = value_2 + value_5;\n  value_2 = value_1 ^ input_value_4;\n  value_1 = value_1 & ~(value_6 << 0x15);\n  input_value_4 = input_value_4 & ~(value_6 << 0x15);\n  flag_1 = ((uint)combined_values | value_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (input_value_3 | input_value_4 << 0xc) == 0;\n  }\n  value_1 = value_1 | 0x100000;\n  input_value_4 = input_value_4 | 0x100000;\n  if (flag_1) {\n    input_value_3 = (uint)combined_values | input_value_3;\n    input_value_4 = (value_2 & 0x80000000 | value_1) ^ input_value_4;\n    value_2 = value_6 >> 1;\n    flag_3 = SBORROW4(value_3,value_2);\n    value_4 = value_3 - value_2;\n    flag_1 = value_4 == 0;\n    value_1 = value_4;\n    if (!flag_1 && (int)value_2 <= value_3) {\n      flag_3 = SBORROW4(value_6,value_4);\n      value_1 = value_6 - value_4;\n      flag_1 = value_6 == value_4;\n    }\n    if (!flag_1 && (int)value_1 < 0 == flag_3) {\n      input_value_4 = input_value_4 | value_4 * 0x100000;\n    }\n    if (!flag_1 && (int)value_1 < 0 == flag_3) {\n      return CONCAT44(input_value_4,input_value_3);\n    }\n    input_value_4 = input_value_4 | 0x100000;\n    value_6 = 0;\n    flag_3 = SBORROW4(value_4,1);\n    value_4 = value_4 - 1;\n    flag_1 = value_4 == 0;\n    value_2 = value_4;\n  }\n  else {\n    result_1 = (combined_values & 0xffffffff) * (ulonglong)input_value_3;\n    combined_values = (combined_values & 0xffffffff) * (ulonglong)input_value_4 +\n             (ulonglong)value_1 * (ulonglong)input_value_3 + (result_1 >> 0x20);\n    value_7 = (uint)combined_values;\n    result_2 = (ulonglong)value_1 * (ulonglong)input_value_4 + (combined_values >> 0x20);\n    value_6 = (uint)result_2;\n    value_1 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      value_7 = value_7 | 1;\n    }\n    value_4 = (value_3 + -0x3ff) - (uint)(value_1 < 0x200);\n    if (value_1 < 0x200) {\n      flag_1 = (value_7 & 0x80000000) != 0;\n      value_7 = value_7 << 1;\n      result_2 = CONCAT44(value_1 * 2 + (uint)(CARRY4(value_6,value_6) || CARRY4(value_6 * 2,(uint)flag_1)),\n                       value_6 * 2 + (uint)flag_1);\n    }\n    input_value_4 = value_2 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_value_3 = (uint)result_2 << 0xb | value_7 >> 0x15;\n    value_6 = value_7 * 0x800;\n    flag_2 = 0xfc < value_4;\n    flag_3 = SBORROW4(value_4,0xfd);\n    value_1 = value_4 - 0xfd;\n    flag_1 = value_1 == 0;\n    value_2 = value_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < value_1;\n      flag_3 = SBORROW4(value_1,0x700);\n      value_2 = value_4 - 0x7fd;\n      flag_1 = value_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < value_6;\n      if (value_6 == 0x80000000) {\n        flag_1 = (value_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_value_4 + value_4 * 0x100000 + (uint)CARRY4(input_value_3,(uint)flag_1),input_value_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)value_2 < 0 == flag_3) {\n    return (ulonglong)(input_value_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(value_4,0x36);\n  flag_1 = (int)(value_4 + 0x36) < 0;\n  flag_3 = value_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    input_value_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    input_value_4 = input_value_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(input_value_4,input_value_3);\n  }\n  value_2 = -value_4;\n  value_1 = value_2 - 0x20;\n  if (0x1f < (int)value_2) {\n    value_4 = input_value_3 >> (value_1 & 0xff) | input_value_4 << (0x20 - value_1 & 0xff);\n    value_2 = (input_value_4 >> (value_1 & 0xff) & ~((input_value_4 & 0x80000000) >> (value_1 & 0xff))) -\n            ((int)value_4 >> 0x1f);\n    if ((value_6 | input_value_3 << (0x20 - value_1 & 0xff) | value_4 << 1) == 0) {\n      value_2 = value_2 & ~(value_4 >> 0x1f);\n    }\n    return CONCAT44(input_value_4,value_2) & 0x80000000ffffffff;\n  }\n  value_3 = value_2 - 0x14;\n  if (value_3 == 0 || value_3 < 0 != SCARRY4(value_1,0xc)) {\n    value_7 = input_value_3 << (value_4 + 0x20 & 0xff);\n    value_1 = input_value_3 >> (value_2 & 0xff) | input_value_4 << (value_4 + 0x20 & 0xff);\n    value_4 = value_1 + -((int)value_7 >> 0x1f);\n    if ((value_6 | value_7 << 1) == 0) {\n      value_4 = value_4 & ~(value_7 >> 0x1f);\n    }\n    return CONCAT44((input_value_4 & 0x80000000) +\n                    ((input_value_4 & 0x7fffffff) >> (value_2 & 0xff)) +\n                    (uint)CARRY4(value_1,-((int)value_7 >> 0x1f)),value_4);\n  }\n  value_2 = 0xc - value_3;\n  value_4 = input_value_3 << (value_2 & 0xff);\n  value_2 = input_value_3 >> (0x20 - value_2 & 0xff) | input_value_4 << (value_2 & 0xff);\n  value_1 = value_2 + -((int)value_4 >> 0x1f);\n  if ((value_6 | value_4 << 1) == 0) {\n    value_1 = value_1 & ~(value_4 >> 0x1f);\n  }\n  return CONCAT44((input_value_4 & 0x80000000) + (uint)CARRY4(value_2,-((int)value_4 >> 0x1f)),value_1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_shift_080004d0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "value_1",
                "uVar4": "value_2",
                "iVar5": "value_3",
                "uVar6": "value_4",
                "unaff_r5": "value_5",
                "uVar7": "value_6",
                "uVar8": "value_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "combined_values"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_xor_shift_080006ac",
            "code": "\nulonglong calculate_xor_shift_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp1;\n  uint shifted_input_2;\n  uint temp2;\n  uint temp3;\n  uint constant;\n  bool is_zero;\n  \n  temp2 = constant & input_4 >> 0x14;\n  if (shifted_input_2 != constant && temp2 != constant) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (shifted_input_2 == 0) {\n      temp3 = input_2 & 0x80000000;\n      do {\n        temp1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp3;\n      if (temp2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp3 = input_2;\n  if (((!is_zero) && ((shifted_input_2 != constant || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp2 != constant || (input_1 = input_3, temp3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_xor_shift_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp1",
                "unaff_r4": "shifted_input_2",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint flags1;\n  int difference;\n  uint result1;\n  uint flags2;\n  uint result2;\n  uint result3;\n  uint difference2;\n  uint exponent;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  undefined8 combined;\n  \n  combined = CONCAT44(input2,input1);\n  exponent = 0x7ff;\n  flags1 = input2 >> 0x14 & 0x7ff;\n  condition1 = flags1 == 0;\n  if (!condition1) {\n    flags2 = input4 >> 0x14 & 0x7ff;\n    condition1 = flags2 == 0;\n  }\n  if (!condition1) {\n    condition1 = flags1 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = flags2 == 0x7ff;\n  }\n  if (condition1) {\n    combined = extract_bit_range_08000892();\n  }\n  result1 = (uint)((ulonglong)combined >> 0x20);\n  result3 = (uint)combined;\n  difference = flags1 - flags2;\n  if ((input3 | input4 << 0xc) == 0) {\n    flags1 = (result1 ^ input4) & 0x80000000 | result1 & 0xfffff;\n    condition3 = SCARRY4(difference,exponent >> 1);\n    result1 = difference + (exponent >> 1);\n    condition1 = (int)result1 < 0;\n    condition2 = result1 == 0;\n    if (!condition2 && condition1 == condition3) {\n      condition3 = SBORROW4(exponent,result1);\n      condition1 = (int)(exponent - result1) < 0;\n      condition2 = exponent == result1;\n    }\n    if (!condition2 && condition1 == condition3) {\n      flags1 = flags1 | result1 * 0x100000;\n    }\n    if (!condition2 && condition1 == condition3) {\n      return CONCAT44(flags1,result3);\n    }\n    flags1 = flags1 | 0x100000;\n    exponent = 0;\n    condition2 = SBORROW4(result1,1);\n    result1 = result1 - 1;\n    condition1 = result1 == 0;\n    temp3 = result1;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    exponent = input3 << 8;\n    result2 = (result1 << 0xc) >> 4 | 0x10000000 | result3 >> 0x18;\n    result3 = result3 * 0x100;\n    flags1 = (result1 ^ input4) & 0x80000000;\n    condition1 = temp3 <= result2;\n    if (result2 == temp3) {\n      condition1 = exponent <= result3;\n    }\n    difference = difference + (uint)condition1;\n    result1 = difference + 0x3fd;\n    if (condition1 == false) {\n      temp3 = temp3 >> 1;\n      exponent = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | exponent >> 1;\n    }\n    difference2 = result3 - exponent;\n    result2 = (result2 - temp3) - (uint)(result3 < exponent);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | exponent >> 1;\n    result3 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      condition1 = temp1 <= difference2;\n      if (temp4 < result2 || result2 - temp4 < (uint)condition1) {\n        difference2 = difference2 - temp1;\n        result3 = result3 | temp3;\n        result2 = (result2 - temp4) - (uint)!condition1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp1 <= difference2;\n      condition1 = result2 - temp5 < (uint)condition2;\n      exponent = result2;\n      if (temp5 < result2 || condition1) {\n        difference2 = difference2 - temp1;\n        exponent = (result2 - temp5) - (uint)!condition2;\n      }\n      if (temp5 < result2 || condition1) {\n        result3 = result3 | temp3 >> 1;\n      }\n      result2 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp2 <= difference2;\n      condition1 = exponent - result2 < (uint)condition2;\n      temp5 = exponent;\n      if (result2 < exponent || condition1) {\n        difference2 = difference2 - temp2;\n        temp5 = (exponent - result2) - (uint)!condition2;\n      }\n      if (result2 < exponent || condition1) {\n        result3 = result3 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((result2 & 1) != 0) << 0x1f | temp2 >> 1;\n      condition2 = temp1 <= difference2;\n      condition1 = temp5 - temp6 < (uint)condition2;\n      result2 = temp5;\n      if (temp6 < temp5 || condition1) {\n        difference2 = difference2 - temp1;\n        result2 = (temp5 - temp6) - (uint)!condition2;\n      }\n      if (temp6 < temp5 || condition1) {\n        result3 = result3 | temp3 >> 3;\n      }\n      exponent = result2 | difference2;\n      if (exponent == 0) break;\n      result2 = result2 << 4 | difference2 >> 0x1c;\n      difference2 = difference2 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((flags1 & 0x100000) != 0) goto LAB_08000842;\n        flags1 = flags1 | result3;\n        result3 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((flags1 & 0x100000) == 0) {\n      flags1 = flags1 | result3;\n      result3 = 0;\n    }\nLAB_08000842:\n    condition3 = 0xfc < result1;\n    condition2 = SBORROW4(result1,0xfd);\n    temp4 = difference + 0x300;\n    condition1 = temp4 == 0;\n    temp3 = temp4;\n    if (condition3 && !condition1) {\n      condition3 = 0x6ff < temp4;\n      condition2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      condition1 = temp4 == 0x700;\n    }\n    if (!condition3 || condition1) {\n      condition1 = temp6 <= result2;\n      if (result2 == temp6) {\n        condition1 = temp1 <= difference2;\n      }\n      if (result2 == temp6 && difference2 == temp1) {\n        condition1 = (result3 & 1) != 0;\n      }\n      return CONCAT44(flags1 + result1 * 0x100000 + (uint)CARRY4(result3,(uint)condition1),result3 + condition1);\n    }\n  }\n  if (!condition1 && (int)temp3 < 0 == condition2) {\n    return (ulonglong)(flags1 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition3 = SCARRY4(result1,0x36);\n  condition1 = (int)(result1 + 0x36) < 0;\n  condition2 = result1 == 0xffffffca;\n  if (condition2 || condition1 != condition3) {\n    result3 = 0;\n  }\n  if (condition2 || condition1 != condition3) {\n    flags1 = flags1 & 0x80000000;\n  }\n  if (condition2 || condition1 != condition3) {\n    return CONCAT44(flags1,result3);\n  }\n  temp3 = -result1;\n  result2 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = result3 >> (result2 & 0xff) | flags1 << (0x20 - result2 & 0xff);\n    result1 = (flags1 >> (result2 & 0xff) & ~((flags1 & 0x80000000) >> (result2 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((exponent | result3 << (0x20 - result2 & 0xff) | temp3 << 1) == 0) {\n      result1 = result1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(flags1,result1) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(result2,0xc)) {\n    result1 = 0xc - difference;\n    temp3 = result3 << (result1 & 0xff);\n    result3 = result3 >> (0x20 - result1 & 0xff) | flags1 << (result1 & 0xff);\n    result1 = result3 + -((int)temp3 >> 0x1f);\n    if ((exponent | temp3 << 1) == 0) {\n      result1 = result1 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((flags1 & 0x80000000) + (uint)CARRY4(result3,-((int)temp3 >> 0x1f)),result1);\n  }\n  result2 = result3 << (result1 + 0x20 & 0xff);\n  result3 = result3 >> (temp3 & 0xff) | flags1 << (result1 + 0x20 & 0xff);\n  result1 = result3 + -((int)result2 >> 0x1f);\n  if ((exponent | result2 << 1) == 0) {\n    result1 = result1 & ~(result2 >> 0x1f);\n  }\n  return CONCAT44((flags1 & 0x80000000) +\n                  ((flags1 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(result3,-((int)result2 >> 0x1f)),result1);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "flags1",
                "iVar8": "difference",
                "uVar9": "result1",
                "unaff_r5": "flags2",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "difference2",
                "uVar13": "exponent",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "condition3",
                "uVar17": "combined"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "extract_bit_range_08000892",
            "code": "\nulonglong extract_bit_range_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "extract_bit_range_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "compare_parameters_08000904",
            "code": "\nuint compareParameters_08000904(uint inputValue1,uint inputValue2,uint inputValue3,uint inputValue4)\n\n{\n  uint xorResult;\n  bool isEqual;\n  bool isLessThanOrEqual;\n  \n  if (((int)(inputValue2 << 1) >> 0x15 == -1 || (int)(inputValue4 << 1) >> 0x15 == -1) &&\n     ((((int)(inputValue2 << 1) >> 0x15 == -1 && ((inputValue1 | inputValue2 << 0xc) != 0)) ||\n      (((int)(inputValue4 << 1) >> 0x15 == -1 && ((inputValue3 | inputValue4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isEqual = (inputValue1 | inputValue2 << 1) == 0;\n  if (isEqual) {\n    isEqual = (inputValue3 | inputValue4 << 1) == 0;\n  }\n  if (!isEqual) {\n    isEqual = inputValue2 == inputValue4;\n  }\n  if (isEqual) {\n    isEqual = inputValue1 == inputValue3;\n  }\n  if (!isEqual) {\n    xorResult = inputValue2 ^ inputValue4;\n    isEqual = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isEqual = inputValue2 == inputValue4;\n    }\n    isLessThanOrEqual = -1 < (int)xorResult && inputValue4 <= inputValue2;\n    if (isEqual) {\n      isLessThanOrEqual = inputValue3 <= inputValue1;\n    }\n    inputValue4 = (int)inputValue4 >> 0x1f;\n    if (!isLessThanOrEqual) {\n      inputValue4 = ~inputValue4;\n    }\n    return inputValue4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "compare_parameters_08000904",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "uVar1": "xorResult",
                "bVar2": "isEqual",
                "bVar3": "isLessThanOrEqual"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "verify_and_return_parameters_08000980",
            "code": "\nvoid verify_and_return_parameters_08000980(undefined4 input_1,undefined4 input_2,undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  verify_parameter_and_return_08000990(parameter_1,parameter_2,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "verify_and_return_parameters_08000980",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "parameter_1",
                "param_4": "parameter_2"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "verify_parameter_and_return_08000990",
            "code": "\nundefined4 verify_parameter_and_return_08000990(undefined4 input_param)\n\n{\n  verify_parameters();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "verify_parameter_and_return_08000990",
                "param_1": "input_param",
                "compare_parameters_08000904": "verify_parameters"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "is_parameter_verified_080009a0",
            "code": "\nbool is_parameter_verified_080009a0(void)\n\n{\n  char is_nonzero;\n  \n  verify_parameter_and_return_08000990();\n  return is_nonzero != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "is_parameter_verified_080009a0",
                "in_ZR": "is_nonzero"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_input_is_empty_080009b4",
            "code": "\nbool check_if_input_is_empty_080009b4(void)\n\n{\n  char input_char;\n  \n  verify_parameter_and_return_08000990();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_input_is_empty_080009b4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_and_return_080009c8",
            "code": "\nbool check_and_return_080009c8(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  verify_parameter_and_return_08000990();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_and_return_080009c8",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_terminated_080009f0",
            "code": "\nbool check_if_null_terminated_080009f0(void)\n\n{\n  char character;\n  \n  verify_and_return_parameters();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_terminated_080009f0",
                "in_CY": "character",
                "verify_and_return_parameters_08000980": "verify_and_return_parameters"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_float32_08000a30",
            "code": "\nuint calculateFloat32_08000a30(uint input,uint control)\n\n{\n  uint result;\n  uint multipliedControl;\n  uint additionValue;\n  uint temporaryVar;\n  bool isZero;\n  bool isLessThan;\n  \n  multipliedControl = control * 2;\n  isLessThan = multipliedControl < 0x70000000;\n  additionValue = multipliedControl + 0x90000000;\n  result = additionValue;\n  if (!isLessThan) {\n    temporaryVar = multipliedControl + 0x8fe00000;\n    result = temporaryVar;\n  }\n  isZero = result == 0;\n  if (!isLessThan && additionValue >= 0x200000) {\n    isZero = temporaryVar == 0x1fc00000;\n  }\n  if (((isLessThan || additionValue < 0x200000) || 0x1fc00000 < temporaryVar) || isZero) {\n    if ((control & 0x40000000) != 0) {\n      if (((int)multipliedControl >> 0x15 == -1) && ((input | control << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return control & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedControl + 0x92e00000) < 0 != SCARRY4(additionValue,0x2e00000)) {\n      return control & 0x80000000;\n    }\n    multipliedControl = 0x18 - (multipliedControl + 0x92e00000 >> 0x15);\n    result = input >> (multipliedControl & 0xff);\n    if (input << (0x20 - multipliedControl & 0xff) != 0) {\n      result = result | 1;\n    }\n    additionValue = control & 0x1fffff | 0x100000;\n    input = result | additionValue << (0x20 - multipliedControl & 0xff);\n    additionValue = (additionValue >> (multipliedControl & 0xff)) << 1;\n  }\n  result = (control & 0x80000000 | input >> 0x1d) + additionValue * 4 + (uint)(0x7fffffff < input * 8);\n  if (input * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_float32_08000a30",
                "param_1": "input",
                "param_2": "control",
                "uVar1": "result",
                "uVar2": "multipliedControl",
                "uVar3": "additionValue",
                "in_r12": "temporaryVar",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculateFloatingPoint_08000ad8(uint inputValue,uint maskValue,undefined4 unknownValue,uint comparisonValue)\n\n{\n  int shiftValue1;\n  int shiftValue2;\n  uint transformedValue1;\n  uint transformedValue2;\n  uint resultValue1;\n  uint resultValue2;\n  uint differenceValue;\n  bool isTrue;\n  \n  transformedValue1 = maskValue ^ 0x80000000;\n  resultValue1 = inputValue << 1;\n  isTrue = resultValue1 == 0;\n  if (!isTrue) {\n    comparisonValue = maskValue << 1;\n    isTrue = comparisonValue == 0;\n  }\n  if (!isTrue) {\n    isTrue = resultValue1 == comparisonValue;\n  }\n  shiftValue1 = (int)resultValue1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftValue1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)comparisonValue >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftValue2 = (int)(maskValue << 1) >> 0x18;\n    if (shiftValue1 == -1 || shiftValue2 == -1) {\n      resultValue1 = transformedValue1;\n      if (shiftValue1 == -1) {\n        resultValue1 = inputValue;\n      }\n      if (shiftValue1 != -1 || shiftValue2 != -1) {\n        transformedValue1 = resultValue1;\n      }\n      isTrue = (resultValue1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (transformedValue1 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = resultValue1 == transformedValue1;\n      }\n      if (!isTrue) {\n        resultValue1 = resultValue1 | 0x400000;\n      }\n      return resultValue1;\n    }\n    if (((inputValue ^ transformedValue1) & 0x7fffffff) != 0) {\n      if (resultValue1 == 0) {\n        inputValue = transformedValue1;\n      }\n      return inputValue;\n    }\n    if (inputValue != transformedValue1) {\n      return 0;\n    }\n    if ((resultValue1 & 0xff000000) == 0) {\n      transformedValue1 = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        transformedValue1 = transformedValue1 | 0x80000000;\n      }\n      return transformedValue1;\n    }\n    if (resultValue1 < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_08000c12:\n    return inputValue | 0x7f800000;\n  }\n  resultValue1 = resultValue1 >> 0x18;\n  comparisonValue = comparisonValue >> 0x18;\n  differenceValue = comparisonValue - resultValue1;\n  isTrue = differenceValue != 0;\n  resultValue2 = resultValue1;\n  if (isTrue && resultValue1 <= comparisonValue) {\n    resultValue2 = resultValue1 + differenceValue;\n  }\n  if (isTrue && resultValue1 <= comparisonValue) {\n    transformedValue1 = transformedValue1 ^ inputValue;\n  }\n  if (isTrue && resultValue1 <= comparisonValue) {\n    inputValue = inputValue ^ transformedValue1;\n  }\n  if (isTrue && resultValue1 <= comparisonValue) {\n    transformedValue1 = transformedValue1 ^ inputValue;\n  }\n  if (comparisonValue < resultValue1) {\n    differenceValue = -differenceValue;\n  }\n  if (0x19 < differenceValue) {\n    return inputValue;\n  }\n  resultValue1 = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    resultValue1 = -resultValue1;\n  }\n  transformedValue2 = transformedValue1 & 0xffffff | 0x800000;\n  if ((transformedValue1 & 0x80000000) != 0) {\n    transformedValue2 = -transformedValue2;\n  }\n  if (resultValue2 == differenceValue) {\n    transformedValue2 = transformedValue2 ^ 0x800000;\n    if (resultValue2 == 0) {\n      resultValue1 = resultValue1 ^ 0x800000;\n      resultValue2 = 1;\n    }\n    else {\n      differenceValue = differenceValue - 1;\n    }\n  }\n  resultValue1 = resultValue1 + ((int)transformedValue2 >> (differenceValue & 0xff));\n  transformedValue2 = transformedValue2 << (0x20 - differenceValue & 0xff);\n  inputValue = resultValue1 & 0x80000000;\n  if ((int)resultValue1 < 0) {\n    isTrue = transformedValue2 != 0;\n    transformedValue2 = -transformedValue2;\n    resultValue1 = -resultValue1 - (uint)isTrue;\n  }\n  if (resultValue1 < 0x800000) {\n    transformedValue1 = transformedValue2 & 0x80000000;\n    transformedValue2 = transformedValue2 << 1;\n    resultValue1 = resultValue1 * 2 + (uint)(transformedValue1 != 0);\n    transformedValue1 = resultValue2 - 2;\n    if ((resultValue1 & 0x800000) == 0) {\n      differenceValue = LZCOUNT(resultValue1) - 8;\n      resultValue1 = resultValue1 << (differenceValue & 0xff);\n      if ((int)transformedValue1 < (int)differenceValue) {\n        resultValue1 = resultValue1 >> (-(transformedValue1 - differenceValue) & 0xff);\n      }\n      else {\n        resultValue1 = resultValue1 + (transformedValue1 - differenceValue) * 0x800000;\n      }\n      return resultValue1 | inputValue;\n    }\n  }\n  else {\n    transformedValue1 = resultValue2 - 1;\n    if (0xffffff < resultValue1) {\n      transformedValue1 = resultValue1 & 1;\n      resultValue1 = resultValue1 >> 1;\n      transformedValue2 = (uint)(transformedValue1 != 0) << 0x1f | transformedValue2 >> 1;\n      transformedValue1 = resultValue2;\n      if (0xfd < resultValue2) goto LAB_08000c12;\n    }\n  }\n  resultValue1 = resultValue1 + transformedValue1 * 0x800000 + (uint)(0x7fffffff < transformedValue2);\n  if (transformedValue2 == 0x80000000) {\n    resultValue1 = resultValue1 & 0xfffffffe;\n  }\n  return resultValue1 | inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "inputValue",
                "param_2": "maskValue",
                "param_3": "unknownValue",
                "param_4": "comparisonValue",
                "iVar1": "shiftValue1",
                "iVar2": "shiftValue2",
                "uVar3": "transformedValue1",
                "uVar4": "transformedValue2",
                "uVar5": "resultValue1",
                "uVar6": "resultValue2",
                "uVar7": "differenceValue",
                "bVar8": "isTrue"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint shiftValue;\n  bool isTrue;\n  \n  temp1 = input1 << 1;\n  isTrue = temp1 == 0;\n  if (!isTrue) {\n    input4 = input2 << 1;\n    isTrue = input4 == 0;\n  }\n  if (!isTrue) {\n    isTrue = temp1 == input4;\n  }\n  shiftAmount1 = (int)temp1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftAmount1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)input4 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      temp1 = input2;\n      if (shiftAmount1 == -1) {\n        temp1 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        input2 = temp1;\n      }\n      isTrue = (temp1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (input2 & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = temp1 == input2;\n      }\n      if (!isTrue) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  shiftValue = input4 - temp1;\n  isTrue = shiftValue != 0;\n  temp2 = temp1;\n  if (isTrue && temp1 <= input4) {\n    temp2 = temp1 + shiftValue;\n  }\n  if (isTrue && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isTrue && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isTrue && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    shiftValue = -shiftValue;\n  }\n  if (0x19 < shiftValue) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == shiftValue) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      shiftValue = shiftValue - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (shiftValue & 0xff));\n  result1 = result1 << (0x20 - shiftValue & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isTrue = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)isTrue;\n  }\n  if (temp1 < 0x800000) {\n    shiftValue = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(shiftValue != 0);\n    shiftValue = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)shiftValue < (int)temp2) {\n        temp1 = temp1 >> (-(shiftValue - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (shiftValue - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    shiftValue = temp2 - 1;\n    if (0xffffff < temp1) {\n      shiftValue = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(shiftValue != 0) << 0x1f | result1 >> 1;\n      shiftValue = temp2;\n      if (0xfd < temp2) goto LAB_08000c12;\n    }\n  }\n  temp1 = temp1 + shiftValue * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "shiftValue",
                "bVar7": "isTrue"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_checksum_08000c3c",
            "code": "\nuint calculateChecksum_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int intermediateValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZeros = intermediateValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = intermediateValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_checksum_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_modified_value_08000c44",
            "code": "\nuint calculateModifiedValue_08000c44(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftAmount;\n  uint isNegative;\n  int modifiedValue;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = countLeadingZeros(inputValue);\n  shiftAmount = leadingZerosCount - 8;\n  modifiedValue = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZerosCount) {\n    leadingZerosCount = 0 << (shiftAmount & 0xff);\n    isNegative = modifiedValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZerosCount);\n    if (leadingZerosCount == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputValue << leadingZerosCount + 0x18;\n  isNegative = modifiedValue + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_modified_value_08000c44",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "modifiedValue",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculateFloat_08000cec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint input1_bits;\n  int sum_bits;\n  int adjusted_sum_bits;\n  uint product1;\n  int adjusted_sum_bits2;\n  uint adjusted_sum;\n  bool isZero;\n  bool isOverflow;\n  \n  input1_bits = input1 >> 0x17 & 0xff;\n  isZero = input1_bits == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = input1_bits == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (input1_bits == 0xff || input4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      adjusted_sum = result;\n      if (((isZero) || ((input1_bits == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (adjusted_sum = input2, (input2 & 0x7fffff) != 0)))) {\n        return adjusted_sum | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = input1_bits == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input1_bits = input1_bits - 1;\n    }\n    input1 = input1 | result;\n    isZero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum_bits = input1_bits + input4;\n  adjusted_sum = input1 ^ input2;\n  input1_bits = input1 << 9;\n  isZero = input1_bits == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (input1_bits == 0) {\n      input2 = input2 << 9;\n    }\n    result = adjusted_sum & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isOverflow = SBORROW4(sum_bits,0x7f);\n    adjusted_sum_bits = sum_bits + -0x7f;\n    isZero = adjusted_sum_bits == 0;\n    adjusted_sum_bits2 = adjusted_sum_bits;\n    if (!isZero && 0x7e < sum_bits) {\n      isOverflow = SBORROW4(0xff,adjusted_sum_bits);\n      adjusted_sum_bits2 = 0xff - adjusted_sum_bits;\n      isZero = adjusted_sum_bits == 0xff;\n    }\n    if (!isZero && adjusted_sum_bits2 < 0 == isOverflow) {\n      result = result | adjusted_sum_bits * 0x800000;\n    }\n    if (!isZero && adjusted_sum_bits2 < 0 == isOverflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    product1 = 0;\n    isOverflow = SBORROW4(adjusted_sum_bits,1);\n    adjusted_sum = sum_bits - 0x80;\n    isZero = adjusted_sum == 0;\n    input1_bits = adjusted_sum;\n  }\n  else {\n    product = (ulonglong)(input1_bits >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product1 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | product1 >> 0x1f;\n      product1 = product1 << 1;\n    }\n    result = adjusted_sum & 0x80000000 | result;\n    adjusted_sum = (sum_bits + -0x7f) - (uint)isZero;\n    isOverflow = SBORROW4(adjusted_sum,0xfd);\n    isZero = adjusted_sum == 0xfd;\n    input1_bits = adjusted_sum - 0xfd;\n    if (adjusted_sum < 0xfe) {\n      result = result + adjusted_sum * 0x800000 + (uint)(0x7fffffff < product1);\n      if (product1 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)input1_bits < 0 != isOverflow) {\n    isZero = (int)(adjusted_sum + 0x19) < 0;\n    if (adjusted_sum == 0xffffffe7 || isZero != SCARRY4(adjusted_sum,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (adjusted_sum != 0xffffffe7 && isZero == SCARRY4(adjusted_sum,0x19)) {\n      input1_bits = (result << 1) >> (-adjusted_sum & 0xff);\n      adjusted_sum = result << (adjusted_sum + 0x20 & 0xff);\n      input1_bits = ((uint)((result & 0x80000000) != 0) << 0x1f | input1_bits >> 1) + (uint)((byte)input1_bits & 1);\n      if ((product1 | adjusted_sum << 1) == 0) {\n        input1_bits = input1_bits & ~(adjusted_sum >> 0x1f);\n      }\n      return input1_bits;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "input1_bits",
                "iVar4": "sum_bits",
                "iVar5": "adjusted_sum_bits",
                "uVar6": "product1",
                "iVar7": "adjusted_sum_bits2",
                "uVar8": "adjusted_sum",
                "bVar9": "isZero",
                "bVar10": "isOverflow"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "floating_point_conversion_08000e54",
            "code": "\nuint floatingPointConversion_08000e54(uint firstOperand,uint secondOperand,undefined4 flag,uint secondFlag)\n\n{\n  uint quotient;\n  uint firstFlag;\n  int difference;\n  uint loopCounter;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  firstFlag = firstOperand >> 0x17 & 0xff;\n  condition1 = firstFlag == 0;\n  if (!condition1) {\n    secondFlag = secondOperand >> 0x17 & 0xff;\n    condition1 = secondFlag == 0;\n  }\n  if (!condition1) {\n    condition1 = firstFlag == 0xff;\n  }\n  if (!condition1) {\n    condition1 = secondFlag == 0xff;\n  }\n  if (condition1) {\n    secondFlag = secondOperand >> 0x17 & 0xff;\n    result = firstOperand;\n    if (firstFlag == 0xff) {\n      if (((firstOperand & 0x7fffff) != 0) || (result = secondOperand, secondFlag == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (secondFlag == 0xff) {\n        result = secondOperand;\n        if ((secondOperand & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (firstOperand ^ secondOperand) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (firstOperand & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (secondOperand & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = firstFlag == 0;\n        result = firstOperand & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            firstOperand = firstOperand << 1;\n            condition1 = (firstOperand & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          firstFlag = firstFlag - 1;\n        }\n        firstOperand = firstOperand | result;\n        condition1 = secondFlag == 0;\n        result = secondOperand & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            secondOperand = secondOperand << 1;\n            condition1 = (secondOperand & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          secondFlag = secondFlag - 1;\n        }\n        secondOperand = secondOperand | result;\n        goto LAB_08000e6c;\n      }\n      if ((firstOperand & 0x7fffffff) == 0) {\n        if ((secondOperand & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    firstOperand = firstOperand ^ secondOperand;\n  }\n  else {\nLAB_08000e6c:\n    difference = firstFlag - secondFlag;\n    if (secondOperand << 9 == 0) {\n      firstOperand = (firstOperand ^ secondOperand) & 0x80000000 | firstOperand & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        firstOperand = firstOperand | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return firstOperand;\n      }\n      firstOperand = firstOperand | 0x800000;\n      firstFlag = 0;\n      condition2 = SBORROW4(sum,1);\n      loopCounter = difference + 0x7e;\n      condition1 = loopCounter == 0;\n      result = loopCounter;\n    }\n    else {\n      quotient = (secondOperand << 9) >> 4 | 0x10000000;\n      firstFlag = (firstOperand << 9) >> 4 | 0x10000000;\n      firstOperand = (firstOperand ^ secondOperand) & 0x80000000;\n      condition1 = quotient <= firstFlag;\n      if (!condition1) {\n        firstFlag = firstFlag << 1;\n      }\n      loopCounter = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (quotient <= firstFlag) {\n          firstFlag = firstFlag - quotient;\n          firstOperand = firstOperand | result;\n        }\n        condition1 = quotient >> 1 <= firstFlag;\n        if (condition1) {\n          firstFlag = firstFlag - (quotient >> 1);\n        }\n        if (condition1) {\n          firstOperand = firstOperand | result >> 1;\n        }\n        condition1 = quotient >> 2 <= firstFlag;\n        if (condition1) {\n          firstFlag = firstFlag - (quotient >> 2);\n        }\n        if (condition1) {\n          firstOperand = firstOperand | result >> 2;\n        }\n        condition1 = quotient >> 3 <= firstFlag;\n        if (condition1) {\n          firstFlag = firstFlag - (quotient >> 3);\n        }\n        if (condition1) {\n          firstOperand = firstOperand | result >> 3;\n        }\n        firstFlag = firstFlag * 0x10;\n        condition1 = firstFlag == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(loopCounter,0xfd);\n      condition1 = loopCounter == 0xfd;\n      result = loopCounter - 0xfd;\n      if (loopCounter < 0xfe) {\n        firstOperand = firstOperand + loopCounter * 0x800000 + (uint)(quotient <= firstFlag);\n        if (firstFlag - quotient == 0) {\n          firstOperand = firstOperand & 0xfffffffe;\n        }\n        return firstOperand;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(loopCounter + 0x19) < 0;\n      if (loopCounter == 0xffffffe7 || condition1 != SCARRY4(loopCounter,0x19)) {\n        firstOperand = firstOperand & 0x80000000;\n      }\n      if (loopCounter == 0xffffffe7 || condition1 != SCARRY4(loopCounter,0x19)) {\n        return firstOperand;\n      }\n      result = (firstOperand << 1) >> (-loopCounter & 0xff);\n      loopCounter = firstOperand << (loopCounter + 0x20 & 0xff);\n      result = ((uint)((firstOperand & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((firstFlag | loopCounter << 1) == 0) {\n        result = result & ~(loopCounter >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return firstOperand & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "floating_point_conversion_08000e54",
                "param_1": "firstOperand",
                "param_2": "secondOperand",
                "param_3": "flag",
                "param_4": "secondFlag",
                "uVar1": "quotient",
                "uVar2": "firstFlag",
                "iVar3": "difference",
                "uVar4": "loopCounter",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_overflow_and_sign_08000f9c",
            "code": "\nuint check_overflow_and_sign_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_overflow;\n  uint result_1;\n  uint result_2;\n  uint combined_value;\n  bool is_zero;\n  \n  result_1 = input_1 * 2;\n  result_2 = input_2 * 2;\n  if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) &&\n     ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    output 1;\n  }\n  combined_value = result_1 | input_2 & 0x7fffffff;\n  is_zero = combined_value == 0;\n  if (!is_zero) {\n    combined_value = input_1 ^ input_2;\n    is_zero = combined_value == 0;\n  }\n  is_overflow = -1 < (int)combined_value;\n  if (is_overflow) {\n    input_1 = result_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_overflow && result_2 <= result_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_overflow || result_2 > result_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  output input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_overflow_and_sign_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_overflow",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "combined_value",
                "bVar5": "is_zero",
                "return": "output"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_values_08000ffc",
            "code": "\nvoid concatenateValues_08000ffc(undefined4 firstParam,undefined4 secondParam)\n\n{\n  concatenate_values_08001004(secondParam,firstParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_values_08000ffc",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_values_08001004",
            "code": "\nundefined8 concatenateValues_08001004(undefined4 firstValue,undefined4 secondValue)\n\n{\n  check_overflow_and_sign_08000f9c();\n  return CONCAT44(secondValue,firstValue);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_values_08001004",
                "param_1": "firstValue",
                "param_2": "secondValue"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_values_08001014",
            "code": "\nbool check_concatenated_values_08001014(void)\n\n{\n  char is_not_zero;\n  \n  concatenate_values_08001004();\n  return is_not_zero != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_values_08001014",
                "in_ZR": "is_not_zero"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_concatenation_successful_08001028",
            "code": "\nbool is_concatenation_successful_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_values_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_concatenation_successful_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenated_values_08001050",
            "code": "\nbool checkConcatenatedValues_08001050(void)\n\n{\n  undefined isZeroResult;\n  undefined carryFlag;\n  \n  concatenate_values_08000ffc();\n  return !(bool)carryFlag || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenated_values_08001050",
                "in_ZR": "isZeroResult",
                "in_CY": "carryFlag"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_concatenation_successful_08001064",
            "code": "\nbool isConcatenationSuccessful_08001064(void)\n\n{\n  char inputCharacter;\n  \n  concatenate_values_08000ffc();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_concatenation_successful_08001064",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_unsigned_int_08001078",
            "code": "\nuint convertToUnsignedInt_08001078(uint inputValue)\n\n{\n  uint shiftedInput;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedInput = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedInput;\n  if (shiftedInput < 0x9f && difference != 0) {\n    shiftedInput = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedInput = -shiftedInput;\n    }\n    return shiftedInput;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_unsigned_int_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedInput",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "bitwise_shift_080010c4",
            "code": "\nuint bitwise_shift_080010c4(uint input_value)\n\n{\n  uint difference;\n  \n  if (((input_value bitwise_and 0x80000000) not_equal 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  difference = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)difference) {\n    return (input_value << 8 | 0x80000000) >> (difference bitwise_and 0xff);\n  }\n  if ((difference == 0xffffff9f) bitwise_andbitwise_and ((input_value bitwise_and 0x7fffff) not_equal 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "bitwise_shift_080010c4",
                "param_1": "input_value",
                "uVar1": "difference",
                "&": "bitwise_and",
                "!=": "not_equal"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 inputData)\n\n{\n  uint dataInMilliseconds;\n  \n  dataInMilliseconds = get_data_08002214();\n  set_parameters_08001214(dataInMilliseconds / 1000);\n  update_memory_data_08001194(0xffffffff,inputData,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "inputData",
                "uVar1": "dataInMilliseconds"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_and_setup_08001128",
            "code": "\n\n\nundefined4 initialize_and_setup_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_memory_protection(3);\n  initialize_system(0);\n  initialize_memory();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_and_setup_08001128",
                "set_memory_protection_08001170": "set_memory_protection",
                "initialize_system_08001104": "initialize_system",
                "initialize_memory_08004ccc": "initialize_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_global_variable_0800115c",
            "code": "\nundefined4 getGlobalVariable_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_global_variable_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_memory_protection_08001170",
            "code": "\n\n\nvoid setMemoryProtection_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_memory_protection_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_data_08001194",
            "code": "\n\n\nvoid updateMemoryData_08001194(uint address,uint data1,uint data2)\n\n{\n  undefined updatedValue;\n  uint offset;\n  uint shiftValue;\n  uint updatedShift;\n  \n  shiftValue = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  offset = 7 - shiftValue;\n  updatedShift = shiftValue + 4;\n  if (3 < offset) {\n    offset = 4;\n  }\n  if (updatedShift < 7) {\n    shiftValue = 0;\n  }\n  offset = (1 << (offset & 0xff)) - 1;\n  if (6 < updatedShift) {\n    shiftValue = shiftValue - 3;\n  }\n  updatedValue = (undefined)\n          ((data2 & (1 << (shiftValue & 0xff)) - 1U | (data1 & offset) << (shiftValue & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shiftValue = address + 0xe000e100;\n  }\n  else {\n    offset = 0xe000ed14;\n    shiftValue = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shiftValue + 0x300) = updatedValue;\n  }\n  else {\n    *(undefined *)(offset + shiftValue) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_data_08001194",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "updatedValue",
                "uVar2": "offset",
                "uVar3": "shiftValue",
                "uVar4": "updatedShift"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_memory_080011fc",
            "code": "\nvoid setBitInMemory_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_memory_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_parameters_08001214",
            "code": "\n\n\nundefined4 set_parameters_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_parameters_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "apply_bit_mask_08001264",
            "code": "\n\n\nvoid applyBitMask_08001264(uint *output,uint *input)\n\n{\n  uint outputValue;\n  uint bitMask;\n  uint bits;\n  int index;\n  uint bitOffset;\n  uint temp;\n  uint constant;\n  uint *ptr;\n  int tempIndex;\n  \n  outputValue = 0;\n  bitOffset = 0;\n  do {\n    temp = 1 << (bitOffset & 0xff);\n    bitMask = temp & *input;\n    if (temp == bitMask) {\n      bits = input[1];\n      if (bits == 0x12) {\n        outputValue = input[3] + 0xc;\n      }\n      else if (bits < 0x13) {\n        if (bits == 2) {\n          outputValue = input[3] + 8;\n        }\n        else if (bits < 3) {\n          if (bits == 0) goto LAB_080013be;\n          if (bits == 1) {\n            outputValue = input[3];\n          }\n        }\n        else if (bits == 3) {\n          outputValue = 0;\n        }\n        else if (bits == 0x11) {\n          outputValue = input[3] + 4;\n        }\n      }\n      else {\n        if (bits != 0x10210000) {\n          if (bits < 0x10210001) {\n            if (bits != 0x10110000) {\n              constant = 0x10120000;\nLAB_080013b8:\n              if (bits != constant) goto LAB_080012a8;\n            }\n          }\n          else if ((bits != 0x10310000) && (bits != 0x10320000)) {\n            constant = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        outputValue = input[2];\n        if (outputValue == 0) {\n          outputValue = 4;\n        }\n        else {\n          if (outputValue == 1) {\n            output[4] = temp;\n          }\n          if (outputValue != 1) {\n            output[5] = temp;\n          }\n          outputValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        temp = *output;\n        bits = bitOffset << 2;\n        ptr = output;\n      }\n      else {\n        temp = output[1];\n        bits = (bitOffset + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        ptr = output + 1;\n      }\n      *ptr = temp & ~(0xf << (bits & 0xff)) | outputValue << (bits & 0xff);\n      ptr = (uint *)input[1];\n      if (((uint)ptr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempIndex = (bitOffset & 3) << 2;\n        if (output == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bitOffset & 0xfffffffc) + 0x40010008) =\n             index << tempIndex | *(uint *)((bitOffset & 0xfffffffc) + 0x40010008) & ~(0xf << tempIndex);\n        if (((uint)ptr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)ptr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)ptr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)ptr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitOffset = bitOffset + 1;\n    if (bitOffset == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "apply_bit_mask_08001264",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "outputValue",
                "uVar2": "bitMask",
                "uVar3": "bits",
                "iVar4": "index",
                "uVar5": "bitOffset",
                "uVar6": "temp",
                "uVar7": "constant",
                "unaff_r10": "ptr",
                "iVar8": "tempIndex"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int shift_amount)\n\n{\n  if (shift_amount == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "shift_amount"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "bitwise_xor_0800142e",
            "code": "\nvoid bitwise_XOR_0800142e(int input_value,uint xor_value)\n\n{\n  *(uint *)(input_value + 0xc) = xor_value ^ *(uint *)(input_value + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "bitwise_xor_0800142e",
                "param_1": "input_value",
                "param_2": "xor_value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flags_08001436",
            "code": "\nundefined4 checkAndModifyFlags_08001436(int *paramArray)\n\n{\n  int value;\n  \n  value = *paramArray;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    result = 4;\n    *(undefined *)((int)paramArray + 0x35) = 0x20;\n    *(undefined *)(paramArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flags_08001436",
                "param_1": "paramArray",
                "iVar1": "value",
                "param_1[0xe]": "result"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_and_update_variable_08001460",
            "code": "\nundefined4 checkAndUpdateVariable_08001460(uint **dataPointer,uint flag,uint timeout)\n\n{\n  int globalVar1;\n  int globalVar2;\n  uint value;\n  uint *data;\n  \n  globalVar1 = get_global_variable_0800115c();\n  do {\n    data = *dataPointer;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = data[5];\n    }\n    else {\n      value = data[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(data[5] << 0x15) < 0) {\n      *data = *data | 0x200;\n      data[5] = data[5] & 0xfffffbff;\n      dataPointer[0xe] = (uint *)0x4;\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (globalVar2 = get_global_variable_0800115c(), (uint)(globalVar2 - globalVar1) <= timeout))));\n  *(undefined *)((int)dataPointer + 0x35) = 0x20;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_and_update_variable_08001460",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "globalVar1",
                "iVar2": "globalVar2",
                "uVar3": "value",
                "puVar4": "data"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_update_global_flags_080014e2",
            "code": "\nundefined4 checkAndUpdateGlobalFlags_080014e2(int *pointerArray,uint value)\n\n{\n  int globalVar1;\n  int result;\n  \n  globalVar1 = getGlobalVariable();\n  while( true ) {\n    if (*(int *)(*pointerArray + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result = checkAndModifyFlags(pointerArray);\n    if (result != 0) break;\n    if ((value != 0xffffffff) &&\n       ((value == 0 || (result = getGlobalVariable(), value < (uint)(result - globalVar1))))) {\n      pointerArray[0xe] = pointerArray[0xe] | 0x20;\n      *(undefined *)((int)pointerArray + 0x35) = 0x20;\n      *(undefined *)(pointerArray + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_update_global_flags_080014e2",
                "param_1": "pointerArray",
                "param_2": "value",
                "iVar1": "globalVar1",
                "iVar2": "result",
                "get_global_variable_0800115c": "getGlobalVariable",
                "check_and_modify_flags_08001436": "checkAndModifyFlags"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flags_and_variables_08001530",
            "code": "\nundefined4 updateFlagsAndVariables_08001530(uint **ppPointer,uint value1,uint value2,int condition,uint flag)\n\n{\n  int globalVar1;\n  int globalVar2;\n  uint *pointer;\n  uint **ppPointer;\n  uint value1;\n  uint value2;\n  \n  **ppPointer = **ppPointer | 0x100;\n  ppPointer = ppPointer;\n  value1 = value1;\n  value2 = value2;\n  globalVar1 = get_global_variable_0800115c();\n  do {\n    pointer = *ppPointer;\n    do {\n      if ((int)(pointer[5] << 0x1f) < 0) {\n        pointer[4] = value1 & 0xfe;\n        globalVar1 = check_and_update_variable_08001460(ppPointer,0x10002,flag,pointer,ppPointer,value1,value2);\n        if (globalVar1 == 0) {\n          globalVar1 = check_and_update_global_flags_080014e2(ppPointer,flag,(*ppPointer)[5],(*ppPointer)[6]);\n          if (globalVar1 == 0) {\n            pointer = *ppPointer;\n            if (condition == 1) {\nLAB_080015ca:\n              pointer[4] = value2 & 0xff;\n              return 0;\n            }\n            pointer[4] = value2 >> 8;\n            globalVar1 = check_and_update_global_flags_080014e2(ppPointer,flag);\n            if (globalVar1 == 0) {\n              pointer = *ppPointer;\n              goto LAB_080015ca;\n            }\n          }\n          if (ppPointer[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **ppPointer = **ppPointer | 0x200;\n        }\n        else if (ppPointer[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flag == 0xffffffff);\n    if ((flag == 0) || (globalVar2 = get_global_variable_0800115c(), flag < (uint)(globalVar2 - globalVar1))) {\n      *(undefined *)((int)ppPointer + 0x35) = 0x20;\n      *(undefined *)(ppPointer + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flags_and_variables_08001530",
                "param_1": "ppPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "condition",
                "param_5": "flag",
                "iVar1": "globalVar1",
                "iVar2": "globalVar2",
                "puVar3": "pointer",
                "ppuVar4": "ppPointer",
                "uVar5": "value1",
                "uVar6": "value2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "update_flags_and_variables_080015e8",
            "code": "\nundefined4 updateFlagsAndVariables_080015e8(uint **pointerArray,uint value1,uint value2,int flag,uint condition)\n\n{\n  int globalVar1;\n  int globalVar2;\n  uint *currentPointer;\n  uint **pointerArray;\n  uint value1_temp;\n  uint value2_temp;\n  \n  currentPointer = *pointerArray;\n  *currentPointer = *currentPointer | 0x400;\n  *currentPointer = *currentPointer | 0x100;\n  pointerArray = pointerArray;\n  value1_temp = value1;\n  value2_temp = value2;\n  globalVar1 = get_global_variable_0800115c();\nLAB_0800160e:\n  currentPointer = *pointerArray;\n  while (-1 < (int)(currentPointer[5] << 0x1f)) {\n    if (condition != 0xffffffff) goto code_r0x08001658;\n  }\n  currentPointer[4] = value1 & 0xfe;\n  globalVar1 = check_and_update_variable_08001460(pointerArray,0x10002,condition,currentPointer,pointerArray,value1_temp,value2_temp);\n  if (globalVar1 != 0) goto LAB_080016ba;\n  globalVar1 = check_and_update_global_flags_080014e2(pointerArray,condition,(*pointerArray)[5],(*pointerArray)[6]);\n  if (globalVar1 == 0) {\n    currentPointer = *pointerArray;\n    if (flag != 1) {\n      currentPointer[4] = value2 >> 8;\n      globalVar1 = check_and_update_global_flags_080014e2(pointerArray,condition);\n      if (globalVar1 != 0) goto LAB_08001642;\n      currentPointer = *pointerArray;\n    }\n    currentPointer[4] = value2 & 0xff;\n    globalVar1 = check_and_update_global_flags_080014e2(pointerArray,condition);\n    if (globalVar1 == 0) {\n      **pointerArray = **pointerArray | 0x100;\n      globalVar1 = get_global_variable_0800115c();\n      do {\n        do {\n          if ((int)((*pointerArray)[5] << 0x1f) < 0) {\n            (*pointerArray)[4] = value1 & 0xff | 1;\n            globalVar1 = check_and_update_variable_08001460(pointerArray,0x10002,condition);\n            if (globalVar1 == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (pointerArray[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (condition == 0xffffffff);\n      } while ((condition != 0) && (globalVar2 = get_global_variable_0800115c(), (uint)(globalVar2 - globalVar1) <= condition));\nLAB_0800165a:\n      *(undefined *)((int)pointerArray + 0x35) = 0x20;\n      *(undefined *)(pointerArray + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (pointerArray[0xe] == (uint *)0x4) {\n    **pointerArray = **pointerArray | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((condition == 0) || (globalVar2 = get_global_variable_0800115c(), condition < (uint)(globalVar2 - globalVar1)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "update_flags_and_variables_080015e8",
                "param_1": "pointerArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "condition",
                "iVar1": "globalVar1",
                "iVar2": "globalVar2",
                "puVar3": "currentPointer",
                "ppuVar4": "pointerArray",
                "uVar5": "value1_temp",
                "uVar6": "value2_temp"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_and_update_status_080016f4",
            "code": "\nundefined4 checkAndUpdateStatus_080016f4(int *array,uint size)\n\n{\n  int globalVar1;\n  int elementVar;\n  \n  globalVar1 = get_global_variable_0800115c();\n  while( true ) {\n    elementVar = *array;\n    if ((*(uint *)(elementVar + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(elementVar + 0x14) << 0x1b < 0) break;\n    if ((size == 0) || (elementVar = get_global_variable_0800115c(), size < (uint)(elementVar - globalVar1))) {\n      array[0xe] = array[0xe] | 0x20;\n      *(undefined *)((int)array + 0x35) = 0x20;\n      *(undefined *)(array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(elementVar + 0x14) = *(uint *)(elementVar + 0x14) & 0xffffffef;\n  array[0xe] = 0;\n  *(undefined *)(array + 0xd) = 0;\n  *(undefined *)((int)array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_and_update_status_080016f4",
                "param_1": "array",
                "param_2": "size",
                "iVar1": "globalVar1",
                "iVar2": "elementVar"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_data_08001754",
            "code": "\nundefined4 initializeData_08001754(uint **data)\n\n{\n  uint quotient1;\n  uint quotient2;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint quotient3;\n  undefined8 result;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      apply_bit_mask_to_data_08004d48();\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    result = readable_code_function_08002220();\n    quotient2 = (uint)((ulonglong)result >> 0x20);\n    quotient1 = (uint)result;\n    pointer2 = data[1];\n    quotient3 = quotient1 / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      quotient2 = 300;\n    }\n    pointer1 = *data;\n    if ((uint *)0x186a0 < pointer2) {\n      quotient2 = quotient3 * quotient2;\n    }\n    pointer1[1] = quotient3;\n    if ((uint *)0x186a0 < pointer2) {\n      quotient3 = quotient2 / 1000;\n    }\n    pointer1[8] = quotient3 + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      quotient1 = quotient1 / (uint)((int)pointer2 << 1);\n      if ((quotient1 & 0xfff) < 4) {\n        quotient1 = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        quotient1 = quotient1 / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        quotient1 = quotient1 / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((quotient1 & 0xfff) == 0) {\n        quotient1 = 1;\n      }\n    }\n    pointer2 = data[8];\n    pointer3 = data[7];\n    pointer1[7] = quotient1;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)data[4] | (uint)data[3];\n    pointer1[3] = (uint)data[5] | (uint)data[6];\n    *pointer1 = *pointer1 | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_data_08001754",
                "param_1": "data",
                "uVar1": "quotient1",
                "uVar2": "quotient2",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar6": "quotient3",
                "uVar7": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_input_08001828",
            "code": "\nundefined4\nprocessInput_08001828(uint **inputArray,undefined4 param2,undefined4 param3,undefined4 param4,byte *bytesArray,\n            short arrayLength,undefined4 param7)\n\n{\n  int globalVar1;\n  int globalVar2;\n  uint *currentPtr;\n  uint tempVar;\n  \n  if (*(char *)((int)inputArray + 0x35) == ' ') {\n    if (bytesArray == (byte *)0x0) {\n      return 1;\n    }\n    if (arrayLength == 0) {\n      return 1;\n    }\n    globalVar1 = getGlobalVariable();\n    do {\n      currentPtr = *inputArray;\n      if ((~currentPtr[6] & 2) != 0) {\n        if (*(char *)(inputArray + 0xd) == '\\x01') {\n          return 2;\n        }\n        tempVar = *currentPtr;\n        *(undefined *)(inputArray + 0xd) = 1;\n        *currentPtr = tempVar & 0xfffff7ff;\n        *(undefined *)((int)inputArray + 0x35) = 0x21;\n        *(undefined *)((int)inputArray + 0x36) = 0x40;\n        inputArray[0xe] = (uint *)0x0;\n        globalVar1 = updateFlagsAndVariables(inputArray,param2,param3,param4,param7);\n        if (globalVar1 != 0) {\n          *(undefined *)(inputArray + 0xd) = 0;\n          if (inputArray[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto loopLabel;\n      }\n      globalVar2 = getGlobalVariable();\n    } while ((uint)(globalVar2 - globalVar1) < 0x2711);\n    *(undefined *)(inputArray + 0xd) = 0;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n  }\n  return 2;\n  while (arrayLength != 0) {\nloopLabel:\n    globalVar1 = checkAndUpdateFlags(inputArray,param7);\n    if (globalVar1 != 0) goto errorLabel;\n    currentPtr = *inputArray;\n    currentPtr[4] = (uint)*bytesArray;\n    if ((int)(currentPtr[5] << 0x1d) < 0) {\n      if ((short)(arrayLength + -1) == 0) break;\n      arrayLength = arrayLength + -2;\n      currentPtr[4] = (uint)bytesArray[1];\n      bytesArray = bytesArray + 2;\n    }\n    else {\n      bytesArray = bytesArray + 1;\n      arrayLength = arrayLength + -1;\n    }\n  }\n  globalVar1 = checkAndUpdateFlags(inputArray,param7);\n  if (globalVar1 == 0) {\n    **inputArray = **inputArray | 0x200;\n    *(undefined *)(inputArray + 0xd) = 0;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n    *(undefined *)((int)inputArray + 0x36) = 0;\n    return 0;\n  }\nerrorLabel:\n  if (inputArray[0xe] == (uint *)0x4) {\n    **inputArray = **inputArray | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_input_08001828",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "bytesArray",
                "param_6": "arrayLength",
                "param_7": "param7",
                "iVar1": "globalVar1",
                "iVar2": "globalVar2",
                "puVar3": "currentPtr",
                "uVar4": "tempVar",
                "get_global_variable_0800115c": "getGlobalVariable",
                "update_flags_and_variables_08001530": "updateFlagsAndVariables",
                "check_and_update_global_flags_080014e2": "checkAndUpdateFlags",
                "LAB_080018e2": "loopLabel",
                "LAB_080018ee": "errorLabel"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,\n            undefined *output,ushort size,uint timeout)\n\n{\n  undefined *ptr1;\n  int startTime;\n  int currentTime;\n  uint *ptr2;\n  uint value;\n  undefined *outputPointer;\n  bool checkFlag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  startTime = get_global_variable_0800115c();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    currentTime = get_global_variable_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  startTime = update_flags_and_variables_080015e8(data,param1,param2,param3,timeout);\n  if (startTime != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (size == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    startTime = check_and_update_status_080016f4(data,timeout);\n    if (startTime == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *ptr2 = value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < size) {\n      startTime = check_and_update_status_080016f4(data,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      checkFlag = (int)(ptr2[5] << 0x1d) < 0;\n      if (checkFlag) {\n        ptr2 = (uint *)ptr2[4];\n        outputPointer = output + 2;\n        size = size - 2;\n      }\n      else {\n        outputPointer = output + 1;\n        size = size - 1;\n      }\n      ptr1 = output + 1;\n      output = outputPointer;\n      if (checkFlag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (size != 2) {\n      startTime = get_global_variable_0800115c();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*data)[4];\n            startTime = get_global_variable_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = get_global_variable_0800115c(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = get_global_variable_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = get_global_variable_0800115c(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = get_global_variable_0800115c(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "output",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "ptr2",
                "uVar5": "value",
                "puVar6": "outputPointer",
                "bVar7": "checkFlag"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "process_param_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 process_param_08001b58(int *param)\n\n{\n  int var1;\n  int var2;\n  \n  if (*param << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (param[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      var1 = param[1];\n      if (var1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          var1 = get_global_var();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            var2 = get_global_var();\n            if (100 < (uint)(var2 - var1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      var1 = get_global_var();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        var2 = get_global_var();\n        if (100 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*param << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (param[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag_var1 = param[4];\n      if (flag_var1 == 0) {\n        var1 = get_global_var();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          var2 = get_global_var();\n          if (2 < (uint)(var2 - var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag_var1 = 1;\n      var1 = get_global_var();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        var2 = get_global_var();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = param[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*param << 0x1c < 0) {\n    flag_var2 = param[6];\n    if (flag_var2 == 0) {\n      var1 = get_global_var();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        var2 = get_global_var();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag_var2 = 1;\n      var1 = get_global_var();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        var2 = get_global_var();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *param << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  var1 = get_global_var();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    var2 = get_global_var();\n    if (100 < (uint)(var2 - var1)) {\n      return 3;\n    }\n  }\n  var1 = param_flag;\n  if (var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      var1 = get_global_var();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        var2 = get_global_var();\n        if (5000 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  var1 = get_global_var();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    var2 = get_global_var();\n    if (5000 < (uint)(var2 - var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (param[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (param[7] != 2) {\n      flag_var3 = 0;\n      var1 = get_global_var();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        var2 = get_global_var();\n      } while ((uint)(var2 - var1) < 3);\n      return 3;\n    }\n    flag_var3 = 0;\n    var1 = get_global_var();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (param_flag1 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | param_flag2;\n        }\n        _DAT_40021004 = param_flag1 | param_flag3 | _DAT_40021004 & 0xffc2ffff;\n        flag_var3 = 1;\n        var1 = get_global_var();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          var2 = get_global_var();\n        } while ((uint)(var2 - var1) < 3);\n        return 3;\n      }\n      var2 = get_global_var();\n    } while ((uint)(var2 - var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "process_param_08001b58",
                "param_1": "param",
                "iVar1": "var1",
                "iVar2": "var2",
                "get_global_variable_0800115c": "get_global_var",
                "iRam42420000": "flag_var1",
                "iRam42420480": "flag_var2",
                "param_1[3]": "param_flag",
                "uRam42420060": "flag_var3",
                "param_1[8]": "param_flag1",
                "param_1[2]": "param_flag2",
                "param_1[9]": "param_flag3"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu_clock_speed_08002008",
            "code": "\n\n\nint calculateMPUClockSpeed_08002008(void)\n\n{\n  undefined4 temp1;\n  int result;\n  undefined4 temp2;\n  undefined4 *ptrInput;\n  uint clockDivider;\n  undefined4 *ptrOutput;\n  byte byteArray [4];\n  undefined4 dataArray [5];\n  \n  ptrInput = &DAT_080072f0;\n  ptrOutput = dataArray;\n  do {\n    temp1 = *ptrInput;\n    temp2 = ptrInput[1];\n    ptrInput = ptrInput + 2;\n    *ptrOutput = temp1;\n    ptrOutput[1] = temp2;\n    ptrOutput = ptrOutput + 2;\n  } while (ptrInput != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockDivider = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockDivider = 4000000;\n    }\n    result = clockDivider * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu_clock_speed_08002008",
                "uVar1": "temp1",
                "iVar2": "result",
                "uVar3": "temp2",
                "puVar4": "ptrInput",
                "uVar5": "clockDivider",
                "puVar6": "ptrOutput",
                "local_24": "byteArray",
                "local_20": "dataArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "check_and_initialize_mpu_clock_0800209c",
            "code": "\n\n\nundefined4 check_and_initialize_mpu_clock_0800209c(uint *input,uint size)\n\n{\n  char isFlag1Set;\n  char isFlag2Set;\n  int flagShift;\n  uint flagValue;\n  int iVar;\n  uint shiftedFlagValue;\n  \n  if ((size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size == (size & 7))) {\n    if ((int)(*input << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | input[2];\n    }\n    flagShift = *input << 0x1f;\n    if (-1 < flagShift) {\nLAB_080020ba:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size != (size & 7))) {\n        return 1;\n      }\n      if ((*input & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | input[3];\n      }\n      if ((int)(*input << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | input[4] << 3;\n      }\n      flagValue = calculateMpuClockSpeed();\n      DAT_200001bc = flagValue >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initializeSystem(0);\n      return 0;\n    }\n    flagValue = input[1];\n    if (flagValue == 1) {\n      isFlag2Set = '\\x01';\n      isFlag1Set = '\\0';\n    }\n    else {\n      shiftedFlagValue = _DAT_40021000;\n      if (flagValue == 2) goto LAB_08002176;\n      isFlag2Set = '\\0';\n      isFlag1Set = '\\x01';\n    }\n    shiftedFlagValue = (_DAT_40021000 >>\n            (leadingZerosCount((uint)(byte)(isFlag1Set << 6) << 0x18 | (uint)(byte)(isFlag2Set << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shiftedFlagValue < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | flagValue;\n      flagShift = getGlobalVariable(flagShift,shiftedFlagValue);\n      if (input[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          iVar = getGlobalVariable();\n        } while ((uint)(iVar - flagShift) < 0x1389);\n      }\n      else if (input[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          iVar = getGlobalVariable();\n        } while ((uint)(iVar - flagShift) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          iVar = getGlobalVariable();\n        } while ((uint)(iVar - flagShift) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "check_and_initialize_mpu_clock_0800209c",
                "param_1": "input",
                "param_2": "size",
                "cVar1": "isFlag1Set",
                "cVar2": "isFlag2Set",
                "iVar3": "flagShift",
                "uVar4": "flagValue",
                "iVar5": "iVar",
                "uVar6": "shiftedFlagValue",
                "get_global_variable_0800115c": "getGlobalVariable",
                "calculate_mpu_clock_speed_08002008": "calculateMpuClockSpeed",
                "initialize_system_08001104": "initializeSystem",
                "LZCOUNT": "leadingZerosCount"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "readable_code_function_08002220",
            "code": "\n\n\nuint readable_code_function_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "readable_code_function_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_data_08002280",
            "code": "\nvoid updateData_08002280(int dataAddress,uint *dataValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(dataAddress + 4);\n  updatedValue3 = *dataValues;\n  updatedValue1 = *(uint *)(dataAddress + 0x20) & 0xfffffffd | dataValues[2];\n  if (dataAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | dataValues[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | dataValues[5] | dataValues[6];\n  }\n  *(uint *)(dataAddress + 4) = updatedValue2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(dataAddress + 0x34) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_data_08002280",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_param_values_080022d0",
            "code": "\nvoid updateParamValues_080022d0(int paramAddress,uint *paramValues)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xfffffeff;\n  updatedVar2 = *(uint *)(paramAddress + 4);\n  updatedVar3 = *paramValues;\n  updatedVar1 = *(uint *)(paramAddress + 0x20) & 0xfffffdff | paramValues[2] << 8;\n  if (paramAddress == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffff7ff | paramValues[3] << 8) & 0xfffffbff;\n    updatedVar2 = updatedVar2 & 0xffffcfff | (paramValues[5] | paramValues[6]) << 4;\n  }\n  *(uint *)(paramAddress + 4) = updatedVar2;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffffff8c | updatedVar3;\n  *(uint *)(paramAddress + 0x3c) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_param_values_080022d0",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_register_values_08002324",
            "code": "\nvoid updateRegisterValues_08002324(int registerAddress,int *registerValues)\n\n{\n  uint registerValue;\n  int value1;\n  int value2;\n  int constantValue;\n  \n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & 0xffffefff;\n  registerValue = *(uint *)(registerAddress + 4);\n  value1 = *registerValues;\n  value2 = registerValues[2];\n  constantValue = 0x40012c00;\n  if (registerAddress == 0x40012c00) {\n    constantValue = registerValues[5];\n    registerValue = registerValue & 0xffffbfff;\n  }\n  if (registerAddress == 0x40012c00) {\n    registerValue = registerValue | constantValue << 6;\n  }\n  *(uint *)(registerAddress + 4) = registerValue;\n  *(uint *)(registerAddress + 0x1c) = *(uint *)(registerAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(registerAddress + 0x40) = registerValues[1];\n  *(uint *)(registerAddress + 0x20) = *(uint *)(registerAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_register_values_08002324",
                "param_1": "registerAddress",
                "param_2": "registerValues",
                "uVar1": "registerValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constantValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_configuration_08002368",
            "code": "\nvoid updateConfiguration_08002368(uint *config_ptr,uint *data_ptr)\n\n{\n  uint config_value;\n  \n  config_value = *config_ptr;\n  if (((((config_ptr == (uint *)0x40012c00) || (config_ptr == (uint *)0x40000000)) ||\n       (config_ptr == (uint *)0x40000400)) || (config_ptr == (uint *)0x40000800)) &&\n     (((config_value = config_value & 0xffffff8f | data_ptr[1], config_ptr == (uint *)0x40012c00 ||\n       (config_ptr == (uint *)0x40000000)) ||\n      ((config_ptr == (uint *)0x40000400 || (config_ptr == (uint *)0x40000800)))))) {\n    config_value = config_value & 0xfffffcff | data_ptr[3];\n  }\n  *config_ptr = config_value;\n  config_ptr[0xb] = data_ptr[2];\n  config_ptr[10] = *data_ptr;\n  config_value = 0x40012c00;\n  if (config_ptr == (uint *)0x40012c00) {\n    config_value = data_ptr[4];\n  }\n  if (config_ptr == (uint *)0x40012c00) {\n    config_ptr[0xc] = config_value;\n  }\n  config_ptr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_configuration_08002368",
                "param_1": "config_ptr",
                "param_2": "data_ptr",
                "uVar1": "config_value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_configuration_080023d0",
            "code": "\nundefined4 update_configuration_080023d0(undefined4 *config)\n\n{\n  if (config != (undefined4 *)0x0) {\n    if (*(char *)((int)config + 0x39) == '\\0') {\n      *(undefined *)(config + 0xe) = 0;\n      update_flags_08004d8c();\n    }\n    *(undefined *)((int)config + 0x39) = 2;\n    update_configuration_080023d0_08002368(*config,config + 1);\n    *(undefined *)((int)config + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_configuration_080023d0",
                "param_1": "config"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_configuration_08002404",
            "code": "\nvoid updateConfiguration_08002404(int configAddr,int *configData)\n\n{\n  uint updatedConfig1;\n  uint updatedConfig2;\n  int inputData;\n  \n  *(uint *)(configAddr + 0x20) = *(uint *)(configAddr + 0x20) & 0xffffffef;\n  updatedConfig2 = *(uint *)(configAddr + 4);\n  inputData = *configData;\n  updatedConfig1 = *(uint *)(configAddr + 0x20) & 0xffffffdf | inputData2 << 4;\n  if (configAddr == 0x40012c00) {\n    updatedConfig1 = (updatedConfig1 & 0xffffff7f | inputData3 << 4) & 0xffffffbf;\n    updatedConfig2 = updatedConfig2 & 0xfffff3ff | (inputData4 | inputData5) << 2;\n  }\n  *(uint *)(configAddr + 4) = updatedConfig2;\n  *(uint *)(configAddr + 0x18) = *(uint *)(configAddr + 0x18) & 0xffff8cff | inputData << 8;\n  *(int *)(configAddr + 0x38) = configData[1];\n  *(uint *)(configAddr + 0x20) = updatedConfig1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_configuration_08002404",
                "param_1": "configAddr",
                "param_2": "configData",
                "uVar1": "updatedConfig1",
                "uVar2": "updatedConfig2",
                "iVar3": "inputData",
                "param_2[2]": "inputData2",
                "param_2[3]": "inputData3",
                "param_2[5]": "inputData4",
                "param_2[6]": "inputData5"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_and_set_data_0800245c",
            "code": "\nvoid update_and_set_data_0800245c(int *data_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  int extra_out_var1;\n  int extra_out_var2;\n  int extra_out_var3;\n  int extra_out_var4;\n  int temp_var1;\n  uint updated_var;\n  int temp_var2;\n  \n  if (*(char *)(data_ptr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data_ptr + 0x39) = 2;\n  *(undefined *)(data_ptr + 0xe) = 1;\n  switch(param_3) {\n  case 0:\n    update_data_08002280(*data_ptr);\n    temp_var2 = *data_ptr;\n    updated_var = *(uint *)(extra_out_var1 + 0x10);\n    *(uint *)(temp_var2 + 0x18) = *(uint *)(temp_var2 + 0x18) | 8;\n    *(uint *)(temp_var2 + 0x18) = *(uint *)(temp_var2 + 0x18) & 0xfffffffb;\n    updated_var = *(uint *)(temp_var2 + 0x18) | updated_var;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_configuration_08002404(*data_ptr);\n    temp_var2 = *data_ptr;\n    temp_var1 = *(int *)(extra_out_var2 + 0x10);\n    *(uint *)(temp_var2 + 0x18) = *(uint *)(temp_var2 + 0x18) | 0x800;\n    *(uint *)(temp_var2 + 0x18) = *(uint *)(temp_var2 + 0x18) & 0xfffffbff;\n    updated_var = *(uint *)(temp_var2 + 0x18) | temp_var1 << 8;\n    break;\n  case 8:\n    update_param_values_080022d0(*data_ptr);\n    temp_var2 = *data_ptr;\n    updated_var = *(uint *)(extra_out_var3 + 0x10);\n    *(uint *)(temp_var2 + 0x1c) = *(uint *)(temp_var2 + 0x1c) | 8;\n    *(uint *)(temp_var2 + 0x1c) = *(uint *)(temp_var2 + 0x1c) & 0xfffffffb;\n    updated_var = *(uint *)(temp_var2 + 0x1c) | updated_var;\n    goto LAB_080024fa;\n  case 0xc:\n    update_register_values_08002324(*data_ptr);\n    temp_var2 = *data_ptr;\n    temp_var1 = *(int *)(extra_out_var4 + 0x10);\n    *(uint *)(temp_var2 + 0x1c) = *(uint *)(temp_var2 + 0x1c) | 0x800;\n    *(uint *)(temp_var2 + 0x1c) = *(uint *)(temp_var2 + 0x1c) & 0xfffffbff;\n    updated_var = *(uint *)(temp_var2 + 0x1c) | temp_var1 << 8;\nLAB_080024fa:\n    *(uint *)(temp_var2 + 0x1c) = updated_var;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(temp_var2 + 0x18) = updated_var;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data_ptr + 0x39) = 1;\n  *(undefined *)(data_ptr + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_and_set_data_0800245c",
                "param_1": "data_ptr",
                "extraout_r1": "extra_out_var1",
                "extraout_r1_00": "extra_out_var2",
                "extraout_r1_01": "extra_out_var3",
                "extraout_r1_02": "extra_out_var4",
                "iVar1": "temp_var1",
                "uVar2": "updated_var",
                "iVar3": "temp_var2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_value_08002520",
            "code": "\nvoid updateBitwiseValue_08002520(int buffer,uint bitPosition,int value)\n\n{\n  *(uint *)(buffer + 0x20) = *(uint *)(buffer + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(buffer + 0x20) = value << (bitPosition & 0xff) | *(uint *)(buffer + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_value_08002520",
                "param_1": "buffer",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "set_bit_and_value_08002538",
            "code": "\nundefined4 setBitAndValue_08002538(uint **bitPointer,undefined4 value)\n\n{\n  uint newValue;\n  uint *bitPointerValue;\n  \n  update_bitwise_value_08002520(*bitPointer,value,1);\n  bitPointerValue = *bitPointer;\n  newValue = 0x40012c00;\n  if (bitPointerValue == (uint *)0x40012c00) {\n    newValue = uRam40012c44 | 0x8000;\n  }\n  if (bitPointerValue == (uint *)0x40012c00) {\n    bitPointerValue[0x11] = newValue;\n  }\n  *bitPointerValue = *bitPointerValue | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "set_bit_and_value_08002538",
                "param_1": "bitPointer",
                "param_2": "value",
                "uVar1": "newValue",
                "puVar2": "bitPointerValue"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_param_08002564",
            "code": "\nundefined4 checkAndUpdateParam_08002564(int *paramList,uint *uintList)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(paramList + 0xe) != '\\x01') {\n    *(undefined *)((int)paramList + 0x39) = 2;\n    *(uint *)(*paramList + 0x44) =\n         *uintList | uintList[1] | uintList[2] | uintList[3] | uintList[4] | uintList[5] | uintList[6];\n    *(undefined *)((int)paramList + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(paramList + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_param_08002564",
                "param_1": "paramList",
                "param_2": "uintList",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "initialize_flags_080025a4",
            "code": "\nundefined4 initializeFlags_080025a4(int *flag_array,uint *values_array)\n\n{\n  uint value_1;\n  undefined4 return_value;\n  int array_base_address;\n  uint value_0;\n  \n  return_value = 2;\n  if (*(char *)(flag_array + 0xe) != '\\x01') {\n    *(undefined *)((int)flag_array + 0x39) = 2;\n    array_base_address = *flag_array;\n    value_0 = *values_array;\n    value_1 = values_array[1];\n    *(uint *)(array_base_address + 4) = *(uint *)(array_base_address + 4) & 0xffffff8f;\n    *(uint *)(array_base_address + 4) = *(uint *)(array_base_address + 4) | value_0;\n    *(uint *)(array_base_address + 8) = *(uint *)(array_base_address + 8) & 0xffffff7f;\n    *(uint *)(array_base_address + 8) = *(uint *)(array_base_address + 8) | value_1;\n    *(undefined *)((int)flag_array + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(flag_array + 0xe) = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "initialize_flags_080025a4",
                "param_1": "flag_array",
                "param_2": "values_array",
                "uVar1": "value_1",
                "uVar2": "return_value",
                "iVar3": "array_base_address",
                "uVar4": "value_0"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_config_080025e8",
            "code": "\nvoid updateConfig_080025e8(int *config)\n\n{\n  int value1;\n  int value2;\n  uint value3;\n  int result1;\n  int result2;\n  int configAddr;\n  \n  configAddr = *config;\n  value3 = config[4];\n  *(uint *)(configAddr + 0x10) = *(uint *)(configAddr + 0x10) & 0xffffcfff | config[3];\n  *(uint *)(configAddr + 0xc) = config[2] | value3 | config[5] | *(uint *)(configAddr + 0xc) & 0xffffe9f3;\n  *(uint *)(configAddr + 0x14) = *(uint *)(configAddr + 0x14) & 0xfffffcff | config[6];\n  if (configAddr == 0x40013800) {\n    value1 = get_shifted_value_08002250();\n    result1 = (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    value1 = get_shifted_value_08002250();\n    result2 = config[1];\n    value2 = get_shifted_value_08002250();\n    value2 = (uint)(value1 * 0x19) / (uint)(result2 << 2) +\n            (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    value1 = get_shifted_value_08002250();\n    value3 = (uint)(value1 * 0x19) / (uint)(config[1] << 2);\n    value1 = get_shifted_value_08002250();\n  }\n  else {\n    value1 = readable_code_function_08002220();\n    result1 = (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    value1 = readable_code_function_08002220();\n    result2 = config[1];\n    value2 = readable_code_function_08002220();\n    value2 = (uint)(value1 * 0x19) / (uint)(result2 << 2) +\n            (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    value1 = readable_code_function_08002220();\n    value3 = (uint)(value1 * 0x19) / (uint)(config[1] << 2);\n    value1 = readable_code_function_08002220();\n  }\n  *(uint *)(configAddr + 8) =\n       (((value3 + (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (value2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       result1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_config_080025e8",
                "param_1": "config",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "value3",
                "iVar4": "result1",
                "iVar5": "result2",
                "iVar6": "configAddr"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_memory_08002724",
            "code": "\nundefined4 initializeMemory_08002724(int *memoryBlock)\n\n{\n  int baseAddress;\n  \n  if (memoryBlock != (int *)0x0) {\n    if (*(char *)((int)memoryBlock + 0x39) == '\\0') {\n      *(undefined *)(memoryBlock + 0xe) = 0;\n      updateMemoryData();\n    }\n    *(undefined *)((int)memoryBlock + 0x39) = 2;\n    *(uint *)(*memoryBlock + 0xc) = *(uint *)(*memoryBlock + 0xc) & 0xffffdfff;\n    updateConfig(memoryBlock);\n    baseAddress = *memoryBlock;\n    *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffb7ff;\n    *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xffffffd5;\n    *(uint *)(baseAddress + 0xc) = *(uint *)(baseAddress + 0xc) | 0x2000;\n    memoryBlock[0xf] = 0;\n    *(undefined *)((int)memoryBlock + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_memory_08002724",
                "param_1": "memoryBlock",
                "iVar1": "baseAddress",
                "update_memory_data_08004e7c": "updateMemoryData",
                "update_config_080025e8": "updateConfig"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "update_data_0800290c",
            "code": "\nundefined4 updateData_0800290c(int *data)\n\n{\n  byte flag;\n  int ptr;\n  uint mask;\n  undefined4 value;\n  short counter;\n  ushort *ptr1;\n  ushort *ptr2;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptr = *data;\n  ptr1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptr2 = ptr1 + 1;\n      *ptr1 = (ushort)((uint)(*(int *)(ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ptr1 + 1);\n      *ptr1 = (ushort)*(int *)(ptr + 4) & 0xff;\n    }\n    data[10] = (int)ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      flag = (byte)*(undefined4 *)(ptr + 4);\n      data[10] = (int)ptr1 + 1;\n    }\n    else {\n      value = *(undefined4 *)(ptr + 4);\n      data[10] = (int)ptr1 + 1;\n      flag = (byte)value & 0x7f;\n    }\n    *(byte *)ptr1 = flag;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    ptr = *data;\n    *(uint *)(ptr + 0xc) = *(uint *)(ptr + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      mask = *(uint *)(ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptr = 0x12;\n      mask = 0x32;\n    }\n    if (condition) {\n      *(uint *)(ptr + 0xc) = mask;\n      mask = *(uint *)(ptr + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(ptr + 0x14) = mask;\n      ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptr;\n    check_and_increment_value_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "update_data_0800290c",
                "param_1": "data",
                "bVar1": "flag",
                "iVar2": "ptr",
                "uVar3": "mask",
                "uVar4": "value",
                "sVar5": "counter",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "condition"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint firstValue;\n  short counter;\n  uint secondValue;\n  uint *pointer;\n  undefined flag;\n  uint *ptr;\n  uint flag2;\n  bool isFlagSet;\n  \n  ptr = *data;\n  secondValue = *ptr;\n  firstValue = ptr[3];\n  if ((secondValue & 0xf) == 0) {\n    if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n      update_data_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = ptr[5] & 1;\n    if ((flag2 != 0) || ((firstValue & 0x120) != 0)) {\n      ptr = (uint *)(secondValue << 0x1f);\n      if ((int)ptr < 0) {\n        isFlagSet = (int)(firstValue << 0x17) < 0;\n        if (isFlagSet) {\n          ptr = (uint *)((uint)data[0xf] | 1);\n        }\n        if (isFlagSet) {\n          data[0xf] = ptr;\n        }\n      }\n      if (((int)(secondValue << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(secondValue << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(secondValue << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n        update_data_0800290c(data);\n      }\n      ptr = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptr[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr[3] = ptr[3] & 0xfffffedf;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(secondValue << 0x18) < 0) && ((int)(firstValue << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptr[1] = *(ushort *)pointer & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        data[8] = pointer;\n      }\n      else {\n        data[8] = (uint *)((int)pointer + 1);\n        ptr[1] = (uint)*(byte *)pointer;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        ptr[3] = ptr[3] & 0xffffff7f;\n        ptr[3] = ptr[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(secondValue << 0x19) < 0) && ((int)(firstValue << 0x19) < 0)) {\n    ptr[3] = ptr[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "firstValue",
                "sVar2": "counter",
                "uVar3": "secondValue",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "ptr",
                "uVar7": "flag2",
                "bVar8": "isFlagSet"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  processAndContinue(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  processAndHandleInput(0xd0,0x6b,0x80,1);\n  processAndHandleInput(0xd0,0x6b,1);\n  processAndHandleInput(0xd0,0x6c,0,1);\n  processAndHandleInput(0xd0,0x19,0,1);\n  processAndHandleInput(0xd0,0x1d,3,1);\n  processAndHandleInput(0xd0,0x1a,3,1);\n  processAndHandleInput(0xd0,0x1b,0x10,1);\n  processAndHandleInput(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_continue_0800407c": "processAndContinue",
                "process_and_handle_input_0800403c": "processAndHandleInput"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint initialValue;\n  int value1;\n  int value2;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  \n  tempValue1 = 0;\n  tempValue2 = initialValue & 0xffff0000;\n  copyData(0xd0,0x3b,&tempValue1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(tempValue1._2_1_,tempValue1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)tempValue1,tempValue1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)tempValue2,tempValue2._1_1_);\n  value2 = (int)DAT_200002f6;\n  value1 = (int)DAT_200002f8;\n  uVar1 = calculateModifiedValue();\n  uVar1 = calculateFloat(uVar1,0x40800000);\n  DAT_200002d0 = calculateFloat(uVar1,0x38000000);\n  uVar1 = calculateModifiedValue(value2);\n  uVar1 = calculateFloat(uVar1,0x40800000);\n  DAT_200002d4 = calculateFloat(uVar1,0x38000000);\n  uVar1 = calculateModifiedValue(value1);\n  uVar1 = calculateFloat(uVar1,0x40800000);\n  DAT_200002d8 = calculateFloat(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "initialValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "local_18": "tempValue1",
                "local_14": "tempValue2",
                "copy_data_080040e8": "copyData",
                "calculate_modified_value_08000c44": "calculateModifiedValue",
                "calculate_float_08000cec": "calculateFloat"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 modifiedValue;\n  int gyroScaledValue;\n  int accelScaledValue;\n  undefined4 accelOffset;\n  undefined2 gyroOffset;\n  \n  accelOffset = 0;\n  gyroOffset = 0;\n  copyData(0xd0,0x43,&accelOffset,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(accelOffset._2_1_,accelOffset._3_1_);\n  DAT_200002be = CONCAT11((undefined)accelOffset,accelOffset._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)gyroOffset,gyroOffset._1_1_);\n  accelScaledValue = (int)DAT_200002c0;\n  gyroScaledValue = (int)DAT_200002c2;\n  modifiedValue = calculateModifiedValue();\n  modifiedValue = calculateFloat(modifiedValue,0x447a0000);\n  modifiedValue = calculateFloat(modifiedValue,0x38000000);\n  DAT_200002c4 = calculateFloatingPoint(modifiedValue,DAT_20000000);\n  modifiedValue = calculateModifiedValue(accelScaledValue);\n  modifiedValue = calculateFloat(modifiedValue,0x447a0000);\n  modifiedValue = calculateFloat(modifiedValue,0x38000000);\n  DAT_200002c8 = calculateFloatingPoint(modifiedValue,DAT_20000004);\n  modifiedValue = calculateModifiedValue(gyroScaledValue);\n  modifiedValue = calculateFloat(modifiedValue,0x447a0000);\n  modifiedValue = calculateFloat(modifiedValue,0x38000000);\n  DAT_200002cc = calculateFloatingPoint(modifiedValue,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "accelOffset",
                "local_1c": "gyroOffset",
                "iVar3": "accelScaledValue",
                "iVar2": "gyroScaledValue",
                "uVar1": "modifiedValue",
                "copy_data_080040e8": "copyData",
                "calculate_modified_value_08000c44": "calculateModifiedValue",
                "calculate_float_08000cec": "calculateFloat",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_sensor_data_08002cb0",
            "code": "\nvoid initializeSensorData_08002cb0(undefined4 accelerationData,undefined4 gyroData,undefined4 magnetometerData,uint sensorConfig)\n\n{\n  undefined4 modifiedValue;\n  uint tempValue;\n  \n  tempValue = sensorConfig;\n  process_and_handle_input_0800403c(0xd0,0x37,0x22,1,accelerationData,gyroData,magnetometerData);\n  process_and_handle_input_0800403c(0xd0,0x6a,1);\n  process_and_continue_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  process_and_handle_input_0800403c(0x18,0xb,1);\n  process_and_handle_input_0800403c(0x18,10,0,1);\n  process_and_handle_input_0800403c(0x18,10,0xf,1);\n  copy_data_080040e8(0x18,0x10,&tempValue,3,\"../Src/MPU9250.c\",0xb6);\n  modifiedValue = calculate_modified_value_08000c44((tempValue & 0xff) - 0x80);\n  modifiedValue = calculate_float_08000cec(modifiedValue,0x3b800000);\n  DAT_200002e8 = calculate_floating_point_08000adc(modifiedValue,0x3f800000);\n  modifiedValue = calculate_modified_value_08000c44((tempValue >> 8 & 0xff) - 0x80);\n  modifiedValue = calculate_float_08000cec(modifiedValue,0x3b800000);\n  DAT_200002ec = calculate_floating_point_08000adc(modifiedValue,0x3f800000);\n  modifiedValue = calculate_modified_value_08000c44((tempValue >> 0x10 & 0xff) - 0x80);\n  modifiedValue = calculate_float_08000cec(modifiedValue,0x3b800000);\n  DAT_200002f0 = calculate_floating_point_08000adc(modifiedValue,0x3f800000);\n  process_and_handle_input_0800403c(0x18,10,0,1);\n  process_and_handle_input_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_sensor_data_08002cb0",
                "param_1": "accelerationData",
                "param_2": "gyroData",
                "param_3": "magnetometerData",
                "param_4": "sensorConfig",
                "uVar1": "modifiedValue",
                "local_c": "tempValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_sensor_data_08002d88",
            "code": "\nvoid processSensorData_08002d88(undefined4 sampleRate,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 modifiedValue1;\n  undefined4 modifiedValue2;\n  int value;\n  undefined2 sensorValue;\n  undefined highByte1;\n  undefined lowByte1;\n  undefined lowByte2;\n  undefined highByte2;\n  byte byteValue;\n  undefined stackValue;\n  \n  stackValue = (undefined)((uint)param4 >> 0x18);\n  sensorValue = 0;\n  highByte1 = 0;\n  lowByte1 = 0;\n  lowByte2 = 0;\n  highByte2 = 0;\n  byteValue = 0;\n  result = process_and_continue_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,sampleRate,param2);\n  if (result << 0x1f < 0) {\n    copy_data_080040e8(0x18,3,&sensorValue,7,\"../Src/MPU9250.c\",0xda);\n    modifiedValue2 = DAT_2000001c;\n    if ((int)((uint)byteValue << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(lowByte1,highByte1);\n      DAT_200002bc = CONCAT11(highByte2,lowByte2);\n      value = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = sensorValue;\n      modifiedValue1 = calculate_modified_value_08000c44();\n      modifiedValue1 = calculate_float_08000cec(modifiedValue1,modifiedValue2);\n      modifiedValue1 = calculate_float_08000cec(modifiedValue1,DAT_200002e8);\n      modifiedValue1 = calculate_floating_point_08000ad8(modifiedValue1,DAT_20000020);\n      DAT_200002dc = calculate_float_08000cec(modifiedValue1,DAT_2000002c);\n      modifiedValue1 = calculate_modified_value_08000c44(value);\n      modifiedValue1 = calculate_float_08000cec(modifiedValue1,modifiedValue2);\n      modifiedValue1 = calculate_float_08000cec(modifiedValue1,DAT_200002ec);\n      modifiedValue1 = calculate_floating_point_08000ad8(modifiedValue1,DAT_20000024);\n      DAT_200002e0 = calculate_float_08000cec(modifiedValue1,DAT_20000030);\n      modifiedValue1 = calculate_modified_value_08000c44(result);\n      modifiedValue2 = calculate_float_08000cec(modifiedValue1,modifiedValue2);\n      modifiedValue2 = calculate_float_08000cec(modifiedValue2,DAT_200002f0);\n      modifiedValue2 = calculate_floating_point_08000ad8(modifiedValue2,DAT_20000028);\n      DAT_200002e4 = calculate_float_08000cec(modifiedValue2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "sampleRate",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "modifiedValue1",
                "uVar3": "modifiedValue2",
                "iVar4": "value",
                "local_28": "sensorValue",
                "uStack_26": "highByte1",
                "uStack_25": "lowByte1",
                "local_24": "lowByte2",
                "local_23": "highByte2",
                "local_22": "byteValue",
                "uStack_21": "stackValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensors_08002ea0",
            "code": "\nvoid initializeSensors_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 extraResult;\n  \n  initializeMPU9250();\n  initializeSensorData();\n  initializeData(0x3f19999a);\n  setGlobalVariable(0,extraResult,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "extraResult",
                "initialize_mpu9250_08002ad0": "initializeMPU9250",
                "initialize_sensor_data_08002cb0": "initializeSensorData",
                "initialize_data_08003314": "initializeData",
                "set_global_variable_08003320": "setGlobalVariable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_floating_point_sum_08002ec0",
            "code": "\nvoid calculateFloatingPointSum_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_2000024c;\n  constant2 = DAT_20000010;\n  result1 = calculateFloatingPointProduct(0x3f800000,DAT_20000010);\n  constant1 = calculateFloatSum(result1,constant1);\n  constant2 = calculateFloatSum(constant2,DAT_2000000c);\n  DAT_2000000c = calculateFloatingPointDivision(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_floating_point_sum_08002ec0",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2",
                "calculate_floating_point_08000ad8": "calculateFloatingPointProduct",
                "calculate_float_08000cec": "calculateFloatSum",
                "calculate_floating_point_08000adc": "calculateFloatingPointDivision"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_store_result_08002ed4",
            "code": "\nvoid calculateAndStoreResult_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constantValue;\n  undefined4 dataValue;\n  \n  constantValue = DAT_20000248;\n  dataValue = dataInput;\n  result1 = FUN_08000ad8(0x3f800000,dataInput);\n  constantValue = FUN_08000cec(result1,constantValue);\n  dataValue = FUN_08000cec(dataValue,result);\n  result = FUN_08000adc(dataValue,constantValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_result_08002ed4",
                "uVar1": "result1",
                "uVar2": "constantValue",
                "uVar3": "dataValue",
                "uRam20000018": "dataInput",
                "uRam20000014": "result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_concatenated_values_08002ee8",
            "code": "\nvoid processConcatenatedValues_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int concatenationResult;\n  \n  originalValue = DAT_20000250;\n  concatenationResult = checkConcatenatedValues(DAT_20000250,0xc3340000);\n  if ((concatenationResult != 0) && (concatenationResult = isConcatenationSuccessful(originalValue,0x42b40000), concatenationResult != 0)) {\n    performFloatingPointCalculation1(originalValue,0x42b40000);\n    return;\n  }\n  performFloatingPointCalculation2(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_concatenated_values_08002ee8",
                "iVar2": "concatenationResult",
                "uVar1": "originalValue",
                "check_concatenated_values_08001050": "checkConcatenatedValues",
                "is_concatenation_successful_08001028": "isConcatenationSuccessful",
                "calculate_floating_point_08000adc": "performFloatingPointCalculation1",
                "calculate_floating_point_08000ad8": "performFloatingPointCalculation2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_and_process_sensor_data_08002f28",
            "code": "\n\n\nvoid initialize_and_process_sensor_data_08002f28(void)\n\n{\n  undefined4 checksum;\n  \n  initialize_mpu9250();\n  configure_mpu9250();\n  process_sensor_data();\n  DAT_20000258 = get_global_variable();\n  checksum = calculate_checksum(DAT_20000258 - DAT_20000254);\n  convert_to_floating_point(checksum,0x447a0000);\n  set_global_variable();\n  DAT_20000254 = DAT_20000258;\n  calculate_result(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  checksum = calculate_and_store_result();\n  calculate_float(checksum,0x41200000);\n  DAT_20001395._0_2_ = convert_to_unsigned_int();\n  checksum = calculate_floating_point_sum();\n  calculate_float(checksum,0x41200000);\n  DAT_20001395._2_2_ = convert_to_unsigned_int();\n  process_concatenated_values();\n  DAT_20001399 = convert_to_unsigned_int();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_and_process_sensor_data_08002f28",
                "uVar1": "checksum",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "configure_mpu9250",
                "process_sensor_data_08002d88": "process_sensor_data",
                "thunk_get_global_variable_0800115c": "get_global_variable",
                "calculate_checksum_08000c3c": "calculate_checksum",
                "floating_point_conversion_08000e54": "convert_to_floating_point",
                "set_global_variable_08003320": "set_global_variable",
                "calculate_result_08003330": "calculate_result",
                "calculate_and_store_result_08002ed4": "calculate_and_store_result",
                "calculate_float_08000cec": "calculate_float",
                "convert_to_unsigned_int_08001078": "convert_to_unsigned_int",
                "calculate_floating_point_sum_08002ec0": "calculate_floating_point_sum",
                "process_concatenated_values_08002ee8": "process_concatenated_values"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "process_data_08003034",
            "code": "\nuint processData_08003034(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  result = input4;\n  processAndContinue(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,input3);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "process_data_08003034",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_c": "result",
                "process_and_continue_080040b8": "processAndContinue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int index;\n  undefined byte1;\n  undefined byte2;\n  \n  index = 0;\n  processInput(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    copyData(0xee,index + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(byte1,byte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "iVar1": "index",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "process_and_handle_input_0800403c": "processInput",
                "copy_data_080040e8": "copyData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_data_08003314",
            "code": "\nvoid initializeData_08003314(undefined4 data)\n\n{\n  DAT_2000035c = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_data_08003314",
                "param_1": "data"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid set_global_variable_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_result_08003330",
            "code": "\nvoid calculate_result_08003330(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 param1,\n                 undefined4 param2,undefined4 param3,undefined4 param4,undefined4 param5,\n                 undefined4 param6,undefined4 *output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int check1;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  int check2;\n  undefined4 result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  int check3;\n  undefined4 result17;\n  undefined4 result18;\n  undefined4 result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  int check4;\n  undefined4 result23;\n  undefined4 result24;\n  undefined4 result25;\n  int param7;\n  undefined8 shift_result;\n  undefined8 validate_result;\n  \n  result25 = DAT_20000048;\n  result24 = DAT_20000044;\n  param7 = DAT_20000040;\n  result23 = DAT_2000003c;\n  result1 = calculate_float_08000cec(input1,input1);\n  result2 = calculate_float_08000cec(input2);\n  result1 = calculate_floating_point_08000adc(result1,result2);\n  result2 = calculate_float_08000cec(input3);\n  calculate_floating_point_08000adc(result1,result2);\n  decode_binary_08000428();\n  process_input_08005bc8();\n  result1 = calculate_float32_08000a30();\n  check1 = check_concatenated_values_08001014(result1,0);\n  if (check1 == 0) {\n    result2 = calculate_float_08000cec(param4);\n    result3 = calculate_float_08000cec(param5);\n    result2 = calculate_floating_point_08000adc(result2,result3);\n    result3 = calculate_float_08000cec(param6);\n    calculate_floating_point_08000adc(result2,result3);\n    decode_binary_08000428();\n    process_input_08005bc8();\n    result2 = calculate_float32_08000a30();\n    check1 = check_concatenated_values_08001014(result2,0);\n    if (check1 == 0) {\n      shift_result = decode_binary_08000428(param1);\n      calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0xa2529d39,0x3f91df46);\n      result3 = calculate_float32_08000a30();\n      shift_result = decode_binary_08000428(param2);\n      calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = calculate_float32_08000a30();\n      shift_result = decode_binary_08000428(param3);\n      calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = calculate_float32_08000a30();\n      check1 = calculate_floating_point_08000adc(result23);\n      result6 = calculate_floating_point_08000adc(param7);\n      check2 = calculate_floating_point_08000adc(result24,result24);\n      result7 = calculate_floating_point_08000adc(result25,result25);\n      result8 = calculate_float_08000cec(result23);\n      result9 = calculate_float_08000cec(result23,param7);\n      result10 = calculate_float_08000cec(result23,result24);\n      result11 = calculate_float_08000cec(param7);\n      result12 = calculate_float_08000cec(param7,result25);\n      result13 = calculate_float_08000cec(result24,result24);\n      result14 = calculate_float_08000cec(result25,result25);\n      result1 = floating_point_conversion_08000e54(0x3f800000,result1);\n      result2 = floating_point_conversion_08000e54(0x3f800000,result2);\n      result15 = calculate_float_08000cec(param4,result2);\n      result16 = calculate_float_08000cec(param5,result2);\n      result2 = calculate_float_08000cec(param6,result2);\n      check3 = calculate_float_08000cec(check1,result15);\n      result17 = calculate_float_08000cec(check1,result16);\n      result18 = calculate_float_08000cec(check1,result2);\n      result19 = calculate_float_08000cec(result6,result15);\n      result20 = calculate_float_08000cec(result8,result15);\n      result21 = calculate_float_08000cec(result25,result17);\n      result20 = calculate_floating_point_08000ad8(result20,result21);\n      result21 = calculate_float_08000cec(result24,result18);\n      result20 = calculate_floating_point_08000adc(result20,result21);\n      result21 = calculate_float_08000cec(result11,result15);\n      result20 = calculate_floating_point_08000adc(result20,result21);\n      result21 = calculate_float_08000cec(result6,result16);\n      result21 = calculate_float_08000cec(result21,result24);\n      result20 = calculate_floating_point_08000adc(result20,result21);\n      result21 = calculate_float_08000cec(result6,result2);\n      result21 = calculate_float_08000cec(result21,result25);\n      result20 = calculate_floating_point_08000adc(result20,result21);\n      result21 = calculate_float_08000cec(result13,result15);\n      result20 = calculate_floating_point_08000ad8(result20,result21);\n      result21 = calculate_float_08000cec(result14,result15);\n      result20 = calculate_floating_point_08000ad8(result20,result21);\n      result21 = calculate_float_08000cec(result25,check3);\n      result22 = calculate_float_08000cec(result8,result16);\n      result21 = calculate_floating_point_08000adc(result21,result22);\n      result18 = calculate_float_08000cec(param7,result18);\n      result18 = calculate_floating_point_08000ad8(result21,result18);\n      result21 = calculate_float_08000cec(result24,result19);\n      result18 = calculate_floating_point_08000adc(result18,result21);\n      result21 = calculate_float_08000cec(result11,result16);\n      result18 = calculate_floating_point_08000ad8(result18,result21);\n      result21 = calculate_float_08000cec(result13,result16);\n      result18 = calculate_floating_point_08000adc(result18,result21);\n      result21 = calculate_float_08000cec(check2,result2);\n      result21 = calculate_float_08000cec(result21,result25);\n      result18 = calculate_floating_point_08000adc(result18,result21);\n      result21 = calculate_float_08000cec(result14,result16);\n      result18 = calculate_floating_point_08000ad8(result18,result21);\n      result20 = calculate_float_08000cec(result20,result20);\n      result18 = calculate_float_08000cec(result18,result18);\n      calculate_floating_point_08000adc(result20,result18);\n      decode_binary_08000428();\n      process_input_08005bc8();\n      check4 = calculate_float32_08000a30();\n      result18 = calculate_float_08000cec(check3 + -0x80000000,result24);\n      result17 = calculate_float_08000cec(param7,result17);\n      result17 = calculate_floating_point_08000adc(result18,result17);\n      result8 = calculate_float_08000cec(result8,result2);\n      result8 = calculate_floating_point_08000adc(result17,result8);\n      result17 = calculate_float_08000cec(result25,result19);\n      result8 = calculate_floating_point_08000adc(result8,result17);\n      result17 = calculate_float_08000cec(result11,result2);\n      result8 = calculate_floating_point_08000ad8(result8,result17);\n      result17 = calculate_float_08000cec(check2,result16);\n      result17 = calculate_float_08000cec(result17,result25);\n      result8 = calculate_floating_point_08000adc(result8,result17);\n      result17 = calculate_float_08000cec(result13,result2);\n      result8 = calculate_floating_point_08000ad8(result8,result17);\n      result17 = calculate_float_08000cec(result14,result2);\n      result8 = calculate_floating_point_08000adc(result8,result17);\n      result17 = calculate_floating_point_08000adc(result8,result8);\n      result18 = calculate_floating_point_08000adc(result12);\n      result19 = calculate_float_08000cec(result24,check1);\n      result18 = calculate_floating_point_08000ad8(result18,result19);\n      result19 = calculate_float_08000cec(input1,result1);\n      result18 = calculate_floating_point_08000ad8(result18,result19);\n      result19 = calculate_float_08000cec(result25,check2);\n      result20 = calculate_floating_point_08000adc(result9);\n      result19 = calculate_floating_point_08000adc(result19,result20);\n      result20 = calculate_float_08000cec(input2,result1);\n      result19 = calculate_floating_point_08000ad8(result19,result20);\n      result20 = calculate_float_08000cec(result24,result8);\n      result21 = calculate_floating_point_08000ad8(0x3f000000,result13);\n      result14 = calculate_floating_point_08000ad8(result21,result14);\n      result14 = calculate_float_08000cec(result14,check4);\n      result21 = calculate_floating_point_08000ad8(result12,result10);\n      result21 = calculate_float_08000cec(result21,result8);\n      result14 = calculate_floating_point_08000adc(result14,result21);\n      result14 = calculate_floating_point_08000ad8(result14,result15);\n      result15 = calculate_float_08000cec(param7,result8);\n      result21 = calculate_float_08000cec(param7,result24);\n      result22 = calculate_float_08000cec(result23,result25);\n      result21 = calculate_floating_point_08000ad8(result21,result22);\n      result21 = calculate_float_08000cec(result21,check4);\n      result22 = calculate_float_08000cec(result24,result25);\n      result9 = calculate_floating_point_08000adc(result22,result9);\n      result9 = calculate_float_08000cec(result9,result8);\n      result9 = calculate_floating_point_08000adc(result21,result9);\n      result9 = calculate_floating_point_08000ad8(result9,result16);\n      result16 = calculate_float_08000cec(result24,check4);\n      result21 = calculate_floating_point_08000ad8(0x3f000000,result11);\n      result21 = calculate_floating_point_08000ad8(result21,result13);\n      result21 = calculate_float_08000cec(result21,result8);\n      result10 = calculate_floating_point_08000adc(result10,result12);\n      result10 = calculate_float_08000cec(result10,check4);\n      result10 = calculate_floating_point_08000adc(result21,result10);\n      result2 = calculate_floating_point_08000ad8(result10,result2);\n      result10 = calculate_float_08000cec(check2 + -0x80000000,result18);\n      result12 = calculate_float_08000cec(result6,result19);\n      result10 = calculate_floating_point_08000adc(result10,result12);\n      result12 = calculate_float_08000cec(result20,result14);\n      result10 = calculate_floating_point_08000ad8(result10,result12);\n      result12 = calculate_float_08000cec(result25,check4 + -0x80000000);\n      result12 = calculate_floating_point_08000adc(result12,result15);\n      result12 = calculate_float_08000cec(result12,result9);\n      result10 = calculate_floating_point_08000adc(result10,result12);\n      result12 = calculate_float_08000cec(result16,result2);\n      result10 = calculate_floating_point_08000adc(result10,result12);\n      result11 = calculate_floating_point_08000adc(result11);\n      result11 = calculate_floating_point_08000ad8(0x3f800000,result11);\n      result12 = calculate_floating_point_08000adc(result13);\n      result11 = calculate_floating_point_08000ad8(result11,result12);\n      result1 = calculate_float_08000cec(input3,result1);\n      result1 = calculate_floating_point_08000ad8(result11,result1);\n      result11 = calculate_float_08000cec(result25,result8);\n      result8 = calculate_float_08000cec(result23,result8);\n      result12 = calculate_float_08000cec(result7,result18);\n      result13 = calculate_float_08000cec(check1,result19);\n      result12 = calculate_floating_point_08000adc(result12,result13);\n      result13 = calculate_float_08000cec(param7,0x40800000);\n      result13 = calculate_float_08000cec(result13,result1);\n      result12 = calculate_floating_point_08000ad8(result12,result13);\n      result13 = calculate_float_08000cec(result14,result11);\n      result12 = calculate_floating_point_08000adc(result12,result13);\n      result13 = calculate_floating_point_08000adc(result16,result8);\n      result13 = calculate_float_08000cec(result13,result9);\n      result12 = calculate_floating_point_08000adc(result12,result13);\n      result13 = calculate_float_08000cec(result25,check4);\n      result16 = calculate_float_08000cec(param7,result17);\n      result13 = calculate_floating_point_08000ad8(result13,result16);\n      result13 = calculate_float_08000cec(result13,result2);\n      result12 = calculate_floating_point_08000adc(result12,result13);\n      check3 = calculate_floating_point_08000adc(check4,check4);\n      result13 = calculate_float_08000cec(param7,check4);\n      result16 = calculate_float_08000cec(check1 + -0x80000000,result18);\n      result7 = calculate_float_08000cec(result7,result19);\n      result7 = calculate_floating_point_08000adc(result16,result7);\n      result16 = calculate_float_08000cec(result24,0x40800000);\n      result1 = calculate_float_08000cec(result16,result1);\n      result1 = calculate_floating_point_08000ad8(result7,result1);\n      result7 = calculate_float_08000cec(result24,check3 + -0x80000000);\n      result7 = calculate_floating_point_08000ad8(result7,result8);\n      result7 = calculate_float_08000cec(result7,result14);\n      result1 = calculate_floating_point_08000adc(result1,result7);\n      result7 = calculate_floating_point_08000adc(result11,result13);\n      result7 = calculate_float_08000cec(result7,result9);\n      result1 = calculate_floating_point_08000adc(result1,result7);\n      result7 = calculate_float_08000cec(result23,check4);\n      result8 = calculate_float_08000cec(result24,result17);\n      result7 = calculate_floating_point_08000ad8(result7,result8);\n      result7 = calculate_float_08000cec(result7,result2);\n      result7 = calculate_floating_point_08000adc(result1,result7);\n      result1 = calculate_float_08000cec(result6,result18);\n      result6 = calculate_float_08000cec(check2,result19);\n      result1 = calculate_floating_point_08000adc(result1,result6);\n      result6 = calculate_float_08000cec(result25,check3 + -0x80000000);\n      result6 = calculate_floating_point_08000adc(result6,result15);\n      result6 = calculate_float_08000cec(result6,result14);\n      result1 = calculate_floating_point_08000adc(result1,result6);\n      result6 = calculate_float_08000cec(result23,check4 + -0x80000000);\n      result6 = calculate_floating_point_08000adc(result6,result20);\n      result6 = calculate_float_08000cec(result6,result9);\n      result1 = calculate_floating_point_08000adc(result1,result6);\n      result2 = calculate_float_08000cec(result2,result13);\n      result6 = calculate_floating_point_08000adc(result1,result2);\n      result1 = calculate_float_08000cec(result10);\n      result2 = calculate_float_08000cec(result12);\n      result1 = calculate_floating_point_08000adc(result1,result2);\n      result2 = calculate_float_08000cec(result7,result7);\n      result1 = calculate_floating_point_08000adc(result1,result2);\n      result2 = calculate_float_08000cec(result6,result6);\n      calculate_floating_point_08000adc(result1,result2);\n      decode_binary_08000428();\n      process_input_08005bc8();\n      result1 = calculate_float32_08000a30();\n      result8 = floating_point_conversion_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = calculate_float_08000cec(param7 + -0x80000000,result3);\n      result9 = calculate_float_08000cec(result24,result4);\n      result2 = calculate_floating_point_08000ad8(result2,result9);\n      result9 = calculate_float_08000cec(result25,result5);\n      result2 = calculate_floating_point_08000ad8(result2,result9);\n      result9 = calculate_float_08000cec(result2,0x3f000000);\n      result10 = calculate_float_08000cec(result10,result8);\n      result2 = DAT_20000360;\n      result10 = calculate_float_08000cec(result10,result1);\n      result9 = calculate_floating_point_08000ad8(result9,result10);\n      result2 = calculate_float_08000cec(result9,result2);\n      result9 = calculate_floating_point_08000adc(result2,result23);\n      result10 = calculate_float_08000cec(result23,result3);\n      result11 = calculate_float_08000cec(result24,result5);\n      result2 = DAT_20000360;\n      result10 = calculate_floating_point_08000adc(result10,result11);\n      result11 = calculate_float_08000cec(result25,result4);\n      result10 = calculate_floating_point_08000ad8(result10,result11);\n      result10 = calculate_float_08000cec(result10,0x3f000000);\n      result11 = calculate_float_08000cec(result12,result8);\n      result11 = calculate_float_08000cec(result11,result1);\n      result10 = calculate_floating_point_08000ad8(result10,result11);\n      result2 = calculate_float_08000cec(result10,result2);\n      result10 = calculate_floating_point_08000adc(result2,param7);\n      result2 = DAT_20000360;\n      result11 = calculate_float_08000cec(result23,result4);\n      result12 = calculate_float_08000cec(param7,result5);\n      result11 = calculate_floating_point_08000ad8(result11,result12);\n      result12 = calculate_float_08000cec(result25,result3);\n      result11 = calculate_floating_point_08000adc(result11,result12);\n      result11 = calculate_float_08000cec(result11,0x3f000000);\n      result7 = calculate_float_08000cec(result7,result8);\n      result7 = calculate_float_08000cec(result7,result1);\n      result7 = calculate_floating_point_08000ad8(result11,result7);\n      result2 = calculate_float_08000cec(result7,result2);\n      result2 = calculate_floating_point_08000adc(result2,result24);\n      result23 = calculate_float_08000cec(result23,result5);\n      result4 = calculate_float_08000cec(param7,result4);\n      result23 = calculate_floating_point_08000adc(result23,result4);\n      result24 = calculate_float_08000cec(result24,result3);\n      result23 = calculate_floating_point_08000ad8(result23,result24);\n      result24 = calculate_float_08000cec(result23,0x3f000000);\n      result23 = calculate_float_08000cec(result6,result8);\n      result1 = calculate_float_08000cec(result23,result1);\n      result23 = DAT_20000360;\n      result24 = calculate_floating_point_08000ad8(result24,result1);\n      result23 = calculate_float_08000cec(result24,result23);\n      result23 = calculate_floating_point_08000adc(result23,result25);\n      result24 = calculate_float_08000cec(result9,result9);\n      result25 = calculate_float_08000cec(result10,result10);\n      result24 = calculate_floating_point_08000adc(result24,result25);\n      result25 = calculate_float_08000cec(result2,result2);\n      result24 = calculate_floating_point_08000adc(result24,result25);\n      result25 = calculate_float_08000cec(result23,result23);\n      calculate_floating_point_08000adc(result24,result25);\n      decode_binary_08000428();\n      process_input_08005bc8();\n      result24 = calculate_float32_08000a30();\n      result24 = floating_point_conversion_08000e54(0x3f800000,result24);\n      result25 = calculate_float_08000cec(result9,result24);\n      DAT_2000003c = result25;\n      param7 = calculate_float_08000cec(result10,result24);\n      DAT_20000040 = param7;\n      result1 = calculate_float_08000cec(result2,result24);\n      DAT_20000044 = result1;\n      DAT_20000048 = calculate_float_08000cec(result23,result24);\n      result23 = calculate_float_08000cec(param7,DAT_20000048);\n      result24 = calculate_float_08000cec(result25,result1);\n      result23 = calculate_floating_point_08000ad8(result23,result24);\n      calculate_floating_point_08000adc(result23,result23);\n      decode_binary_08000428();\n      shift_result = validate_and_calculate_result_08003330_08005854();\n      shift_result = calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0x54442d18,0x400921fb);\n      result23 = calculate_float32_08000a30();\n      *output = result23;\n      param7 = DAT_20000040;\n      result23 = DAT_2000003c;\n      result24 = calculate_float_08000cec(DAT_2000003c,DAT_2000003c);\n      result25 = calculate_float_08000cec(param7,param7);\n      result25 = calculate_floating_point_08000ad8(result24,result25);\n      result24 = DAT_20000044;\n      result1 = calculate_float_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_floating_point_08000ad8(result25,result1);\n      result25 = DAT_20000048;\n      result2 = calculate_float_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000adc(result1,result2);\n      shift_result = decode_binary_08000428();\n      result23 = calculate_float_08000cec(result23,param7);\n      result24 = calculate_float_08000cec(result24,result25);\n      result23 = calculate_floating_point_08000adc(result23,result24);\n      calculate_floating_point_08000adc(result23,result23);\n      validate_result = decode_binary_08000428();\n      shift_result = thunk_calculate_float_result_08006070((int)validate_result,(int)((ulonglong)validate_result >> 0x20),(int)shift_result,\n                                  (int)((ulonglong)shift_result >> 0x20));\n      shift_result = calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0x54442d18,0x400921fb);\n      result23 = calculate_float32_08000a30();\n      output[1] = result23;\n      param7 = DAT_20000040;\n      result23 = DAT_2000003c;\n      result24 = calculate_float_08000cec(DAT_2000003c,DAT_2000003c);\n      result25 = calculate_float_08000cec(param7,param7);\n      result25 = calculate_floating_point_08000adc(result24,result25);\n      result24 = DAT_20000044;\n      result1 = calculate_float_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_floating_point_08000ad8(result25,result1);\n      result25 = DAT_20000048;\n      result2 = calculate_float_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000ad8(result1,result2);\n      shift_result = decode_binary_08000428();\n      result24 = calculate_float_08000cec(param7,result24);\n      result23 = calculate_float_08000cec(result23,result25);\n      result23 = calculate_floating_point_08000adc(result24,result23);\n      calculate_floating_point_08000adc(result23,result23);\n      validate_result = decode_binary_08000428();\n      shift_result = thunk_calculate_float_result_08006070((int)validate_result,(int)((ulonglong)validate_result >> 0x20),(int)shift_result,\n                                  (int)((ulonglong)shift_result >> 0x20));\n      shift_result = calculate_shift_080004d0((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)shift_result,(int)((ulonglong)shift_result >> 0x20),0x54442d18,0x400921fb);\n      result23 = calculate_float32_08000a30();\n      output[2] = result23;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_result_08003330",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param1",
                "param_5": "param2",
                "param_6": "param3",
                "param_7": "param4",
                "param_8": "param5",
                "param_9": "param6",
                "param_10": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "check1",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "iVar8": "check2",
                "uVar9": "result7",
                "uVar10": "result8",
                "uVar11": "result9",
                "uVar12": "result10",
                "uVar13": "result11",
                "uVar14": "result12",
                "uVar15": "result13",
                "uVar16": "result14",
                "uVar17": "result15",
                "uVar18": "result16",
                "iVar19": "check3",
                "uVar20": "result17",
                "uVar21": "result18",
                "uVar22": "result19",
                "uVar23": "result20",
                "uVar24": "result21",
                "uVar25": "result22",
                "iVar26": "check4",
                "uVar27": "result23",
                "uVar28": "result24",
                "uVar29": "result25",
                "iVar30": "param7",
                "uVar31": "shift_result",
                "uVar32": "validate_result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left_param_to_high_08003eb0",
            "code": "\nlonglong shiftLeftParamToHigh_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(input,1);\n  }\n  return (ulonglong)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left_param_to_high_08003eb0",
                "param_1": "input",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int data,undefined value)\n\n{\n  *(short *)(data + 0x804) = *(short *)(data + 0x804) + 1;\n  *(undefined *)(data + (uint)*(ushort *)(data + 0x802)) = value;\n  *(ushort *)(data + 0x802) = *(short *)(data + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "data",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int isParam1Zero,int isParam2Zero,int isParam3Zero)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,isParam1Zero == 0);\n  set_param_value_08001424(0x40011000,0x4000,isParam2Zero == 0);\n  set_param_value_08001424(0x40011000,0x2000,isParam3Zero == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "isParam1Zero",
                "param_2": "isParam2Zero",
                "param_3": "isParam3Zero"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_parameter_in_memory_08003fc4",
            "code": "\nvoid storeParameterInMemory_08003fc4(undefined4 parameter)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = parameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_parameter_in_memory_08003fc4",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_in_data_08003fd0",
            "code": "\nvoid setParamValueInData_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_in_data_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param1_08003fdc",
            "code": "\nvoid setParam1_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param1_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "set_bit_values_08003ff4",
            "code": "\nvoid set_bit_values_08003ff4(void)\n\n{\n  set_bit_and_value_08002538(&DAT_200015f8,4);\n  set_bit_and_value_08002538(&DAT_20001540,8);\n  set_bit_and_value_08002538(&DAT_200014c8,8);\n  set_bit_and_value_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "set_bit_values_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_test_peripheral_system_08004028",
            "code": "\nvoid initialize_and_test_peripheral_system_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_peripheral_system();\n  configure_bits();\n  iteration_count = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_test_peripheral_system_08004028",
                "initialize_peripheral_system_0800458c": "initialize_peripheral_system",
                "set_bit_values_08003ff4": "configure_bits",
                "set_param_values_08003f3c": "set_parameter_values",
                "iVar1": "iteration_count"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_and_handle_input_0800403c",
            "code": "\nvoid processAndHandleInput_0800403c(undefined4 input1,undefined4 input2,undefined flag,int param4)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = flag;\n  result = process_input_08001828(&DAT_20001504,input1,input2,1,buffer,1,200);\n  if (result != 0) {\n    continuous_processing_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (param4 != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_and_handle_input_0800403c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "param4",
                "iVar1": "result",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_continue_0800407c",
            "code": "\nundefined process_and_continue_0800407c(undefined4 input_param,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = process_data_08001938(&DAT_20001504,input_param,arg1,1,result,1,200);\n  if (iVar1 != 0) {\n    continuous_processing_08004490(arg2,arg3);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_continue_0800407c",
                "param_1": "input_param",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_and_continue_080040b8",
            "code": "\nvoid process_and_continue_080040b8(undefined4 data_param_1,undefined4 data_param_2,undefined4 data_param_3,undefined4 data_param_4,\n                 undefined4 process_param_1,undefined4 process_param_2)\n\n{\n  int result;\n  \n  result = process_data(&DAT_20001504,data_param_1,data_param_2,1,data_param_3,data_param_4,200,data_param_4);\n  if (result != 0) {\n    continuous_process(process_param_1,process_param_2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_and_continue_080040b8",
                "param_1": "data_param_1",
                "param_2": "data_param_2",
                "param_3": "data_param_3",
                "param_4": "data_param_4",
                "param_5": "process_param_1",
                "param_6": "process_param_2",
                "iVar1": "result",
                "process_data_08001938": "process_data",
                "continuous_processing_08004490": "continuous_process"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_080040e8",
            "code": "\nvoid copyData_080040e8(undefined4 data,int startIndex,int destArray,int length)\n\n{\n  undefined processedData;\n  int currentIndex;\n  undefined *pDest;\n  int originalLength;\n  \n  pDest = (undefined *)(destArray + -1);\n  originalLength = length;\n  for (currentIndex = 0; currentIndex < length; currentIndex = currentIndex + 1) {\n    processedData = process_and_continue_0800407c(data,startIndex + currentIndex & 0xffff,\"../Src/i2c.c\",0x4c,originalLength);\n    pDest = pDest + 1;\n    *pDest = processedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_080040e8",
                "param_1": "data",
                "param_2": "startIndex",
                "param_3": "destArray",
                "param_4": "length",
                "uVar1": "processedData",
                "iVar2": "currentIndex",
                "puVar3": "pDest",
                "iVar4": "originalLength"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid processSensorData_0800411c(void)\n\n{\n  undefined4 *pointer1;\n  longlong longValue;\n  uint value1;\n  uint value2;\n  uint value3;\n  undefined4 value4;\n  undefined4 value5;\n  int integer1;\n  uint integer2;\n  uint integer3;\n  uint integer4;\n  uint integer5;\n  undefined4 *pointer2;\n  undefined4 unaffectedRegister4;\n  int integer6;\n  int integer7;\n  bool boolean1;\n  undefined8 value6;\n  \n  integer1 = thunk_get_global_variable_0800115c();\n  if (1 < (uint)(integer1 - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_global_variable_0800115c();\n    initialize_and_process_sensor_data_08002f28();\n  }\n  integer1 = thunk_get_global_variable_0800115c();\n  if (2 < (uint)(integer1 - DAT_20000294)) {\n    DAT_20000294 = thunk_get_global_variable_0800115c();\n    calculate_values_08004a84();\n  }\n  integer1 = thunk_get_global_variable_0800115c();\n  if (3 < (uint)(integer1 - DAT_20000290)) {\n    DAT_20000290 = thunk_get_global_variable_0800115c();\n    initialize_process_08004348();\n    process_data_08004384();\n    process_and_xor_data_080043f0();\n    process_and_xor_08004410();\n    process_and_xor_08004434();\n    copy_and_process_080043bc();\n    decode_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    integer7 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    integer2 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)integer7) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)integer7) >> 0x20) << 9;\n    integer3 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)integer7 >> 7);\n    integer4 = integer3 + (uint)DAT_20000260 * 0x10000;\n    value2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)integer7) >> 8);\n    integer1 = integer2 + 2000;\n    value3 = value2 + (uint)DAT_2000025e * 0x8000;\n    boolean1 = (int)integer2 < 0;\n    if (1999 < integer1) {\n      integer2 = 0;\n    }\n    value1 = integer2;\n    if (boolean1 != SBORROW4(integer1,2000)) {\n      integer6 = integer2 * integer2 * 5;\n      integer2 = integer6 >> 2;\n      value1 = integer6 >> 1;\n    }\n    integer5 = integer4 - value1;\n    longValue = (ulonglong)(value3 - integer2) * (ulonglong)DAT_2000026c;\n    integer6 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)integer7 >> 0x28) +\n               (uint)CARRY4(value2,(uint)DAT_2000025e * 0x8000)) - ((int)integer2 >> 0x1f)) -\n             (uint)(value3 < integer2)) + (int)((ulonglong)longValue >> 0x20);\n    value2 = (uint)longValue >> 0x15 | integer6 * 0x800;\n    value4 = calculate_modified_value_08000c44(value2 - integer5 >> 0xf |\n                         (((integer6 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)integer7 >> 0x27) +\n                            (uint)CARRY4(integer3,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value1 >> 0x1f)) - (uint)(integer4 < value1))) - (uint)(value2 < integer5)\n                         ) * 0x20000);\n    value4 = floating_point_conversion_08000e54(value4,0x42c80000);\n    DAT_20000354 = value4;\n    value5 = calculate_modified_value_08000c44(integer1);\n    DAT_20000358 = floating_point_conversion_08000e54(value5,0x42c80000);\n    floating_point_conversion_08000e54(value4,0x447d5000);\n    value6 = decode_binary_08000428();\n    value6 = verify_and_calculate_result_08005900((int)value6,(int)((ulonglong)value6 >> 0x20),0x60000000,0x3fc85b95);\n    value6 = perform_arithmetic_operation_08000168(0,0x3ff00000,(int)value6,(int)((ulonglong)value6 >> 0x20));\n    calculate_shift_080004d0((int)value6,(int)((ulonglong)value6 >> 0x20),0,0x40e5a540);\n    value4 = calculate_float32_08000a30();\n    value5 = 0;\n    pointer2 = &DAT_20000300;\n    DAT_20000350 = value4;\n    do {\n      pointer1 = pointer2 + 1;\n      *pointer2 = *pointer1;\n      value5 = calculate_floating_point_08000adc(value5);\n      pointer2 = pointer1;\n    } while (pointer1 != &DAT_2000034c);\n    DAT_2000034c = value4;\n    value4 = calculate_floating_point_08000adc(value5,value4);\n    DAT_200002fc = floating_point_conversion_08000e54(value4,0x41a00000);\n    integer1 = convert_to_unsigned_int_08001078();\n    DAT_200014ab = integer1 * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_and_handle_input_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_global_variable_0800115c();\n  }\n  integer1 = thunk_get_global_variable_0800115c();\n  if (((10 < (uint)(integer1 - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = process_data_08003034();\n    DAT_20000275 = '\\x01';\n    process_and_handle_input_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedRegister4);\n    DAT_20000278 = thunk_get_global_variable_0800115c();\n  }\n  integer1 = thunk_get_global_variable_0800115c();\n  if (((10 < (uint)(integer1 - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = process_data_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "pointer1",
                "lVar2": "longValue",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4",
                "uVar7": "value5",
                "iVar8": "integer1",
                "uVar9": "integer2",
                "uVar10": "integer3",
                "uVar11": "integer4",
                "uVar12": "integer5",
                "puVar13": "pointer2",
                "unaff_r4": "unaffectedRegister4",
                "iVar14": "integer6",
                "iVar15": "integer7",
                "bVar16": "boolean1",
                "uVar17": "value6"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_peripheral_system_08004194",
            "code": "\nvoid initialize_peripheral_system_08004194(void)\n\n{\n  initialize_and_test_peripheral_system_08004028();\n  initialize_and_check_status_08004c70();\n  initialize_sensors_08002ea0();\n  initialize_sensor_data_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_peripheral_system_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_peripheral_system_080041ae",
            "code": "\nvoid run_peripheral_system_080041ae(void)\n\n{\n  shift_left_parameter(0);\n  initialize_peripherals();\n  do {\n    increment_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_peripheral_system_080041ae",
                "shift_left_param_to_high_08003eb0": "shift_left_parameter",
                "initialize_peripheral_system_08004194": "initialize_peripherals",
                "increment_counter_0800114c": "increment_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initialize_parameters_080041c4(undefined4 parameter_1,undefined4 parameter_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  undefined4 return_value;\n  \n  store_parameter_in_memory(0);\n  set_parameter_value_in_data(0);\n  set_parameter_1(0);\n  set_parameter_value(0,return_value,parameter_3,parameter_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "extraout_r1": "return_value",
                "store_parameter_in_memory_08003fc4": "store_parameter_in_memory",
                "set_param_value_in_data_08003fd0": "set_parameter_value_in_data",
                "set_param1_08003fdc": "set_parameter_1",
                "set_param_value_08003fe8": "set_parameter_value"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_store_parameters_0800426c",
            "code": "\n\n\nvoid calculate_and_store_parameters_0800426c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 float_result_1;\n  undefined4 float_result_2;\n  undefined4 float_result_3;\n  uint converted_int_1;\n  uint converted_int_2;\n  uint converted_int_3;\n  uint converted_int_4;\n  \n  float_result_1 = calculate_floating_point_08000ad8();\n  float_result_2 = calculate_floating_point_08000adc(input_param_1,input_param_2);\n  float_result_3 = calculate_floating_point_08000ad8(float_result_1,input_param_3);\n  float_result_3 = calculate_floating_point_08000adc(float_result_3,input_param_4);\n  calculate_floating_point_08000ad8(float_result_3,0x447a0000);\n  converted_int_1 = convert_to_unsigned_int_08001078();\n  float_result_3 = calculate_floating_point_08000ad8(float_result_2,input_param_3);\n  float_result_3 = calculate_floating_point_08000ad8(float_result_3,input_param_4);\n  calculate_floating_point_08000ad8(float_result_3,0x447a0000);\n  converted_int_2 = convert_to_unsigned_int_08001078();\n  float_result_1 = calculate_floating_point_08000adc(float_result_1,input_param_3);\n  float_result_1 = calculate_floating_point_08000ad8(float_result_1,input_param_4);\n  calculate_floating_point_08000ad8(float_result_1,0x447a0000);\n  converted_int_3 = convert_to_unsigned_int_08001078();\n  float_result_1 = calculate_floating_point_08000adc(input_param_3,float_result_2);\n  float_result_1 = calculate_floating_point_08000adc(float_result_1,input_param_4);\n  calculate_floating_point_08000ad8(float_result_1,0x447a0000);\n  converted_int_4 = convert_to_unsigned_int_08001078();\n  if (999 < (int)converted_int_4) {\n    converted_int_4 = 1000;\n  }\n  if (999 < (int)converted_int_3) {\n    converted_int_3 = 1000;\n  }\n  if (999 < (int)converted_int_2) {\n    converted_int_2 = 1000;\n  }\n  if (999 < (int)converted_int_1) {\n    converted_int_1 = 1000;\n  }\n  DAT_200002a0 = converted_int_2 & ~((int)converted_int_2 >> 0x1f);\n  DAT_200002a4 = converted_int_1 & ~((int)converted_int_1 >> 0x1f);\n  DAT_2000029c = converted_int_3 & ~((int)converted_int_3 >> 0x1f);\n  DAT_20000298 = converted_int_4 & ~((int)converted_int_4 >> 0x1f);\n  store_parameter_in_memory_08003fc4();\n  set_param_value_in_data_08003fd0(DAT_2000029c);\n  set_param1_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_store_parameters_0800426c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "float_result_1",
                "uVar2": "float_result_2",
                "uVar3": "float_result_3",
                "uVar4": "converted_int_1",
                "uVar5": "converted_int_2",
                "uVar6": "converted_int_3",
                "uVar7": "converted_int_4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_and_xor_08004300",
            "code": "\nvoid processAndXOR_08004300(uint input1,byte *input2,uint length)\n\n{\n  uint result;\n  byte *currentByte;\n  \n  process_string_08004c8c(&DAT_0800732e);\n  check_and_process_input_08004c18(length & 0xff);\n  result = length & 0xff ^ input1;\n  check_and_process_input_08004c18(input1);\n  for (currentByte = input2; (int)currentByte - (int)input2 < (int)length; currentByte = currentByte + 1) {\n    check_and_process_input_08004c18(*currentByte);\n    result = result ^ *currentByte;\n  }\n  check_and_process_input_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_and_xor_08004300",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "length",
                "uVar1": "result",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_process_08004348",
            "code": "\n\n\nvoid initializeProcess_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 localVar1;\n  uint localVar2;\n  undefined4 localVar3;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  localVar1 = 0x40003e9;\n  localVar2 = param2 & 0xff000000;\n  localVar3 = param3;\n  process_and_xor_08004300(100,&localVar1,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_process_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "localVar1",
                "local_c": "localVar2",
                "uStack_8": "localVar3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "process_data_08004384",
            "code": "\n\n\nvoid processData_08004384(undefined4 input_ptr,undefined4 output_ptr,undefined4 temp_ptr,uint flags)\n\n{\n  undefined4 data;\n  undefined4 constant;\n  uint masked_flags;\n  \n  _DAT_200013bd = 0x2a0007;\n  data = _DAT_200013b9;\n  constant = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_flags = flags & 0xff000000;\n  process_and_xor_08004300(0x65,&data,0xb,0,input_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "process_data_08004384",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "temp_ptr",
                "param_4": "flags",
                "local_14": "data",
                "uStack_10": "constant",
                "local_c": "masked_flags"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_080043bc",
            "code": "\nvoid copyAndProcess_080043bc(void)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 *ptrDestination;\n  undefined4 *ptrSource;\n  undefined4 destinationBuffer [2];\n  undefined2 sourceBuffer [6];\n  \n  ptrSource = (undefined4 *)&DAT_2000142a;\n  ptrDestination = destinationBuffer;\n  do {\n    temp1 = *ptrSource;\n    temp2 = ptrSource[1];\n    ptrSource = ptrSource + 2;\n    *ptrDestination = temp1;\n    ptrDestination[1] = temp2;\n    ptrDestination = ptrDestination + 2;\n  } while (ptrSource != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrDestination = DAT_2000143a;\n  process_and_xor_08004300(0x66,destinationBuffer,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_080043bc",
                "puVar4": "ptrSource",
                "puVar3": "ptrDestination",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "local_24": "destinationBuffer",
                "local_1c": "sourceBuffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_and_xor_data_080043f0",
            "code": "\n\n\nvoid process_and_xor_data_080043f0(undefined4 data_ptr,undefined4 size_ptr,undefined4 xor_value)\n\n{\n  undefined4 data;\n  undefined4 size;\n  undefined4 data_array [2];\n  \n  data = _DAT_200013dd;\n  size = _DAT_200013e1;\n  data_array[0] = xor_value;\n  process_and_xor_08004300(0x68,&data,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_and_xor_data_080043f0",
                "param_1": "data_ptr",
                "param_2": "size_ptr",
                "param_3": "xor_value",
                "local_10": "data",
                "uStack_c": "size",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_xor_08004410",
            "code": "\nvoid processAndXOR_08004410(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 constantValue;\n  undefined4 combinedValue;\n  undefined4 input3Copy;\n  \n  constantValue = DAT_20001395;\n  combinedValue = CONCAT22((short)((uint)input2 >> 0x10),DAT_20001399);\n  input3Copy = input3;\n  process_and_xor_08004300(0x6c,&constantValue,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_xor_08004410",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "constantValue",
                "local_c": "combinedValue",
                "uStack_8": "input3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_and_xor_08004434",
            "code": "\nvoid process_and_xor_08004434(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 constant_value;\n  undefined4 combined_value;\n  undefined4 input_3_copy;\n  \n  constant_value = DAT_200014ab;\n  combined_value = CONCAT22((short)((uint)input_2 >> 0x10),DAT_200014af);\n  input_3_copy = input_3;\n  process_and_xor_08004434_08004300(0x6d,&constant_value,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_and_xor_08004434",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "local_10": "constant_value",
                "local_c": "combined_value",
                "uStack_8": "input_3_copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "decode_and_process_data_08004458",
            "code": "\nvoid decode_and_process_data_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *next_destination;\n  undefined4 *next_source;\n  undefined4 decoded_data [3];\n  undefined2 temporary_buffer [10];\n  \n  destination = decoded_data;\n  source = &DAT_2000139b;\n  do {\n    next_source = source;\n    next_destination = destination;\n    temp = next_source[1];\n    *next_destination = *next_source;\n    next_destination[1] = temp;\n    destination = next_destination + 2;\n    source = next_source + 2;\n  } while (next_source + 2 != (undefined4 *)0x200013b3);\n  next_destination[2] = uRam200013b3;\n  *(undefined2 *)(next_destination + 3) = *(undefined2 *)(next_source + 3);\n  process_and_xor_08004300(0x70,decoded_data,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "decode_and_process_data_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "next_destination",
                "puVar5": "next_source",
                "local_30": "decoded_data",
                "local_24": "temporary_buffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_processing_08004490",
            "code": "\nvoid continuousProcessing_08004490(undefined4 errorMessage,undefined4 lineNumber)\n\n{\n  setParameterValue(0x40011000,0x4000,1);\n  setParameterValue(0x40011000,0x8000,0);\n  setParameterValue(0x40011000,0x2000,0);\n  do {\n    performBitwiseXor(0x40011000,0x4000);\n    performBitwiseXor(0x40011000,0x8000);\n    performBitwiseXor(0x40011000,0x2000);\n    printErrorMessage(\"Error with \");\n    printErrorMessage(errorMessage);\n    printErrorMessage(\" at line: \");\n    initializeAndProcessData(lineNumber);\n    checkAndProcessInput(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_processing_08004490",
                "param_1": "errorMessage",
                "param_2": "lineNumber",
                "set_param_value_08001424": "setParameterValue",
                "bitwise_xor_0800142e": "performBitwiseXor",
                "process_string_08004c8c": "printErrorMessage",
                "initialize_and_process_data_08004cac": "initializeAndProcessData",
                "check_and_process_input_08004c18": "checkAndProcessInput"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "process_peripheral_data_08004514",
            "code": "\nvoid processPeripheralData_08004514(void)\n\n{\n  int result;\n  uint dataValue;\n  undefined4 constant2;\n  int counter;\n  undefined4 value3;\n  int counter2;\n  int result2;\n  undefined4 value4;\n  int result3;\n  undefined4 dataArray [4];\n  undefined4 flag;\n  undefined4 length;\n  undefined4 value2;\n  undefined4 value;\n  undefined4 constant;\n  \n  flag = 1;\n  length = 0x10;\n  counter = 2;\n  value = 0;\n  dataArray[0] = 2;\n  value2 = 2;\n  constant = 0x380000;\n  result = process_param_08001b58(dataArray);\n  if (result == 0) goto LAB_08004540;\n  constant2 = 0x3c;\n  while( true ) {\n    result = continuous_processing_08004490(\"../Src/peripherals.c\",constant2);\nLAB_08004540:\n    value3 = 0xf;\n    value4 = 0x400;\n    counter2 = counter;\n    result2 = result;\n    result3 = result;\n    counter = check_and_initialize_mpu_clock_0800209c(&value3,counter);\n    if (counter == 0) break;\n    constant2 = 0x49;\n  }\n  dataValue = get_data_08002214();\n  set_parameters_08001214(dataValue / 1000);\n  set_flag_08001240(4);\n  update_memory_data_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "process_peripheral_data_08004514",
                "local_20": "flag",
                "local_1c": "length",
                "iVar4": "counter",
                "local_10": "value",
                "local_30": "dataArray",
                "local_14": "value2",
                "local_c": "constant",
                "iVar1": "result",
                "local_44": "value3",
                "local_38": "value4",
                "local_40": "counter2",
                "local_3c": "result2",
                "local_34": "result3",
                "uVar2": "dataValue",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripheral_system_0800458c",
            "code": "\n\n\nvoid initialize_peripheral_system_0800458c(void)\n\n{\n  int result;\n  undefined4 value;\n  int param_value;\n  int flag1;\n  int flag2;\n  int data1;\n  int data2;\n  int data3;\n  int data4;\n  int data5;\n  int data6;\n  int bit_mask;\n  int bit_value;\n  int bit_mask2;\n  int bit_value2;\n  int bit_mask3;\n  undefined4 memory_size;\n  int param;\n  \n  initialize_and_setup();\n  process_peripheral_data();\n  param_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value(0x40010800,0x20,0);\n  bit_mask = 0xe000;\n  bit_value = 1;\n  bit_value2 = 2;\n  apply_bit_mask(0x40011000,&bit_mask);\n  bit_mask = 0x20;\n  bit_value = 1;\n  bit_value2 = 2;\n  apply_bit_mask(0x40010800,&bit_mask);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = initialize_data();\n  if (result == 0) goto LAB_0800463a;\n  value = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = continuous_processing(\"../Src/peripherals.c\",value);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = initialize_memory(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  value = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = param_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = update_configuration(&DAT_200015bc);\n                                if (result == 0) break;\n                                value = 0x88;\n                              }\n                              flag1 = result;\n                              flag2 = result;\n                              result = initialize_flags(&DAT_200015bc,&flag1);\n                              if (result == 0) break;\n                              value = 0x8f;\n                            }\n                            data1 = 0x60;\n                            data2 = result;\n                            data3 = result;\n                            data4 = result;\n                            data5 = result;\n                            data6 = result;\n                            result = update_and_set_data(&DAT_200015bc,&data1,0xc);\n                            if (result == 0) break;\n                            value = 0x9a;\n                          }\n                          memory_size = 0x2000;\n                          bit_mask = result;\n                          bit_value = result;\n                          bit_mask2 = result;\n                          bit_value2 = result;\n                          bit_mask3 = result;\n                          param = result;\n                          result = check_and_update_param(&DAT_200015bc,&bit_mask);\n                          if (result == 0) break;\n                          value = 0xa6;\n                        }\n                        apply_bit_mask(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = param_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = update_configuration(&DAT_200015f8);\n                        if (result == 0) break;\n                        value = 0xc3;\n                      }\n                      data1 = result;\n                      data2 = result;\n                      result = initialize_flags(&DAT_200015f8,&data1);\n                      if (result == 0) break;\n                      value = 0xca;\n                    }\n                    bit_mask = 0x60;\n                    bit_value = result;\n                    bit_mask2 = result;\n                    bit_mask3 = result;\n                    result = update_and_set_data(&DAT_200015f8,&bit_mask,4);\n                    if (result == 0) break;\n                    value = 0xd3;\n                  }\n                  apply_bit_mask(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = param_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = update_configuration();\n                  if (result == 0) break;\n                  value = 0xf0;\n                }\n                data1 = 0;\n                data2 = 0;\n                result = initialize_flags(&DAT_20001540,&data1);\n                if (result == 0) break;\n                value = 0xf7;\n              }\n              bit_mask = 0x60;\n              bit_value = result;\n              bit_mask2 = result;\n              bit_mask3 = result;\n              result = update_and_set_data(&DAT_20001540,&bit_mask,8);\n              if (result == 0) break;\n              value = 0x100;\n            }\n            param_value = update_and_set_data(&DAT_20001540,&bit_mask,0xc);\n            if (param_value == 0) break;\n            value = 0x105;\n          }\n          apply_bit_mask(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = param_value;\n          DAT_200014d8 = param_value;\n          result = update_configuration(&DAT_200014c8);\n          if (result == 0) break;\n          value = 0x122;\n        }\n        data1 = result;\n        data2 = result;\n        result = initialize_flags(&DAT_200014c8,&data1);\n        if (result == 0) break;\n        value = 0x129;\n      }\n      bit_mask = 0x60;\n      bit_value = result;\n      bit_mask2 = result;\n      bit_mask3 = result;\n      result = update_and_set_data(&DAT_200014c8,&bit_mask,8);\n      if (result == 0) break;\n      value = 0x132;\n    }\n    result = update_and_set_data(&DAT_200014c8,&bit_mask,0xc);\n    if (result == 0) break;\n    value = 0x137;\n  }\n  apply_bit_mask(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripheral_system_0800458c",
                "iVar1": "result",
                "uVar2": "value",
                "iVar3": "param_value",
                "local_58": "flag1",
                "local_54": "flag2",
                "local_50": "data1",
                "local_4c": "data2",
                "local_48": "data3",
                "local_40": "data4",
                "local_3c": "data5",
                "local_38": "data6",
                "local_34": "bit_mask",
                "local_30": "bit_value",
                "local_2c": "bit_mask2",
                "local_28": "bit_value2",
                "local_24": "bit_mask3",
                "local_20": "memory_size",
                "local_1c": "param",
                "initialize_and_setup_08001128": "initialize_and_setup",
                "process_peripheral_data_08004514": "process_peripheral_data",
                "set_param_value_08001424": "set_param_value",
                "apply_bit_mask_08001264": "apply_bit_mask",
                "initialize_data_08001754": "initialize_data",
                "continuous_processing_08004490": "continuous_processing",
                "initialize_memory_08002724": "initialize_memory",
                "update_configuration_080023d0": "update_configuration",
                "initialize_flags_080025a4": "initialize_flags",
                "update_and_set_data_0800245c": "update_and_set_data",
                "check_and_update_param_08002564": "check_and_update_param",
                "apply_bit_mask_08004e14": "apply_bit_mask"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "perform_calculation_0800483c",
            "code": "\nvoid performCalculation_0800483c(int *inputParams)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = inputParams[0xc];\n  result1 = calculate_floating_point_08000adc(inputParams[7],inputParams[9]);\n  value2 = calculate_floating_point_08000ad8(result1,value2);\n  inputParams[10] = value2;\n  if (*inputParams == 3) {\n    value2 = is_concatenation_successful_08001064(inputParams[10],0);\n    if (value2 == 0) {\n      value2 = is_concatenation_successful_08001028(inputParams[10],0xc3340000);\n    }\n    else {\n      value2 = is_concatenation_successful_08001064(inputParams[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = inputParams[10];\n      result1 = calculate_float_08000cec(inputParams[10],0x43b40000);\n      value2 = is_concatenation_successful_08001064(inputParams[10],0);\n      value1 = inputParams[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = floating_point_conversion_08000e54(result1,value1);\n      value2 = calculate_floating_point_08000ad8(value3,result1);\n      inputParams[10] = value2;\n    }\n  }\n  value3 = inputParams[2];\n  value1 = inputParams[3];\n  value2 = calculate_float_08000cec(inputParams[1],inputParams[10]);\n  inputParams[0xe] = value2;\n  value2 = calculate_floating_point_08000adc(inputParams[10],inputParams[0xf]);\n  inputParams[0xf] = value2;\n  value2 = is_concatenation_successful_08001028(inputParams[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = is_concatenation_successful_08001064(inputParams[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = inputParams[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  inputParams[0xf] = value2;\n  value2 = calculate_floating_point_08000ad8(inputParams[0xc],inputParams[0xd]);\n  inputParams[0x10] = value2;\n  value2 = inputParams[0xe];\n  result1 = calculate_float_08000cec(value3,inputParams[0xf]);\n  result1 = calculate_floating_point_08000adc(result1,value2);\n  result2 = calculate_float_08000cec(value1,inputParams[0x10]);\n  value2 = calculate_floating_point_08000ad8(result1,result2);\n  inputParams[0x12] = value2;\n  result1 = calculate_modified_value_08000c44(inputParams[0x13]);\n  value2 = is_concatenation_successful_08001028(inputParams[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = is_concatenation_successful_08001064(inputParams[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = inputParams[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = calculate_float_08000cec(value2,result1);\n  inputParams[0x12] = value2;\n  inputParams[0xd] = inputParams[0xc];\n  inputParams[0xb] = inputParams[10];\n  inputParams[0x15] = inputParams[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "perform_calculation_0800483c",
                "param_1": "inputParams",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "calculate_data_values_08004a30",
            "code": "\nvoid calculateDataValues_08004a30(void)\n\n{\n  undefined4 uVar1;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      uVar1 = getDataValue();\n      DAT_20000068 = calculateFloat(uVar1,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      uVar1 = getDataValue();\n      DAT_2000007c = calculateFloat(uVar1,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "calculate_data_values_08004a30",
                "get_data_value_08003068": "getDataValue",
                "calculate_float_08000cec": "calculateFloat"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "calculate_values_08004a84",
            "code": "\nvoid calculateValues_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculateFloatingPointSum();\n  DAT_20000134 = calculateAndStoreResult();\n  DAT_20000190 = processConcatenatedValues();\n  calculateDataValues();\n  iVar1 = isConcatSuccessful1(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = isConcatSuccessful2(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = isConcatSuccessful1(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = isConcatSuccessful1(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = isConcatSuccessful2(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = isConcatSuccessful1(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      setParamValues(1,1);\n      performCalculation(&DAT_200000a8);\n      performCalculation(&DAT_20000104);\n      performCalculation(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        performCalculation(&DAT_2000004c);\n        calculateFloatingPoint(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeParameters();\n      }\n      else {\n        calculateAndStoreParameters(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculateFloat(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = bitwiseShift();\n      calculateFloat(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = bitwiseShift();\n      calculateFloat(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = bitwiseShift();\n      calculateFloat(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = bitwiseShift();\n      calculateFloat(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = bitwiseShift();\n      calculateFloat(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = bitwiseShift();\n      calculateFloat(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = bitwiseShift();\n      calculateFloat(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = bitwiseShift();\n      calculateFloat(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = bitwiseShift();\n      calculateFloat(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = bitwiseShift();\n      calculateFloat(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = bitwiseShift();\n      return;\n    }\n  }\n  initializeParameters();\n  setParamValues(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "calculate_values_08004a84",
                "is_concatenation_successful_08001064": "isConcatSuccessful1",
                "is_concatenation_successful_08001028": "isConcatSuccessful2",
                "calculate_floating_point_sum_08002ec0": "calculateFloatingPointSum",
                "calculate_and_store_result_08002ed4": "calculateAndStoreResult",
                "process_concatenated_values_08002ee8": "processConcatenatedValues",
                "calculate_data_values_08004a30": "calculateDataValues",
                "set_param_values_08003f3c": "setParamValues",
                "perform_calculation_0800483c": "performCalculation",
                "calculate_floating_point_08000adc": "calculateFloatingPoint",
                "initialize_parameters_080041c4": "initializeParameters",
                "calculate_and_store_parameters_0800426c": "calculateAndStoreParameters",
                "calculate_float_08000cec": "calculateFloat",
                "bitwise_shift_080010c4": "bitwiseShift"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "check_and_process_input_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 checkAndProcessInput_08004c18(undefined input)\n\n{\n  int *ptrVar1;\n  int var2;\n  int var3;\n  ushort *ptrVar4;\n  \n  DAT_20001636._0_1_ = input;\n  ptrVar4 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var2 = get_global_variable_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var3 = get_global_variable_0800115c();\n      } while ((uint)(var3 - var2) < 6);\nLAB_0800281c:\n      ptrVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptrVar1[3] = ptrVar1[3] & 0xffffffdf;\n      ptrVar1[3] = ptrVar1[3] & 0xfffffeff;\n      ptrVar1[5] = ptrVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var2 = get_global_variable_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var3 = get_global_variable_0800115c();\n        if (5 < (uint)(var3 - var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptrVar4 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptrVar4 = ptrVar4 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var2 = get_global_variable_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var3 = get_global_variable_0800115c();\n        if (5 < (uint)(var3 - var2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptrVar4;\n    }\n    ptrVar4 = (ushort *)((int)ptrVar4 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "check_and_process_input_08004c18",
                "param_1": "input",
                "piVar1": "ptrVar1",
                "iVar2": "var2",
                "iVar3": "var3",
                "puVar4": "ptrVar4"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_increment_value_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndIncrementValue_08004c30(int *inputArray)\n\n{\n  int tempVariable;\n  \n  if (*inputArray != 0x40013800) {\n    return inputArray;\n  }\n  increment_and_store_value_08003ec8(&DAT_20000364,DAT_20001634);\n  tempVariable = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVariable + 0x14) = *(uint *)(tempVariable + 0x14) | 1;\n    *(uint *)(tempVariable + 0xc) = *(uint *)(tempVariable + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_increment_value_08004c30",
                "param_1": "inputArray",
                "iVar1": "tempVariable"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_status_08004c70(void)\n\n{\n  int data_address;\n  \n  initialize_data_08004c64();\n  data_address = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(data_address + 0x14) = *(uint *)(data_address + 0x14) | 1;\n    *(uint *)(data_address + 0xc) = *(uint *)(data_address + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_status_08004c70",
                "iVar1": "data_address"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_string_08004c8c",
            "code": "\nvoid process_string_08004c8c(undefined *string_ptr)\n\n{\n  uint end_offset;\n  undefined *current_ptr;\n  \n  current_ptr = string_ptr;\n  while( true ) {\n    end_offset = find_end_of_string_08000150(string_ptr);\n    if (end_offset <= (uint)((int)current_ptr - (int)string_ptr)) break;\n    check_and_process_input_08004c18(*current_ptr);\n    current_ptr = current_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_string_08004c8c",
                "param_1": "string_ptr",
                "uVar1": "end_offset",
                "puVar2": "current_ptr"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_data_08004cac",
            "code": "\nvoid initializeAndProcessData_08004cac(undefined4 inputParam)\n\n{\n  initializeData(&DAT_20001636,&DAT_0800735e,inputParam);\n  processString(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_data_08004cac",
                "param_1": "inputParam",
                "initialize_data_08004ffc": "initializeData",
                "process_string_08004c8c": "processString"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_memory_08004ccc",
            "code": "\n\n\nvoid initializeMemory_08004ccc(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  setMemoryProtection(3,param2,_DAT_40021018,1,param1,1,param3);\n  updateMemoryData(0xfffffff4,0);\n  updateMemoryData(0xfffffff5,0);\n  updateMemoryData(0xfffffff6,0);\n  updateMemoryData(0xfffffffb,0);\n  updateMemoryData(0xfffffffc,0);\n  updateMemoryData(0xfffffffe,0);\n  updateMemoryData(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_memory_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "set_memory_protection_08001170": "setMemoryProtection",
                "update_memory_data_08001194": "updateMemoryData"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "apply_bit_mask_to_data_08004d48",
            "code": "\n\n\nvoid apply_bit_mask_to_data_08004d48(int *data_ptr,undefined4 data_size)\n\n{\n  undefined4 bit_mask_value1;\n  undefined4 bit_mask_value2;\n  \n  if (*data_ptr == 0x40005400) {\n    bit_mask_value1 = 0xc0;\n    bit_mask_value2 = 0x12;\n    apply_bit_mask_08001264(0x40010c00,&bit_mask_value1,0x40005400,3,data_ptr,data_size);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "apply_bit_mask_to_data_08004d48",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "local_18": "bit_mask_value1",
                "local_14": "bit_mask_value2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlags_08004d8c(int *flags)\n\n{\n  int flagValue;\n  \n  flagValue = *flags;\n  if (flagValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (flagValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (flagValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (flagValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_flags_08004d8c",
                "param_1": "flags",
                "iVar1": "flagValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "apply_bit_mask_08004e14",
            "code": "\nvoid applyBitMask_08004e14(int *input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 constant1;\n  int value;\n  undefined4 maskSize;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  value = *input;\n  if (value == 0x40012c00) {\n    maskSize = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        maskSize = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        maskSize = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    maskSize = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = param3;\n  apply_bit_mask_08001264(constant1,&maskSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "apply_bit_mask_08004e14",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "constant1",
                "iVar2": "value",
                "local_18": "maskSize",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_memory_data_08004e7c",
            "code": "\n\n\nvoid updateMemoryData_08004e7c(int *memoryData)\n\n{\n  undefined4 bitMask1;\n  undefined4 bitMask2;\n  undefined4 bitMask3;\n  undefined4 bitMask4;\n  \n  if (*memoryData == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    bitMask1 = 0x200;\n    bitMask2 = 2;\n    bitMask4 = 3;\n    apply_bit_mask_08001264(0x40010800,&bitMask1);\n    bitMask1 = 0x400;\n    bitMask2 = 0;\n    bitMask3 = 0;\n    apply_bit_mask_08001264(0x40010800,&bitMask1);\n    update_memory_data_08001194(0x25,0,0);\n    set_bit_in_memory_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_memory_data_08004e7c",
                "param_1": "memoryData",
                "local_18": "bitMask1",
                "local_14": "bitMask2",
                "local_10": "bitMask3",
                "local_c": "bitMask4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_flags_08004f10",
            "code": "\n\n\nvoid initializeFlags_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_flags_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_flags_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  run_peripheral_system_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initializeData_08004ffc(undefined *dataBuffer,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *bufferArray [2];\n  undefined4 maxValue1;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined *currentBuffer;\n  undefined4 maxValue2;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  constant1 = 0x208;\n  maxValue1 = 0x7fffffff;\n  maxValue2 = 0x7fffffff;\n  constant2 = 0xffff;\n  bufferArray[0] = dataBuffer;\n  currentBuffer = dataBuffer;\n  stackValue1 = size;\n  stackValue2 = value1;\n  stackValue3 = value2;\n  extract_and_process_data_080050fc(DAT_200001c0,bufferArray,size);\n  *bufferArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "dataBuffer",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_78": "bufferArray",
                "local_70": "maxValue1",
                "local_6c": "constant1",
                "local_6a": "constant2",
                "local_68": "currentBuffer",
                "local_64": "maxValue2",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_extend_array_08005044",
            "code": "\nundefined4 copy_and_extend_array_08005044(undefined4 *output_array,int *input_array,undefined4 value,uint size)\n\n{\n  int allocated_memory;\n  uint new_array_size;\n  uint input_array_size;\n  int offset;\n  \n  input_array_size = input_array[2];\n  if ((input_array_size <= size) && ((*(ushort *)(input_array + 3) & 0x480) != 0)) {\n    offset = *input_array - input_array[4];\n    input_array_size = (uint)(input_array[5] * 3) / 2;\n    new_array_size = size + 1 + offset;\n    if (input_array_size < new_array_size) {\n      input_array_size = new_array_size;\n    }\n    if ((int)((uint)*(ushort *)(input_array + 3) << 0x15) < 0) {\n      allocated_memory = allocate_memory_08005714(output_array,input_array_size);\n      if (allocated_memory == 0) {\nLAB_0800508a:\n        *output_array = 0xc;\n        *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_array_08005630(allocated_memory,input_array[4],offset);\n      *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocated_memory = allocate_and_copy_array_080057d0(output_array,input_array[4],input_array_size);\n      if (allocated_memory == 0) {\n        reverse_and_improve_0800567c(output_array,input_array[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input_array[4] = allocated_memory;\n    *input_array = allocated_memory + offset;\n    input_array[5] = input_array_size;\n    input_array[2] = input_array_size - offset;\n    input_array_size = size;\n  }\n  if (size <= input_array_size) {\n    input_array_size = size;\n  }\n  copy_and_shift_08005646(*input_array,value,input_array_size);\n  input_array[2] = input_array[2] - input_array_size;\n  *input_array = input_array_size + *input_array;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_extend_array_08005044",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "value",
                "param_4": "size",
                "iVar1": "allocated_memory",
                "uVar2": "new_array_size",
                "uVar3": "input_array_size",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "extract_and_process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint extract_and_process_data_080050fc(undefined4 *output_ptr,int *input_data,byte *format_string,int *tmp_ptr)\n\n{\n  int val_1;\n  int val_2;\n  int *ptr_val;\n  bool is_number;\n  byte *ptr_char;\n  byte *ptr_char_next;\n  int return_value;\n  int *tmp_ptr;\n  uint flag1;\n  int flag2;\n  undefined4 unused;\n  int num1;\n  int total_length;\n  byte current_char;\n  undefined const1;\n  undefined const2;\n  undefined error_flag;\n  undefined4 unused2;\n  \n  tmp_ptr = tmp_ptr;\n  if (((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0) && (input_data[4] == 0)) {\n    val_1 = allocate_memory_08005714(output_ptr,0x40);\n    *input_data = val_1;\n    input_data[4] = val_1;\n    if (val_1 == 0) {\n      *output_ptr = 0xc;\n      return -1;\n    }\n    input_data[5] = 0x40;\n  }\n  total_length = 0;\n  const1 = 0x20;\n  const2 = 0x30;\n  ptr_char = format_string;\nLAB_08005146:\n  ptr_char_next = ptr_char;\n  if (*ptr_char_next != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  ptr_char = ptr_char_next + 1;\n  if (*ptr_char_next != 0x25) goto LAB_08005146;\nLAB_08005150:\n  val_1 = (int)ptr_char_next - (int)format_string;\n  if (val_1 != 0) {\n    val_2 = copy_and_extend_array_08005044(output_ptr,input_data,format_string,val_1);\n    if (val_2 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input_data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + val_1;\n  }\n  if (*ptr_char_next == 0) goto LAB_080052ac;\n  flag1 = 0;\n  num1 = 0;\n  flag2 = -1;\n  unused = 0;\n  error_flag = 0;\n  unused2 = 0;\n  ptr_char = ptr_char_next + 1;\n  while( true ) {\n    val_1 = find_first_occurrence_08005614(&DAT_08007379,*ptr_char);\n    format_string = ptr_char + 1;\n    if (val_1 == 0) break;\n    flag1 = 1 << (val_1 + 0xf7ff8c87U & 0xff) | flag1;\n    ptr_char = format_string;\n  }\n  if ((int)(flag1 << 0x1b) < 0) {\n    error_flag = 0x20;\n  }\n  if ((int)(flag1 << 0x1c) < 0) {\n    error_flag = 0x2b;\n  }\n  if (*ptr_char == 0x2a) {\n    ptr_val = tmp_ptr + 1;\n    val_1 = *tmp_ptr;\n    tmp_ptr = ptr_val;\n    if (val_1 < 0) {\n      num1 = -val_1;\n      flag1 = flag1 | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_number = false;\n    val_1 = num1;\n    format_string = ptr_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      val_1 = val_1 * 10 + (*format_string - 0x30);\n      is_number = true;\n      format_string = format_string + 1;\n    }\n    if (!is_number) goto LAB_080051fc;\n  }\n  num1 = val_1;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      ptr_val = tmp_ptr + 1;\n      flag2 = *tmp_ptr;\n      tmp_ptr = ptr_val;\n      if (flag2 < 0) {\n        flag2 = -1;\n      }\n    }\n    else {\n      is_number = false;\n      val_1 = 0;\n      flag2 = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        val_1 = val_1 * 10 + (*format_string - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        flag2 = val_1;\n      }\n    }\n  }\n  val_1 = find_first_occurrence_08005614(&DAT_0800737f,*format_string,3);\n  if (val_1 != 0) {\n    format_string = format_string + 1;\n    flag1 = flag1 | 0x40 << (val_1 + 0xf7ff8c81U & 0xff);\n  }\n  current_char = *format_string;\n  format_string = format_string + 1;\n  val_1 = find_first_occurrence_08005614(\"efgEFG\",current_char,6);\n  if (val_1 == 0) {\n    return_value = decode_and_process_data_080053d4(output_ptr,&flag1,input_data,0x8005045,&tmp_ptr);\n    if (return_value == -1) goto LAB_080052ac;\n  }\n  else {\n    tmp_ptr = (int *)(((int)tmp_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + return_value;\n  ptr_char = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "extract_and_process_data_080050fc",
                "param_1": "output_ptr",
                "param_2": "input_data",
                "param_3": "format_string",
                "param_4": "tmp_ptr",
                "iVar1": "val_1",
                "iVar2": "val_2",
                "piVar3": "ptr_val",
                "bVar4": "is_number",
                "pbVar5": "ptr_char",
                "pbVar6": "ptr_char_next",
                "unaff_r9": "return_value",
                "local_8c": "tmp_ptr",
                "local_88": "flag1",
                "local_84": "flag2",
                "local_80": "unused",
                "local_7c": "num1",
                "local_74": "total_length",
                "local_70": "current_char",
                "local_6f": "const1",
                "local_6e": "const2",
                "local_45": "error_flag",
                "local_30": "unused2"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 input,uint *dataArray,uint *outputLength,undefined4 param4,code *callback)\n\n{\n  int index1;\n  int index2;\n  uint maxValue;\n  uint updatedValue;\n  bool condition;\n  \n  maxValue = dataArray[4];\n  if ((int)dataArray[4] < (int)dataArray[2]) {\n    maxValue = dataArray[2];\n  }\n  *outputLength = maxValue;\n  if (*(char *)((int)dataArray + 0x43) != '\\0') {\n    *outputLength = maxValue + 1;\n  }\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *outputLength = *outputLength + 2;\n  }\n  if ((*dataArray & 6) == 0) {\n    for (index1 = 0; index1 < (int)(dataArray[3] - *outputLength); index1 = index1 + 1) {\n      index2 = (*callback)(input,param4,(int)dataArray + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)dataArray + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  updatedValue = maxValue;\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *(undefined *)((int)dataArray + maxValue + 0x43) = 0x30;\n    updatedValue = maxValue + 2;\n    *(undefined *)((int)dataArray + maxValue + 0x44) = *(undefined *)((int)dataArray + 0x45);\n  }\n  index1 = (*callback)(input,param4,(int)dataArray + 0x43,updatedValue);\n  if (index1 != -1) {\n    maxValue = dataArray[3];\n    condition = (*dataArray & 6) != 4;\n    if (condition) {\n      maxValue = 0;\n    }\n    updatedValue = 0;\n    if (!condition) {\n      maxValue = maxValue - *outputLength;\n    }\n    if (!condition) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)dataArray[4] < (int)dataArray[2]) {\n      maxValue = maxValue + (dataArray[2] - dataArray[4]);\n    }\n    while( true ) {\n      if (maxValue == updatedValue) {\n        return 0;\n      }\n      index1 = (*callback)(input,param4,(int)dataArray + 0x1a,1);\n      if (index1 == -1) break;\n      updatedValue = updatedValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input",
                "param_2": "dataArray",
                "param_3": "outputLength",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxValue",
                "uVar4": "updatedValue",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "decode_and_process_data_080053d4",
            "code": "\nuint decode_and_process_data_080053d4(undefined4 input_param,uint *data_ptr,undefined4 param_3,code *callback_func,uint **output_param_ptr)\n\n{\n  byte byte_val;\n  int result;\n  uint *ptr;\n  int loop_counter;\n  char *hex_chars;\n  uint num_base;\n  uint **ptr_ptr_array;\n  char **str_ptr_ptr;\n  uint temp_val;\n  uint temp_val2;\n  char *str_ptr;\n  char *str_ptr2;\n  uint temp_array [2];\n  \n  byte_val = *(byte *)(data_ptr + 6);\n  str_ptr2 = (char *)((int)data_ptr + 0x43);\n  if (byte_val != 0x6e) {\n    if (byte_val < 0x6f) {\n      if (byte_val != 99) {\n        if (byte_val < 100) {\n          if (byte_val == 0) goto LAB_0800558e;\n          if (byte_val != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data_ptr + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_0800551e:\n          num_base = *data_ptr;\n          ptr = *output_param_ptr;\n          *output_param_ptr = ptr + 1;\n          if (((num_base & 0x80) == 0) && ((int)(num_base << 0x19) < 0)) {\n            temp_val = (uint)*(ushort *)ptr;\n          }\n          else {\n            temp_val = *ptr;\n          }\n          if ((int)(num_base << 0x1f) < 0) {\n            *data_ptr = num_base | 0x20;\n          }\n          if (temp_val == 0) {\n            *data_ptr = *data_ptr & 0xffffffdf;\n          }\n          num_base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data_ptr + 0x43) = 0;\n        }\n        else {\n          if ((byte_val != 100) && (byte_val != 0x69)) goto LAB_08005404;\n          temp_val = *data_ptr;\n          ptr = *output_param_ptr;\n          if ((temp_val & 0x80) == 0) {\n            *output_param_ptr = ptr + 1;\n            if ((temp_val & 0x40) == 0) goto LAB_08005424;\n            temp_val = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_param_ptr = ptr + 1;\nLAB_08005424:\n            temp_val = *ptr;\n          }\n          if ((int)temp_val < 0) {\n            temp_val = -temp_val;\n            *(undefined *)((int)data_ptr + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          num_base = 10;\n        }\n        temp_val2 = data_ptr[1];\n        data_ptr[2] = temp_val2;\n        str_ptr = str_ptr2;\n        if ((int)temp_val2 < 0) {\n          if (temp_val != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data_ptr + 0x42) = *hex_chars;\n          str_ptr = (char *)((int)data_ptr + 0x42);\n        }\n        else {\n          *data_ptr = *data_ptr & 0xfffffffb;\n          if (temp_val == 0) {\n            if (temp_val2 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              temp_val2 = temp_val / num_base;\n              str_ptr = str_ptr + -1;\n              *str_ptr = hex_chars[temp_val - num_base * temp_val2];\n              temp_val = temp_val2;\n            } while (temp_val2 != 0);\n          }\n        }\n        if (((num_base == 8) && ((int)(*data_ptr << 0x1f) < 0)) && ((int)data_ptr[1] <= (int)data_ptr[4]))\n        {\n          str_ptr[-1] = '0';\n          str_ptr = str_ptr + -1;\n        }\n        data_ptr[4] = (int)str_ptr2 - (int)str_ptr;\n        str_ptr2 = str_ptr;\n        goto LAB_080054fa;\n      }\n      ptr = *output_param_ptr;\n      *output_param_ptr = ptr + 1;\n      *(char *)((int)data_ptr + 0x42) = (char)*ptr;\nLAB_08005464:\n      str_ptr2 = (char *)((int)data_ptr + 0x42);\n      temp_val = 1;\n    }\n    else {\n      if (byte_val != 0x73) {\n        if (byte_val < 0x74) {\n          if (byte_val == 0x6f) {\nLAB_0800548a:\n            temp_val = *data_ptr;\n            ptr = *output_param_ptr;\n            if ((temp_val & 0x80) == 0) {\n              *output_param_ptr = ptr + 1;\n              if ((temp_val & 0x40) == 0) goto LAB_08005498;\n              temp_val = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_param_ptr = ptr + 1;\nLAB_08005498:\n              temp_val = *ptr;\n            }\n            if (byte_val == 0x6f) {\n              num_base = 8;\n            }\n            else {\n              num_base = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byte_val == 0x70) {\n            *data_ptr = *data_ptr | 0x20;\nLAB_0800544a:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)data_ptr + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_val == 0x75) goto LAB_0800548a;\n          if (byte_val == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data_ptr + 0x42) = byte_val;\n        goto LAB_08005464;\n      }\n      str_ptr_ptr = (char **)*output_param_ptr;\n      *output_param_ptr = (uint *)(str_ptr_ptr + 1);\n      str_ptr2 = *str_ptr_ptr;\n      result = find_first_occurrence_08005614(str_ptr2,0,data_ptr[1]);\n      if (result != 0) {\n        data_ptr[1] = result - (int)str_ptr2;\n      }\n      temp_val = data_ptr[1];\n    }\n    data_ptr[4] = temp_val;\n    *(undefined *)((int)data_ptr + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  temp_val = *data_ptr;\n  ptr_ptr_array = (uint **)*output_param_ptr;\n  num_base = data_ptr[5];\n  if ((temp_val & 0x80) == 0) {\n    *output_param_ptr = (uint *)(ptr_ptr_array + 1);\n    ptr = *ptr_ptr_array;\n    if ((temp_val & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)num_base;\n  }\n  else {\n    *output_param_ptr = (uint *)(ptr_ptr_array + 1);\n    ptr = *ptr_ptr_array;\nLAB_0800557a:\n    *ptr = num_base;\n  }\nLAB_0800558e:\n  data_ptr[4] = 0;\nLAB_080054fa:\n  result = process_data_080052e4(input_param,data_ptr,temp_array,param_3,callback_func);\n  if ((result == -1) || (result = (*callback_func)(input_param,param_3,str_ptr2,data_ptr[4]), result == -1)) {\nLAB_0800550e:\n    temp_val = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      for (result = 0; result < (int)(data_ptr[3] - temp_array[0]); result = result + 1) {\n        loop_counter = (*callback_func)(input_param,param_3,(int)data_ptr + 0x19,1);\n        if (loop_counter == -1) goto LAB_0800550e;\n      }\n    }\n    temp_val = data_ptr[3];\n    if ((int)data_ptr[3] < (int)temp_array[0]) {\n      temp_val = temp_array[0];\n    }\n  }\n  return temp_val;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "decode_and_process_data_080053d4",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "param_4": "callback_func",
                "param_5": "output_param_ptr",
                "bVar1": "byte_val",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "loop_counter",
                "pcVar5": "hex_chars",
                "uVar6": "num_base",
                "uVar9": "temp_val",
                "uVar10": "temp_val2",
                "pcVar11": "str_ptr",
                "pcVar12": "str_ptr2",
                "local_24": "temp_array",
                "ppuVar7": "ptr_ptr_array",
                "ppcVar8": "str_ptr_ptr"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_first_occurrence_08005614",
            "code": "\nchar * findFirstOccurrence_08005614(char *string,char character,int length)\n\n{\n  char *currentChar;\n  char *nextChar;\n  \n  currentChar = string;\n  do {\n    nextChar = currentChar;\n    if (nextChar == string + length) {\n      return (char *)0x0;\n    }\n    currentChar = nextChar + 1;\n  } while (*nextChar != character);\n  return nextChar;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_first_occurrence_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "currentChar",
                "pcVar2": "nextChar"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_array_08005630",
            "code": "\nvoid copyArray_08005630(int arrayStartIndex,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *destinationArrayEnd;\n  undefined *arrayDestination;\n  \n  arrayDestination = (undefined *)(arrayStartIndex + -1);\n  destinationArrayEnd = sourceArray + arrayLength;\n  for (; sourceArray != destinationArrayEnd; sourceArray = sourceArray + 1) {\n    arrayDestination = arrayDestination + 1;\n    *arrayDestination = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_array_08005630",
                "param_1": "arrayStartIndex",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "destinationArrayEnd",
                "puVar2": "arrayDestination"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_08005646",
            "code": "\nvoid copy_and_shift_08005646(undefined *source,undefined *destination,int length)\n\n{\n  undefined *end;\n  \n  end = destination + length;\n  if ((destination < source) && (source < end)) {\n    source = source + length;\n    length = length - (int)end;\n    while (end + length != (undefined *)0x0) {\n      end = end + -1;\n      source = source + -1;\n      *source = *end;\n    }\n    return;\n  }\n  source = source + -1;\n  for (; destination != end; destination = destination + 1) {\n    source = source + 1;\n    *source = *destination;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_08005646",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "end"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "reverse_and_improve_0800567c",
            "code": "\nvoid reverse_and_improve_0800567c(undefined4 *result,int num_values,undefined4 param_3,undefined4 param_4)\n\n{\n  int **next_value;\n  int **current_value;\n  int **next_ptr;\n  int *temp_ptr;\n  int **previous_ptr;\n  int **current_ptr;\n  \n  if (num_values == 0) {\n    return;\n  }\n  current_ptr = (int **)(num_values + -4);\n  if (*(int *)(num_values + -4) < 0) {\n    current_ptr = (int **)((int)current_ptr + *(int *)(num_values + -4));\n  }\n  FUNC_0800583c();\n  next_ptr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    current_ptr[1] = (int *)0x0;\n    current_value = next_value;\n    DAT_200002ac = current_ptr;\n  }\n  else {\n    next_ptr = DAT_200002ac;\n    if (current_ptr < DAT_200002ac) {\n      current_value = (int **)*current_ptr;\n      next_ptr = (int **)((int)current_ptr + (int)current_value);\n      if (DAT_200002ac == next_ptr) {\n        temp_ptr = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        next_ptr = (int **)((int)temp_ptr + (int)current_value);\n        *current_ptr = (int *)next_ptr;\n      }\n      current_ptr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = current_ptr;\n    }\n    else {\n      do {\n        previous_ptr = next_ptr;\n        next_ptr = (int **)previous_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= current_ptr);\n      current_value = (int **)*previous_ptr;\n      if ((int **)((int)previous_ptr + (int)current_value) == current_ptr) {\n        current_value = (int **)((int)current_value + (int)*current_ptr);\n        *previous_ptr = (int *)current_value;\n        if (next_ptr == (int **)((int)previous_ptr + (int)current_value)) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_value = (int **)((int)current_value + (int)temp_ptr);\n          *previous_ptr = (int *)current_value;\n          previous_ptr[1] = (int *)next_ptr;\n        }\n      }\n      else if (current_ptr < (int **)((int)previous_ptr + (int)current_value)) {\n        *result = 0xc;\n      }\n      else {\n        current_value = (int **)((int)current_ptr + (int)*current_ptr);\n        if (next_ptr == current_value) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_value = (int **)((int)temp_ptr + (int)*current_ptr);\n          *current_ptr = (int *)current_value;\n        }\n        current_ptr[1] = (int *)next_ptr;\n        previous_ptr[1] = (int *)current_ptr;\n      }\n    }\n  }\n  FUNC_0800583e(result,current_value,next_ptr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "reverse_and_improve_0800567c",
                "param_1": "result",
                "param_2": "num_values",
                "extraout_r1": "next_value",
                "ppiVar1": "current_value",
                "ppiVar2": "next_ptr",
                "piVar3": "temp_ptr",
                "ppiVar4": "previous_ptr",
                "ppiVar5": "current_ptr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *output_pointer,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint block_difference;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *output_pointer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    last_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = allocated_size;\n          last_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_08005778;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_and_check_data_0800581c(output_pointer);\n    }\n    current_block = (uint *)update_and_check_data_0800581c(output_pointer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_space = update_and_check_data_0800581c(output_pointer,(int)last_block - (int)current_block), remaining_space != -1)))) {\n      *last_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_pointer);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(last_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)last_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_pointer = 0xc;\n    FUNC_0800583e(output_pointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "output_pointer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "last_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_copy_array_080057d0",
            "code": "\nint allocateAndCopyArray_080057d0(undefined4 inputPointer,int arrayPointer,uint arraySize,undefined4 param4)\n\n{\n  int result;\n  uint sum;\n  \n  if (arrayPointer != 0) {\n    if (arraySize == 0) {\n      reverse_and_improve_0800567c();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_08005840();\n      result = arrayPointer;\n      if ((sum < arraySize) && (result = allocate_memory_08005714(inputPointer,arraySize), result != 0)) {\n        copy_array_08005630(result,arrayPointer,arraySize);\n        reverse_and_improve_0800567c(inputPointer,arrayPointer);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_08005714(inputPointer,arraySize,arraySize,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_copy_array_080057d0",
                "param_1": "inputPointer",
                "param_2": "arrayPointer",
                "param_3": "arraySize",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_and_check_data_0800581c",
            "code": "\nvoid updateAndCheckData_0800581c(int *result,undefined4 inputData)\n\n{\n  int updateResult;\n  \n  DAT_2000169c = 0;\n  updateResult = update_data_080072b8(inputData);\n  if ((updateResult == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_and_check_data_0800581c",
                "param_1": "result",
                "param_2": "inputData",
                "iVar1": "updateResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 unknown,int startAddress)\n\n{\n  int sum;\n  \n  sum = *(int *)(startAddress + -4) + -4;\n  if (*(int *)(startAddress + -4) < 0) {\n    sum = sum + *(int *)(startAddress + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "unknown",
                "param_2": "startAddress",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "validate_and_calculate_result_08005854",
            "code": "\nundefined8 validate_and_calculate_result_08005854(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int *data_ptr_2;\n  undefined8 float_value;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *string_ptr;\n  undefined4 temp_param_1;\n  undefined4 temp_param_2;\n  undefined4 temp_param_3;\n  undefined4 temp_param_4;\n  undefined8 infinity_value;\n  int param_check_result;\n  \n  float_value = calculate_float_value_08005c70();\n  if (DAT_20000224 == -1) {\n    return float_value;\n  }\n  param_check_result = check_parameters_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (param_check_result != 0) {\n    return float_value;\n  }\n  func_result = FUNC_0800708c(input_param_1,input_param_2);\n  result = check_if_null_terminated_080009f0((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return float_value;\n  }\n  flag = 1;\n  string_ptr = &DAT_080073ac;\n  temp_param_1 = input_param_1;\n  temp_param_2 = input_param_2;\n  temp_param_3 = input_param_1;\n  temp_param_4 = input_param_2;\n  infinity_value = get_positive_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  data_ptr = (undefined4 *)get_data_080072ac();\n  *data_ptr = 0x21;\nLAB_080058d0:\n  if (param_check_result != 0) {\n    data_ptr_2 = (int *)get_data_080072ac();\n    *data_ptr_2 = param_check_result;\n  }\n  return infinity_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "validate_and_calculate_result_08005854",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "piVar3": "data_ptr_2",
                "uVar4": "float_value",
                "uVar5": "func_result",
                "local_48": "flag",
                "local_44": "string_ptr",
                "local_40": "temp_param_1",
                "uStack_3c": "temp_param_2",
                "local_38": "temp_param_3",
                "uStack_34": "temp_param_4",
                "local_30": "infinity_value",
                "local_28": "param_check_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_thunk_08006070",
            "code": "\nundefined8 calculate_thunk_08006070(uint operand1,uint operand2,uint operand3,uint operand4)\n\n{\n  undefined4 result1;\n  uint flag1;\n  uint result2;\n  int difference;\n  uint positive_operand4;\n  undefined8 result;\n  undefined8 arithmetic_result;\n  \n  positive_operand4 = operand4 & 0x7fffffff;\n  if ((0x7ff00000 < (positive_operand4 | (-operand3 | operand3) >> 0x1f)) ||\n     (result2 = operand2 & 0x7fffffff, 0x7ff00000 < (result2 | (-operand1 | operand1) >> 0x1f))) {\n    result = calculate_thunk_08006070_0800016c(operand1,operand2,operand3,operand4,operand4);\n    return result;\n  }\n  if ((operand4 + 0xc0100000 | operand3) == 0) {\n    result = calculate_thunk_08006070_result_08006d68();\n    return result;\n  }\n  flag1 = (int)operand4 >> 0x1e & 2U | operand2 >> 0x1f;\n  if ((operand1 | result2) == 0) {\n    if (flag1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag1 != 3) {\n      return CONCAT44(operand2,operand1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((operand3 | positive_operand4) != 0) {\n      if (positive_operand4 == 0x7ff00000) {\n        if (result2 == 0x7ff00000) {\n          if (flag1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag1 != 3) {\n          if (flag1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result2 != 0x7ff00000) {\n        difference = (int)(result2 - positive_operand4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)operand4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_thunk_08006070_floating_point_08000724(operand1,operand2);\n            FUNC_0800708c();\n            result = calculate_thunk_08006070_result_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (flag1 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (flag1 == 2) {\n          arithmetic_result = perform_arithmetic_operation_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (flag1 == 0) {\n            return result;\n          }\n          result = perform_arithmetic_operation_08000168(result1,difference,0x33145c07,0x3ca1a626);\n          arithmetic_result = 0x400921fb54442d18;\n        }\n        result = perform_arithmetic_operation_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)arithmetic_result,\n                             (int)((ulonglong)arithmetic_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)operand2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_thunk_08006070",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "operand3",
                "param_4": "operand4",
                "uVar1": "result1",
                "uVar2": "flag1",
                "uVar3": "result2",
                "iVar4": "difference",
                "uVar5": "positive_operand4",
                "uVar6": "result",
                "uVar7": "arithmetic_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "verify_and_calculate_result_08005900",
            "code": "\nundefined8 verify_and_calculate_result_08005900(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  char flag_value;\n  int result_value;\n  int *data_ptr;\n  undefined4 *data_ptr2;\n  int shift_result;\n  undefined4 upper_half;\n  undefined4 lower_half;\n  undefined8 float_calc_result;\n  undefined8 result_calc_result;\n  undefined4 verification_status;\n  undefined *string_ptr;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined8 result;\n  int verification_result;\n  \n  float_calc_result = calculate_floating_point_08006228();\n  flag_value = DAT_20000224;\n  upper_half = (undefined4)((ulonglong)float_calc_result >> 0x20);\n  lower_half = (undefined4)float_calc_result;\n  if (DAT_20000224 == -1) {\n    return float_calc_result;\n  }\n  result_value = check_parameters_08000a04(input_param_3,input_param_4,input_param_3,input_param_4);\n  if (result_value != 0) {\n    return float_calc_result;\n  }\n  result_value = check_parameters_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  local_param_1 = input_param_1;\n  local_param_2 = input_param_2;\n  local_param_3 = input_param_3;\n  local_param_4 = input_param_4;\n  if (result_value == 0) {\n    result_value = is_parameter_verified_080009a0(input_param_1,input_param_2,0,0);\n    if (result_value != 0) {\n      result_value = is_parameter_verified_080009a0(input_param_3,input_param_4,0,0);\n      if (result_value != 0) {\n        verification_status = 1;\n        string_ptr = &DAT_080073b1;\n        result = 0;\n        verification_result = 0;\n        if (flag_value != '\\0') {\n          result = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result_value = sign_bit_shift_08007092(input_param_3,input_param_4);\n      if (result_value == 0) {\n        return float_calc_result;\n      }\n      result_value = check_if_input_is_empty_080009b4(input_param_3,input_param_4,0,0);\n      if (result_value == 0) {\n        return float_calc_result;\n      }\n      verification_status = 1;\n      string_ptr = &DAT_080073b1;\n      verification_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      result = 0xfff0000000000000;\n      verification_result = 0;\n      flag_value = DAT_20000224;\nLAB_08005a32:\n      if (flag_value != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result_value = sign_bit_shift_08007092(lower_half,upper_half);\n    if (((result_value != 0) || (shift_result = sign_bit_shift_08007092(input_param_1,input_param_2), shift_result == 0)) ||\n       (shift_result = sign_bit_shift_08007092(input_param_3,input_param_4), shift_result == 0)) {\n      result_value = is_parameter_verified_080009a0(lower_half,upper_half,0,0);\n      if (result_value == 0) {\n        return float_calc_result;\n      }\n      result_value = sign_bit_shift_08007092(input_param_1,input_param_2);\n      if (result_value == 0) {\n        return float_calc_result;\n      }\n      result_value = sign_bit_shift_08007092(input_param_3,input_param_4);\n      if (result_value == 0) {\n        return float_calc_result;\n      }\n      verification_status = 4;\n      string_ptr = &DAT_080073b1;\n      verification_result = 0;\n      result._0_4_ = 0;\n      result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    verification_result = check_parameters_08000a04(lower_half,upper_half);\n    flag_value = DAT_20000224;\n    if (verification_result != 0) {\n      string_ptr = &DAT_080073b1;\n      verification_status = 1;\n      verification_result = result_value;\n      if (DAT_20000224 != '\\0') {\n        result = calculate_floating_point_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      string_ptr = &DAT_080073b1;\n      verification_status = 1;\n      result = 0;\n      goto LAB_08005978;\n    }\n    string_ptr = &DAT_080073b1;\n    verification_status = 3;\n    if (DAT_20000224 == '\\0') {\n      result._0_4_ = 0xe0000000;\n      result._4_4_ = 0x47efffff;\n      result_value = check_if_input_is_empty_080009b4(input_param_1,input_param_2,0,0);\n      if (result_value != 0) {\n        float_calc_result = calculate_shift_080004d0(input_param_3,input_param_4,0,0x3fe00000);\n        result_calc_result = calculate_result_080070b0();\n        result_value = is_parameter_verified_080009a0((int)float_calc_result,(int)((ulonglong)float_calc_result >> 0x20),(int)result_calc_result,\n                             (int)((ulonglong)result_calc_result >> 0x20));\n        if (result_value == 0) {\n          result._0_4_ = 0xe0000000;\n          result._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result_value = initialize_0800709e(&verification_status);\n      if (result_value != 0) goto LAB_080059d0;\n    }\n    else {\n      result._0_4_ = 0;\n      result._4_4_ = 0x7ff00000;\n      result_value = check_if_input_is_empty_080009b4(input_param_1,input_param_2,0,0);\n      if (result_value != 0) {\n        float_calc_result = calculate_shift_080004d0(input_param_3,input_param_4,0,0x3fe00000);\n        result_calc_result = calculate_result_080070b0();\n        result_value = is_parameter_verified_080009a0((int)float_calc_result,(int)((ulonglong)float_calc_result >> 0x20),(int)result_calc_result,\n                             (int)((ulonglong)result_calc_result >> 0x20));\n        if (result_value == 0) {\n          result._0_4_ = 0;\n          result._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    data_ptr2 = (undefined4 *)get_data_080072ac();\n    lower_half = 0x22;\n  }\n  else {\n    result_value = is_parameter_verified_080009a0(input_param_3,input_param_4,0,0);\n    if (result_value == 0) {\n      return float_calc_result;\n    }\n    verification_status = 1;\n    string_ptr = &DAT_080073b1;\n    result = 0x3ff0000000000000;\n    verification_result = 0;\n    if (flag_value == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result_value = initialize_0800709e(&verification_status);\n    if (result_value != 0) goto LAB_080059d0;\nLAB_08005a34:\n    data_ptr2 = (undefined4 *)get_data_080072ac();\n    lower_half = 0x21;\n  }\n  *data_ptr2 = lower_half;\nLAB_080059d0:\n  if (verification_result != 0) {\n    data_ptr = (int *)get_data_080072ac();\n    *data_ptr = verification_result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005900": "verify_and_calculate_result_08005900",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "cVar1": "flag_value",
                "iVar2": "result_value",
                "piVar3": "data_ptr",
                "puVar4": "data_ptr2",
                "iVar5": "shift_result",
                "uVar6": "upper_half",
                "uVar7": "lower_half",
                "uVar8": "float_calc_result",
                "uVar9": "result_calc_result",
                "local_50": "verification_status",
                "local_4c": "string_ptr",
                "local_48": "local_param_1",
                "uStack_44": "local_param_2",
                "local_40": "local_param_3",
                "uStack_3c": "local_param_4",
                "local_38": "result",
                "local_30": "verification_result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "process_input_08005bc8",
            "code": "\nundefined8 processInput_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char dataFlag;\n  int checkResult;\n  int *dataPointer;\n  undefined4 *dataPointer2;\n  undefined8 shiftValue;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input1_copy1;\n  undefined4 input2_copy1;\n  undefined8 result;\n  int param_check;\n  \n  shiftValue = calculate_floating_point_shift_08006c0c();\n  dataFlag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return shiftValue;\n  }\n  param_check = check_parameters_08000a04(input1,input2,input1,input2);\n  if (param_check != 0) {\n    return shiftValue;\n  }\n  checkResult = check_if_input_is_empty_080009b4(input1,input2,0,0);\n  if (checkResult == 0) {\n    return shiftValue;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  input1_copy = input1;\n  input2_copy = input2;\n  input1_copy1 = input1;\n  input2_copy1 = input2;\n  if (dataFlag == '\\0') {\n    result = 0;\nLAB_08005c26:\n    checkResult = initialize_0800709e(&flag);\n    if (checkResult != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = calculate_floating_point_08000724(0,0,0,0);\n    if (dataFlag != '\\x02') goto LAB_08005c26;\n  }\n  dataPointer2 = (undefined4 *)get_data_080072ac();\n  *dataPointer2 = 0x21;\nLAB_08005c2e:\n  if (param_check != 0) {\n    dataPointer = (int *)get_data_080072ac();\n    *dataPointer = param_check;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "process_input_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "dataFlag",
                "iVar2": "checkResult",
                "piVar3": "dataPointer",
                "puVar4": "dataPointer2",
                "uVar5": "shiftValue",
                "local_50": "flag",
                "local_4c": "message",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "input1_copy1",
                "uStack_3c": "input2_copy1",
                "local_38": "result",
                "local_30": "param_check"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_float_value_08005c70",
            "code": "\nundefined8 calculate_float_value_08005c70(uint value1,uint value2)\n\n{\n  int checkResult;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint uValue;\n  undefined8 finalResult1;\n  undefined8 finalResult2;\n  undefined8 finalResult3;\n  \n  finalResult1 = CONCAT44(value2,value1);\n  uValue = value2 & 0x7fffffff;\n  if (uValue < 0x3ff00000) {\n    if (uValue < 0x3fe00000) {\n      if (0x3e3fffff < uValue) {\n        finalResult2 = calculate_shift_080004d0(value1,value2,value1,value2);\n        result7 = (undefined4)((ulonglong)finalResult2 >> 0x20);\n        result6 = (undefined4)finalResult2;\n        finalResult2 = calculate_shift_080004d0(result6,result7,0xdfdf709,0x3f023de1);\n        finalResult2 = calculate_0800016c((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x7501b288,0x3f49efe0);\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result7);\n        finalResult2 = perform_arithmetic_operation_08000168((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0xb5688f3b,0x3fa48228);\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result7);\n        finalResult2 = calculate_0800016c((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0xe884455,0x3fc9c155);\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result7);\n        finalResult2 = perform_arithmetic_operation_08000168((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result7);\n        finalResult2 = calculate_0800016c((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x55555555,0x3fc55555);\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result7);\n        finalResult3 = calculate_shift_080004d0(result6,result7,0xb12e9282,0x3fb3b8c5);\n        finalResult3 = perform_arithmetic_operation_08000168((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        finalResult3 = calculate_shift_080004d0((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),result6,result7);\n        finalResult3 = calculate_0800016c((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),0x9c598ac8,0x40002ae5);\n        finalResult3 = calculate_shift_080004d0((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),result6,result7);\n        finalResult3 = perform_arithmetic_operation_08000168((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        finalResult3 = calculate_shift_080004d0((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),result6,result7);\n        finalResult3 = calculate_0800016c((int)finalResult3,(int)((ulonglong)finalResult3 >> 0x20),0,0x3ff00000);\n        finalResult2 = calculate_floating_point_08000724((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),(int)finalResult3,\n                              (int)((ulonglong)finalResult3 >> 0x20));\n        finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),value1,value2);\n        goto LAB_08005cba;\n      }\n      finalResult2 = calculate_0800016c(value1,value2,0x8800759c,0x7e37e43c);\n      checkResult = check_if_null_terminated_080009f0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0,0x3ff00000);\n      if (checkResult != 0) {\n        return finalResult1;\n      }\n    }\n    finalResult1 = FUNC_0800708c(value1,value2);\n    finalResult1 = perform_arithmetic_operation_08000168(0,0x3ff00000,(int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20));\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0,0x3fe00000);\n    result2 = (undefined4)((ulonglong)finalResult1 >> 0x20);\n    result6 = (undefined4)finalResult1;\n    finalResult1 = calculate_shift_080004d0(result6,result2,0xdfdf709,0x3f023de1);\n    finalResult1 = calculate_0800016c((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0x7501b288,0x3f49efe0);\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result6,result2);\n    finalResult1 = perform_arithmetic_operation_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0xb5688f3b,0x3fa48228);\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result6,result2);\n    finalResult1 = calculate_0800016c((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0xe884455,0x3fc9c155);\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result6,result2);\n    finalResult1 = perform_arithmetic_operation_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result6,result2);\n    finalResult1 = calculate_0800016c((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0x55555555,0x3fc55555);\n    finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result6,result2);\n    result3 = (undefined4)((ulonglong)finalResult1 >> 0x20);\n    finalResult2 = calculate_shift_080004d0(result6,result2,0xb12e9282,0x3fb3b8c5);\n    finalResult2 = perform_arithmetic_operation_08000168((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result2);\n    finalResult2 = calculate_0800016c((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x9c598ac8,0x40002ae5);\n    finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result2);\n    finalResult2 = perform_arithmetic_operation_08000168((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    finalResult2 = calculate_shift_080004d0((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),result6,result2);\n    finalResult2 = calculate_0800016c((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),0,0x3ff00000);\n    result4 = (undefined4)((ulonglong)finalResult2 >> 0x20);\n    finalResult3 = calculate_floating_point_shift_08006c0c(result6,result2);\n    result5 = (undefined4)((ulonglong)finalResult3 >> 0x20);\n    result7 = (undefined4)finalResult3;\n    if (uValue < 0x3fef3333) {\n      finalResult1 = calculate_floating_point_08000724((int)finalResult1,result3,(int)finalResult2,result4);\n      finalResult2 = calculate_0800016c(result7,result5,result7,result5);\n      finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                           (int)((ulonglong)finalResult2 >> 0x20));\n      finalResult2 = calculate_shift_080004d0(0,result5,0,result5);\n      finalResult2 = perform_arithmetic_operation_08000168(result6,result2,(int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20));\n      finalResult3 = calculate_0800016c(result7,result5,0,result5);\n      finalResult2 = calculate_floating_point_08000724((int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20),(int)finalResult3,\n                            (int)((ulonglong)finalResult3 >> 0x20));\n      result6 = (undefined4)((ulonglong)finalResult2 >> 0x20);\n      finalResult2 = calculate_0800016c((int)finalResult2,result6,(int)finalResult2,result6);\n      finalResult2 = perform_arithmetic_operation_08000168(0x33145c07,0x3c91a626,(int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20));\n      finalResult1 = perform_arithmetic_operation_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                           (int)((ulonglong)finalResult2 >> 0x20));\n      finalResult2 = calculate_0800016c(0,result5,0,result5);\n      finalResult2 = perform_arithmetic_operation_08000168(0x54442d18,0x3fe921fb,(int)finalResult2,(int)((ulonglong)finalResult2 >> 0x20));\n      finalResult1 = perform_arithmetic_operation_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                           (int)((ulonglong)finalResult2 >> 0x20));\n      result6 = 0x3fe921fb;\n    }\n    else {\n      finalResult1 = calculate_floating_point_08000724((int)finalResult1,result3,(int)finalResult2,result4);\n      finalResult1 = calculate_shift_080004d0((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result7,result5);\n      finalResult1 = calculate_0800016c((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),result7,result5);\n      result6 = (undefined4)((ulonglong)finalResult1 >> 0x20);\n      finalResult1 = calculate_0800016c((int)finalResult1,result6,(int)finalResult1,result6);\n      finalResult1 = perform_arithmetic_operation_08000168((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),0x33145c07,0x3c91a626);\n      result6 = 0x3ff921fb;\n    }\n    finalResult1 = perform_arithmetic_operation_08000168(0x54442d18,result6,(int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20));\n    if ((int)value2 < 1) {\n      finalResult1 = CONCAT44((int)((ulonglong)finalResult1 >> 0x20) + -0x80000000,(int)finalResult1);\n    }\n  }\n  else {\n    if ((uValue + 0xc0100000 | value1) != 0) {\n      finalResult1 = perform_arithmetic_operation_08000168(value1,value2,value1,value2);\n      result6 = (undefined4)((ulonglong)finalResult1 >> 0x20);\n      finalResult1 = calculate_floating_point_08000724((int)finalResult1,result6,(int)finalResult1,result6);\n      return finalResult1;\n    }\n    finalResult1 = calculate_shift_080004d0(value1,value2,0x54442d18,0x3ff921fb);\n    finalResult2 = calculate_shift_080004d0(value1,value2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    finalResult1 = calculate_0800016c((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                         (int)((ulonglong)finalResult2 >> 0x20));\n  }\n  return finalResult1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_float_value_08005c70",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "uVar8": "uValue",
                "uVar9": "finalResult1",
                "uVar10": "finalResult2",
                "uVar11": "finalResult3",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_float_result_08006070",
            "code": "\nundefined8 calculate_float_result_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_part1;\n  uint shifted_bits;\n  uint shifted_bits_2;\n  int difference;\n  uint masked_input_4;\n  undefined8 result;\n  undefined8 arithmetic_result;\n  \n  masked_input_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (masked_input_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (shifted_bits_2 = input_2 & 0x7fffffff, 0x7ff00000 < (shifted_bits_2 | (-input_1 | input_1) >> 0x1f))) {\n    result = calculate_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result = calculate_result_08006d68();\n    return result;\n  }\n  shifted_bits = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | shifted_bits_2) == 0) {\n    if (shifted_bits == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (shifted_bits != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | masked_input_4) != 0) {\n      if (masked_input_4 == 0x7ff00000) {\n        if (shifted_bits_2 == 0x7ff00000) {\n          if (shifted_bits == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (shifted_bits == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (shifted_bits != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (shifted_bits == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (shifted_bits != 3) {\n          if (shifted_bits != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (shifted_bits_2 != 0x7ff00000) {\n        difference = (int)(shifted_bits_2 - masked_input_4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input_1,input_2);\n            FUNC_0800708c();\n            result = calculate_result_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result_part1 = (undefined4)result;\n        if (shifted_bits == 1) {\n          return CONCAT44(difference + -0x80000000,result_part1);\n        }\n        if (shifted_bits == 2) {\n          arithmetic_result = perform_arithmetic_operation_08000168(result_part1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (shifted_bits == 0) {\n            return result;\n          }\n          result = perform_arithmetic_operation_08000168(result_part1,difference,0x33145c07,0x3ca1a626);\n          arithmetic_result = 0x400921fb54442d18;\n        }\n        result = perform_arithmetic_operation_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)arithmetic_result,\n                             (int)((ulonglong)arithmetic_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_float_result_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_part1",
                "uVar2": "shifted_bits",
                "uVar3": "shifted_bits_2",
                "iVar4": "difference",
                "uVar5": "masked_input_4",
                "uVar6": "result",
                "uVar7": "arithmetic_result"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int tempVar1;\n  int tempVar2;\n  undefined4 result10;\n  uint tempVar3;\n  undefined4 result11;\n  int tempVar4;\n  uint result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined8 result15;\n  undefined8 result16;\n  undefined8 result17;\n  undefined8 result18;\n  longlong longVar;\n  ulonglong result19;\n  undefined8 result20;\n  uint localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  int localVar4;\n  \n  result16 = CONCAT44(input2,input1);\n  result12 = input4 & 0x7fffffff;\n  if ((result12 | input3) == 0) {\n    return 0;\n  }\n  tempVar3 = input2 & 0x7fffffff;\n  if (tempVar3 < 0x7ff00001) {\n    if (tempVar3 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < result12) goto LAB_08006278;\nLAB_08006262:\n        if ((result12 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (result12 < 0x43400000) {\n            if (result12 < 0x3ff00000) {\nLAB_0800632a:\n              localVar1 = 0;\n              goto LAB_080062ba;\n            }\n            tempVar1 = ((int)result12 >> 0x14) + -0x3ff;\n            if (0x14 < tempVar1) {\n              result2 = input3 >> (0x34U - tempVar1 & 0xff);\n              if (input3 == result2 << (0x34U - tempVar1 & 0xff)) {\n                localVar1 = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)result12 >> (0x14U - tempVar1 & 0xff);\n              if (result12 == result2 << (0x14U - tempVar1 & 0xff)) {\n                localVar1 = 2 - (result2 & 1);\n              }\n              else {\n                localVar1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            localVar1 = 0;\n          }\n          else {\n            localVar1 = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (result12 == 0x7ff00000) {\n                if ((tempVar3 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < tempVar3) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result12 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                result15 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                result12 = calculate_floating_point_shift_08006c0c(input1,input2);\n                return result12;\n              }\n            }\n          }\n          result15 = FUNC_0800708c(input1,input2);\n          result13 = (undefined4)((ulonglong)result15 >> 0x20);\n          result1 = (undefined4)result15;\n          result19 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((tempVar3 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              result15 = calculate_floating_point_08000724(0,0x3ff00000,result1,result13);\n            }\n            if (-1 < (int)input2) {\n              return (uint)result15;\n            }\n            if ((localVar1 | tempVar3 + 0xc0100000) != 0) {\n              return (uint)result15;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            result15 = result16;\n            if ((localVar1 | result2) != 0) {\n              if (result12 < 0x41e00001) {\n                localVar4 = 0;\n                if (tempVar3 < 0x100000) {\n                  result19 = calculate_shift_080004d0();\n                  localVar4 = -0x35;\n                }\n                result12 = (uint)(result19 >> 0x20);\n                result1 = (undefined4)result19;\n                localVar4 = ((int)result12 >> 0x14) + -0x3ff + localVar4;\n                result12 = result12 & 0xfffff;\n                tempVar3 = result12 | 0x3ff00000;\n                if (result12 < 0x3988f) {\nLAB_08006628:\n                  tempVar1 = 0;\n                }\n                else {\n                  if (0xbb679 < result12) {\n                    tempVar3 = tempVar3 - 0x100000;\n                    localVar4 = localVar4 + 1;\n                    goto LAB_08006628;\n                  }\n                  tempVar1 = 1;\n                }\n                tempVar2 = tempVar1 * 8;\n                result10 = (&DAT_080073c0)[tempVar1 * 2];\n                result11 = (&DAT_080073c4)[tempVar1 * 2];\n                result16 = perform_arithmetic_operation_08000168(result1,tempVar3,result10,result11);\n                result14 = (undefined4)((ulonglong)result16 >> 0x20);\n                result15 = calculate_0800016c(result1,tempVar3,result10,result11);\n                result15 = calculate_floating_point_08000724(0,0x3ff00000,(int)result15,(int)((ulonglong)result15 >> 0x20));\n                result4 = (undefined4)((ulonglong)result15 >> 0x20);\n                result17 = calculate_shift_080004d0((int)result16,result14,(int)result15,result4);\n                result5 = (undefined4)((ulonglong)result17 >> 0x20);\n                result13 = (undefined4)result17;\n                result17 = calculate_shift_080004d0(0,result5);\n                result16 = perform_arithmetic_operation_08000168((int)result16,result14,(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result17 = perform_arithmetic_operation_08000168(0,((int)tempVar3 >> 1 | 0x20000000U) + 0x80000 + tempVar1 * 0x40000,\n                                      result10,result11);\n                result17 = perform_arithmetic_operation_08000168(result1,tempVar3,(int)result17,(int)((ulonglong)result17 >> 0x20));\n                result17 = calculate_shift_080004d0((int)result17,(int)((ulonglong)result17 >> 0x20),0,result5);\n                result16 = perform_arithmetic_operation_08000168((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result16 = calculate_shift_080004d0((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result15,result4\n                                     );\n                result14 = (undefined4)((ulonglong)result16 >> 0x20);\n                result15 = calculate_shift_080004d0(result13,result5);\n                result4 = (undefined4)((ulonglong)result15 >> 0x20);\n                result1 = (undefined4)result15;\n                result15 = calculate_shift_080004d0(result1,result4,0x4a454eef,0x3fca7e28);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result1,result4);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result1,result4);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result1,result4);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result1,result4);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                result17 = calculate_shift_080004d0(result1,result4,result1,result4);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result17 = calculate_0800016c(result13,result5,0,result5);\n                result17 = calculate_shift_080004d0((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result16,\n                                      result14);\n                result15 = calculate_0800016c((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result15,\n                                      (int)((ulonglong)result15 >> 0x20));\n                result1 = (undefined4)((ulonglong)result15 >> 0x20);\n                result17 = calculate_shift_080004d0(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)result17 >> 0x20);\n                result18 = calculate_0800016c((int)result17,result4,0,0x40080000);\n                calculate_0800016c((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result15,result1);\n                result18 = calculate_shift_080004d0(0,result5,0,result6);\n                result10 = (undefined4)((ulonglong)result18 >> 0x20);\n                result20 = perform_arithmetic_operation_08000168(0,result6,0,0x40080000);\n                result17 = perform_arithmetic_operation_08000168((int)result20,(int)((ulonglong)result20 >> 0x20),(int)result17,result4\n                                     );\n                result15 = perform_arithmetic_operation_08000168((int)result15,result1,(int)result17,(int)((ulonglong)result17 >> 0x20)\n                                     );\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result13,result5);\n                result16 = calculate_shift_080004d0((int)result16,result14,0,result6);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result16,\n                                      (int)((ulonglong)result16 >> 0x20));\n                result1 = (undefined4)((ulonglong)result15 >> 0x20);\n                calculate_0800016c((int)result18,result10,(int)result15,result1);\n                result16 = calculate_shift_080004d0(0,result7,0xe0000000,0x3feec709);\n                result17 = perform_arithmetic_operation_08000168(0,result7,(int)result18,result10);\n                result15 = perform_arithmetic_operation_08000168((int)result15,result1,(int)result17,(int)((ulonglong)result17 >> 0x20)\n                                     );\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                result17 = calculate_shift_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + tempVar2),\n                                      *(undefined4 *)(&DAT_080073e4 + tempVar2));\n                result17 = bitwise_shift_08000404(localVar4);\n                result1 = (undefined4)((ulonglong)result17 >> 0x20);\n                result13 = *(undefined4 *)(&DAT_080073d0 + tempVar2);\n                result14 = *(undefined4 *)(&DAT_080073d4 + tempVar2);\n                result18 = calculate_0800016c((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result15,\n                                      (int)((ulonglong)result15 >> 0x20));\n                result18 = calculate_0800016c((int)result18,(int)((ulonglong)result18 >> 0x20),result13,result14);\n                calculate_0800016c((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result17,result1);\n                result17 = perform_arithmetic_operation_08000168(0,result8,(int)result17,result1);\n                longVar = perform_arithmetic_operation_08000168((int)result17,(int)((ulonglong)result17 >> 0x20),result13,result14);\n                result12 = result8;\n              }\n              else {\n                if (0x43f00000 < result12) {\n                  if (tempVar3 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  result16 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (tempVar3 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < tempVar3) goto LAB_08006418;\n                result16 = perform_arithmetic_operation_08000168(result1,result13,0,0x3ff00000);\n                result13 = (undefined4)((ulonglong)result16 >> 0x20);\n                result1 = (undefined4)result16;\n                result16 = calculate_shift_080004d0(result1,result13,0x60000000,0x3ff71547);\n                result15 = calculate_shift_080004d0(result1,result13,0xf85ddf44,0x3e54ae0b);\n                result17 = calculate_shift_080004d0(result1,result13,0,0x3fd00000);\n                result17 = perform_arithmetic_operation_08000168(0x55555555,0x3fd55555,(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result17 = calculate_shift_080004d0((int)result17,(int)((ulonglong)result17 >> 0x20),result1,result13);\n                result17 = perform_arithmetic_operation_08000168(0,0x3fe00000,(int)result17,(int)((ulonglong)result17 >> 0x20));\n                result18 = calculate_shift_080004d0(result1,result13,result1,result13);\n                result17 = calculate_shift_080004d0((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result18,\n                                      (int)((ulonglong)result18 >> 0x20));\n                result17 = calculate_shift_080004d0((int)result17,(int)((ulonglong)result17 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                result15 = perform_arithmetic_operation_08000168((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                calculate_0800016c((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result15,\n                             (int)((ulonglong)result15 >> 0x20));\n                longVar = (ulonglong)result3 << 0x20;\n                result12 = result3;\n              }\n              result16 = perform_arithmetic_operation_08000168((int)longVar,(int)((ulonglong)longVar >> 0x20),(int)result16,\n                                    (int)((ulonglong)result16 >> 0x20));\n              result16 = perform_arithmetic_operation_08000168((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result16,\n                                    (int)((ulonglong)result16 >> 0x20));\n              if ((localVar1 - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              localVar1 = 0;\n              result15 = perform_arithmetic_operation_08000168(input3,input4,0,input4);\n              result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),0,result12);\n              result16 = calculate_shift_080004d0((int)result16,(int)((ulonglong)result16 >> 0x20),input3,input4);\n              result16 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result16,\n                                    (int)((ulonglong)result16 >> 0x20));\n              result14 = (undefined4)((ulonglong)result16 >> 0x20);\n              result1 = (undefined4)result16;\n              result16 = calculate_shift_080004d0(0,result12,0,input4);\n              result4 = (undefined4)((ulonglong)result16 >> 0x20);\n              result13 = (undefined4)result16;\n              longVar = calculate_0800016c(result1,result14,result13,result4);\n              tempVar3 = (uint)((ulonglong)longVar >> 0x20);\n              result12 = (uint)longVar;\n              if (0x408fffffffffffff < longVar) {\n                if ((tempVar3 + 0xbf700000 | result12) == 0) {\n                  result15 = calculate_0800016c(result1,result14,0x652b82fe,0x3c971547);\n                  result17 = perform_arithmetic_operation_08000168(result12,tempVar3,result13,result4);\n                  tempVar1 = check_if_null_terminated_080009f0((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result17,\n                                       (int)((ulonglong)result17 >> 0x20));\n                  if (tempVar1 == 0) goto LAB_08006968;\n                }\n                result16 = calculate_shift_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((tempVar3 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((tempVar3 & 0x7fffffff) < 0x3fe00001) {\n                  tempVar1 = 0;\n                }\n                else {\n                  tempVar3 = (0x100000 >> (((int)(tempVar3 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          tempVar3;\n                  result12 = (tempVar3 * 2 >> 0x15) - 0x3ff;\n                  tempVar1 = (int)(tempVar3 & 0xfffff | 0x100000) >> (0x14 - result12 & 0xff);\n                  if (longVar < 0) {\n                    tempVar1 = -tempVar1;\n                  }\n                  result16 = perform_arithmetic_operation_08000168(result13,result4,0,tempVar3 & ~(0xfffff >> (result12 & 0xff)));\n                }\n                localVar3 = (undefined4)((ulonglong)result16 >> 0x20);\n                localVar2 = (undefined4)result16;\n                calculate_0800016c(localVar2,localVar3,result1,result14);\n                result16 = calculate_shift_080004d0(0,result9,0,0x3fe62e43);\n                result13 = (undefined4)((ulonglong)result16 >> 0x20);\n                result15 = perform_arithmetic_operation_08000168(0,result9,localVar2,localVar3);\n                result15 = perform_arithmetic_operation_08000168(result1,result14,(int)result15,(int)((ulonglong)result15 >> 0x20));\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                result17 = calculate_shift_080004d0(0,result9,0xca86c39,0xbe205c61);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result14 = (undefined4)((ulonglong)result15 >> 0x20);\n                result17 = calculate_0800016c((int)result16,result13,(int)result15,result14);\n                result4 = (undefined4)((ulonglong)result17 >> 0x20);\n                result1 = (undefined4)result17;\n                result16 = perform_arithmetic_operation_08000168(result1,result4,(int)result16,result13);\n                result16 = perform_arithmetic_operation_08000168((int)result15,result14,(int)result16,\n                                      (int)((ulonglong)result16 >> 0x20));\n                result14 = (undefined4)((ulonglong)result16 >> 0x20);\n                result15 = calculate_shift_080004d0(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)result15 >> 0x20);\n                result13 = (undefined4)result15;\n                result15 = calculate_shift_080004d0(result13,result5,0x72bea4d0,0x3e663769);\n                result15 = perform_arithmetic_operation_08000168((int)result15,(int)((ulonglong)result15 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result13,result5);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result13,result5);\n                result15 = perform_arithmetic_operation_08000168((int)result15,(int)((ulonglong)result15 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result13,result5);\n                result15 = calculate_0800016c((int)result15,(int)((ulonglong)result15 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                result15 = calculate_shift_080004d0((int)result15,(int)((ulonglong)result15 >> 0x20),result13,result5);\n                result15 = perform_arithmetic_operation_08000168(result1,result4,(int)result15,(int)((ulonglong)result15 >> 0x20));\n                result13 = (undefined4)((ulonglong)result15 >> 0x20);\n                result17 = calculate_shift_080004d0(result1,result4,(int)result15,result13);\n                result15 = perform_arithmetic_operation_08000168((int)result15,result13,0,0x40000000);\n                result15 = calculate_floating_point_08000724((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result15,\n                                      (int)((ulonglong)result15 >> 0x20));\n                result17 = calculate_shift_080004d0(result1,result4,(int)result16,result14);\n                result16 = calculate_0800016c((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result16,\n                                      result14);\n                result16 = perform_arithmetic_operation_08000168((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result16,\n                                      (int)((ulonglong)result16 >> 0x20));\n                result16 = perform_arithmetic_operation_08000168((int)result16,(int)((ulonglong)result16 >> 0x20),result1,result4);\n                result15 = perform_arithmetic_operation_08000168(0,0x3ff00000,(int)result16,(int)((ulonglong)result16 >> 0x20));\n                tempVar2 = (int)((ulonglong)result15 >> 0x20);\n                tempVar4 = tempVar2 + tempVar1 * 0x100000;\n                result16 = CONCAT44(tempVar4,(int)result15);\n                input1 = localVar1;\n                if (tempVar4 < 0x100000) {\n                  result16 = calculate_shifted_value_080071c0((int)result15,tempVar2,tempVar1);\n                }\n              }\n              else {\n                if ((tempVar3 + 0x3f6f3400 | result12) == 0) {\n                  result15 = perform_arithmetic_operation_08000168(result12,tempVar3,result13,result4);\n                  tempVar1 = check_and_return_080009c8(result1,result14,(int)result15,(int)((ulonglong)result15 >> 0x20));\n                  if (tempVar1 == 0) goto LAB_08006968;\n                }\n                result16 = calculate_shift_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result12 = calculate_shift_080004d0((int)result16,(int)((ulonglong)result16 >> 0x20),input1,input2);\n              return result12;\n            }\n          }\n          result1 = (undefined4)((ulonglong)result15 >> 0x20);\n          result15 = perform_arithmetic_operation_08000168((int)result15,result1,(int)result15,result1);\n          result16 = result15;\nLAB_08006320:\n          result12 = calculate_floating_point_08000724((int)result15,(int)((ulonglong)result15 >> 0x20),(int)result16,\n                                (int)((ulonglong)result16 >> 0x20));\n          return result12;\n        }\n      }\n    }\n    else if (result12 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((tempVar3 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result12 = get_positive_infinity_080070a4(&DAT_0800737e);\n  return result12;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "tempVar1",
                "iVar6": "tempVar2",
                "uVar7": "result10",
                "uVar8": "tempVar3",
                "uVar9": "result11",
                "iVar10": "tempVar4",
                "uVar11": "result12",
                "uVar12": "result13",
                "uVar13": "result14",
                "uVar14": "result15",
                "uVar15": "result16",
                "uVar16": "result17",
                "uVar17": "result18",
                "lVar18": "longVar",
                "uVar19": "result19",
                "uVar20": "result20",
                "local_70": "localVar1",
                "local_68": "localVar2",
                "local_64": "localVar3",
                "local_54": "localVar4"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_shift_08006c0c",
            "code": "\nundefined8 calculate_floating_point_shift_08006c0c(uint input_value_1,uint input_value_2)\n\n{\n  undefined4 result_1;\n  uint shifted_value;\n  int shift_count;\n  int constant_1;\n  uint mask_1;\n  uint uVar6;\n  int constant_2;\n  uint uVar8;\n  uint uVar9;\n  int constant_3;\n  uint result_11;\n  undefined8 result_2;\n  \n  if ((~input_value_2 & 0x7ff00000) == 0) {\n    result_2 = calculate_shift_080004d0(input_value_1,input_value_2,input_value_1,input_value_2);\n    result_2 = calculate_0800016c(input_value_1,input_value_2,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n    return result_2;\n  }\n  if ((int)input_value_2 < 1) {\n    if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    if (input_value_2 != 0) {\n      result_2 = perform_arithmetic_operation_08000168(input_value_1,input_value_2,input_value_1,input_value_2);\n      result_1 = (undefined4)((ulonglong)result_2 >> 0x20);\n      result_2 = calculate_floating_point_08000724((int)result_2,result_1,(int)result_2,result_1);\n      return result_2;\n    }\n  }\n  shift_count = (int)input_value_2 >> 0x14;\n  if (shift_count == 0) {\n    while (input_value_2 == 0) {\n      shift_count = shift_count + -0x15;\n      input_value_2 = input_value_1 >> 0xb;\n      input_value_1 = input_value_1 << 0x15;\n    }\n    shifted_value = 0;\n    for (; -1 < (int)(input_value_2 << 0xb); input_value_2 = input_value_2 << 1) {\n      shifted_value = shifted_value + 1;\n    }\n    shift_count = shift_count - (shifted_value - 1);\n    input_value_2 = input_value_2 | input_value_1 >> (0x20 - shifted_value & 0xff);\n    input_value_1 = input_value_1 << (shifted_value & 0xff);\n  }\n  constant_2 = 0;\n  shifted_value = input_value_2 & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    shifted_value = shifted_value * 2 - ((int)input_value_1 >> 0x1f);\n    input_value_1 = input_value_1 << 1;\n  }\n  shifted_value = shifted_value * 2 - ((int)input_value_1 >> 0x1f);\n  constant_1 = 0x16;\n  mask_1 = 0;\n  uVar8 = 0x200000;\n  input_value_1 = input_value_1 << 1;\n  do {\n    constant_3 = mask_1 + uVar8;\n    if (constant_3 <= (int)shifted_value) {\n      shifted_value = shifted_value - constant_3;\n      mask_1 = constant_3 + uVar8;\n      constant_2 = constant_2 + uVar8;\n    }\n    constant_1 = constant_1 + -1;\n    shifted_value = shifted_value * 2 - ((int)input_value_1 >> 0x1f);\n    uVar8 = uVar8 >> 1;\n    input_value_1 = input_value_1 << 1;\n  } while (constant_1 != 0);\n  constant_3 = 0x20;\n  uVar9 = 0x80000000;\n  uVar8 = 0;\n  constant_1 = 0;\n  do {\n    result_11 = uVar9 + constant_1;\n    uVar6 = mask_1;\n    if (((int)mask_1 < (int)shifted_value) || ((shifted_value == mask_1 && (result_11 <= input_value_1)))) {\n      constant_1 = result_11 + uVar9;\n      if (((int)result_11 < 0) && (-1 < constant_1)) {\n        uVar6 = mask_1 + 1;\n      }\n      shifted_value = shifted_value - mask_1;\n      if (input_value_1 < result_11) {\n        shifted_value = shifted_value - 1;\n      }\n      input_value_1 = input_value_1 - result_11;\n      uVar8 = uVar8 + uVar9;\n    }\n    shifted_value = shifted_value * 2 - ((int)input_value_1 >> 0x1f);\n    constant_3 = constant_3 + -1;\n    input_value_1 = input_value_1 << 1;\n    uVar9 = uVar9 >> 1;\n    mask_1 = uVar6;\n  } while (constant_3 != 0);\n  if ((input_value_1 | shifted_value) != 0) {\n    if (uVar8 == 0xffffffff) {\n      constant_2 = constant_2 + 1;\n      uVar8 = 0;\n    }\n    else {\n      uVar8 = uVar8 + 1 & 0xfffffffe;\n    }\n  }\n  uVar8 = uVar8 >> 1;\n  if (constant_2 << 0x1f < 0) {\n    uVar8 = uVar8 | 0x80000000;\n  }\n  return CONCAT44((constant_2 >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,uVar8);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_shift_08006c0c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "result_1",
                "uVar2": "shifted_value",
                "iVar3": "shift_count",
                "iVar4": "constant_1",
                "uVar5": "mask_1",
                "iVar7": "constant_2",
                "iVar10": "constant_3",
                "uVar12": "result_2"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  uint positive_input_2;\n  undefined8 calculation_result;\n  undefined8 calculation_result2;\n  \n  calculation_result = CONCAT44(input_2,input_1);\n  positive_input_2 = input_2 & 0x7fffffff;\n  if (positive_input_2 < 0x44100000) {\n    if (positive_input_2 < 0x3fdc0000) {\n      if (positive_input_2 < 0x3e200000) {\n        calculation_result2 = calculate_0800016c(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        result = check_if_null_terminated_080009f0((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return calculation_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      calculation_result = FUNC_0800708c();\n      temp_2 = (undefined4)((ulonglong)calculation_result >> 0x20);\n      temp_1 = (undefined4)calculation_result;\n      if (positive_input_2 < 0x3ff30000) {\n        if (positive_input_2 < 0x3fe60000) {\n          calculation_result = calculate_0800016c(temp_1,temp_2,temp_1,temp_2);\n          calculation_result = perform_arithmetic_operation_08000168((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0x3ff00000);\n          calculation_result2 = calculate_0800016c(temp_1,temp_2,0,0x40000000);\n          calculation_result = calculate_floating_point_08000724((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),(int)calculation_result2,\n                               (int)((ulonglong)calculation_result2 >> 0x20));\n          result = 0;\n        }\n        else {\n          calculation_result = perform_arithmetic_operation_08000168(temp_1,temp_2,0,0x3ff00000);\n          calculation_result2 = calculate_0800016c(temp_1,temp_2,0,0x3ff00000);\n          calculation_result = calculate_floating_point_08000724((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),(int)calculation_result2,\n                               (int)((ulonglong)calculation_result2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (positive_input_2 < 0x40038000) {\n        calculation_result = perform_arithmetic_operation_08000168(temp_1,temp_2,0,0x3ff80000);\n        calculation_result2 = calculate_shift_080004d0(temp_1,temp_2,0,0x3ff80000);\n        calculation_result2 = calculate_0800016c((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0,0x3ff00000);\n        calculation_result = calculate_floating_point_08000724((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),(int)calculation_result2,\n                             (int)((ulonglong)calculation_result2 >> 0x20));\n        result = 2;\n      }\n      else {\n        calculation_result = calculate_floating_point_08000724(0,0xbff00000,temp_1,temp_2);\n        result = 3;\n      }\n    }\n    temp_6 = (undefined4)((ulonglong)calculation_result >> 0x20);\n    temp_5 = (undefined4)calculation_result;\n    calculation_result = calculate_shift_080004d0(temp_5,temp_6,temp_5,temp_6);\n    temp_3 = (undefined4)((ulonglong)calculation_result >> 0x20);\n    temp_1 = (undefined4)calculation_result;\n    calculation_result = calculate_shift_080004d0(temp_1,temp_3,temp_1,temp_3);\n    temp_4 = (undefined4)((ulonglong)calculation_result >> 0x20);\n    temp_2 = (undefined4)calculation_result;\n    calculation_result = calculate_shift_080004d0(temp_2,temp_4,0xe322da11,0x3f90ad3a);\n    calculation_result = calculate_0800016c((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x24760deb,0x3fa97b4b);\n    calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_2,temp_4);\n    calculation_result = calculate_0800016c((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_2,temp_4);\n    calculation_result = calculate_0800016c((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0xc54c206e,0x3fb745cd);\n    calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_2,temp_4);\n    calculation_result = calculate_0800016c((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x920083ff,0x3fc24924);\n    calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_2,temp_4);\n    calculation_result = calculate_0800016c((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0x5555550d,0x3fd55555);\n    calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_1,temp_3);\n    temp_1 = (undefined4)((ulonglong)calculation_result >> 0x20);\n    calculation_result2 = calculate_shift_080004d0(temp_2,temp_4,0x2c6a6c2f,0xbfa2b444);\n    calculation_result2 = perform_arithmetic_operation_08000168((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0x52defd9a,0x3fadde2d);\n    calculation_result2 = calculate_shift_080004d0((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),temp_2,temp_4);\n    calculation_result2 = perform_arithmetic_operation_08000168((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    calculation_result2 = calculate_shift_080004d0((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),temp_2,temp_4);\n    calculation_result2 = perform_arithmetic_operation_08000168((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0xfe231671,0x3fbc71c6);\n    calculation_result2 = calculate_shift_080004d0((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),temp_2,temp_4);\n    calculation_result2 = perform_arithmetic_operation_08000168((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),0x9998ebc4,0x3fc99999);\n    calculation_result2 = calculate_shift_080004d0((int)calculation_result2,(int)((ulonglong)calculation_result2 >> 0x20),temp_2,temp_4);\n    temp_2 = (undefined4)((ulonglong)calculation_result2 >> 0x20);\n    if (result == -1) {\n      calculation_result = calculate_0800016c((int)calculation_result,temp_1,(int)calculation_result2,temp_2);\n      calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_5,temp_6);\n      calculation_result = perform_arithmetic_operation_08000168(temp_5,temp_6,(int)calculation_result,(int)((ulonglong)calculation_result >> 0x20));\n    }\n    else {\n      calculation_result = calculate_0800016c((int)calculation_result,temp_1,(int)calculation_result2,temp_2);\n      calculation_result = calculate_shift_080004d0((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_5,temp_6);\n      result = result * 8;\n      calculation_result = perform_arithmetic_operation_08000168((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      calculation_result = perform_arithmetic_operation_08000168((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),temp_5,temp_6);\n      calculation_result = perform_arithmetic_operation_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)calculation_result,\n                           (int)((ulonglong)calculation_result >> 0x20));\n      if ((int)input_2 < 0) {\n        calculation_result = CONCAT44((int)((ulonglong)calculation_result >> 0x20) + -0x80000000,(int)calculation_result);\n      }\n    }\n  }\n  else if ((positive_input_2 < 0x7ff00001) && ((positive_input_2 != 0x7ff00000 || (input_1 == 0)))) {\n    if ((int)input_2 < 1) {\n      calculation_result = 0xbff921fb54442d18;\n    }\n    else {\n      calculation_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    calculation_result = calculate_0800016c(input_1,input_2,input_1,input_2,input_4);\n  }\n  return calculation_result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "positive_input_2",
                "uVar9": "calculation_result",
                "uVar10": "calculation_result2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "sign_bit_shift_08007092",
            "code": "\nuint signBitShift_08007092(undefined4 inputFlag,uint value)\n\n{\n  return (value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "sign_bit_shift_08007092",
                "param_1": "inputFlag",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nundefined4 initialize_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nundefined8 getPositiveInfinity_080070a4(void)\n\n{\n  positiveInfinity 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "return": "positiveInfinity"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculate_result_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 value1;\n  uint tmp1;\n  undefined4 value2;\n  uint tmp2;\n  uint shifted;\n  uint bitmask;\n  undefined8 result;\n  \n  bitmask = (input2 << 1) >> 0x15;\n  shifted = bitmask - 0x3ff;\n  tmp1 = input2;\n  if ((int)shifted < 0x14) {\n    if ((int)shifted < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tmp1 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      value1 = *(undefined4 *)(&DAT_08007430 + index);\n      value2 = *(undefined4 *)(&DAT_08007434 + index);\n      result = calculate_0800016c(input1,(-tmp1 | tmp1) >> 0xc & 0x80000 | input2 & 0xfffe0000,value1,\n                           value2,input1,input2,input3);\n      result = perform_arithmetic_operation_08000168((int)result,(int)((ulonglong)result >> 0x20),value1,value2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    bitmask = 0xfffff >> (shifted & 0xff);\n    if ((input2 & bitmask | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    bitmask = bitmask >> 1;\n    tmp2 = input2 & bitmask | input1;\n    if (tmp2 != 0) {\n      if (shifted == 0x13) {\n        tmp2 = 0x80000000;\n      }\n      else {\n        tmp2 = 0;\n      }\n      tmp1 = 0x40000 >> (shifted & 0xff) | input2 & ~bitmask;\n    }\n  }\n  else {\n    if (0x33 < (int)shifted) {\n      if (shifted != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = calculate_0800016c();\n      return result;\n    }\n    bitmask = bitmask - 0x413;\n    shifted = 0xffffffff >> (bitmask & 0xff);\n    if ((input1 & shifted) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    shifted = shifted >> 1;\n    tmp2 = input1;\n    if ((input1 & shifted) != 0) {\n      tmp2 = 0x40000000 >> (bitmask & 0xff) | input1 & ~shifted;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  value1 = *(undefined4 *)(&DAT_08007430 + index);\n  value2 = *(undefined4 *)(&DAT_08007434 + index);\n  result = calculate_0800016c(tmp2,tmp1,value1,value2,input1,input2,input3);\n  result = perform_arithmetic_operation_08000168((int)result,(int)((ulonglong)result >> 0x20),value1,value2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "index",
                "uVar2": "value1",
                "uVar3": "tmp1",
                "uVar4": "value2",
                "uVar5": "tmp2",
                "uVar6": "shifted",
                "uVar7": "bitmask",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_shifted_value_080071c0",
            "code": "\nundefined8 calculate_shifted_value_080071c0(uint input_value_1,uint input_value_2,int shift_amount,undefined4 constant_value)\n\n{\n  uint shifted_value;\n  undefined4 result_lower;\n  int sum;\n  undefined4 constant1;\n  uint result_upper;\n  undefined8 shifted_result;\n  \n  shifted_result = CONCAT44(input_value_2,input_value_1);\n  shifted_value = (input_value_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n      return shifted_result;\n    }\n    shifted_result = calculate_shift_080004d0(input_value_1,input_value_2,0,0x43500000);\n    if (-0xc351 < shift_amount) {\n      shifted_value = ((uint)((int)((ulonglong)shifted_result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result_lower = 0xc2f8f359;\n    constant1 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      shifted_result = calculate_0800016c(input_value_1,input_value_2,input_value_1,input_value_2,constant_value);\n      return shifted_result;\n    }\nLAB_08007210:\n    result_upper = (uint)((ulonglong)shifted_result >> 0x20);\n    result_lower = (undefined4)shifted_result;\n    sum = shifted_value + shift_amount;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(result_upper & 0x800fffff | sum * 0x100000,result_lower);\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n        shifted_result = CONCAT44(result_upper & 0x800fffff | (sum + 0x36) * 0x100000,result_lower);\n        result_lower = 0;\n        constant1 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (shift_amount < 0xc351) {\n        shifted_result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result_lower,result_upper);\n        goto LAB_080071ec;\n      }\n    }\n    shifted_result = FUNC_0800729c(0x8800759c,0x7e37e43c,result_lower,result_upper);\n    result_lower = 0x8800759c;\n    constant1 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  shifted_result = calculate_shift_080004d0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),result_lower,constant1);\n  return shifted_result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_shifted_value_080071c0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "shift_amount",
                "param_4": "constant_value",
                "uVar1": "shifted_value",
                "uVar2": "result_lower",
                "iVar3": "sum",
                "uVar4": "constant1",
                "uVar5": "result_upper",
                "uVar6": "shifted_result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_080072ac",
            "code": "\nundefined4 get_data_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_080072b8",
            "code": "\nvoid updateData_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_080072b8",
                "param_1": "amount"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 153646,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}