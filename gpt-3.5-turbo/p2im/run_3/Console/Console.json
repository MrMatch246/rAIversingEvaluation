{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "handle_kernel_panic_00000410",
            "code": "\nvoid handleKernelPanic_00000410(void)\n\n{\n  handle_kernel_panic_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "handle_kernel_panic_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "check_and_update_rel_offset_00000428",
            "code": "\ndword checkAndUpdateRelOffset_00000428(undefined4 *outputPointer,int inputValue)\n\n{\n  undefined4 irqInterruptStatus;\n  dword result;\n  \n  irqInterruptStatus = check_ir_qinterrupts_00000cd0();\n  result = relocationTable[0].r_offset;\n  if ((inputValue + relocationTable[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputValue + relocationTable[0].r_offset)) {\n    relocationTable[0].r_offset = inputValue + relocationTable[0].r_offset;\n  }\n  else {\n    *outputPointer = 0xc;\n    result = 0xffffffff;\n  }\n  enable_interrupts_if_privileged_00000d0c(irqInterruptStatus);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000428": "check_and_update_rel_offset_00000428",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "uVar1": "irqInterruptStatus",
                "local_c": "result",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_decrement_loop_00000490",
            "code": "\nundefined4 copy_and_decrement_loop_00000490(undefined4 src_address,undefined4 dst_address,undefined4 src_size,undefined4 dst_size)\n\n{\n  undefined4 result;\n  \n  result = copy_and_decrement_loop_00000490_00000e14(src_size,dst_size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_decrement_loop_00000490",
                "param_1": "src_address",
                "param_2": "dst_address",
                "param_3": "src_size",
                "param_4": "dst_size",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_00000514",
            "code": "\nundefined4 initialize_00000514(undefined4 *target_value)\n\n{\n  *target_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_00000514",
                "param_1": "target_value"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_validity_00000534",
            "code": "\nundefined4 checkParamValidity_00000534(undefined4 *outputValue,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *outputValue = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_validity_00000534",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decode_byte_00000566",
            "code": "\nint decodeByte_00000566(int inputValue)\n\n{\n  byte bit7;\n  byte bit0to7;\n  byte bit8to15;\n  byte bit16to23;\n  int decodedValue;\n  \n  bit0to7 = (byte)inputValue;\n  bit8to15 = (byte)((uint)inputValue >> 8);\n  bit16to23 = (byte)((uint)inputValue >> 0x10);\n  bit7 = (byte)((uint)inputValue >> 0x18);\n  decodedValue = LZCOUNT((uint)(byte)((((((((bit0to7 & 1) << 1 | bit0to7 >> 1 & 1) << 1 | bit0to7 >> 2 & 1) << 1\n                                  | bit0to7 >> 3 & 1) << 1 | bit0to7 >> 4 & 1) << 1 | bit0to7 >> 5 & 1) <<\n                                1 | bit0to7 >> 6 & 1) << 1 | bit0to7 >> 7) << 0x18 |\n                  (uint)(byte)((((((((bit8to15 & 1) << 1 | bit8to15 >> 1 & 1) << 1 | bit8to15 >> 2 & 1) << 1\n                                  | bit8to15 >> 3 & 1) << 1 | bit8to15 >> 4 & 1) << 1 | bit8to15 >> 5 & 1) <<\n                                1 | bit8to15 >> 6 & 1) << 1 | bit8to15 >> 7) << 0x10 |\n                  (uint)(byte)((((((((bit16to23 & 1) << 1 | bit16to23 >> 1 & 1) << 1 | bit16to23 >> 2 & 1) << 1\n                                  | bit16to23 >> 3 & 1) << 1 | bit16to23 >> 4 & 1) << 1 | bit16to23 >> 5 & 1) <<\n                                1 | bit16to23 >> 6 & 1) << 1 | bit16to23 >> 7) << 8 |\n                  (uint)(byte)((((((((bit7 & 1) << 1 | bit7 >> 1 & 1) << 1 | bit7 >> 2 & 1) << 1\n                                  | bit7 >> 3 & 1) << 1 | bit7 >> 4 & 1) << 1 | bit7 >> 5 & 1) <<\n                                1 | bit7 >> 6 & 1) << 1 | bit7 >> 7));\n  if (inputValue == 0) {\n    decodedValue = -1;\n  }\n  return decodedValue;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decode_byte_00000566",
                "param_1": "inputValue",
                "bVar1": "bit7",
                "bVar2": "bit0to7",
                "bVar3": "bit8to15",
                "bVar4": "bit16to23",
                "iVar5": "decodedValue"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePtr,undefined4 *targetPtr)\n\n{\n  if (*sourcePtr == 0) {\n    *targetPtr = targetPtr;\n  }\n  else {\n    *targetPtr = *(undefined4 *)*sourcePtr;\n    *(undefined4 **)*sourcePtr = targetPtr;\n  }\n  *sourcePtr = (int)targetPtr;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePtr",
                "param_2": "targetPtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *inputPointer)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*inputPointer == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*inputPointer;\n    if (extractedValue == (undefined4 *)*inputPointer) {\n      *inputPointer = 0;\n    }\n    else {\n      *(undefined4 *)*inputPointer = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "inputPointer",
                "puVar1": "extractedValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "decode_and_update_data_00000610",
            "code": "\nundefined4 decode_and_update_data_00000610(void)\n\n{\n  int previous_value;\n  int current_value;\n  undefined4 result;\n  \n  previous_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  current_value = decode_byte(DAT_1fff0424);\n  current_value = **(int **)(&DAT_1fff03e4 + current_value * 4);\n  if (previous_value == current_value + -8) {\n    result = 0;\n  }\n  else {\n    if ((previous_value != 0) && (*(char *)(previous_value + 4) == '\\t')) {\n      *(undefined *)(previous_value + 4) = 10;\n    }\n    *(undefined *)(current_value + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(current_value + -2);\n    result = 1;\n    DAT_1fff03dc = current_value + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "decode_and_update_data_00000610",
                "iVar1": "previous_value",
                "iVar2": "current_value",
                "uVar3": "result",
                "decode_byte_00000566": "decode_byte"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_value_00000698",
            "code": "\nvoid updateValue_00000698(int inputValue,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(inputValue + 4)) &&\n       (getValue(&DAT_1fff03e4 + (uint)*(byte *)(inputValue + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(inputValue + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(inputValue + 5));\n    }\n  }\n  else if (*(byte *)(inputValue + 4) < 9) {\n    updatePointer(&DAT_1fff03e4 + (uint)*(byte *)(inputValue + 5) * 4,inputValue + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(inputValue + 5);\n  }\n  *(char *)(inputValue + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_value_00000698",
                "param_1": "inputValue",
                "param_2": "newValue",
                "extract_value_from_pointer_000005ca": "getValue",
                "update_pointer_0000058e": "updatePointer"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_exception_threshold_00000738",
            "code": "\nvoid checkExceptionThreshold_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_first_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      set_bit_in_register_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_exception_threshold_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int extraValue;\n  int valueIndex;\n  undefined4 *pointerVar;\n  uint alignedAddr;\n  int loopCounter1;\n  int loopCounter2;\n  int *memoryPointer;\n  \n  checkInterrupts();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  updateValue(DAT_1fff03dc,0);\n  pointerVar = &DAT_1fff03dc;\n  valueIndex = 0;\n  DAT_1fff03dc = 0;\n  endlessLoop();\n  alignedAddr = (int)pointerVar + valueIndex & 0xfffffffc;\n  memoryPointer = (int *)(alignedAddr - 4);\n  *memoryPointer = 0x77777777;\n  if (((uint)memoryPointer & 7) != 0) {\n    memoryPointer = (int *)(alignedAddr - 8);\n    *memoryPointer = 0x88888888;\n  }\n  memoryPointer[-1] = 0x1000000;\n  memoryPointer[-2] = valueIndex << 0xd;\n  memoryPointer[-3] = 0x795;\n  memoryPointer = memoryPointer + -4;\n  *memoryPointer = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = loopCounter2;\n  }\n  memoryPointer = memoryPointer + -1;\n  *memoryPointer = extraValue;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = loopCounter1;\n  }\n  memoryPointer[-1] = -3;\n  return memoryPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "extraValue",
                "iVar1": "valueIndex",
                "puVar2": "pointerVar",
                "uVar3": "alignedAddr",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "memoryPointer",
                "check_ir_qinterrupts_00000cd0": "checkInterrupts",
                "update_value_00000698": "updateValue",
                "endless_loop_00000930": "endlessLoop"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int counter1;\n  int counter2;\n  int *memoryPtr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  memoryPtr = (int *)(alignedSize - 4);\n  *memoryPtr = 0x77777777;\n  if (((uint)memoryPtr & 7) != 0) {\n    memoryPtr = (int *)(alignedSize - 8);\n    *memoryPtr = 0x88888888;\n  }\n  memoryPtr[-1] = 0x1000000;\n  memoryPtr[-2] = param1;\n  memoryPtr[-3] = 0x795;\n  memoryPtr = memoryPtr + -4;\n  *memoryPtr = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = counter2;\n  }\n  memoryPtr = memoryPtr + -1;\n  *memoryPtr = param2;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = counter1;\n  }\n  memoryPtr[-1] = -3;\n  return memoryPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "counter1",
                "local_10": "counter2",
                "local_c": "memoryPtr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_valid_offset_000008b8",
            "code": "\nint find_last_valid_offset_000008b8(void)\n\n{\n  RelocationEntry *current_rel;\n  \n  for (current_rel = (RelocationEntry *)&DAT_1fff0000;\n      (current_rel->r_offset == 0xe7fee7fe && (current_rel < RelocationEntry_ARRAY_1fff0200));\n      current_rel = (RelocationEntry *)&current_rel->r_info) {\n  }\n  return ((int)RelocationEntry_ARRAY_1fff0200 - (int)current_rel >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_valid_offset_000008b8",
                "local_c": "current_rel",
                "Elf32_Rel": "RelocationEntry"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "endless_loop_00000930",
            "code": "\nvoid endlessLoop_00000930(void)\n\n{\n  checkInterruptsEnabled();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "endless_loop_00000930",
                "check_ir_qinterrupts_enabled_00000cf0": "checkInterruptsEnabled",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_bit_in_register_0000093c",
            "code": "\n\n\nvoid setBitInRegister_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_bit_in_register_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_system_00000e64();\n  execute_kernel_functions_0000459c();\n  initialize_memory_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_interrupt_00000a30",
            "code": "\nundefined * handle_NMI_interrupt_00000a30(void)\n\n{\n  int input_value;\n  \n  panic_handler(4,\"NMI HANDLER\");\n  return stack_top + -*(int *)(input_value + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_interrupt_00000a30",
                "in_r3": "input_value",
                "kernel_panic_handler_00000f04": "panic_handler",
                "&stack0xe000ffe0": "stack_top"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qinterrupts_and_get_interrupts_status_00000cc0",
            "code": "\nundefined4 disableIRQinterruptsAndGetInterruptsStatus_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsStatus;\n  \n  kernel_panic_handler_00000f04(10,\"DUMMY HANDLER\");\n  interruptsStatus = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsStatus = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_get_interrupts_status_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsStatus"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_ir_qinterrupts_00000cd0",
            "code": "\nundefined4 checkIRQinterrupts_00000cd0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivileged = (bool)checkCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = checkIRQinterrupts_00000cd0Enabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_ir_qinterrupts_00000cd0",
                "isCurrentModePrivileged": "checkCurrentModePrivileged",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivileged"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 isInterruptsEnabled;\n  \n  enableIRQinterrupts();\n  isInterruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    isInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return isInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_00000cf0",
                "uVar2": "isInterruptsEnabled",
                "bVar1": "isPrivilegedMode"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint interruptType)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    enableInterrupts((interruptType & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "interruptType",
                "bVar1": "isPrivileged",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_first_exception_number_00000d2a",
            "code": "\nuint getFirstExceptionNumber_00000d2a(void)\n\n{\n  bool isCurrentModePrivileged;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_first_exception_number_00000d2a",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_new_value_00000d44",
            "code": "\nint calculateNewValue_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_new_value_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 inputValue,undefined inputData)\n\n{\n  undefined4 *pointerToNewValue;\n  \n  pointerToNewValue = (undefined4 *)calculate_new_value_00000d44(inputValue,inputData);\n  *pointerToNewValue = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "inputValue",
                "param_2": "inputData",
                "puVar1": "pointerToNewValue"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_memory_00000d9c",
            "code": "\nvoid initializeMemory_00000d9c(void)\n\n{\n  clearMemory(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_memory_00000d9c",
                "clear_memory_00000d76": "clearMemory"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_memory_00000db0",
            "code": "\nvoid initialize_memory_00000db0(void)\n\n{\n  initialize_memory_00000db0_1();\n  initialize_memory_00000db0_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_memory_00000db0",
                "initialize_memory_00000dcc": "initialize_memory_1",
                "initialize_memory_00000d9c": "initialize_memory_2"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "disable_interrupts_and_retrieve_status_00000dc0",
            "code": "\nvoid disableInterruptsAndRetrieveStatus_00000dc0(void)\n\n{\n  disableInterruptsAndRetrieveStatus_00000dc0Inner();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "disable_interrupts_and_retrieve_status_00000dc0",
                "disable_ir_qinterrupts_and_get_interrupts_status_00000cc0": "disableInterruptsAndRetrieveStatusInner"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "handle_kernel_panic_00000df4",
            "code": "\nvoid handle_kernel_panic_00000df4(void)\n\n{\n  handle_kernel_panic_00000df4_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "handle_kernel_panic_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_decrement_loop_00000e14",
            "code": "\nundefined4 copy_and_decrement_loop_00000e14(undefined4 input_address,undefined4 output_address)\n\n{\n  undefined4 result;\n  \n  result = copy_and_decrement_loop_00000e14_000012e2(0x1fff0204,input_address,output_address);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_decrement_loop_00000e14",
                "param_1": "input_address",
                "param_2": "output_address",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_data_to_pointer_00000e38",
            "code": "\nundefined4 copyDataToPointer_00000e38(undefined4 destination,undefined4 source)\n\n{\n  copy_data_to_pointer_000015d0(0,destination,source);\n  return source;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_data_to_pointer_00000e38",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid runInfiniteLoop_00000e58(void)\n\n{\n  checkHardwareInterrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_ir_qinterrupts_00000cd0": "checkHardwareInterrupts"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initializeSystem_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initializeAndSetUpSystem();\n  updateAndStoreValueWithBits(0x2056,0x80);\n  updateAndStoreValueWithBits(0x511a,0x80);\n  updateAndStoreValueWithBits(0x2055,0x80);\n  setBitInMask(0x2056);\n  setBitInMask(0x511a);\n  setBitInMask(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "initialize_and_setup_system_00001274": "initializeAndSetUpSystem",
                "update_and_store_value_with_bits_00001eea": "updateAndStoreValueWithBits",
                "set_bit_in_mask_00001ff6": "setBitInMask"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 inputRet;\n  \n  initialize_and_update_data_00004c84(&DAT_00006f58,inputRet);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "inputRet"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "kernel_panic_handler_00000f04",
            "code": "\nvoid kernel_panic_handler_00000f04(char error_code,undefined4 message)\n\n{\n  undefined4 stack_variable;\n  code *jump_table;\n  undefined4 param_2_copy;\n  char error_code_copy;\n  \n  param_2_copy = message;\n  error_code_copy = error_code;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (error_code == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    initialize_and_update_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",param_2_copy);\n    print_process_information_0000211c();\n    initialize_and_update_data_00004c84(&DAT_00006f78);\n    initialize_and_update_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_ir_qinterrupts_00000cd0();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  stack_variable = (int)&stack_variable + 1;\n  FUNC_00002400();\n  initialize_and_update_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "kernel_panic_handler_00000f04",
                "param_1": "error_code",
                "param_2": "message",
                "uStack_18": "stack_variable",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "param_2_copy",
                "local_9": "error_code_copy"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint uVar1;\n  undefined4 *ptr;\n  uint numBlocks;\n  int stackVar1;\n  int *stackVarPtr;\n  undefined4 value;\n  undefined4 size;\n  undefined4 offset2;\n  dword offset1;\n  \n  check_ir_qinterrupts_00000cd0();\n  offset1 = elfRelArray[3].r_info;\n  offset2 = 0;\n  size = 0xf81;\n  allocateMemory(&DAT_1fff0a6c,0x100,0xf,0xc);\n  offset1 = elfRelArray[3].r_offset;\n  offset2 = 0;\n  size = 0xf5d;\n  numBlocks = 0xc;\n  allocateMemory(&DAT_1fff046c,0x600,7);\n  value = 0xfd3;\n  uVar1 = endlessLoop();\n  uVar1 = uVar1 >> 0x1e;\n  ptr = (undefined4 *)(numBlocks * 0x100);\n  stackVar1 = (numBlocks >> 0x1d) << 0x11;\n  stackVarPtr = &stackVar1;\n  if ((uVar1 & uVar1 - 1) != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *ptr = 0;\n  ptr[1] = 0;\n  ptr[2] = uVar1 - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "local_10": "offset1",
                "local_14": "offset2",
                "local_18": "size",
                "allocate_memory_000010d4": "allocateMemory",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray",
                "uVar3": "numBlocks",
                "uStack_1c": "value",
                "endless_loop_00000930": "endlessLoop",
                "puVar2": "ptr",
                "iStack_24": "stackVar1",
                "piStack_20": "stackVarPtr"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_00000fec",
            "code": "\nvoid initializeParam_00000fec(undefined4 *outputArray,uint inputSize)\n\n{\n  if ((inputSize & inputSize - 1) != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = inputSize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_00000fec",
                "param_1": "outputArray",
                "param_2": "inputSize",
                "param_1[1]": "outputArray[1]",
                "param_1[2]": "outputArray[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_set_next_ptr_00001034",
            "code": "\nvoid find_and_set_next_ptr_00001034(int **ptr_list,int index)\n\n{\n  int **current_ptr;\n  \n  if (8 < *(byte *)(index + 4)) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_ptr = ptr_list;\n      (*current_ptr != (int *)0x0 && (*(byte *)((int)*current_ptr + -3) <= *(byte *)(index + 5)));\n      current_ptr = (int **)*current_ptr) {\n  }\n  *(int **)(index + 8) = *current_ptr;\n  *current_ptr = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_set_next_ptr_00001034",
                "param_1": "ptr_list",
                "param_2": "index",
                "local_1c": "current_ptr"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_pointer;\n  \n  for (current_pointer = array; (int *)*current_pointer == current_pointer; current_pointer = current_pointer + 1) {\n  }\n  return (int)current_pointer - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "allocate_memory_000010d4",
            "code": "\nint allocateMemory_000010d4(uint baseAddress,int size,byte byteSize,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 memoryInitialization;\n  int result;\n  uint alignedSize;\n  undefined4 *memoryPointer;\n  int bytesToAlign;\n  uint alignedAddress;\n  uint loopCounter;\n  short index1;\n  short index2;\n  \n  if (byteSize < 0x10) {\n    bytesToAlign = size;\n    alignedAddress = baseAddress;\n    if ((baseAddress & 3) != 0) {\n      bytesToAlign = 4 - (baseAddress & 3);\n      alignedAddress = bytesToAlign + baseAddress;\n      bytesToAlign = size - bytesToAlign;\n    }\n    alignedSize = bytesToAlign - 0x30U & 0xfffffffc;\n    memoryPointer = (undefined4 *)(alignedSize + alignedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedAddress = alignedAddress;\n    }\n    else {\n      for (loopCounter = alignedAddress; loopCounter < alignedSize + alignedAddress; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    interruptStatus = check_ir_qinterrupts_00000cd0();\n    index2 = 0;\n    for (index1 = 1; index1 < 0x21; index1 = index1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + index1 * 4) == 0) {\n        index2 = index1;\n        break;\n      }\n    }\n    if (index2 == 0) {\n      enable_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + index2 * 4) = memoryPointer;\n      *(short *)((int)memoryPointer + 6) = index2;\n      memoryInitialization = initialize_memory_000007dc(param5,param6,alignedAddress,alignedSize);\n      *memoryPointer = memoryInitialization;\n      memoryPointer[9] = alignedAddress;\n      memoryPointer[0xb] = size;\n      memoryPointer[10] = param7;\n      *(byte *)((int)memoryPointer + 5) = byteSize;\n      *(undefined *)(memoryPointer + 1) = 0;\n      memoryPointer[2] = 0;\n      memoryPointer[3] = 0;\n      memoryPointer[4] = 0;\n      initialize_param_00000fec(memoryPointer + 5,0);\n      memoryPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_value_00000698(memoryPointer,10);\n        if ((flags & 4) == 0) {\n          enable_interrupts_if_privileged_00000d0c(interruptStatus);\n          check_exception_threshold_00000738(byteSize);\n          return (int)index2;\n        }\n      }\n      else {\n        update_value_00000698(memoryPointer,1);\n      }\n      enable_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = (int)index2;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "allocate_memory_000010d4",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "byteSize",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interruptStatus",
                "uVar2": "memoryInitialization",
                "iVar3": "result",
                "uVar4": "alignedSize",
                "puVar5": "memoryPointer",
                "local_30": "bytesToAlign",
                "local_2c": "alignedAddress",
                "local_10": "loopCounter",
                "local_c": "index1",
                "local_a": "index2"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_setup_system_00001274",
            "code": "\nvoid initialize_and_setup_system_00001274(void)\n\n{\n  initialize_memory_and_registers();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_subsystem_1();\n  initialize_subsystem_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_setup_system_00001274",
                "initialize_memory_and_registers_0000258c": "initialize_memory_and_registers",
                "initialize_system_00001c84": "initialize_subsystem_1",
                "initialize_system_00002396": "initialize_subsystem_2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "handle_interrupt_and_return_0000129c",
            "code": "\nvoid handle_interrupt_and_return_0000129c(undefined4 handle)\n\n{\n  perform_interrupt_handling(handle,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "handle_interrupt_and_return_0000129c",
                "param_1": "handle",
                "handle_interrupt_00002434": "perform_interrupt_handling"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_and_interrupt_000012b4",
            "code": "\nundefined4 processAndInterrupt_000012b4(int originalParam,undefined unusedParam)\n\n{\n  undefined4 result;\n  \n  result = processParameter(originalParam + 4,unusedParam);\n  processInterrupt(originalParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_and_interrupt_000012b4",
                "param_1": "originalParam",
                "param_2": "unusedParam",
                "uVar1": "result",
                "process_parameter_00002364": "processParameter",
                "process_interrupt_000024bc": "processInterrupt"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_decrement_loop_000012e2",
            "code": "\nint copy_and_decrement_loop_000012e2(int input_ptr,undefined4 length,undefined4 value)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_decrement_0000231c(input_ptr + 4,length,value);\n    if (result != 0) break;\n    handle_interrupt_and_return_0000129c(input_ptr);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_decrement_loop_000012e2",
                "param_1": "input_ptr",
                "param_2": "length",
                "param_3": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_00001318",
            "code": "\nvoid setBit_00001318(byte input)\n\n{\n  *(int *)(((uint)(int)(char)input >> 5) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_00001318",
                "param_1": "input"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_set_bit_00001348",
            "code": "\nvoid check_and_set_bit_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_register_bit();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_set_bit_00001348",
                "set_bit_in_register_0000093c": "set_register_bit"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_new_value_00001360",
            "code": "\nint calculate_new_value_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_new_value_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_new_value_00001392",
            "code": "\nvoid setNewValue_00001392(undefined4 valuePointer,undefined newValue)\n\n{\n  undefined4 *newValuePointer;\n  \n  newValuePointer = (undefined4 *)calculate_new_value_00001360(valuePointer,newValue);\n  *newValuePointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_new_value_00001392",
                "param_1": "valuePointer",
                "param_2": "newValue",
                "puVar1": "newValuePointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "handle_kernel_panic_000013b8",
            "code": "\nundefined4 handleKernelPanic_000013b8(int errorCode,undefined4 configValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  undefined4 returnValue;\n  \n  if (errorCode != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + errorCode * 8) = newValue1;\n  *(undefined4 *)(&DAT_1fff0b70 + errorCode * 8) = newValue2;\n  update_values_00001448(errorCode);\n  set_new_value_00001392(*(undefined4 *)(&DAT_00006ffc + errorCode * 0x20),\n               *(undefined *)(errorCode * 0x20 + 0x7000));\n  if ((&DAT_00007002)[errorCode * 0x20] == '\\0') {\n    update_configuration_000014c4(errorCode,configValue);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "handle_kernel_panic_000013b8",
                "param_1": "errorCode",
                "param_2": "configValue",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_values_00001448",
            "code": "\nvoid updateValues_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    updateValueWithBits(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    updateValueWithBits(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_values_00001448",
                "param_1": "index",
                "update_value_with_bits_00001f80": "updateValueWithBits"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint value)\n\n{\n  byte *data;\n  uint offset;\n  uint scaledValue;\n  \n  data = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  offset = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data[3] = data[3] & 0xf3;\n  data[2] = (&DAT_00007001)[index * 0x20];\n  scaledValue = offset / (value << 4);\n  *data = (byte)(scaledValue >> 8) & 0x1f;\n  data[1] = (byte)scaledValue;\n  data[10] = (byte)((offset << 2) / value + 1 >> 1) & 0x1f;\n  data[0x10] = data[0x10] | 0x88;\n  if ((data[0x10] & 0x70) == 0) {\n    data[0x13] = 0;\n  }\n  else {\n    data[0x13] = (char)(2 << (data[0x10] >> 4 & 7)) - 1;\n  }\n  data[0x15] = 1;\n  data[0x11] = 0xc0;\n  data[3] = data[3] | 0x2c;\n  set_bit_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data",
                "uVar2": "offset",
                "uVar3": "scaledValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_pointer_000015d0",
            "code": "\nvoid copyDataToPointer_000015d0(int index,int sourceArray,uint size)\n\n{\n  int pointer;\n  uint iterator;\n  \n  pointer = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (iterator = 0; iterator < size; iterator = iterator + 1) {\n    do {\n    } while (-1 < *(char *)(pointer + 4));\n    *(undefined *)(pointer + 7) = *(undefined *)(iterator + sourceArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_pointer_000015d0",
                "param_1": "index",
                "param_2": "sourceArray",
                "param_3": "size",
                "iVar1": "pointer",
                "local_c": "iterator"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "process_data_00001628",
            "code": "\nvoid processData_00001628(int dataIndex)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + dataIndex * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + dataIndex * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + dataIndex * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + dataIndex * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + dataIndex * 0x20) + 7));\n  }\n  performBitCheck();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "process_data_00001628",
                "param_1": "dataIndex",
                "check_and_set_bit_00001348": "performBitCheck"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_data_processing_00001688",
            "code": "\nvoid initializeDataProcessing_00001688(void)\n\n{\n  processData(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_data_processing_00001688",
                "process_data_00001628": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint input,int multiplier)\n\n{\n  return multiplier * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_one_000016c8",
            "code": "\nvoid setOffsetToOne_000016c8(undefined4 inputParam1,undefined inputParam2)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001696(inputParam1,inputParam2);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_one_000016c8",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_one_000016ec",
            "code": "\nvoid setOffsetToOne_000016ec(undefined4 offset,undefined data)\n\n{\n  undefined *offsetPtr;\n  \n  offsetPtr = (undefined *)calculate_offset_00001696(offset,data);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_one_000016ec",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "initialize_memory_00001710",
            "code": "\nvoid initializeMemory_00001710(undefined4 offset,undefined data)\n\n{\n  undefined *memoryPointer;\n  \n  memoryPointer = (undefined *)calculate_offset_00001696(offset,data);\n  *memoryPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "initialize_memory_00001710",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "memoryPointer"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_memory_00001734",
            "code": "\nvoid initializeMemory_00001734(void)\n\n{\n  initializeMemory_00001734Helper(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_memory_00001734",
                "initialize_memory_00001710": "initializeMemoryHelper"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte inputValue)\n\n{\n  DAT_40064003 = inputValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  initialize_memory_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_memory_00001778"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  set_offset_to_one_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initialize_data_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_one(&DAT_40064001,0);\n  initialize_memory(&DAT_40064000,1);\n  initialize_memory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c",
                "set_offset_to_one_000016ec": "set_offset_to_one",
                "initialize_memory_00001710": "initialize_memory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_and_update_flags_000018bc",
            "code": "\nvoid initializeAndUpdateFlags_000018bc(void)\n\n{\n  update_flags_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  initializeMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_and_update_flags_000018bc",
                "initialize_memory_00001710": "initializeMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_memory_0000191c",
            "code": "\nvoid initializeMemory_0000191c(void)\n\n{\n  updateMemoryBlock();\n  setFlag(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_memory_0000191c",
                "update_memory_00001778": "updateMemoryBlock",
                "update_flags_00001748": "setFlag"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_flags_and_memory_00001960",
            "code": "\nvoid initializeFlagsAndMemory_00001960(void)\n\n{\n  updateFlags(0xa0);\n  initializeMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_flags_and_memory_00001960",
                "update_flags_00001748": "updateFlags",
                "initialize_memory_00001710": "initializeMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_and_check_memory_000019c0",
            "code": "\nvoid initializeAndCheckMemory_000019c0(void)\n\n{\n  updateMemory();\n  updateFlags(0x40);\n  initializeMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  initializeAdditionalMemory();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_and_check_memory_000019c0",
                "update_memory_00001778": "updateMemory",
                "update_flags_00001748": "updateFlags",
                "initialize_memory_00001710": "initializeMemory",
                "initialize_memory_00001734": "initializeAdditionalMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initialize_system_00001a18(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  initialize_memory_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_program_00001a3c",
            "code": "\nvoid initialize_program_00001a3c(void)\n\n{\n  set_offset_to_one_000016ec(&DAT_40064001,1);\n  initialize_memory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_program_00001a3c",
                "initialize_memory_00001734": "initialize_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_and_set_offset_00001a60",
            "code": "\nvoid initialize_and_set_offset_00001a60(void)\n\n{\n  initialize_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to_one_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_and_set_offset_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_00001b10",
            "code": "\nundefined4 initialize_00001b10(byte index)\n\n{\n  undefined4 result;\n  \n  if (index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_00001b10_and_update_flags_000018bc();\n        break;\n      case 1:\n        initialize_00001b10_memory_0000191c();\n        break;\n      case 2:\n        initialize_00001b10_flags_and_memory_00001960();\n        break;\n      case 3:\n        initialize_00001b10_and_check_memory_000019c0();\n        break;\n      case 4:\n        initialize_00001b10_system_00001a18();\n        break;\n      case 5:\n        initialize_00001b10_program_00001a3c();\n        break;\n      case 6:\n        initialize_00001b10_and_set_offset_00001a60();\n        break;\n      case 7:\n        initialize_00001b10_data_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (index != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_00001b10",
                "param_1": "index",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initialize_system_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    initialize_memory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    initialize_memory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  update_flags(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "initialize_memory_00001710": "initialize_memory",
                "update_flags_00001748": "update_flags"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = check_ir_qinterrupts_00000cd0();\n  initialize_system_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_data_0000182c();\n  initialize_memory_000017dc();\n  initialize_00001b10(7);\n  enable_interrupts_if_privileged_00000d0c(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_set_bit_00001cf0",
            "code": "\nvoid check_and_set_bit_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_bit_in_register();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_set_bit_00001cf0",
                "set_bit_in_register_0000093c": "set_bit_in_register"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_new_value_00001d08",
            "code": "\nint calculate_new_value_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_new_value_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_new_value_to_pointer_00001d3a",
            "code": "\nvoid setNewValueToPointer_00001d3a(undefined4 valueToUpdatePointer,undefined newValue)\n\n{\n  undefined4 *calculatedPointer;\n  \n  calculatedPointer = (undefined4 *)calculateNewValue(valueToUpdatePointer,newValue);\n  *calculatedPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_new_value_to_pointer_00001d3a",
                "param_1": "valueToUpdatePointer",
                "param_2": "newValue",
                "puVar1": "calculatedPointer",
                "calculate_new_value_00001d08": "calculateNewValue"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort output)\n\n{\n  return output & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "output"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint applyMask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lowest6_bits_00001dc0",
            "code": "\nushort extractLowest6Bits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lowest6_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_value_with_bits_00001ddc",
            "code": "\nvoid updateValueWithBits_00001ddc(undefined2 bitsParameter)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_00001da2(bitsParameter);\n  set_new_value_to_pointer_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_value_with_bits_00001ddc",
                "param_1": "bitsParameter",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_from_data_00001e0c",
            "code": "\nuint extract_bits_from_data_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_from_data_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int baseOffset,uint bitStart,int newValue)\n\n{\n  int bitShift;\n  \n  bitShift = (int)bitStart >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (bitShift + baseOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (bitShift + baseOffset * 4) * 4) & ~(0xf << ((bitStart & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (bitShift + baseOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (bitShift + baseOffset * 4) * 4) | newValue << ((bitStart & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "baseOffset",
                "param_2": "bitStart",
                "param_3": "newValue",
                "iVar1": "bitShift"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_bits_from_data_00001ec4",
            "code": "\nvoid updateBitsFromData_00001ec4(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_from_data_00001e0c(inputValue1,inputValue2);\n  update_bits_00001e44(inputValue1,inputValue2,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_bits_from_data_00001ec4",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_and_store_value_with_bits_00001eea",
            "code": "\nundefined4 updateAndStoreValueWithBits_00001eea(undefined2 valueToUpdate,byte bit)\n\n{\n  uint lowest6Bits;\n  int maskedValue;\n  int offset;\n  \n  update_value_with_bits_00001f80(valueToUpdate,0);\n  if ((char)bit < '\\0') {\n    lowest6Bits = extract_lowest6_bits_00001dc0(valueToUpdate);\n    maskedValue = apply_mask_00001d80(valueToUpdate);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) | 1 << (lowest6Bits & 0xff);\n  }\n  else {\n    lowest6Bits = extract_lowest6_bits_00001dc0(valueToUpdate);\n    maskedValue = apply_mask_00001d80(valueToUpdate);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) & ~(1 << (lowest6Bits & 0xff));\n  }\n  maskedValue = apply_mask_00001d5e(valueToUpdate);\n  offset = extract_lowest6_bits_00001dc0(valueToUpdate);\n  *(uint *)(maskedValue + offset * 4) = bit & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_and_store_value_with_bits_00001eea",
                "param_1": "valueToUpdate",
                "param_2": "bit",
                "uVar1": "lowest6Bits",
                "iVar2": "maskedValue",
                "iVar3": "offset"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_with_bits_00001f80",
            "code": "\nvoid updateValueWithBits_00001f80(undefined2 input,undefined4 newValue)\n\n{\n  int maskedIndex;\n  int bitValue;\n  undefined4 extractedBits;\n  undefined4 lowestBits;\n  uint storedValue;\n  \n  update_value_with_bits_00001ddc(input);\n  maskedIndex = apply_mask_00001d5e(input);\n  bitValue = extract_lowest6_bits_00001dc0(input);\n  storedValue = *(uint *)(maskedIndex + bitValue * 4);\n  maskedIndex = apply_mask_00001d5e(input);\n  bitValue = extract_lowest6_bits_00001dc0(input);\n  *(undefined4 *)(maskedIndex + bitValue * 4) = newValue;\n  if ((storedValue & 0xf0000) != 0) {\n    extractedBits = extract_bits_00001da2(input);\n    lowestBits = extract_lowest6_bits_00001dc0(input);\n    update_bits_from_data_00001ec4(extractedBits,lowestBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_with_bits_00001f80",
                "param_1": "input",
                "param_2": "newValue",
                "iVar1": "maskedIndex",
                "iVar2": "bitValue",
                "uVar3": "extractedBits",
                "uVar4": "lowestBits",
                "uVar5": "storedValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_in_mask_00001ff6",
            "code": "\nvoid setBitInMask_00001ff6(undefined2 input)\n\n{\n  uint bitPosition;\n  int maskedValue;\n  \n  bitPosition = extract_lowest6_bits_00001dc0(input);\n  maskedValue = apply_mask_00001d80(input);\n  *(int *)(maskedValue + 4) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_in_mask_00001ff6",
                "param_1": "input",
                "uVar1": "bitPosition",
                "iVar2": "maskedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int dataPtr,undefined4 param)\n\n{\n  int result;\n  uint flag;\n  uint bitIndex;\n  \n  flag = *(uint *)(dataPtr + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flag & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(dataPtr + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(dataPtr + 0xa0) = 1 << (bitIndex & 0xff);\n      result = extract_bits_from_data_00001e0c(param,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  check_and_set_bit_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "dataPtr",
                "param_2": "param",
                "iVar1": "result",
                "uVar2": "flag",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_data_processing_000020b8",
            "code": "\nvoid initializeDataProcessing_000020b8(void)\n\n{\n  processData(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_data_processing_000020b8",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "process_data_000020cc",
            "code": "\nvoid process_data_000020cc(void)\n\n{\n  process_data_000020cc_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "process_data_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_data_processing_000020e0",
            "code": "\nvoid initializeDataProcessing_000020e0(void)\n\n{\n  processData(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_data_processing_000020e0",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_data_processing_000020f4",
            "code": "\nvoid initializeDataProcessing_000020f4(void)\n\n{\n  processData(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_data_processing_000020f4",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_data_processing_00002108",
            "code": "\nvoid initializeDataProcessing_00002108(void)\n\n{\n  processData(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_data_processing_00002108",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_information_0000211c",
            "code": "\nvoid printProcessInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 pid;\n  int stackOffset;\n  int stackIndex;\n  dword currentStackOffset;\n  uint stackOffsetByte;\n  undefined4 *functionPointer;\n  undefined4 mainStackPointer;\n  undefined4 memoryAddress;\n  int lastValidOffset;\n  short index;\n  int totalStackOffset;\n  int totalPrintSize;\n  \n  pid = 0x515f;\n  totalPrintSize = 0;\n  totalStackOffset = 0;\n  initialize_and_update_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  lastValidOffset = find_last_valid_offset_000008b8();\n  memoryAddress = get_memory_address_0000091c();\n  mainStackPointer = get_main_stack_pointer_00000900();\n  initialize_and_update_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               lastValidOffset,memoryAddress,mainStackPointer);\n  totalPrintSize = totalPrintSize + 0x200;\n  if (0 < lastValidOffset) {\n    totalStackOffset = lastValidOffset + totalStackOffset;\n  }\n  for (index = 1; index < 0x21; index = index + 1) {\n    functionPointer = *(undefined4 **)(&DAT_1fff0358 + index * 4);\n    if (functionPointer != (undefined4 *)0x0) {\n      stackOffsetByte = (uint)*(byte *)(functionPointer + 1);\n      currentStackOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[stackOffsetByte];\n      stackIndex = (int)&pid + (uint)(8 < stackOffsetByte);\n      stackOffset = functionPointer[0xb];\n      totalPrintSize = stackOffset + totalPrintSize;\n      iVar1 = calculate_offset_000010a0(functionPointer[9]);\n      stackOffset = stackOffset - iVar1;\n      totalStackOffset = stackOffset + totalStackOffset;\n      initialize_and_update_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)functionPointer + 6),functionPointer[10],currentStackOffset,stackIndex,\n                   *(undefined *)((int)functionPointer + 5),functionPointer[0xb],stackOffset,functionPointer[9],*functionPointer);\n    }\n  }\n  initialize_and_update_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalPrintSize,totalStackOffset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_information_0000211c",
                "local_40": "pid",
                "local_3c": "stackOffset",
                "local_38": "stackIndex",
                "local_34": "currentStackOffset",
                "local_30": "stackOffsetByte",
                "local_2c": "functionPointer",
                "local_28": "mainStackPointer",
                "local_24": "memoryAddress",
                "local_20": "lastValidOffset",
                "local_1a": "index",
                "local_18": "totalStackOffset",
                "local_14": "totalPrintSize"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = find_last_valid_offset_000008b8();\n  local_24 = get_memory_address_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_parameter_difference_00002294",
            "code": "\nundefined checkParameterDifference_00002294(int ptr)\n\n{\n  undefined returnValue;\n  int variable1;\n  bool checkResult;\n  \n  variable1 = *(int *)(ptr + 4);\n  checkResult = *(int *)(ptr + 0xc) - *(int *)(ptr + 8) == variable1;\n  if (checkResult) {\n    variable1 = 1;\n  }\n  returnValue = (undefined)variable1;\n  if (!checkResult) {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_parameter_difference_00002294",
                "param_1": "ptr",
                "iVar2": "variable1",
                "bVar3": "checkResult",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid incrementAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint currentValue;\n  \n  currentValue = array[3];\n  array[3] = currentValue + 1;\n  *(undefined *)((currentValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_access_memory_000022f0",
            "code": "\nundefined incrementAndAccessMemory_000022f0(int *memoryAddress)\n\n{\n  uint previousValue;\n  \n  previousValue = memoryAddress[2];\n  memoryAddress[2] = previousValue + 1;\n  return *(undefined *)((previousValue & memoryAddress[1] - 1U) + *memoryAddress);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_access_memory_000022f0",
                "param_1": "memoryAddress",
                "uVar1": "previousValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_decrement_0000231c",
            "code": "\nint copy_and_decrement_0000231c(undefined4 source_ptr,undefined *dest_ptr,int num_elements)\n\n{\n  undefined element;\n  int equality_check_result;\n  undefined *current_dest_ptr;\n  int remaining_elements;\n  \n  current_dest_ptr = dest_ptr;\n  remaining_elements = num_elements;\n  while ((remaining_elements != 0 && (equality_check_result = check_equality_00002270(source_ptr), equality_check_result == 0))) {\n    element = increment_and_access_memory_000022f0(source_ptr);\n    *current_dest_ptr = element;\n    remaining_elements = remaining_elements + -1;\n    current_dest_ptr = current_dest_ptr + 1;\n  }\n  return num_elements - remaining_elements;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_decrement_0000231c",
                "param_1": "source_ptr",
                "param_2": "dest_ptr",
                "param_3": "num_elements",
                "uVar1": "element",
                "iVar2": "equality_check_result",
                "local_20": "current_dest_ptr",
                "local_14": "remaining_elements"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "process_parameter_00002364",
            "code": "\nundefined4 processParameter_00002364(undefined4 input,undefined data)\n\n{\n  int parameterDifference;\n  undefined4 result;\n  \n  parameterDifference = check_parameter_difference_00002294(input);\n  if (parameterDifference == 0) {\n    increment_and_store_value_000022be(input,data);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "process_parameter_00002364",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "parameterDifference",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  executeInterruptHandler(0);\n  displayWelcomeMessage(\"Welcome to RIOT!\");\n  returnValue = processInputLoop(0,buffer,0x80);\n  triggerSoftwareInterrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "execute_interrupt_handler_000023d0": "executeInterruptHandler",
                "process_and_format_data_00004db8": "displayWelcomeMessage",
                "process_input_loop_00002e6c": "processInputLoop",
                "uVar1": "returnValue",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "call_software_interrupt_000023c8",
            "code": "\nvoid callSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "call_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_interrupt_handler_000023d0",
            "code": "\nundefined4 execute_interrupt_handler_000023d0(undefined4 handler_param)\n\n{\n  undefined4 handler_result;\n  \n  if (DAT_1fff0d98 == 0) {\n    handler_result = call_software_interrupt_000023c8(1,handler_param,0);\n  }\n  else {\n    handler_result = 0;\n  }\n  return handler_result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_interrupt_handler_000023d0",
                "param_1": "handler_param",
                "uVar1": "handler_result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_and_assign_next_pointer_0000240c",
            "code": "\nundefined4 * extractAndAssignNextPointer_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*inputPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *inputPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_and_assign_next_pointer_0000240c",
                "param_1": "inputPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "handle_interrupt_00002434",
            "code": "\nundefined4 handleInterrupt_00002434(int *returnValue,int checkOnly)\n\n{\n  int tempValue;\n  undefined4 interruptStatus;\n  \n  interruptStatus = check_ir_qinterrupts_00000cd0();\n  tempValue = DAT_1fff03dc;\n  if (*returnValue == 0) {\n    *returnValue = -1;\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n    interruptStatus = 1;\n  }\n  else if (checkOnly == 0) {\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n    interruptStatus = 0;\n  }\n  else {\n    update_value_00000698(DAT_1fff03dc,2);\n    if (*returnValue == -1) {\n      *returnValue = tempValue + 8;\n      *(undefined4 *)*returnValue = 0;\n    }\n    else {\n      find_and_set_next_ptr_00001034(returnValue,tempValue);\n    }\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n    set_bit_in_register_0000093c();\n    interruptStatus = 1;\n  }\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00002434": "handle_interrupt_00002434",
                "param_1": "returnValue",
                "param_2": "checkOnly",
                "iVar1": "tempValue",
                "uVar2": "interruptStatus"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_interrupt_000024bc",
            "code": "\nvoid processInterrupt_000024bc(int *interruptStatus)\n\n{\n  undefined interruptThreshold;\n  undefined4 interruptFlags;\n  int nextPointer;\n  \n  interruptFlags = check_ir_qinterrupts_00000cd0();\n  if (*interruptStatus == 0) {\n    enable_interrupts_if_privileged_00000d0c(interruptFlags);\n  }\n  else if (*interruptStatus == -1) {\n    *interruptStatus = 0;\n    enable_interrupts_if_privileged_00000d0c(interruptFlags);\n  }\n  else {\n    nextPointer = extract_and_assign_next_pointer_0000240c(interruptStatus);\n    update_value_00000698(nextPointer + -8,10);\n    if (*interruptStatus == 0) {\n      *interruptStatus = -1;\n    }\n    interruptThreshold = *(undefined *)(nextPointer + -3);\n    enable_interrupts_if_privileged_00000d0c(interruptFlags);\n    check_exception_threshold_00000738(interruptThreshold);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_interrupt_000024bc",
                "param_1": "interruptStatus",
                "uVar1": "interruptThreshold",
                "uVar2": "interruptFlags",
                "iVar3": "nextPointer"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "store_value_in_memory_00002538",
            "code": "\nvoid storeValueInMemory_00002538(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "store_value_in_memory_00002538",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_and_registers_0000258c",
            "code": "\n\n\nvoid initializeMemoryAndRegisters_0000258c(void)\n\n{\n  uint count;\n  \n  _DAT_e000ed08 = 0;\n  storeValueInMemory(0xfffffffe,1);\n  storeValueInMemory(0xfffffffb,1);\n  for (count = 0; count < 0x66; count = count + 1) {\n    storeValueInMemory((int)(char)count,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_and_registers_0000258c",
                "local_c": "count",
                "store_value_in_memory_00002538": "storeValueInMemory"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "update_date_and_flags_00002600",
            "code": "\nundefined4 updateDateAndFlags_00002600(undefined4 inputDate)\n\n{\n  undefined4 updatedDate;\n  \n  updatedDate = calculate_updated_date_000047e4(inputDate);\n  set_flags_and_value_0000285c(updatedDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "update_date_and_flags_00002600",
                "param_1": "inputDate",
                "uVar1": "updatedDate"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "calculate_date_components_00002624",
            "code": "\nundefined4 calculateDateComponents_00002624(undefined4 input)\n\n{\n  undefined4 memoryAddress;\n  undefined4 stackVariable;\n  \n  memoryAddress = get_memory_address_0000281c();\n  stackVariable = 0;\n  calculate_date_components_0000443c(&memoryAddress,input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "calculate_date_components_00002624",
                "param_1": "input",
                "local_10": "memoryAddress",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_and_date_00002654",
            "code": "\nundefined4 initializeDataAndDate_00002654(undefined4 originalDate,undefined4 updatedDate,undefined4 additionalData)\n\n{\n  undefined4 updatedDate;\n  \n  updatedDate = calculateUpdatedDate(originalDate);\n  DAT_1fff0d9c = updatedDate;\n  initializeData(updatedDate,0x26f1,additionalData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_and_date_00002654",
                "param_1": "originalDate",
                "param_2": "updatedDate",
                "param_3": "additionalData",
                "uVar1": "updatedDate",
                "initialize_data_00002894": "initializeData",
                "calculate_updated_date_000047e4": "calculateUpdatedDate"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_date_components_00002690",
            "code": "\nundefined4 initializeDateComponents_00002690(undefined4 inputDate)\n\n{\n  undefined4 incrementedValue;\n  undefined4 zeroValue;\n  \n  incrementedValue = increment_value_000028f0();\n  zeroValue = 0;\n  calculate_date_components_0000443c(&incrementedValue,inputDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_date_components_00002690",
                "param_1": "inputDate",
                "local_10": "incrementedValue",
                "uStack_c": "zeroValue"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_flags_000026c0",
            "code": "\nvoid initialize_flags_000026c0(void)\n\n{\n  clear_flags_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_flags_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flags_000026d8",
            "code": "\nvoid initialize_flags_000026d8(void)\n\n{\n  set_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flags_000026d8",
                "set_flag_0000294c": "set_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "disable_interrupts_000026e4",
            "code": "\nvoid disable_interrupts_000026e4(void)\n\n{\n  disable_interrupts_000026e4_handler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "disable_interrupts_000026e4",
                "disable_interrupts_00002970": "disable_interrupts_handler"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 param)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "param"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_00002714",
            "code": "\nvoid setBit_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte inputByte,uint dataValue)\n\n{\n  if ((byte)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (byte)((dataValue & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)inputByte + -0x1fff1c00) = (byte)((dataValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "inputByte",
                "param_2": "dataValue",
                "char": "byte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_set_bit_00002798",
            "code": "\nvoid check_and_set_bit_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_bit_in_register_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_set_bit_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  setTerminationFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_0000294c": "setTerminationFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_flags_and_value_0000285c",
            "code": "\n\n\nvoid setFlagsAndValue_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_flags_and_value_0000285c",
                "param_1": "value"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initialize_data_00002894(int input_value,undefined4 value_1,undefined4 value_2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value_1;\n  DAT_1fff0da4 = value_2;\n  update_data_00002744(0x2e,10);\n  set_bit_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "input_value",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint incrementValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "disable_interrupts_00002970",
            "code": "\n\n\nvoid disableInterrupts_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "disable_interrupts_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "check_and_invoke_handlers_00002994",
            "code": "\n\n\nvoid check_and_invoke_handlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_and_set_bit_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "check_and_invoke_handlers_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_input_00002a00",
            "code": "\nvoid processInput_00002a00(undefined4 input)\n\n{\n  processInput_00002a00Function(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_input_00002a00",
                "param_1": "input",
                "process_input_00004cb4": "processInputFunction"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_parameter_value_00002a18",
            "code": "\nint findParameterValue_00002a18(int *parameterArray,undefined4 searchValue)\n\n{\n  int comparisonResult;\n  int *currentParameter;\n  undefined **rebootString;\n  uint iterationCount;\n  int *currentValue;\n  \n  currentParameter = parameterArray;\n  rebootString = &PTR_s_reboot_00007300;\n  iterationCount = 0;\n  do {\n    if (1 < iterationCount) {\n      return 0;\n    }\n    currentValue = (&currentParameter)[iterationCount];\n    if (currentValue != (int *)0x0) {\n      for (; *currentValue != 0; currentValue = currentValue + 3) {\n        comparisonResult = compare_bytes_00004e52(*currentValue,searchValue);\n        if (comparisonResult == 0) {\n          return currentValue[2];\n        }\n      }\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_parameter_value_00002a18",
                "param_1": "parameterArray",
                "param_2": "searchValue",
                "iVar1": "comparisonResult",
                "local_18": "currentParameter",
                "local_14": "rebootString",
                "local_10": "iterationCount",
                "local_c": "currentValue"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArray)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint currentIdx;\n  int *currentCommandData;\n  \n  initialize_and_update_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_and_format_data_00004db8(\"---------------------------------------\");\n  currentCommand = commandArray;\n  commandNames = &PTR_s_reboot_00007300;\n  for (currentIdx = 0; currentIdx < 2; currentIdx = currentIdx + 1) {\n    currentCommandData = (&currentCommand)[currentIdx];\n    if (currentCommandData != (int *)0x0) {\n      for (; *currentCommandData != 0; currentCommandData = currentCommandData + 3) {\n        initialize_and_update_data_00004c84(\"%-20s %s\\n\",*currentCommandData,currentCommandData[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArray",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "currentIdx",
                "local_c": "currentCommandData"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_string_00002b10",
            "code": "\nvoid processInputString_00002b10(undefined4 newValue,byte *inputString)\n\n{\n  int result;\n  byte *nextByte;\n  byte *tempArray [3];\n  code *tempFunction;\n  char **stringArray;\n  uint arraySize;\n  byte quoteCharacter;\n  char *currentChar;\n  char *innerString;\n  char **nextStringInArray;\n  uint currentIndex;\n  int escapeCount;\n  uint quoteCount;\n  byte *currentCharPtr;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  currentCharPtr = inputString;\n  while( true ) {\n    tempArray[0] = inputString;\n    tempArray[1] = (byte *)newValue;\n    if (0x20 < *currentCharPtr) {\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        quoteCharacter = *currentCharPtr;\n        do {\n          nextByte = currentCharPtr + 1;\n          if (*nextByte == 0) {\n            currentCharPtr = nextByte;\n            process_and_format_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextByte == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPtr = currentCharPtr + 2;\n            nextByte = currentCharPtr;\n            if (*currentCharPtr == 0) {\n              process_and_format_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = nextByte;\n        } while (quoteCharacter != *currentCharPtr);\n        if (0x20 < currentCharPtr[1]) {\n          process_and_format_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPtr == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPtr = currentCharPtr + 1;\n            if (*currentCharPtr == 0) {\n              process_and_format_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = currentCharPtr + 1;\n          if (*currentCharPtr == 0x22) {\n            process_and_format_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPtr);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentCharPtr == 0) break;\n    *currentCharPtr = 0;\n    currentCharPtr = currentCharPtr + 1;\n  }\n  if (quoteCount != 0) {\n    arraySize = quoteCount;\n    stringArray = (char **)((int)tempArray - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    stringArray[quoteCount] = (char *)0x0;\n    currentCharPtr = inputString;\n    for (currentIndex = 0; nextStringInArray = stringArray, currentIndex < quoteCount; currentIndex = currentIndex + 1) {\n      for (; *currentCharPtr == 0; currentCharPtr = currentCharPtr + 1) {\n      }\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        currentCharPtr = currentCharPtr + 1;\n      }\n      stringArray[currentIndex] = (char *)currentCharPtr;\n      for (; *currentCharPtr != 0; currentCharPtr = currentCharPtr + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*nextStringInArray != (char *)0x0)); nextStringInArray = nextStringInArray + 1) {\n      for (innerString = *nextStringInArray; *innerString != '\\0'; innerString = innerString + 1) {\n        if (*innerString == '\\') {\n          for (currentChar = innerString; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    tempFunction = (code *)find_parameter_value_00002a18(newValue,*stringArray);\n    if (tempFunction == (code *)0x0) {\n      result = compare_bytes_00004e52(&DAT_00007214,*stringArray);\n      if (result == 0) {\n        print_command_descriptions_00002a88(tempArray[1]);\n      }\n      else {\n        initialize_and_update_data_00004c84(\"shell: command not found: %s\\n\",*stringArray);\n      }\n    }\n    else {\n      (*tempFunction)(quoteCount,stringArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_string_00002b10",
                "param_1": "newValue",
                "param_2": "inputString",
                "iVar1": "result",
                "pbVar2": "nextByte",
                "local_48": "tempArray",
                "local_3c": "tempFunction",
                "local_38": "stringArray",
                "local_34": "arraySize",
                "local_2d": "quoteCharacter",
                "local_2c": "currentChar",
                "local_28": "innerString",
                "local_24": "nextStringInArray",
                "local_20": "currentIndex",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "currentCharPtr"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int maxSize)\n\n{\n  int data;\n  byte byteValue;\n  bool isFirstCharacter;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (maxSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    data = process_data_00004418();\n    if (data < 0) break;\n    if ((data == 0xd) || (data == 10)) {\n      *currentChar = 0;\n      process_input_00002a00(0xd);\n      process_input_00002a00(10);\n      isFirstCharacter = currentChar == inputBuffer;\n      if (isFirstCharacter) {\n        inputBuffer = (undefined *)0x1;\n      }\n      byteValue = (byte)inputBuffer;\n      if (!isFirstCharacter) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((data == 8) || (data == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        process_input_00002a00(8);\n        process_input_00002a00(0x20);\n        process_input_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)data;\n      process_input_00002a00(data);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "maxSize",
                "iVar1": "data",
                "bVar2": "byteValue",
                "bVar3": "isFirstCharacter",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_and_validate_relocations_00002e48",
            "code": "\nvoid initialize_and_validate_relocations_00002e48(void)\n\n{\n  process_input(0x3e);\n  process_input(0x20);\n  validate_relocations(*(undefined4 *)(relocation_array[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_and_validate_relocations_00002e48",
                "process_input_00002a00": "process_input",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "r_offset": "offset",
                "validate_relocations_000041d0": "validate_relocations"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_input_loop_00002e6c",
            "code": "\nvoid process_input_loop_00002e6c(undefined4 output_buffer,undefined4 input_buffer,undefined4 input_length)\n\n{\n  int result;\n  \n  initialize_and_validate_relocations_00002e48();\n  do {\n    result = process_input_00002d94(input_buffer,input_length);\n    if (result == 0) {\n      process_input_string_00002b10(output_buffer,input_buffer);\n    }\n    initialize_and_validate_relocations_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_input_loop_00002e6c",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_infinite_loop_00002e9c",
            "code": "\nundefined4 execute_infinite_loop_00002e9c(void)\n\n{\n  execute_infinite_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_infinite_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_information_00002eb4",
            "code": "\nundefined4 print_process_information_00002eb4(void)\n\n{\n  print_process_information_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_information_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_data_from_device_00002ecc",
            "code": "\nvoid readDataFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfoPtr)\n\n{\n  undefined4 className;\n  undefined4 deviceType;\n  undefined dataBuffer [8];\n  uint dataSize;\n  \n  dataSize = execute_function_00003d64(deviceInfoPtr,dataBuffer);\n  if ((int)dataSize < 1) {\n    initialize_and_update_data_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceInfoPtr + 8);\n    className = convert_param_to_class_name_000039e8(*(undefined *)(*(int *)(deviceInfoPtr + 0xc) + 8));\n    initialize_and_update_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,className);\n    display_data_object_00003694(dataBuffer,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfoPtr",
                "uVar1": "className",
                "uVar2": "deviceType",
                "auStack_1c": "dataBuffer",
                "local_14": "dataSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int data_count;\n  undefined4 *data_ptr;\n  \n  data_count = 0;\n  for (data_ptr = DAT_1fff0db0; data_ptr != (undefined4 *)0x0; data_ptr = (undefined4 *)*data_ptr) {\n    read_data_from_device_00002ecc(data_count,data_ptr);\n    process_and_format_data_00004db8(&DAT_00007380);\n    data_count = data_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "data_count",
                "local_c": "data_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 className;\n  int deviceCount;\n  undefined4 *devicePointer;\n  \n  devicePointer = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_and_format_data_00004db8(\"No devices found\");\n  }\n  else {\n    process_and_format_data_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; devicePointer != (undefined4 *)0x0; devicePointer = (undefined4 *)*devicePointer) {\n    className = convert_param_to_class_name_000039e8(*(undefined *)(devicePointer[3] + 8));\n    initialize_and_update_data_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,className,devicePointer[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "devicePointer",
                "uVar1": "className"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid processDeviceData_00002fe0(int argCount,undefined4 *argValues)\n\n{\n  int comparisonResult;\n  undefined4 numberValue;\n  \n  if (argCount < 3) {\n    initialize_and_update_data_00004c84(\"usage: %s %s <device id>|all\\n\",*argValues,argValues[1]);\n  }\n  else {\n    comparisonResult = compare_bytes_00004e52(argValues[2],&DAT_000073d4);\n    if (comparisonResult == 0) {\n      process_device_data_00002f30();\n    }\n    else {\n      numberValue = convert_string_to_number_00004042(argValues[2]);\n      comparisonResult = find_element_00003d24(numberValue);\n      if (comparisonResult == 0) {\n        process_and_format_data_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_data_from_device_00002ecc(numberValue,comparisonResult);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "argCount",
                "param_2": "argValues",
                "iVar1": "comparisonResult",
                "uVar2": "numberValue"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argCount,undefined4 *argList)\n\n{\n  undefined2 convertedValue;\n  undefined2 values [4];\n  uint valueCount;\n  int deviceIndex;\n  undefined4 deviceId;\n  int counter;\n  \n  if (argCount < 4) {\n    initialize_and_update_data_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argList,argList[1]);\n  }\n  else {\n    deviceId = convert_string_to_number_00004042(argList[2]);\n    deviceIndex = find_element_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      process_and_format_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_00004622(values,0,8);\n      if (5 < argCount) {\n        argCount = 6;\n      }\n      valueCount = argCount - 3;\n      for (counter = 0; counter < (int)valueCount; counter = counter + 1) {\n        convertedValue = convert_string_to_number_00004042(argList[counter + 3]);\n        values[counter] = convertedValue;\n      }\n      initialize_and_update_data_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      display_data_object_00003694(values,valueCount & 0xff);\n      valueCount = execute_function_00003d94(deviceIndex,values);\n      if ((int)valueCount < 1) {\n        if (valueCount == -0x86) {\n          initialize_and_update_data_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          initialize_and_update_data_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        initialize_and_update_data_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argCount",
                "param_2": "argList",
                "uVar1": "convertedValue",
                "auStack_20": "values",
                "local_18": "valueCount",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "counter"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_input_0000316c",
            "code": "\nundefined4 processInput_0000316c(int input,undefined4 *argv)\n\n{\n  int comparisonResult;\n  \n  if (input < 2) {\n    print_device_list_00002f74();\n  }\n  else {\n    comparisonResult = compare_bytes_00004e52(argv[1],&DAT_000074ec);\n    if (comparisonResult == 0) {\n      process_device_data_00002fe0(input,argv);\n    }\n    else {\n      comparisonResult = compare_bytes_00004e52(argv[1],\"write\");\n      if (comparisonResult == 0) {\n        write_to_device_0000305c(input,argv);\n      }\n      else {\n        initialize_and_update_data_00004c84(\"usage: %s read|write\\n\",*argv);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_input_0000316c",
                "param_1": "input",
                "param_2": "argv",
                "iVar1": "comparisonResult"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_and_format_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)elfRelArray + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_date_information_0000328c",
            "code": "\nundefined4 extractDateInformation_0000328c(undefined4 *dateString,int *dateComponents)\n\n{\n  int weekday;\n  int currentIndex;\n  short parsedValue;\n  \n  parsedValue = convert_string_to_number_00004f84(*dateString,&currentIndex,10);\n  dateComponents[5] = parsedValue + -0x76c;\n  parsedValue = convert_string_to_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateComponents[4] = parsedValue + -1;\n  parsedValue = convert_string_to_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateComponents[3] = (int)parsedValue;\n  parsedValue = convert_string_to_number_00004f84(dateString[1],&currentIndex,10);\n  dateComponents[2] = (int)parsedValue;\n  parsedValue = convert_string_to_number_00004f84(currentIndex + 1,&currentIndex,10);\n  dateComponents[1] = (int)parsedValue;\n  parsedValue = convert_string_to_number_00004f84(currentIndex + 1,&currentIndex,10);\n  *dateComponents = (int)parsedValue;\n  weekday = calculate_weekday_000031fc(dateComponents[5] + 0x76c,dateComponents[4] + 1,dateComponents[3]);\n  dateComponents[6] = weekday;\n  dateComponents[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_date_information_0000328c",
                "param_1": "dateString",
                "param_2": "dateComponents",
                "iVar1": "weekday",
                "local_10": "currentIndex",
                "local_a": "parsedValue"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  initialize_and_update_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTime[5] + 0x76c,dateTime[4] + 1,dateTime[3],\n               dateTime[2],dateTime[1],*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_and_print_date_time_000033c0",
            "code": "\nbool checkAndPrintDateTime_000033c0(void)\n\n{\n  int result;\n  undefined dateComponents [36];\n  \n  result = initializeDateComponents(dateComponents);\n  if (result != 0) {\n    processAndFormatData(\"rtc: error getting alarm\");\n  }\n  else {\n    printDateTime(dateComponents);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_and_print_date_time_000033c0",
                "auStack_2c": "dateComponents",
                "initialize_date_components_00002690": "initializeDateComponents",
                "iVar1": "result",
                "process_and_format_data_00004db8": "processAndFormatData",
                "print_date_time_00003378": "printDateTime"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "check_alarm_000033f4",
            "code": "\nundefined4 checkAlarm_000033f4(undefined4 inputParameter)\n\n{\n  int extractResult;\n  undefined4 returnValue;\n  undefined dateInfoArray [36];\n  \n  extractResult = extract_date_information_0000328c(inputParameter,dateInfoArray);\n  if (extractResult == 0) {\n    extractResult = initialize_data_and_date_00002654(dateInfoArray,0x31e1,0);\n    if (extractResult == -1) {\n      process_and_format_data_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "check_alarm_000033f4",
                "param_1": "inputParameter",
                "iVar1": "extractResult",
                "uVar2": "returnValue",
                "auStack_2c": "dateInfoArray"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = extract_date_information_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_and_date_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_date_time_00003444",
            "code": "\nbool getAndPrintDateTime_00003444(void)\n\n{\n  int error;\n  undefined dateComponents [36];\n  \n  error = calculate_date_components_00002624(dateComponents);\n  if (error != 0) {\n    process_and_format_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(dateComponents);\n  }\n  return error != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_date_time_00003444",
                "iVar1": "error",
                "auStack_2c": "dateComponents"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "handle_date_information_00003478",
            "code": "\nundefined4 handleDateInformation_00003478(undefined4 inputDate)\n\n{\n  int dateExtractionResult;\n  undefined4 returnStatus;\n  undefined dateInformationBuffer [36];\n  \n  dateExtractionResult = extract_date_information_0000328c(inputDate,dateInformationBuffer);\n  if (dateExtractionResult == 0) {\n    dateExtractionResult = update_date_and_flags_00002600(dateInformationBuffer);\n    if (dateExtractionResult == -1) {\n      process_and_format_data_00004db8(\"rtc: error setting time\");\n      returnStatus = 1;\n    }\n    else {\n      returnStatus = 0;\n    }\n  }\n  else {\n    returnStatus = 1;\n  }\n  return returnStatus;\n}\n\n",
            "renaming": {
                "FUN_00003478": "handle_date_information_00003478",
                "param_1": "inputDate",
                "iVar1": "dateExtractionResult",
                "uVar2": "returnStatus",
                "auStack_2c": "dateInformationBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = extract_date_information_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = update_date_and_flags_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_message_000034c0",
            "code": "\nundefined4 printUsageMessage_000034c0(void)\n\n{\n  process_and_format_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_and_format_data_00004db8(\"commands:\");\n  process_and_format_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_and_format_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_and_format_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_and_format_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_and_format_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_and_format_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_and_format_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_message_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "process_command_00003524",
            "code": "\nundefined4 processCommand_00003524(int numArguments,int commandArray)\n\n{\n  int comparisonResult;\n  undefined4 returnValue;\n  \n  if (numArguments < 2) {\n    print_usage_message_000034c0();\n    returnValue = 1;\n  }\n  else {\n    comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"poweron\",7);\n    if (comparisonResult == 0) {\n      initialize_flags_000026d8();\n    }\n    else {\n      comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"poweroff\",8);\n      if (comparisonResult == 0) {\n        disable_interrupts_000026e4();\n      }\n      else {\n        comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"clearalarm\",8);\n        if (comparisonResult == 0) {\n          initialize_flags_000026c0();\n        }\n        else {\n          comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"getalarm\",8);\n          if (comparisonResult == 0) {\n            check_and_print_date_time_000033c0();\n          }\n          else {\n            comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"setalarm\",8);\n            if ((comparisonResult == 0) && (numArguments == 4)) {\n              check_alarm_000033f4(commandArray + 8);\n            }\n            else {\n              comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"gettime\",7);\n              if (comparisonResult == 0) {\n                get_and_print_date_time_00003444();\n              }\n              else {\n                comparisonResult = compare_bytes_00004e66(*(undefined4 *)(commandArray + 4),\"settime\",7);\n                if ((comparisonResult != 0) || (numArguments != 4)) {\n                  initialize_and_update_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandArray + 4));\n                  print_usage_message_000034c0();\n                  return 1;\n                }\n                handle_date_information_00003478(commandArray + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "process_command_00003524",
                "param_1": "numArguments",
                "param_2": "commandArray",
                "iVar1": "comparisonResult",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_with_sync_barriers_00003658",
            "code": "\nvoid infiniteLoopWithSyncBarriers_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_with_sync_barriers_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_infinite_loop_00003688",
            "code": "\nvoid executeInfiniteLoop_00003688(void)\n\n{\n  infiniteLoopWithSyncBarriers();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_infinite_loop_00003688",
                "infinite_loop_with_sync_barriers_00003658": "infiniteLoopWithSyncBarriers"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataAddress,byte dataSize)\n\n{\n  undefined4 memoryAddress;\n  char characterCode;\n  uint bitMask;\n  bool bitSet;\n  undefined numberString [8];\n  int stringLength;\n  char character;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataSize)) {\n    process_and_format_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    initialize_and_update_data_00004c84(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        bitSet = bitMask != 0;\n        if (bitSet) {\n          bitMask = 1;\n        }\n        characterCode = (char)bitMask;\n        if (!bitSet) {\n          characterCode = '\\0';\n        }\n        if (characterCode == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = get_character_code_00003918((int)*(char *)(dataAddress + 7));\n      }\n      initialize_and_update_data_00004c84(&DAT_000077bc);\n      if (dataSize < 2) {\n        initialize_and_update_data_00004c84(\"     \");\n      }\n      else {\n        initialize_and_update_data_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          initialize_and_update_data_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          stringLength = convert_number_to_string_00003e9e(numberString,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          numberString[stringLength] = 0;\n          initialize_and_update_data_00004c84(&DAT_000077dc,numberString);\n        }\n        else {\n          initialize_and_update_data_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        initialize_and_update_data_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),character);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataAddress + 6));\n      initialize_and_update_data_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "memoryAddress",
                "cVar2": "characterCode",
                "uVar3": "bitMask",
                "bVar4": "bitSet",
                "auStack_18": "numberString",
                "local_10": "stringLength",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_character_code_00003918",
            "code": "\nundefined4 getCharacterCode_00003918(undefined input)\n\n{\n  undefined4 result;\n  \n  switch(input) {\n  case 2:\n    result = 0x68;\n    break;\n  case 3:\n    result = 0x6b;\n    break;\n  case 6:\n    result = 0x4d;\n    break;\n  case 9:\n    result = 0x47;\n    break;\n  case 0xc:\n    result = 0x54;\n    break;\n  case 0xf:\n    result = 0x50;\n    break;\n  case 0xf1:\n    result = 0x66;\n    break;\n  default:\n    result = 0;\n    break;\n  case 0xf4:\n    result = 0x70;\n    break;\n  case 0xf7:\n    result = 0x6e;\n    break;\n  case 0xfa:\n    result = 0x75;\n    break;\n  case 0xfd:\n    result = 0x6d;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_character_code_00003918",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "convert_param_to_class_name_000039e8",
            "code": "\nchar * convertParamToClassName_000039e8(char param)\n\n{\n  char *className;\n  \n  switch(param) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (param == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "convert_param_to_class_name_000039e8",
                "param_1": "param",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int elementCount)\n\n{\n  int counter;\n  undefined4 *currentElement;\n  \n  counter = 0;\n  for (currentElement = DAT_1fff0db0; (counter < elementCount && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    counter = counter + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "elementCount",
                "local_10": "counter",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int parameter,undefined4 input)\n\n{\n  undefined4 returnValue;\n  \n  if (parameter == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(parameter + 0xc))(*(undefined4 *)(parameter + 4),input);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "parameter",
                "param_2": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 argument)\n\n{\n  undefined4 result;\n  \n  if (functionPointer == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),argument);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "argument",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int startValue,uint number)\n\n{\n  uint remainder;\n  char *string;\n  uint factor;\n  int numDigits;\n  \n  numDigits = 1;\n  if (number < 1000000000) {\n    for (factor = 10; factor <= number; factor = factor * 10) {\n      numDigits = numDigits + 1;\n    }\n  }\n  else {\n    numDigits = 10;\n  }\n  if (startValue != 0) {\n    string = (char *)(numDigits + startValue);\n    remainder = number;\n    do {\n      string = string + -1;\n      *string = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return numDigits;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "startValue",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "string",
                "local_10": "factor",
                "local_c": "numDigits"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "digit_count_00003e58",
            "code": "\nint digitCount_00003e58(undefined *inputString,int inputNumber)\n\n{\n  int digitCount_00003e58;\n  int absInputNumber;\n  undefined *modifiedInputString;\n  \n  absInputNumber = inputNumber;\n  modifiedInputString = inputString;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputString != (undefined *)0x0) {\n      modifiedInputString = inputString + 1;\n      *inputString = 0x2d;\n    }\n    absInputNumber = -inputNumber;\n  }\n  digitCount_00003e58 = count_digits_00003dc4(modifiedInputString,absInputNumber);\n  return -(inputNumber >> 0x1f) + digitCount_00003e58;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "digit_count_00003e58",
                "param_1": "inputString",
                "param_2": "inputNumber",
                "iVar1": "digitCount",
                "local_18": "absInputNumber",
                "local_14": "modifiedInputString"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "convert_number_to_string_00003e9e",
            "code": "\nundefined4 convertNumberToString_00003e9e(undefined4 inputNumber,short base,undefined4 stringResult)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = convert_number_to_string_with_base_00003ec4(inputNumber,(int)base,stringResult);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "convert_number_to_string_00003e9e",
                "param_1": "inputNumber",
                "param_2": "base",
                "param_3": "stringResult",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_number_to_string_with_base_00003ec4",
            "code": "\nint convertNumberToStringWithBase_00003ec4(undefined *outputString,uint number,int base)\n\n{\n  int count;\n  undefined4 digitCount;\n  uint quotient;\n  int remainder;\n  int totalCount;\n  \n  if (base + 7 < 0 != SCARRY4(base,7)) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalCount = 0;\n  if (base == 0) {\n    totalCount = digit_count_00003e58(outputString,number);\n  }\n  else if (base < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + base * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + base * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (outputString != (undefined *)0x0) {\n        *outputString = 0x2d;\n      }\n      totalCount = 1;\n    }\n    if (outputString == (undefined *)0x0) {\n      count = digit_count_00003e58(0,quotient);\n      totalCount = count + 1 + totalCount;\n    }\n    else {\n      count = digit_count_00003e58(outputString + totalCount,quotient);\n      count = totalCount + count;\n      totalCount = count + 1;\n      outputString[count] = 0x2e;\n      digitCount = digit_count_00003e58(outputString + totalCount,remainder);\n      copy_and_fill_memory_00003ff4(outputString + totalCount,digitCount,-base,0x30);\n    }\n    totalCount = -base + totalCount;\n  }\n  else {\n    totalCount = digit_count_00003e58(outputString,number);\n    if (outputString != (undefined *)0x0) {\n      fill_memory_00004622(outputString + totalCount,0x30,base);\n    }\n    totalCount = base + totalCount;\n  }\n  return totalCount;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_number_to_string_with_base_00003ec4",
                "param_1": "outputString",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "count",
                "uVar2": "digitCount",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalCount"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int offset,uint startAddress,uint endAddress,undefined fillValue)\n\n{\n  uint newEndAddress;\n  \n  newEndAddress = startAddress;\n  if ((startAddress < endAddress) && (newEndAddress = endAddress, offset != 0)) {\n    copy_within_range_000045ee((endAddress - startAddress) + offset,offset,startAddress);\n    fill_memory_00004622(offset,fillValue,endAddress - startAddress);\n  }\n  return newEndAddress;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "offset",
                "param_2": "startAddress",
                "param_3": "endAddress",
                "param_4": "fillValue",
                "uVar1": "newEndAddress"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "convert_string_to_number_00004042",
            "code": "\nvoid convertStringToNumber_00004042(undefined4 inputString)\n\n{\n  convert_string_to_number_00004f84(inputString,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "convert_string_to_number_00004042",
                "param_1": "inputString"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data_ptr,int *info_ptr)\n\n{\n  int index;\n  int *ptr1;\n  uint value;\n  ushort flag;\n  int temp;\n  code *callback_func;\n  int count;\n  uint temp_value;\n  bool is_zero;\n  \n  flag = *(ushort *)(info_ptr + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    index = info_ptr[4];\n    if (index != 0) {\n      temp = value << 0x1e;\n      is_zero = temp == 0;\n      count = *info_ptr;\n      if (is_zero) {\n        temp = info_ptr[5];\n      }\n      *info_ptr = index;\n      if (!is_zero) {\n        temp = 0;\n      }\n      info_ptr[2] = temp;\n      for (count = count - index; 0 < count; count = count - temp) {\n        temp = (*(code *)info_ptr[10])(data_ptr,info_ptr[8],index,count);\n        if (temp < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        index = index + temp;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    callback_func = (code *)info_ptr[0xb];\n    if (callback_func == (code *)0x0) {\n      return 0;\n    }\n    temp_value = *data_ptr;\n    *data_ptr = 0;\n    if ((flag & 0x1000) == 0) {\n      index = (*callback_func)(data_ptr,info_ptr[8],value & 0x1000,1);\n      if ((index == -1) && (value = *data_ptr, value != 0)) {\n        if ((value == 0x1d) || (value == 0x16)) {\n          *data_ptr = temp_value;\n          return 0;\n        }\n        flag = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      index = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (index = index - info_ptr[1], info_ptr[0xd] != 0)) {\n      index = index - info_ptr[0x10];\n    }\n    index = (*(code *)info_ptr[0xb])(data_ptr,info_ptr[8],index,0);\n    flag = *(ushort *)(info_ptr + 3);\n    if ((index == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((index != -1 || (*data_ptr == 0)))) {\n      info_ptr[0x15] = index;\n    }\n    ptr1 = (int *)info_ptr[0xd];\n    *data_ptr = temp_value;\n    if (ptr1 != (int *)0x0) {\n      if (ptr1 != info_ptr + 0x11) {\n        initialize_data_00004b34(data_ptr);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "iVar1": "index",
                "piVar2": "ptr1",
                "uVar3": "value",
                "uVar4": "flag",
                "iVar5": "temp",
                "pcVar6": "callback_func",
                "iVar7": "count",
                "uVar8": "temp_value",
                "bVar9": "is_zero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "validate_data_00004158",
            "code": "\nundefined4 validateData_00004158(int dataPointer,undefined4 *dataObject)\n\n{\n  undefined4 result;\n  \n  if (dataObject[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      initialize_system_000042a4();\n    }\n    if (dataObject == &DAT_000079b8) {\n      dataObject = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (dataObject == (undefined4 *)&DAT_000079d8) {\n      dataObject = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (dataObject == (undefined4 *)&DAT_00007998) {\n      dataObject = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(dataObject + 3) != 0) {\n      if ((-1 < (int)(dataObject[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataObject + 3) << 0x16)) {\n        FUNC_000045e8(dataObject[0x16]);\n      }\n      result = processDataInternal(dataPointer,dataObject);\n      if ((int)(dataObject[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(dataObject + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(dataObject[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "validate_data_00004158",
                "param_1": "dataPointer",
                "param_2": "dataObject",
                "uVar1": "result",
                "process_data_0000404c": "processDataInternal"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "validate_relocations_000041d0",
            "code": "\nuint validate_relocations_000041d0(int relocation_count,undefined4 relocation_offset,undefined4 relocation_addr)\n\n{\n  uint validation_result;\n  int increment;\n  dword *rel_array;\n  int rel_offset;\n  uint combined_result;\n  int count;\n  undefined4 *data_ptr;\n  \n  if (relocation_count == 0) {\n    data_ptr = &DAT_000079f8;\n    rel_array = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      count = rel_array[1];\n      rel_offset = rel_array[2];\n      while (count = count + -1, -1 < count) {\n        if ((1 < *(ushort *)(rel_offset + 0xc)) && (increment = *(short *)(rel_offset + 0xe) + 1, increment != 0)) {\n          validation_result = validate_data_00004158(0x1fff0284,rel_offset,relocation_addr,increment,data_ptr);\n          combined_result = combined_result | validation_result;\n        }\n        rel_offset = rel_offset + 0x68;\n      }\n      rel_array = (dword *)*rel_array;\n    } while (rel_array != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = validate_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,relocation_count);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "validate_relocations_000041d0",
                "param_1": "relocation_count",
                "param_2": "relocation_offset",
                "param_3": "relocation_addr",
                "uVar1": "validation_result",
                "iVar2": "increment",
                "pdVar3": "rel_array",
                "iVar4": "rel_offset",
                "uVar5": "combined_result",
                "iVar6": "count",
                "puVar7": "data_ptr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[6] = 0;\n  fill_memory_00004622(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[0xb] = 0x4e27;\n  memory[8] = memory;\n  memory[0xc] = &functionPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_00004e4a_1": "functionPointer"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocate_and_initialize_memory_00004248(undefined4 memory_size,int number_of_blocks)\n\n{\n  undefined4 *memory_block_pointer;\n  int block_size;\n  \n  block_size = (number_of_blocks + -1) * 0x68;\n  memory_block_pointer = (undefined4 *)allocate_memory_block_00004bd0(memory_size,block_size + 0x74);\n  if (memory_block_pointer != (undefined4 *)0x0) {\n    *memory_block_pointer = 0;\n    memory_block_pointer[1] = number_of_blocks;\n    memory_block_pointer[2] = memory_block_pointer + 3;\n    fill_memory_00004622(memory_block_pointer + 3,0,block_size + 0x68);\n  }\n  return memory_block_pointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "memory_size",
                "param_2": "number_of_blocks",
                "puVar1": "memory_block_pointer",
                "iVar2": "block_size"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_system_0000428c",
            "code": "\nvoid initializeSystem_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_system_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_system_000042a4",
            "code": "\nvoid initializeSystem_000042a4(int memoryAddress)\n\n{\n  undefined4 flag;\n  \n  initializeSystem_000042a4();\n  if (*(int *)(memoryAddress + 0x18) == 0) {\n    *(undefined4 *)(memoryAddress + 0x48) = 0;\n    *(undefined4 *)(memoryAddress + 0x4c) = 0;\n    *(undefined4 *)(memoryAddress + 0x50) = 0;\n    flag = 0x1fff0284;\n    *(undefined **)(memoryAddress + 0x28) = &DAT_0000423d;\n    if (memoryAddress == 0x1fff0284) {\n      flag = 1;\n    }\n    if (memoryAddress == 0x1fff0284) {\n      *(undefined4 *)(memoryAddress + 0x18) = flag;\n    }\n    flag = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 4) = flag;\n    flag = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 8) = flag;\n    flag = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 0xc) = flag;\n    initializeMemory(*(undefined4 *)(memoryAddress + 4),4,0);\n    initializeMemory(*(undefined4 *)(memoryAddress + 8),9,1);\n    initializeMemory(*(undefined4 *)(memoryAddress + 0xc),0x12,2);\n    *(undefined4 *)(memoryAddress + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_system_000042a4",
                "param_1": "memoryAddress",
                "uVar1": "flag",
                "initialize_system_0000428c": "initializeSystem",
                "initialize_and_allocate_memory_00004314": "initializeAndAllocateMemory",
                "initialize_memory_000041f4": "initializeMemory"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_and_allocate_memory_00004314",
            "code": "\nundefined4 * initialize_and_allocate_memory_00004314(undefined4 *result)\n\n{\n  dword allocated_memory;\n  int remaining_iterations;\n  undefined4 *current_ptr;\n  dword *current_rel_info;\n  \n  initialize_data_section();\n  if (rel_array[19].r_info == 0) {\n    initialize_system_000042a4(0x1fff0284);\n  }\n  current_rel_info = &rel_array[0x19].r_info;\n  do {\n    remaining_iterations = current_rel_info[1];\n    current_ptr = (undefined4 *)current_rel_info[2];\n    while (remaining_iterations = remaining_iterations + -1, -1 < remaining_iterations) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        current_ptr[3] = 0xffff0001;\n        current_ptr[0x19] = 0;\n        FUNC_000045e4(current_ptr + 0x16);\n        initialize_data_section();\n        current_ptr[1] = 0;\n        current_ptr[2] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        *current_ptr = 0;\n        current_ptr[6] = 0;\n        fill_memory(current_ptr + 0x17,0,8);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*current_rel_info == 0) {\n      allocated_memory = allocate_and_initialize_memory(result,4);\n      *current_rel_info = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data_section();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    current_rel_info = (dword *)*current_rel_info;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_and_allocate_memory_00004314",
                "param_1": "result",
                "dVar1": "allocated_memory",
                "iVar2": "remaining_iterations",
                "puVar3": "current_ptr",
                "pdVar4": "current_rel_info",
                "initialize_data_00004274": "initialize_data_section",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "initialize_data_00004280": "initialize_data_section",
                "fill_memory_00004622": "fill_memory",
                "allocate_and_initialize_memory_00004248": "allocate_and_initialize_memory"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_and_execute_functions_000043a0",
            "code": "\nuint find_and_execute_functions_000043a0(int starting_address,code *function_pointer)\n\n{\n  uint uVar1;\n  int *function_descriptor;\n  int current_function_address;\n  uint result;\n  int function_count;\n  \n  function_descriptor = (int *)(starting_address + 0x48);\n  result = 0;\n  do {\n    function_count = function_descriptor[1];\n    current_function_address = function_descriptor[2];\n    while (function_count = function_count + -1, -1 < function_count) {\n      if ((1 < *(ushort *)(current_function_address + 0xc)) && (*(short *)(current_function_address + 0xe) != -1)) {\n        uVar1 = (*function_pointer)(current_function_address);\n        result = result | uVar1;\n      }\n      current_function_address = current_function_address + 0x68;\n    }\n    function_descriptor = (int *)*function_descriptor;\n  } while (function_descriptor != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_and_execute_functions_000043a0",
                "param_1": "starting_address",
                "param_2": "function_pointer",
                "piVar2": "function_descriptor",
                "iVar3": "current_function_address",
                "uVar4": "result",
                "iVar5": "function_count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint process_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **data_ptr;\n  byte *byte_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_system_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_system_000042a4();\n  }\n  if (data_ptr == (byte **)&DAT_000079b8) {\n    data_ptr = *(byte ***)(offset + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_000079d8) {\n    data_ptr = *(byte ***)(offset + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_00007998) {\n    data_ptr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  byte_ptr = data_ptr[1];\n  data_ptr[1] = byte_ptr + -1;\n  if ((int)(byte_ptr + -1) < 0) {\n    result = process_data_00004418_00005e10(offset,data_ptr);\n  }\n  else {\n    byte_ptr = *data_ptr;\n    *data_ptr = byte_ptr + 1;\n    result = (uint)*byte_ptr;\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "data_ptr",
                "pbVar4": "byte_ptr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *dateValues,uint *resultComponents)\n\n{\n  int optimizedValue;\n  uint days;\n  uint totalSeconds;\n  uint years;\n  uint leapYears;\n  undefined4 firstParam;\n  undefined4 secondParam;\n  uint totalDays;\n  bool isNegative;\n  \n  firstParam = *dateValues;\n  secondParam = dateValues[1];\n  optimizedValue = optimize_param_range_00006974(firstParam,secondParam,0x15180,0);\n  totalSeconds = 0x15180;\n  optimize_param_range_00006974(firstParam,secondParam,0x15180,0);\n  isNegative = (int)totalSeconds < 0;\n  if (isNegative) {\n    totalSeconds = totalSeconds + 0x15180;\n  }\n  if (isNegative) {\n    days = optimizedValue + 0xafa6b;\n  }\n  else {\n    days = optimizedValue + 0xafa6c;\n  }\n  resultComponents[2] = totalSeconds / 0xe10;\n  resultComponents[1] = (totalSeconds % 0xe10) / 0x3c;\n  *resultComponents = (totalSeconds % 0xe10) % 0x3c;\n  resultComponents[6] = (days + 3) % 7;\n  totalSeconds = days;\n  if ((int)days < 0) {\n    totalSeconds = days - 0x23ab0;\n  }\n  days = (totalSeconds / 0x23ab1) * -0x23ab1 + days;\n  years = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  leapYears = years / 0x16d;\n  days = (leapYears / 100 - years / 0x5b4) + days + leapYears * -0x16d;\n  totalDays = days * 5 + 2;\n  years = totalDays / 0x99;\n  if (totalDays < 0x5fa) {\n    optimizedValue = 2;\n  }\n  else {\n    optimizedValue = -10;\n  }\n  totalDays = years + optimizedValue;\n  optimizedValue = (totalSeconds / 0x23ab1) * 400 + leapYears;\n  if (totalDays < 2) {\n    optimizedValue = optimizedValue + 1;\n  }\n  if (days < 0x132) {\n    if (((leapYears & 3) == 0) && (leapYears != (leapYears / 100) * 100)) {\n      totalSeconds = 1;\n    }\n    else {\n      totalSeconds = (uint)(leapYears % 400 == 0);\n    }\n    totalSeconds = days + 0x3b + totalSeconds;\n  }\n  else {\n    totalSeconds = days - 0x132;\n  }\n  resultComponents[7] = totalSeconds;\n  resultComponents[3] = (days + 1) - (years * 0x99 + 2) / 5;\n  resultComponents[4] = totalDays;\n  resultComponents[5] = optimizedValue - 0x76c;\n  resultComponents[8] = 0;\n  return resultComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "dateValues",
                "param_2": "resultComponents",
                "iVar1": "optimizedValue",
                "uVar2": "days",
                "uVar3": "totalSeconds",
                "uVar4": "years",
                "uVar5": "leapYears",
                "uVar6": "firstParam",
                "uVar7": "secondParam",
                "uVar8": "totalDays",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_kernel_functions_0000459c",
            "code": "\nvoid executeKernelFunctions_0000459c(void)\n\n{\n  code **functionPointer;\n  int index;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  handle_kernel_panic_00000410();\n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_kernel_functions_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_within_range_000045ee",
            "code": "\nvoid copyWithinRange_000045ee(undefined *dest,undefined *src,int size)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + size;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + size;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_within_range_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *destination,undefined value,int length)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + length;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *date,uint daysToAdd,undefined4 leapYearFlag)\n\n{\n  int daysInMonth;\n  uint currentDay;\n  uint currentMonth;\n  int currentYear;\n  bool isLeapYear;\n  uint *quotient;\n  uint remainder;\n  undefined4 leapYearIncrement;\n  \n  quotient = date;\n  remainder = daysToAdd;\n  leapYearIncrement = leapYearFlag;\n  if (0x3b < *date) {\n    divide_and_remainder_00005584(&quotient,*date,0x3c);\n    currentDay = date[1] + (int)quotient;\n    date[1] = currentDay;\n    if ((int)remainder < 0) {\n      currentDay = currentDay - 1;\n      *date = remainder + 0x3c;\n    }\n    else {\n      *date = remainder;\n    }\n    if ((int)remainder < 0) {\n      date[1] = currentDay;\n    }\n  }\n  if (0x3b < date[1]) {\n    divide_and_remainder_00005584(&quotient,date[1],0x3c);\n    isLeapYear = (int)remainder < 0;\n    currentMonth = date[2] + (int)quotient;\n    date[2] = currentMonth;\n    currentDay = remainder;\n    if (isLeapYear) {\n      currentDay = remainder + 0x3c;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isLeapYear) {\n      date[1] = currentDay;\n    }\n    if (isLeapYear) {\n      date[1] = currentDay;\n    }\n    if (isLeapYear) {\n      date[2] = currentMonth;\n    }\n  }\n  if (0x17 < date[2]) {\n    divide_and_remainder_00005584(&quotient,date[2],0x18);\n    isLeapYear = (int)remainder < 0;\n    currentMonth = date[3] + (int)quotient;\n    date[3] = currentMonth;\n    currentDay = remainder;\n    if (isLeapYear) {\n      currentDay = remainder + 0x18;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isLeapYear) {\n      date[2] = currentDay;\n    }\n    if (isLeapYear) {\n      date[2] = currentDay;\n    }\n    if (isLeapYear) {\n      date[3] = currentMonth;\n    }\n  }\n  if (0xb < date[4]) {\n    divide_and_remainder_00005584(&quotient,date[4],0xc);\n    isLeapYear = (int)remainder < 0;\n    currentDay = date[5] + (int)quotient;\n    date[5] = currentDay;\n    if (isLeapYear) {\n      remainder = remainder + 0xc;\n      currentDay = currentDay - 1;\n    }\n    if (!isLeapYear) {\n      date[4] = remainder;\n    }\n    if (isLeapYear) {\n      date[4] = remainder;\n    }\n    if (isLeapYear) {\n      date[5] = currentDay;\n    }\n  }\n  currentDay = date[5];\n  if ((currentDay & 3) == 0) {\n    if (currentDay == (currentDay / 100) * 100) {\n      if ((currentDay + 0x76c) % 400 == 0) {\n        currentYear = 0x1d;\n      }\n      else {\n        currentYear = 0x1c;\n      }\n    }\n    else {\n      currentYear = 0x1d;\n    }\n  }\n  else {\n    currentYear = 0x1c;\n  }\n  if ((int)date[3] < 1) {\n    while ((int)date[3] < 1) {\n      currentDay = date[4];\n      date[4] = currentDay - 1;\n      if (currentDay - 1 == 0xffffffff) {\n        currentMonth = date[5];\n        currentDay = currentMonth - 1;\n        date[4] = 0xb;\n        date[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay == (currentDay / 100) * 100) {\n            if ((currentMonth + 0x76b) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n      daysInMonth = currentYear;\n      if (date[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[date[4]];\n      }\n      date[3] = daysInMonth + date[3];\n    }\n  }\n  else {\n    while( true ) {\n      currentDay = date[4];\n      daysInMonth = currentYear;\n      if (currentDay != 1) {\n        daysInMonth = (&DAT_000079fc)[currentDay];\n      }\n      if ((int)date[3] <= daysInMonth) break;\n      date[3] = date[3] - daysInMonth;\n      date[4] = currentDay + 1;\n      if (currentDay + 1 == 0xc) {\n        currentMonth = date[5];\n        currentDay = currentMonth + 1;\n        date[4] = 0;\n        date[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay % 100 == 0) {\n            if ((currentMonth + 0x76d) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "date",
                "param_2": "daysToAdd",
                "param_3": "leapYearFlag",
                "iVar1": "daysInMonth",
                "uVar2": "currentDay",
                "uVar3": "currentMonth",
                "iVar4": "currentYear",
                "bVar5": "isLeapYear",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "leapYearIncrement"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_updated_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateUpdatedDate_000047e4(int *dateArray)\n\n{\n  longlong totalDays;\n  longlong newTotalDays;\n  int *memoryAddress;\n  uint var4;\n  int var5;\n  int var6;\n  int var7;\n  uint var8;\n  uint var9;\n  uint var10;\n  int var11;\n  uint var12;\n  uint var13;\n  uint var14;\n  uint lower32Bits;\n  bool flag;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  update_date_00004634(dateArray);\n  var12 = dateArray[5];\n  var11 = dateArray[3] + -1 + *(int *)(&DAT_00007a2c + dateArray[4] * 4);\n  if (((1 < dateArray[4]) && ((var12 & 3) == 0)) &&\n     ((var12 != (var12 / 100) * 100 || (var12 + 0x76c == ((var12 + 0x76c) / 400) * 400)))) {\n    var11 = var11 + 1;\n  }\n  dateArray[7] = var11;\n  if (20000 < (int)&DAT_00002710 + var12) {\n    var7 = -1;\n    var5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)var12 < 0x47) {\n    if (var12 != 0x46) {\n      for (var9 = 0x45; (int)var12 < (int)var9; var9 = var9 - 1) {\n        if ((var9 & 3) == 0) {\n          if (var9 == (var9 / 100) * 100) {\n            if ((var9 + 0x76c) % 400 == 0) {\n              var7 = 0x16e;\n            }\n            else {\n              var7 = 0x16d;\n            }\n          }\n          else {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16d;\n        }\n        var11 = var11 - var7;\n      }\n      if ((var9 & 3) == 0) {\n        if (var12 == (var12 / 100) * 100) {\n          var7 = 0x16d;\n          if ((var12 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var11 = var11 - var7;\n    }\n  }\n  else {\n    var9 = 0x46;\n    do {\n      if ((var9 & 3) == 0) {\n        if (var9 % 100 == 0) {\n          if ((var9 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n          else {\n            var7 = 0x16d;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var9 = var9 + 1;\n      var11 = var11 + var7;\n    } while (var12 != var9);\n  }\n  totalDays = (longlong)var11 * 0x15180 + (longlong)(dateArray[2] * 0xe10 + dateArray[1] * 0x3c + *dateArray)\n  ;\n  lower32Bits = (uint)totalDays;\n  var7 = (int)((ulonglong)totalDays >> 0x20);\n  get_data_address_000050e8();\n  parse_binary_data_00005100();\n  var9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    var12 = memoryAddress[10];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalDays,var12);\n  }\n  else {\n    var14 = dateArray[8];\n    var13 = var14;\n    if (0 < (int)var14) {\n      var13 = 1;\n    }\n    if ((memoryAddress[1] == dateArray[5] + 0x76c) || (var5 = calculate_day_for_year_00004f98(), var5 != 0)) {\n      var10 = memoryAddress[0x14];\n      var4 = memoryAddress[0x12];\n      var8 = memoryAddress[10];\n      var9 = var4 - var8;\n      var5 = (memoryAddress[0x13] - ((int)var8 >> 0x1f)) - (uint)(var4 < var8);\n      if (((int)((var7 - var5) - (uint)(lower32Bits < var9)) < 0 ==\n           (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(lower32Bits < var9)))) &&\n         (var6 = (memoryAddress[0x13] - ((int)var10 >> 0x1f)) - (uint)(var4 < var10),\n         flag = lower32Bits < var4 - var10,\n         (int)((var7 - var6) - (uint)flag) < 0 !=\n         (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)flag)))) goto LAB_00004a88;\n      var4 = memoryAddress[8] - var10;\n      var6 = (memoryAddress[9] - ((int)var10 >> 0x1f)) - (uint)((uint)memoryAddress[8] < var10);\n      if (*memoryAddress != 0) {\n        if ((int)((var7 - var6) - (uint)(lower32Bits < var4)) < 0 ==\n            (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(lower32Bits < var4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        var9 = 0;\n        if ((int)var14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        lower32Bits = var13 ^ var9;\n        var13 = var9;\n        if (lower32Bits == 1) {\n          if (var9 == 0) {\n            var7 = var10 - var8;\n          }\n          else {\n            var7 = var8 - var10;\n          }\n          var5 = dateArray[3];\n          *dateArray = *dateArray + var7;\n          newTotalDays = totalDays + var7;\n          update_date_00004634(dateArray);\n          var5 = dateArray[3] - var5;\n          totalDays = totalDays + var7;\n          if (var5 != 0) {\n            if (var5 < 2) {\n              if (var5 == -2 || var5 + 2 < 0 != SCARRY4(var5,2)) {\n                var5 = 1;\n              }\n            }\n            else {\n              var5 = -1;\n            }\n            var7 = var5 + dateArray[7];\n            var11 = var11 + var5;\n            if (var7 < 0) {\n              var9 = var12 - 1;\n              if ((var9 & 3) == 0) {\n                if (var9 == (var9 / 100) * 100) {\n                  var7 = 0x16d;\n                  if ((var12 + 0x76b) % 400 != 0) {\n                    var7 = 0x16c;\n                  }\n                }\n                else {\n                  var7 = 0x16d;\n                }\n              }\n              else {\n                var7 = 0x16c;\n              }\n            }\n            else {\n              if ((var12 & 3) == 0) {\n                if (var12 == (var12 / 100) * 100) {\n                  var5 = 0x16d;\n                  if ((var12 + 0x76c) % 400 == 0) {\n                    var5 = 0x16e;\n                  }\n                }\n                else {\n                  var5 = 0x16e;\n                }\n              }\n              else {\n                var5 = 0x16d;\n              }\n              if (var5 <= var7) {\n                var7 = var7 - var5;\n              }\n            }\n            dateArray[7] = var7;\n            totalDays = newTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var7 - var6) - (uint)(lower32Bits < var4)) < 0 !=\n          (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(lower32Bits < var4)))) {\nLAB_0000491e:\n        if ((int)((var7 - var5) - (uint)(lower32Bits < var9)) < 0 ==\n            (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(lower32Bits < var9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var14) {\n        var9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      var9 = var13;\n      if (var13 != 1) goto LAB_00004934;\n    }\n    var12 = memoryAddress[0x14];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)CARRY4((uint)totalDays,var12);\n    var9 = 1;\n  }\n  get_memory_location_000050f4();\n  dateArray[8] = var9;\n  dateArray[6] = (var11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(var5,var7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_updated_date_000047e4",
                "param_1": "dateArray",
                "lVar1": "totalDays",
                "lVar2": "newTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "iVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "lower32Bits",
                "bVar16": "flag"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_00004b34",
            "code": "\nvoid initialize_data_00004b34(undefined4 *result,int size,undefined4 arg_3,undefined4 arg_4)\n\n{\n  int *temp;\n  int **temp_1;\n  int **current;\n  int **previous;\n  int **next;\n  int **new_node;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  initialize_data_00004b34_00005790();\n  previous = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current = temp_1;\n    DAT_1fff0db4 = new_node;\n  }\n  else {\n    next = DAT_1fff0db4;\n    if (new_node < DAT_1fff0db4) {\n      current = (int **)*new_node;\n      previous = (int **)((int)new_node + (int)current);\n      is_equal = DAT_1fff0db4 == previous;\n      if (is_equal) {\n        previous = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_node[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_node;\n      if (is_equal) {\n        previous = (int **)((int)previous + (int)current);\n        *new_node = (int *)previous;\n      }\n    }\n    else {\n      do {\n        previous = next;\n        next = (int **)previous[1];\n        if (next == (int **)0x0) break;\n      } while (next <= new_node);\n      current = (int **)*previous;\n      if ((int **)((int)previous + (int)current) == new_node) {\n        current = (int **)((int)current + (int)*new_node);\n        *previous = (int *)current;\n        if (next == (int **)((int)previous + (int)current)) {\n          temp = *next;\n          previous[1] = next[1];\n          current = (int **)((int)current + (int)temp);\n          *previous = (int *)current;\n        }\n      }\n      else if (new_node < (int **)((int)previous + (int)current)) {\n        *result = 0xc;\n      }\n      else {\n        current = (int **)((int)new_node + (int)*new_node);\n        is_equal = next == current;\n        if (is_equal) {\n          current = (int **)*next;\n          next = (int **)next[1];\n        }\n        new_node[1] = (int *)next;\n        if (is_equal) {\n          current = (int **)((int)current + (int)*new_node);\n          *new_node = (int *)current;\n        }\n        previous[1] = (int *)new_node;\n      }\n    }\n  }\n  initialize_data_00004b34_0000579c(result,current,previous,arg_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_00004b34",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "piVar1": "temp",
                "extraout_r1": "temp_1",
                "ppiVar2": "current",
                "ppiVar3": "previous",
                "ppiVar4": "next",
                "ppiVar5": "new_node",
                "bVar6": "is_equal"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_block_00004bd0",
            "code": "\nuint allocateMemoryBlock_00004bd0(undefined4 *output,uint size,undefined4 var3,undefined4 var4)\n\n{\n  uint *previousBlock;\n  int offset;\n  uint blockOffset;\n  uint *currentBlock;\n  uint newBlockSize;\n  \n  newBlockSize = (size + 3 & 0xfffffffc) + 8;\n  if (newBlockSize < 0xc) {\n    newBlockSize = 0xc;\n  }\n  if (((int)newBlockSize < 0) || (newBlockSize < size)) {\n    *output = 0xc;\n  }\n  else {\n    initializeFirstData();\n    previousBlock = DAT_1fff0db4;\n    for (currentBlock = DAT_1fff0db4; currentBlock != (uint *)0x0; currentBlock = (uint *)currentBlock[1]) {\n      blockOffset = *currentBlock - newBlockSize;\n      if (-1 < (int)blockOffset) {\n        if (0xb < blockOffset) {\n          *currentBlock = blockOffset;\n          currentBlock = (uint *)((int)currentBlock + blockOffset);\n          goto LAB_00004c34;\n        }\n        if (previousBlock == currentBlock) {\n          DAT_1fff0db4 = (uint *)currentBlock[1];\n        }\n        if (previousBlock != currentBlock) {\n          previousBlock[1] = (uint)(uint *)currentBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      previousBlock = currentBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = checkAndUpdateOffset(output,0,previousBlock,0,var4);\n    }\n    previousBlock = (uint *)checkAndUpdateOffset(output,newBlockSize);\n    if ((previousBlock != (uint *)0xffffffff) &&\n       ((currentBlock = (uint *)((int)previousBlock + 3U & 0xfffffffc), previousBlock == currentBlock ||\n        (offset = checkAndUpdateOffset(output,(int)currentBlock - (int)previousBlock), offset != -1)))) {\nLAB_00004c34:\n      *currentBlock = newBlockSize;\nLAB_00004c42:\n      initializeSecondData(output);\n      newBlockSize = (int)currentBlock + 0xbU & 0xfffffff8;\n      offset = newBlockSize - (int)(currentBlock + 1);\n      if (offset == 0) {\n        return newBlockSize;\n      }\n      *(uint *)((int)currentBlock + offset) = (int)(currentBlock + 1) - newBlockSize;\n      return newBlockSize;\n    }\n    *output = 0xc;\n    initializeSecondData(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "param_1": "output",
                "param_2": "size",
                "param_3": "var3",
                "param_4": "var4",
                "puVar1": "previousBlock",
                "iVar2": "offset",
                "uVar3": "blockOffset",
                "puVar4": "currentBlock",
                "uVar5": "newBlockSize",
                "initialize_data_00005790": "initializeFirstData",
                "check_and_update_rel_offset_00000428": "checkAndUpdateOffset",
                "initialize_data_0000579c": "initializeSecondData"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "initialize_and_update_data_00004c84",
            "code": "\nvoid initialize_and_update_data_00004c84(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  dword data_offset;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  undefined4 local_var_4;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  local_var_1 = input_param_1;\n  local_var_2 = input_param_2;\n  local_var_3 = input_param_3;\n  local_var_4 = input_param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_system_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  update_data_000057f8(data_offset,*(undefined4 *)(data_offset + 8),input_param_1,&local_var_2,local_var_1,&local_var_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "initialize_and_update_data_00004c84",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "dVar1": "data_offset",
                "uVar2": "local_var_1",
                "uStack_c": "local_var_2",
                "uStack_8": "local_var_3",
                "uStack_4": "local_var_4"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint processInput_00004cb4(uint input)\n\n{\n  dword offset;\n  undefined4 *ptr;\n  uint count;\n  undefined *ptrChar;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_system_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_system_000042a4();\n  }\n  if (ptr == &DAT_000079b8) {\n    ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (ptr == (undefined4 *)&DAT_000079d8) {\n    ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (ptr == (undefined4 *)&DAT_00007998) {\n    ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptr + 3) << 0x16))) {\n    FUNC_000045e8(ptr[0x16]);\n  }\n  count = ptr[2] - 1;\n  ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)ptr[6] || (count = input & 0xff, count == 10))))\n  {\n    input = process_data_00005404(offset,input,ptr,count,unaff_r4,unaff_r5);\n  }\n  else {\n    ptrChar = (undefined *)*ptr;\n    *ptr = ptrChar + 1;\n    *ptrChar = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptr + 3) << 0x16))) {\n    FUNC_000045ec(ptr[0x16]);\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "input",
                "dVar1": "offset",
                "puVar2": "ptr",
                "uVar3": "count",
                "puVar4": "ptrChar"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_and_format_data_00004db8",
            "code": "\nundefined4 processAndFormatData_00004db8(int inputSize)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *stringPtr;\n  char **dataArray;\n  undefined4 returnVal;\n  char *charPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_system_000042a4();\n  }\n  dataArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_system_000042a4(offset);\n  }\n  if (dataArray == (char **)&DAT_000079b8) {\n    dataArray = *(char ***)(offset + 4);\n  }\n  else if (dataArray == (char **)&DAT_000079d8) {\n    dataArray = *(char ***)(offset + 8);\n  }\n  else if (dataArray == (char **)&DAT_00007998) {\n    dataArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045e8(dataArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataArray + 3) << 0x1c) < 0) && (dataArray[4] != (char *)0x0)) ||\n     (result = update_permissions_000054a8(offset,dataArray), result == 0)) {\n    charPtr = (char *)(inputSize + -1);\n    do {\n      while( true ) {\n        charPtr = charPtr + 1;\n        currentChar = *charPtr;\n        stringPtr = dataArray[2] + -1;\n        dataArray[2] = stringPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)stringPtr) {\n            charPtr = *dataArray;\n            returnVal = 10;\n            *dataArray = charPtr + 1;\n            *charPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(offset,10,dataArray);\n          if (result != -1) {\n            returnVal = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringPtr < 0) && (((int)stringPtr < (int)dataArray[6] || (currentChar == '\\n')))) break;\n        stringPtr = *dataArray;\n        *dataArray = stringPtr + 1;\n        *stringPtr = currentChar;\n      }\n      result = process_data_00005404(offset,currentChar,dataArray);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnVal = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045ec(dataArray[0x16]);\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_and_format_data_00004db8",
                "param_1": "inputSize",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringPtr",
                "ppcVar5": "dataArray",
                "uVar6": "returnVal",
                "pcVar7": "charPtr"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 sourceArray,int data)\n\n{\n  int copiedElements;\n  uint updatedValue;\n  bool isCopied;\n  \n  copiedElements = copy_and_decrement_loop_00000490(sourceArray,(int)*(short *)(data + 0xe));\n  isCopied = -1 < copiedElements;\n  if (isCopied) {\n    updatedValue = *(int *)(data + 0x54) + copiedElements;\n  }\n  else {\n    updatedValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isCopied) {\n    *(uint *)(data + 0x54) = updatedValue;\n  }\n  if (!isCopied) {\n    *(short *)(data + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "sourceArray",
                "param_2": "data",
                "iVar1": "copiedElements",
                "uVar2": "updatedValue",
                "bVar3": "isCopied"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 output,int input,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_value_and_return_000004f2(output,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  result = copy_data_to_pointer_00000e38(data1,data2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "output",
                "param_2": "input",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_flag_00004e26",
            "code": "\nvoid updateFlag_00004e26(undefined4 param1,int param2)\n\n{\n  int initializedValue;\n  ushort updatedValue;\n  bool isInitialized;\n  \n  initializedValue = initialize_value_and_return_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isInitialized = initializedValue == -1;\n  if (isInitialized) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedValue;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_flag_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *byteArray1,byte *byteArray2)\n\n{\n  byte currentByte;\n  uint byte1;\n  bool isEqual;\n  \n  do {\n    byte1 = (uint)*byteArray1;\n    currentByte = *byteArray2;\n    isEqual = byte1 == 1;\n    if (byte1 != 0) {\n      isEqual = byte1 == currentByte;\n    }\n    byteArray1 = byteArray1 + 1;\n    byteArray2 = byteArray2 + 1;\n  } while (isEqual);\n  return byte1 - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "byteArray1",
                "param_2": "byteArray2",
                "bVar1": "currentByte",
                "uVar2": "byte1",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *byteArray,int startIndex,int length)\n\n{\n  byte *currentByte;\n  int result;\n  byte *nextByte;\n  uint currentByteValue;\n  \n  if (length == 0) {\n    result = 0;\n  }\n  else {\n    nextByte = (byte *)(startIndex + -1);\n    currentByte = byteArray;\n    do {\n      currentByteValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((currentByteValue != *nextByte) || (currentByte + 1 == byteArray + length)) break;\n      currentByte = currentByte + 1;\n    } while (currentByteValue != 0);\n    result = currentByteValue - *nextByte;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "byteArray",
                "param_2": "startIndex",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "result",
                "pbVar3": "nextByte",
                "uVar4": "currentByteValue"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "convert_string_to_number_00004f84",
            "code": "\nuint convertStringToNumber_00004f84(byte *inputString,byte **outputString,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int compareResult;\n  uint maxResult;\n  uint divisor;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxResult = isNegative + 0x7fffffff;\n  compareResult = 0;\n  divisor = maxResult / base;\n  result = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (compareResult != -1) {\n      if ((divisor < result) || ((divisor == result && ((int)(maxResult - base * divisor) < (int)digitValue)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        compareResult = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxResult;\n    if (outputString == (byte **)0x0) {\n      return maxResult;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputString == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputString = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "convert_string_to_number_00004f84",
                "param_1": "inputString",
                "param_2": "outputString",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "compareResult",
                "uVar6": "maxResult",
                "uVar7": "divisor",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_for_year_00004f98",
            "code": "\nundefined4 calculateDayForYear_00004f98(uint year)\n\n{\n  uint *memoryAddress;\n  undefined4 result;\n  uint dayOfWeek;\n  int daysToAdd;\n  uint *ptr;\n  int daysForMonth;\n  uint isLeapYear;\n  int i;\n  int dayInWeek;\n  uint isCenturyYear;\n  \n  memoryAddress = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    daysForMonth = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memoryAddress[1] = year;\n    isCenturyYear = (uint)(year % 400 == 0);\n    ptr = memoryAddress;\n    do {\n      dayOfWeek = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysToAdd = 0;\n          }\n          else {\n            daysToAdd = 1;\n          }\n        }\n        else {\n          daysToAdd = 0;\n        }\n        daysToAdd = daysToAdd + daysForMonth + dayOfWeek + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        daysToAdd = daysForMonth + dayOfWeek;\n      }\n      else {\n        isLeapYear = isCenturyYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        i = 0;\n        daysToAdd = daysForMonth;\n        while( true ) {\n          i = i + 1;\n          if ((int)ptr[3] <= i) break;\n          daysToAdd = daysToAdd + *(int *)(&UNK_00007b98 + i * 4 + isLeapYear * 0x30);\n        }\n        dayInWeek = dayOfWeek - (daysToAdd + 4U) % 7;\n        if (dayInWeek < 0) {\n          dayInWeek = dayInWeek + 7;\n        }\n        for (dayInWeek = (ptr[4] - 1) * 7 + dayInWeek;\n            *(int *)(&UNK_00007b98 + i * 4 + isLeapYear * 0x30) <= dayInWeek; dayInWeek = dayInWeek + -7) {\n        }\n        daysToAdd = daysToAdd + dayInWeek;\n      }\n      dayOfWeek = ptr[10] + daysToAdd * 0x15180 + ptr[6];\n      ptr[8] = dayOfWeek;\n      ptr[9] = (int)dayOfWeek >> 0x1f;\n      ptr = ptr + 10;\n    } while (memoryAddress + 0x14 != ptr);\n    dayOfWeek = memoryAddress[9];\n    isCenturyYear = memoryAddress[0x13];\n    *memoryAddress = (uint)((int)((dayOfWeek - isCenturyYear) - (uint)(memoryAddress[8] < memoryAddress[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isCenturyYear) !=\n                    SBORROW4(dayOfWeek - isCenturyYear,(uint)(memoryAddress[8] < memoryAddress[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_for_year_00004f98",
                "param_1": "year",
                "puVar1": "memoryAddress",
                "uVar2": "result",
                "uVar3": "dayOfWeek",
                "iVar4": "daysToAdd",
                "puVar5": "ptr",
                "iVar6": "daysForMonth",
                "uVar7": "isLeapYear",
                "iVar8": "i",
                "iVar9": "dayInWeek",
                "uVar10": "isCenturyYear"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_address_000050e8",
            "code": "\nundefined * get_data_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_location_000050f4",
            "code": "\nundefined * getMemoryLocation_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_location_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_binary_data_00005100",
            "code": "\nvoid parseBinaryData_00005100(void)\n\n{\n  dword offset;\n  int memoryAddress;\n  char *bytePointer;\n  int comparisonResult;\n  int processResult;\n  undefined dataType;\n  char *dataPointer;\n  bool isTypeM;\n  ushort *pointer1;\n  int *pointer2;\n  ushort *pointer3;\n  int *pointer4;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int counter;\n  char *stringArray [2];\n  \n  offset = elfArray[16].r_offset;\n  memoryAddress = get_memory_address_000056b0();\n  bytePointer = (char *)find_equal_bytes_000056a0(offset,&DAT_00007a5c);\n  if (bytePointer == (char *)0x0) {\n    elfArray[28].r_info = (dword)&DAT_00007a5f;\n    elfArray[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = bytePointer;\n    DAT_1fff0ddc = bytePointer;\n    initialize_data_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = compare_bytes_00004e52(), comparisonResult != 0)) {\n    initialize_data_00005780(DAT_1fff0dd4);\n    comparisonResult = find_terminating_character_00005ecc(bytePointer);\n    DAT_1fff0dd4 = allocate_memory_block_00004bd0(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,bytePointer);\n    }\n    if (*bytePointer == ':') {\n      bytePointer = bytePointer + 1;\n    }\n    comparisonResult = process_data_00005e68(bytePointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&counter);\n    if (0 < comparisonResult) {\n      dataPointer = bytePointer + counter;\n      if (bytePointer[counter] == '-') {\n        dataPointer = dataPointer + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (bytePointer[counter] == '+') {\n          dataPointer = dataPointer + 1;\n        }\n        comparisonResult = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      pointer1 = &value2;\n      pointer2 = &counter;\n      pointer3 = &value3;\n      pointer4 = &counter;\n      processResult = process_data_00005e68(dataPointer,\"%hu%n:%hu%n:%hu%n\",&value1,&counter,&value2,&counter,\n                           &value3,&counter);\n      if (0 < processResult) {\n        *(uint *)(memoryAddress + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparisonResult;\n        elfArray[28].r_info = (dword)&DAT_1fff0dc7;\n        dataPointer = dataPointer + counter;\n        comparisonResult = process_data_00005e68(dataPointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&counter,pointer1,pointer2,pointer3,\n                             pointer4);\n        if (comparisonResult < 1) {\n          elfArray[29].r_offset = elfArray[28].r_info;\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          elfArray[29].r_offset = (dword)&DAT_1fff0dbc;\n          bytePointer = dataPointer + counter;\n          if (dataPointer[counter] == '-') {\n            bytePointer = bytePointer + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (dataPointer[counter] == '+') {\n              bytePointer = bytePointer + 1;\n            }\n            comparisonResult = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          counter = 0;\n          processResult = process_data_00005e68(bytePointer,\"%hu%n:%hu%n:%hu%n\",&value1,&counter,&value2,&counter,\n                               &value3,&counter);\n          if (processResult < 1) {\n            comparisonResult = *(int *)(memoryAddress + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * comparisonResult;\n          }\n          *(int *)(memoryAddress + 0x50) = comparisonResult;\n          bytePointer = bytePointer + counter;\n          isTypeM = false;\n          comparisonResult = memoryAddress;\n          while( true ) {\n            if (*bytePointer == ',') {\n              bytePointer = bytePointer + 1;\n            }\n            if (*bytePointer == 'M') {\n              processResult = process_data_00005e68(bytePointer,\"M%hu%n.%hu%n.%hu%n\",&value4,&counter,&value5,\n                                   &counter,&value6,&counter);\n              if (processResult != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)value4;\n              *(uint *)(comparisonResult + 0x10) = (uint)value5;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)value6;\n              dataPointer = bytePointer + counter;\n            }\n            else {\n              if (*bytePointer == 'J') {\n                bytePointer = bytePointer + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              value6 = parse_and_process_relocation_00005fd8(bytePointer,stringArray,10);\n              dataPointer = stringArray[0];\n              if (stringArray[0] == bytePointer) {\n                if (isTypeM) {\n                  *(undefined *)(memoryAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0x34) = 0xb;\n                  *(undefined4 *)(memoryAddress + 0x38) = 1;\n                  *(undefined4 *)(memoryAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memoryAddress + 8) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0xc) = 3;\n                  *(undefined4 *)(memoryAddress + 0x10) = 2;\n                  *(undefined4 *)(memoryAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = dataType;\n                *(uint *)(comparisonResult + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            counter = 0;\n            if (*dataPointer == '/') {\n              process_data_00005e68(dataPointer,&DAT_00007a85,&value1,&counter,&value2,&counter,&value3,\n                           &counter);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            comparisonResult = comparisonResult + 0x28;\n            bytePointer = dataPointer + counter;\n            if (isTypeM) break;\n            isTypeM = true;\n          }\n          calculate_day_for_year_00004f98(*(undefined4 *)(memoryAddress + 4));\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memoryAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_binary_data_00005100",
                "dVar1": "offset",
                "iVar2": "memoryAddress",
                "pcVar3": "bytePointer",
                "iVar4": "comparisonResult",
                "iVar5": "processResult",
                "uVar6": "dataType",
                "pcVar7": "dataPointer",
                "bVar8": "isTypeM",
                "puVar9": "pointer1",
                "piVar10": "pointer2",
                "puVar11": "pointer3",
                "piVar12": "pointer4",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "counter",
                "local_2c": "stringArray",
                "Elf32_Rel_ARRAY_1fff0200": "elfArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputData,uint value,int *dataArray,undefined4 permission)\n\n{\n  int difference;\n  uint shiftedValue;\n  undefined *ptr;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    initializeSystem();\n  }\n  if (dataArray == &DAT_000079b8) {\n    dataArray = *(int **)(inputData + 4);\n  }\n  else if (dataArray == (int *)&DAT_000079d8) {\n    dataArray = *(int **)(inputData + 8);\n  }\n  else if (dataArray == (int *)&DAT_00007998) {\n    dataArray = *(int **)(inputData + 0xc);\n  }\n  dataArray[2] = dataArray[6];\n  shiftedValue = (uint)*(ushort *)(dataArray + 3);\n  difference = shiftedValue << 0x1c;\n  if (((difference < 0) && (shiftedValue = dataArray[4], shiftedValue != 0)) ||\n     (difference = updatePermissions(inputData,dataArray,difference,shiftedValue,permission), difference == 0)) {\n    difference = *dataArray - dataArray[4];\n    value = value & 0xff;\n    if ((difference < dataArray[5]) || (difference = validateData(inputData,dataArray), difference == 0)) {\n      dataArray[2] = dataArray[2] + -1;\n      ptr = (undefined *)*dataArray;\n      *dataArray = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (dataArray[5] != difference + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      difference = validateData(inputData,dataArray);\n      if (difference == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputData",
                "param_2": "value",
                "param_3": "dataArray",
                "param_4": "permission",
                "iVar1": "difference",
                "uVar2": "shiftedValue",
                "puVar3": "ptr",
                "initialize_system_000042a4": "initializeSystem",
                "update_permissions_000054a8": "updatePermissions",
                "validate_data_00004158": "validateData"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "update_permissions_000054a8",
            "code": "\nuint updatePermissions_000054a8(undefined4 *newPermissions,undefined4 *data)\n\n{\n  ushort flags;\n  dword offset;\n  ushort flagsCopy;\n  uint flagsShifted;\n  uint shiftedValue;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_system_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (data == &DAT_000079b8) {\n    data = *(undefined4 **)(offset + 4);\n  }\n  else if (data == (undefined4 *)&DAT_000079d8) {\n    data = *(undefined4 **)(offset + 8);\n  }\n  else if (data == (undefined4 *)&DAT_00007998) {\n    data = *(undefined4 **)(offset + 0xc);\n  }\n  flagsShifted = (uint)*(ushort *)(data + 3);\n  flagsCopy = *(ushort *)(data + 3);\n  if (-1 < (int)(flagsShifted << 0x1c)) {\n    if (-1 < (int)(flagsShifted << 0x1b)) {\n      *newPermissions = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(flagsShifted << 0x1d) < 0) {\n      if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)data[0xd] != data + 0x11) {\n          initialize_data_00004b34(newPermissions);\n        }\n        data[0xd] = 0;\n      }\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n      data[1] = 0;\n      *data = data[4];\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n  }\n  if ((data[4] == 0) && ((*(ushort *)(data + 3) & 0x280) != 0x200)) {\n    allocate_and_set_permissions_00005700(newPermissions,data);\n  }\n  flags = *(ushort *)(data + 3);\n  flagsShifted = (uint)flags;\n  flagsCopy = *(ushort *)(data + 3);\n  shiftedValue = flagsShifted & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)(flagsShifted << 0x1e)) {\n      shiftedValue = data[5];\n    }\n    data[2] = shiftedValue;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] != 0) {\n    return 0;\n  }\n  if ((flags & 0x80) == 0) {\n    return flagsShifted & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(data + 3) = flagsCopy | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "update_permissions_000054a8",
                "param_1": "newPermissions",
                "param_2": "data",
                "uVar1": "flags",
                "dVar2": "offset",
                "uVar3": "flagsCopy",
                "uVar4": "flagsShifted",
                "uVar5": "shiftedValue"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_set_permissions_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *result,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_equal_bytes_0000562c",
            "code": "\nint findEqualBytes_0000562c(undefined4 memoryInitializer,char *searchString,int *results)\n\n{\n  char currentCharacter;\n  int *currentOffset;\n  int comparisonResult;\n  char *currentByte;\n  int *offsetPointer;\n  int stringIndex;\n  \n  initialize_memory_00005fec();\n  currentByte = searchString;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentCharacter = *currentByte;\n      if (currentCharacter == '\\0') {\n        stringIndex = (int)currentByte - (int)searchString;\n        currentOffset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          offsetPointer = currentOffset;\n          if (*offsetPointer == 0) break;\n          comparisonResult = compare_bytes_00004e66(*offsetPointer,searchString,stringIndex);\n          currentOffset = offsetPointer + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *offsetPointer, *(char *)(comparisonResult + stringIndex) == '=')) {\n            *results = (int)((int)offsetPointer - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(memoryInitializer);\n            return comparisonResult + stringIndex + 1;\n          }\n        }\n        break;\n      }\n      currentByte = currentByte + 1;\n    } while (currentCharacter != '=');\n  }\n  initialize_memory_00005ff8(memoryInitializer);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_equal_bytes_0000562c",
                "param_1": "memoryInitializer",
                "param_2": "searchString",
                "param_3": "results",
                "cVar1": "currentCharacter",
                "piVar2": "currentOffset",
                "iVar3": "comparisonResult",
                "pcVar4": "currentByte",
                "piVar5": "offsetPointer",
                "iVar6": "stringIndex"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_equal_bytes_000056a0",
            "code": "\nvoid find_equal_bytes_000056a0(undefined4 input_data,undefined4 search_value,undefined4 output_value,undefined4 additional_data)\n\n{\n  undefined4 search_result;\n  undefined4 placeholder;\n  \n  search_result = search_value;\n  placeholder = output_value;\n  find_equal_bytes_000056a0_0000562c(input_data,search_value,&search_result,additional_data,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_equal_bytes_000056a0",
                "param_1": "input_data",
                "param_2": "search_value",
                "param_3": "output_value",
                "param_4": "additional_data",
                "uStack_c": "search_result",
                "uStack_8": "placeholder"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "set_permission_000056b8",
            "code": "\nundefined4 setPermission_000056b8(undefined4 param1,int permissions,undefined4 *result,uint *flags)\n\n{\n  int initResult;\n  undefined4 permission;\n  undefined auxStack [4];\n  uint localFlags;\n  \n  if ((*(short *)(permissions + 0xe) < 0) ||\n     (initResult = initialize_00000514(param1,(int)*(short *)(permissions + 0xe),auxStack), initResult < 0)) {\n    *flags = 0;\n    if ((int)((uint)*(ushort *)(permissions + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flags = (uint)((localFlags & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "set_permission_000056b8",
                "param_1": "param1",
                "param_2": "permissions",
                "param_3": "result",
                "param_4": "flags",
                "iVar1": "initResult",
                "uVar2": "permission",
                "auStack_68": "auxStack",
                "local_64": "localFlags"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "allocate_and_set_permissions_00005700",
            "code": "\nvoid allocateAndSetPermissions_00005700(int context,int *data)\n\n{\n  ushort permissionFlags;\n  int allocatedMemory;\n  int param1Copy;\n  int *param2Copy;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    param1Copy = context;\n    param2Copy = data;\n    permissionFlags = set_permission_000056b8(context,data,&param1Copy,&param2Copy);\n    allocatedMemory = allocate_memory_block_00004bd0(context,param1Copy);\n    if (allocatedMemory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocatedMemory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = param1Copy;\n      data[4] = allocatedMemory;\n      if ((param2Copy != (int *)0x0) &&\n         (allocatedMemory = check_param_validity_00000534(context,(int)*(short *)((int)data + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = permissionFlags | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "allocate_and_set_permissions_00005700",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "permissionFlags",
                "iVar2": "allocatedMemory",
                "local_18": "param1Copy",
                "local_14": "param2Copy"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_data_00005780",
            "code": "\nvoid initialize_data_00005780(undefined4 data)\n\n{\n  initialize_data_00005780_00004b34(array[16].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_data_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "array"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_data_000057a8",
            "code": "\nint update_data_000057a8(undefined4 status,int data,undefined4 *data_array)\n\n{\n  int index;\n  undefined *current_ptr;\n  \n  index = data_array[2] + -1;\n  data_array[2] = index;\n  if ((index < 0) && ((index < (int)data_array[6] || (data == 10)))) {\n    index = process_data_00005404();\n    return index;\n  }\n  current_ptr = (undefined *)*data_array;\n  *data_array = current_ptr + 1;\n  *current_ptr = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_data_000057a8",
                "param_1": "status",
                "param_2": "data",
                "param_3": "data_array",
                "iVar1": "index",
                "puVar2": "current_ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "data_update_function_000057d2",
            "code": "\nint dataUpdateFunction_000057d2(undefined4 arg1,undefined4 arg2,undefined *array,int arraySize)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentIndex;\n  \n  endPointer = array + arraySize;\n  currentIndex = arraySize;\n  do {\n    if (array == endPointer) {\n      return 0;\n    }\n    result = update_data_000057a8(arg1,*array,arg2,arraySize,currentIndex);\n    arraySize = result + 1;\n    array = array + 1;\n  } while (arraySize != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "data_update_function_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "array",
                "param_4": "arraySize",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentIndex"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "update_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint updateData_000057f8(int systemData,undefined4 *dataPtr,byte *byteArray,int *resultPtr)\n\n{\n  int val1;\n  int val2;\n  int *ptr;\n  bool flag;\n  byte *bytePtr;\n  int tempVar;\n  byte *tempBytePtr;\n  int *resultArray;\n  uint permissions;\n  int tempVal;\n  undefined4 stackVar;\n  int tempVar2;\n  int sum;\n  byte byteVal;\n  undefined constant1;\n  undefined constant2;\n  undefined formatCode;\n  undefined4 tempVar3;\n  \n  if ((systemData != 0) && (*(int *)(systemData + 0x18) == 0)) {\n    initialize_system_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = *(undefined4 **)(systemData + 4);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = *(undefined4 **)(systemData + 8);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = *(undefined4 **)(systemData + 0xc);\n  }\n  if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1c)) || (dataPtr[4] == 0)) &&\n     (val1 = update_permissions_000054a8(systemData,dataPtr), val1 != 0)) {\n    if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(dataPtr[0x16]);\n    }\n    return -1;\n  }\n  sum = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  tempBytePtr = byteArray;\n  resultArray = resultPtr;\nLAB_0000588e:\n  bytePtr = tempBytePtr;\n  if (*bytePtr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  tempBytePtr = bytePtr + 1;\n  if (*bytePtr == 0x25) {\nLAB_0000589a:\n    val1 = (int)bytePtr - (int)byteArray;\n    if (val1 != 0) {\n      val2 = data_update_function_000057d2(systemData,dataPtr,byteArray,val1);\n      if (val2 == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(dataPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n          FUNC_000045ec(dataPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(dataPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return sum;\n      }\n      sum = sum + val1;\n    }\n    if (*bytePtr == 0) goto LAB_00005a06;\n    tempVal = -1;\n    stackVar = 0;\n    permissions = 0;\n    tempVar2 = 0;\n    formatCode = 0;\n    tempVar3 = 0;\n    tempBytePtr = bytePtr + 1;\n    while( true ) {\n      bytePtr = tempBytePtr + 1;\n      val1 = find_byte_sequence_00006010(\"#-0+ \",*tempBytePtr,5);\n      if (val1 == 0) break;\n      permissions = 1 << (val1 - 0x7bfcU & 0xff) | permissions;\n      tempBytePtr = bytePtr;\n    }\n    if ((int)(permissions << 0x1b) < 0) {\n      formatCode = 0x20;\n    }\n    if ((int)(permissions << 0x1c) < 0) {\n      formatCode = 0x2b;\n    }\n    if (*tempBytePtr == 0x2a) {\n      ptr = resultArray + 1;\n      tempVar2 = *resultArray;\n      resultArray = ptr;\n      if (tempVar2 < 0) {\n        tempVar2 = -tempVar2;\n        permissions = permissions | 2;\n      }\n    }\n    else {\n      flag = false;\n      val1 = tempVar2;\n      bytePtr = tempBytePtr;\n      while( true ) {\n        if (9 < *bytePtr - 0x30) break;\n        val1 = val1 * 10 + (*bytePtr - 0x30);\n        flag = true;\n        bytePtr = bytePtr + 1;\n      }\n      if (flag) {\n        tempVar2 = val1;\n      }\n    }\n    if (*bytePtr == 0x2e) {\n      if (bytePtr[1] == 0x2a) {\n        tempVal = *resultArray;\n        if (tempVal < 0) {\n          tempVal = -1;\n        }\n        bytePtr = bytePtr + 2;\n        resultArray = resultArray + 1;\n      }\n      else {\n        flag = false;\n        tempVal = 0;\n        val1 = 0;\n        while( true ) {\n          bytePtr = bytePtr + 1;\n          if (9 < *bytePtr - 0x30) break;\n          val1 = val1 * 10 + (*bytePtr - 0x30);\n          flag = true;\n        }\n        if (flag) {\n          tempVal = val1;\n        }\n      }\n    }\n    val1 = find_byte_sequence_00006010(&DAT_00007c02,*bytePtr,3);\n    if (val1 != 0) {\n      permissions = permissions | 0x40 << (val1 - 0x7c02U & 0xff);\n      bytePtr = bytePtr + 1;\n    }\n    byteArray = bytePtr + 1;\n    byteVal = *bytePtr;\n    val1 = find_byte_sequence_00006010(\"efgEFG\",byteVal,6);\n    if (val1 == 0) {\n      tempVar = format_number_00005b34(systemData,&permissions,dataPtr,0x57d3,&resultArray);\n      if (tempVar == -1) goto LAB_00005a06;\n    }\n    else {\n      resultArray = (int *)(((int)resultArray + 7U & 0xfffffff8) + 8);\n    }\n    sum = sum + tempVar;\n    tempBytePtr = byteArray;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "update_data_000057f8",
                "param_1": "systemData",
                "param_2": "dataPtr",
                "param_3": "byteArray",
                "param_4": "resultPtr",
                "iVar1": "val1",
                "iVar2": "val2",
                "piVar3": "ptr",
                "bVar4": "flag",
                "pbVar5": "bytePtr",
                "unaff_r7": "tempVar",
                "pbVar6": "tempBytePtr",
                "local_8c": "resultArray",
                "local_88": "permissions",
                "local_84": "tempVal",
                "uStack_80": "stackVar",
                "local_7c": "tempVar2",
                "local_74": "sum",
                "local_70": "byteVal",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "formatCode",
                "local_30": "tempVar3"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_length_00005a58",
            "code": "\nundefined4\ncalculateLength_00005a58(undefined4 input,uint *array,uint *result,undefined4 param,code *callback)\n\n{\n  int i;\n  undefined4 returnValue;\n  int tempVar;\n  uint maxSize;\n  uint counter;\n  bool flag;\n  \n  maxSize = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxSize = array[2];\n  }\n  *result = maxSize;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *result = maxSize + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (i = 0; i < (int)(array[3] - *result); i = i + 1) {\n      tempVar = (*callback)(input,param,(int)array + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)array + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)array + maxSize + 0x44) = *(undefined *)((int)array + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callback)(input,param,(int)array + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = array[3];\n    flag = (*array & 6) == 4;\n    if (flag) {\n      maxSize = maxSize - *result;\n    }\n    if (flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxSize = maxSize + (array[2] - array[4]);\n    }\n    for (counter = 0; maxSize != counter; counter = counter + 1) {\n      i = (*callback)(input,param,(int)array + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_length_00005a58",
                "param_1": "input",
                "param_2": "array",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "uVar4": "maxSize",
                "uVar5": "counter",
                "bVar6": "flag"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_00005b34",
            "code": "\ncode * formatNumber_00005b34(undefined4 output,uint *input,undefined4 param1,code *param2,uint **param3\n                   )\n\n{\n  bool isNegative;\n  byte byteVal;\n  int length;\n  code *result;\n  char *digits;\n  int returnValue;\n  char *pointer;\n  uint value;\n  uint *ptr;\n  uint base;\n  uint **pptr;\n  char **strptr;\n  uint originalLength;\n  char *formattedNumber;\n  code *callback;\n  \n  byteVal = *(byte *)(input + 6);\n  pointer = (char *)((int)input + 0x43);\n  callback = param2;\n  if (0x78 < byteVal) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)input + 0x42) = byteVal;\nLAB_00005bdc:\n    pointer = (char *)((int)input + 0x42);\n    value = 1;\nLAB_00005d28:\n    input[4] = value;\n    *(undefined *)((int)input + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteVal < 99) {\n    if (byteVal == 0) goto LAB_00005d06;\n    if (byteVal == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)input + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteVal) {\n  case 99:\n    value = **param3;\n    *param3 = *param3 + 1;\n    *(char *)((int)input + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *input;\n    ptr = *param3;\n    if ((int)(base << 0x18) < 0) {\n      value = *ptr;\n      *param3 = ptr + 1;\n    }\n    else {\n      value = *ptr;\n      *param3 = ptr + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)input + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    pptr = (uint **)*param3;\n    base = *input;\n    value = input[5];\n    *param3 = (uint *)(pptr + 1);\n    ptr = *pptr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *ptr = value;\n    }\n    else {\n      *(short *)ptr = (short)value;\n    }\nLAB_00005d06:\n    input[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptr = *param3;\n    value = *input;\n    *param3 = ptr + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *ptr;\n    }\n    else {\n      value = (uint)*(ushort *)ptr;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (byteVal == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *input = *input | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)input + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *input;\n    value = **param3;\n    *param3 = *param3 + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *input = base | 0x20;\n    }\n    if (value == 0) {\n      *input = *input & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    strptr = (char **)*param3;\n    *param3 = (uint *)(strptr + 1);\n    pointer = *strptr;\n    length = find_byte_sequence_00006010(pointer,0,input[1],strptr,output,input,param1);\n    if (length != 0) {\n      input[1] = length - (int)pointer;\n    }\n    value = input[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)input + 0x43) = 0;\nLAB_00005c36:\n  originalLength = input[1];\n  input[2] = originalLength;\n  if (-1 < (int)originalLength) {\n    *input = *input & 0xfffffffb;\n  }\n  formattedNumber = pointer;\n  if ((value != 0) || (originalLength != 0)) {\n    do {\n      formattedNumber = formattedNumber + -1;\n      *formattedNumber = digits[value - base * (value / base)];\n      isNegative = base <= value;\n      value = value / base;\n    } while (isNegative);\n  }\n  if (((base == 8) && ((int)(*input << 0x1f) < 0)) && ((int)input[1] <= (int)input[4])) {\n    formattedNumber[-1] = '0';\n    formattedNumber = formattedNumber + -1;\n  }\n  input[4] = (int)pointer - (int)formattedNumber;\n  pointer = formattedNumber;\nLAB_00005c84:\n  length = calculate_length_00005a58(output,input,&callback,param1,param2);\n  if ((length == -1) || (length = (*param2)(output,param1,pointer,input[4]), length == -1)) {\nLAB_00005c98:\n    result = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*input << 0x1e) < 0) {\n      for (length = 0; length < (int)(input[3] - (int)callback); length = length + 1) {\n        returnValue = (*param2)(output,param1,(int)input + 0x19,1);\n        if (returnValue == -1) goto LAB_00005c98;\n      }\n    }\n    result = (code *)input[3];\n    if ((int)(code *)input[3] < (int)callback) {\n      result = callback;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_00005b34",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param1",
                "param_4": "param2",
                "param_5": "param3",
                "bVar1": "isNegative",
                "bVar2": "byteVal",
                "iVar3": "length",
                "pcVar4": "result",
                "pcVar5": "digits",
                "iVar6": "returnValue",
                "pcVar7": "pointer",
                "uVar8": "value",
                "puVar9": "ptr",
                "uVar10": "base",
                "uVar13": "originalLength",
                "ppuVar11": "pptr",
                "ppcVar12": "strptr",
                "pcVar14": "formattedNumber",
                "local_24": "callback"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int input,byte **data)\n\n{\n  int result;\n  uint output;\n  byte *tempData;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_system_000042a4();\n  }\n  if (data == (byte **)&DAT_000079b8) {\n    data = *(byte ***)(input + 4);\n  }\n  else if (data == (byte **)&DAT_000079d8) {\n    data = *(byte ***)(input + 8);\n  }\n  else if (data == (byte **)&DAT_00007998) {\n    data = *(byte ***)(input + 0xc);\n  }\n  result = execute_data_processing_00006768(input,data);\n  if (result == 0) {\n    data[1] = data[1] + -1;\n    tempData = *data;\n    *data = tempData + 1;\n    output = (uint)*tempData;\n  }\n  else {\n    output = 0xffffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "output",
                "pbVar3": "tempData"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid processData_00005e68(undefined4 input,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 inputCopy;\n  undefined4 terminatingChar;\n  undefined2 constValue;\n  undefined2 default;\n  undefined4 inputCopy2;\n  undefined4 terminatingCharCopy;\n  undefined *pointer;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  \n  constValue = 0x204;\n  inputCopy = input;\n  inputCopy2 = input;\n  param3Copy = param3;\n  param4Copy = param4;\n  terminatingChar = find_terminating_character_00005ecc();\n  pointer = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  default = 0xffff;\n  terminatingCharCopy = terminatingChar;\n  process_data_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputCopy,size,&param3Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "input",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "local_80": "inputCopy",
                "local_7c": "terminatingChar",
                "local_74": "constValue",
                "local_72": "default",
                "local_70": "inputCopy2",
                "local_6c": "terminatingCharCopy",
                "local_5c": "pointer",
                "local_4c": "zero",
                "local_38": "zero2",
                "uStack_8": "param3Copy",
                "uStack_4": "param4Copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_terminating_character_00005ecc",
            "code": "\nchar * find_terminating_character_00005ecc(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_terminating_character_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_unsigned_int_00005edc",
            "code": "\nuint parseUnsignedInt_00005edc(undefined4 *errorCode,byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  byte negativeFlag;\n  int status;\n  uint digit;\n  uint divider;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    negativeFlag = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    negativeFlag = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  divider = 0xffffffff / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((status < 0) || (divider < result)) ||\n       ((divider == result && ((int)~(base * divider) < (int)digit)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + digit;\n      status = 1;\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (status < 0) {\n    *errorCode = 0x22;\n    result = 0xffffffff;\n    if (output == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negativeFlag != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextChar + -1;\nLAB_00005fb8:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_unsigned_int_00005edc",
                "param_1": "errorCode",
                "param_2": "input",
                "param_3": "output",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "bVar3": "negativeFlag",
                "iVar4": "status",
                "uVar5": "digit",
                "uVar6": "divider",
                "pbVar7": "currentChar",
                "pbVar8": "nextChar"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_and_process_relocation_00005fd8",
            "code": "\nvoid parseAndProcessRelocation_00005fd8(undefined4 offset,undefined4 param_2,undefined4 param_3)\n\n{\n  parse_unsigned_int_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param_2,param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_and_process_relocation_00005fd8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *input_buffer,uint search_byte,uint buffer_length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char is_byte_zero_high_bits;\n  char is_byte_zero_2nd_high_bits;\n  char is_byte_zero_3rd_high_bits;\n  byte *next_byte;\n  uint *buffer_pointer;\n  byte *result;\n  uint buffer_alignment;\n  uint buffer_length_aligned;\n  uint temp_result_1;\n  uint temp_result_2;\n  bool is_byte_zero_temp;\n  bool is_byte_zero_2nd_temp;\n  bool is_byte_zero_3rd_temp;\n  bool is_byte_zero_4th_temp;\n  \n  search_byte = search_byte & 0xff;\n  if ((int)buffer_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (buffer_length == 0) {\n        return (byte *)0x0;\n      }\n      buffer_pointer = (uint *)((int)input_buffer + 1);\n      current_byte = *(byte *)input_buffer;\n      buffer_length = buffer_length - 1;\n      input_buffer = buffer_pointer;\n    } while (current_byte != search_byte);\n  }\n  else {\n    buffer_alignment = (uint)input_buffer & 7;\n    while( true ) {\n      if (buffer_alignment == 0) {\n        buffer_alignment = search_byte | search_byte << 8;\n        buffer_alignment = buffer_alignment | buffer_alignment << 0x10;\n        buffer_length_aligned = buffer_length & 0xfffffff8;\n        do {\n          buffer_pointer = input_buffer + 2;\n          buffer_length_aligned = buffer_length_aligned - 8;\n          temp_result_1 = *input_buffer ^ buffer_alignment;\n          temp_result_2 = input_buffer[1] ^ buffer_alignment;\n          is_byte_zero = -((char)temp_result_1 == '\\0');\n          is_byte_zero_high_bits = -((char)(temp_result_1 >> 8) == '\\0');\n          is_byte_zero_2nd_high_bits = -((char)(temp_result_1 >> 0x10) == '\\0');\n          is_byte_zero_3rd_high_bits = -((char)(temp_result_1 >> 0x18) == '\\0');\n          temp_result_1 = CONCAT13(is_byte_zero_3rd_high_bits,CONCAT12(is_byte_zero_2nd_high_bits,CONCAT11(is_byte_zero_high_bits,is_byte_zero)));\n          is_byte_zero_temp = (char)temp_result_2 != '\\0';\n          is_byte_zero_2nd_temp = (char)(temp_result_2 >> 8) != '\\0';\n          is_byte_zero_3rd_temp = (char)(temp_result_2 >> 0x10) != '\\0';\n          is_byte_zero_4th_temp = (char)(temp_result_2 >> 0x18) != '\\0';\n          temp_result_2 = CONCAT13(is_byte_zero_4th_temp * is_byte_zero_3rd_high_bits - !is_byte_zero_4th_temp,\n                            CONCAT12(is_byte_zero_3rd_temp * is_byte_zero_2nd_high_bits - !is_byte_zero_3rd_temp,\n                                     CONCAT11(is_byte_zero_2nd_temp * is_byte_zero_high_bits - !is_byte_zero_2nd_temp,is_byte_zero_temp * is_byte_zero - !is_byte_zero_temp)));\n          if (temp_result_2 != 0) {\n            if (temp_result_1 == 0) {\n              result = (byte *)((int)input_buffer + 5);\n              temp_result_1 = temp_result_2;\n            }\n            else {\n              result = (byte *)((int)input_buffer + 1);\n            }\n            if ((temp_result_1 & 1) == 0) {\n              is_byte_zero_temp = (temp_result_1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (is_byte_zero_temp) {\n                is_byte_zero_temp = (temp_result_1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (is_byte_zero_temp) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          input_buffer = buffer_pointer;\n        } while (buffer_length_aligned != 0);\n        buffer_length = buffer_length & 7;\n        goto joined_r0x00006070;\n      }\n      buffer_pointer = (uint *)((int)input_buffer + 1);\n      buffer_length = buffer_length - 1;\n      if (*(byte *)input_buffer == search_byte) break;\n      buffer_alignment = (uint)buffer_pointer & 7;\n      input_buffer = buffer_pointer;\n      if (buffer_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)buffer_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "input_buffer",
                "param_2": "search_byte",
                "param_3": "buffer_length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "is_byte_zero_high_bits",
                "cVar4": "is_byte_zero_2nd_high_bits",
                "cVar5": "is_byte_zero_3rd_high_bits",
                "pbVar6": "next_byte",
                "puVar7": "buffer_pointer",
                "pbVar8": "result",
                "uVar9": "buffer_alignment",
                "uVar10": "buffer_length_aligned",
                "uVar11": "temp_result_1",
                "uVar12": "temp_result_2",
                "bVar13": "is_byte_zero_temp",
                "bVar14": "is_byte_zero_2nd_temp",
                "bVar15": "is_byte_zero_3rd_temp",
                "bVar16": "is_byte_zero_4th_temp"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_bytes_000060b0",
            "code": "\nvoid copyBytes_000060b0(int destination,undefined *source,int numOfBytes)\n\n{\n  undefined *srcPtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = source + numOfBytes;\n  destPtr = (undefined *)(destination + -1);\n  if (source != endPtr) {\n    do {\n      srcPtr = source + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *source;\n      source = srcPtr;\n    } while (srcPtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_bytes_000060b0",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "numOfBytes",
                "puVar1": "srcPtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_data_000060cc",
            "code": "\nint allocateAndCopyData_000060cc(undefined4 param1,int size,uint limit,undefined4 param4)\n\n{\n  int result;\n  uint result2;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      initialize_data_00004b34();\n      result = 0;\n    }\n    else {\n      result2 = calculate_result_00006964();\n      result = size;\n      if ((result2 < limit) && (result = allocate_memory_block_00004bd0(param1,limit), result != 0)) {\n        copy_bytes_000060b0(result,size,limit);\n        initialize_data_00004b34(param1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_block_00004bd0(param1,limit,limit,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_data_000060cc",
                "param_1": "param1",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_data_00006192",
            "code": "\nundefined4 initialize_data_00006192(undefined4 status,undefined4 *params)\n\n{\n  if ((undefined4 *)params[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)params[13] != params + 0x11) {\n      initialize_data_00006192_func();\n    }\n    params[1] = params[16];\n    params[13] = 0;\n    if (params[16] != 0) {\n      *params = params[15];\n      return 0;\n    }\n  }\n  *params = params[4];\n  params[1] = 0;\n  *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_data_00006192",
                "param_1": "status",
                "param_2": "params",
                "param_2[0xd]": "params[13]",
                "initialize_data_00004b34": "initialize_data_func",
                "param_2[1]": "params[1]",
                "param_2[0x10]": "params[16]",
                "param_2[0xf]": "params[15]",
                "param_2[4]": "params[4]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint currentByte;\n  byte *nextByte;\n  uint flag;\n  int **resultArray;\n  undefined stack [256];\n  uint flag2;\n  undefined4 conversionBase;\n  uint flag3;\n  int counter;\n  int length;\n  undefined *buffer;\n  int dataType;\n  undefined *functionPointer;\n  code *dataInitializer;\n  \n  counter = 0;\n  length = 0;\n  functionPointer = &LAB_00006118_1;\n  dataInitializer = initialize_data_00006192 + 1;\n  resultArray = param4;\n  buffer = stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      flag = (uint)*param3;\n      if (flag == 0) {\n        return counter;\n      }\n      currentByte = (byte)(&DAT_00007a99)[flag] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[flag] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (result = (*dataInitializer)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        length = length + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (flag == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*dataInitializer)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != flag) {\n      return counter;\n    }\n    *param2 = *param2 + 1;\n    length = length + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  flag3 = currentByte;\n  flag2 = currentByte;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    flag2 = 0x10;\n  }\n  while( true ) {\n    currentByte = (uint)*nextByte;\n    if (9 < currentByte - 0x30) break;\n    nextByte = nextByte + 1;\n    flag3 = (flag3 * 10 + currentByte) - 0x30;\n  }\n  result = find_byte_sequence_00006010(&DAT_00007c02,currentByte,3);\n  if (result != 0) {\n    flag2 = 1 << (result - 0x7c02U & 0xff) | flag2;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  currentByte = (uint)*nextByte;\n  if (currentByte < 0x79) {\n    if (0x57 < currentByte) {\n      switch(currentByte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)extract_and_process_data_0000687c(stack,param3);\n        flag2 = flag2 | 0x40;\n        dataType = 1;\n        break;\n      case 99:\n        flag2 = flag2 | 0x40;\n        dataType = 0;\n        break;\n      case 100:\n      case 0x75:\n        conversionBase = 10;\nLAB_000063a0:\n        if (currentByte < 0x6f) {\n          dataType = 3;\n        }\n        else {\n          dataType = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        dataType = 5;\n        break;\n      case 0x69:\n        conversionBase = 0;\n        dataType = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag2 << 0x1b)) {\n          if ((int)(flag2 << 0x1f) < 0) {\n            *(short *)*resultArray = (short)length;\n            resultArray = resultArray + 1;\n          }\n          else {\n            **resultArray = length;\n            resultArray = resultArray + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        conversionBase = 8;\n        dataType = 4;\n        break;\n      case 0x70:\n        flag2 = flag2 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag2 = flag2 | 0x200;\n        conversionBase = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        dataType = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*dataInitializer)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag2 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          length = length + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            result = (*dataInitializer)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (dataType < 3) {\n        result = process_data_000064bc(param1,&flag2,param2,&resultArray);\n      }\n      else {\n        if (4 < dataType) goto LAB_000061f6;\n        result = reverse_and_extract_data_0000656c(param1,&flag2,param2,&resultArray);\n      }\n      if (result == 1) {\n        return counter;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (counter == 0) {\nLAB_00006388:\n          counter = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          counter = -1;\n        }\n        return counter;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (currentByte == 0x25) goto LAB_00006352;\n    if (currentByte < 0x26) {\n      if (currentByte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentByte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  dataType = 3;\n  conversionBase = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "currentByte",
                "pbVar3": "nextByte",
                "uVar4": "flag",
                "local_2b0": "resultArray",
                "auStack_2ac": "stack",
                "local_1ac": "flag2",
                "local_1a8": "conversionBase",
                "local_1a4": "flag3",
                "local_1a0": "counter",
                "local_19c": "length",
                "local_198": "buffer",
                "local_194": "dataType",
                "local_30": "functionPointer",
                "local_2c": "dataInitializer"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_param,uint *data,byte **buffer_ptrs,undefined4 *output_param)\n\n{\n  int result;\n  uint temp;\n  byte **buffer_ptr;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  int count;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    data[2] = temp;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    buffer_ptr = (byte **)*output_param;\n    *output_param = buffer_ptr + 1;\n    ptr2 = *buffer_ptr;\n  }\n  count = 0;\n  do {\n    temp = data[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(data[5] + (uint)**buffer_ptrs) == '\\0') {\n          if (count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *ptr2 = 0;\n          }\n          data[4] = count + data[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer_ptrs] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptr3 = ptr2;\n    if (-1 < (int)(*data << 0x1b)) {\n      ptr3 = ptr2 + 1;\n      *ptr2 = **buffer_ptrs;\n    }\n    ptr1 = buffer_ptrs[1];\n    *buffer_ptrs = *buffer_ptrs + 1;\n    temp = data[2] - 1;\n    buffer_ptrs[1] = ptr1 + -1;\n    count = count + 1;\n    data[2] = temp;\n    ptr2 = ptr3;\n    if ((temp == 0) ||\n       (((int)(ptr1 + -1) < 1 &&\n        (result = (*(code *)data[0x60])(input_param,buffer_ptrs,temp,(code *)data[0x60],output_param),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_param",
                "param_2": "data",
                "param_3": "buffer_ptrs",
                "param_4": "output_param",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "buffer_ptr",
                "pbVar4": "ptr1",
                "unaff_r6": "ptr2",
                "pbVar5": "ptr3",
                "iVar6": "count"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "reverse_and_extract_data_0000656c",
            "code": "\nundefined4 reverse_and_extract_data_0000656c(undefined4 input,uint *flags,byte **data_ptr,undefined4 *output_ptr)\n\n{\n  int result;\n  undefined4 processed_data;\n  code *byte_match_function;\n  uint temp;\n  byte *byte_ptr;\n  uint data_length;\n  undefined4 *output;\n  uint *data_index;\n  uint *output_index;\n  uint *data_start;\n  int carry;\n  int iteration;\n  undefined *local_34 [4];\n  \n  local_34[0] = &DAT_00007c2f;\n  local_34[1] = &DAT_00007c32;\n  local_34[2] = &DAT_00007c35;\n  byte_match_function = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    byte_match_function = (code *)&UNK_00005fd5;\n  }\n  data_length = flags[2];\n  temp = data_length - 1;\n  if (0x15c < temp) {\n    carry = data_length - 0x15d;\n    data_length = 0x15d;\n  }\n  if (0x15c < temp) {\n    flags[2] = data_length;\n  }\n  data_start = flags + 7;\n  if (temp < 0x15d) {\n    carry = 0;\n  }\n  *flags = *flags | 0xd00;\n  iteration = 0;\n  output_index = data_start;\n  do {\n    result = find_byte_sequence_00006010(local_34[iteration],**data_ptr,2);\n    if (result != 0) {\n      if (iteration == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp;\n      }\n      else if (iteration == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp = flags[2];\n      flags[2] = temp - 1;\n      if (temp != 0) {\n        byte_ptr = *data_ptr;\n        *data_ptr = byte_ptr + 1;\n        data_index = (uint *)((int)output_index + 1);\n        *(byte *)output_index = *byte_ptr;\n        byte_ptr = data_ptr[1];\n        data_ptr[1] = byte_ptr + -1;\n        output_index = data_index;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input,data_ptr), result != 0)) {\n          iteration = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iteration = iteration + 1;\n  } while (iteration != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  extract_and_process_data_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  iteration = 0;\n  while( true ) {\n    data_index = output_index;\n    if (flags[2] == 0) break;\n    byte_ptr = *data_ptr;\n    temp = (uint)*byte_ptr;\n    if (*(char *)(flags[5] + temp) == '\\0') break;\n    if ((temp == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      iteration = iteration + 1;\n      if (carry != 0) {\n        carry = carry + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      data_index = (uint *)((int)output_index + 1);\n      *(byte *)output_index = *byte_ptr;\n    }\n    byte_ptr = data_ptr[1];\n    data_ptr[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)flags[0x60])(input,data_ptr);\n      if (result != 0) break;\n    }\n    else {\n      *data_ptr = *data_ptr + 1;\n    }\n    flags[2] = flags[2] - 1;\n    output_index = data_index;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (data_start < data_index) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)data_index + -1),data_ptr);\n      data_index = (uint *)((int)data_index + -1);\n    }\n    if (data_index == data_start) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)data_index = 0;\n    processed_data = (*byte_match_function)(input,data_start,0,flags[1]);\n    output = (undefined4 *)*output_ptr;\n    temp = *flags;\n    *output_ptr = output + 1;\n    output = (undefined4 *)*output;\n    if ((temp & 0x20) == 0) {\n      if ((int)(temp << 0x1f) < 0) {\n        *(short *)output = (short)processed_data;\n      }\n      else {\n        *output = processed_data;\n      }\n    }\n    else {\n      *output = processed_data;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)data_index + flags[4] + (iteration - (int)data_start));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "reverse_and_extract_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data_ptr",
                "param_4": "output_ptr",
                "iVar1": "result",
                "uVar2": "processed_data",
                "pcVar3": "byte_match_function",
                "uVar4": "temp",
                "pbVar5": "byte_ptr",
                "uVar6": "data_length",
                "puVar7": "output",
                "puVar8": "data_index",
                "puVar9": "output_index",
                "puVar10": "data_start",
                "unaff_r9": "carry",
                "iVar11": "iteration"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "execute_data_processing_00006768",
            "code": "\nundefined4\nexecute_data_processing_00006768(undefined4 *system_parameters,undefined4 *data_parameters,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 temp_uVar1;\n  int temp_iVar2;\n  undefined4 temp_uVar3;\n  ushort temp_uVar4;\n  uint temp_uVar5;\n  \n  if ((system_parameters != (undefined4 *)0x0) && (system_parameters[6] == 0)) {\n    initialize_system_000042a4();\n  }\n  if (data_parameters == &DAT_000079b8) {\n    data_parameters = (undefined4 *)system_parameters[1];\n  }\n  else if (data_parameters == (undefined4 *)&DAT_000079d8) {\n    data_parameters = (undefined4 *)system_parameters[2];\n  }\n  else if (data_parameters == (undefined4 *)&DAT_00007998) {\n    data_parameters = (undefined4 *)system_parameters[3];\n  }\n  temp_uVar4 = *(ushort *)(data_parameters + 3);\n  data_parameters[1] = 0;\n  temp_uVar5 = (uint)*(ushort *)(data_parameters + 3);\n  if ((int)(temp_uVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp_uVar5 << 0x1d) < 0) {\n    if ((undefined4 *)data_parameters[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data_parameters[0xd] != data_parameters + 0x11) {\n        initialize_data_00004b34(system_parameters);\n      }\n      data_parameters[1] = data_parameters[0x10];\n      data_parameters[0xd] = 0;\n      if (data_parameters[0x10] != 0) {\n        *data_parameters = data_parameters[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp_uVar5 << 0x1b)) {\n      *system_parameters = 9;\n      temp_uVar4 = temp_uVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp_uVar5 << 0x1c) < 0) {\n      temp_iVar2 = validate_data_00004158(system_parameters,data_parameters,temp_uVar5 << 0x1c,temp_uVar5,param_4);\n      if (temp_iVar2 != 0) {\n        return 0xffffffff;\n      }\n      data_parameters[2] = 0;\n      *(ushort *)(data_parameters + 3) = *(ushort *)(data_parameters + 3) & 0xfff7;\n      data_parameters[6] = 0;\n    }\n    *(ushort *)(data_parameters + 3) = *(ushort *)(data_parameters + 3) | 4;\n  }\n  if (data_parameters[4] == 0) {\n    allocate_and_set_permissions_00005700(system_parameters,data_parameters);\n  }\n  temp_uVar4 = *(ushort *)(data_parameters + 3);\n  temp_uVar1 = *(undefined2 *)(data_parameters + 3);\n  if ((temp_uVar4 & 3) != 0) {\n    *(undefined2 *)(data_parameters + 3) = 1;\n    find_and_execute_functions_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(data_parameters + 3) = temp_uVar1;\n    if ((temp_uVar4 & 9) == 9) {\n      process_data_0000404c(system_parameters,data_parameters);\n    }\n  }\n  temp_uVar3 = data_parameters[4];\n  *data_parameters = temp_uVar3;\n  temp_iVar2 = (*(code *)data_parameters[9])(system_parameters,data_parameters[8],temp_uVar3,data_parameters[5]);\n  data_parameters[1] = temp_iVar2;\n  if (0 < temp_iVar2) {\n    return 0;\n  }\n  temp_uVar4 = *(ushort *)(data_parameters + 3);\n  if (temp_iVar2 != 0) {\n    temp_uVar3 = 0;\n  }\n  else {\n    temp_uVar4 = temp_uVar4 | 0x20;\n  }\n  if (temp_iVar2 != 0) {\n    data_parameters[1] = temp_uVar3;\n    temp_uVar4 = temp_uVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data_parameters + 3) = temp_uVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "execute_data_processing_00006768",
                "param_1": "system_parameters",
                "param_2": "data_parameters",
                "uVar1": "temp_uVar1",
                "iVar2": "temp_iVar2",
                "uVar3": "temp_uVar3",
                "uVar4": "temp_uVar4",
                "uVar5": "temp_uVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_and_process_data_0000687c",
            "code": "\nbyte * extract_and_process_data_0000687c(int data_length,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int loop_counter;\n  uint current_byte;\n  uint start_index;\n  uint end_index;\n  bool is_special_byte;\n  \n  current_byte = (uint)*data;\n  is_special_byte = current_byte == 0x5e;\n  if (is_special_byte) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  loop_counter = data_length + -1;\n  do {\n    loop_counter = loop_counter + 1;\n    *(bool *)loop_counter = is_special_byte;\n  } while (loop_counter != data_length + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_index = current_byte;\n      *(bool *)(data_length + start_index) = !is_special_byte;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        end_index = (uint)*data;\n        if ((end_index == 0x5d) || (temp_var = start_index, (int)end_index < (int)start_index)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(data_length + temp_var) = !is_special_byte;\n        } while ((int)temp_var < (int)end_index);\n        loop_counter = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          loop_counter = 0;\n        }\n        start_index = start_index + 1 + loop_counter;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_and_process_data_0000687c",
                "param_1": "data_length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "iVar3": "loop_counter",
                "uVar4": "current_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_special_byte"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_resize_memory_000068f0",
            "code": "\nundefined4 allocate_or_resize_memory_000068f0(undefined4 arg1,int *arg2)\n\n{\n  int block_address;\n  int current_size;\n  \n  if ((int *)arg2[0xd] == arg2 + 0x11) {\n    block_address = allocate_memory_block_00004bd0(arg1,0x400);\n    if (block_address != 0) {\n      arg2[0xe] = 0x400;\n      arg2[0xd] = block_address;\n      *(undefined *)(block_address + 0x3ff) = *(undefined *)((int)arg2 + 0x46);\n      *(undefined *)(block_address + 0x3fe) = *(undefined *)((int)arg2 + 0x45);\n      *(undefined *)(block_address + 0x3fd) = *(undefined *)(arg2 + 0x11);\n      *arg2 = block_address + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = arg2[0xe];\n    block_address = allocate_and_copy_data_000060cc(arg1,(int *)arg2[0xd],current_size << 1);\n    if (block_address != 0) {\n      copy_bytes_000060b0(block_address + current_size,block_address,current_size);\n      arg2[0xd] = block_address;\n      arg2[0xe] = current_size << 1;\n      *arg2 = block_address + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_resize_memory_000068f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "block_address",
                "iVar2": "current_size"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_result_00006964",
            "code": "\nint calculateResult_00006964(undefined4 input,int address)\n\n{\n  int result;\n  \n  result = *(int *)(address + -4) + -4;\n  if (*(int *)(address + -4) < 0) {\n    result = result + *(int *)(address + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "input",
                "param_2": "address",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "optimize_param_range_00006974",
            "code": "\nundefined8 optimize_param_range_00006974(int numerator,int denominator,int dividend,int divisor)\n\n{\n  int adjusted_denominator;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((divisor == 0) && (dividend == 0)) {\n    if (denominator < 0) {\n      numerator = 0;\n      denominator = -0x80000000;\n    }\n    else if (denominator != 0 || numerator != 0) {\n      denominator = 0x7fffffff;\n      numerator = -1;\n    }\n    return CONCAT44(denominator,numerator);\n  }\n  if (denominator < 0) {\n    adjusted_denominator = -denominator - (uint)(numerator != 0);\n    if (divisor < 0) {\n      result = divide_and_remainder_00006a14(-numerator,adjusted_denominator,-dividend,-divisor - (uint)(dividend != 0),temp);\n      return result;\n    }\n    result = divide_and_remainder_00006a14(-numerator,adjusted_denominator,dividend,divisor,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (divisor < 0) {\n    result = divide_and_remainder_00006a14(numerator,denominator,-dividend,-divisor - (uint)(dividend != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_and_remainder_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "optimize_param_range_00006974",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "dividend",
                "param_4": "divisor",
                "iVar1": "adjusted_denominator",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideAndRemainder_00006a14(uint dividend,uint dividendUpper,uint divisor,uint remainder,uint *quotient)\n\n{\n  code *jmpTable;\n  uint dividendQuotient;\n  int shiftAmount;\n  uint dividendLower;\n  uint newDividendQuotient;\n  uint shiftedDividend;\n  uint dividendRemainder;\n  uint divisorLower;\n  uint newDividendRemainder;\n  uint divisorQuotient;\n  bool carryFlag;\n  ulonglong result;\n  \n  if (remainder == 0) {\n    if (dividendUpper < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      shiftedDividend = divisor;\n      if (shiftAmount != 0) {\n        shiftedDividend = divisor << shiftAmount;\n        dividendUpper = dividend >> (0x20U - shiftAmount & 0xff) | dividendUpper << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      dividendRemainder = shiftedDividend >> 0x10;\n      newDividendRemainder = dividendUpper / dividendRemainder;\n      dividendLower = dividend >> 0x10 | (dividendUpper - dividendRemainder * newDividendRemainder) * 0x10000;\n      dividendQuotient = newDividendRemainder * (shiftedDividend & 0xffff);\n      newDividendQuotient = newDividendRemainder;\n      if (dividendLower <= dividendQuotient && dividendQuotient - dividendLower != 0) {\n        carryFlag = CARRY4(shiftedDividend,dividendLower);\n        dividendLower = shiftedDividend + dividendLower;\n        newDividendQuotient = newDividendRemainder - 1;\n        if ((carryFlag == false) && (dividendLower <= dividendQuotient && dividendQuotient - dividendLower != 0)) {\n          newDividendQuotient = newDividendRemainder - 2;\n          dividendLower = dividendLower + shiftedDividend;\n        }\n      }\n      newDividendRemainder = (dividendLower - dividendQuotient) / dividendRemainder;\n      dividendRemainder = dividend & 0xffff | ((dividendLower - dividendQuotient) - dividendRemainder * newDividendRemainder) * 0x10000;\n      dividendLower = newDividendRemainder * (shiftedDividend & 0xffff);\n      dividendQuotient = newDividendRemainder;\n      if (dividendRemainder <= dividendLower && dividendLower - dividendRemainder != 0) {\n        carryFlag = CARRY4(shiftedDividend,dividendRemainder);\n        dividendRemainder = shiftedDividend + dividendRemainder;\n        dividendQuotient = newDividendRemainder - 1;\n        if ((carryFlag == false) && (dividendRemainder <= dividendLower && dividendLower - dividendRemainder != 0)) {\n          dividendQuotient = newDividendRemainder - 2;\n          dividendRemainder = dividendRemainder + shiftedDividend;\n        }\n      }\n      dividendRemainder = dividendRemainder - dividendLower;\n      dividendQuotient = dividendQuotient | newDividendQuotient << 0x10;\n      shiftedDividend = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jmpTable = (code *)software_udf(0xff,0x6abc);\n        result = (*jmpTable)();\n        return result;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendUpper = dividendUpper - divisor;\n        divisorQuotient = divisor >> 0x10;\n        divisorLower = divisor & 0xffff;\n        shiftedDividend = 1;\n        newDividendQuotient = divisor;\n      }\n      else {\n        newDividendQuotient = divisor << shiftAmount;\n        divisorQuotient = newDividendQuotient >> 0x10;\n        dividendQuotient = dividendUpper >> (0x20U - shiftAmount & 0xff);\n        shiftedDividend = dividend >> (0x20U - shiftAmount & 0xff) | dividendUpper << shiftAmount;\n        dividendLower = dividendQuotient / divisorQuotient;\n        divisorLower = newDividendQuotient & 0xffff;\n        newDividendRemainder = shiftedDividend >> 0x10 | (dividendQuotient - divisorQuotient * dividendLower) * 0x10000;\n        dividendRemainder = dividendLower * divisorLower;\n        dividend = dividend << shiftAmount;\n        dividendQuotient = dividendLower;\n        if (newDividendRemainder <= dividendRemainder && dividendRemainder - newDividendRemainder != 0) {\n          carryFlag = CARRY4(newDividendQuotient,newDividendRemainder);\n          newDividendRemainder = newDividendQuotient + newDividendRemainder;\n          dividendQuotient = dividendLower - 1;\n          if ((carryFlag == false) && (newDividendRemainder <= dividendRemainder && dividendRemainder - newDividendRemainder != 0)) {\n            dividendQuotient = dividendLower - 2;\n            newDividendRemainder = newDividendRemainder + newDividendQuotient;\n          }\n        }\n        dividendLower = (newDividendRemainder - dividendRemainder) / divisorQuotient;\n        dividendUpper = shiftedDividend & 0xffff | ((newDividendRemainder - dividendRemainder) - divisorQuotient * dividendLower) * 0x10000;\n        dividendRemainder = dividendLower * divisorLower;\n        shiftedDividend = dividendLower;\n        if (dividendUpper <= dividendRemainder && dividendRemainder - dividendUpper != 0) {\n          carryFlag = CARRY4(newDividendQuotient,dividendUpper);\n          dividendUpper = newDividendQuotient + dividendUpper;\n          shiftedDividend = dividendLower - 1;\n          if ((carryFlag == false) && (dividendUpper <= dividendRemainder && dividendRemainder - dividendUpper != 0)) {\n            shiftedDividend = dividendLower - 2;\n            dividendUpper = dividendUpper + newDividendQuotient;\n          }\n        }\n        dividendUpper = dividendUpper - dividendRemainder;\n        shiftedDividend = shiftedDividend | dividendQuotient << 0x10;\n      }\n      newDividendRemainder = dividendUpper / divisorQuotient;\n      dividendRemainder = dividend >> 0x10 | (dividendUpper - divisorQuotient * newDividendRemainder) * 0x10000;\n      dividendQuotient = divisorLower * newDividendRemainder;\n      dividendLower = newDividendRemainder;\n      if (dividendRemainder <= dividendQuotient && dividendQuotient - dividendRemainder != 0) {\n        carryFlag = CARRY4(newDividendQuotient,dividendRemainder);\n        dividendRemainder = newDividendQuotient + dividendRemainder;\n        dividendLower = newDividendRemainder - 1;\n        if ((carryFlag == false) && (dividendRemainder <= dividendQuotient && dividendQuotient - dividendRemainder != 0)) {\n          dividendLower = newDividendRemainder - 2;\n          dividendRemainder = dividendRemainder + newDividendQuotient;\n        }\n      }\n      newDividendRemainder = (dividendRemainder - dividendQuotient) / divisorQuotient;\n      dividendRemainder = dividend & 0xffff | ((dividendRemainder - dividendQuotient) - divisorQuotient * newDividendRemainder) * 0x10000;\n      divisorLower = divisorLower * newDividendRemainder;\n      dividendQuotient = newDividendRemainder;\n      if (dividendRemainder <= divisorLower && divisorLower - dividendRemainder != 0) {\n        carryFlag = CARRY4(newDividendQuotient,dividendRemainder);\n        dividendRemainder = newDividendQuotient + dividendRemainder;\n        dividendQuotient = newDividendRemainder - 1;\n        if ((carryFlag == false) && (dividendRemainder <= divisorLower && divisorLower - dividendRemainder != 0)) {\n          dividendQuotient = newDividendRemainder - 2;\n          dividendRemainder = dividendRemainder + newDividendQuotient;\n        }\n      }\n      dividendRemainder = dividendRemainder - divisorLower;\n      dividendQuotient = dividendQuotient | dividendLower << 0x10;\n    }\n    if (quotient != (uint *)0x0) {\n      *quotient = dividendRemainder >> LZCOUNT(divisor);\n      quotient[1] = 0;\n    }\n  }\n  else if (dividendUpper < remainder) {\n    if (quotient != (uint *)0x0) {\n      *quotient = dividend;\n      quotient[1] = dividendUpper;\n      return 0;\n    }\n    dividendQuotient = 0;\n    shiftedDividend = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount != 0) {\n      divisorLower = 0x20 - shiftAmount;\n      dividendLower = divisor >> (divisorLower & 0xff) | remainder << shiftAmount;\n      divisorQuotient = dividendLower >> 0x10;\n      dividendQuotient = dividendUpper >> (divisorLower & 0xff);\n      shiftedDividend = dividend >> (divisorLower & 0xff) | dividendUpper << shiftAmount;\n      dividendRemainder = dividendQuotient / divisorQuotient;\n      newDividendQuotient = shiftedDividend >> 0x10 | (dividendQuotient - divisorQuotient * dividendRemainder) * 0x10000;\n      newDividendRemainder = dividendRemainder * (dividendLower & 0xffff);\n      dividend = dividend << shiftAmount;\n      dividendQuotient = dividendRemainder;\n      if (newDividendQuotient <= newDividendRemainder && newDividendRemainder - newDividendQuotient != 0) {\n        carryFlag = CARRY4(dividendLower,newDividendQuotient);\n        newDividendQuotient = dividendLower + newDividendQuotient;\n        dividendQuotient = dividendRemainder - 1;\n        if ((carryFlag == false) && (newDividendQuotient <= newDividendRemainder && newDividendRemainder - newDividendQuotient != 0)) {\n          dividendQuotient = dividendRemainder - 2;\n          newDividendQuotient = newDividendQuotient + dividendLower;\n        }\n      }\n      dividendRemainder = (newDividendQuotient - newDividendRemainder) / divisorQuotient;\n      newDividendQuotient = shiftedDividend & 0xffff | ((newDividendQuotient - newDividendRemainder) - divisorQuotient * dividendRemainder) * 0x10000;\n      newDividendRemainder = dividendRemainder * (dividendLower & 0xffff);\n      shiftedDividend = dividendRemainder;\n      if (newDividendQuotient <= newDividendRemainder && newDividendRemainder - newDividendQuotient != 0) {\n        carryFlag = CARRY4(dividendLower,newDividendQuotient);\n        newDividendQuotient = dividendLower + newDividendQuotient;\n        shiftedDividend = dividendRemainder - 1;\n        if ((carryFlag == false) && (newDividendQuotient <= newDividendRemainder && newDividendRemainder - newDividendQuotient != 0)) {\n          shiftedDividend = dividendRemainder - 2;\n          newDividendQuotient = newDividendQuotient + dividendLower;\n        }\n      }\n      shiftedDividend = shiftedDividend | dividendQuotient << 0x10;\n      result = (ulonglong)shiftedDividend * (ulonglong)(divisor << shiftAmount);\n      if (CONCAT44(newDividendQuotient - newDividendRemainder,dividend) < result) {\n        result = result - CONCAT44(dividendLower,divisor << shiftAmount);\n        shiftedDividend = shiftedDividend - 1;\n      }\n      if (quotient != (uint *)0x0) {\n        dividendQuotient = ((newDividendQuotient - newDividendRemainder) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient = dividendQuotient << (divisorLower & 0xff) | dividend - (uint)result >> shiftAmount;\n        quotient[1] = dividendQuotient >> shiftAmount;\n      }\n      return (ulonglong)shiftedDividend;\n    }\n    if ((remainder < dividendUpper) || (divisor <= dividend)) {\n      carryFlag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividendUpper = (dividendUpper - remainder) - (uint)carryFlag;\n      dividendQuotient = 1;\n    }\n    else {\n      dividendQuotient = 0;\n    }\n    shiftedDividend = 0;\n    if (quotient != (uint *)0x0) {\n      *quotient = dividend;\n      quotient[1] = dividendUpper;\n    }\n  }\n  return CONCAT44(shiftedDividend,dividendQuotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividendUpper",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "quotient",
                "UNRECOVERED_JUMPTABLE": "jmpTable",
                "uVar1": "dividendQuotient",
                "iVar2": "shiftAmount",
                "uVar3": "dividendLower",
                "uVar4": "newDividendQuotient",
                "uVar5": "shiftedDividend",
                "uVar6": "dividendRemainder",
                "uVar7": "divisorLower",
                "uVar8": "newDividendRemainder",
                "uVar9": "divisorQuotient",
                "bVar10": "carryFlag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 135005,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}