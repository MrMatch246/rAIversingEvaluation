{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_and_update_offset_00000428",
            "code": "\ndword validate_and_update_offset_00000428(undefined4 *output_parameter,int input_parameter)\n\n{\n  undefined4 result;\n  dword new_offset;\n  \n  result = FUN_00000cd0();\n  new_offset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((input_parameter + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_parameter + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = input_parameter + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *output_parameter = 0xc;\n    new_offset = 0xffffffff;\n  }\n  FUN_00000d0c(result);\n  return new_offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_and_update_offset_00000428",
                "param_1": "output_parameter",
                "param_2": "input_parameter",
                "uVar1": "result",
                "local_c": "new_offset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_and_return_result_00000490",
            "code": "\nundefined4 process_and_return_result_00000490(undefined4 input_param_1,undefined4 input_param_2,undefined4 data_param_1,undefined4 data_param_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(data_param_1,data_param_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_and_return_result_00000490",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "data_param_1",
                "param_4": "data_param_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_memory_000004f2",
            "code": "\nundefined4 initializeMemory_000004f2(undefined4 *memoryPointer)\n\n{\n  *memoryPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_memory_000004f2",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_and_return_00000514",
            "code": "\nundefined4 initializeValueAndReturn_00000514(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_and_return_00000514",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *outputValue,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *outputValue = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "calculate_lz_count_00000566",
            "code": "\nint calculateLZCount_00000566(int inputValue)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)inputValue;\n  byte3 = (byte)((uint)inputValue >> 8);\n  byte4 = (byte)((uint)inputValue >> 0x10);\n  byte1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "calculate_lz_count_00000566",
                "param_1": "inputValue",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptr,undefined4 *newPtr)\n\n{\n  if (*ptr == 0) {\n    *newPtr = newPtr;\n  }\n  else {\n    *newPtr = *(undefined4 *)*ptr;\n    *(undefined4 **)*ptr = newPtr;\n  }\n  *ptr = (int)newPtr;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptr",
                "param_2": "newPtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_list_from_pointer_000005ca",
            "code": "\nundefined4 * extractListFromPointer_000005ca(int *listPointer)\n\n{\n  undefined4 *extractedList;\n  \n  if (*listPointer == 0) {\n    extractedList = (undefined4 *)0x0;\n  }\n  else {\n    extractedList = *(undefined4 **)*listPointer;\n    if (extractedList == (undefined4 *)*listPointer) {\n      *listPointer = 0;\n    }\n    else {\n      *(undefined4 *)*listPointer = *extractedList;\n    }\n  }\n  return extractedList;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_list_from_pointer_000005ca",
                "param_1": "listPointer",
                "puVar1": "extractedList"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "validate_data_00000610",
            "code": "\nundefined4 validateData_00000610(void)\n\n{\n  int dataAddress;\n  int index;\n  undefined4 result;\n  \n  dataAddress = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataAddress == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((dataAddress != 0) && (*(char *)(dataAddress + 4) == '\\t')) {\n      *(undefined *)(dataAddress + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "validate_data_00000610",
                "iVar1": "dataAddress",
                "iVar2": "index",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataAddress,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataAddress + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(dataAddress + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataAddress + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataAddress + 5));\n    }\n  }\n  else if (*(byte *)(dataAddress + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(dataAddress + 5) * 4,dataAddress + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataAddress + 5);\n  }\n  *(char *)(dataAddress + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_execute_function_00000738",
            "code": "\nvoid checkAndExecuteFunction_00000738(ushort inputValue)\n\n{\n  int returnValue;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    returnValue = FUN_00000d2a();\n    if (returnValue == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_execute_function_00000738",
                "param_1": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_values_00000794",
            "code": "\nint * initializeValues_00000794(void)\n\n{\n  int result;\n  int index;\n  undefined4 *ptr;\n  uint alignedAddress;\n  int loopIndex1;\n  int loopIndex2;\n  int *array;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  ptr = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)ptr + index & 0xfffffffc;\n  array = (int *)(alignedAddress - 4);\n  *array = 0x77777777;\n  if (((uint)array & 7) != 0) {\n    array = (int *)(alignedAddress - 8);\n    *array = 0x88888888;\n  }\n  array[-1] = 0x1000000;\n  array[-2] = index << 0xd;\n  array[-3] = 0x795;\n  array = array + -4;\n  *array = 0;\n  for (loopIndex2 = 3; 0 < loopIndex2; loopIndex2 = loopIndex2 + -1) {\n    array = array + -1;\n    *array = loopIndex2;\n  }\n  array = array + -1;\n  *array = result;\n  for (loopIndex1 = 0xb; 3 < loopIndex1; loopIndex1 = loopIndex1 + -1) {\n    array = array + -1;\n    *array = loopIndex1;\n  }\n  array[-1] = -3;\n  return array + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_values_00000794",
                "extraout_r1": "result",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "alignedAddress",
                "iStack_1c": "loopIndex1",
                "iStack_18": "loopIndex2",
                "piStack_14": "array"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *ptr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_relocation_offset_000008b8",
            "code": "\nint calculateRelocationOffset_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->r_offset == 0xe7fee7fe && (currentRelocation < relocationArray));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->r_info) {\n  }\n  return ((int)relocationArray - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_relocation_offset_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nunsigned_integer getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "unsigned_integer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_interrupt_flag_0000093c",
            "code": "\n\n\nvoid setInterruptFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_interrupt_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNMIHandlerAddress_00000a30(void)\n\n{\n  int offset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return baseAddress + -*(int *)(offset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "offset",
                "&stack0xe000ffe0": "baseAddress"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "get_irq_interrupt_state_00000cc0",
            "code": "\nundefined4 getIRQInterruptState_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "get_irq_interrupt_state_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_ir_qinterrupts_state_00000cd0",
            "code": "\nundefined4 getIRQinterruptsState_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_ir_qinterrupts_state_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_00000cf0",
            "code": "\nundefined4 checkIRQinterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableInterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkInterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_00000cf0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkInterruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_for_privileged_mode_00000d0c",
            "code": "\nvoid enableInterruptsForPrivilegedMode_00000d0c(uint inputFlag)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    setIRQinterrupts((inputFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_for_privileged_mode_00000d0c",
                "param_1": "inputFlag",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "setIRQinterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_privileged_exception_number_00000d2a",
            "code": "\nuint getPrivilegedExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_privileged_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_result_00000d44",
            "code": "\nint calculateResult_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 inputPointer,undefined outputPointer)\n\n{\n  undefined4 *outputPointerModified;\n  \n  outputPointerModified = (undefined4 *)FUN_00000d44(inputPointer,outputPointer);\n  *outputPointerModified = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "puVar1": "outputPointerModified"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "configure_peripheral_00000d9c",
            "code": "\nvoid configurePeripheral_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "configure_peripheral_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initializeSystem_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_application_00000dc0",
            "code": "\nvoid initializeApplication_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_application_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_data_00000df4",
            "code": "\nvoid initializeData_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_data_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "perform_action_00000e14",
            "code": "\nundefined4 performAction_00000e14(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,input1,input2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "perform_action_00000e14",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "perform_operation_00000e38",
            "code": "\nundefined4 performOperation_00000e38(undefined4 input_1,undefined4 input_2)\n\n{\n  FUN_000015d0(0,input_1,input_2);\n  return input_2;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "perform_operation_00000e38",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_endless_loop_00000e58",
            "code": "\nvoid runEndlessLoop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_endless_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_hardware_00000e64",
            "code": "\n\n\nvoid initializeHardware_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_hardware_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 linkRegister;\n  \n  FUN_00004c84(&DAT_00006f58,linkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "linkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicCharacter,undefined4 panicMessage)\n\n{\n  undefined4 stackVariable;\n  code *jumpTable;\n  undefined4 messagePtr;\n  char character;\n  \n  messagePtr = panicMessage;\n  character = panicCharacter;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicCharacter == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",messagePtr);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  stackVariable = (int)&stackVariable + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicCharacter",
                "param_2": "panicMessage",
                "uStack_18": "stackVariable",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "messagePtr",
                "local_9": "character"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint shiftedValue;\n  undefined4 *memoryAddress;\n  uint loopIndex;\n  int shiftedIndex;\n  int *indexPointer;\n  undefined4 functionValue;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  dword localData;\n  \n  FUN_00000cd0();\n  localData = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  parameter2 = 0;\n  parameter1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  localData = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  parameter2 = 0;\n  parameter1 = 0xf5d;\n  loopIndex = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  functionValue = 0xfd3;\n  shiftedValue = FUN_00000930();\n  shiftedValue = shiftedValue >> 0x1e;\n  memoryAddress = (undefined4 *)(loopIndex * 0x100);\n  shiftedIndex = (loopIndex >> 0x1d) << 0x11;\n  indexPointer = &shiftedIndex;\n  if ((shiftedValue & shiftedValue - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *memoryAddress = 0;\n  memoryAddress[1] = 0;\n  memoryAddress[2] = shiftedValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "shiftedValue",
                "puVar2": "memoryAddress",
                "uVar3": "loopIndex",
                "iStack_24": "shiftedIndex",
                "piStack_20": "indexPointer",
                "uStack_1c": "functionValue",
                "local_18": "parameter1",
                "local_14": "parameter2",
                "local_10": "localData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_array_00000fec",
            "code": "\nvoid initializeArray_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_array_00000fec",
                "param_1": "array",
                "param_2": "size",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_smallest_pointer_00001034",
            "code": "\nvoid findSmallestPointer_00001034(int **pointerList,int ptrIndex)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(ptrIndex + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(ptrIndex + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(ptrIndex + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(ptrIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_smallest_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "ptrIndex",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_position;\n  \n  for (current_position = array; (int *)*current_position == current_position; current_position = current_position + 1) {\n  }\n  return (int)current_position - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_position"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint inputBuffer,int inputSize,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 tempValue;\n  int returnValue;\n  uint alignedSize;\n  undefined4 *dataPtr;\n  int alignedSizeOffset;\n  uint alignedDataPtr;\n  uint loopVar;\n  short indexVar;\n  short freeEntry;\n  \n  if (byteCount < 0x10) {\n    alignedSizeOffset = inputSize;\n    alignedDataPtr = inputBuffer;\n    if ((inputBuffer & 3) != 0) {\n      alignedSizeOffset = 4 - (inputBuffer & 3);\n      alignedDataPtr = alignedSizeOffset + inputBuffer;\n      alignedSizeOffset = inputSize - alignedSizeOffset;\n    }\n    alignedSize = alignedSizeOffset - 0x30U & 0xfffffffc;\n    dataPtr = (undefined4 *)(alignedSize + alignedDataPtr);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedDataPtr = alignedDataPtr;\n    }\n    else {\n      for (loopVar = alignedDataPtr; loopVar < alignedSize + alignedDataPtr; loopVar = loopVar + 4) {\n        *(uint *)loopVar = loopVar;\n      }\n    }\n    result = FUN_00000cd0();\n    freeEntry = 0;\n    for (indexVar = 1; indexVar < 0x21; indexVar = indexVar + 1) {\n      if (*(int *)(&DAT_1fff0358 + indexVar * 4) == 0) {\n        freeEntry = indexVar;\n        break;\n      }\n    }\n    if (freeEntry == 0) {\n      FUN_00000d0c(result);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + freeEntry * 4) = dataPtr;\n      *(short *)((int)dataPtr + 6) = freeEntry;\n      tempValue = FUN_000007dc(param5,param6,alignedDataPtr,alignedSize);\n      *dataPtr = tempValue;\n      dataPtr[9] = alignedDataPtr;\n      dataPtr[0xb] = inputSize;\n      dataPtr[10] = param7;\n      *(byte *)((int)dataPtr + 5) = byteCount;\n      *(undefined *)(dataPtr + 1) = 0;\n      dataPtr[2] = 0;\n      dataPtr[3] = 0;\n      dataPtr[4] = 0;\n      FUN_00000fec(dataPtr + 5,0);\n      dataPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(dataPtr,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(byteCount);\n          return (int)freeEntry;\n        }\n      }\n      else {\n        FUN_00000698(dataPtr,1);\n      }\n      FUN_00000d0c(result);\n      returnValue = (int)freeEntry;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "inputBuffer",
                "param_2": "inputSize",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "tempValue",
                "iVar3": "returnValue",
                "uVar4": "alignedSize",
                "puVar5": "dataPtr",
                "local_30": "alignedSizeOffset",
                "local_2c": "alignedDataPtr",
                "local_10": "loopVar",
                "local_c": "indexVar",
                "local_a": "freeEntry"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_function_0000129c",
            "code": "\nvoid initializeFunction_0000129c(undefined4 data)\n\n{\n  FUN_00002434(data,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_function_0000129c",
                "param_1": "data"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "execute_operation_000012b4",
            "code": "\nundefined4 executeOperation_000012b4(int inputValue,undefined inputData)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(inputValue + 4,inputData);\n  FUN_000024bc(inputValue);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "execute_operation_000012b4",
                "param_1": "inputValue",
                "param_2": "inputData",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_for_error_000012e2",
            "code": "\nint check_for_error_000012e2(int input,undefined4 value_2,undefined4 value_3)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input + 4,value_2,value_3);\n    if (result != 0) break;\n    FUN_0000129c(input);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_for_error_000012e2",
                "param_1": "input",
                "param_2": "value_2",
                "param_3": "value_3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_integer_00001318",
            "code": "\nvoid setBitInInteger_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_integer_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_execute_function_00001348",
            "code": "\nvoid checkAndExecuteFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_execute_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint offset1,int multiplier)\n\n{\n  return multiplier * 4 + (offset1 & 0xf0000000 | (offset1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "offset1",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_flag_00001392",
            "code": "\nvoid setFlag_00001392(undefined4 data,undefined flag)\n\n{\n  undefined4 *flagPtr;\n  \n  flagPtr = (undefined4 *)FUN_00001360(data,flag);\n  *flagPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_flag_00001392",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_000013b8",
            "code": "\nundefined4 updateData_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(value1 *)(&DAT_00006fec + index * 0x20),\n                 *(value2 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(value1 *)(&DAT_00006fee + index * 0x20),\n                 *(value2 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index",
                "undefined2": "value1",
                "undefined4": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_data_000014c4",
            "code": "\nvoid updateData_000014c4(int index,uint value)\n\n{\n  byte *dataPointer;\n  uint dataValue;\n  uint calculatedValue;\n  \n  dataPointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  dataValue = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPointer[3] = dataPointer[3] & 0xf3;\n  dataPointer[2] = (&DAT_00007001)[index * 0x20];\n  calculatedValue = dataValue / (value << 4);\n  *dataPointer = (byte)(calculatedValue >> 8) & 0x1f;\n  dataPointer[1] = (byte)calculatedValue;\n  dataPointer[10] = (byte)((dataValue << 2) / value + 1 >> 1) & 0x1f;\n  dataPointer[0x10] = dataPointer[0x10] | 0x88;\n  if ((dataPointer[0x10] & 0x70) == 0) {\n    dataPointer[0x13] = 0;\n  }\n  else {\n    dataPointer[0x13] = (char)(2 << (dataPointer[0x10] >> 4 & 7)) - 1;\n  }\n  dataPointer[0x15] = 1;\n  dataPointer[0x11] = 0xc0;\n  dataPointer[3] = dataPointer[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "dataPointer",
                "uVar2": "dataValue",
                "uVar3": "calculatedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int sourceData,uint length)\n\n{\n  int dataPtr;\n  uint count;\n  \n  dataPtr = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (count = 0; count < length; count = count + 1) {\n    do {\n    } while (-1 < *(char *)(dataPtr + 4));\n    *(undefined *)(dataPtr + 7) = *(undefined *)(count + sourceData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "sourceData",
                "param_3": "length",
                "iVar1": "dataPtr",
                "local_c": "count"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_task_00001628",
            "code": "\nvoid executeTask_00001628(int taskIndex)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + taskIndex * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + taskIndex * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + taskIndex * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + taskIndex * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + taskIndex * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_task_00001628",
                "param_1": "taskIndex"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_function_00001688",
            "code": "\nvoid initialize_function_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_function_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_flag_one_000016c8",
            "code": "\nvoid setFlagOne_000016c8(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001696(input1,input2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_flag_one_000016c8",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 arg1,undefined arg2)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(arg1,arg2);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 address,undefined size)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(address,size);\n  *pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "address",
                "param_2": "size",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_byte_value_00001748",
            "code": "\nvoid updateByteValue_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_byte_value_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_and_call_function_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlagsAndCallFunction_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_and_call_function_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_data_0000191c",
            "code": "\nvoid initializeData_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_application_00001a18",
            "code": "\nvoid initializeApplication_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_application_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_byte_00001b10",
            "code": "\nundefined4 processByte_00001b10(byte byteValue)\n\n{\n  undefined4 result;\n  \n  if (byteValue < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)byteValue + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (byteValue != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_byte_00001b10",
                "param_1": "byteValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_communication_00001bb8",
            "code": "\nvoid initializeCommunication_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_communication_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(returnValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_execute_function_00001cf0",
            "code": "\nvoid checkAndExecuteFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_execute_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_result_00001d08",
            "code": "\nint calculateResult_00001d08(uint inputParam,int multiplier)\n\n{\n  return multiplier * 4 + (inputParam & 0xf0000000 | (inputParam & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_result_00001d08",
                "param_1": "inputParam",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "initialize_pointer_00001d3a",
            "code": "\nvoid initializePointer_00001d3a(undefined4 inputValue1,undefined inputValue2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001d08(inputValue1,inputValue2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "initialize_pointer_00001d3a",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_offset_00001d5e",
            "code": "\nuint applyMaskAndOffset_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_offset_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "set_bitmask_00001d80",
            "code": "\nuint setBitmask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "set_bitmask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bit_00001da2",
            "code": "\nushort extractBit_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bit_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "truncate_to_six_bits_00001dc0",
            "code": "\nushort truncateToSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "truncate_to_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "increase_value_and_print_00001ddc",
            "code": "\nvoid increaseValueAndPrint_00001ddc(undefined2 input)\n\n{\n  char result;\n  \n  result = FUN_00001da2(input);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "increase_value_and_print_00001ddc",
                "param_1": "input",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "decode_bits_00001e0c",
            "code": "\nuint decode_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "decode_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "set_bits_in_memory_00001e44",
            "code": "\nvoid setBitsInMemory_00001e44(int index,uint bitOffset,int value)\n\n{\n  int shiftedOffset;\n  \n  shiftedOffset = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + index * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + index * 4) * 4) | value << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "set_bits_in_memory_00001e44",
                "param_1": "index",
                "param_2": "bitOffset",
                "param_3": "value",
                "iVar1": "shiftedOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_data_00001ec4",
            "code": "\nvoid processData_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_status_00001eea",
            "code": "\nundefined4 updateStatus_00001eea(undefined2 input,byte status)\n\n{\n  uint index;\n  int dataPtr;\n  int index2;\n  \n  FUN_00001f80(input,0);\n  if ((char)status < '\\0') {\n    index = FUN_00001dc0(input);\n    dataPtr = FUN_00001d80(input);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(input);\n    dataPtr = FUN_00001d80(input);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) & ~(1 << (index & 0xff));\n  }\n  dataPtr = FUN_00001d5e(input);\n  index2 = FUN_00001dc0(input);\n  *(uint *)(dataPtr + index2 * 4) = status & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_status_00001eea",
                "param_1": "input",
                "param_2": "status",
                "uVar1": "index",
                "iVar2": "dataPtr",
                "iVar3": "index2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid updateData_00001f80(undefined2 input,undefined4 newData)\n\n{\n  int offset1;\n  int offset2;\n  undefined4 address1;\n  undefined4 address2;\n  uint currentData;\n  \n  FUN_00001ddc(input);\n  offset1 = FUN_00001d5e(input);\n  offset2 = FUN_00001dc0(input);\n  currentData = *(uint *)(offset1 + offset2 * 4);\n  offset1 = FUN_00001d5e(input);\n  offset2 = FUN_00001dc0(input);\n  *(undefined4 *)(offset1 + offset2 * 4) = newData;\n  if ((currentData & 0xf0000) != 0) {\n    address1 = FUN_00001da2(input);\n    address2 = FUN_00001dc0(input);\n    FUN_00001ec4(address1,address2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "input",
                "param_2": "newData",
                "iVar1": "offset1",
                "iVar2": "offset2",
                "uVar3": "address1",
                "uVar4": "address2",
                "uVar5": "currentData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_in_int_00001ff6",
            "code": "\nvoid setBitInInt_00001ff6(undefined2 inputValue)\n\n{\n  uint bitPosition;\n  int address;\n  \n  bitPosition = FUN_00001dc0(inputValue);\n  address = FUN_00001d80(inputValue);\n  *(int *)(address + 4) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_in_int_00001ff6",
                "param_1": "inputValue",
                "uVar1": "bitPosition",
                "iVar2": "address"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int dataPtr,undefined4 config)\n\n{\n  int index;\n  uint bitmask;\n  uint counter;\n  \n  bitmask = *(uint *)(dataPtr + 0xa0);\n  for (counter = 0; (int)counter < 0x20; counter = counter + 1) {\n    if (((bitmask & 1 << (counter & 0xff)) != 0) &&\n       ((*(uint *)(dataPtr + counter * 4) & 0xf0000) != 0)) {\n      *(int *)(dataPtr + 0xa0) = 1 << (counter & 0xff);\n      index = FUN_00001e0c(config,counter);\n      (**(code **)(&DAT_1fff0b78 + index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + index * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "dataPtr",
                "param_2": "config",
                "iVar1": "index",
                "uVar2": "bitmask",
                "local_c": "counter"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initializeMemory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_region_000020f4",
            "code": "\nvoid initializeMemoryRegion_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_region_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_peripheral_00002108",
            "code": "\nvoid initializePeripheral_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_peripheral_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 pid;\n  int stackSize;\n  int priorityStr;\n  dword baseAddr;\n  uint index;\n  undefined4 *functionPtr;\n  undefined4 currentPtr;\n  undefined4 stackPtr;\n  int usedStack;\n  short i;\n  int totalStackUsage;\n  int totalStackSize;\n  \n  pid = 0x515f;\n  totalStackSize = 0;\n  totalStackUsage = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  usedStack = FUN_000008b8();\n  stackPtr = FUN_0000091c();\n  currentPtr = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               usedStack,stackPtr,currentPtr);\n  totalStackSize = totalStackSize + 0x200;\n  if (0 < usedStack) {\n    totalStackUsage = usedStack + totalStackUsage;\n  }\n  for (i = 1; i < 0x21; i = i + 1) {\n    functionPtr = *(undefined4 **)(&DAT_1fff0358 + i * 4);\n    if (functionPtr != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(functionPtr + 1);\n      baseAddr = (rOffset)[index];\n      priorityStr = (int)&pid + (uint)(8 < index);\n      stackSize = stackUsage;\n      totalStackSize = stackSize + totalStackSize;\n      iVar1 = FUN_000010a0(stackPtrValue);\n      stackSize = stackSize - iVar1;\n      totalStackUsage = stackSize + totalStackUsage;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)functionPtr + 6),stateName,baseAddr,priorityStr,\n                   *(undefined *)((int)functionPtr + 5),stackUsage,stackSize,stackPtrValue,*functionPtr);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalStackSize,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "pid",
                "local_3c": "stackSize",
                "local_38": "priorityStr",
                "local_34": "baseAddr",
                "local_30": "index",
                "local_2c": "functionPtr",
                "local_28": "currentPtr",
                "local_24": "stackPtr",
                "local_20": "usedStack",
                "local_1a": "i",
                "local_18": "totalStackUsage",
                "local_14": "totalStackSize",
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "rOffset",
                "local_2c[10]": "stateName",
                "local_2c[0xb]": "stackUsage",
                "local_2c[9]": "stackPtrValue"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined uVar1;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  uVar1 = (undefined)value;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_difference_equals_00002294",
            "code": "\nundefined checkDifferenceEquals_00002294(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isDifferenceEqual;\n  \n  value1 = *(int *)(input + 4);\n  isDifferenceEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == value1;\n  if (isDifferenceEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isDifferenceEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_difference_equals_00002294",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "isDifferenceEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_element_000022be",
            "code": "\nvoid updateArrayElement_000022be(int *array,undefined value)\n\n{\n  uint oldValue;\n  \n  oldValue = counter;\n  counter = oldValue + 1;\n  *(undefined *)((oldValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_element_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "oldValue",
                "param_1[3]": "counter"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_offset_000022f0",
            "code": "\nundefined incrementAndOffset_000022f0(int *arr)\n\n{\n  uint currentValue;\n  \n  currentValue = arr[2];\n  arr[2] = currentValue + 1;\n  return *(undefined *)((currentValue & arr[1] - 1U) + *arr);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_offset_000022f0",
                "param_1": "arr",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_bytes_0000231c",
            "code": "\nint copy_bytes_0000231c(undefined4 arg1,undefined *dest_ptr,int num_bytes)\n\n{\n  undefined byte;\n  int result;\n  undefined *dest_ptr_temp;\n  int bytes_left;\n  \n  dest_ptr_temp = dest_ptr;\n  bytes_left = num_bytes;\n  while ((bytes_left != 0 && (result = FUN_00002270(arg1), result == 0))) {\n    byte = FUN_000022f0(arg1);\n    *dest_ptr_temp = byte;\n    bytes_left = bytes_left + -1;\n    dest_ptr_temp = dest_ptr_temp + 1;\n  }\n  return num_bytes - bytes_left;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_bytes_0000231c",
                "param_1": "arg1",
                "param_2": "dest_ptr",
                "param_3": "num_bytes",
                "uVar1": "byte",
                "iVar2": "result",
                "local_20": "dest_ptr_temp",
                "local_14": "bytes_left"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 check_status_00002364(undefined4 input,undefined data)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = FUN_00002294(input);\n  if (status == 0) {\n    FUN_000022be(input,data);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_and_interrupt_000023a4",
            "code": "\nundefined4 initialize_and_interrupt_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  returnValue = FUN_00002e6c(0,buffer,0x80);\n  trigger_interrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_and_interrupt_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "trigger_interrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "invoke_system_interrupt_000023c8",
            "code": "\nvoid invokeSystemInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "invoke_system_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "check_and_execute_function_000023d0",
            "code": "\nundefined4 checkAndExecuteFunction_000023d0(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = FUN_000023c8(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "check_and_execute_function_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_pointer_0000240c",
            "code": "\nundefined4 * copyPointer_0000240c(undefined4 *ptr)\n\n{\n  undefined4 *sourcePtr;\n  \n  sourcePtr = (undefined4 *)*ptr;\n  if (sourcePtr != (undefined4 *)0x0) {\n    *ptr = *sourcePtr;\n  }\n  return sourcePtr;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_pointer_0000240c",
                "param_1": "ptr",
                "puVar1": "sourcePtr"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_status_00002434",
            "code": "\nundefined4 updateStatus_00002434(int *statusPtr,int flag)\n\n{\n  int tempVar;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  tempVar = DAT_1fff03dc;\n  if (*statusPtr == 0) {\n    *statusPtr = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*statusPtr == -1) {\n      *statusPtr = tempVar + 8;\n      *(undefined4 *)*statusPtr = 0;\n    }\n    else {\n      FUN_00001034(statusPtr,tempVar);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_status_00002434",
                "param_1": "statusPtr",
                "param_2": "flag",
                "iVar1": "tempVar",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined temp1;\n  undefined4 temp2;\n  int temp3;\n  \n  temp2 = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(temp2);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(temp2);\n  }\n  else {\n    temp3 = FUN_0000240c(param);\n    FUN_00000698(temp3 + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    temp1 = *(undefined *)(temp3 + -3);\n    FUN_00000d0c(temp2);\n    FUN_00000738(temp1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_byte_value_00002538",
            "code": "\nvoid setByteValue_00002538(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_byte_value_00002538",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_00002600",
            "code": "\nundefined4 initialize_00002600(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(input);\n  FUN_0000285c(result);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_00002600",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_function_00002624",
            "code": "\nundefined4 initializeFunction_00002624(undefined4 inputParameter)\n\n{\n  undefined4 result;\n  undefined4 stackVariable;\n  \n  result = FUN_0000281c();\n  stackVariable = 0;\n  FUN_0000443c(&result,inputParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_function_00002624",
                "param_1": "inputParameter",
                "local_10": "result",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 inputData,undefined4 dataPointer,undefined4 configParam)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputData);\n  DAT_1fff0d9c = dataPointer;\n  FUN_00002894(result,0x26f1,configParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "inputData",
                "param_2": "dataPointer",
                "param_3": "configParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_function_00002690",
            "code": "\nundefined4 initializeFunction_00002690(undefined4 inputParam)\n\n{\n  undefined4 result;\n  undefined4 counter;\n  \n  result = FUN_000028f0();\n  counter = 0;\n  FUN_0000443c(&result,inputParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_function_00002690",
                "param_1": "inputParam",
                "local_10": "result",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_function_000026c0",
            "code": "\nvoid initializeFunction_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_function_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_system_000026d8",
            "code": "\nvoid initialize_system_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initializeSystem_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParam)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "FUNC_00002744",
            "code": "\nvoid FUNC_00002744(byte param_1,uint param_2)\n\n{\n  if ((char)param_1 < '\\0') {\n    (&DAT_e000ed14)[param_1 & 0xf] = (char)((param_2 & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)param_1 + -0x1fff1c00) = (char)((param_2 & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "FUNC_00002744"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_invoke_function_00002798",
            "code": "\nvoid checkAndInvokeFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_invoke_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "enable_memory_protection_000027b0",
            "code": "\n\n\nvoid enableMemoryProtection_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "enable_memory_protection_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_global_data_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getGlobalData_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_global_data_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_permission_flag_0000285c",
            "code": "\n\n\nvoid setPermissionFlag_0000285c(undefined4 flagValue)\n\n{\n  _DAT_4003d000 = flagValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_permission_flag_0000285c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "update_data_and_call_functions_00002894",
            "code": "\n\n\nvoid updateDataAndCallFunctions_00002894(int inputValue,undefined4 paramA,undefined4 paramB)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = paramA;\n  DAT_1fff0da4 = paramB;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "update_data_and_call_functions_00002894",
                "param_1": "inputValue",
                "param_2": "paramA",
                "param_3": "paramB"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_memory_value_000028f0",
            "code": "\n\n\nint incrementMemoryValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_memory_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "initialize_data_00002910",
            "code": "\n\n\nvoid initializeData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "initialize_data_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_flag_00002970",
            "code": "\n\n\nvoid clearFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_functions_with_conditions_00002994",
            "code": "\n\n\nvoid executeFunctionsWithConditions_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_functions_with_conditions_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_system_00002a00",
            "code": "\nvoid initializeSystem_00002a00(undefined4 systemConfig)\n\n{\n  FUN_00004cb4(systemConfig);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_system_00002a00",
                "param_1": "systemConfig"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_matching_value_00002a18",
            "code": "\nint findMatchingValue_00002a18(int *inputArray,undefined4 targetValue)\n\n{\n  int matchResult;\n  int *currentElement;\n  undefined **rebootMessage;\n  uint index;\n  int *elementPtr;\n  \n  currentElement = inputArray;\n  rebootMessage = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    elementPtr = (&currentElement)[index];\n    if (elementPtr != (int *)0x0) {\n      for (; *elementPtr != 0; elementPtr = elementPtr + 3) {\n        matchResult = FUN_00004e52(*elementPtr,targetValue);\n        if (matchResult == 0) {\n          return elementPtr[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "inputArray",
                "param_2": "targetValue",
                "iVar1": "matchResult",
                "local_18": "currentElement",
                "local_14": "rebootMessage",
                "local_10": "index",
                "local_c": "elementPtr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint commandIndex;\n  int *currentDescription;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandNames = &PTR_s_reboot_00007300;\n  for (commandIndex = 0; commandIndex < 2; commandIndex = commandIndex + 1) {\n    currentDescription = (&currentCommand)[commandIndex];\n    if (currentDescription != (int *)0x0) {\n      for (; *currentDescription != 0; currentDescription = currentDescription + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentDescription,currentDescription[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "commandIndex",
                "local_c": "currentDescription"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_and_execute_command_00002b10",
            "code": "\nvoid parseAndExecuteCommand_00002b10(undefined4 param_flag,byte *command)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *command_ptr_array [3];\n  code *command_function;\n  char **command_arguments_array;\n  uint command_arguments_length;\n  byte quote_character;\n  char *escape_sequence;\n  char *command_argument;\n  char **command_argument_ptr;\n  uint index;\n  int escape_sequence_count;\n  uint command_count;\n  byte *current_char;\n  \n  command_count = 0;\n  escape_sequence_count = 0;\n  current_char = command;\n  while( true ) {\n    command_ptr_array[0] = command;\n    command_ptr_array[1] = (byte *)param_flag;\n    if (0x20 < *current_char) {\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        quote_character = *current_char;\n        do {\n          pbVar2 = current_char + 1;\n          if (*pbVar2 == 0) {\n            current_char = pbVar2;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            escape_sequence_count = escape_sequence_count + 1;\n            current_char = current_char + 2;\n            pbVar2 = current_char;\n            if (*current_char == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = pbVar2;\n        } while (quote_character != *current_char);\n        if (0x20 < current_char[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char == 0x5c) {\n            escape_sequence_count = escape_sequence_count + 1;\n            current_char = current_char + 1;\n            if (*current_char == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char + 1;\n          if (*current_char == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char);\n      }\n      command_count = command_count + 1;\n    }\n    if (*current_char == 0) break;\n    *current_char = 0;\n    current_char = current_char + 1;\n  }\n  if (command_count != 0) {\n    command_arguments_length = command_count;\n    command_arguments_array = (char **)((int)command_ptr_array - ((command_count + 1) * 4 + 7 & 0xfffffff8));\n    command_arguments_array[command_count] = (char *)0x0;\n    current_char = command;\n    for (index = 0; command_argument_ptr = command_arguments_array, index < command_count; index = index + 1) {\n      for (; *current_char == 0; current_char = current_char + 1) {\n      }\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        current_char = current_char + 1;\n      }\n      command_arguments_array[index] = (char *)current_char;\n      for (; *current_char != 0; current_char = current_char + 1) {\n      }\n    }\n    for (; (escape_sequence_count != 0 && (*command_argument_ptr != (char *)0x0)); command_argument_ptr = command_argument_ptr + 1) {\n      for (command_argument = *command_argument_ptr; *command_argument != '\\0'; command_argument = command_argument + 1) {\n        if (*command_argument == '\\') {\n          for (escape_sequence = command_argument; *escape_sequence != '\\0'; escape_sequence = escape_sequence + 1) {\n            *escape_sequence = escape_sequence[1];\n          }\n          escape_sequence_count = escape_sequence_count + -1;\n          if (escape_sequence_count == 0) break;\n        }\n      }\n    }\n    command_function = (code *)FUN_00002a18(param_flag,*command_arguments_array);\n    if (command_function == (code *)0x0) {\n      iVar1 = FUN_00004e52(&DAT_00007214,*command_arguments_array);\n      if (iVar1 == 0) {\n        FUN_00002a88(command_ptr_array[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*command_arguments_array);\n      }\n    }\n    else {\n      (*command_function)(command_count,command_arguments_array);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_and_execute_command_00002b10",
                "param_1": "param_flag",
                "param_2": "command",
                "local_48": "command_ptr_array",
                "local_3c": "command_function",
                "local_38": "command_arguments_array",
                "local_34": "command_arguments_length",
                "local_2d": "quote_character",
                "local_2c": "escape_sequence",
                "local_28": "command_argument",
                "local_24": "command_argument_ptr",
                "local_20": "index",
                "local_1c": "escape_sequence_count",
                "local_18": "command_count",
                "local_14": "current_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int bufferSize)\n\n{\n  int inputChar;\n  byte outputByte;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    inputChar = FUN_00004418();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstChar = currentChar == inputBuffer;\n      if (isFirstChar) {\n        inputBuffer = (undefined *)0x1;\n      }\n      outputByte = (byte)inputBuffer;\n      if (!isFirstChar) {\n        outputByte = 0;\n      }\n      return (uint)outputByte;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      FUN_00002a00(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "bufferSize",
                "iVar1": "inputChar",
                "bVar2": "outputByte",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_system_00002e48",
            "code": "\nvoid initializeSystem_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_system_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "run_process_00002e6c",
            "code": "\nvoid runProcess_00002e6c(undefined4 userData,undefined4 data1,undefined4 data2)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(data1,data2);\n    if (result == 0) {\n      FUN_00002b10(userData,data1);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "run_process_00002e6c",
                "param_1": "userData",
                "param_2": "data1",
                "param_3": "data2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_initialization_00002e9c",
            "code": "\nundefined4 execute_initialization_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_initialization_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "run_initialization_00002eb4",
            "code": "\nundefined4 runInitialization_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "run_initialization_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceType;\n  undefined4 deviceName;\n  undefined readBuffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(deviceInfo,readBuffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceInfo + 8);\n    deviceType = FUN_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,deviceType);\n    FUN_00003694(readBuffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceType",
                "uVar2": "deviceName",
                "auStack_1c": "readBuffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_data_00002f30",
            "code": "\nvoid process_data_00002f30(void)\n\n{\n  int counter;\n  undefined4 *current_ptr;\n  \n  counter = 0;\n  for (current_ptr = DAT_1fff0db0; current_ptr != (undefined4 *)0x0; current_ptr = (undefined4 *)*current_ptr) {\n    FUN_00002ecc(counter,current_ptr);\n    FUN_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_data_00002f30",
                "local_10": "counter",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "display_device_information_00002f74",
            "code": "\nvoid displayDeviceInformation_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceIndex;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceIndex = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceIndex,deviceClass,deviceList[2]);\n    deviceIndex = deviceIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "display_device_information_00002f74",
                "local_18": "deviceIndex",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "handle_device_selection_00002fe0",
            "code": "\nvoid handleDeviceSelection_00002fe0(int numParams,undefined4 *params)\n\n{\n  int errorCode;\n  undefined4 deviceID;\n  \n  if (numParams < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*params,params[1]);\n  }\n  else {\n    errorCode = FUN_00004e52(params[2],&DAT_000073d4);\n    if (errorCode == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(params[2]);\n      errorCode = FUN_00003d24(deviceID);\n      if (errorCode == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,errorCode);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "handle_device_selection_00002fe0",
                "param_1": "numParams",
                "param_2": "params",
                "iVar1": "errorCode",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int numArgs,undefined4 *args)\n\n{\n  undefined2 deviceValue;\n  undefined2 deviceValuesBuffer [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int counter;\n  \n  if (numArgs < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*args,args[1]);\n  }\n  else {\n    deviceID = FUN_00004042(args[2]);\n    deviceIndex = FUN_00003d24(deviceID);\n    if (deviceIndex == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(deviceValuesBuffer,0,8);\n      if (5 < numArgs) {\n        numArgs = 6;\n      }\n      numValues = numArgs - 3;\n      for (counter = 0; counter < (int)numValues; counter = counter + 1) {\n        deviceValue = FUN_00004042(args[counter + 3]);\n        deviceValuesBuffer[counter] = deviceValue;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      FUN_00003694(deviceValuesBuffer,numValues & 0xff);\n      numValues = FUN_00003d94(deviceIndex,deviceValuesBuffer);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "numArgs",
                "param_2": "args",
                "uVar1": "deviceValue",
                "auStack_20": "deviceValuesBuffer",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "counter"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "execute_command_0000316c",
            "code": "\nundefined4 executeCommand_0000316c(int commandType,undefined4 *arguments)\n\n{\n  int result;\n  \n  if (commandType < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(arguments[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(commandType,arguments);\n    }\n    else {\n      result = FUN_00004e52(arguments[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(commandType,arguments);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "execute_command_0000316c",
                "param_1": "commandType",
                "param_2": "arguments",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "announce_alarm_000031e0",
            "code": "\nvoid announceAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "announce_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayOffsets"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_data_0000328c",
            "code": "\nundefined4 extract_data_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*input_array,&index,10);\n  output_array[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[3] = (int)value;\n  value = FUN_00004f84(input_array[1],&index,10);\n  output_array[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *output_array = (int)value;\n  result = FUN_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_data_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_rtc_alarm_status_000033c0",
            "code": "\nbool checkRtcAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined buffer [36];\n  \n  result = FUN_00002690(buffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_rtc_alarm_status_000033c0",
                "iVar1": "result",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 errorCode;\n  undefined stackBuffer [36];\n  \n  result = FUN_0000328c(input,stackBuffer);\n  if (result == 0) {\n    result = FUN_00002654(stackBuffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      errorCode = 1;\n    }\n    else {\n      errorCode = 0;\n    }\n  }\n  else {\n    errorCode = 1;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "errorCode",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_and_update_00003444",
            "code": "\nbool getTimeAndUpdate_00003444(void)\n\n{\n  int result;\n  undefined timeBuffer [36];\n  \n  result = FUN_00002624(timeBuffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(timeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_and_update_00003444",
                "iVar1": "result",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_real_time_clock_00003478",
            "code": "\nundefined4 setRealTimeClock_00003478(undefined4 time)\n\n{\n  int result;\n  undefined4 success;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(time,buffer);\n  if (result == 0) {\n    result = FUN_00002600(buffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_real_time_clock_00003478",
                "param_1": "time",
                "iVar1": "result",
                "uVar2": "success",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandType,int commandArgs)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (commandType < 2) {\n    FUN_000034c0();\n    returnValue = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"setalarm\",8);\n            if ((result == 0) && (commandType == 4)) {\n              FUN_000033f4(commandArgs + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(commandArgs + 4),\"settime\",7);\n                if ((result != 0) || (commandType != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandArgs + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandArgs + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandType",
                "param_2": "commandArgs",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_system_00003688",
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObject,byte objectSize)\n\n{\n  undefined4 status;\n  char bitValue;\n  uint bitMask;\n  bool isSet;\n  undefined tempBuffer [8];\n  int bufferSize;\n  char value;\n  byte i;\n  \n  if ((dataObject == 0) || (3 < objectSize)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (i = 0; i < objectSize; i = i + 1) {\n      if (*(byte *)(dataObject + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObject + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        bitValue = (char)bitMask;\n        if (!isSet) {\n          bitValue = '\\0';\n        }\n        if (bitValue == '\\0') goto LAB_000036ee;\n        value = '\\0';\n      }\n      else {\nLAB_000036ee:\n        value = FUN_00003918((int)*(char *)(dataObject + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (objectSize < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",i);\n      }\n      if (value == '\\0') {\n        if (*(char *)(dataObject + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObject + (uint)i * 2));\n        }\n        else if ((*(char *)(dataObject + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObject + 7),4)) &&\n                (*(char *)(dataObject + 7) < '\\0')) {\n          bufferSize = FUN_00003e9e(tempBuffer,(int)*(short *)(dataObject + (uint)i * 2),\n                                  (int)*(char *)(dataObject + 7));\n          tempBuffer[bufferSize] = 0;\n          FUN_00004c84(&DAT_000077dc,tempBuffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObject + (uint)i * 2),\n                       (int)*(char *)(dataObject + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObject + (uint)i * 2),value);\n      }\n      status = FUN_00003810(*(undefined *)(dataObject + 6));\n      FUN_00004c84(&DAT_000077e8,status);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObject",
                "param_2": "objectSize",
                "uVar1": "status",
                "cVar2": "bitValue",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "tempBuffer",
                "local_10": "bufferSize",
                "local_a": "value",
                "local_9": "i"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_location_00003810",
            "code": "\nundefined * getMemoryLocation_00003810(undefined input)\n\n{\n  undefined *memoryLocation;\n  \n  switch(input) {\n  case 2:\n    memoryLocation = &DAT_000077ec;\n    break;\n  case 3:\n    memoryLocation = &DAT_000077f0;\n    break;\n  case 4:\n    memoryLocation = &DAT_000077f4;\n    break;\n  case 5:\n    memoryLocation = &DAT_000077f8;\n    break;\n  case 6:\n    memoryLocation = &DAT_000077fc;\n    break;\n  case 7:\n    memoryLocation = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryLocation = &DAT_00007804;\n    break;\n  case 9:\n    memoryLocation = &DAT_00007808;\n    break;\n  case 10:\n    memoryLocation = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryLocation = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryLocation = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryLocation = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryLocation = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryLocation = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryLocation = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryLocation = &DAT_0000782c;\n    break;\n  default:\n    memoryLocation = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryLocation = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryLocation = &DAT_00007828;\n  }\n  return memoryLocation;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_location_00003810",
                "param_1": "input",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_to_value_00003918",
            "code": "\nundefined4 map_parameter_to_value_00003918(undefined input_value)\n\n{\n  undefined4 mapped_value;\n  \n  switch(input_value) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_to_value_00003918",
                "param_1": "input_value",
                "uVar1": "mapped_value"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_label_000039e8",
            "code": "\nchar * getClassLabel_000039e8(char classCode)\n\n{\n  char *classLabel;\n  \n  switch(classCode) {\n  case '\\0':\n    classLabel = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    classLabel = \"ACT_ANY\";\n    break;\n  case 'B':\n    classLabel = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    classLabel = \"ACT_SERVO\";\n    break;\n  case 'D':\n    classLabel = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    classLabel = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    classLabel = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    classLabel = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    classLabel = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    classLabel = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    classLabel = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    classLabel = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    classLabel = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    classLabel = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    classLabel = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    classLabel = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    classLabel = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    classLabel = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    classLabel = \"SENSE_UV\";\n    break;\n  case -0x74:\n    classLabel = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    classLabel = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    classLabel = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    classLabel = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    classLabel = \"CLASS_UNKNOWN\";\n  }\n  return classLabel;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_label_000039e8",
                "param_1": "classCode",
                "pcVar1": "classLabel"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_index_00003d24",
            "code": "\nundefined4 * findIndex_00003d24(int targetIndex)\n\n{\n  int currentIndex;\n  undefined4 *currentPtr;\n  \n  currentIndex = 0;\n  for (currentPtr = DAT_1fff0db0; (currentIndex < targetIndex && (currentPtr != (undefined4 *)0x0));\n      currentPtr = (undefined4 *)*currentPtr) {\n    currentIndex = currentIndex + 1;\n  }\n  return currentPtr;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_index_00003d24",
                "param_1": "targetIndex",
                "local_10": "currentIndex",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),inputParameter);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_code_or_return_error_00003d94",
            "code": "\nundefined4 executeCodeOrReturnError_00003d94(int input,undefined4 additionalParam)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),additionalParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_code_or_return_error_00003d94",
                "param_1": "input",
                "param_2": "additionalParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint inputValue)\n\n{\n  uint remainder;\n  char *output;\n  uint multiplier;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputValue < 1000000000) {\n    for (multiplier = 10; multiplier <= inputValue; multiplier = multiplier * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    output = (char *)(digitCount + inputOffset);\n    remainder = inputValue;\n    do {\n      output = output + -1;\n      *output = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "inputValue",
                "local_20": "remainder",
                "local_14": "output",
                "local_10": "multiplier",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_absolute_value_00003e58",
            "code": "\nint calculate_absolute_value_00003e58(undefined *input_array,int input_length)\n\n{\n  int result;\n  int absolute_value;\n  undefined *modified_array;\n  \n  absolute_value = input_length;\n  modified_array = input_array;\n  if (-(input_length >> 0x1f) != 0) {\n    if (input_array != (undefined *)0x0) {\n      modified_array = input_array + 1;\n      *input_array = 0x2d;\n    }\n    absolute_value = -input_length;\n  }\n  result = FUN_00003dc4(modified_array,absolute_value);\n  return -(input_length >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_absolute_value_00003e58",
                "param_1": "input_array",
                "param_2": "input_length",
                "iVar1": "result",
                "local_18": "absolute_value",
                "local_14": "modified_array"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 input,short value,undefined4 output)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)value,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "value",
                "param_3": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "extract_digits_and_convert_00003ec4",
            "code": "\nint extract_digits_and_convert_00003ec4(undefined *output_buffer,uint input_value,int num_digits)\n\n{\n  int num_chars;\n  undefined4 decimal_length;\n  uint divisor;\n  int remainder;\n  int num_written_chars;\n  \n  if (num_digits + 7 < 0 != SCARRY4(num_digits,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  num_written_chars = 0;\n  if (num_digits == 0) {\n    num_written_chars = FUN_00003e58(output_buffer,input_value);\n  }\n  else if (num_digits < 1) {\n    divisor = input_value / *(uint *)(&DAT_00007978 + num_digits * -4);\n    remainder = input_value - *(uint *)(&DAT_00007978 + num_digits * -4) * divisor;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((divisor == 0) && ((int)input_value < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      num_written_chars = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      num_chars = FUN_00003e58(0,divisor);\n      num_written_chars = num_chars + 1 + num_written_chars;\n    }\n    else {\n      num_chars = FUN_00003e58(output_buffer + num_written_chars,divisor);\n      num_chars = num_written_chars + num_chars;\n      num_written_chars = num_chars + 1;\n      output_buffer[num_chars] = 0x2e;\n      decimal_length = FUN_00003e58(output_buffer + num_written_chars,remainder);\n      FUN_00003ff4(output_buffer + num_written_chars,decimal_length,-num_digits,0x30);\n    }\n    num_written_chars = -num_digits + num_written_chars;\n  }\n  else {\n    num_written_chars = FUN_00003e58(output_buffer,input_value);\n    if (output_buffer != (undefined *)0x0) {\n      FUN_00004622(output_buffer + num_written_chars,0x30,num_digits);\n    }\n    num_written_chars = num_digits + num_written_chars;\n  }\n  return num_written_chars;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "extract_digits_and_convert_00003ec4",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "num_digits",
                "iVar1": "num_chars",
                "uVar2": "decimal_length",
                "uVar3": "divisor",
                "local_10": "remainder",
                "local_c": "num_written_chars"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "update_value_if_less_00003ff4",
            "code": "\nuint updateValueIfLess_00003ff4(int valueToUpdate,uint currentValue,uint newValue,undefined undefinedParam)\n\n{\n  uint updatedValue;\n  \n  updatedValue = currentValue;\n  if ((currentValue < newValue) && (updatedValue = newValue, valueToUpdate != 0)) {\n    FUN_000045ee((newValue - currentValue) + valueToUpdate,valueToUpdate,currentValue);\n    FUN_00004622(valueToUpdate,undefinedParam,newValue - currentValue);\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "update_value_if_less_00003ff4",
                "param_1": "valueToUpdate",
                "param_2": "currentValue",
                "param_3": "newValue",
                "param_4": "undefinedParam",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "set_range_to_ten_00004042",
            "code": "\nvoid setRangeToTen_00004042(undefined4 input)\n\n{\n  FUN_00004f84(input,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "set_range_to_ten_00004042",
                "param_1": "input"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data_buffer,int *config_params)\n\n{\n  int temp_var1;\n  int *temp_var2;\n  uint ushort_value;\n  ushort flag_value;\n  int loop_var;\n  code *function_ptr;\n  int loop_counter;\n  uint temp_var3;\n  bool is_zero;\n  \n  flag_value = *(ushort *)(config_params + 3);\n  ushort_value = (uint)flag_value;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    temp_var1 = config_params[4];\n    if (temp_var1 != 0) {\n      loop_var = ushort_value << 0x1e;\n      is_zero = loop_var == 0;\n      loop_counter = *config_params;\n      if (is_zero) {\n        loop_var = config_params[5];\n      }\n      *config_params = temp_var1;\n      if (!is_zero) {\n        loop_var = 0;\n      }\n      config_params[2] = loop_var;\n      for (loop_counter = loop_counter - temp_var1; 0 < loop_counter; loop_counter = loop_counter - loop_var) {\n        loop_var = (*(code *)config_params[10])(data_buffer,config_params[8],temp_var1,loop_counter);\n        if (loop_var < 1) {\n          *(ushort *)(config_params + 3) = *(ushort *)(config_params + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var1 = temp_var1 + loop_var;\n      }\n    }\n  }\n  else {\n    if ((config_params[1] < 1) && (config_params[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)config_params[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp_var3 = *data_buffer;\n    *data_buffer = 0;\n    if ((flag_value & 0x1000) == 0) {\n      temp_var1 = (*function_ptr)(data_buffer,config_params[8],ushort_value & 0x1000,1);\n      if ((temp_var1 == -1) && (ushort_value = *data_buffer, ushort_value != 0)) {\n        if ((ushort_value == 0x1d) || (ushort_value == 0x16)) {\n          *data_buffer = temp_var3;\n          return 0;\n        }\n        flag_value = *(ushort *)(config_params + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var1 = config_params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(config_params + 3) << 0x1d) < 0) &&\n       (temp_var1 = temp_var1 - config_params[1], config_params[0xd] != 0)) {\n      temp_var1 = temp_var1 - config_params[0x10];\n    }\n    temp_var1 = (*(code *)config_params[0xb])(data_buffer,config_params[8],temp_var1,0);\n    flag_value = *(ushort *)(config_params + 3);\n    if ((temp_var1 == -1) &&\n       ((0x1d < *data_buffer || (-1 < (int)((0x20400001U >> (*data_buffer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(config_params + 3) = flag_value | 0x40;\n      return 0xffffffff;\n    }\n    config_params[1] = 0;\n    *config_params = config_params[4];\n    if (((int)((uint)flag_value << 0x13) < 0) && ((temp_var1 != -1 || (*data_buffer == 0)))) {\n      config_params[0x15] = temp_var1;\n    }\n    temp_var2 = (int *)config_params[0xd];\n    *data_buffer = temp_var3;\n    if (temp_var2 != (int *)0x0) {\n      if (temp_var2 != config_params + 0x11) {\n        FUN_00004b34(data_buffer);\n      }\n      config_params[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data_buffer",
                "param_2": "config_params",
                "iVar1": "temp_var1",
                "piVar2": "temp_var2",
                "uVar3": "ushort_value",
                "uVar4": "flag_value",
                "iVar5": "loop_var",
                "pcVar6": "function_ptr",
                "iVar7": "loop_counter",
                "uVar8": "temp_var3",
                "bVar9": "is_zero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPointer,undefined4 *dataArray)\n\n{\n  undefined4 result;\n  \n  if (dataArray[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (dataArray == &DAT_000079b8) {\n      dataArray = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (dataArray == (undefined4 *)&DAT_000079d8) {\n      dataArray = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (dataArray == (undefined4 *)&DAT_00007998) {\n      dataArray = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(dataArray + 3) != 0) {\n      if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataArray + 3) << 0x16)) {\n        FUNC_000045e8(dataArray[0x16]);\n      }\n      result = FUN_0000404c(dataPointer,dataArray);\n      if ((int)(dataArray[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(dataArray + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(dataArray[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_entries_000041d0",
            "code": "\nuint processRelocationEntries_000041d0(int entryIndex,undefined4 baseOffset,undefined4 length)\n\n{\n  uint resultFlag;\n  int numEntries;\n  dword *currentEntry;\n  int currentAddress;\n  uint finalResult;\n  int remainingEntries;\n  undefined4 *baseAddress;\n  \n  if (entryIndex == 0) {\n    baseAddress = &DAT_000079f8;\n    currentEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    finalResult = 0;\n    do {\n      remainingEntries = currentEntry[1];\n      currentAddress = currentEntry[2];\n      while (remainingEntries = remainingEntries + -1, -1 < remainingEntries) {\n        if ((1 < *(ushort *)(currentAddress + 0xc)) && (numEntries = *(short *)(currentAddress + 0xe) + 1, numEntries != 0)) {\n          resultFlag = FUN_00004158(0x1fff0284,currentAddress,length,numEntries,baseAddress);\n          finalResult = finalResult | resultFlag;\n        }\n        currentAddress = currentAddress + 0x68;\n      }\n      currentEntry = (dword *)*currentEntry;\n    } while (currentEntry != (dword *)0x0);\n    return finalResult;\n  }\n  finalResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,entryIndex);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_entries_000041d0",
                "param_1": "entryIndex",
                "param_2": "baseOffset",
                "param_3": "length",
                "uVar1": "resultFlag",
                "iVar2": "numEntries",
                "pdVar3": "currentEntry",
                "iVar4": "currentAddress",
                "uVar5": "finalResult",
                "iVar6": "remainingEntries",
                "puVar7": "baseAddress"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_params_000041f4",
            "code": "\nvoid initializeParams_000041f4(undefined4 *parameters,undefined2 value1,undefined2 value2)\n\n{\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[2] = 0;\n  *(undefined2 *)(parameters + 3) = value1;\n  parameters[0x19] = 0;\n  *(undefined2 *)((int)parameters + 0xe) = value2;\n  parameters[6] = 0;\n  FUN_00004622(parameters + 0x17,0,8);\n  parameters[9] = 0x4dc9;\n  parameters[10] = 0x4def;\n  parameters[0xb] = 0x4e27;\n  parameters[8] = parameters;\n  parameters[0xc] = label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_params_000041f4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "&LAB_00004e4a_1": "label1"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 input,int size)\n\n{\n  undefined4 *dataStructure;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  dataStructure = (undefined4 *)FUN_00004bd0(input,offset + 0x74);\n  if (dataStructure != (undefined4 *)0x0) {\n    *dataStructure = 0;\n    dataStructure[1] = size;\n    dataStructure[2] = dataStructure + 3;\n    FUN_00004622(dataStructure + 3,0,offset + 0x68);\n  }\n  return dataStructure;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "input",
                "param_2": "size",
                "puVar1": "dataStructure",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_component_000042a4",
            "code": "\nvoid initializeComponent_000042a4(int component)\n\n{\n  undefined4 result;\n  \n  FUN_0000428c();\n  if (*(int *)(component + 0x18) == 0) {\n    *(undefined4 *)(component + 0x48) = 0;\n    *(undefined4 *)(component + 0x4c) = 0;\n    *(undefined4 *)(component + 0x50) = 0;\n    result = 0x1fff0284;\n    *(undefined **)(component + 0x28) = &DAT_0000423d;\n    if (component == 0x1fff0284) {\n      result = 1;\n    }\n    if (component == 0x1fff0284) {\n      *(undefined4 *)(component + 0x18) = result;\n    }\n    result = FUN_00004314(component);\n    *(undefined4 *)(component + 4) = result;\n    result = FUN_00004314(component);\n    *(undefined4 *)(component + 8) = result;\n    result = FUN_00004314(component);\n    *(undefined4 *)(component + 0xc) = result;\n    FUN_000041f4(*(undefined4 *)(component + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(component + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(component + 0xc),0x12,2);\n    *(undefined4 *)(component + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_component_000042a4",
                "param_1": "component",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_relocations_00004314",
            "code": "\nundefined4 * processRelocations_00004314(undefined4 *param_array)\n\n{\n  dword result;\n  int num_entries;\n  undefined4 *current_entry;\n  dword *next_entry_ptr;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  next_entry_ptr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    num_entries = next_entry_ptr[1];\n    current_entry = (undefined4 *)next_entry_ptr[2];\n    while (num_entries = num_entries + -1, -1 < num_entries) {\n      if (*(short *)(current_entry + 3) == 0) {\n        current_entry[3] = 0xffff0001;\n        current_entry[0x19] = 0;\n        FUNC_000045e4(current_entry + 0x16);\n        FUN_00004280();\n        current_entry[1] = 0;\n        current_entry[2] = 0;\n        current_entry[4] = 0;\n        current_entry[5] = 0;\n        *current_entry = 0;\n        current_entry[6] = 0;\n        FUN_00004622(current_entry + 0x17,0,8);\n        current_entry[0xd] = 0;\n        current_entry[0xe] = 0;\n        current_entry[0x12] = 0;\n        current_entry[0x13] = 0;\n        return current_entry;\n      }\n      current_entry = current_entry + 0x1a;\n    }\n    if (*next_entry_ptr == 0) {\n      result = FUN_00004248(param_array,4);\n      *next_entry_ptr = result;\n      if (result == 0) {\n        FUN_00004280();\n        *param_array = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    next_entry_ptr = (dword *)*next_entry_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_relocations_00004314",
                "param_1": "param_array",
                "dVar1": "result",
                "iVar2": "num_entries",
                "puVar3": "current_entry",
                "pdVar4": "next_entry_ptr"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "calculate_checksum_000043a0",
            "code": "\nuint calculateChecksum_000043a0(int baseAddress,code *callbackFunction)\n\n{\n  uint partialChecksum;\n  int *currentPointer;\n  int subArrayOffset;\n  uint finalChecksum;\n  int subArraySize;\n  \n  currentPointer = (int *)(baseAddress + 0x48);\n  finalChecksum = 0;\n  do {\n    subArraySize = currentPointer[1];\n    subArrayOffset = currentPointer[2];\n    while (subArraySize = subArraySize + -1, -1 < subArraySize) {\n      if ((1 < *(ushort *)(subArrayOffset + 0xc)) && (*(short *)(subArrayOffset + 0xe) != -1)) {\n        partialChecksum = (*callbackFunction)(subArrayOffset);\n        finalChecksum = finalChecksum | partialChecksum;\n      }\n      subArrayOffset = subArrayOffset + 0x68;\n    }\n    currentPointer = (int *)*currentPointer;\n  } while (currentPointer != (int *)0x0);\n  return finalChecksum;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "calculate_checksum_000043a0",
                "param_1": "baseAddress",
                "param_2": "callbackFunction",
                "piVar2": "currentPointer",
                "iVar3": "subArrayOffset",
                "uVar1": "partialChecksum",
                "uVar4": "finalChecksum",
                "iVar5": "subArraySize"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_data_00004418",
            "code": "\nuint processData_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **dataPtr;\n  byte *bytePtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPtr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(offset + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(offset + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  bytePtr = dataPtr[1];\n  dataPtr[1] = bytePtr + -1;\n  if ((int)(bytePtr + -1) < 0) {\n    result = FUN_00005e10(offset,dataPtr);\n  }\n  else {\n    bytePtr = *dataPtr;\n    *dataPtr = bytePtr + 1;\n    result = (uint)*bytePtr;\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "dataPtr",
                "pbVar4": "bytePtr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTimeValues,uint *dateTimeComponents)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined4 value1;\n  undefined4 value2;\n  uint tempVar6;\n  bool isNegative;\n  \n  value1 = *dateTimeValues;\n  value2 = dateTimeValues[1];\n  tempVar1 = FUN_00006974(value1,value2,0x15180,0);\n  tempVar3 = 0x15180;\n  FUN_00006974(value1,value2,0x15180,0);\n  isNegative = (int)tempVar3 < 0;\n  if (isNegative) {\n    tempVar3 = tempVar3 + 0x15180;\n  }\n  if (isNegative) {\n    tempVar2 = tempVar1 + 0xafa6b;\n  }\n  else {\n    tempVar2 = tempVar1 + 0xafa6c;\n  }\n  dateTimeComponents[2] = tempVar3 / 0xe10;\n  dateTimeComponents[1] = (tempVar3 % 0xe10) / 0x3c;\n  *dateTimeComponents = (tempVar3 % 0xe10) % 0x3c;\n  dateTimeComponents[6] = (tempVar2 + 3) % 7;\n  tempVar3 = tempVar2;\n  if ((int)tempVar2 < 0) {\n    tempVar3 = tempVar2 - 0x23ab0;\n  }\n  tempVar2 = (tempVar3 / 0x23ab1) * -0x23ab1 + tempVar2;\n  tempVar4 = ((tempVar2 / 0x8eac + tempVar2) - tempVar2 / 0x5b4) - tempVar2 / 0x23ab0;\n  tempVar5 = tempVar4 / 0x16d;\n  tempVar2 = (tempVar5 / 100 - tempVar4 / 0x5b4) + tempVar2 + tempVar5 * -0x16d;\n  tempVar6 = tempVar2 * 5 + 2;\n  tempVar4 = tempVar6 / 0x99;\n  if (tempVar6 < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  tempVar6 = tempVar4 + tempVar1;\n  tempVar1 = (tempVar3 / 0x23ab1) * 400 + tempVar5;\n  if (tempVar6 < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (tempVar2 < 0x132) {\n    if (((tempVar5 & 3) == 0) && (tempVar5 != (tempVar5 / 100) * 100)) {\n      tempVar3 = 1;\n    }\n    else {\n      tempVar3 = (uint)(tempVar5 % 400 == 0);\n    }\n    tempVar3 = tempVar2 + 0x3b + tempVar3;\n  }\n  else {\n    tempVar3 = tempVar2 - 0x132;\n  }\n  dateTimeComponents[7] = tempVar3;\n  dateTimeComponents[3] = (tempVar2 + 1) - (tempVar4 * 0x99 + 2) / 5;\n  dateTimeComponents[4] = tempVar6;\n  dateTimeComponents[5] = tempVar1 - 0x76c;\n  dateTimeComponents[8] = 0;\n  return dateTimeComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTimeValues",
                "param_2": "dateTimeComponents",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "value1",
                "uVar7": "value2",
                "uVar8": "tempVar6",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_0000459c",
            "code": "\nvoid executeFunctions_0000459c(void)\n\n{\n  code **functionPointers;\n  int index;\n  \n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  FUN_00000410();\n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_0000459c",
                "ppcVar1": "functionPointers",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_within_000045ee",
            "code": "\nvoid copyWithin_000045ee(undefined *target,undefined *source,int length)\n\n{\n  undefined *targetEnd;\n  undefined *sourceEnd;\n  \n  sourceEnd = source + length;\n  if ((source < target) && (target < sourceEnd)) {\n    targetEnd = target + length;\n    while (targetEnd != target) {\n      sourceEnd = sourceEnd + -1;\n      targetEnd = targetEnd + -1;\n      *targetEnd = *sourceEnd;\n    }\n  }\n  else {\n    target = target + -1;\n    for (; source != sourceEnd; source = source + 1) {\n      target = target + 1;\n      *target = *source;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_within_000045ee",
                "param_1": "target",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "targetEnd",
                "puVar2": "sourceEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *destination,undefined value,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = destination + length;\n  for (; destination != endPtr; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *date,uint dayNumber,undefined4 leapYearFlag)\n\n{\n  int daysInMonth;\n  uint dayOfYear;\n  uint temp;\n  int daysToSubtract;\n  bool isNegative;\n  uint *tempBuffer;\n  uint currentDay;\n  undefined4 leapYearStack;\n  \n  tempBuffer = date;\n  currentDay = dayNumber;\n  leapYearStack = leapYearFlag;\n  if (0x3b < *date) {\n    FUN_00005584(&tempBuffer,*date,0x3c);\n    dayOfYear = date[1] + (int)tempBuffer;\n    date[1] = dayOfYear;\n    if ((int)currentDay < 0) {\n      dayOfYear = dayOfYear - 1;\n      *date = currentDay + 0x3c;\n    }\n    else {\n      *date = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      date[1] = dayOfYear;\n    }\n  }\n  if (0x3b < date[1]) {\n    FUN_00005584(&tempBuffer,date[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    temp = date[2] + (int)tempBuffer;\n    date[2] = temp;\n    dayOfYear = currentDay;\n    if (isNegative) {\n      dayOfYear = currentDay + 0x3c;\n      temp = temp - 1;\n    }\n    if (!isNegative) {\n      date[1] = dayOfYear;\n    }\n    if (isNegative) {\n      date[1] = dayOfYear;\n    }\n    if (isNegative) {\n      date[2] = temp;\n    }\n  }\n  if (0x17 < date[2]) {\n    FUN_00005584(&tempBuffer,date[2],0x18);\n    isNegative = (int)currentDay < 0;\n    temp = date[3] + (int)tempBuffer;\n    date[3] = temp;\n    dayOfYear = currentDay;\n    if (isNegative) {\n      dayOfYear = currentDay + 0x18;\n      temp = temp - 1;\n    }\n    if (!isNegative) {\n      date[2] = dayOfYear;\n    }\n    if (isNegative) {\n      date[2] = dayOfYear;\n    }\n    if (isNegative) {\n      date[3] = temp;\n    }\n  }\n  if (0xb < date[4]) {\n    FUN_00005584(&tempBuffer,date[4],0xc);\n    isNegative = (int)currentDay < 0;\n    dayOfYear = date[5] + (int)tempBuffer;\n    date[5] = dayOfYear;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      dayOfYear = dayOfYear - 1;\n    }\n    if (!isNegative) {\n      date[4] = currentDay;\n    }\n    if (isNegative) {\n      date[4] = currentDay;\n    }\n    if (isNegative) {\n      date[5] = dayOfYear;\n    }\n  }\n  dayOfYear = date[5];\n  if ((dayOfYear & 3) == 0) {\n    if (dayOfYear == (dayOfYear / 100) * 100) {\n      if ((dayOfYear + 0x76c) % 400 == 0) {\n        daysToSubtract = 0x1d;\n      }\n      else {\n        daysToSubtract = 0x1c;\n      }\n    }\n    else {\n      daysToSubtract = 0x1d;\n    }\n  }\n  else {\n    daysToSubtract = 0x1c;\n  }\n  if ((int)date[3] < 1) {\n    while ((int)date[3] < 1) {\n      dayOfYear = date[4];\n      date[4] = dayOfYear - 1;\n      if (dayOfYear - 1 == 0xffffffff) {\n        temp = date[5];\n        dayOfYear = temp - 1;\n        date[4] = 0xb;\n        date[5] = dayOfYear;\n        if ((dayOfYear & 3) == 0) {\n          if (dayOfYear == (dayOfYear / 100) * 100) {\n            if ((temp + 0x76b) % 400 == 0) {\n              daysToSubtract = 0x1d;\n            }\n            else {\n              daysToSubtract = 0x1c;\n            }\n          }\n          else {\n            daysToSubtract = 0x1d;\n          }\n        }\n        else {\n          daysToSubtract = 0x1c;\n        }\n      }\n      daysInMonth = daysToSubtract;\n      if (date[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[date[4]];\n      }\n      date[3] = daysInMonth + date[3];\n    }\n  }\n  else {\n    while( true ) {\n      dayOfYear = date[4];\n      daysInMonth = daysToSubtract;\n      if (dayOfYear != 1) {\n        daysInMonth = (&DAT_000079fc)[dayOfYear];\n      }\n      if ((int)date[3] <= daysInMonth) break;\n      date[3] = date[3] - daysInMonth;\n      date[4] = dayOfYear + 1;\n      if (dayOfYear + 1 == 0xc) {\n        temp = date[5];\n        dayOfYear = temp + 1;\n        date[4] = 0;\n        date[5] = dayOfYear;\n        if ((dayOfYear & 3) == 0) {\n          if (dayOfYear % 100 == 0) {\n            if ((temp + 0x76d) % 400 == 0) {\n              daysToSubtract = 0x1d;\n            }\n            else {\n              daysToSubtract = 0x1c;\n            }\n          }\n          else {\n            daysToSubtract = 0x1d;\n          }\n        }\n        else {\n          daysToSubtract = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "date",
                "param_2": "dayNumber",
                "param_3": "leapYearFlag",
                "iVar1": "daysInMonth",
                "uVar2": "dayOfYear",
                "uVar3": "temp",
                "iVar4": "daysToSubtract",
                "bVar5": "isNegative",
                "local_20": "tempBuffer",
                "local_1c": "currentDay",
                "uStack_18": "leapYearStack"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_end_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateEndDate_000047e4(int *inputParams)\n\n{\n  longlong totalDays;\n  longlong newTotalDays;\n  int *ptrValue;\n  uint dayCount;\n  int tempVar1;\n  int tempVar2;\n  int years;\n  uint leapYears;\n  uint loopVar1;\n  uint loopVar2;\n  int tempVar3;\n  uint totalDaysModVal;\n  uint isNegative;\n  uint rangeVal;\n  uint days;\n  bool isLeapYear;\n  \n  ptrValue = (int *)FUN_000056b0();\n  FUN_00004634(inputParams);\n  totalDaysModVal = inputParams[5];\n  tempVar3 = inputParams[3] + -1 + *(int *)(&DAT_00007a2c + inputParams[4] * 4);\n  if (((1 < inputParams[4]) && ((totalDaysModVal & 3) == 0)) &&\n     ((totalDaysModVal != (totalDaysModVal / 100) * 100 || (totalDaysModVal + 0x76c == ((totalDaysModVal + 0x76c) / 400) * 400)))) {\n    tempVar3 = tempVar3 + 1;\n  }\n  inputParams[7] = tempVar3;\n  if (20000 < (int)&DAT_00002710 + totalDaysModVal) {\n    years = -1;\n    tempVar1 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)totalDaysModVal < 0x47) {\n    if (totalDaysModVal != 0x46) {\n      for (loopVar1 = 0x45; (int)totalDaysModVal < (int)loopVar1; loopVar1 = loopVar1 - 1) {\n        if ((loopVar1 & 3) == 0) {\n          if (loopVar1 == (loopVar1 / 100) * 100) {\n            if ((loopVar1 + 0x76c) % 400 == 0) {\n              years = 0x16e;\n            }\n            else {\n              years = 0x16d;\n            }\n          }\n          else {\n            years = 0x16e;\n          }\n        }\n        else {\n          years = 0x16d;\n        }\n        tempVar3 = tempVar3 - years;\n      }\n      if ((loopVar1 & 3) == 0) {\n        if (totalDaysModVal == (totalDaysModVal / 100) * 100) {\n          years = 0x16d;\n          if ((totalDaysModVal + 0x76c) % 400 == 0) {\n            years = 0x16e;\n          }\n        }\n        else {\n          years = 0x16e;\n        }\n      }\n      else {\n        years = 0x16d;\n      }\n      tempVar3 = tempVar3 - years;\n    }\n  }\n  else {\n    loopVar1 = 0x46;\n    do {\n      if ((loopVar1 & 3) == 0) {\n        if (loopVar1 % 100 == 0) {\n          if ((loopVar1 + 0x76c) % 400 == 0) {\n            years = 0x16e;\n          }\n          else {\n            years = 0x16d;\n          }\n        }\n        else {\n          years = 0x16e;\n        }\n      }\n      else {\n        years = 0x16d;\n      }\n      loopVar1 = loopVar1 + 1;\n      tempVar3 = tempVar3 + years;\n    } while (totalDaysModVal != loopVar1);\n  }\n  totalDays = (longlong)tempVar3 * 0x15180 + (longlong)(inputParams[2] * 0xe10 + inputParams[1] * 0x3c + *inputParams)\n  ;\n  days = (uint)totalDays;\n  years = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  loopVar1 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    totalDaysModVal = ptrValue[10];\n    years = (uint)totalDays + totalDaysModVal;\n    tempVar1 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)totalDaysModVal >> 0x1f) + (uint)CARRY4((uint)totalDays,totalDaysModVal);\n  }\n  else {\n    rangeVal = inputParams[8];\n    isNegative = rangeVal;\n    if (0 < (int)rangeVal) {\n      isNegative = 1;\n    }\n    if ((ptrValue[1] == inputParams[5] + 0x76c) || (tempVar1 = FUN_00004f98(), tempVar1 != 0)) {\n      loopVar2 = ptrValue[0x14];\n      dayCount = ptrValue[0x12];\n      leapYears = ptrValue[10];\n      loopVar1 = dayCount - leapYears;\n      tempVar1 = (ptrValue[0x13] - ((int)leapYears >> 0x1f)) - (uint)(dayCount < leapYears);\n      if (((int)((years - tempVar1) - (uint)(days < loopVar1)) < 0 ==\n           (SBORROW4(years,tempVar1) != SBORROW4(years - tempVar1,(uint)(days < loopVar1)))) &&\n         (tempVar2 = (ptrValue[0x13] - ((int)loopVar2 >> 0x1f)) - (uint)(dayCount < loopVar2),\n         isLeapYear = days < dayCount - loopVar2,\n         (int)((years - tempVar2) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(years,tempVar2) != SBORROW4(years - tempVar2,(uint)isLeapYear)))) goto LAB_00004a88;\n      dayCount = ptrValue[8] - loopVar2;\n      tempVar2 = (ptrValue[9] - ((int)loopVar2 >> 0x1f)) - (uint)((uint)ptrValue[8] < loopVar2);\n      if (*ptrValue != 0) {\n        if ((int)((years - tempVar2) - (uint)(days < dayCount)) < 0 ==\n            (SBORROW4(years,tempVar2) != SBORROW4(years - tempVar2,(uint)(days < dayCount))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        loopVar1 = 0;\n        if ((int)rangeVal < 0) goto LAB_00004934;\nLAB_00004a14:\n        days = isNegative ^ loopVar1;\n        isNegative = loopVar1;\n        if (days == 1) {\n          if (loopVar1 == 0) {\n            years = loopVar2 - leapYears;\n          }\n          else {\n            years = leapYears - loopVar2;\n          }\n          tempVar1 = inputParams[3];\n          *inputParams = *inputParams + years;\n          newTotalDays = totalDays + years;\n          FUN_00004634(inputParams);\n          tempVar1 = inputParams[3] - tempVar1;\n          totalDays = totalDays + years;\n          if (tempVar1 != 0) {\n            if (tempVar1 < 2) {\n              if (tempVar1 == -2 || tempVar1 + 2 < 0 != SCARRY4(tempVar1,2)) {\n                tempVar1 = 1;\n              }\n            }\n            else {\n              tempVar1 = -1;\n            }\n            years = tempVar1 + inputParams[7];\n            tempVar3 = tempVar3 + tempVar1;\n            if (years < 0) {\n              loopVar1 = totalDaysModVal - 1;\n              if ((loopVar1 & 3) == 0) {\n                if (loopVar1 == (loopVar1 / 100) * 100) {\n                  years = 0x16d;\n                  if ((totalDaysModVal + 0x76b) % 400 != 0) {\n                    years = 0x16c;\n                  }\n                }\n                else {\n                  years = 0x16d;\n                }\n              }\n              else {\n                years = 0x16c;\n              }\n            }\n            else {\n              if ((totalDaysModVal & 3) == 0) {\n                if (totalDaysModVal == (totalDaysModVal / 100) * 100) {\n                  tempVar1 = 0x16d;\n                  if ((totalDaysModVal + 0x76c) % 400 == 0) {\n                    tempVar1 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar1 = 0x16e;\n                }\n              }\n              else {\n                tempVar1 = 0x16d;\n              }\n              if (tempVar1 <= years) {\n                years = years - tempVar1;\n              }\n            }\n            inputParams[7] = years;\n            totalDays = newTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((years - tempVar2) - (uint)(days < dayCount)) < 0 !=\n          (SBORROW4(years,tempVar2) != SBORROW4(years - tempVar2,(uint)(days < dayCount)))) {\nLAB_0000491e:\n        if ((int)((years - tempVar1) - (uint)(days < loopVar1)) < 0 ==\n            (SBORROW4(years,tempVar1) != SBORROW4(years - tempVar1,(uint)(days < loopVar1))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)rangeVal) {\n        loopVar1 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      loopVar1 = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    totalDaysModVal = ptrValue[0x14];\n    years = (uint)totalDays + totalDaysModVal;\n    tempVar1 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)totalDaysModVal >> 0x1f) + (uint)CARRY4((uint)totalDays,totalDaysModVal);\n    loopVar1 = 1;\n  }\n  FUN_000050f4();\n  inputParams[8] = loopVar1;\n  inputParams[6] = (tempVar3 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar1,years);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_end_date_000047e4",
                "param_1": "inputParams",
                "lVar1": "totalDays",
                "lVar2": "newTotalDays",
                "piVar3": "ptrValue",
                "uVar4": "dayCount",
                "iVar5": "tempVar1",
                "iVar6": "tempVar2",
                "iVar7": "years",
                "uVar8": "leapYears",
                "uVar9": "loopVar1",
                "uVar10": "loopVar2",
                "iVar11": "tempVar3",
                "uVar12": "totalDaysModVal",
                "uVar13": "isNegative",
                "uVar14": "rangeVal",
                "uVar15": "days",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "add_linked_list_node_00004b34",
            "code": "\nvoid addLinkedListNode_00004b34(undefined4 *list,int value,undefined4 param1,undefined4 param2)\n\n{\n  int *tempPtr;\n  int **nextPtr;\n  int **currentNode;\n  int **previousNode;\n  int **tempNode1;\n  int **tempNode2;\n  bool trueCondition;\n  \n  if (value == 0) {\n    return;\n  }\n  tempNode2 = (int **)(value + -4);\n  if (*(int *)(value + -4) < 0) {\n    tempNode2 = (int **)((int)tempNode2 + *(int *)(value + -4));\n  }\n  FUN_00005790();\n  previousNode = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    tempNode2[1] = (int *)0x0;\n    currentNode = nextPtr;\n    DAT_1fff0db4 = tempNode2;\n  }\n  else {\n    tempNode1 = DAT_1fff0db4;\n    if (tempNode2 < DAT_1fff0db4) {\n      currentNode = (int **)*tempNode2;\n      previousNode = (int **)((int)tempNode2 + (int)currentNode);\n      trueCondition = DAT_1fff0db4 == previousNode;\n      if (trueCondition) {\n        previousNode = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      tempNode2[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = tempNode2;\n      if (trueCondition) {\n        previousNode = (int **)((int)previousNode + (int)currentNode);\n        *tempNode2 = (int *)previousNode;\n      }\n    }\n    else {\n      do {\n        previousNode = tempNode1;\n        tempNode1 = (int **)previousNode[1];\n        if (tempNode1 == (int **)0x0) break;\n      } while (tempNode1 <= tempNode2);\n      currentNode = (int **)*previousNode;\n      if ((int **)((int)previousNode + (int)currentNode) == tempNode2) {\n        currentNode = (int **)((int)currentNode + (int)*tempNode2);\n        *previousNode = (int *)currentNode;\n        if (tempNode1 == (int **)((int)previousNode + (int)currentNode)) {\n          tempPtr = *tempNode1;\n          previousNode[1] = tempNode1[1];\n          currentNode = (int **)((int)currentNode + (int)tempPtr);\n          *previousNode = (int *)currentNode;\n        }\n      }\n      else if (tempNode2 < (int **)((int)previousNode + (int)currentNode)) {\n        *list = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)tempNode2 + (int)*tempNode2);\n        trueCondition = tempNode1 == currentNode;\n        if (trueCondition) {\n          currentNode = (int **)*tempNode1;\n          tempNode1 = (int **)tempNode1[1];\n        }\n        tempNode2[1] = (int *)tempNode1;\n        if (trueCondition) {\n          currentNode = (int **)((int)currentNode + (int)*tempNode2);\n          *tempNode2 = (int *)currentNode;\n        }\n        previousNode[1] = (int *)tempNode2;\n      }\n    }\n  }\n  FUN_0000579c(list,currentNode,previousNode,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "add_linked_list_node_00004b34",
                "param_1": "list",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "piVar1": "tempPtr",
                "extraout_r1": "nextPtr",
                "ppiVar2": "currentNode",
                "ppiVar3": "previousNode",
                "ppiVar4": "tempNode1",
                "ppiVar5": "tempNode2",
                "bVar6": "trueCondition"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_block_00004bd0",
            "code": "\nuint allocate_memory_block_00004bd0(undefined4 *result_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *previous_block;\n  int offset;\n  uint difference;\n  uint *current_block;\n  uint new_block_size;\n  \n  new_block_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < size)) {\n    *result_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    previous_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      difference = *current_block - new_block_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_block = difference;\n          current_block = (uint *)((int)current_block + difference);\n          goto LAB_00004c34;\n        }\n        if (previous_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(result_ptr,0,previous_block,0,param_4);\n    }\n    previous_block = (uint *)FUN_00000428(result_ptr,new_block_size);\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == current_block ||\n        (offset = FUN_00000428(result_ptr,(int)current_block - (int)previous_block), offset != -1)))) {\nLAB_00004c34:\n      *current_block = new_block_size;\nLAB_00004c42:\n      FUN_0000579c(result_ptr);\n      new_block_size = (int)current_block + 0xbU & 0xfffffff8;\n      offset = new_block_size - (int)(current_block + 1);\n      if (offset == 0) {\n        return new_block_size;\n      }\n      *(uint *)((int)current_block + offset) = (int)(current_block + 1) - new_block_size;\n      return new_block_size;\n    }\n    *result_ptr = 0xc;\n    FUN_0000579c(result_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "param_1": "result_ptr",
                "param_2": "size",
                "puVar1": "previous_block",
                "iVar2": "offset",
                "uVar3": "difference",
                "puVar4": "current_block",
                "uVar5": "new_block_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "execute_function_00004c84",
            "code": "\nvoid executeFunction_00004c84(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  dword relOffset;\n  undefined4 tempVar;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 stackVar3;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tempVar = input1;\n  stackVar1 = input2;\n  stackVar2 = input3;\n  stackVar3 = input4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relOffset,*(undefined4 *)(relOffset + 8),input1,&stackVar1,tempVar,&stackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "execute_function_00004c84",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "dVar1": "relOffset",
                "uVar2": "tempVar",
                "uStack_c": "stackVar1",
                "uStack_8": "stackVar2",
                "uStack_4": "stackVar3"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_parameter_00004cb4",
            "code": "\nuint processParameter_00004cb4(uint inputValue)\n\n{\n  dword relocationOffset;\n  undefined4 *dataPointer;\n  uint updatedValue;\n  undefined *pointerToChar;\n  undefined4 unusedValue1;\n  undefined4 unusedValue2;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPointer = *(undefined4 **)(relocationOffset + 8);\n  if ((relocationOffset != 0) && (*(int *)(relocationOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPointer == &DAT_000079b8) {\n    dataPointer = *(undefined4 **)(relocationOffset + 4);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_000079d8) {\n    dataPointer = *(undefined4 **)(relocationOffset + 8);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_00007998) {\n    dataPointer = *(undefined4 **)(relocationOffset + 0xc);\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  updatedValue = dataPointer[2] - 1;\n  dataPointer[2] = updatedValue;\n  if (((int)updatedValue < 0) && (((int)updatedValue < (int)dataPointer[6] || (updatedValue = inputValue & 0xff, updatedValue == 10))))\n  {\n    inputValue = FUN_00005404(relocationOffset,inputValue,dataPointer,updatedValue,unusedValue1,unusedValue2);\n  }\n  else {\n    pointerToChar = (undefined *)*dataPointer;\n    *dataPointer = pointerToChar + 1;\n    *pointerToChar = (char)inputValue;\n    inputValue = inputValue & 0xff;\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_parameter_00004cb4",
                "param_1": "inputValue",
                "dVar1": "relocationOffset",
                "puVar2": "dataPointer",
                "uVar3": "updatedValue",
                "puVar4": "pointerToChar",
                "unaff_r4": "unusedValue1",
                "unaff_r5": "unusedValue2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int inputData)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *stringPointer;\n  char **stringArrayPointer;\n  undefined4 returnValue;\n  char *currentPosition;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  stringArrayPointer = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (stringArrayPointer == (char **)&DAT_000079b8) {\n    stringArrayPointer = *(char ***)(offset + 4);\n  }\n  else if (stringArrayPointer == (char **)&DAT_000079d8) {\n    stringArrayPointer = *(char ***)(offset + 8);\n  }\n  else if (stringArrayPointer == (char **)&DAT_00007998) {\n    stringArrayPointer = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)stringArrayPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringArrayPointer + 3) << 0x16))) {\n    FUNC_000045e8(stringArrayPointer[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(stringArrayPointer + 3) << 0x1c) < 0) && (stringArrayPointer[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,stringArrayPointer), result == 0)) {\n    currentPosition = (char *)(inputData + -1);\n    do {\n      while( true ) {\n        currentPosition = currentPosition + 1;\n        currentChar = *currentPosition;\n        stringPointer = stringArrayPointer[2] + -1;\n        stringArrayPointer[2] = stringPointer;\n        if (currentChar == '\\0') {\n          if (-1 < (int)stringPointer) {\n            currentPosition = *stringArrayPointer;\n            returnValue = 10;\n            *stringArrayPointer = currentPosition + 1;\n            *currentPosition = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,stringArrayPointer);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringPointer < 0) && (((int)stringPointer < (int)stringArrayPointer[6] || (currentChar == '\\n')))) break;\n        stringPointer = *stringArrayPointer;\n        *stringArrayPointer = stringPointer + 1;\n        *stringPointer = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,stringArrayPointer);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)stringArrayPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringArrayPointer + 3) << 0x16))) {\n    FUNC_000045ec(stringArrayPointer[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "inputData",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringPointer",
                "ppcVar5": "stringArrayPointer",
                "uVar6": "returnValue",
                "pcVar7": "currentPosition"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_values_00004dc8",
            "code": "\nvoid updateValues_00004dc8(undefined4 arg1,int arg2)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = FUN_00000490(arg1,(int)*(short *)(arg2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(arg2 + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(arg2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(arg2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_values_00004dc8",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "decompiled_function_00004dee",
            "code": "\nundefined4 decompiledFunction_00004dee(undefined4 arg1,int arg2,undefined4 anotherArg1,undefined4 anotherArg2)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(unsignedShort *)(arg2 + 0xc) << 0x17) < 0) {\n    FUN_000004f2(arg1,(int)*(short *)(arg2 + 0xe),0,2);\n  }\n  *(unsignedShort *)(arg2 + 0xc) = *(unsignedShort *)(arg2 + 0xc) & 0xefff;\n  result = FUN_00000e38(anotherArg1,anotherArg2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "decompiled_function_00004dee",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "anotherArg1",
                "param_4": "anotherArg2",
                "uVar1": "result",
                "ushort": "unsignedShort"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_status_00004e26",
            "code": "\nvoid updateStatus_00004e26(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isNotFound;\n  \n  result = FUN_000004f2(arg1,(int)*(short *)(arg2 + 0xe));\n  isNotFound = result == -1;\n  if (isNotFound) {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(arg2 + 0x54) = result;\n    updatedValue = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (isNotFound) {\n    *(ushort *)(arg2 + 0xc) = updatedValue;\n  }\n  if (!isNotFound) {\n    *(ushort *)(arg2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isNotFound"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *data1,byte *data2)\n\n{\n  byte currentByte;\n  uint byteValue;\n  bool isEqual;\n  \n  do {\n    byteValue = (uint)*data1;\n    currentByte = *data2;\n    isEqual = byteValue == 1;\n    if (byteValue != 0) {\n      isEqual = byteValue == currentByte;\n    }\n    data1 = data1 + 1;\n    data2 = data2 + 1;\n  } while (isEqual);\n  return byteValue - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "data1",
                "param_2": "data2",
                "bVar1": "currentByte",
                "uVar2": "byteValue",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "find_difference_00004e66",
            "code": "\nint find_difference_00004e66(byte *byte_array,int array_start_index,int array_length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (array_length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(array_start_index + -1);\n    current_byte = byte_array;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == byte_array + array_length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "find_difference_00004e66",
                "param_1": "byte_array",
                "param_2": "array_start_index",
                "param_3": "array_length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **remainder,uint base)\n\n{\n  uint result;\n  uint currentDigit;\n  uint isNegative;\n  uint normalizedDigit;\n  int compareResult;\n  uint maxValue;\n  uint maxDivisor;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    currentDigit = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[currentDigit] & 8;\n  } while (((&DAT_00007a99)[currentDigit] & 8) != 0);\n  if (currentDigit == 0x2d) {\n    currentDigit = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (currentDigit == 0x2b) {\n    currentDigit = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (currentDigit != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentDigit != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    currentDigit = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    currentDigit = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  compareResult = 0;\n  maxDivisor = maxValue / base;\n  result = 0;\n  do {\n    normalizedDigit = currentDigit - 0x30;\n    if (9 < normalizedDigit) {\n      if (currentDigit - 0x41 < 0x1a) {\n        normalizedDigit = currentDigit - 0x37;\n      }\n      else {\n        if (0x19 < currentDigit - 0x61) break;\n        normalizedDigit = currentDigit - 0x57;\n      }\n    }\n    if ((int)base <= (int)normalizedDigit) break;\n    if (compareResult != -1) {\n      if ((maxDivisor < result) || ((maxDivisor == result && ((int)(maxValue - base * maxDivisor) < (int)normalizedDigit)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + normalizedDigit;\n        compareResult = 1;\n      }\n    }\n    currentDigit = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (remainder == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (remainder == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *remainder = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "remainder",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentDigit",
                "uVar3": "isNegative",
                "uVar4": "normalizedDigit",
                "iVar5": "compareResult",
                "uVar6": "maxValue",
                "uVar7": "maxDivisor",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "compute_leap_year_00004f98",
            "code": "\nundefined4 computeLeapYear_00004f98(uint year)\n\n{\n  uint *result;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int daysSinceStartOfYear;\n  uint *startOfYearData;\n  int extraDays;\n  uint isLeapYearTest;\n  int monthOffset;\n  int daysOffset;\n  uint isCenturyLeapYear;\n  \n  result = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    extraDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result[1] = year;\n    isCenturyLeapYear = (uint)(year % 400 == 0);\n    startOfYearData = result;\n    do {\n      dayOfWeek = startOfYearData[5];\n      if (*(char *)(startOfYearData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysSinceStartOfYear = 0;\n          }\n          else {\n            daysSinceStartOfYear = 1;\n          }\n        }\n        else {\n          daysSinceStartOfYear = 0;\n        }\n        daysSinceStartOfYear = daysSinceStartOfYear + extraDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(startOfYearData + 2) == 'D') {\n        daysSinceStartOfYear = extraDays + dayOfWeek;\n      }\n      else {\n        isLeapYearTest = isCenturyLeapYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYearTest = 1;\n        }\n        monthOffset = 0;\n        daysSinceStartOfYear = extraDays;\n        while( true ) {\n          monthOffset = monthOffset + 1;\n          if (startOfYearData[3] <= monthOffset) break;\n          daysSinceStartOfYear = daysSinceStartOfYear + *(int *)(&monthDays + monthOffset * 4 + isLeapYearTest * 0x30);\n        }\n        daysOffset = dayOfWeek - (daysSinceStartOfYear + 4U) % 7;\n        if (daysOffset < 0) {\n          daysOffset = daysOffset + 7;\n        }\n        for (daysOffset = (month - 1) * 7 + daysOffset;\n            *(int *)(&monthDays + monthOffset * 4 + isLeapYearTest * 0x30) <= daysOffset; daysOffset = daysOffset + -7) {\n        }\n        daysSinceStartOfYear = daysSinceStartOfYear + daysOffset;\n      }\n      dayOfWeek = secondsOffset + daysSinceStartOfYear * 0x15180 + daysSince1900;\n      daysSince1970 = dayOfWeek;\n      isDst = (int)dayOfWeek >> 0x1f;\n      startOfYearData = startOfYearData + 10;\n    } while (result + 0x14 != startOfYearData);\n    dayOfWeek = result[9];\n    isCenturyLeapYear = result[19];\n    *result = (uint)((int)((dayOfWeek - isCenturyLeapYear) - (uint)(result[8] < result[18])) < 0 !=\n                    (SBORROW4(dayOfWeek,isCenturyLeapYear) !=\n                    SBORROW4(dayOfWeek - isCenturyLeapYear,(uint)(result[8] < result[18]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "compute_leap_year_00004f98",
                "param_1": "year",
                "puVar1": "result",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "daysSinceStartOfYear",
                "puVar5": "startOfYearData",
                "iVar6": "extraDays",
                "uVar7": "isLeapYearTest",
                "iVar8": "monthOffset",
                "iVar9": "daysOffset",
                "uVar10": "isCenturyLeapYear",
                "UNK_00007b98": "monthDays",
                "(int)puVar5[3]": "startOfYearData[3]",
                "puVar5[4]": "month",
                "puVar5[6]": "daysSince1900",
                "puVar5[8]": "daysSince1970",
                "puVar5[9]": "isDst",
                "puVar5[10]": "secondsOffset",
                "puVar1[1]": "result[1]",
                "puVar1[9]": "result[9]",
                "puVar1[0x13]": "result[19]",
                "puVar1[0x12]": "result[18]",
                "puVar1[8]": "result[8]"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_pointer_000050f4",
            "code": "\nundefined * get_data_pointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_binary_function_00005100",
            "code": "\nvoid processBinaryFunction_00005100(void)\n\n{\n  dword sectionOffset;\n  int variable1;\n  char *stringPointer;\n  int variable2;\n  int variable3;\n  undefined undefinedVar;\n  char *stringPointer2;\n  bool flag;\n  ushort *ushortPointer1;\n  int *intPointer1;\n  ushort *ushortPointer2;\n  int *intPointer2;\n  ushort ushortVar1;\n  ushort ushortVar2;\n  ushort ushortVar3;\n  ushort ushortVar4;\n  ushort ushortVar5;\n  ushort ushortVar6;\n  int localVariable1;\n  char *localCharArray [2];\n  \n  sectionOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  variable1 = FUN_000056b0();\n  stringPointer = (char *)FUN_000056a0(sectionOffset,&DAT_00007a5c);\n  if (stringPointer == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = stringPointer;\n    DAT_1fff0ddc = stringPointer;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (variable2 = FUN_00004e52(), variable2 != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    variable2 = FUN_00005ecc(stringPointer);\n    DAT_1fff0dd4 = FUN_00004bd0(sectionOffset,variable2 + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,stringPointer);\n    }\n    if (*stringPointer == ':') {\n      stringPointer = stringPointer + 1;\n    }\n    variable2 = FUN_00005e68(stringPointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&localVariable1);\n    if (0 < variable2) {\n      stringPointer2 = stringPointer + localVariable1;\n      if (stringPointer[localVariable1] == '-') {\n        stringPointer2 = stringPointer2 + 1;\n        variable2 = -1;\n      }\n      else {\n        if (stringPointer[localVariable1] == '+') {\n          stringPointer2 = stringPointer2 + 1;\n        }\n        variable2 = 1;\n      }\n      ushortVar2 = 0;\n      ushortVar3 = 0;\n      ushortPointer1 = &ushortVar2;\n      intPointer1 = &localVariable1;\n      ushortPointer2 = &ushortVar3;\n      intPointer2 = &localVariable1;\n      variable3 = FUN_00005e68(stringPointer2,\"%hu%n:%hu%n:%hu%n\",&ushortVar1,&localVariable1,&ushortVar2,&localVariable1,\n                           &ushortVar3,&localVariable1);\n      if (0 < variable3) {\n        *(uint *)(variable1 + 0x28) =\n             ((uint)ushortVar1 * 0xe10 + (uint)ushortVar2 * 0x3c + (uint)ushortVar3) * variable2;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        stringPointer2 = stringPointer2 + localVariable1;\n        variable2 = FUN_00005e68(stringPointer2,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&localVariable1,ushortPointer1,intPointer1,ushortPointer2,\n                             intPointer2);\n        if (variable2 < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(variable1 + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          stringPointer = stringPointer2 + localVariable1;\n          if (stringPointer2[localVariable1] == '-') {\n            stringPointer = stringPointer + 1;\n            variable2 = -1;\n          }\n          else {\n            if (stringPointer2[localVariable1] == '+') {\n              stringPointer = stringPointer + 1;\n            }\n            variable2 = 1;\n          }\n          ushortVar1 = 0;\n          ushortVar2 = 0;\n          ushortVar3 = 0;\n          localVariable1 = 0;\n          variable3 = FUN_00005e68(stringPointer,\"%hu%n:%hu%n:%hu%n\",&ushortVar1,&localVariable1,&ushortVar2,&localVariable1,\n                               &ushortVar3,&localVariable1);\n          if (variable3 < 1) {\n            variable2 = *(int *)(variable1 + 0x28) + -0xe10;\n          }\n          else {\n            variable2 = ((uint)ushortVar1 * 0xe10 + (uint)ushortVar2 * 0x3c + (uint)ushortVar3) * variable2;\n          }\n          *(int *)(variable1 + 0x50) = variable2;\n          stringPointer = stringPointer + localVariable1;\n          flag = false;\n          variable2 = variable1;\n          while( true ) {\n            if (*stringPointer == ',') {\n              stringPointer = stringPointer + 1;\n            }\n            if (*stringPointer == 'M') {\n              variable3 = FUN_00005e68(stringPointer,\"M%hu%n.%hu%n.%hu%n\",&ushortVar4,&localVariable1,&ushortVar5,\n                                   &localVariable1,&ushortVar6,&localVariable1);\n              if (variable3 != 3) {\n                return;\n              }\n              if (0xb < ushortVar4 - 1) {\n                return;\n              }\n              if (4 < ushortVar5 - 1) {\n                return;\n              }\n              if (6 < ushortVar6) {\n                return;\n              }\n              *(uint *)(variable2 + 0xc) = (uint)ushortVar4;\n              *(uint *)(variable2 + 0x10) = (uint)ushortVar5;\n              *(undefined *)(variable2 + 8) = 0x4d;\n              *(uint *)(variable2 + 0x14) = (uint)ushortVar6;\n              stringPointer2 = stringPointer + localVariable1;\n            }\n            else {\n              if (*stringPointer == 'J') {\n                stringPointer = stringPointer + 1;\n                undefinedVar = 0x4a;\n              }\n              else {\n                undefinedVar = 0x44;\n              }\n              ushortVar6 = FUN_00005fd8(stringPointer,localCharArray,10);\n              stringPointer2 = localCharArray[0];\n              if (localCharArray[0] == stringPointer) {\n                if (flag) {\n                  *(undefined *)(variable1 + 0x30) = 0x4d;\n                  *(undefined4 *)(variable1 + 0x34) = 0xb;\n                  *(undefined4 *)(variable1 + 0x38) = 1;\n                  *(undefined4 *)(variable1 + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(variable1 + 8) = 0x4d;\n                  *(undefined4 *)(variable1 + 0xc) = 3;\n                  *(undefined4 *)(variable1 + 0x10) = 2;\n                  *(undefined4 *)(variable1 + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(variable2 + 8) = undefinedVar;\n                *(uint *)(variable2 + 0x14) = (uint)ushortVar6;\n              }\n            }\n            ushortVar1 = 2;\n            ushortVar2 = 0;\n            ushortVar3 = 0;\n            localVariable1 = 0;\n            if (*stringPointer2 == '/') {\n              FUN_00005e68(stringPointer2,&DAT_00007a85,&ushortVar1,&localVariable1,&ushortVar2,&localVariable1,&ushortVar3,\n                           &localVariable1);\n            }\n            *(uint *)(variable2 + 0x18) =\n                 (uint)ushortVar1 * 0xe10 + (uint)ushortVar2 * 0x3c + (uint)ushortVar3;\n            variable2 = variable2 + 0x28;\n            stringPointer = stringPointer2 + localVariable1;\n            if (flag) break;\n            flag = true;\n          }\n          FUN_00004f98(*(undefined4 *)(variable1 + 4));\n          DAT_1fff0ddc = *(char **)(variable1 + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(variable1 + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_binary_function_00005100",
                "dVar1": "sectionOffset",
                "iVar2": "variable1",
                "pcVar3": "stringPointer",
                "iVar4": "variable2",
                "iVar5": "variable3",
                "uVar6": "undefinedVar",
                "pcVar7": "stringPointer2",
                "bVar8": "flag",
                "puVar9": "ushortPointer1",
                "piVar10": "intPointer1",
                "puVar11": "ushortPointer2",
                "piVar12": "intPointer2",
                "local_3c": "ushortVar1",
                "local_3a": "ushortVar2",
                "local_38": "ushortVar3",
                "local_36": "ushortVar4",
                "local_34": "ushortVar5",
                "local_32": "ushortVar6",
                "local_30": "localVariable1",
                "local_2c": "localCharArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "copy_and_update_data_00005404",
            "code": "\nuint copyAndUpdateData_00005404(int inputData,uint value,int *dataPtr,undefined4 config)\n\n{\n  int result;\n  uint shortValue;\n  undefined *bytePtr;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = *(int **)(inputData + 4);\n  }\n  else if (dataPtr == (int *)&DAT_000079d8) {\n    dataPtr = *(int **)(inputData + 8);\n  }\n  else if (dataPtr == (int *)&DAT_00007998) {\n    dataPtr = *(int **)(inputData + 0xc);\n  }\n  dataPtr[2] = dataPtr[6];\n  shortValue = (uint)*(ushort *)(dataPtr + 3);\n  result = shortValue << 0x1c;\n  if (((result < 0) && (shortValue = dataPtr[4], shortValue != 0)) ||\n     (result = FUN_000054a8(inputData,dataPtr,result,shortValue,config), result == 0)) {\n    result = *dataPtr - dataPtr[4];\n    value = value & 0xff;\n    if ((result < dataPtr[5]) || (result = FUN_00004158(inputData,dataPtr), result == 0)) {\n      dataPtr[2] = dataPtr[2] + -1;\n      bytePtr = (undefined *)*dataPtr;\n      *dataPtr = (int)(bytePtr + 1);\n      *bytePtr = (char)value;\n      if (dataPtr[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = FUN_00004158(inputData,dataPtr);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "copy_and_update_data_00005404",
                "param_1": "inputData",
                "param_2": "value",
                "param_3": "dataPtr",
                "param_4": "config",
                "iVar1": "result",
                "uVar2": "shortValue",
                "puVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "decode_and_check_flags_000054a8",
            "code": "\nuint decode_and_check_flags_000054a8(undefined4 *output_flag,undefined4 *input_data)\n\n{\n  ushort first_flag;\n  dword offset;\n  ushort flags;\n  uint temp;\n  uint temp2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_data == &DAT_000079b8) {\n    input_data = *(undefined4 **)(offset + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_000079d8) {\n    input_data = *(undefined4 **)(offset + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_00007998) {\n    input_data = *(undefined4 **)(offset + 0xc);\n  }\n  temp = (uint)*(ushort *)(input_data + 3);\n  flags = *(ushort *)(input_data + 3);\n  if (-1 < (int)(temp << 0x1c)) {\n    if (-1 < (int)(temp << 0x1b)) {\n      *output_flag = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp << 0x1d) < 0) {\n      if ((undefined4 *)input_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_data[0xd] != input_data + 0x11) {\n          FUN_00004b34(output_flag);\n        }\n        input_data[0xd] = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      input_data[1] = 0;\n      *input_data = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((input_data[4] == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output_flag,input_data);\n  }\n  first_flag = *(ushort *)(input_data + 3);\n  temp = (uint)first_flag;\n  flags = *(ushort *)(input_data + 3);\n  temp2 = temp & 1;\n  if ((first_flag & 1) == 0) {\n    if (-1 < (int)(temp << 0x1e)) {\n      temp2 = input_data[5];\n    }\n    input_data[2] = temp2;\n  }\n  else {\n    input_data[2] = 0;\n    input_data[6] = -input_data[5];\n  }\n  if (input_data[4] != 0) {\n    return 0;\n  }\n  if ((first_flag & 0x80) == 0) {\n    return temp & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_data + 3) = flags | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "decode_and_check_flags_000054a8",
                "param_1": "output_flag",
                "param_2": "input_data",
                "uVar1": "first_flag",
                "dVar2": "offset",
                "uVar3": "flags",
                "uVar4": "temp",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_assignment_offset_0000562c",
            "code": "\nint find_assignment_offset_0000562c(undefined4 param,char *string,int *result_offset)\n\n{\n  char current_char;\n  int *offsets_ptr;\n  int assignment_offset;\n  char *str_ptr;\n  int *current_offset_ptr;\n  int str_offset;\n  \n  FUN_00005fec();\n  str_ptr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *str_ptr;\n      if (current_char == '\\0') {\n        str_offset = (int)str_ptr - (int)string;\n        offsets_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_offset_ptr = offsets_ptr;\n          if (*current_offset_ptr == 0) break;\n          assignment_offset = FUN_00004e66(*current_offset_ptr,string,str_offset);\n          offsets_ptr = current_offset_ptr + 1;\n          if ((assignment_offset == 0) && (assignment_offset = *current_offset_ptr, *(char *)(assignment_offset + str_offset) == '=')) {\n            *result_offset = (int)((int)current_offset_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param);\n            return assignment_offset + str_offset + 1;\n          }\n        }\n        break;\n      }\n      str_ptr = str_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_assignment_offset_0000562c",
                "param_1": "param",
                "param_2": "string",
                "param_3": "result_offset",
                "cVar1": "current_char",
                "piVar2": "offsets_ptr",
                "iVar3": "assignment_offset",
                "pcVar4": "str_ptr",
                "piVar5": "current_offset_ptr",
                "iVar6": "str_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "extract_information_000056a0",
            "code": "\nvoid extractInformation_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 extractedValue1;\n  undefined4 extractedValue2;\n  \n  extractedValue1 = input2;\n  extractedValue2 = input3;\n  FUN_0000562c(input1,input2,&extractedValue1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "extract_information_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "extractedValue1",
                "uStack_8": "extractedValue2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "process_data_000056b8",
            "code": "\nundefined4 processData_000056b8(undefined4 inputParam,int data,undefined4 *outputParam,uint *result)\n\n{\n  int status;\n  undefined4 returnValue;\n  undefined buffer [4];\n  uint flag;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (status = FUN_00000514(inputParam,(int)*(short *)(data + 0xe),buffer), status < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      returnValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *result = (uint)((flag & 0xf000) == 0x2000);\n  }\n  returnValue = 0x400;\nLAB_000056f8:\n  *outputParam = returnValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "process_data_000056b8",
                "param_1": "inputParam",
                "param_2": "data",
                "param_3": "outputParam",
                "param_4": "result",
                "iVar1": "status",
                "uVar2": "returnValue",
                "auStack_68": "buffer",
                "local_64": "flag"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int input,int *output)\n\n{\n  ushort result;\n  int returnValue;\n  int localInput;\n  int *localOutput;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    localInput = input;\n    localOutput = output;\n    result = FUN_000056b8(input,output,&localInput,&localOutput);\n    returnValue = FUN_00004bd0(input,localInput);\n    if (returnValue != 0) {\n      *(undefined **)(input + 0x28) = &DAT_0000423d;\n      *output = returnValue;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = localInput;\n      output[4] = returnValue;\n      if ((localOutput != (int *)0x0) &&\n         (returnValue = FUN_00000534(input,(int)*(short *)((int)output + 0xe)), returnValue != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result",
                "iVar2": "returnValue",
                "local_18": "localInput",
                "local_14": "localOutput"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "execute_relocated_function_00005780",
            "code": "\nvoid executeRelocatedFunction_00005780(undefined4 offset)\n\n{\n  FUN_00004b34(relocationTable[16].relocationOffset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "execute_relocated_function_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_structures_00005790",
            "code": "\nvoid initialize_data_structures_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_structures_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_array_000057a8",
            "code": "\nint updateArray_000057a8(undefined4 status,int value,undefined4 *array)\n\n{\n  int index;\n  undefined *ptr;\n  \n  index = array[2] + -1;\n  array[2] = index;\n  if ((index < 0) && ((index < (int)array[6] || (value == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  ptr = (undefined *)*array;\n  *array = ptr + 1;\n  *ptr = (char)value;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_array_000057a8",
                "param_1": "status",
                "param_2": "value",
                "param_3": "array",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int result;\n  undefined *data_end;\n  int current_length;\n  \n  data_end = data + length;\n  current_length = length;\n  do {\n    if (data == data_end) {\n      return 0;\n    }\n    result = FUN_000057a8(input1,*data,input2,length,current_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "data_end",
                "iVar3": "current_length"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int inputPointer,undefined4 *dataPointer,byte *formatString,int *countPointer)\n\n{\n  int index;\n  int result;\n  int *counterPointer;\n  bool isValid;\n  byte *currentCharPointer;\n  int temporaryVariable;\n  byte *currentPointer;\n  int *formatArgsPointer;\n  uint flags;\n  int precision;\n  undefined4 unknownStackValue;\n  int width;\n  int outputLength;\n  byte conversionSpecifier;\n  undefined minusFlag;\n  undefined plusFlag;\n  undefined spaceFlag;\n  undefined4 unknownValue;\n  \n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPointer == &DAT_000079b8) {\n    dataPointer = *(undefined4 **)(inputPointer + 4);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_000079d8) {\n    dataPointer = *(undefined4 **)(inputPointer + 8);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_00007998) {\n    dataPointer = *(undefined4 **)(inputPointer + 0xc);\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x1c)) || (dataPointer[4] == 0)) &&\n     (index = FUN_000054a8(inputPointer,dataPointer), index != 0)) {\n    if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16)))\n    {\n      FUNC_000045ec(dataPointer[0x16]);\n    }\n    return -1;\n  }\n  outputLength = 0;\n  minusFlag = 0x20;\n  plusFlag = 0x30;\n  currentPointer = formatString;\n  formatArgsPointer = countPointer;\nLAB_0000588e:\n  currentCharPointer = currentPointer;\n  if (*currentCharPointer != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentPointer = currentCharPointer + 1;\n  if (*currentCharPointer == 0x25) {\nLAB_0000589a:\n    index = (int)currentCharPointer - (int)formatString;\n    if (index != 0) {\n      result = FUN_000057d2(inputPointer,dataPointer,formatString,index);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(dataPointer[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n          FUNC_000045ec(dataPointer[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(dataPointer + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return outputLength;\n      }\n      outputLength = outputLength + index;\n    }\n    if (*currentCharPointer == 0) goto LAB_00005a06;\n    precision = -1;\n    unknownStackValue = 0;\n    flags = 0;\n    width = 0;\n    spaceFlag = 0;\n    unknownValue = 0;\n    currentPointer = currentCharPointer + 1;\n    while( true ) {\n      currentCharPointer = currentPointer + 1;\n      index = FUN_00006010(\"#-0+ \",*currentPointer,5);\n      if (index == 0) break;\n      flags = 1 << (index - 0x7bfcU & 0xff) | flags;\n      currentPointer = currentCharPointer;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      spaceFlag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      spaceFlag = 0x2b;\n    }\n    if (*currentPointer == 0x2a) {\n      counterPointer = formatArgsPointer + 1;\n      width = *formatArgsPointer;\n      formatArgsPointer = counterPointer;\n      if (width < 0) {\n        width = -width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isValid = false;\n      index = width;\n      currentCharPointer = currentPointer;\n      while( true ) {\n        if (9 < *currentCharPointer - 0x30) break;\n        index = index * 10 + (*currentCharPointer - 0x30);\n        isValid = true;\n        currentCharPointer = currentCharPointer + 1;\n      }\n      if (isValid) {\n        width = index;\n      }\n    }\n    if (*currentCharPointer == 0x2e) {\n      if (currentCharPointer[1] == 0x2a) {\n        precision = *formatArgsPointer;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currentCharPointer = currentCharPointer + 2;\n        formatArgsPointer = formatArgsPointer + 1;\n      }\n      else {\n        isValid = false;\n        precision = 0;\n        index = 0;\n        while( true ) {\n          currentCharPointer = currentCharPointer + 1;\n          if (9 < *currentCharPointer - 0x30) break;\n          index = index * 10 + (*currentCharPointer - 0x30);\n          isValid = true;\n        }\n        if (isValid) {\n          precision = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*currentCharPointer,3);\n    if (index != 0) {\n      flags = flags | 0x40 << (index - 0x7c02U & 0xff);\n      currentCharPointer = currentCharPointer + 1;\n    }\n    formatString = currentCharPointer + 1;\n    conversionSpecifier = *currentCharPointer;\n    index = FUN_00006010(\"efgEFG\",conversionSpecifier,6);\n    if (index == 0) {\n      temporaryVariable = FUN_00005b34(inputPointer,&flags,dataPointer,0x57d3,&formatArgsPointer);\n      if (temporaryVariable == -1) goto LAB_00005a06;\n    }\n    else {\n      formatArgsPointer = (int *)(((int)formatArgsPointer + 7U & 0xfffffff8) + 8);\n    }\n    outputLength = outputLength + temporaryVariable;\n    currentPointer = formatString;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "inputPointer",
                "param_2": "dataPointer",
                "param_3": "formatString",
                "param_4": "countPointer",
                "iVar1": "index",
                "iVar2": "result",
                "piVar3": "counterPointer",
                "bVar4": "isValid",
                "pbVar5": "currentCharPointer",
                "unaff_r7": "temporaryVariable",
                "pbVar6": "currentPointer",
                "local_8c": "formatArgsPointer",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "unknownStackValue",
                "local_7c": "width",
                "local_74": "outputLength",
                "local_70": "conversionSpecifier",
                "local_6f": "minusFlag",
                "local_6e": "plusFlag",
                "local_45": "spaceFlag",
                "local_30": "unknownValue"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_string_length_00005a58",
            "code": "\nundefined4\ncalculateStringLength_00005a58(undefined4 value,uint *array,uint *lengthPtr,undefined4 param4,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int returnValue;\n  uint maxIndex;\n  uint loopIndex;\n  bool isSet;\n  \n  maxIndex = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxIndex = array[2];\n  }\n  *lengthPtr = maxIndex;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *lengthPtr = maxIndex + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *lengthPtr = *lengthPtr + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index = 0; index < (int)(array[3] - *lengthPtr); index = index + 1) {\n      returnValue = (*callback)(value,param4,(int)array + 0x19,1);\n      if (returnValue == -1) goto LAB_00005afc;\n    }\n  }\n  maxIndex = (uint)*(byte *)((int)array + 0x43);\n  if (maxIndex != 0) {\n    maxIndex = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxIndex + 0x43) = 0x30;\n    *(undefined *)((int)array + maxIndex + 0x44) = *(undefined *)((int)array + 0x45);\n    maxIndex = maxIndex + 2;\n  }\n  index = (*callback)(value,param4,(int)array + 0x43,maxIndex);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxIndex = array[3];\n    isSet = (*array & 6) == 4;\n    if (isSet) {\n      maxIndex = maxIndex - *lengthPtr;\n    }\n    if (isSet) {\n      maxIndex = maxIndex & ~((int)maxIndex >> 0x1f);\n    }\n    else {\n      maxIndex = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxIndex = maxIndex + (array[2] - array[4]);\n    }\n    for (loopIndex = 0; maxIndex != loopIndex; loopIndex = loopIndex + 1) {\n      index = (*callback)(value,param4,(int)array + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_string_length_00005a58",
                "param_1": "value",
                "param_2": "array",
                "param_3": "lengthPtr",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "result",
                "iVar3": "returnValue",
                "uVar4": "maxIndex",
                "uVar5": "loopIndex",
                "bVar6": "isSet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "convert_to_hex_string_00005b34",
            "code": "\ncode * convertToHexString_00005b34(undefined4 val,uint *input,undefined4 param,code *callback,uint **pparam\n                   )\n\n{\n  bool isDivisible;\n  byte byteVal;\n  int result;\n  code *returnValue;\n  char *hexCharacters;\n  int innerResult;\n  char *bytePtr;\n  uint tempValue;\n  uint *uintPtr;\n  uint base;\n  uint **puintPtr;\n  char **pcharPtr;\n  uint byteCount;\n  char *resultPtr;\n  code *localCallback;\n  \n  byteVal = *(byte *)(input + 6);\n  bytePtr = (char *)((int)input + 0x43);\n  localCallback = callback;\n  if (0x78 < byteVal) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)input + 0x42) = byteVal;\nLAB_00005bdc:\n    bytePtr = (char *)((int)input + 0x42);\n    tempValue = 1;\nLAB_00005d28:\n    input[4] = tempValue;\n    *(undefined *)((int)input + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteVal < 99) {\n    if (byteVal == 0) goto LAB_00005d06;\n    if (byteVal == 0x58) {\n      hexCharacters = \"0123456789ABCDEF\";\n      *(undefined *)((int)input + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteVal) {\n  case 99:\n    tempValue = **pparam;\n    *pparam = *pparam + 1;\n    *(char *)((int)input + 0x42) = (char)tempValue;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *input;\n    uintPtr = *pparam;\n    if ((int)(base << 0x18) < 0) {\n      tempValue = *uintPtr;\n      *pparam = uintPtr + 1;\n    }\n    else {\n      tempValue = *uintPtr;\n      *pparam = uintPtr + 1;\n      if ((base & 0x40) != 0) {\n        tempValue = (uint)(short)tempValue;\n      }\n    }\n    if ((int)tempValue < 0) {\n      tempValue = -tempValue;\n      *(undefined *)((int)input + 0x43) = 0x2d;\n    }\n    hexCharacters = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    puintPtr = (uint **)*pparam;\n    base = *input;\n    tempValue = input[5];\n    *pparam = (uint *)(puintPtr + 1);\n    uintPtr = *puintPtr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *uintPtr = tempValue;\n    }\n    else {\n      *(short *)uintPtr = (short)tempValue;\n    }\nLAB_00005d06:\n    input[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    uintPtr = *pparam;\n    tempValue = *input;\n    *pparam = uintPtr + 1;\n    if (((int)(tempValue << 0x18) < 0) || (-1 < (int)(tempValue << 0x19))) {\n      tempValue = *uintPtr;\n    }\n    else {\n      tempValue = (uint)*(ushort *)uintPtr;\n    }\n    hexCharacters = \"0123456789ABCDEF\";\n    if (byteVal == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *input = *input | 0x20;\n  case 0x78:\n    hexCharacters = \"0123456789abcdef\";\n    *(undefined *)((int)input + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *input;\n    tempValue = **pparam;\n    *pparam = *pparam + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      tempValue = tempValue & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *input = base | 0x20;\n    }\n    if (tempValue == 0) {\n      *input = *input & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    pcharPtr = (char **)*pparam;\n    *pparam = (uint *)(pcharPtr + 1);\n    bytePtr = *pcharPtr;\n    result = FUN_00006010(bytePtr,0,input[1],pcharPtr,val,input,param);\n    if (result != 0) {\n      input[1] = result - (int)bytePtr;\n    }\n    tempValue = input[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)input + 0x43) = 0;\nLAB_00005c36:\n  byteCount = input[1];\n  input[2] = byteCount;\n  if (-1 < (int)byteCount) {\n    *input = *input & 0xfffffffb;\n  }\n  resultPtr = bytePtr;\n  if ((tempValue != 0) || (byteCount != 0)) {\n    do {\n      resultPtr = resultPtr + -1;\n      *resultPtr = hexCharacters[tempValue - base * (tempValue / base)];\n      isDivisible = base <= tempValue;\n      tempValue = tempValue / base;\n    } while (isDivisible);\n  }\n  if (((base == 8) && ((int)(*input << 0x1f) < 0)) && ((int)input[1] <= (int)input[4])) {\n    resultPtr[-1] = '0';\n    resultPtr = resultPtr + -1;\n  }\n  input[4] = (int)bytePtr - (int)resultPtr;\n  bytePtr = resultPtr;\nLAB_00005c84:\n  result = FUN_00005a58(val,input,&localCallback,param,callback);\n  if ((result == -1) || (result = (*callback)(val,param,bytePtr,input[4]), result == -1)) {\nLAB_00005c98:\n    returnValue = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*input << 0x1e) < 0) {\n      for (result = 0; result < (int)(input[3] - (int)localCallback); result = result + 1) {\n        innerResult = (*callback)(val,param,(int)input + 0x19,1);\n        if (innerResult == -1) goto LAB_00005c98;\n      }\n    }\n    returnValue = (code *)input[3];\n    if ((int)(code *)input[3] < (int)localCallback) {\n      returnValue = localCallback;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "convert_to_hex_string_00005b34",
                "param_1": "val",
                "param_2": "input",
                "param_3": "param",
                "param_4": "callback",
                "param_5": "pparam",
                "bVar1": "isDivisible",
                "bVar2": "byteVal",
                "iVar3": "result",
                "pcVar4": "returnValue",
                "pcVar5": "hexCharacters",
                "iVar6": "innerResult",
                "pcVar7": "bytePtr",
                "puVar9": "uintPtr",
                "uVar8": "tempValue",
                "uVar10": "base",
                "uVar13": "byteCount",
                "pcVar14": "resultPtr",
                "local_24": "localCallback",
                "ppuVar11": "puintPtr",
                "ppcVar12": "pcharPtr"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "extract_byte_00005e10",
            "code": "\nuint extract_byte_00005e10(int input_param,byte **byte_array)\n\n{\n  int result;\n  uint extracted_byte;\n  byte *current_byte;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (byte_array == (byte **)&DAT_000079b8) {\n    byte_array = *(byte ***)(input_param + 4);\n  }\n  else if (byte_array == (byte **)&DAT_000079d8) {\n    byte_array = *(byte ***)(input_param + 8);\n  }\n  else if (byte_array == (byte **)&DAT_00007998) {\n    byte_array = *(byte ***)(input_param + 0xc);\n  }\n  result = FUN_00006768(input_param,byte_array);\n  if (result == 0) {\n    byte_array[1] = byte_array[1] + -1;\n    current_byte = *byte_array;\n    *byte_array = current_byte + 1;\n    extracted_byte = (uint)*current_byte;\n  }\n  else {\n    extracted_byte = 0xffffffff;\n  }\n  return extracted_byte;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "extract_byte_00005e10",
                "param_1": "input_param",
                "param_2": "byte_array",
                "iVar1": "result",
                "uVar2": "extracted_byte",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_function_00005e68",
            "code": "\nvoid processFunction_00005e68(undefined4 inputParam,undefined4 outputParam,undefined4 additionalParam1,undefined4 additionalParam2)\n\n{\n  undefined4 inputCopy;\n  undefined4 result;\n  undefined2 constant;\n  undefined2 limit;\n  undefined4 inputCopy2;\n  undefined4 resultCopy;\n  undefined *stringPointer;\n  undefined4 counter1;\n  undefined4 counter2;\n  undefined4 additionalParam3;\n  undefined4 additionalParam4;\n  \n  constant = 0x204;\n  inputCopy = inputParam;\n  inputCopy2 = inputParam;\n  additionalParam3 = additionalParam1;\n  additionalParam4 = additionalParam2;\n  result = FUN_00005ecc();\n  stringPointer = &LAB_00004dea_1;\n  counter1 = 0;\n  counter2 = 0;\n  limit = 0xffff;\n  resultCopy = result;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputCopy,outputParam,&additionalParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_function_00005e68",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "additionalParam1",
                "param_4": "additionalParam2",
                "local_80": "inputCopy",
                "local_7c": "result",
                "local_74": "constant",
                "local_72": "limit",
                "local_70": "inputCopy2",
                "local_6c": "resultCopy",
                "local_5c": "stringPointer",
                "local_4c": "counter1",
                "local_38": "counter2",
                "uStack_8": "additionalParam3",
                "uStack_4": "additionalParam4"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * findEndOfString_00005ecc(char *string)\n\n{\n  char currentCharacter;\n  char *nextCharacter;\n  char *currentPosition;\n  \n  currentPosition = string;\n  do {\n    nextCharacter = currentPosition + 1;\n    currentCharacter = *currentPosition;\n    currentPosition = nextCharacter;\n  } while (currentCharacter != '\\0');\n  return nextCharacter + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "string",
                "cVar1": "currentCharacter",
                "pcVar2": "nextCharacter",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "convert_string_to_int_00005edc",
            "code": "\nuint convertStringToInt_00005edc(undefined4 *result,byte *string,byte **nextString,uint base)\n\n{\n  uint convertedValue;\n  uint charValue;\n  byte isNegative;\n  int isNumberValid;\n  uint digitValue;\n  uint maxValue;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = string;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    charValue = (uint)*currentChar;\n    isNegative = (&DAT_00007a99)[charValue] & 8;\n  } while (((&DAT_00007a99)[charValue] & 8) != 0);\n  if (charValue == 0x2d) {\n    charValue = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (charValue == 0x2b) {\n    charValue = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (charValue != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (charValue != 0x30)) goto LAB_00005f26;\n  if ((*nextChar & 0xdf) == 0x58) {\n    charValue = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    charValue = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isNumberValid = 0;\n  maxValue = 0xffffffff / base;\n  convertedValue = 0;\n  do {\n    digitValue = charValue - 0x30;\n    if (9 < digitValue) {\n      if (charValue - 0x41 < 0x1a) {\n        digitValue = charValue - 0x37;\n      }\n      else {\n        if (0x19 < charValue - 0x61) break;\n        digitValue = charValue - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((isNumberValid < 0) || (maxValue < convertedValue)) ||\n       ((maxValue == convertedValue && ((int)~(base * maxValue) < (int)digitValue)))) {\n      isNumberValid = -1;\n    }\n    else {\n      convertedValue = convertedValue * base + digitValue;\n      isNumberValid = 1;\n    }\n    charValue = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (isNumberValid < 0) {\n    *result = 0x22;\n    convertedValue = 0xffffffff;\n    if (nextString == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      convertedValue = -convertedValue;\n    }\n    if (nextString == (byte **)0x0) {\n      return convertedValue;\n    }\n    if (isNumberValid == 0) goto LAB_00005fb8;\n  }\n  string = nextChar + -1;\nLAB_00005fb8:\n  *nextString = string;\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "convert_string_to_int_00005edc",
                "param_1": "result",
                "param_2": "string",
                "param_3": "nextString",
                "param_4": "base",
                "uVar1": "convertedValue",
                "uVar2": "charValue",
                "bVar3": "isNegative",
                "iVar4": "isNumberValid",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "currentChar",
                "pbVar8": "nextChar"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "process_relocation_00005fd8",
            "code": "\nvoid processRelocation_00005fd8(undefined4 offset,undefined4 param2,undefined4 param3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param2,param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "process_relocation_00005fd8",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "decode_array_00006010",
            "code": "\nbyte * decode_array_00006010(uint *array,uint value_to_search,uint size)\n\n{\n  byte current_byte;\n  char cond1;\n  char cond2;\n  char cond3;\n  char cond4;\n  byte *new_array;\n  uint *new_array_ptr;\n  byte *result;\n  uint offset;\n  uint new_size;\n  uint temp_var1;\n  uint temp_var2;\n  bool temp_var3;\n  bool temp_var4;\n  bool temp_var5;\n  bool temp_var6;\n  \n  value_to_search = value_to_search & 0xff;\n  if ((int)size < 0x10) {\njoined_r0x00006070:\n    do {\n      if (size == 0) {\n        return (byte *)0x0;\n      }\n      new_array_ptr = (uint *)((int)array + 1);\n      current_byte = *(byte *)array;\n      size = size - 1;\n      array = new_array_ptr;\n    } while (current_byte != value_to_search);\n  }\n  else {\n    offset = (uint)array & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = value_to_search | value_to_search << 8;\n        offset = offset | offset << 0x10;\n        new_size = size & 0xfffffff8;\n        do {\n          new_array_ptr = array + 2;\n          new_size = new_size - 8;\n          temp_var1 = *array ^ offset;\n          temp_var2 = array[1] ^ offset;\n          cond1 = -((char)temp_var1 == '\\0');\n          cond2 = -((char)(temp_var1 >> 8) == '\\0');\n          cond3 = -((char)(temp_var1 >> 0x10) == '\\0');\n          cond4 = -((char)(temp_var1 >> 0x18) == '\\0');\n          temp_var1 = CONCAT13(cond4,CONCAT12(cond3,CONCAT11(cond2,cond1)));\n          temp_var3 = (char)temp_var2 != '\\0';\n          temp_var4 = (char)(temp_var2 >> 8) != '\\0';\n          temp_var5 = (char)(temp_var2 >> 0x10) != '\\0';\n          temp_var6 = (char)(temp_var2 >> 0x18) != '\\0';\n          temp_var2 = CONCAT13(temp_var6 * cond4 - !temp_var6,\n                            CONCAT12(temp_var5 * cond3 - !temp_var5,\n                                     CONCAT11(temp_var4 * cond2 - !temp_var4,temp_var3 * cond1 - !temp_var3)));\n          if (temp_var2 != 0) {\n            if (temp_var1 == 0) {\n              result = (byte *)((int)array + 5);\n              temp_var1 = temp_var2;\n            }\n            else {\n              result = (byte *)((int)array + 1);\n            }\n            if ((temp_var1 & 1) == 0) {\n              temp_var3 = (temp_var1 & 0x100) == 0;\n              new_array = result + 1;\n              if (temp_var3) {\n                temp_var3 = (temp_var1 & 0x18000) == 0;\n                new_array = result + 2;\n              }\n              result = new_array;\n              if (temp_var3) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          array = new_array_ptr;\n        } while (new_size != 0);\n        size = size & 7;\n        goto joined_r0x00006070;\n      }\n      new_array_ptr = (uint *)((int)array + 1);\n      size = size - 1;\n      if (*(byte *)array == value_to_search) break;\n      offset = (uint)new_array_ptr & 7;\n      array = new_array_ptr;\n      if (size == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)new_array_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "decode_array_00006010",
                "param_1": "array",
                "param_2": "value_to_search",
                "param_3": "size",
                "bVar1": "current_byte",
                "cVar2": "cond1",
                "cVar3": "cond2",
                "cVar4": "cond3",
                "cVar5": "cond4",
                "pbVar6": "new_array",
                "puVar7": "new_array_ptr",
                "pbVar8": "result",
                "uVar9": "offset",
                "uVar10": "new_size",
                "uVar11": "temp_var1",
                "uVar12": "temp_var2",
                "bVar13": "temp_var3",
                "bVar14": "temp_var4",
                "bVar15": "temp_var5",
                "bVar16": "temp_var6"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destIndex,undefined *sourceArray,int length)\n\n{\n  undefined *sourceIndex;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = sourceArray + length;\n  destPtr = (undefined *)(destIndex + -1);\n  if (sourceArray != endPtr) {\n    do {\n      sourceIndex = sourceArray + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *sourceArray;\n      sourceArray = sourceIndex;\n    } while (sourceIndex != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destIndex",
                "param_2": "sourceArray",
                "param_3": "length",
                "puVar1": "sourceIndex",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 input1,int input2,uint size,undefined4 input4)\n\n{\n  int result;\n  uint counter;\n  \n  if (input2 != 0) {\n    if (size == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      counter = FUN_00006964();\n      result = input2;\n      if ((counter < size) && (result = FUN_00004bd0(input1,size), result != 0)) {\n        FUN_000060b0(result,input2,size);\n        FUN_00004b34(input1,input2);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(input1,size,size,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "clear_flags_and_copy_value_00006192",
            "code": "\nundefined4 clearFlagsAndCopyValue_00006192(undefined4 returnValue,undefined4 *array)\n\n{\n  if ((undefined4 *)array[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)array[0xd] != array + 0x11) {\n      FUN_00004b34();\n    }\n    array[1] = array[0x10];\n    array[0xd] = 0;\n    if (array[0x10] != 0) {\n      *array = array[0xf];\n      return 0;\n    }\n  }\n  *array = array[4];\n  array[1] = 0;\n  *(ushort *)(array + 3) = *(ushort *)(array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "clear_flags_and_copy_value_00006192",
                "param_1": "returnValue",
                "param_2": "array"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseInput_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint selector;\n  byte *nextByte;\n  uint currentByte;\n  int **output;\n  undefined stackBuffer [256];\n  uint flags;\n  undefined4 base;\n  uint additionalFlags;\n  int returnValue;\n  int counter;\n  undefined *localBuffer;\n  int mode;\n  undefined *localCodePointer;\n  code *decodeFunction;\n  \n  returnValue = 0;\n  counter = 0;\n  localCodePointer = &LAB_00006118_1;\n  decodeFunction = FUN_00006192 + 1;\n  output = param4;\n  localBuffer = stackBuffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      currentByte = (uint)*param3;\n      if (currentByte == 0) {\n        return returnValue;\n      }\n      selector = (byte)(&DAT_00007a99)[currentByte] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[currentByte] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (result = (*decodeFunction)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (currentByte == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*decodeFunction)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != currentByte) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  additionalFlags = selector;\n  flags = selector;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    selector = (uint)*nextByte;\n    if (9 < selector - 0x30) break;\n    nextByte = nextByte + 1;\n    additionalFlags = (additionalFlags * 10 + selector) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,selector,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  selector = (uint)*nextByte;\n  if (selector < 0x79) {\n    if (0x57 < selector) {\n      switch(selector) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(stackBuffer,param3);\n        flags = flags | 0x40;\n        mode = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        mode = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (selector < 0x6f) {\n          mode = 3;\n        }\n        else {\n          mode = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        mode = 5;\n        break;\n      case 0x69:\n        base = 0;\n        mode = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*output = (short)counter;\n            output = output + 1;\n          }\n          else {\n            **output = counter;\n            output = output + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        mode = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        mode = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*decodeFunction)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            result = (*decodeFunction)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (mode < 3) {\n        result = FUN_000064bc(param1,&flags,param2,&output);\n      }\n      else {\n        if (4 < mode) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flags,param2,&output);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (selector == 0x25) goto LAB_00006352;\n    if (selector < 0x26) {\n      if (selector != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (selector - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  mode = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_input_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "selector",
                "pbVar3": "nextByte",
                "uVar4": "currentByte",
                "local_2b0": "output",
                "auStack_2ac": "stackBuffer",
                "local_1ac": "flags",
                "local_1a8": "base",
                "local_1a4": "additionalFlags",
                "local_1a0": "returnValue",
                "local_19c": "counter",
                "local_198": "localBuffer",
                "local_194": "mode",
                "local_30": "localCodePointer",
                "local_2c": "decodeFunction"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 input,uint *params,byte **dataPtr,undefined4 *statusPtr)\n\n{\n  int result;\n  uint flag;\n  byte **ptrToPtr;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  int count;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 0xffffffff;\n    }\n    params[2] = flag;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    ptrToPtr = (byte **)*statusPtr;\n    *statusPtr = ptrToPtr + 1;\n    ptr2 = *ptrToPtr;\n  }\n  count = 0;\n  do {\n    flag = params[6];\n    if (flag != 0) {\n      if (flag == 1) {\n        if (*(char *)(params[5] + (uint)**dataPtr) == '\\0') {\n          if (count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *ptr2 = 0;\n          }\n          params[4] = count + params[4];\n          return 0;\n        }\n      }\n      else if ((flag != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**dataPtr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptr3 = ptr2;\n    if (-1 < (int)(*params << 0x1b)) {\n      ptr3 = ptr2 + 1;\n      *ptr2 = **dataPtr;\n    }\n    ptr1 = dataPtr[1];\n    *dataPtr = *dataPtr + 1;\n    flag = params[2] - 1;\n    dataPtr[1] = ptr1 + -1;\n    count = count + 1;\n    params[2] = flag;\n    ptr2 = ptr3;\n    if ((flag == 0) ||\n       (((int)(ptr1 + -1) < 1 &&\n        (result = (*(code *)params[0x60])(input,dataPtr,flag,(code *)params[0x60],statusPtr),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input",
                "param_2": "params",
                "param_3": "dataPtr",
                "param_4": "statusPtr",
                "iVar1": "result",
                "uVar2": "flag",
                "ppbVar3": "ptrToPtr",
                "pbVar4": "ptr1",
                "unaff_r6": "ptr2",
                "pbVar5": "ptr3",
                "iVar6": "count"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "reverse_and_improve_code_0000656c",
            "code": "\nundefined4 reverse_and_improve_code_0000656c(undefined4 input,uint *params,byte **buffer,undefined4 *output)\n\n{\n  int result;\n  undefined4 modified_value;\n  code *function_ptr;\n  uint temp_value;\n  byte *byte_ptr;\n  uint temp_uint;\n  undefined4 *ptr_var;\n  uint *ptr_var_2;\n  uint *ptr_var_3;\n  uint *ptr_var_4;\n  int var_unaff_r9;\n  int loop_counter;\n  undefined *local_data [4];\n  \n  local_data[0] = &DAT_00007c2f;\n  local_data[1] = &DAT_00007c32;\n  local_data[2] = &DAT_00007c35;\n  function_ptr = (code *)&UNK_00004f81;\n  if (params[6] != 3) {\n    function_ptr = (code *)&UNK_00005fd5;\n  }\n  temp_uint = params[2];\n  temp_value = temp_uint - 1;\n  if (0x15c < temp_value) {\n    var_unaff_r9 = temp_uint - 0x15d;\n    temp_uint = 0x15d;\n  }\n  if (0x15c < temp_value) {\n    params[2] = temp_uint;\n  }\n  ptr_var_4 = params + 7;\n  if (temp_value < 0x15d) {\n    var_unaff_r9 = 0;\n  }\n  *params = *params | 0xd00;\n  loop_counter = 0;\n  ptr_var_3 = ptr_var_4;\n  do {\n    result = FUN_00006010(local_data[loop_counter],**buffer,2);\n    if (result != 0) {\n      if (loop_counter == 1) {\n        if (params[1] == 0) {\n          params[1] = 8;\n          *params = *params | 0x200;\n        }\n        temp_value = *params & 0xfffffaff;\nLAB_000065f4:\n        *params = temp_value;\n      }\n      else if (loop_counter == 2) {\n        if ((*params & 0x600) != 0x200) goto LAB_00006624;\n        params[1] = 0x10;\n        temp_value = *params | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_value = params[2];\n      params[2] = temp_value - 1;\n      if (temp_value != 0) {\n        byte_ptr = *buffer;\n        *buffer = byte_ptr + 1;\n        ptr_var_2 = (uint *)((int)ptr_var_3 + 1);\n        *(byte *)ptr_var_3 = *byte_ptr;\n        byte_ptr = buffer[1];\n        buffer[1] = byte_ptr + -1;\n        ptr_var_3 = ptr_var_2;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)params[0x60])(input,buffer), result != 0)) {\n          loop_counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_counter = loop_counter + 1;\n  } while (loop_counter != 3);\n  if (params[1] == 0) {\n    params[1] = 10;\n  }\n  FUN_0000687c(params[5],\"01234567]\" + (8 - params[1]));\n  loop_counter = 0;\n  while( true ) {\n    ptr_var_2 = ptr_var_3;\n    if (params[2] == 0) break;\n    byte_ptr = *buffer;\n    temp_value = (uint)*byte_ptr;\n    if (*(char *)(params[5] + temp_value) == '\\0') break;\n    if ((temp_value == 0x30) && ((int)(*params << 0x14) < 0)) {\n      loop_counter = loop_counter + 1;\n      if (var_unaff_r9 != 0) {\n        var_unaff_r9 = var_unaff_r9 + -1;\n        params[2] = params[2] + 1;\n      }\n    }\n    else {\n      *params = *params & 0xfffff6ff;\n      ptr_var_2 = (uint *)((int)ptr_var_3 + 1);\n      *(byte *)ptr_var_3 = *byte_ptr;\n    }\n    byte_ptr = buffer[1];\n    buffer[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)params[0x60])(input,buffer);\n      if (result != 0) break;\n    }\n    else {\n      *buffer = *buffer + 1;\n    }\n    params[2] = params[2] - 1;\n    ptr_var_3 = ptr_var_2;\n  }\nLAB_000066ca:\n  if ((int)(*params << 0x17) < 0) {\n    if (ptr_var_4 < ptr_var_2) {\n      (*(code *)params[0x5f])(input,*(byte *)((int)ptr_var_2 + -1),buffer);\n      ptr_var_2 = (uint *)((int)ptr_var_2 + -1);\n    }\n    if (ptr_var_2 == ptr_var_4) {\n      return 1;\n    }\n  }\n  if ((*params & 0x10) == 0) {\n    *(byte *)ptr_var_2 = 0;\n    modified_value = (*function_ptr)(input,ptr_var_4,0,params[1]);\n    ptr_var = (undefined4 *)*output;\n    temp_value = *params;\n    *output = ptr_var + 1;\n    ptr_var = (undefined4 *)*ptr_var;\n    if ((temp_value & 0x20) == 0) {\n      if ((int)(temp_value << 0x1f) < 0) {\n        *(short *)ptr_var = (short)modified_value;\n      }\n      else {\n        *ptr_var = modified_value;\n      }\n    }\n    else {\n      *ptr_var = modified_value;\n    }\n    params[3] = params[3] + 1;\n  }\n  params[4] = (uint)((int)ptr_var_2 + params[4] + (loop_counter - (int)ptr_var_4));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "reverse_and_improve_code_0000656c",
                "param_1": "input",
                "param_2": "params",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "modified_value",
                "pcVar3": "function_ptr",
                "uVar4": "temp_value",
                "pbVar5": "byte_ptr",
                "uVar6": "temp_uint",
                "puVar7": "ptr_var",
                "puVar8": "ptr_var_2",
                "puVar9": "ptr_var_3",
                "puVar10": "ptr_var_4",
                "unaff_r9": "var_unaff_r9",
                "iVar11": "loop_counter",
                "local_34": "local_data"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputArray,undefined4 *outputArray,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 returnValue;\n  ushort tempVar3;\n  uint tempVar4;\n  \n  if ((inputArray != (undefined4 *)0x0) && (inputArray[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (outputArray == &DAT_000079b8) {\n    outputArray = (undefined4 *)inputArray[1];\n  }\n  else if (outputArray == (undefined4 *)&DAT_000079d8) {\n    outputArray = (undefined4 *)inputArray[2];\n  }\n  else if (outputArray == (undefined4 *)&DAT_00007998) {\n    outputArray = (undefined4 *)inputArray[3];\n  }\n  tempVar3 = *(ushort *)(outputArray + 3);\n  outputArray[1] = 0;\n  tempVar4 = (uint)*(ushort *)(outputArray + 3);\n  if ((int)(tempVar4 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar4 << 0x1d) < 0) {\n    if ((undefined4 *)outputArray[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)outputArray[0xd] != outputArray + 0x11) {\n        FUN_00004b34(inputArray);\n      }\n      outputArray[1] = outputArray[0x10];\n      outputArray[0xd] = 0;\n      if (outputArray[0x10] != 0) {\n        *outputArray = outputArray[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar4 << 0x1b)) {\n      *inputArray = 9;\n      tempVar3 = tempVar3 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar4 << 0x1c) < 0) {\n      tempVar2 = FUN_00004158(inputArray,outputArray,tempVar4 << 0x1c,tempVar4,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      outputArray[2] = 0;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfff7;\n      outputArray[6] = 0;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 4;\n  }\n  if (outputArray[4] == 0) {\n    FUN_00005700(inputArray,outputArray);\n  }\n  tempVar3 = *(ushort *)(outputArray + 3);\n  tempVar1 = *(undefined2 *)(outputArray + 3);\n  if ((tempVar3 & 3) != 0) {\n    *(undefined2 *)(outputArray + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(outputArray + 3) = tempVar1;\n    if ((tempVar3 & 9) == 9) {\n      FUN_0000404c(inputArray,outputArray);\n    }\n  }\n  returnValue = outputArray[4];\n  *outputArray = returnValue;\n  tempVar2 = (*(code *)outputArray[9])(inputArray,outputArray[8],returnValue,outputArray[5]);\n  outputArray[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar3 = *(ushort *)(outputArray + 3);\n  if (tempVar2 != 0) {\n    returnValue = 0;\n  }\n  else {\n    tempVar3 = tempVar3 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    outputArray[1] = returnValue;\n    tempVar3 = tempVar3 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(outputArray + 3) = tempVar3;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "returnValue",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "find_closing_bracket_0000687c",
            "code": "\nbyte * find_closing_bracket_0000687c(int length,byte *input_string)\n\n{\n  byte *output_string;\n  uint temp_var;\n  int index;\n  uint current_char;\n  uint opening_bracket_index;\n  uint closing_bracket_index;\n  bool is_escaped;\n  \n  current_char = (uint)*input_string;\n  is_escaped = current_char == 0x5e;\n  if (is_escaped) {\n    current_char = (uint)input_string[1];\n    input_string = input_string + 2;\n  }\n  else {\n    input_string = input_string + 1;\n  }\n  index = length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_escaped;\n  } while (index != length + 0xff);\n  if (current_char == 0) {\n    output_string = input_string + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      opening_bracket_index = current_char;\n      *(bool *)(length + opening_bracket_index) = !is_escaped;\n      input_string = input_string + 1;\n      while( true ) {\n        current_char = (uint)input_string[-1];\n        if (current_char != 0x2d) break;\n        closing_bracket_index = (uint)*input_string;\n        if ((closing_bracket_index == 0x5d) || (temp_var = opening_bracket_index, (int)closing_bracket_index < (int)opening_bracket_index)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(length + temp_var) = !is_escaped;\n        } while ((int)temp_var < (int)closing_bracket_index);\n        index = ~opening_bracket_index + closing_bracket_index;\n        if ((int)closing_bracket_index <= (int)opening_bracket_index) {\n          index = 0;\n        }\n        opening_bracket_index = opening_bracket_index + 1 + index;\n        input_string = input_string + 2;\n      }\n      output_string = input_string;\n    } while ((current_char != 0x5d) && (output_string = input_string + -1, current_char != 0));\n  }\n  return output_string;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "find_closing_bracket_0000687c",
                "param_1": "length",
                "param_2": "input_string",
                "pbVar1": "output_string",
                "uVar2": "temp_var",
                "iVar3": "index",
                "uVar4": "current_char",
                "uVar5": "opening_bracket_index",
                "uVar6": "closing_bracket_index",
                "bVar7": "is_escaped"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "copy_and_extend_buffer_000068f0",
            "code": "\nundefined4 copy_and_extend_buffer_000068f0(undefined4 data,int *buffer)\n\n{\n  int new_buffer;\n  int old_buffer_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = FUN_00004bd0(data,0x400);\n    if (new_buffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    old_buffer_size = buffer[0xe];\n    new_buffer = FUN_000060cc(data,(int *)buffer[0xd],old_buffer_size << 1);\n    if (new_buffer != 0) {\n      FUN_000060b0(new_buffer + old_buffer_size,new_buffer,old_buffer_size);\n      buffer[0xd] = new_buffer;\n      buffer[0xe] = old_buffer_size << 1;\n      *buffer = new_buffer + old_buffer_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "copy_and_extend_buffer_000068f0",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "new_buffer",
                "iVar2": "old_buffer_size"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_result_00006964",
            "code": "\nint calculateResult_00006964(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    result = result + *(int *)(param2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "range_bounds_00006974",
            "code": "\nundefined8 rangeBounds_00006974(int startValue,int endValue,int lowerBound,int upperBound)\n\n{\n  int adjustedEndValue;\n  undefined8 result;\n  undefined tempValue [8];\n  \n  if ((upperBound == 0) && (lowerBound == 0)) {\n    if (endValue < 0) {\n      startValue = 0;\n      endValue = -0x80000000;\n    }\n    else if (endValue != 0 || startValue != 0) {\n      endValue = 0x7fffffff;\n      startValue = -1;\n    }\n    return CONCAT44(endValue,startValue);\n  }\n  if (endValue < 0) {\n    adjustedEndValue = -endValue - (uint)(startValue != 0);\n    if (upperBound < 0) {\n      result = FUN_00006a14(-startValue,adjustedEndValue,-lowerBound,-upperBound - (uint)(lowerBound != 0),tempValue);\n      return result;\n    }\n    result = FUN_00006a14(-startValue,adjustedEndValue,lowerBound,upperBound,tempValue);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (upperBound < 0) {\n    result = FUN_00006a14(startValue,endValue,-lowerBound,-upperBound - (uint)(lowerBound != 0),tempValue);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "range_bounds_00006974",
                "param_1": "startValue",
                "param_2": "endValue",
                "param_3": "lowerBound",
                "param_4": "upperBound",
                "iVar1": "adjustedEndValue",
                "uVar2": "result",
                "local_8": "tempValue"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "evaluate_quotient_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong evaluateQuotientRemainder_00006a14(uint dividend,uint divisor,uint resultHigh,uint resultLow,uint *quotientRemainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint quotientHigh;\n  int shiftAmount;\n  uint quotientLow;\n  uint temp1;\n  uint temp2;\n  uint quotient;\n  uint shiftedDividendHigh;\n  uint temp3;\n  uint temp4;\n  bool carryFlag;\n  ulonglong returnValue;\n  \n  if (resultLow == 0) {\n    if (divisor < resultHigh) {\n      shiftAmount = LZCOUNT(resultHigh);\n      temp2 = resultHigh;\n      if (shiftAmount != 0) {\n        temp2 = resultHigh << shiftAmount;\n        divisor = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      quotient = temp2 >> 0x10;\n      temp3 = divisor / quotient;\n      quotientLow = dividend >> 0x10 | (divisor - quotient * temp3) * 0x10000;\n      quotientHigh = temp3 * (temp2 & 0xffff);\n      temp1 = temp3;\n      if (quotientLow <= quotientHigh && quotientHigh - quotientLow != 0) {\n        carryFlag = CARRY4(temp2,quotientLow);\n        quotientLow = temp2 + quotientLow;\n        temp1 = temp3 - 1;\n        if ((carryFlag == false) && (quotientLow <= quotientHigh && quotientHigh - quotientLow != 0)) {\n          temp1 = temp3 - 2;\n          quotientLow = quotientLow + temp2;\n        }\n      }\n      temp3 = (quotientLow - quotientHigh) / quotient;\n      quotient = dividend & 0xffff | ((quotientLow - quotientHigh) - quotient * temp3) * 0x10000;\n      quotientLow = temp3 * (temp2 & 0xffff);\n      quotientHigh = temp3;\n      if (quotient <= quotientLow && quotientLow - quotient != 0) {\n        carryFlag = CARRY4(temp2,quotient);\n        quotient = temp2 + quotient;\n        quotientHigh = temp3 - 1;\n        if ((carryFlag == false) && (quotient <= quotientLow && quotientLow - quotient != 0)) {\n          quotientHigh = temp3 - 2;\n          quotient = quotient + temp2;\n        }\n      }\n      quotient = quotient - quotientLow;\n      quotientHigh = quotientHigh | temp1 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (resultHigh == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        returnValue = (*UNRECOVERED_JUMPTABLE)();\n        return returnValue;\n      }\n      shiftAmount = LZCOUNT(resultHigh);\n      if (shiftAmount == 0) {\n        divisor = divisor - resultHigh;\n        temp4 = resultHigh >> 0x10;\n        shiftedDividendHigh = resultHigh & 0xffff;\n        temp2 = 1;\n        temp1 = resultHigh;\n      }\n      else {\n        temp1 = resultHigh << shiftAmount;\n        temp4 = temp1 >> 0x10;\n        quotientHigh = divisor >> (0x20U - shiftAmount & 0xff);\n        temp2 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        quotientLow = quotientHigh / temp4;\n        shiftedDividendHigh = temp1 & 0xffff;\n        temp3 = temp2 >> 0x10 | (quotientHigh - temp4 * quotientLow) * 0x10000;\n        quotient = quotientLow * shiftedDividendHigh;\n        dividend = dividend << shiftAmount;\n        quotientHigh = quotientLow;\n        if (temp3 <= quotient && quotient - temp3 != 0) {\n          carryFlag = CARRY4(temp1,temp3);\n          temp3 = temp1 + temp3;\n          quotientHigh = quotientLow - 1;\n          if ((carryFlag == false) && (temp3 <= quotient && quotient - temp3 != 0)) {\n            quotientHigh = quotientLow - 2;\n            temp3 = temp3 + temp1;\n          }\n        }\n        quotientLow = (temp3 - quotient) / temp4;\n        divisor = temp2 & 0xffff | ((temp3 - quotient) - temp4 * quotientLow) * 0x10000;\n        quotient = quotientLow * shiftedDividendHigh;\n        temp2 = quotientLow;\n        if (divisor <= quotient && quotient - divisor != 0) {\n          carryFlag = CARRY4(temp1,divisor);\n          divisor = temp1 + divisor;\n          temp2 = quotientLow - 1;\n          if ((carryFlag == false) && (divisor <= quotient && quotient - divisor != 0)) {\n            temp2 = quotientLow - 2;\n            divisor = divisor + temp1;\n          }\n        }\n        divisor = divisor - quotient;\n        temp2 = temp2 | quotientHigh << 0x10;\n      }\n      temp3 = divisor / temp4;\n      quotient = dividend >> 0x10 | (divisor - temp4 * temp3) * 0x10000;\n      quotientHigh = shiftedDividendHigh * temp3;\n      quotientLow = temp3;\n      if (quotient <= quotientHigh && quotientHigh - quotient != 0) {\n        carryFlag = CARRY4(temp1,quotient);\n        quotient = temp1 + quotient;\n        quotientLow = temp3 - 1;\n        if ((carryFlag == false) && (quotient <= quotientHigh && quotientHigh - quotient != 0)) {\n          quotientLow = temp3 - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      temp3 = (quotient - quotientHigh) / temp4;\n      quotient = dividend & 0xffff | ((quotient - quotientHigh) - temp4 * temp3) * 0x10000;\n      shiftedDividendHigh = shiftedDividendHigh * temp3;\n      quotientHigh = temp3;\n      if (quotient <= shiftedDividendHigh && shiftedDividendHigh - quotient != 0) {\n        carryFlag = CARRY4(temp1,quotient);\n        quotient = temp1 + quotient;\n        quotientHigh = temp3 - 1;\n        if ((carryFlag == false) && (quotient <= shiftedDividendHigh && shiftedDividendHigh - quotient != 0)) {\n          quotientHigh = temp3 - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      quotient = quotient - shiftedDividendHigh;\n      quotientHigh = quotientHigh | quotientLow << 0x10;\n    }\n    if (quotientRemainder != (uint *)0x0) {\n      *quotientRemainder = quotient >> LZCOUNT(resultHigh);\n      quotientRemainder[1] = 0;\n    }\n  }\n  else if (divisor < resultLow) {\n    if (quotientRemainder != (uint *)0x0) {\n      *quotientRemainder = dividend;\n      quotientRemainder[1] = divisor;\n      return 0;\n    }\n    quotientHigh = 0;\n    temp2 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(resultLow);\n    if (shiftAmount != 0) {\n      shiftedDividendHigh = 0x20 - shiftAmount;\n      quotientLow = resultHigh >> (shiftedDividendHigh & 0xff) | resultLow << shiftAmount;\n      temp4 = quotientLow >> 0x10;\n      quotientHigh = divisor >> (shiftedDividendHigh & 0xff);\n      temp2 = dividend >> (shiftedDividendHigh & 0xff) | divisor << shiftAmount;\n      quotient = quotientHigh / temp4;\n      temp1 = temp2 >> 0x10 | (quotientHigh - temp4 * quotient) * 0x10000;\n      temp3 = quotient * (quotientLow & 0xffff);\n      dividend = dividend << shiftAmount;\n      quotientHigh = quotient;\n      if (temp1 <= temp3 && temp3 - temp1 != 0) {\n        carryFlag = CARRY4(quotientLow,temp1);\n        temp1 = quotientLow + temp1;\n        quotientHigh = quotient - 1;\n        if ((carryFlag == false) && (temp1 <= temp3 && temp3 - temp1 != 0)) {\n          quotientHigh = quotient - 2;\n          temp1 = temp1 + quotientLow;\n        }\n      }\n      quotient = (temp1 - temp3) / temp4;\n      temp1 = temp2 & 0xffff | ((temp1 - temp3) - temp4 * quotient) * 0x10000;\n      temp3 = quotient * (quotientLow & 0xffff);\n      temp2 = quotient;\n      if (temp1 <= temp3 && temp3 - temp1 != 0) {\n        carryFlag = CARRY4(quotientLow,temp1);\n        temp1 = quotientLow + temp1;\n        temp2 = quotient - 1;\n        if ((carryFlag == false) && (temp1 <= temp3 && temp3 - temp1 != 0)) {\n          temp2 = quotient - 2;\n          temp1 = temp1 + quotientLow;\n        }\n      }\n      temp2 = temp2 | quotientHigh << 0x10;\n      returnValue = (ulonglong)temp2 * (ulonglong)(resultHigh << shiftAmount);\n      if (CONCAT44(temp1 - temp3,dividend) < returnValue) {\n        returnValue = returnValue - CONCAT44(quotientLow,resultHigh << shiftAmount);\n        temp2 = temp2 - 1;\n      }\n      if (quotientRemainder != (uint *)0x0) {\n        quotientHigh = ((temp1 - temp3) - (int)(returnValue >> 0x20)) - (uint)(dividend < (uint)returnValue);\n        *quotientRemainder = quotientHigh << (shiftedDividendHigh & 0xff) | dividend - (uint)returnValue >> shiftAmount;\n        quotientRemainder[1] = quotientHigh >> shiftAmount;\n      }\n      return (ulonglong)temp2;\n    }\n    if ((resultLow < divisor) || (resultHigh <= dividend)) {\n      carryFlag = dividend < resultHigh;\n      dividend = dividend - resultHigh;\n      divisor = (divisor - resultLow) - (uint)carryFlag;\n      quotientHigh = 1;\n    }\n    else {\n      quotientHigh = 0;\n    }\n    temp2 = 0;\n    if (quotientRemainder != (uint *)0x0) {\n      *quotientRemainder = dividend;\n      quotientRemainder[1] = divisor;\n    }\n  }\n  return CONCAT44(temp2,quotientHigh);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "evaluate_quotient_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "resultHigh",
                "param_4": "resultLow",
                "param_5": "quotientRemainder",
                "iVar2": "shiftAmount",
                "uVar1": "quotientHigh",
                "uVar3": "quotientLow",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "quotient",
                "uVar7": "shiftedDividendHigh",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "bVar10": "carryFlag",
                "uVar11": "returnValue"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 134137,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}