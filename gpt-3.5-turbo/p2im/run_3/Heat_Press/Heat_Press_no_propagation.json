{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "execute_main_loop_000816a8",
                "FUN_000816d4": "initialize_system",
                "FUN_00080ae4": "configure_hardware",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "set_mode",
                "FUN_000804a8": "initialize_communication",
                "FUNC_000805d0": "receive_data",
                "DAT_000816d0": "data_ready",
                "FUN_00080ce0": "process_data"
            },
            "code": "void execute_main_loop_000816a8(void)\n{\n  initialize_system();\n  configure_hardware();\n  do_nothing();\n  set_mode(1);\n  initialize_communication();\n  do {\n    do {\n      receive_data();\n    } while (DAT_000816d0 == 0);\n    process_data();\n  } while(true);\n}",
            "called": [
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "execute_main_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_00081042",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "shift",
                "param_4": "value",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void set_bits_00081042(uint32_t* data, uint32_t mask, uint32_t shift, uint32_t value) {\n    uint32_t* PTR_data = data + 1;\n    uint32_t DAT_mask = mask | *PTR_data;\n    uint32_t DAT_shift = (value & 0xf) << shift;\n    uint32_t DAT_value = (value & 3) << 0x1c;\n    *PTR_data = DAT_mask | DAT_shift | DAT_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bits_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "process_data": "process_data",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "ptr_list",
                "piVar1": "ptr_item",
                "iVar2": "return_value",
                "piVar3": "ptr_current_item",
                "uVar4": "i",
                "puVar5": "ptr_item_data",
                "uVar6": "item_len",
                "uVar7": "j",
                "FUN_00082ac0": "process_data_00082ac0"
            },
            "code": "int process_data_00082ac0(undefined4 data, int data_len, int **ptr_list) {\n  int *ptr_current_item;\n  int return_value;\n  int *ptr_item;\n  uint item_len;\n  undefined4 *ptr_item_data;\n  uint i;\n  uint j;\n  \n  if (-1 < *(int *)(data_len + 100) << 0x12) {\n    return_value = allocate_memory();\n    ptr_list[2] = (int *)0x0;\n    ptr_list[1] = (int *)0x0;\n    return return_value;\n  }\n  ptr_item = *ptr_list;\n  ptr_current_item = ptr_list[2];\n  while (ptr_current_item != (int *)0x0) {\n    item_len = ptr_item[1];\n    j = item_len >> 2;\n    if (j != 0) {\n      ptr_item_data = (undefined4 *)(*ptr_item + -4);\n      i = 0;\n      do {\n        ptr_item_data = ptr_item_data + 1;\n        return_value = process_item_data(data, *ptr_item_data, data_len);\n        i = i + 1;\n        if (return_value == -1) goto LAB_00082b00;\n      } while (j != i);\n      ptr_current_item = ptr_list[2];\n    }\n    ptr_current_item = (int *)((int)ptr_current_item - (item_len & 0xfffffffc));\n    ptr_list[2] = ptr_current_item;\n    ptr_item = ptr_item + 2;\n  }\n  return_value = 0;\nLAB_00082b00:\n  ptr_list[2] = (int *)0x0;\n  ptr_list[1] = (int *)0x0;\n  return return_value;\n}",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_data_integrity_00080ce0",
                "iVar1": "data_check_result",
                "FUN_000813e4": "check_data",
                "PTR_DAT_00080d14": "PTR_DATA_1",
                "PTR_DAT_00080d18": "PTR_DATA_2",
                "PTR_DAT_00080d1c": "PTR_DATA_3",
                "PTR_DAT_00080d20": "PTR_DATA_4",
                "do_nothing_00080aa8": "do_nothing"
            },
            "code": "void check_data_integrity_00080ce0(void)\n{\n  int data_check_result;\n  data_check_result = check_data(PTR_DAT_00080d14);\n  if (data_check_result != 0) {\n    do_nothing();\n  }\n  data_check_result = check_data(PTR_DAT_00080d18);\n  if (data_check_result != 0) {\n    do_nothing();\n  }\n  data_check_result = check_data(PTR_DAT_00080d1c);\n  if (data_check_result != 0) {\n    do_nothing();\n  }\n  data_check_result = check_data(PTR_DAT_00080d20);\n  if (data_check_result != 0) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_data_integrity_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_with_zeroes_00081682",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "value",
                "FUN_00082a50": "get_value",
                "FUN_0008165c": "assign_values_to_array"
            },
            "code": "undefined4 * initialize_array_with_zeroes_00081682(undefined4 *array, int size)\n{\n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (size != 0) {\n    undefined4 uVar1 = get_value(size);\n    assign_values_to_array(array, size, uVar1);\n  }\n  return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "increment_value_000815fe",
                "param_1": "value_ptr",
                "*param_1": "*value_ptr",
                "FUN_00081e04": "increment"
            },
            "code": "undefined4* increment_value_000815fe(undefined4* value_ptr){\n  increment(*value_ptr);\n  return value_ptr;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "increment_value_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "check_number_00081d1c",
                "param_1": "number",
                "uVar1": "shift_amount",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_number_00081d1c(uint number) {\n  uint result;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x1f - ((number << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    result = (number << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  else if ((shift_amount == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_number_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "subtract_multiply_000847ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "result_array",
                "uVar1": "multiplication_result_low",
                "lVar2": "multiplication_result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void subtract_multiply_000847ac(uint input1, int input2, undefined4 input3, undefined4 input4, int *result_array) {\n  longlong multiplication_result = FUNC_00084a80();\n  multiplication_result = multiplication_result * CONCAT44(input4, input3);\n  uint multiplication_result_low = (uint)multiplication_result;\n  result_array[0] = input1 - multiplication_result_low;\n  int multiplication_result_high = (int)((ulonglong)multiplication_result >> 0x20);\n  int borrow = (input1 < multiplication_result_low);\n  result_array[1] = input2 - multiplication_result_high - borrow;\n  return;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "subtract_multiply_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "process_data_00080118",
                "param_1": "param1",
                "param_2": "data",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080134": "has_data",
                "PTR_DAT_0008013c": "data_ptr",
                "DAT_00080140": "callback_ptr",
                "DAT_00080144": "callback_func"
            },
            "code": "void process_data_00080118(int param1, char* data, int param2, int param3)\n{\n  bool data_available = (DAT_00080134 != 0);\n  if (data_available) {\n    data = PTR_DAT_0008013c;\n  }\n  bool callback_exists = ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0));\n  if (callback_exists) {\n    (*DAT_00080144)(DAT_00080140, data, param2, DAT_00080144, param3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "process_data_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_CY_false_or_ZR_true_00081c94",
                "in_ZR": "zero_reg",
                "in_CY": "carry_reg",
                "FUN_00081c5c": "execute_some_function"
            },
            "code": "bool is_CY_false_or_ZR_true_00081c94(void)\n{\n  undefined zero_reg;\n  undefined carry_reg;\n  execute_some_function();\n  return !(bool)carry_reg || (bool)zero_reg;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure",
                "puVar1": "undefined_pointer_1",
                "uVar2": "undefined_variable_2",
                "puVar3": "undefined_pointer_2",
                "puVar4": "undefined_pointer_3",
                "puVar5": "data_array_1",
                "puVar6": "data_array_2",
                "PTR_LAB_00083b08_1_00083bf4": "data_pointer",
                "DAT_00083bfc": "data_2",
                "PTR_LAB_00084440_1_00083bf8": "data_3",
                "PTR_FUN_0008449c_1_00083c00": "data_4"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *data_array_1 = *(undefined4 **)(param_1 + 4);\n    undefined4 *data_array_2 = *(undefined4 **)(param_1 + 8);\n    undefined4 *data_array_3 = *(undefined4 **)(param_1 + 0xc);\n    undefined4 *PTR_LAB_00083b08_1_00083bf4 = PTR_LAB_00083b08_1_00083bf4;\n    undefined4 data_1 = 3;\n    int *DAT_00083bfc = (int *)(param_1 + 0x2e8);\n    undefined4 PTR_LAB_00084440_1_00083bf8 = 0;\n    undefined2 PTR_FUN_0008449c_1_00083c00 = 4;\n    FUN_00082504(data_array_1 + 0x17,0,8);\n    FUN_00082504(data_array_2 + 0x17,0,8);\n    FUN_00082504(data_array_3 + 0x17,0,8);\n    data_array_1[0] = 0;\n    data_array_1[1] = 0;\n    data_array_1[2] = 0;\n    data_array_1[4] = 0;\n    data_array_1[5] = 0;\n    data_array_1[6] = 0;\n    data_array_1[7] = data_array_1;\n    data_array_1[8] = PTR_LAB_00084440_1_00083bf8;\n    data_array_1[9] = DAT_00083bfc;\n    data_array_1[10] = PTR_FUN_0008449c_1_00083c00;\n    data_array_1[0xb] = PTR_LAB_000844bc_1_00083c04;\n    data_array_1[0x19] = 0;\n    *(undefined2 *)((int)data_array_1 + 0xe) = PTR_FUN_0008449c_1_00083c00;\n    data_array_2[0] = 0;\n    data_array_2[1] = 0;\n    data_array_2[2] = 0;\n    data_array_2[4] = 0;\n    data_array_2[5] = 0;\n    data_array_2[6] = 0;\n    data_array_2[7] = data_array_2;\n    data_array_2[8] = PTR_LAB_00084440_1_00083bf8;\n    data_array_2[9] = DAT_00083bfc;\n    data_array_2[10] = PTR_FUN_0008449c_1_00083c00;\n    data_array_2[0xb] = PTR_LAB_000844bc_1_00083c04;\n    data_array_2[0x19] = 0;\n    *(undefined2 *)((int)data_array_2 + 0xe) = 1;\n    *(undefined2 *)(data_array_2 + 3) = 9;\n    data_array_3[0] = 0;\n    data_array_3[1] = 0;\n    data_array_3[2] = 0;\n    data_array_3[4] = 0;\n    data_array_3[5] = 0;\n    data_array_3[6] = 0;\n    data_array_3[7] = data_array_3;\n    data_array_3[8] = PTR_LAB_00084440_1_00083bf8;\n    data_array_3[9] = DAT_00083bfc;\n    data_array_3[10] = PTR_FUN_0008449c_1_00083c00;\n    data_array_3[0xb] = PTR_LAB_000844bc_1_00083c04;\n    data_array_3[0x19] = 0;\n    *(undefined2 *)((int)data_array_3 + 0xe) = 2;\n    *(undefined2 *)(data_array_3 + 3) = 0x12;\n    data_array_3[7] = data_array_3;\n    data_array_3[8] = PTR_LAB_00084440_1_00083bf8;\n    data_array_3[9] = DAT_00083bfc;\n    data_array_3[10] = PTR_FUN_0008449c_1_00083c00;\n    data_array_3[0xb] = PTR_LAB_000844bc_1_00083c04;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "check_and_update_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "flag",
                "iVar2": "result",
                "iVar3": "function_res",
                "uVar4": "flag_val",
                "bVar5": "flag_check",
                "auStack_54": "temp_array",
                "local_50": "local_var"
            },
            "code": "void check_and_update_000842a4(int input, int *output)\n{\n    ushort flag = *(ushort *)(output + 3);\n    uint flag_val = (uint)flag;\n    if ((int)(flag_val << 0x1e) < 0) {\n        *output = (int)output + 0x43;\n        output[4] = (int)output + 0x43;\n        output[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)output + 0xe)) {\n        int result = get_result(input, (int)*(short *)((int)output + 0xe), temp_array);\n        if (-1 < result) {\n            bool flag_check = (local_var & 0xf000) == 0x2000;\n            if (((local_var & 0xf000) == 0x8000) && ((undefined *)output[10] == PTR_FUN_0008449c_1_00084380)) {\n                result = 0x400;\n                *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n                output[0x13] = 0x400;\n            }\n            else {\n                result = 0x400;\n                *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n            }\n            goto LAB_00084300;\n        }\n        flag = *(ushort *)(output + 3);\n        flag_val = (uint)flag;\n    }\n    *(ushort *)(output + 3) = flag | 0x800;\n    int result;\n    if ((flag_val & 0x80) == 0) {\n        result = 0x400;\n    }\n    else {\n        result = 0x40;\n    }\n    bool flag_check = false;\n    LAB_00084300:\n    int function_res = do_something(input, result);\n    flag = *(ushort *)(output + 3);\n    if (function_res == 0) {\n        if (-1 < (int)((uint)flag << 0x16)) {\n            *(ushort *)(output + 3) = flag | 2;\n            *output = (int)output + 0x43;\n            output[4] = (int)output + 0x43;\n            output[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(input + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n        *(ushort *)(output + 3) = flag | 0x80;\n        *output = function_res;\n        output[4] = function_res;\n        output[5] = result;\n        if ((flag_check) && (function_res = get_result(input, (int)*(short *)((int)output + 0xe)), function_res != 0))\n        {\n            *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "check_and_update_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data",
                "iVar3": "data_ptr",
                "FUN_00083b14": "initialize_data",
                "FUN_00083adc": "process_data_helper",
                "*(code **)(param_1 + 0x2c)": "*(code **)(data + 0x2c)",
                "iVar2": "result",
                "FUN_00083d9c": "update_data",
                "perform_nothing_00083c08": "perform_nothing",
                "*(int *)(param_1 + 0x30)": "*(int *)(data + 0x30)",
                "param_1 + 0x40": "data + 0x40",
                "*(int *)(param_1 + 0x44)": "*(int *)(data + 0x44)",
                "*(undefined2 *)(param_1 + 0xc)": "*(undefined2 *)(data + 0xc)",
                "perform_nothing_00083c0c": "perform_nothing"
            },
            "code": "int process_data_000846a4(int data)\n{\n  int data_ptr = *data_start_ptr;\n  if (data != 0) {\n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n      initialize_data();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      int result = process_data_000846a4_helper(data_ptr, data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(data + 0x2c))(data_ptr,*(undefined4 *)(data + 0x1c)), result < 0))\n      {\n        return -1;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        update_data(data_ptr,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          update_data(data_ptr);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        update_data(data_ptr);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      perform_nothing();\n      *(undefined2 *)(data + 0xc) = 0;\n      perform_nothing();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_relocation_table_00080f24",
                "puVar1": "rel_table_ptr",
                "puVar2": "rel_table_data",
                "iVar3": "i",
                "puVar4": "zero_table_ptr",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_table_ptr",
                "DAT_00080f7c": "rel_table_data",
                "PTR_DAT_00080f84": "zero_table_data",
                "PTR_DAT_00080f88": "rel_table_end",
                "DAT_00080f94": "flag_ptr",
                "DAT_00080f8c": "zero_table_end",
                "PTR_DAT_00080f90": "mem_table_ptr",
                "*(undefined4 *)(puVar1 + iVar3)": "*(uint32_t *)(rel_table_ptr + i)",
                "*(undefined4 *)(puVar2 + iVar3)": "*(uint32_t *)(rel_table_data + i)",
                "*(uint *)(DAT_00080f94 + 8)": "flag",
                "*(uint *)(iVar3 + 8)": "*flag_ptr",
                "0x20000000": "0x20000000",
                "0x100000": "0x100000",
                "*DAT_00080f98": "(*DAT_00080f98)()",
                "undefined": "uint32_t"
            },
            "code": "void copy_relocation_table_00080f24(void)\n{\n    uint32_t* PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n    uint32_t* PTR_DAT_00080f88 = PTR_DAT_00080f88;\n    uint32_t* DAT_00080f7c = DAT_00080f7c;\n    uint32_t* DAT_00080f7c_end = PTR_DAT_00080f84;\n    uint32_t* zero_table_ptr = PTR_DAT_00080f84;\n    uint32_t* DAT_00080f8c = DAT_00080f8c;\n    uint32_t* PTR_DAT_00080f90 = PTR_DAT_00080f90 - 0x20000000;\n    uint32_t* mem_table_end = DAT_00080f8c;\n    uint32_t* DAT_00080f94 = DAT_00080f94 + 8;\n    uint32_t *(uint *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n\n    if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n        for (int i = 0; PTR_Elf32_Rel_ARRAY_00080f80 + i < PTR_DAT_00080f88; i += 4) {\n            *(uint32_t *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(uint32_t *)(DAT_00080f7c + i);\n        }\n    }\n    for (; zero_table_ptr < DAT_00080f8c; zero_table_ptr++) {\n        *zero_table_ptr = 0;\n    }\n    if (PTR_DAT_00080f90 < (uint32_t*)0x100000) {\n        *DAT_00080f94 |= 0x20000000;\n    }\n    *DAT_00080f98;\n    while (true) {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_relocation_table_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_param1, uint param2)\n{\n  uint result = *(uint *)(ptr_param1 + 8) & param2;\n  \n  if (result != 0) {\n    if ((param2 & *(uint *)(ptr_param1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar1": "config_data",
                "puVar2": "module_data",
                "puVar3": "module_data2",
                "puVar4": "module_data3",
                "uVar5": "module_data4",
                "iVar6": "module_data5"
            },
            "code": "void initialize_system_000804a8(void)\n{\n  initialize_module(1, 0);\n  initialize_module(6, 1);\n  initialize_module(0, 1);\n  initialize_module(1, 1);\n  set_configuration(0, 0);\n  set_configuration(1, 0);\n  uint8_t *module_data = module_data_ptr;\n  uint8_t *config_data = config_data_ptr;\n  *(uint16_t *)(config_data_ptr + 0xe) = 0x13;\n  *(uint16_t *)(config_data + 0x10) = 10;\n  *(uint8_t **)(config_data + 0x14) = module_data + 0x26;\n  config_data[1] = 3;\n  config_data[0x19] = 3;\n  *(uint16_t *)(config_data + 0x1a) = 0x14;\n  *(uint16_t *)(config_data + 0x28) = 3;\n  *(uint16_t *)(config_data + 4) = 0x10;\n  *(uint8_t **)(config_data + 8) = module_data;\n  config_data[0xd] = 0x10;\n  *(uint16_t *)(config_data + 0x1c) = 0xc;\n  config_data[0x25] = 0x10;\n  *(uint16_t *)(config_data + 0x34) = 8;\n  uint8_t *module_data2 = module_data_ptr2;\n  *(uint16_t *)(config_data + 0x26) = 0x1c;\n  *(uint8_t **)(config_data + 0x2c) = module_data + 0x38;\n  config_data[0x30] = 2;\n  config_data[0x31] = 2;\n  *(uint8_t **)(config_data + 0x38) = module_data2;\n  config_data[0x3c] = 2;\n  *config_data = 1;\n  config_data[0xc] = 1;\n  config_data[0x18] = 1;\n  config_data[0x24] = 1;\n  *(uint16_t *)(config_data + 0x3e) = 1;\n  *(uint16_t *)(config_data + 0x40) = 1;\n  *(uint16_t *)(config_data + 2) = 0;\n  *(uint8_t **)(config_data + 0x20) = module_data + 0x28;\n  *(uint16_t *)(config_data + 0x32) = 0;\n  config_data[0x3d] = 5;\n  *(uint8_t **)(config_data + 0x44) = module_data2 + 2;\n  initialize_module2(module_data_ptr2, 0x4b00);\n  *(uint16_t *)(module_data_ptr2 + 0x56) = 2000;\n  uint32_t uVar = get_module_data();\n  *(uint32_t *)config_data_ptr3 = uVar;\n  int iVar = get_module_data();\n  *(int *)config_data_ptr4 = iVar + 1000;\n  iVar = get_module_data();\n  *(int *)config_data_ptr5 = iVar + 1000;\n  iVar = get_module_data();\n  *(int *)config_data_ptr6 = iVar + 1000;\n  iVar = get_module_data();\n  *(int *)config_data_ptr7 = iVar + 1000;\n  *config_data_ptr8 = 0;\n  if (*(int *)config_data_ptr1 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_address",
                "param_2": "input_length",
                "param_3": "input_data",
                "cVar1": "error_code",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "short_value",
                "uVar5": "input_length_uint",
                "puVar6": "input_data_pointer",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_short_value"
            },
            "code": "int validate_input_000802da(int input_address, unsigned short input_length, unsigned short *input_data)\n{\n    char error_code;\n    byte byte_value;\n    undefined undefined_value;\n    unsigned short short_value;\n    uint input_length_uint;\n    unsigned short *input_data_pointer;\n    char local_char_value;\n    undefined local_undefined_value;\n    unsigned short local_short_value;\n    input_length_uint = (uint)input_length;\n    if (*(char *)(input_address + 4) != '\\0') {\n        error_code = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(input_address + 7) != '\\0') {\n        error_code = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char_value - 1U)) {\n        error_code = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(input_address + 9) = local_char_value;\n    *(undefined *)(input_address + 10) = local_undefined_value;\n    *(unsigned short **)(input_address + 0x4c) = input_data;\n    *(char *)(input_address + 0xb) = (char)((uint)local_short_value >> 8);\n    *(char *)(input_address + 0xc) = (char)local_short_value;\n    error_code = (char)input_length;\n    undefined_value = (undefined)(input_length_uint >> 8);\n    switch(local_undefined_value) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            break;\n        case 5:\n            short_value = *input_data_pointer;\n            if (short_value != 0) {\n                short_value = 1;\n            }\n            *(char *)(input_address + 0xd) = -(char)short_value;\n            input_length_uint = 0;\n            break;\n        case 6:\n            *(char *)(input_address + 0xd) = (char)((uint)*input_data_pointer >> 8);\n            input_length_uint = (uint)*input_data_pointer;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_value = (byte)(input_length >> 3) & 0xfe;\n            if ((input_length & 0xf) != 0) {\n                byte_value = byte_value + 1;\n            }\n            *(char *)(input_address + 0xe) = error_code;\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            *(byte *)(input_address + 0xf) = byte_value;\n            undefined_value = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            *(char *)(input_address + 0xe) = error_code;\n            input_data_pointer = input_data_pointer + -1;\n            *(char *)(input_address + 0xf) = error_code * '\\x02';\n            *(undefined *)(input_address + 0x49) = 7;\n            input_data_pointer = input_data_pointer + input_length_uint;\n            while (input_data_pointer != input_data_pointer) {\n                byte_value = *(byte *)(input_address + 0x49);\n                *(char *)(input_address + (uint)byte_value + 9) = (char)((uint)input_data_pointer[1] >> 8);\n                input_length_uint = byte_value + 1 & 0xff;\n                *(char *)(input_address + 0x49) = (char)input_length_uint;\n                input_data_pointer = input_data_pointer + 1;\n                *(char *)(input_length_uint + input_address + 9) = (char)*input_data_pointer;\n                *(byte *)(input_address + 0x49) = byte_value + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(input_address + 0xe) = (char)input_length_uint;\n    undefined_value = 6;\nLAB_0008034a:\n    *(undefined *)(input_address + 0x49) = undefined_value;\n    FUN_00080258(input_address);\n    *(undefined *)(input_address + 7) = 1;\n    error_code = '\\0';\nLAB_000803cc:\n    return (int)error_code;\n}\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_index_00080f9c",
                "*param_1": "*index_array",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "temp_array",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "int calculate_index_00080f9c(uint *index_array, uint input_value, int divisor, int multiplier) {\n  uint temp_array[16];\n  for (int i = 0; i < 16; i++) {\n    temp_array[i] = *(uint *)(PTR_DAT_0008102c + i * 4);\n  }\n  index_array[0] = 1;\n  index_array[1] = 0;\n  index_array[0x48] = 0x202;\n  index_array[0x41] = 0;\n  index_array[0x45] = 0;\n  uint quotient = input_value / (uint)(divisor * 2);\n  if (input_value == divisor * 2 * quotient) {\n    quotient--;\n  }\n  uint i = 0;\n  while (i != 0x10) {\n    if ((uint)(multiplier * (int)(((ulonglong)input_value / (ulonglong)((quotient + 1) * 2)) / (ulonglong)PTR_DAT_00081030)) <= temp_array[i]) {\n      index_array[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | index_array[1];\n      return 0;\n    }\n    i++;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "calculate_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "check_and_update_00081210",
                "param_1": "index",
                "param_2": "mode",
                "puVar1": "data_ptr1",
                "puVar2": "data_ptr2",
                "iVar3": "result",
                "uVar4": "bit_mask",
                "uVar5": "temp_result",
                "uVar6": "temp_index",
                "bVar7": "value",
                "bVar8": "temp_value",
                "iVar9": "temp_int1",
                "iVar10": "temp_int2"
            },
            "code": "int check_and_update_00081210(int index, int mode) {\n    undefined *data_ptr1;\n    undefined *data_ptr2;\n    int result;\n    uint32_t bit_mask;\n    byte value;\n    int temp_result;\n    int temp_index;\n    data_ptr2 = PTR_DAT_00081310;\n    data_ptr1 = PTR_DAT_0008130c;\n    result = index;\n    if (PTR_DAT_0008130c[index * 0x1c + 0xc] != 0) {\n        if ((PTR_DAT_00081310[index] & 0xf) == 4) {\n            result = FUN_0008105c(DAT_00081314,PTR_DAT_0008130c[index * 0x1c + 0x19]);\n        }\n        value = data_ptr2[index];\n        if ((value & 0xf) < 3 && value != 0) {\n            if ((value & 0xf) == 2) {\n                if (mode == 0) {\n                    return result;\n                }\n            }\n            else if ((value & 0xf) == 1) {\n                if (mode == 2) {\n                    return result;\n                }\n            }\n            else if ((value & 0xf) == 3) {\n                if (mode == 1) {\n                    return result;\n                }\n                goto LAB_0008126c;\n            }\n        }\n        if (mode != 1) {\n        LAB_0008126c:\n            if (mode == 0) {\n                temp_index = index * 0x1c;\n                FUN_00080e18(*(undefined4 *)(data_ptr1 + temp_index + 8));\n                temp_result = FUN_00080da0(*(undefined4 *)(data_ptr1 + temp_index),3,*(undefined4 *)(data_ptr1 + temp_index + 4),0);\n                value = data_ptr2[index] & 0xf0 | 2;\n            }\n            else {\n                if (mode != 2) {\n                    return result;\n                }\n                temp_index = index * 0x1c;\n                FUN_00080e18(*(undefined4 *)(data_ptr1 + temp_index + 8));\n                temp_result = FUN_00080da0(*(undefined4 *)(data_ptr1 + temp_index),3,*(undefined4 *)(data_ptr1 + temp_index + 4),1);\n                value = data_ptr2[index] & 0xf0 | 1;\n            }\n            data_ptr2[index] = value;\n            return temp_result;\n        }\n        temp_index = index * 0x1c;\n        temp_result = *(int *)(data_ptr1 + temp_index);\n        if ((value >> 4) == 0) {\n            bit_mask = 4;\n        }\n        else {\n            bit_mask = 5;\n        }\n        temp_result = FUN_00080da0(temp_result, bit_mask, *(undefined4 *)(data_ptr1 + temp_index + 4), *(undefined4 *)(data_ptr1 + temp_index + 0x10));\n        data_ptr2[index] = data_ptr2[index] & 0xf0 | 3;\n        if (*(int *)(temp_result + 0x18) == -1) {\n            bit_mask = *(uint32_t *)(data_ptr1 + temp_index + 8);\n            if (bit_mask > 0x2c) {\n                return 1;\n            }\n            if (bit_mask < 0x20) {\n                bit_mask = 1 << (bit_mask & 0xff);\n                if ((*(uint32_t *)(DAT_00080e98 + 0x18) & bit_mask) == bit_mask) {\n                    *(uint32_t *)(DAT_00080e98 + 0x14) = bit_mask;\n                }\n            }\n            else {\n                bit_mask = 1 << (bit_mask - 0x20 & 0xff);\n                if ((*(uint32_t *)(DAT_00080e98 + 0x108) & bit_mask) == bit_mask) {\n                    *(uint32_t *)(DAT_00080e98 + 0x104) = bit_mask;\n                }\n            }\n            return 0;\n        }\n    }\n    return result;\n}\n",
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_and_update_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "insert_value_at_index_00081454",
                "param_1": "array_address",
                "param_2": "value",
                "iVar1": "array_index",
                "uVar2": "insertion_index",
                "DAT_000814a4": "DAT_constant",
                "array_capacity": "array_capacity",
                "array_count": "array_count",
                "array_length": "array_length"
            },
            "code": "int insert_value_at_index_00081454(int array_address, int value) {\n  int array_index = *(int *)(array_address + 0x14);\n  int array_length = *(int *)(*(int *)(array_address + 0x18) + 0x14);\n  int array_capacity = *(int *)(array_index + 0x80);\n  int array_count = *(int *)(array_index + 0x84);\n  if (array_length << 0x1e >= 0 || *(int *)(array_index + 0x84) != *(int *)(array_index + 0x80)) {\n    uint insertion_index = (DAT_000814a4 & array_capacity + 1U) & 0x7fffffff;\n    while (*(uint *)(array_index + 0x84) == insertion_index) {\n      insertion_index = (insertion_index - 1 | 0xffffff80) + 1;\n    }\n    *(char *)(array_index + array_capacity) = (char)value;\n    *(uint *)(array_index + 0x80) = insertion_index;\n    *(int *)(*(int *)(array_address + 0x18) + 8) = 2;\n  } else {\n    *(int *)(*(int *)(array_address + 0x18) + 0x1c) = value;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "insert_value_at_index_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "findValueFromFunction_00084728",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "dataPtr",
                "iVar2": "functionResult"
            },
            "code": "void findValueFromFunction_00084728(int* result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined* dataPtr = PTR_DAT_0008474c;\n  *(undefined4*)dataPtr = 0;\n  int functionResult = calculateValueFromFunction(arg2, arg3, arg4);\n  if (functionResult == -1 && *(int*)dataPtr != 0) {\n    *result = *(int*)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "findValueFromFunction_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_input_00083c40",
                "param_1": "input_handle",
                "param_2": "input_length",
                "param_3": "input_buffer",
                "uVar1": "current_char",
                "iVar2": "result",
                "uVar3": "next_char",
                "pbVar4": "buffer_ptr",
                "uVar5": "index",
                "local_1c": "current_byte",
                "abStack_1b": "lookahead"
            },
            "code": "uint process_input_00083c40(undefined4 input_handle, uint input_length, byte **input_buffer)\n{\n  uint current_char;\n  int result;\n  uint next_char;\n  byte *buffer_ptr;\n  uint index;\n  byte current_byte;\n  byte lookahead[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x12)) {\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x2000;\n    input_buffer[0x19] = (byte *)((uint)input_buffer[0x19] | 0x2000);\n  }\n  current_char = get_next_char();\n  if ((current_char == 1) && (input_length - 1 < 0xff)) {\n    next_char = input_length & 0xff;\n    current_byte = (byte)next_char;\n  }\n  else {\n    current_char = get_next_char(input_handle,&current_byte,input_length,input_buffer + 0x17);\n    if (current_char == 0xffffffff) {\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (current_char == 0) {\n      return input_length;\n    }\n    next_char = (uint)current_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = input_buffer[2] + -1;\n    input_buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)input_buffer[6] <= (int)buffer_ptr) {\n        **input_buffer = (byte)next_char;\n        buffer_ptr = *input_buffer;\n        next_char = (uint)*buffer_ptr;\n        if (next_char != 10) goto LAB_00083c90;\n      }\n      result = process_char(input_handle,next_char,input_buffer);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **input_buffer = (byte)next_char;\n      buffer_ptr = *input_buffer;\nLAB_00083c90:\n      *input_buffer = buffer_ptr + 1;\n    }\n    if (current_char <= index + 1) {\n      return input_length;\n    }\n    next_char = (uint)lookahead[index];\n    index = index + 1;\n  } while( true );\n}",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_input_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_FUN_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_FUN_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_FUN_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_FUN_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = FUN_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_FUN_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = FUN_0008189c(*(undefined4 *)puVar2);\n  iVar15 = FUN_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = FUN_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = FUN_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008043e",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081c94",
                "FUN_0008189c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr2",
                "*(int *)(param_1 + 0x10)": "ptr3",
                "difference": "difference"
            },
            "code": "int calculate_difference_000813e4(int input_param) {\\\n    int* ptr1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\\\n    int* ptr2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\\\n    int difference = (*ptr1 - *ptr2) & 0x7f;\\\n    return difference;\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data_value"
            },
            "code": "int get_data_00084290() {\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "findValueFromParam_000846b4",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptrData",
                "iVar2": "functionResult"
            },
            "code": "void findValueFromParam_000846b4(int *result, undefined4 param1, undefined4 param2, undefined4 param3) {\n  undefined *ptrData = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  int functionResult = performOperation(param1, param2, param2, 0, param3);\n  if ((functionResult == -1) && (*(int *)ptrData != 0)) {\n    *result = *(int *)ptrData;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "findValueFromParam_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "FUN_00082504": "set_buffer",
                "0x80": "BUFFER_SIZE"
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n  set_buffer(buffer_address, 0, BUFFER_SIZE);\n  *(int *)(buffer_address + BUFFER_SIZE) = 0;\n  *(int *)(buffer_address + BUFFER_SIZE + 4) = 0;\n  return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "mem_block_id",
                "param_2": "size",
                "iVar1": "prev_block_id",
                "uVar2": "block_size",
                "iVar3": "next_block_id",
                "uVar4": "new_block_size",
                "iVar5": "i",
                "uVar7": "block_size_2",
                "iVar8": "DAT_00083f24"
            },
            "code": "void allocate_memory_block_00083d9c(int mem_block_id, int size) {\n  int prev_block_id, next_block_id, block_size, new_block_size, i;\n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  prev_block_id = DAT_00083f24;\n  block_size = *(int *)(size + -4);\n  next_block_id = size + -8;\n  new_block_size = block_size & 0xfffffffe;\n  next_block_id += new_block_size;\n  block_size = *(int *)(next_block_id + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == next_block_id) {\n    block_size += new_block_size;\n    if (-1 < (int)(block_size << 0x1f)) {\n      next_block_id -= *(int *)(size + -8);\n      prev_block_id = *(int *)(next_block_id + 0xc);\n      *(int *)(prev_block_id + 8) = *(int *)(next_block_id + 8);\n      *(int *)(*(int *)(next_block_id + 8) + 0xc) = prev_block_id;\n    }\n    i = *DAT_00083f2c;\n    *(int *)(next_block_id + 4) = block_size | 1;\n    *(int *)(DAT_00083f24 + 8) = next_block_id;\n    if (i <= block_size) {\n      FUN_00083d00(mem_block_id, *(int *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    block_size = block_size & 1;\n    *(int *)(next_block_id + 4) = *(int *)(next_block_id + 4) & 0xfffffffc;\n    if (block_size == 0) {\n      next_block_id -= *(int *)(size + -8);\n      prev_block_id = *(int *)(next_block_id + 8);\n      new_block_size += *(int *)(size + -8);\n      if (prev_block_id == DAT_00083f28) {\n        block_size = 1;\n      }\n      else {\n        i = *(int *)(next_block_id + 0xc);\n        *(int *)(prev_block_id + 0xc) = i;\n        *(int *)(i + 8) = prev_block_id;\n      }\n    }\n    else {\n      block_size = 0;\n    }\n    if (-1 < *(int *)(next_block_id + block_size + 4) << 0x1f) {\n      new_block_size += block_size;\n      prev_block_id = *(int *)(next_block_id + 8);\n      if ((block_size == 0) && (prev_block_id == DAT_00083f28)) {\n        *(int *)(DAT_00083f24 + 0x14) = next_block_id;\n        *(int *)(DAT_00083f24 + 0x10) = next_block_id;\n        *(int *)(next_block_id + 0xc) = prev_block_id;\n        *(int *)(next_block_id + 8) = prev_block_id;\n        *(int *)(next_block_id + 4) = new_block_size | 1;\n        *(int *)(next_block_id + new_block_size) = new_block_size;\n        goto LAB_00083e30;\n      }\n      next_block_id = *(int *)(next_block_id + 0xc);\n      *(int *)(prev_block_id + 0xc) = next_block_id;\n      *(int *)(next_block_id + 8) = prev_block_id;\n    }\n    *(int *)(next_block_id + 4) = new_block_size | 1;\n    *(int *)(next_block_id + new_block_size) = new_block_size;\n    if (block_size == 0) {\n      if (new_block_size < 0x200) {\n        i = *(int *)(DAT_00083f24 + 4);\n        prev_block_id = DAT_00083f24 + (new_block_size & 0xfffffff8);\n        next_block_id = *(int *)(prev_block_id + 8);\n        *(int *)(next_block_id + 0xc) = prev_block_id;\n        *(int *)(prev_block_id + 8) = next_block_id;\n        *(int *)(DAT_00083f24 + 4) = i | 1 << ((new_block_size >> 3) >> 2 & 0xff);\n        *(int *)(prev_block_id + 8) = DAT_00083f24;\n        *(int *)(next_block_id + 0xc) = DAT_00083f24;\n        do_nothing_2();\n        return;\n      }\n      i = new_block_size >> 9;\n      if (i < 5) {\n        next_block_id = (new_block_size >> 6) + 0x38;\n        prev_block_id = next_block_id * 2;\n      }\n      else if (i < 0x15) {\n        next_block_id = i + 0x5b;\n        prev_block_id = next_block_id * 2;\n      }\n      else if (i < 0x55) {\n        next_block_id = (new_block_size >> 0xc) + 0x6e;\n        prev_block_id = next_block_id * 2;\n      }\n      else if (i < 0x155) {\n        next_block_id = (new_block_size >> 0xf) + 0x77;\n        prev_block_id = next_block_id * 2;\n      }\n      else if (i < 0x555) {\n        next_block_id = (new_block_size >> 0x12) + 0x7c;\n        prev_block_id = next_block_id * 2;\n      }\n      else {\n        prev_block_id = 0xfc;\n        next_block_id = 0x7e;\n      }\n      prev_block_id = DAT_00083f24 + prev_block_id * 4;\n      next_block_id = *(int *)(prev_block_id + 8);\n      if (next_block_id == prev_block_id) {\n        *(int *)(DAT_00083f24 + 4) = *(int *)(DAT_00083f24 + 4) | 1 << (next_block_id >> 2 & 0xff);\n        prev_block_id = next_block_id;\n      }\n      else {\n        do {\n          if ((*(int *)(next_block_id + 4) & 0xfffffffc) <= new_block_size) break;\n          next_block_id = *(int *)(next_block_id + 8);\n        } while (prev_block_id != next_block_id);\n        prev_block_id = *(int *)(next_block_id + 0xc);\n      }\n      *(int *)(next_block_id + 0xc) = prev_block_id;\n      *(int *)(next_block_id + 8) = next_block_id;\n      *(int *)(prev_block_id + 8) = next_block_id;\n      *(int *)(next_block_id + 0xc) = next_block_id;\n    }\n  }\nLAB_00083e30:\n  do_nothing_2();\n  return;\n}\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_zero",
                "bVar1": "is_sum_negative",
                "param_1 ^ param_2": "input1 ^ input2",
                "param_2 * -2": "input2 * -2",
                "(int)param_2 >> 0x1f": "(int)input2 >> 0x1f"
            },
            "code": "uint calculate_result_00081bf4(uint input1, uint input2)\n{\n  bool is_negative1;\n  uint doubled_input1;\n  uint doubled_input2;\n  uint combined_inputs;\n  bool is_combined_zero;\n  bool is_inputs_equal;\n  bool is_sum_negative;\n  uint result;\n  \n  doubled_input1 = input1 * 2;\n  doubled_input2 = input2 * 2;\n  is_negative1 = ((int)doubled_input1 >> 0x18 == -1);\n  if (is_negative1 || (int)doubled_input2 >> 0x18 == -1) {\n    if (is_negative1 && ((input1 & 0x7fffff) != 0)) {\n      result = 1;\n    }\n    else {\n      if ((int)doubled_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)) {\n        result = 1;\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    combined_inputs = doubled_input1 | input2 & 0x7fffffff;\n    is_combined_zero = (combined_inputs == 0);\n    if (!is_combined_zero) {\n      is_inputs_equal = (input1 ^ input2) == 0;\n    }\n    else {\n      is_inputs_equal = true;\n    }\n    is_sum_negative = (-1 < (int)(input1 ^ input2));\n    if (is_sum_negative && (doubled_input2 <= doubled_input1) && !is_combined_zero) {\n      result = (int)input2 >> 0x1f;\n    }\n    else {\n      if (!is_sum_negative || (doubled_input2 > doubled_input1)) {\n        result = ~((int)input2 >> 0x1f);\n      }\n      else {\n        result = input1 | 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_from_pointer_array_00081d7c",
                "puVar1": "start_pointer",
                "puVar2": "end_pointer",
                "iVar3": "i",
                "ppcVar4": "function_array",
                "iVar5": "num_functions",
                "PTR_DAT_00081dbc": "PTR_DAT_end_pointer",
                "PTR_DAT_00081dc0": "PTR_DAT_start_pointer",
                "PTR_DAT_00081dc8": "PTR_DAT_end_pointer2",
                "PTR_LAB_00081dc4": "PTR_LAB_start_pointer",
                "do_nothing_00085858": "do_nothing"
            },
            "code": "void execute_functions_from_pointer_array_00081d7c(void)\n{\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_array = (code **)(PTR_DAT_00081dc0 + -4);\n    for (int i = 0; i < num_functions; i++) {\n      function_array++;\n      (**function_array)();\n    }\n  }\n  undefined *end_pointer = PTR_DAT_00081dc8;\n  undefined *start_pointer = PTR_LAB_00081dc4;\n  do_nothing_00085858();\n  int num_functions2 = (int)start_pointer - (int)end_pointer >> 2;\n  if (num_functions2 != 0) {\n    code **function_array2 = (code **)(end_pointer + -4);\n    for (int i = 0; i < num_functions2; i++) {\n      function_array2++;\n      (**function_array2)();\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_from_pointer_array_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_integers_to_long_00081c5c",
                "param_1": "first_integer",
                "param_2": "second_integer",
                "FUN_00081bf4": "call_function_to_initialize"
            },
            "code": "undefined8 concatenate_integers_to_long_00081c5c(unsigned int first_integer, unsigned int second_integer) {\n  call_function_to_initialize();\n  return CONCAT44(second_integer, first_integer);\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "concatenate_integers_to_long_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n    int count = *DAT_000813a0;\n    if (count != -1) {\n        count--;\n        *DAT_000813a0 = count;\n        if (count == 0) {\n            (*DAT_000813a4)();\n        }\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_uint_buffer_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_source",
                "puVar4": "aligned_source",
                "uVar5": "current_value",
                "uVar6": "previous_value",
                "puVar7": "next_destination",
                "bVar8": "is_short_zero"
            },
            "code": "void copy_uint_buffer_00082994(uint* destination, uint* source)\n{\n    char current_char;\n    ushort current_short;\n    uint* current_source = source;\n    uint* current_destination = destination;\n    bool is_short_zero;\n\n    if ((((uint)source ^ (uint)destination) & 3) != 0)\n    {\n        do\n        {\n            current_char = *(char*)current_source;\n            *(char*)current_destination = current_char;\n            current_source = (uint*)((int)current_source + 1);\n            current_destination = (uint*)((int)current_destination + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)source & 3) != 0)\n    {\n        uint* aligned_source = source;\n        if (((uint)source & 1) != 0)\n        {\n            aligned_source = (uint*)((int)source + 1);\n            current_char = *(char*)source;\n            *(char*)destination = current_char;\n            current_destination = (uint*)((int)current_destination + 1);\n            if (current_char == '\\0')\n            {\n                return;\n            }\n        }\n        current_source = aligned_source;\n        if (((uint)aligned_source & 2) != 0)\n        {\n            aligned_source = (uint*)((int)aligned_source + 2);\n            current_short = *(ushort*)current_source;\n            is_short_zero = (current_short & 0xff) == 0;\n            if (is_short_zero)\n            {\n                *(char*)current_destination = (char)current_short;\n            }\n            else\n            {\n                *(ushort*)current_destination = current_short;\n                is_short_zero = (current_short & 0xff00) == 0;\n                current_destination = (uint*)((int)current_destination + 2);\n            }\n            if (is_short_zero)\n            {\n                return;\n            }\n        }\n    }\n\n    uint current_value = *current_source;\n    uint* next_source = current_source + 1;\n    uint* next_destination = current_destination;\n    if (((uint)current_source & 4) != 0)\n    {\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0)\n        {\n            goto LAB_000829f8;\n        }\n        next_destination = current_destination + 1;\n        *current_destination = current_value;\n        next_source = current_source + 2;\n        current_value = *(current_source + 1);\n    }\n\n    while (true)\n    {\n        uint* previous_source = next_source - 1;\n        uint previous_value = current_value;\n        if ((previous_value + 0xfefefeff & ~previous_value & 0x80808080) != 0)\n        {\n            break;\n        }\n        next_destination = next_destination + 1;\n        *next_destination = previous_value;\n        current_value = *next_source;\n        if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0)\n        {\n            break;\n        }\n        next_source = next_source + 2;\n        next_destination = next_destination + 1;\n        *next_destination = previous_source[1];\n    }\n\nLAB_000829f8:\n    do\n    {\n        *(char*)next_destination = (char)current_value;\n        uint current_byte = current_value & 0xff;\n        current_value = current_value >> 8 | current_value << 0x18;\n        next_destination = (uint*)((int)next_destination + 1);\n    } while (current_byte != 0);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_uint_buffer_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "decodeData_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "startPtr",
                "puVar2": "endPtr",
                "puVar3": "ptr1Data",
                "puVar4": "ptr2Data",
                "puVar5": "ptr3Data",
                "puVar6": "ptr4Data",
                "PTR_DAT_00080ca0": "dataStartPtr",
                "PTR_DAT_00080ca4": "dataEndPtr",
                "PTR_DAT_00080cac": "dataBlockStart",
                "PTR_DAT_00080cb0": "ptr2Data",
                "PTR_DAT_00080cb4": "ptr1Data",
                "PTR_DAT_00080cb8": "ptr4Data",
                "PTR_DAT_00080cbc": "ptr3Data",
                "PTR_DAT_00080cc4": "ptr5Data",
                "PTR_DAT_00080ccc": "ptr6Data",
                "PTR_DAT_00080cd4": "ptr7Data",
                "PTR_DAT_00080cd8": "ptr3Data",
                "PTR_DAT_00080cdc": "ptr4Data",
                "DAT_00080ca8": "dataBlockStart",
                "DAT_00080cc0": "dataBlock2Start",
                "DAT_00080cc8": "dataBlock3Start",
                "DAT_00080cd0": "dataBlock4Start"
            },
            "code": "void decodeData_00080c0c(undefined4 param1, undefined4 param2, undefined4 param3)\n{\n  undefined *startPtr;\n  undefined *endPtr;\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined *ptr3;\n  undefined *ptr4;\n  \n  startPtr = PTR_DAT_00080ca0;\n  endPtr = PTR_DAT_00080ca4;\n  decode(startPtr);\n  decode(endPtr);\n  ptr3 = PTR_DAT_00080cbc;\n  ptr1 = PTR_DAT_00080cb4;\n  decodeData_00080c0cBlock(PTR_DAT_00080cb0, PTR_DAT_00080cac, 8, 8, startPtr, endPtr, param3);\n  ptr2 = PTR_DAT_00080cb0;\n  decode(ptr3);\n  ptr4 = PTR_DAT_00080cb8;\n  decode(ptr1);\n  decode(ptr2);\n  decode(ptr4);\n  decodeData_00080c0cBlock(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, ptr3, ptr4);\n  decodeData_00080c0cBlock(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, ptr1, ptr2);\n  decodeData_00080c0cBlock(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, ptr2, ptr4);\n  return;\n}",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "decodeData_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_flags_00080d2e",
                "param_1": "flags_address",
                "param_2": "operation",
                "param_3": "new_flags",
                "uVar1": "cleared_flags",
                "uVar2": "set_flags"
            },
            "code": "void update_flags_00080d2e(int flags_address, uint32_t operation, uint32_t new_flags) {\n  *(uint32_t *)(flags_address + 0x44) = new_flags;\n  switch(operation) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      uint32_t cleared_flags = *(uint32_t *)(flags_address + 0x70) & *(uint32_t *)(flags_address + 0x70) & ~new_flags;\n      *(uint32_t *)(flags_address + 0x70) = cleared_flags;\n      break;\n    case 2:\n      uint32_t set_flags = *(uint32_t *)(flags_address + 0x70) | new_flags;\n      *(uint32_t *)(flags_address + 0x70) = set_flags;\n      break;\n    default:\n      goto switchD_00080d34_caseD_6;\n  }\n  *(uint32_t *)(flags_address + 4) = new_flags;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_flags_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_length",
                "param_2": "input_value",
                "param_3": "input_buffer",
                "param_4": "buffer_length",
                "uVar1": "first_short",
                "uVar2": "first_int",
                "puVar3": "buffer_start",
                "iVar4": "difference",
                "FUN_00083b14": "process_input_helper",
                "FUN_00083808": "process_input_helper",
                "FUN_00083adc": "process_input_helper"
            },
            "code": "uint process_input_000844c4(int input_length, uint input_value, undefined4 *input_buffer, undefined4 buffer_length) {\n  ushort first_short = *(ushort *)(input_buffer + 3);\n  uint first_int = (uint)first_short;\n  input_buffer[2] = input_buffer[6];\n\n  if ((-1 < (int)(first_int << 0x1c)) || (input_buffer[4] == 0)) {\n    int result = process_input_000844c4_helper(input_length, input_buffer, first_short, first_int, buffer_length);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    first_short = *(ushort *)(input_buffer + 3);\n    first_int = (uint)first_short;\n  }\n\n  input_value = input_value & 0xff;\n\n  if ((int)(first_int << 0x12) < 0) {\n    undefined *buffer_start = (undefined *)*input_buffer;\n    int difference = (int)buffer_start - input_buffer[4];\n    if (difference < (int)input_buffer[5]) {\n      difference = difference + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    input_buffer[0x19] = input_buffer[0x19] & 0xffffdfff;\n    undefined *buffer_start = (undefined *)*input_buffer;\n    *(ushort *)(input_buffer + 3) = first_short | 0x2000;\n    int difference = (int)buffer_start - input_buffer[4];\n    if (difference < (int)input_buffer[5]) {\n      difference = difference + 1;\n      goto LAB_000844f8;\n    }\n  }\n\n  int result = process_input_000844c4_helper(input_length, input_buffer);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n\n  undefined *buffer_start = (undefined *)*input_buffer;\n  int difference = 1;\n  LAB_000844f8:\n  input_buffer[2] = input_buffer[2] + -1;\n  *input_buffer = buffer_start + 1;\n  *buffer_start = (char)input_value;\n\n  if (((input_buffer[5] == difference) || ((int)((uint)*(ushort *)(input_buffer + 3) << 0x1f) < 0 && (input_value == 10)))) {\n    int result = process_input_000844c4_helper(input_length, input_buffer);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n  }\n\n  return input_value;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_input_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_value_0008189c",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shifted_value",
                "iVar4": "shifted_value_mask",
                "uVar5": "shifted_value_signbit",
                "uVar3": "result"
            },
            "code": "uint calculate_value_0008189c(uint input_value)\n{\n  int leading_zeroes_count;\n  uint sign_bit;\n  uint shifted_value;\n  uint shifted_value_mask;\n  uint shifted_value_signbit;\n  uint result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shifted_value = input_value << (leading_zeroes_count - 8);\n  shifted_value_mask = 0 << (shifted_value & 0xff);\n  shifted_value_signbit = (uint)(shifted_value & 0x80000000);\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shifted_value_mask + (shifted_value >> (0x20 - (leading_zeroes_count - 8) & 0xff)) + (uint)(0x7fffffff < shifted_value_signbit);\n  if (shifted_value_signbit == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_value_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copyMemoryToPointer_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "puVar3": "remainingBytes",
                "uVar4": "i",
                "uVar5": "isLengthGreaterThan64Bytes",
                "bVar6": "isRemainingBytesGreaterThan16Bytes"
            },
            "code": "undefined4 *copyMemoryToPointer_0008234c(undefined4 *destination, undefined4 *source, uint length)\n{\n    undefined4 *dstPtr;\n    undefined4 *srcPtr;\n    uint remainingBytes;\n    uint i;\n    bool isLengthGreaterThan64Bytes;\n    bool isRemainingBytesGreaterThan16Bytes;\n    dstPtr = destination;\n    srcPtr = source;\n    if ((((uint)source | (uint)destination) & 3) != 0)\n    {\n        if (length < 8)\n        {\n            remainingBytes = length - 4;\n            if (3 < length)\n            {\n                do\n                {\n                    dstPtr = (undefined4 *)((int)dstPtr + 1);\n                    srcPtr = (undefined4 *)((int)srcPtr + 1);\n                    remainingBytes = remainingBytes - 1;\n                    *(undefined *)dstPtr = *(undefined *)srcPtr;\n                } while (remainingBytes != 0);\n                *(undefined *)(undefined4 *)((int)dstPtr + 1) =\n                     *(undefined *)(undefined4 *)((int)srcPtr + 1);\n                *(undefined *)((int)dstPtr + 2) = *(undefined *)((int)srcPtr + 2);\n                *(undefined *)((int)dstPtr + 3) = *(undefined *)((int)srcPtr + 3);\n                return destination;\n            }\n            goto LAB_000823d0;\n        }\n        if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0))\n        {\n            remainingBytes = 4 - ((uint)destination & 3);\n            length = length - remainingBytes;\n            dstPtr = destination;\n            srcPtr = source;\n            if (((uint)destination & 1) != 0)\n            {\n                srcPtr = (undefined4 *)((int)source + 1);\n                dstPtr = (undefined4 *)((int)destination + 1);\n                *(undefined *)destination = *(undefined *)source;\n            }\n            if ((remainingBytes & 2) != 0)\n            {\n                srcPtr = (undefined4 *)((int)srcPtr + 2);\n                dstPtr = (undefined4 *)((int)dstPtr + 2);\n                *(undefined2 *)dstPtr = *(undefined2 *)srcPtr;\n            }\n        }\n    }\n    isLengthGreaterThan64Bytes = false;\n    while (length > 63)\n    {\n        for (i = 0; i < 16; i++)\n        {\n            dstPtr[i] = srcPtr[i];\n        }\n        dstPtr = dstPtr + 16;\n        srcPtr = srcPtr + 16;\n        length = length - 64;\n        isLengthGreaterThan64Bytes = true;\n    }\n    if (isLengthGreaterThan64Bytes)\n    {\n        goto LAB_000823d0;\n    }\n    isRemainingBytesGreaterThan16Bytes = false;\n    remainingBytes = length - 16;\n    if (remainingBytes > 15)\n    {\n        for (i = 0; i < 4; i++)\n        {\n            dstPtr[i] = srcPtr[i];\n            dstPtr[i + 4] = srcPtr[i + 4];\n            dstPtr[i + 8] = srcPtr[i + 8];\n            dstPtr[i + 12] = srcPtr[i + 12];\n        }\n        dstPtr = dstPtr + 16;\n        srcPtr = srcPtr + 16;\n        remainingBytes = remainingBytes - 16;\n        isRemainingBytesGreaterThan16Bytes = true;\n    }\n    if (isRemainingBytesGreaterThan16Bytes)\n    {\n        goto LAB_000823d0;\n    }\n    if (remainingBytes > 3)\n    {\n        dstPtr[3] = srcPtr[3];\n        dstPtr = (undefined4 *)((int)dstPtr + 1);\n        srcPtr = (undefined4 *)((int)srcPtr + 1);\n        if (remainingBytes > 5)\n        {\n            dstPtr[1] = srcPtr[1];\n            dstPtr[2] = srcPtr[2];\n            dstPtr = dstPtr + 2;\n            srcPtr = srcPtr + 2;\n            if (remainingBytes > 7)\n            {\n                dstPtr[1] = srcPtr[1];\n                dstPtr[2] = srcPtr[2];\n                dstPtr[3] = srcPtr[3];\n                dstPtr = dstPtr + 2;\n                srcPtr = srcPtr + 2;\n                remainingBytes = remainingBytes - 8;\n                if (remainingBytes > 3)\n                {\n                    dstPtr[1] = srcPtr[1];\n                }\n            }\n        }\n    }\nLAB_000823d0:\n    if (remainingBytes + 4 != 0)\n    {\n        dstPtr = dstPtr;\n        srcPtr = srcPtr;\n        if ((remainingBytes & 1) != 0)\n        {\n            srcPtr = (undefined4 *)((int)srcPtr + 1);\n            dstPtr = (undefined4 *)((int)dstPtr + 1);\n            *(undefined *)dstPtr = *(undefined *)srcPtr;\n        }\n        if ((remainingBytes + 4 & 2) != 0)\n        {\n            *(undefined2 *)dstPtr = *(undefined2 *)srcPtr;\n        }\n    }\n    return destination;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copyMemoryToPointer_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_device_00080a68",
                "puVar1": "device_ptr",
                "PTR_DAT_00080a94": "device_config_ptr",
                "PTR_s__00080a98": "device_settings_ptr",
                "FUN_00081682": "configure_device",
                "FUN_00081d5c": "set_device_params",
                "DAT_00080aa0": "device_param1",
                "DAT_00080a9c": "device_param2",
                "PTR_DAT_00080aa4": "device_status_ptr"
            },
            "code": "void initialize_device_00080a68(void)\n{\n  undefined *device_ptr;\n  device_ptr = PTR_DAT_00080a94;\n  configure_device(PTR_DAT_00080a94, PTR_s__00080a98);\n  set_device_params(device_ptr, DAT_00080aa0, DAT_00080a9c);\n  device_ptr = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  device_ptr[5] = 0;\n  device_ptr[6] = 6;\n  *(undefined2 *)(device_ptr + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "check_and_update_param_0008165c",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "old_param",
                "iVar1": "check_result"
            },
            "code": "undefined4 *check_and_update_param_0008165c(undefined4 *param_array, undefined4 new_param, undefined4 old_param)\n{\n    int check_result = FUN_0008163a(param_array, old_param);\n    if (check_result == 0) {\n        FUN_0008160c(param_array);\n    }\n    else {\n        param_array[2] = old_param;\n        FUN_00082994(*param_array, new_param);\n    }\n    return param_array;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008163a",
                "FUN_0008160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "check_and_update_param_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combineValues_000815f8",
                "param_1": "value1",
                "param_2": "value2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint16_t combineValues_000815f8(int value1, uint8_t value2) { \n  uint16_t combinedValue = value2 | value1 << 8; \n  return combinedValue; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combineValues_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer_start",
                "param_2": "target_char",
                "param_3": "buffer_end",
                "puVar1": "current_word",
                "uVar2": "word_xor_target",
                "pcVar3": "current_byte",
                "pcVar4": "last_byte",
                "bVar5": "found_target"
            },
            "code": "uint * find_char_in_buffer_00084384(uint *buffer_start, char target_char, uint *buffer_end)\n{\n  uint *current_word;\n  uint word_xor_target;\n  char *current_byte;\n  char *last_byte;\n  bool found_target;\n  \n  if (((uint)buffer_start & 3) == 0) {\n    current_word = buffer_start;\n    if ((uint *)0x3 < buffer_end) {\n      do {\n        word_xor_target = *buffer_start ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_word = buffer_start;\n        if ((word_xor_target + 0xfefefeff & ~word_xor_target & 0x80808080) != 0) break;\n        buffer_end = buffer_end + -1;\n        current_word = buffer_start + 1;\n        buffer_start = buffer_start + 1;\n      } while ((uint *)0x3 < buffer_end);\n    }\n    buffer_start = buffer_end;\n    last_byte = (char *)((int)buffer_start + -1);\n    if ((buffer_start != (uint *)0x0) && (*buffer_start != target_char)) {\n      current_byte = (char *)0x0;\n      do {\n        buffer_start = (uint *)((int)buffer_start + 1);\n        found_target = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (found_target) goto LAB_000843dc;\n      } while (*(char *)buffer_start != target_char);\n    }\n  }\n  else if (buffer_end == (uint *)0x0) {\nLAB_000843dc:\n    buffer_start = (uint *)0x0;\n  }\n  else if (*(char *)buffer_start != target_char) {\n    current_word = (uint *)((int)buffer_start + 1);\n    buffer_end = (uint *)((int)buffer_end + -1);\n    do {\n      buffer_start = current_word;\n      if (((uint)buffer_start & 3) == 0) goto LAB_000843b4;\n      if (buffer_end == (uint *)0x0) goto LAB_000843dc;\n      current_word = (uint *)((int)buffer_start + 1);\n      buffer_end = (uint *)((int)buffer_end + -1);\n    } while (*(char *)buffer_start != target_char);\n  }\n  return buffer_start;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "flag_address",
                "param_2": "new_flag_value",
                "param_3": "flag_mask",
                "PTR_": "flag_ptr",
                "DAT_": "data_"
            },
            "code": "void update_flags_00081034(int flag_address, uint32_t new_flag_value, uint32_t flag_mask){\n\tuint32_t* PTR_ = (uint32_t*)(flag_address + 4);\n\t*PTR_ = new_flag_value | *PTR_ | ((flag_mask & 1) << 7);\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_flags_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_to_buffer_00083974",
                "param_1": "buffer_item",
                "puVar1": "buffer_pointer",
                "puVar2": "next_buffer_item_pointer",
                "iVar3": "buffer_size",
                "iVar4": "buffer_start_address"
            },
            "code": "undefined4 add_to_buffer_00083974(undefined4 buffer_item)\n{\n  undefined *buffer_pointer;\n  undefined4 *next_buffer_item_pointer;\n  int buffer_size;\n  int buffer_start_address;\n  buffer_pointer = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return buffer_item;\n  }\n  buffer_start_address = *(int *)PTR_DAT_0008396c;\n  next_buffer_item_pointer = *(undefined4 **)(buffer_start_address + 0x148);\n  if (next_buffer_item_pointer == (undefined4 *)0x0) {\n    next_buffer_item_pointer = (undefined4 *)(buffer_start_address + 0x14c);\n    *(undefined4 **)(buffer_start_address + 0x148) = next_buffer_item_pointer;\n  }\n  buffer_size = next_buffer_item_pointer[1];\n  if (0x1f < buffer_size) {\n    if ((DAT_00083970 == 0) || (next_buffer_item_pointer = (undefined4 *)FUN_00081df4(400), next_buffer_item_pointer == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *next_buffer_item_pointer = *(undefined4 *)(buffer_start_address + 0x148);\n    next_buffer_item_pointer[1] = 0;\n    buffer_size = 0;\n    *(undefined4 **)(buffer_start_address + 0x148) = next_buffer_item_pointer;\n    next_buffer_item_pointer[0x62] = 0;\n    next_buffer_item_pointer[99] = 0;\n  }\n  next_buffer_item_pointer[1] = buffer_size + 1;\n  next_buffer_item_pointer[buffer_size + 2] = buffer_pointer;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "findValueFromParam_00084700",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void findValueFromParam_00084700(int *result, undefined4 param2, undefined4 param3, undefined4 param4) {\n  undefined *ptr = PTR_DAT_00084724;\n  *(undefined4 *)ptr = 0;\n  int status = FUN_000811c2(param2, param3, param4);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "findValueFromParam_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714",
                "undefined4": "int",
                "PTR_DAT_0008171c": "pointer_to_data",
                "value": "value"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n  int* PTR_DAT_0008171c = (int*) PTR_DAT_0008171c;\n  int value = *PTR_DAT_0008171c;\n  return value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "is_CY_zero_or_ZR_00081ca8",
                "in_ZR": "zero",
                "in_CY": "CY",
                "FUN_00081c54": "call_some_function"
            },
            "code": "bool is_CY_zero_or_ZR_00081ca8(void)\n{\n  undefined zero = 0;\n  undefined CY = 0;\n\n  call_some_function();\n  return !(bool)CY || (bool)zero;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_zero_or_ZR_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "*puVar1": "data_ptr_1",
                "*puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "data_value_1",
                "iVar5": "data_index_1"
            },
            "code": "void update_data_00081318(int index, int value, undefined4 param_3)\n{\n  undefined *data_ptr_2;\n  undefined *data_ptr_1;\n  int data_index_1;\n  undefined4 data_value_1;\n  int data_index_2;\n  data_ptr_2 = PTR_DAT_00081384;\n  data_ptr_1 = PTR_DAT_00081380;\n  if (PTR_DAT_00081380[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081384[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param_3,5,index,value,param_3);\n    }\n    data_ptr_2[index] = data_ptr_2[index] & 0xf | (byte)(value << 4);\n    data_index_1 = *(int *)(data_ptr_1 + index * 0x1c);\n    data_value_1 = *(undefined4 *)(data_ptr_1 + index * 0x1c + 4);\n    int result = FUN_00080e04(data_index_1, data_value_1);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data_index_1 + 100) = data_value_1;\n        return;\n      }\n      *(undefined4 *)(data_index_1 + 0x60) = data_value_1;\n      return;\n    }\n    FUN_00080d7a(data_index_1, data_value_1, value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "update_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_value_from_pointer_00081714",
                "PTR_DAT_0008171c": "pointer_data"
            },
            "code": "get_value_from_pointer_00081714() {\n    return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_data_0008449c",
                "param_1": "data_ptr",
                "param_2": "data_info_ptr",
                "iVar1": "result",
                "uVar2": "flags"
            },
            "code": "void process_data_0008449c(undefined4 data_ptr,int data_info_ptr)\n{\n  int result;\n  ushort flags;\n  \n  result = get_data(data_ptr,(int)*(short *)(data_info_ptr + 0xe));\n  if (result == -1) {\n    flags = *(ushort *)(data_info_ptr + 0xc) & 0xefff;\n  }\n  else {\n    flags = *(ushort *)(data_info_ptr + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info_ptr + 0x50) = result;\n  }\n  *(ushort *)(data_info_ptr + 0xc) = flags;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "param_5": "output_array",
                "uVar1": "lower_bits",
                "lVar2": "extended_product",
                "*param_5": "output_array[0]",
                "param_5[1]": "output_array[1]"
            },
            "code": "void calculate_difference_0008477c(uint32_t input1, int32_t input2, uint32_t multiplier1, uint32_t multiplier2, int32_t *output_array)\n{\n  uint32_t product = input1 * multiplier1;\n  uint64_t extended_product = (uint64_t)product * multiplier2;\n  uint32_t lower_bits = (uint32_t)extended_product;\n  output_array[0] = input1 - lower_bits;\n  output_array[1] = input2 - ((int32_t)(extended_product >> 32)) - (input1 < lower_bits);\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "count_and_process_data_000801b0",
                "param_1": "data_ptr",
                "bVar1": "is_overflow",
                "uVar2": "new_byte",
                "cVar3": "processed_byte_count",
                "iVar4": "result",
                "bVar5": "byte_count"
            },
            "code": "int count_and_process_data_000801b0(int **data_ptr)\n{\n  bool is_overflow = false;\n  undefined new_byte;\n  char processed_byte_count;\n  int result;\n  \n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    call_function1(*(byte *)((int)data_ptr + 6),0);\n  }\n  \n  processed_byte_count = 0;\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    while (result = (**(code **)(**data_ptr + 8))(), result != 0) {\n      byte_count = *(byte *)((int)data_ptr + 0x49);\n      new_byte = (**(code **)(**data_ptr + 0xc))();\n      processed_byte_count = *(char *)((int)data_ptr + 0x49);\n      *(undefined *)((int)data_ptr + byte_count + 9) = new_byte;\n      processed_byte_count++;\n      *(byte *)((int)data_ptr + 0x49) = processed_byte_count;\n      if (0x3f < processed_byte_count) {\n        is_overflow = true;\n      }\n    }\n  }\n  \n  *(short *)(data_ptr + 0x14) = *(short *)(data_ptr + 0x14) + 1;\n  if (is_overflow) {\n    processed_byte_count = -3;\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\n  }\n  else {\n    processed_byte_count = *(char *)((int)data_ptr + 0x49);\n  }\n  return (int)processed_byte_count;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "count_and_process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "buffer_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, char new_value)\n{\n    int buffer_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n    if (buffer_index != *(uint *)(buffer_address + 0x84)) {\n        *(char *)(buffer_address + buffer_index) = new_value;\n        *(int *)(buffer_address + 0x80) = buffer_index;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "puVar1": "pointer_to_function"
            },
            "code": "void initialize_parameters_000814e4(undefined4 *params, undefined4 param_2, undefined param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6)\n{\n    undefined *pointer_to_function = PTR_PTR_FUN_00081454_1_00081504;\n    params[0] = pointer_to_function;\n    params[1] = 0;\n    params[2] = 1000;\n    params[3] = param_5;\n    params[4] = param_8;\n    *(undefined *)(params + 7) = param_3;\n    params[5] = param_6;\n    params[6] = param_2;\n    params[7] = param_4;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": false,
            "current_name": "initialize_parameters_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "param_flags",
                "bVar1": "is_flag_set",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void update_params_00080d54(uint32_t *param_array, uint32_t new_param, uint32_t param_flags)\n{\n    bool is_first_flag_set = (int)(param_flags << 0x1f) < 0;\n    param_array[17] = new_param;\n    if (is_first_flag_set) {\n        param_array[25] = new_param;\n    }\n    if (!is_first_flag_set) {\n        param_array[24] = new_param;\n    }\n    bool is_second_flag_set = (param_flags & 0xA) != 0;\n    if (is_second_flag_set) {\n        param_array[8] = new_param;\n    }\n    if (!is_second_flag_set) {\n        param_array[9] = new_param;\n    }\n    bool is_third_flag_set = ((int)(param_flags << 0x1e) < 0) || ((int)(param_flags << 0x1c) < 0);\n    if (is_third_flag_set) {\n        param_array[32] = new_param;\n    }\n    param_array[5] = new_param;\n    *param_array = new_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_params_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "lsb"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length) {\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index++) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index--;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_data(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_data(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_data(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00082ac0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_param_00081e04",
                "param_1": "param",
                "DAT_00081e10": "function_ptr"
            },
            "code": "void call_function_with_param_00081e04(void* DAT_00081e10, undefined4 param){\n  DAT_00081e10(param);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "check_params_and_return_result_00084750",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "result",
                "FUN_000847ac": "calculate_result"
            },
            "code": "int check_params_and_return_result_00084750(int first_param, int second_param, int third_param, int fourth_param)\n{\n  int result;\n  if ((fourth_param == 0) && (third_param == 0)) {\n    if (second_param != 0 || first_param != 0) {\n      first_param = -1;\n    }\n    result = first_param;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "check_params_and_return_result_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "time_pointer",
                "puVar2": "data_pointer",
                "iVar3": "n",
                "iVar4": "k",
                "iVar5": "l",
                "iVar6": "m",
                "iVar7": "i",
                "iVar8": "j",
                "DAT_00080be8": "TIME_PTR",
                "FUN_00080e9c": "initialize_time",
                "DAT_00080bec": "DATA_PTR",
                "DAT_00080bf0": "DATA_PTR + 0x23",
                "FUN_00081d7c": "initialize_data",
                "DAT_00080c00": "DATA_PTR_3",
                "DAT_00080bfc": "DATA_PTR_2",
                "DAT_00080bf8": "DATA_PTR_1",
                "DAT_00080bf4": "DATA_PTR",
                "FUN_00081318": "initialize_data",
                "FUN_00080da0": "initialize_system_component",
                "FUN_00080e18": "initialize_system_component",
                "FUN_00080f9c": "initialize_system_component",
                "FUN_00081042": "initialize_system_component",
                "FUN_00081034": "initialize_system_component",
                "FUN_0008106e": "initialize_system_component",
                "FUN_00081066": "initialize_system_component",
                "DAT_00080c08": "DATA_PTR_4",
                "DAT_00080c04": "DATA_PTR_5"
            },
            "code": "void initialize_system_00080ae4(void)\n{\n  uint *time_pointer;\n  undefined4 *data_pointer;\n  int i, j, k, l, m, n;\n  time_pointer = DAT_00080be8;\n  initialize_time();\n  data_pointer = DAT_00080bec;\n  DAT_00080bec[1] = *time_pointer / 1000 - 1;\n  *(undefined *)(DAT_00080bf0) = 0xf0;\n  data_pointer[2] = 0;\n  *data_pointer = 7;\n  initialize_data();\n  i = 0;\n  do {\n    j = i + 1;\n    initialize_data(i,0);\n    m = DAT_00080c00;\n    l = DAT_00080bfc;\n    k = DAT_00080bf8;\n    n = DAT_00080bec;\n    i = j;\n  } while (j != 0x4f);\n  *(undefined4 *)(DAT_00080bec + 0xa0) = 0xffffffff;\n  *(undefined4 *)(k + 0xa0) = 0xffffffff;\n  *(undefined4 *)(l + 0xa0) = 0xffffffff;\n  *(undefined4 *)(m + 0xa0) = 0xffffffff;\n  initialize_data(n,1,0x300,0);\n  initialize_data(0,1);\n  initialize_data(n,1,0xc00,0);\n  initialize_data(n,1,0x3000,0);\n  initialize_data(l,2,0x30,0);\n  initialize_data(k,1,0xc00,0);\n  initialize_data(n,1,3,0);\n  initialize_data(k,1,0xc000,0);\n  initialize_system_00080ae4_component(0x25);\n  initialize_system_00080ae4_component(DAT_00080c08,*time_pointer,DAT_00080c04,0xc);\n  initialize_system_00080ae4_component(DAT_00080c08,0,0x300000,1);\n  initialize_system_00080ae4_component(DAT_00080c08,0,0);\n  initialize_system_00080ae4_component(DAT_00080c08,0xffffffff);\n  initialize_system_00080ae4_component(DAT_00080c08);\n  return;\n}",
            "called": [
                "FUN_0008106e",
                "FUN_00081042",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_00081066",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "insert_value_into_array_00081d5c",
                "param_1": "value",
                "param_2": "index",
                "param_3": "array",
                "puVar1": "array_slot_ptr",
                "uVar2": "current_index",
                "uVar4": "bit_mask",
                "iVar3": "array_ptr"
            },
            "code": "undefined4 insert_value_into_array_00081d5c(undefined4 value, undefined4 index, undefined4 *array)\n{\n  int array_ptr = *(int *)PTR_DAT_0008396c;\n  undefined4 *array_slot_ptr = *(undefined4 **)(array_ptr + 0x148);\n  if (array_slot_ptr == (undefined4 *)0x0) {\n    array_slot_ptr = (undefined4 *)(array_ptr + 0x14c);\n    *(undefined4 **)(array_ptr + 0x148) = array_slot_ptr;\n  }\n  uint current_index = array_slot_ptr[1];\n  if (0x1f < (int)current_index) {\n    if ((DAT_00083970 == 0) || (array_slot_ptr = (undefined4 *)FUN_00081df4(400), array_slot_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *array_slot_ptr = *(undefined4 *)(array_ptr + 0x148);\n    array_slot_ptr[1] = 0;\n    current_index = 0;\n    *(undefined4 **)(array_ptr + 0x148) = array_slot_ptr;\n    array_slot_ptr[0x62] = 0;\n    array_slot_ptr[99] = 0;\n  }\n  uint bit_mask = 1 << (current_index & 0xff);\n  array_slot_ptr[current_index + 0x22] = value;\n  array_slot_ptr[0x62] = array_slot_ptr[0x62] | bit_mask;\n  array_slot_ptr[current_index + 0x42] = index;\n  array_slot_ptr[99] = bit_mask | array_slot_ptr[99];\n  array_slot_ptr[1] = current_index + 1;\n  array_slot_ptr[current_index + 2] = *array;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "insert_value_into_array_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "findValueFromPointer_00082970",
                "param_1": "result",
                "param_2": "param",
                "puVar1": "pointer",
                "iVar2": "status"
            },
            "code": "void findValueFromPointer_00082970(int *result, undefined4 param) {\n  undefined *pointer = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int status = checkStatus(param);\n  if ((status == -1) && (*(int *)pointer != 0)) {\n    *result = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "findValueFromPointer_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "get_result_000811be",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_result_000811be(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "get_result_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "copy_param_to_arg_00081c54",
                "param_1": "arg",
                "param_2": "param",
                "FUN_00081c5c": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_param_to_arg_00081c54(void* arg, void* param)\n{\n  memcpy(arg, param, sizeof(void*));\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "copy_param_to_arg_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_value_0008163a",
                "param_1": "ptr_value",
                "param_2": "value",
                "iVar1": "check",
                "*param_1": "*ptr_value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int check_value_0008163a(int *PTR_value, uint value) {\n  int result = 1;\n  if ((*PTR_value == 0) || ((uint)PTR_value[1] < value)) {\n    int check = check_ptr(PTR_value);\n    if (check == 0) {\n      return 0;\n    }\n    if (PTR_value[2] == 0) {\n      *(undefined *)*PTR_value = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_value_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "print_data_at_address_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUNC_000825b0": "print_value",
                "*DAT_000825ac": "address"
            },
            "code": "void print_data_at_*print_data_at_address_000825a0(int* *print_data_at_address_000825a0, int param_1, int param_2)\n{\n  print_value(**print_data_at_address_000825a0, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "print_data_at_address_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "initialize_function_pointer_000815d4",
                "param_1": "array",
                "param_2": "value",
                "*param_1": "*array",
                "PTR_PTR_FUN_00081454_1_000815f4": "FUNCTION_POINTER_1"
            },
            "code": "undefined4* initialize_function_pointer_000815d4(undefined4* array, undefined4 value) {\n    call_function_1();\n    *array = PTR_PTR_FUN_00081454_1_000815f4;\n    array[9] = value;\n    return array;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_function_pointer_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "execute_function_00080164",
                "param_1": "memory",
                "puVar1": "function_pointer",
                "iVar2": "status",
                "PTR_DAT_000801ac": "memory[0]",
                "code": "function_pointer",
                "byte": "byte_value",
                "FUN_00081210": "call_function1",
                "FUN_00081318": "call_function2"
            },
            "code": "void execute_function_00080164(int **memory)\n{\n  undefined *function_pointer;\n  int status;\n  function_pointer = PTR_DAT_000801ac;\n  *memory = (int *)function_pointer;\n  (**(code **)(*(int *)function_pointer + 0x18))(function_pointer);\n  if (1 < *(byte *)((int)memory + 6)) {\n    call_function1(*(byte *)((int)memory + 6),1);\n    call_function2(*(undefined *)((int)memory + 6),0);\n  }\n  do {\n    status = (**(code **)(*memory + 0xc))();\n  } while (-1 < status);\n  *(undefined *)((int)memory + 0x49) = 0;\n  *(undefined *)((int)memory + 0x4a) = 0;\n  *(undefined2 *)(memory + 0x15) = 0;\n  *(undefined2 *)((int)memory + 0x52) = 0;\n  *(undefined2 *)(memory + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "execute_function_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "count",
                "iVar1": "index"
            },
            "code": "uint copy_bytes_to_memory_000811cc(uint* destination, const uint* source, uint count) {\n  int index;\n  for (index = 0; index < (int)count; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(source + index);\n  }\n  return count & ~((int)count >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_memory_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "findValueFromData_000846dc",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "dataPtr",
                "iVar2": "status"
            },
            "code": "void findValueFromData_000846dc(int *result, undefined4 value) {\n  undefined *dataPtr;\n  int status;\n  dataPtr = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  status = checkValue(value);\n  if ((status == -1) && (*(int *)dataPtr != 0)) {\n    *result = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "findValueFromData_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "leading_zero_bits_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "0": "shifted_zero",
                "result": "result",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint leading_zero_bits_00081894(uint input) {\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 8;\n  uint multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < 0);\n    uint result = multiplier + shifted_input + shifted_zero + carry;\n    if ((shifted_input & 0x80000000) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_zero = (uint)(shifted_input >> 0x1f);\n  uint result = multiplier + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - shifted_zero);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_return_error_000845bc",
                "param_1": "out_buffer",
                "param_2": "byte_to_write",
                "param_3": "buffer_size",
                "undefined4": "int",
                "undefined": "uint8_t",
                "*param_1": "*out_buffer",
                "(undefined *)0x0": "NULL",
                "*param_2": "*byte_to_write",
                "(char)": "(uint8_t)",
                "0x100": "256",
                "*param_1 = 0x8a": "*out_buffer = 138",
                "0xffffffff": "-1"
            },
            "code": "int write_byte_or_return_error_000845bc(int *out_buffer, uint8_t byte_to_write, uint buffer_size)\n{\n  if (out_buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *out_buffer = byte_to_write;\n    return 1;\n  }\n  *out_buffer = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_array_with_value_00082504",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "current_ptr",
                "puVar2": "end_ptr",
                "uVar3": "value_32",
                "uVar4": "length_remaining",
                "bVar5": "is_length_zero"
            },
            "code": "void fill_array_with_value_00082504(unsigned int *array, unsigned char value, unsigned int length)\n{\n    unsigned int *current_ptr;\n    unsigned int *end_ptr;\n    unsigned int value_32;\n    unsigned int length_remaining;\n    bool is_length_zero;\n\n    if (((unsigned int)array & 3) != 0) {\n        is_length_zero = length == 0;\n        current_ptr = array;\n        length_remaining = length - 1;\n        if (is_length_zero) {\n            return;\n        }\n        while (true) {\n            array = (unsigned int *)((int)current_ptr + 1);\n            *(unsigned char *)current_ptr = value;\n            if (((unsigned int)array & 3) == 0) {\n                break;\n            }\n            is_length_zero = length_remaining == 0;\n            current_ptr = array;\n            length_remaining = length_remaining - 1;\n            if (is_length_zero) {\n                return;\n            }\n        }\n    }\n    if (3 < length) {\n        value_32 = (value << 24) | (value << 16) | (value << 8) | value;\n        length_remaining = length;\n        current_ptr = array;\n        if (0xF < length) {\n            length_remaining = length - 0x10;\n            end_ptr = (unsigned int *)((int)array + (length_remaining & 0xFFFFFFF0) + 0x10);\n            do {\n                *current_ptr = value_32;\n                current_ptr[1] = value_32;\n                current_ptr[2] = value_32;\n                current_ptr[3] = value_32;\n                current_ptr += 4;\n            } while (current_ptr != end_ptr);\n            length = length & 0xF;\n            array = array + ((length_remaining >> 4) + 1) * 4;\n            length_remaining = length;\n            current_ptr = array;\n            if (length < 4) {\n                goto LAB_00082580;\n            }\n        }\n        do {\n            length_remaining = length_remaining - 4;\n            *array = value_32;\n            array += 1;\n        } while (3 < length_remaining);\n        end_ptr = (unsigned int *)((int)current_ptr + (length - 4 & 0xFFFFFFFC) + 4);\n        length_remaining = length & 3;\n    }\nLAB_00082580:\n    if (length_remaining != 0) {\n        current_ptr = array;\n        do {\n            end_ptr = (unsigned int *)((int)current_ptr + 1);\n            *(unsigned char *)current_ptr = value;\n            current_ptr = end_ptr;\n        } while (end_ptr != (unsigned int *)(length_remaining + (int)array));\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "value_to_return",
                "PTR_DAT_0008010c": "string_ptr",
                "DAT_00080110": "int_var",
                "DAT_00080114": "return_value"
            },
            "code": "int check_if_initialized_000800f4(int value_to_return) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      value_to_return = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return value_to_return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "data_pointer",
                "param_2": "data_size",
                "iVar1": "result",
                "iVar2": "status",
                "local_488": "stack_memory",
                "local_480": "memory_size",
                "local_47c": "flags",
                "local_47a": "data_type",
                "local_478": "memory_pointer",
                "local_474": "memory_474",
                "local_470": "memory_470",
                "local_46c": "memory_46c",
                "local_464": "memory_464",
                "local_424": "memory_424",
                "auStack_420": "stack_data"
            },
            "code": "int process_data_0008378c(undefined4 data_pointer, int data_size)\n{\n  int result = -1;\n  int status = -1;\n  undefined *stack_memory [2];\n  undefined4 memory_size = 0x400;\n  ushort flags = *(ushort *)(data_size + 0xc) & 0xfffd;\n  undefined2 data_type = *(undefined2 *)(data_size + 0xe);\n  undefined *memory_pointer = stack_memory[0];\n  undefined4 memory_100 = *(undefined4 *)(data_size + 100);\n  undefined4 memory_1c = *(undefined4 *)(data_size + 0x1c);\n  undefined4 memory_24 = *(undefined4 *)(data_size + 0x24);\n  undefined4 memory_474 = 0x400;\n  undefined4 memory_470 = 0;\n  undefined4 memory_46c = memory_1c;\n  undefined4 memory_464 = memory_24;\n  status = read_data(data_pointer, stack_memory);\n  if ((status >= 0) && (verify_data(data_pointer, stack_memory) != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(ushort *)(data_size + 0xc) = *(ushort *)(data_size + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "decode_data_00083adc",
                "param_1": "data_ptr",
                "param_2": "header_ptr",
                "piVar1": "data_chunk_ptr",
                "iVar2": "chunk_size_diff",
                "uVar3": "header_flags",
                "uVar4": "header_size",
                "iVar5": "total_bytes_written",
                "pcVar6": "decoder_func_ptr",
                "unaff_r4": "return_value",
                "iVar7": "data_offset"
            },
            "code": "undefined4 decode_data_00083adc(int *data_ptr, int *header_ptr)\n{\n  int *data_chunk_ptr;\n  int chunk_size_diff;\n  ushort header_flags;\n  uint header_size;\n  int total_bytes_written;\n  code *decoder_func_ptr;\n  undefined4 return_value;\n  int data_offset;\n  \n  if ((data_ptr != NULL) && (data_ptr[14] == 0)) {\n    reset_data(data_ptr);\n  }\n  \n  if (*(short *)(header_ptr + 6) == 0) {\n    return 0;\n  }\n  \n  header_flags = *(ushort *)(header_ptr + 6);\n  header_size = (uint)header_flags << 28;\n  \n  if ((int)header_size < 0) {\n    data_chunk_ptr = header_ptr + 4;\n    if (*data_chunk_ptr == 0) {\n      return 0;\n    }\n    \n    data_offset = *header_ptr;\n    if ((header_flags & 3) == 0) {\n      chunk_size_diff = header_ptr[5];\n    }\n    else {\n      chunk_size_diff = 0;\n    }\n    \n    *header_ptr = *data_chunk_ptr;\n    chunk_size_diff = data_offset - *data_chunk_ptr;\n    header_ptr[2] = chunk_size_diff;\n    \n    do {\n      if (chunk_size_diff < 1) {\n        return 0;\n      }\n      \n      total_bytes_written = (*(code *)header_ptr[9])(data_ptr, header_ptr[7], *data_chunk_ptr, chunk_size_diff, return_value);\n      chunk_size_diff -= total_bytes_written;\n      *data_chunk_ptr += total_bytes_written;\n    } while (total_bytes_written > 0);\n    \n    *(ushort *)(header_ptr + 6) = *(ushort *)(header_ptr + 6) | 0x40;\n    return 0xffffffff;\n  }\n  \n  *(ushort *)(header_ptr + 6) = header_flags | 0x800;\n  if ((header_ptr[1] < 1) && (header_ptr[15] < 1)) {\n    return 0;\n  }\n  \n  decoder_func_ptr = (code *)header_ptr[10];\n  if (decoder_func_ptr == NULL) {\n    return 0;\n  }\n  \n  header_size = (uint)(header_flags | 0x800);\n  data_offset = *data_ptr;\n  *data_ptr = 0;\n  \n  if ((header_flags & 0x1000) == 0) {\n    total_bytes_written = (*decoder_func_ptr)(data_ptr, header_ptr[7], header_size & 0x1000, 1);\n    if ((total_bytes_written == -1) && (*data_ptr != 0)) {\n      if ((*data_ptr == 29) || (*data_ptr == 22)) {\n        *data_ptr = data_offset;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    header_flags = *(ushort *)(header_ptr + 6);\n    decoder_func_ptr = (code *)header_ptr[10];\n  }\n  else {\n    chunk_size_diff = header_ptr[20];\n  }\n  \n  if (((int)(header_flags << 29) < 0) && (chunk_size_diff = chunk_size_diff - header_ptr[1], header_ptr[12] != 0)) {\n    chunk_size_diff = chunk_size_diff - header_ptr[15];\n  }\n  \n  total_bytes_written = (*decoder_func_ptr)(data_ptr, header_ptr[7], chunk_size_diff, 0);\n  if (total_bytes_written == -1) {\n    data_offset = *data_ptr;\n    if (data_offset != 0) {\n      if ((data_offset != 29) && (data_offset != 22)) {\n        *(ushort *)(header_ptr + 6) = *(ushort *)(header_ptr + 6) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header_ptr + 6) = *(ushort *)(header_ptr + 6) & 0xf7ff;\n      *header_ptr = header_ptr[4];\n      header_ptr[1] = 0;\n      goto LAB_00083a00;\n    }\n    header_flags = *(ushort *)(header_ptr + 6) & 0xf7ff;\n    header_ptr[1] = 0;\n    *(ushort *)(header_ptr + 6) = header_flags;\n    *header_ptr = header_ptr[4];\n  }\n  else {\n    header_flags = *(ushort *)(header_ptr + 6) & 0xf7ff;\n    *header_ptr = header_ptr[4];\n    *(ushort *)(header_ptr + 6) = header_flags;\n    header_ptr[1] = 0;\n  }\n  \n  if ((int)((uint)header_flags << 19) < 0) {\n    header_ptr[20] = chunk_size_diff;\n  }\n  \n  data_chunk_ptr = (int *)header_ptr[12];\n  *data_ptr = data_offset;\n  if (data_chunk_ptr == NULL) {\n    return 0;\n  }\n  \n  if (data_chunk_ptr != header_ptr + 16) {\n    free_data(data_ptr);\n  }\n  header_ptr[12] = 0;\n  return 0;\n}\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "decode_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00082438(piVar9,param_2);\n      }\n      FUN_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_value_000803d4",
                "param_1": "input_value",
                "iVar1": "index",
                "PTR_DAT_0008040c": "ptr",
                "value": "value",
                "flag": "flag"
            },
            "code": "int check_value_000803d4(int input_value) {\n    int index = 0;\n    int value = *(byte *)(input_value + 10);\n    int *PTR_DAT_0008040c = PTR_DAT_0008040c;\n    int flag = (int)((uint)value << 0x18) < 0;\n    if (flag) {\n        *(short *)(input_value + 0x54) += 1;\n        return 0xfb;\n    }\n    while (index != 8) {\n        if (*PTR_DAT_0008040c == value) {\n            return 0;\n        }\n        PTR_DAT_0008040c++;\n        index++;\n    }\n    *(short *)(input_value + 0x54) += 1;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_value_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "validate_input_0008043e",
                "param_1": "input",
                "cVar1": "result",
                "uVar2": "uint_var",
                "piVar3": "memory_location",
                "iVar4": "comparison_result",
                "unaff_r6": "uint_unaff_r6",
                "byte_5": "byte_5"
            },
            "code": "int validate_input_0008043e(int **input)\n{\n    char result = 0;\n    char byte_5 = *(char *)((int)input + 5);\n    uint uVar2;\n    int *memory_location;\n    int comparison_result;\n    uint unaff_r6;\n\n    if (byte_5 < 4) {\n        uVar2 = (**(code **)(**input + 8))();\n        unaff_r6 = uVar2 & 0xff;\n    }\n\n    memory_location = (int *)thunk_FUN_00081714();\n\n    if (input[0x17] < memory_location) {\n        *(char *)(input + 2) = -1;\n        *(char *)((int)input + 7) = 0;\n        *(short *)(input + 0x15) = *(short *)(input + 0x15) + 1;\n    }\n    else if (unaff_r6 > 7) {\n        FUN_000801b0(input);\n        comparison_result = FUN_000803d4(input);\n\n        if (comparison_result == 0) {\n            if (*(char *)((int)input + 10) - 3 < 2) {\n                FUN_00080410(input);\n            }\n            *(char *)((int)input + 7) = 0;\n            result = *(char *)((int)input + 0x49);\n        }\n        else {\n            *(char *)((int)input + 7) = 0;\n            result = (char)comparison_result;\n        }\n    }\n\n    return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "<original_function_name>": "reset_parameters",
                "param_1": "ptr_param",
                "FUN_0008160c": "reset_parameters_0008160c",
                "FUN_00081e04": "call_reset_function"
            },
            "code": "void reset_parameters_0008160c(int *ptr_param){\n                      if (*ptr_param != 0) {\n                        call_reset_function();\n                      }\n                      *ptr_param = 0;\n                      ptr_param[2] = 0;\n                      ptr_param[1] = 0;\n                      return;\n                    }",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_parameters_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_input_00080e18",
                "param_1": "input",
                "uVar1": "mask"
            },
            "code": "int check_input_00080e18(uint input) {\n    uint mask;\n    if (input < 45) {\n        if (input < 32) {\n            mask = 1 << (input & 0xff);\n            if ((mask & *(uint *)(DAT_00080e58 + 0x18)) != mask) {\n                *(uint *)(DAT_00080e58 + 0x10) = mask;\n            }\n        }\n        else {\n            mask = 1 << ((input - 32) & 0xff);\n            if ((mask & *(uint *)(DAT_00080e58 + 0x108)) != mask) {\n                *(uint *)(DAT_00080e58 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_input_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "returnZero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_value_from_data_pointer_00084298",
                "*DAT_000842a0": "*data_pointer"
            },
            "code": "int get_value_from_data_pointer_00084298() {\n  return *DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_value_from_data_pointer_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_parameter_to_max_00081066",
                "param_1": "parameter",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(parameter + 0x14)",
                "0xffff": "65535"
            },
            "code": "void set_parameter_to_max_00081066(int parameter)\n{\n  *(int *)(parameter + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_to_max_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "decode_uint_00081cd0",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "uVar2": "difference",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "uint decode_uint_00081cd0(uint encoded_value) {\n  uint shift_amount = (encoded_value << 1) >> 0x18;\n  uint difference = 0x9e - shift_amount;\n  if (shift_amount >= 0x9f || difference == 0) {\n    if (difference == 0xffffff9f && (encoded_value & 0x7fffff) != 0) {\n      return 0;\n    }\n    if ((encoded_value & 0x80000000) == 0) {\n      return 0x7fffffff;\n    }\n    return encoded_value;\n  }\n  uint decoded_value = (encoded_value << 8 | 0x80000000) >> (difference & 0xff);\n  if ((encoded_value & 0x80000000) != 0) {\n    decoded_value = -decoded_value;\n  }\n  return decoded_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "decode_uint_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_data_00081df4",
                "param_1": "param",
                "FUNC_00081e14": "function_with_data",
                "*DAT_00081e00": "data"
            },
            "code": "void call_function_with_*call_function_with_data_00081df4(int* *call_function_with_data_00081df4, int param) {\n  function_with_*call_function_with_data_00081df4(**call_function_with_data_00081df4, param);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_data_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_size",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "processed_data",
                "iVar2": "data_index",
                "bVar3": "byte_index",
                "uVar4": "byte_index_casted",
                "iVar5": "data"
            },
            "code": "void process_data_00080410(int data_size, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  uint8_t byte_index = 0;\n  while(byte_index < (uint8_t)(*(byte *)(data_size + 0xb) >> 1))\n  {\n    int data_index = (byte_index * 2 + 3 & 0xff) + data_size;\n    int data = *(int *)(data_size + 0x4c);\n    uint16_t processed_data = process_byte(*(uint8_t *)(data_index + 9), *(uint8_t *)(data_index + 10), data_index, *(byte *)(data_size + 0xb), arg4);\n    *(uint16_t *)(data + byte_index * 2) = processed_data;\n    byte_index++;\n  }\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data",
                "param_2": "type",
                "param_3": "config",
                "param_4": "flags",
                "bVar1": "flag",
                "*DAT_00080df8": "*data_processor",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(data + 0x44)",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(data + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(data + 0x60)",
                "*DAT_00080dfc": "*data_processor_2",
                "*DAT_00080e00": "*data_processor_3"
            },
            "code": "int process_data_00080da0(int data, int type, int config, unsigned int flags)\n{\n    bool flag;\n    switch(type) {\n        case 1:\n        case 2:\n            (*DAT_00080df8)(data, type, config);\n            flag = (int)(flags << 0x1f) < 0;\n            *(int *)(data + 0x44) = config;\n            if (flag) {\n                *(int *)(data + 100) = config;\n            }\n            if (!flag) {\n                *(int *)(data + 0x60) = config;\n            }\n            break;\n        case 3:\n            (*DAT_00080dfc)(data, config, flags, data_processor_2, data);\n            break;\n        case 4:\n        case 5:\n            (*DAT_00080e00)(data, config, type == 5, (flags << 0x1d) >> 0x1f, flags & 1, type, config);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d2e",
                "FUN_00080d54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "start_index",
                "param_4": "end_index",
                "bVar1": "current_index",
                "uVar2": "current_value",
                "iVar3": "loop_result",
                "uVar4": "result",
                "FUN_0008021c": "compute_result",
                "FUN_00081318": "call_function",
                "thunk_FUN_00081714": "compute_thunk_result"
            },
            "code": "void process_data_00080258(int **data, int data_length, int start_index, int end_index) {\n  int current_index = *data[0x49];\n  int current_value = (int) current_index;\n  int result = compute_result(data, current_value, start_index, end_index, end_index);\n  *(char *)((int)data + current_value + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)data + (current_value + 1 & 0xff) + 9) = (char)result;\n  *data[0x49] = current_index + 2;\n  if (data[0x6][0] > 1) {\n    call_function(data[0x6][0], 1);\n  }\n  if (data[0x5][0] < 4) {\n    (**(code **)(*data[0] + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (data[0x6][0] > 1) {\n    call_function(data[0x6][0], 0);\n  }\n  if (data[0x5][0] < 4) {\n    do {\n      int loop_result = (**(code **)(*data[0] + 0xc))();\n    } while (loop_result >= -1);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int result2 = compute_thunk_result();\n  data[0x17] = (int *)(result2 + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "check_and_update_array_00081622",
                "param_1": "array_ptr",
                "param_2": "array_size",
                "iVar1": "updated_value",
                "FUN_000825a0": "call_update_function"
            },
            "code": "int check_and_update_array_00081622(int *array_ptr,int array_size,undefined4 param_3,undefined4 param_4)\n{\n  int updated_value;\n  updated_value = call_update_function(*array_ptr,array_size + 1,param_3,param_4,param_4);\n  if (updated_value != 0) {\n    *array_ptr = updated_value;\n    array_ptr[1] = array_size;\n    updated_value = 1;\n  }\n  return updated_value;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "check_and_update_array_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "n",
                "iVar1": "i",
                "puVar2": "p_dest",
                "puVar3": "end_aligned_dest",
                "puVar4": "end_aligned_src",
                "uVar5": "remaining_bytes",
                "puVar6": "p_src",
                "uVar7": "remaining_words"
            },
            "code": "void reverse_copy_00082438(uint32_t *dest, uint32_t *src, uint32_t n) {\n    if (src < dest && dest < src + n) {\n        uint8_t *p_dest = (uint8_t *)dest + n;\n        uint8_t *p_src = (uint8_t *)src + n;\n        while (n--) {\n            *(--p_dest) = *(--p_src);\n        }\n    } else if (n >= 16 && (((uintptr_t)dest | (uintptr_t)src) & 3) == 0) {\n        uint32_t *end_aligned_dest = dest + (n - 16) / 4 + 1;\n        uint32_t *end_aligned_src = src + (n - 16) / 4 + 1;\n        while (dest != end_aligned_dest) {\n            dest[0] = src[0];\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest += 4;\n            src += 4;\n        }\n        n &= 0xf;\n        if (n == 0) {\n            return;\n        }\n    }\n    uint8_t *p_dest = (uint8_t *)dest;\n    uint8_t *p_src = (uint8_t *)src;\n    while (n--) {\n        *(p_dest++) = *(p_src++);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_00081508",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "value",
                "puVar1": "value_ptr",
                "iVar2": "index",
                "puVar3": "data_ptr"
            },
            "code": "void initialize_00081508(uint8_t* data, uint32_t data_size, uint32_t value)\n{\n  uint32_t* data_ptr;\n  int index;\n  uint32_t* value_ptr;\n  \n  setup(*(uint32_t *)(data + 0x20));\n  data_ptr = *(uint32_t **)(data + 0x18);\n  data_ptr[0x48] = 0x202;\n  *data_ptr = 0xac;\n  value_ptr = get_value_ptr();\n  data_ptr[1] = value;\n  data_ptr[8] = *value_ptr / data_size >> 4;\n  data_ptr[3] = 0xffffffff;\n  data_ptr[2] = 0x61;\n  index = ((uint32_t)(int32_t)(char)*(uint8_t *)(data + 0x1c) >> 5) * 4;\n  *(int *)(get_data_ptr() + index) = 1 << (uint32_t)(*(uint8_t *)(data + 0x1c) & 0x1f);\n  \n  *(uint32_t *)(get_ptr(data, 0x10) + 0x84) = 0;\n  *(uint32_t *)(get_ptr(data, 0x10) + 0x80) = 0;\n  *(uint32_t *)(get_ptr(data, 0x14) + 0x84) = 0;\n  *(uint32_t *)(get_ptr(data, 0x14) + 0x80) = 0;\n  *data_ptr = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "handle_data_00083808",
                "*param_1": "*data",
                "*param_2": "*status",
                "uVar1": "least_significant_bit",
                "iVar2": "var_1",
                "uVar3": "unsigned_value",
                "uVar4": "value"
            },
            "code": "int handle_data_00083808(uint16_t *data, int *status) {\n  uint16_t value = *(data + 3);\n  uint32_t unsigned_value = (uint32_t)value;\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    initialize();\n  }\n  if ((int)(unsigned_value << 0x1c) < 0) {\n    int var_1 = *(data + 4);\n  }\n  else {\n    if (-1 < (int)(unsigned_value << 0x1b)) {\n      *status = 9;\n      *(data + 3) = value | 0x40;\n      return -1;\n    }\n    if ((int)(unsigned_value << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          cleanup(status);\n          value = *(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      int var_1 = data[4];\n      value = value & 0xffdb;\n      *data = var_1;\n      data[1] = 0;\n    }\n    else {\n      int var_1 = data[4];\n    }\n    *(data + 3) = value | 8;\n    unsigned_value = (uint32_t)(value | 8);\n  }\n  if ((var_1 == 0) && ((unsigned_value & 0x280) != 0x200)) {\n    process_data(data, status);\n    unsigned_value = (uint32_t)*(data + 3);\n    var_1 = data[4];\n  }\n  uint32_t least_significant_bit = unsigned_value & 1;\n  if (least_significant_bit == 0) {\n    if (-1 < (int)(unsigned_value << 0x1e)) {\n      uint32_t var_2 = data[5];\n    }\n    data[2] = var_2;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((var_1 == 0) && ((int)((uint32_t)*(data + 3) << 0x18) < 0)) {\n    *(data + 3) = *(data + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "imported": false,
            "current_name": "handle_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "array",
                "param_2": "position",
                "*(int *)(param_1 + 0x14)": "*(array + 0x14)",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_0008105c(int* array, uint8_t position) {\n    uint8_t bit_position = position & 0xff;\n    uint32_t bit_mask = 1 << bit_position;\n    *(array + 0x14) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "flag",
                "param_4": "result",
                "uVar1": "arg3",
                "iVar2": "function_result",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_data"
            },
            "code": "void process_data_0008456c(int* data, int data_len, int flag, int* result){\n  int function_result;\n  code* function_pointer;\n  undefined stack_data[12];\n  \n  if (data_len == 0) {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    int arg3 = FUN_00084290();\n    function_result = (*function_pointer)(data, stack_data, 0, arg3, result);\n  }\n  else {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    int arg3 = FUN_00084290();\n    function_result = (*function_pointer)(data, data_len, flag, arg3, result);\n  }\n  if (function_result == -1) {\n    *result = 0;\n    *data = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_flags_on_memory_location_000811b4",
                "param_1": "memory_location",
                "param_2": "flags"
            },
            "code": "void set_flags_on_memory_location_000811b4(int* memory_location, int flags) {\n    *memory_location = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_flags_on_memory_location_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_data_to_0x8000_000816d4",
                "DAT_000816dc": "data",
                "PTR_": ""
            },
            "code": "void set_data_to_0x8000_000816d4(void)\n{\n  int* DAT_000816dc_ptr = (int *)(DAT_000816dc + 4);\n  *DAT_000816dc_ptr = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = FUN_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_parameters_00080d7a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "param_1_present",
                "param_4": "param_2_present",
                "param_5": "param_3_present"
            },
            "code": "void set_parameters_00080d7a(undefined4 *parameters, undefined4 value, int param_1_present, int param_2_present, int param_3_present) {\n  parameters[0x11] = value;\n  if (param_3_present == 0) {\n    parameters[0xc] = value;\n  }\n  else {\n    parameters[0xd] = value;\n  }\n  if (param_2_present == 0) {\n    parameters[0x14] = value;\n  }\n  else {\n    parameters[0x15] = value;\n  }\n  if (param_1_present == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initializeMemory_00080e9c",
                "puVar1": "ptr1",
                "iVar2": "ptr2",
                "DAT_00080f08": "globalArray",
                "DAT_00080f0c": "globalVar",
                "DAT_00080f14": "initialVal1",
                "DAT_00080f10": "initialVal2",
                "DAT_00080f18": "initialVal3",
                "DAT_00080f20": "globalVar",
                "*DAT_00080f20": "*globalVar"
            },
            "code": "void initializeMemory_00080e9c(void)\n{\n    int *ptr1 = DAT_00080f08;\n    *DAT_00080f08 = 0x400;\n    DAT_00080f08[0x80] = 0x400;\n    int *ptr2 = DAT_00080f0c;\n    if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n        *(int *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n        while (-1 < *(int *)(ptr2 + 0x68) << 0x1f);\n    }\n    *(int *)(ptr2 + 0x20) = DAT_00080f10;\n    while (-1 < *(int *)(ptr2 + 0x68) << 0xf);\n    *(unsigned int *)(DAT_00080f0c + 0x30) = *(unsigned int *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n    while (-1 < *(int *)(ptr2 + 0x68) << 0x1c);\n    *(int *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n    while (-1 < *(int *)(ptr2 + 0x68) << 0x1e);\n    *(unsigned int *)(DAT_00080f0c + 0x30) = 0x11;\n    while (-1 < *(int *)(ptr2 + 0x68) << 0x1c);\n    *(unsigned int *)(DAT_00080f0c + 0x30) = 0x12;\n    while (-1 < *(int *)(ptr2 + 0x68) << 0x1c);\n    *DAT_00080f20 = initialVal4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initializeMemory_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "input_short",
                "puVar2": "ptr",
                "iVar3": "result",
                "uVar4": "input_ushort"
            },
            "code": "void process_data_00084464(int *output, int input, undefined4 arg1, undefined4 arg2) {\n  short input_short = *(short *)(input + 0xe);\n  ushort input_ushort = *(ushort *)(input + 0xc);\n  if ((int)((uint)input_ushort << 0x17) < 0) {\n    FUN_00084700(output, (int)input_short, 0, 2);\n    input_ushort = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = input_ushort & 0xefff;\n  undefined *ptr = PTR_DAT_000845fc;\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  int result = FUN_000811cc((int)input_short, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae"
            },
            "code": "unsigned int get_error_code_000811ae(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input",
                "puVar1": "sum_ptr",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_0008118c(int input)\n{\n  int *sum_ptr = PTR_DAT_000811a0;\n  if (*sum_ptr == 0) {\n    *sum_ptr = DAT_000811a4;\n  }\n  int current_sum = *sum_ptr;\n  *sum_ptr = input + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculate_sum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_of_uint_00082a50",
                "param_1": "input_uint",
                "puVar2": "input_uint_ptr",
                "iVar1": "byte_count",
                "uVar3": "current_uint",
                "bVar4": "is_byte_zero"
            },
            "code": "int count_bytes_of_uint_00082a50(uint input_uint) {\n  int byte_count = 0;\n  uint *input_uint_ptr = (uint *)(input_uint & 0xfffffffc);\n  int remaining_bits = -(input_uint & 3);\n  uint current_uint = *input_uint_ptr;\n  if ((input_uint & 3) != 0) {\n    current_uint = current_uint | 0xffffffffU >> ((remaining_bits + 4U & 0x1f) << 3);\n  }\n  while (input_uint_ptr = input_uint_ptr + 1, (current_uint + 0xfefefeff & ~current_uint & 0x80808080) == 0) {\n    byte_count = byte_count + 4;\n    current_uint = *input_uint_ptr;\n  }\n  bool is_byte_zero = (current_uint & 0xff) == 0;\n  if (!is_byte_zero) {\n    byte_count = byte_count + 1;\n    is_byte_zero = (current_uint & 0xff00) == 0;\n  }\n  if (!is_byte_zero) {\n    byte_count = byte_count + 1;\n    is_byte_zero = (current_uint & 0xff0000) == 0;\n  }\n  if (!is_byte_zero) {\n    byte_count = byte_count + 1;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "count_bytes_of_uint_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_parameter_at_offset_0008106e(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "returnZero_000811c2"
            },
            "code": "int returnZero_000811c2(void) {\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "returnZero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "calculate_sum_of_numbers_000811c6",
                "undefined4": "int",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int calculate_sum_of_numbers_000811c6(void)\n{\n    int sum = 0;\n    return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_numbers_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "base_address",
                "puVar2": "ptr",
                "iVar3": "temp",
                "uVar4": "header",
                "iVar5": "block_size",
                "DAT_00083d90": "base_address_offset",
                "do_nothing_00082598": "do_nothing_1",
                "PTR_DAT_00083d94": "ptr_offset",
                "do_nothing_0008259c": "do_nothing_2",
                "FUN_00082970": "get_free_block_end",
                "DAT_00083d98": "first_free_block_offset"
            },
            "code": "int allocate_memory_00083d00(void* buffer, int size) {\n  int base_address = DAT_00083d90;\n  do_nothing_00082598();\n  uint header = *(uint *)(*(int *)(base_address + 8) + 4) & 0xfffffffc;\n  int block_size = ((header - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_size) {\n    int free_block_end = FUN_00082970(buffer, 0);\n    if (free_block_end == *(int *)(base_address + 8) + header) {\n      int new_block_end = FUN_00082970(buffer, -block_size);\n      undefined *ptr = PTR_DAT_00083d94;\n      if (new_block_end != -1) {\n        int old_block_end = *(int *)PTR_DAT_00083d94;\n        *(uint *)(*(int *)(base_address + 8) + 4) = header - block_size | 1;\n        *(int *)ptr = old_block_end - block_size;\n        do_nothing_0008259c(buffer);\n        return 1;\n      }\n      int free_block_start = FUN_00082970(buffer, 0);\n      ptr = PTR_DAT_00083d94;\n      uint free_block_size = free_block_start - *(int *)(base_address + 8);\n      if (0xf < (int)free_block_size) {\n        int first_free_block = *DAT_00083d98;\n        *(uint *)(*(int *)(base_address + 8) + 4) = free_block_size | 1;\n        *(int *)ptr = free_block_start - first_free_block;\n      }\n    }\n  }\n  do_nothing_0008259c(buffer);\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        }
    },
    "used_tokens": 97713,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ],
        [
            "FUN_00082ac0"
        ]
    ],
    "locked_functions": []
}