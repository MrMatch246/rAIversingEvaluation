{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_if_false_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlagIfFalse_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_false_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **data)\n\n{\n  int result;\n  \n  *data = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081210(*(byte *)((int)data + 6),1);\n    FUN_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverflow;\n  undefined result;\n  char counter;\n  int status;\n  byte tempVar;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (status = (**(code **)(**data + 8))(), status != 0) {\n      tempVar = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + tempVar + 9) = result;\n      tempVar = counter + 1;\n      *(byte *)((int)data + 0x49) = tempVar;\n      if (0x3f < tempVar) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "status",
                "bVar5": "tempVar"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_address,uint data_length)\n\n{\n  int current_address;\n  uint checksum;\n  char bit_count;\n  uint bit_in_checksum;\n  \n  checksum = 0xffff;\n  for (current_address = data_address; (current_address - data_address & 0xffU) < data_length; current_address = current_address + 1) {\n    checksum = checksum ^ *(byte *)(current_address + 9);\n    bit_count = '\\b';\n    do {\n      bit_in_checksum = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_in_checksum != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_address",
                "param_2": "data_length",
                "iVar1": "current_address",
                "uVar2": "checksum",
                "cVar3": "bit_count",
                "uVar4": "bit_in_checksum"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_data_00080258",
            "code": "\nvoid updateData_00080258(int **dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  undefined2 result;\n  int returnValue;\n  uint convertedByte;\n  \n  byteValue = *(byte *)((int)dataPointer + 0x49);\n  convertedByte = (uint)byteValue;\n  result = FUN_0008021c(dataPointer,convertedByte,param3,param4,param4);\n  *(char *)((int)dataPointer + convertedByte + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)dataPointer + (convertedByte + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)dataPointer + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081318(*(byte *)((int)dataPointer + 6),1);\n  }\n  if (*(byte *)((int)dataPointer + 5) < 4) {\n    (**(code **)(**dataPointer + 4))(*dataPointer,(int)dataPointer + 9,*(undefined *)((int)dataPointer + 0x49));\n  }\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081318(*(byte *)((int)dataPointer + 6),0);\n  }\n  if (*(byte *)((int)dataPointer + 5) < 4) {\n    do {\n      returnValue = (**(code **)(**dataPointer + 0xc))();\n    } while (-1 < returnValue);\n  }\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  returnValue = thunk_FUN_00081714();\n  dataPointer[0x17] = (int *)(returnValue + (uint)*(ushort *)((int)dataPointer + 0x56));\n  *(short *)((int)dataPointer + 0x52) = *(short *)((int)dataPointer + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_data_00080258",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue",
                "uVar2": "result",
                "iVar3": "returnValue",
                "uVar4": "convertedByte"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_process_data_000802da",
            "code": "\nint validateAndProcessData_000802da(int data,uint flags,uint value,ushort *array)\n\n{\n  char result;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *ushortPtr;\n  undefined tempVar1;\n  undefined tempVar2;\n  ushort tempVar3;\n  \n  tempVar1 = (undefined)flags;\n  tempVar2 = (undefined)(flags >> 8);\n  tempVar3 = (ushort)value;\n  uintVar = value & 0xffff;\n  if (*(char *)(data + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(data + 9) = tempVar1;\n  *(undefined *)(data + 10) = tempVar2;\n  *(ushort **)(data + 0x4c) = array;\n  *(char *)(data + 0xb) = (char)(flags >> 0x18);\n  *(char *)(data + 0xc) = (char)(flags >> 0x10);\n  undefinedVar = (undefined)(value >> 8);\n  switch(tempVar2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *array;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(data + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(data + 0xd) = (char)(*array >> 8);\n    uintVar = (uint)*array;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(tempVar3 >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(data + 0xe) = (char)value;\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(byte *)(data + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(char *)(data + 0xe) = (char)value;\n    array = array + -1;\n    *(char *)(data + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(data + 0x49) = 7;\n    ushortPtr = array + uintVar;\n    while (array != ushortPtr) {\n      byteVar = *(byte *)(data + 0x49);\n      *(char *)(data + (uint)byteVar + 9) = (char)(array[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(data + 0x49) = (char)uintVar;\n      array = array + 1;\n      *(char *)(uintVar + data + 9) = (char)*array;\n      *(byte *)(data + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nLAB_0008034a:\n  *(undefined *)(data + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(data);\n  *(undefined *)(data + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_process_data_000802da",
                "param_1": "data",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "array",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "ushortPtr",
                "local_1c": "tempVar1",
                "local_1b": "tempVar2",
                "local_18": "tempVar3"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int index;\n  byte counter;\n  uint convertedCounter;\n  int offset;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data + 0xb) >> 1 <= convertedCounter) break;\n    index = (convertedCounter * 2 + 3 & 0xff) + data;\n    offset = *(int *)(data + 0x4c);\n    result = FUN_000815f8(*(undefined *)(index + 9),*(undefined *)(index + 10),index,\n                         *(byte *)(data + 0xb),param4);\n    *(undefined2 *)(offset + convertedCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "index",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "offset"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_process_data_0008043e",
            "code": "\nint check_and_process_data_0008043e(int **data_array)\n\n{\n  char result;\n  uint function_result;\n  int *thunk_result;\n  int error_code;\n  uint buffer_size;\n  \n  if (*(byte *)((int)data_array + 5) < 4) {\n    function_result = (**(code **)(**data_array + 8))();\n    buffer_size = function_result & 0xff;\n  }\n  thunk_result = (int *)thunk_FUN_00081714();\n  if (data_array[0x17] < thunk_result) {\n    *(undefined *)(data_array + 2) = 0xff;\n    *(undefined *)((int)data_array + 7) = 0;\n    *(short *)(data_array + 0x15) = *(short *)(data_array + 0x15) + 1;\n  }\n  else if (7 < buffer_size) {\n    FUN_000801b0(data_array);\n    error_code = FUN_000803d4(data_array);\n    if (error_code == 0) {\n      if (*(byte *)((int)data_array + 10) - 3 < 2) {\n        FUN_00080410(data_array);\n      }\n      *(undefined *)((int)data_array + 7) = 0;\n      result = *(char *)((int)data_array + 0x49);\n    }\n    else {\n      *(undefined *)((int)data_array + 7) = 0;\n      result = (char)error_code;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "param_1": "data_array",
                "cVar1": "result",
                "uVar2": "function_result",
                "piVar3": "thunk_result",
                "iVar4": "error_code",
                "unaff_r6": "buffer_size"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_hardware_000804a8",
            "code": "\nundefined8 initializeHardware_000804a8(void)\n\n{\n  int returnValue;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  returnValue = thunk_FUN_00081714();\n  DAT_200709e0 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_20070a48 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_20070934 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_200708c0 = returnValue + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    executeInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_hardware_000804a8",
                "iVar1": "returnValue",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "calculate_metrics_000805d0",
            "code": "\n\n\nvoid calculateMetrics_000805d0(void)\n\n{\n  uint result;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  int loopCounter;\n  uint *ptrCounter;\n  undefined4 *ptrData;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrData = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptrData,ptrData[1],ptrData[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrData = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrCounter = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrCounter = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      loopCounter = thunk_FUN_00081714();\n      DAT_200708c0 = loopCounter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        loopCounter = thunk_FUN_00081714();\n        DAT_200708c0 = loopCounter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrCounter = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        loopCounter = thunk_FUN_00081714();\n        DAT_200708c0 = loopCounter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    tempVar1 = FUN_0008189c(DAT_20070940);\n    tempVar2 = FUN_00081730(tempVar1,DAT_200709c8);\n    tempVar1 = DAT_200708c4;\n    DAT_20070930 = tempVar2;\n    tempVar3 = FUN_00081734(tempVar2,DAT_200708c4);\n    tempVar3 = FUN_00081944(tempVar3,DAT_2007094c);\n    tempVar3 = FUN_00081734(tempVar3,DAT_20070914);\n    DAT_2007094c = tempVar3;\n    tempVar1 = FUN_00081730(tempVar2,tempVar1);\n    tempVar1 = FUN_00081944(tempVar1,DAT_200709c4);\n    tempVar1 = FUN_00081730(tempVar1,DAT_2007096c);\n    DAT_200709c4 = tempVar1;\n    tempVar4 = FUN_00081944(tempVar2,DAT_20070a4c);\n    tempVar4 = FUN_00081734(tempVar4,tempVar3);\n    FUN_00081734(tempVar4,tempVar1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = tempVar2;\n    DAT_20070914 = tempVar3;\n    DAT_2007096c = tempVar1;\n    loopCounter = thunk_FUN_00081714();\n    DAT_200709e0 = loopCounter + DAT_20070970;\n  }\n  tempVar1 = FUN_0008189c(DAT_20070970);\n  loopCounter = FUN_00081ca8(DAT_2007091c,tempVar1);\n  if (loopCounter != 0) {\n    DAT_2007091c = tempVar1;\n  }\n  loopCounter = FUN_00081c94(DAT_2007091c,0);\n  if (loopCounter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "calculate_metrics_000805d0",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "loopCounter",
                "puVar7": "ptrCounter",
                "puVar8": "ptrData"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_settings_00080a68",
            "code": "\nvoid initializeSettings_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_settings_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_components_00080c0c",
            "code": "\nvoid initializeComponents_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_components_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_perform_actions_00080ce0",
            "code": "\nvoid checkAndPerformActions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_perform_actions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_value_00080d2e",
            "code": "\nvoid updateValue_00080d2e(int baseAddress,undefined4 operation,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_values_00080d54",
            "code": "\nvoid updateValues_00080d54(undefined4 *outputArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[17] = newValue;\n  if (isNegative) {\n    outputArray[25] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[24] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[32] = newValue;\n  }\n  outputArray[5] = newValue;\n  *outputArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_values_00080d54",
                "param_1": "outputArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative",
                "param_1[0x11]": "outputArray[17]",
                "param_1[0x19]": "outputArray[25]",
                "param_1[0x18]": "outputArray[24]",
                "param_1[8]": "outputArray[8]",
                "param_1[9]": "outputArray[9]",
                "param_1[0x20]": "outputArray[32]",
                "param_1[5]": "outputArray[5]"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_params_00080d7a",
            "code": "\nvoid updateParams_00080d7a(undefined4 *paramArray,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  paramArray[0x11] = newValue;\n  if (condition3 == 0) {\n    paramArray[0x18] = newValue;\n  }\n  else {\n    paramArray[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    paramArray[0x15] = newValue;\n  }\n  else {\n    paramArray[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    paramArray[0xd] = newValue;\n  }\n  else {\n    paramArray[0xc] = newValue;\n  }\n  paramArray[4] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_params_00080d7a",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_data_00080da0",
            "code": "\nundefined4 updateData_00080da0(int data,int option,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    FUN_00080d2e(data,option,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(data + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(data + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(data,newValue,flags,0x80d55,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(data,newValue,option == 5,(flags << 0x1d) >> 0x1f,flags & 1,option,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_data_00080da0",
                "param_1": "data",
                "param_2": "option",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_permissions_00080e04",
            "code": "\nuint check_permissions_00080e04(int base_address,uint permissions)\n\n{\n  uint result;\n  \n  result = *(uint *)(base_address + 8) & permissions;\n  if (result != 0) {\n    if ((permissions & *(uint *)(base_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_permissions_00080e04",
                "param_1": "base_address",
                "param_2": "permissions",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bit;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit = 1 << (value & 0xff);\n      if ((bit & _DAT_400e0618) != bit) {\n        _DAT_400e0610 = bit;\n      }\n    }\n    else {\n      bit = 1 << (value - 0x20 & 0xff);\n      if ((bit & _DAT_400e0708) != bit) {\n        _DAT_400e0700 = bit;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bit"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_data_00080e9c",
            "code": "\n\n\nvoid initializeData_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  addressArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_data_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "addressArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *threshold,uint inputSize,int factor1,int factor2)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  quotient = inputSize / (uint)(factor1 * 2);\n  if (inputSize == factor1 * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(factor2 * (int)(((ulonglong)inputSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdValues[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "threshold",
                "param_2": "inputSize",
                "param_3": "factor1",
                "param_4": "factor2",
                "local_58": "thresholdValues",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_bitwise_operations_00081034",
            "code": "\nvoid updateBitwiseOperations_00081034(int address,uint value,uint bitFlag)\n\n{\n  *(uint *)(address + 4) = value | *(uint *)(address + 4) | (bitFlag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_bitwise_operations_00081034",
                "param_1": "address",
                "param_2": "value",
                "param_3": "bitFlag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "combine_parameters_00081042",
            "code": "\nvoid combineParameters_00081042(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "combine_parameters_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_position_0008105c",
            "code": "\nvoid setBitPosition_0008105c(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_position_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "store_param_to_memory_0008106e",
            "code": "\nvoid storeParamToMemory_0008106e(int memoryOffset,undefined4 value)\n\n{\n  *(undefined4 *)(memoryOffset + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "store_param_to_memory_0008106e",
                "param_1": "memoryOffset",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "get_return_value_00081184",
            "code": "\nundefined4 getReturnValue_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "get_return_value_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_offset_0008118c",
            "code": "\nint calculateOffset_0008118c(int inputValue)\n\n{\n  int originalAddress;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  originalAddress = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return originalAddress;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_offset_0008118c",
                "param_1": "inputValue",
                "iVar1": "originalAddress"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_error_code_000811ae",
            "code": "\nundefined4 getErrorCode_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_default_000811be",
            "code": "\nundefined4 initializeDefault_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_default_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nundefined4 initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "execute_default_action_000811c6",
            "code": "\nvoid execute_default_action_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "execute_default_action_000811c6",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 dest,int src,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_data_thunk_00081714",
            "code": "\nundefined4 get_global_data_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_data_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "handle_param_input_00081210",
            "code": "\n\n\nint handleParamInput_00081210(int inputIndex,int paramType)\n\n{\n  int returnValue;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte extractedValue1;\n  byte extractedValue2;\n  int tempVar4;\n  int tempVar5;\n  \n  returnValue = inputIndex;\n  if ((&DAT_00084d24)[inputIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputIndex] & 0xf) == 4) {\n      returnValue = FUN_0008105c(0x400c0000,(&DAT_00084d31)[inputIndex * 0x1c]);\n    }\n    extractedValue2 = (&DAT_20070d94)[inputIndex];\n    extractedValue1 = extractedValue2 & 0xf;\n    if ((extractedValue1 < 3) && (extractedValue2 != 0)) {\n      if (extractedValue1 == 2) {\n        if (paramType == 0) {\n          return returnValue;\n        }\n      }\n      else if (extractedValue1 == 1) {\n        if (paramType == 2) {\n          return returnValue;\n        }\n      }\n      else if (extractedValue1 == 3) {\n        if (paramType == 1) {\n          return returnValue;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (paramType != 1) {\nLAB_0008126c:\n      if (paramType == 0) {\n        returnValue = inputIndex * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),0);\n        extractedValue2 = (&DAT_20070d94)[inputIndex] & 0xf0 | 2;\n      }\n      else {\n        if (paramType != 2) {\n          return returnValue;\n        }\n        returnValue = inputIndex * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),1);\n        extractedValue2 = (&DAT_20070d94)[inputIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputIndex] = extractedValue2;\n      return returnValue;\n    }\n    tempVar4 = inputIndex * 0x1c;\n    tempVar5 = *(int *)(&DAT_00084d18 + tempVar4);\n    if (extractedValue2 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    returnValue = FUN_00080da0(tempVar5,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[inputIndex] = (&DAT_20070d94)[inputIndex] & 0xf0 | 3;\n    if (*(int *)(tempVar5 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081210": "handle_param_input_00081210",
                "param_1": "inputIndex",
                "param_2": "paramType",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "extractedValue1",
                "bVar6": "extractedValue2",
                "iVar7": "tempVar4",
                "iVar8": "tempVar5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid updateData_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 valueToAssign;\n  int data;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    data = *(int *)(&DAT_00084d18 + index * 0x1c);\n    valueToAssign = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(data,valueToAssign);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data + 100) = valueToAssign;\n        return;\n      }\n      *(undefined4 *)(data + 0x60) = valueToAssign;\n      return;\n    }\n    FUN_00080d7a(data,valueToAssign,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "valueToAssign",
                "iVar3": "data"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "decrement_and_execute_if_zero_00081388",
            "code": "\nvoid decrementAndExecuteIfZero_00081388(void)\n\n{\n  if ((relElementInfo != 0xffffffff) &&\n     (relElementInfo = relElementInfo - 1,\n     relElementInfo == 0)) {\n    (*(code *)((int)&relOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "decrement_and_execute_if_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "Elf32_Rel_ARRAY_20070000[6].r_info": "relElementInfo",
                "Elf32_Rel_ARRAY_20070000[0].r_offset": "relOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryBase)\n\n{\n  FUN_00082504(memoryBase,0,0x80);\n  *(undefined4 *)(memoryBase + 0x80) = 0;\n  *(undefined4 *)(memoryBase + 0x84) = 0;\n  return memoryBase;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryBase"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_data_and_index_000813c2",
            "code": "\nvoid updateDataAndIndex_000813c2(int dataIndex,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(dataIndex + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(dataIndex + 0x84)) {\n    *(undefined *)(dataIndex + *(int *)(dataIndex + 0x80)) = newValue;\n    *(uint *)(dataIndex + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_data_and_index_000813c2",
                "param_1": "dataIndex",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputParam)\n\n{\n  return *(int *)(*(int *)(inputParam + 0x10) + 0x80) - *(int *)(*(int *)(inputParam + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPtr,undefined4 newValue)\n\n{\n  int dataOffset;\n  uint newIndex;\n  \n  dataOffset = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataOffset + 0x84) == *(int *)(dataOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataOffset + 0x84) == newIndex);\n    *(char *)(dataOffset + *(int *)(dataOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "dataOffset",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *paramsArray,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  paramsArray[1] = 0;\n  paramsArray[2] = 1000;\n  paramsArray[6] = value1;\n  *paramsArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(paramsArray + 7) = value2;\n  paramsArray[4] = value4;\n  paramsArray[8] = value3;\n  paramsArray[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "paramsArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_module_00081508",
            "code": "\nvoid initializeModule_00081508(int module,uint paramSize,undefined4 initialValue)\n\n{\n  int ptr1;\n  undefined4 *ptr2;\n  \n  FUN_00080e18(*(undefined4 *)(module + 0x20));\n  ptr2 = *(undefined4 **)(module + 0x18);\n  ptr2[0x48] = 0x202;\n  *ptr2 = 0xac;\n  ptr2[1] = initialValue;\n  ptr2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / paramSize >> 4;\n  ptr2[3] = 0xffffffff;\n  ptr2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(module + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(module + 0x1c) & 0x1f);\n  ptr1 = *(int *)(module + 0x10);\n  *(undefined4 *)(ptr1 + 0x84) = 0;\n  *(undefined4 *)(ptr1 + 0x80) = 0;\n  ptr1 = *(int *)(module + 0x14);\n  *(undefined4 *)(ptr1 + 0x84) = 0;\n  *(undefined4 *)(ptr1 + 0x80) = 0;\n  *ptr2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_module_00081508",
                "param_1": "module",
                "param_2": "paramSize",
                "param_3": "initialValue",
                "iVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_function_000815d4",
            "code": "\nundefined4 * initializeFunction_000815d4(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *outputArray = &PTR_FUN_00081454_1_000857d8;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_function_000815d4",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int baseValue,uint offsetValue)\n\n{\n  return offsetValue | baseValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "baseValue",
                "param_2": "offsetValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "call_another_function_000815fe",
            "code": "\nundefined4 * callAnotherFunction_000815fe(undefined4 *inputArray)\n\n{\n  FUN_00081e04(*inputArray);\n  return inputArray;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "call_another_function_000815fe",
                "param_1": "inputArray"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_data_0008160c",
            "code": "\nvoid resetData_0008160c(int *dataPointer)\n\n{\n  if (*dataPointer != 0) {\n    FUN_00081e04();\n  }\n  *dataPointer = 0;\n  dataPointer[2] = 0;\n  dataPointer[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_data_0008160c",
                "param_1": "dataPointer",
                "param_1[1]": "dataPointer[1]",
                "param_1[2]": "dataPointer[2]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_array_00081622",
            "code": "\nint updateArray_00081622(int *array,int index,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*array,index + 1,value1,value2,value2);\n  if (result != 0) {\n    *array = result;\n    array[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_array_00081622",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_validity_0008163a",
            "code": "\nundefined4 checkValidity_0008163a(int *array,uint value)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < value)) {\n    result = FUN_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_validity_0008163a",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "check_and_perform_operation_0008165c",
            "code": "\nundefined4 * check_and_perform_operation_0008165c(undefined4 *output,undefined4 input1,undefined4 input2)\n\n{\n  int result;\n  \n  result = FUN_0008163a(output,input2);\n  if (result == 0) {\n    FUN_0008160c(output);\n  }\n  else {\n    output[2] = input2;\n    FUN_00082994(*output,input1);\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "check_and_perform_operation_0008165c",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_data_00081682",
            "code": "\nundefined4 * initializeData_00081682(undefined4 *data,int value)\n\n{\n  undefined4 result;\n  \n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  if (value != 0) {\n    result = FUN_00082a50(value);\n    FUN_0008165c(data,value,result);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_data_00081682",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_continuous_loop_000816a8",
            "code": "\nvoid runContinuousLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_continuous_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_variable_value_00081714",
            "code": "\nundefined4 getGlobalVariableValue_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_variable_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint floatValue1,uint floatValue2,undefined4 floatParam,uint floatResult)\n\n{\n  int signBitValue;\n  int shiftedSignBitValue;\n  uint absoluteValue1;\n  uint absoluteValue2;\n  uint shiftedFloatValue1;\n  uint tempFloat;\n  uint difference;\n  bool isZero;\n  \n  absoluteValue1 = floatValue2 ^ 0x80000000;\n  shiftedFloatValue1 = floatValue1 << 1;\n  isZero = shiftedFloatValue1 == 0;\n  if (!isZero) {\n    floatResult = floatValue2 << 1;\n    isZero = floatResult == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedFloatValue1 == floatResult;\n  }\n  signBitValue = (int)shiftedFloatValue1 >> 0x18;\n  if (!isZero) {\n    isZero = signBitValue == -1;\n  }\n  if (!isZero) {\n    isZero = (int)floatResult >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedSignBitValue = (int)(floatValue2 << 1) >> 0x18;\n    if (signBitValue == -1 || shiftedSignBitValue == -1) {\n      shiftedFloatValue1 = absoluteValue1;\n      if (signBitValue == -1) {\n        shiftedFloatValue1 = floatValue1;\n      }\n      if (signBitValue != -1 || shiftedSignBitValue != -1) {\n        absoluteValue1 = shiftedFloatValue1;\n      }\n      isZero = (shiftedFloatValue1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (absoluteValue1 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedFloatValue1 == absoluteValue1;\n      }\n      if (!isZero) {\n        shiftedFloatValue1 = shiftedFloatValue1 | 0x400000;\n      }\n      return shiftedFloatValue1;\n    }\n    if (((floatValue1 ^ absoluteValue1) & 0x7fffffff) != 0) {\n      if (shiftedFloatValue1 == 0) {\n        floatValue1 = absoluteValue1;\n      }\n      return floatValue1;\n    }\n    if (floatValue1 != absoluteValue1) {\n      return 0;\n    }\n    if ((shiftedFloatValue1 & 0xff000000) == 0) {\n      absoluteValue1 = floatValue1 << 1;\n      if ((floatValue1 & 0x80000000) != 0) {\n        absoluteValue1 = absoluteValue1 | 0x80000000;\n      }\n      return absoluteValue1;\n    }\n    if (shiftedFloatValue1 < 0xfe000000) {\n      return floatValue1 + 0x800000;\n    }\n    floatValue1 = floatValue1 & 0x80000000;\nLAB_0008186a:\n    return floatValue1 | 0x7f800000;\n  }\n  shiftedFloatValue1 = shiftedFloatValue1 >> 0x18;\n  floatResult = floatResult >> 0x18;\n  difference = floatResult - shiftedFloatValue1;\n  isZero = difference != 0;\n  tempFloat = shiftedFloatValue1;\n  if (isZero && shiftedFloatValue1 <= floatResult) {\n    tempFloat = shiftedFloatValue1 + difference;\n  }\n  if (isZero && shiftedFloatValue1 <= floatResult) {\n    absoluteValue1 = absoluteValue1 ^ floatValue1;\n  }\n  if (isZero && shiftedFloatValue1 <= floatResult) {\n    floatValue1 = floatValue1 ^ absoluteValue1;\n  }\n  if (isZero && shiftedFloatValue1 <= floatResult) {\n    absoluteValue1 = absoluteValue1 ^ floatValue1;\n  }\n  if (floatResult < shiftedFloatValue1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return floatValue1;\n  }\n  shiftedFloatValue1 = floatValue1 & 0xffffff | 0x800000;\n  if ((floatValue1 & 0x80000000) != 0) {\n    shiftedFloatValue1 = -shiftedFloatValue1;\n  }\n  absoluteValue2 = absoluteValue1 & 0xffffff | 0x800000;\n  if ((absoluteValue1 & 0x80000000) != 0) {\n    absoluteValue2 = -absoluteValue2;\n  }\n  if (tempFloat == difference) {\n    absoluteValue2 = absoluteValue2 ^ 0x800000;\n    if (tempFloat == 0) {\n      shiftedFloatValue1 = shiftedFloatValue1 ^ 0x800000;\n      tempFloat = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedFloatValue1 = shiftedFloatValue1 + ((int)absoluteValue2 >> (difference & 0xff));\n  absoluteValue2 = absoluteValue2 << (0x20 - difference & 0xff);\n  floatValue1 = shiftedFloatValue1 & 0x80000000;\n  if ((int)shiftedFloatValue1 < 0) {\n    isZero = absoluteValue2 != 0;\n    absoluteValue2 = -absoluteValue2;\n    shiftedFloatValue1 = -shiftedFloatValue1 - (uint)isZero;\n  }\n  if (shiftedFloatValue1 < 0x800000) {\n    absoluteValue1 = absoluteValue2 & 0x80000000;\n    absoluteValue2 = absoluteValue2 << 1;\n    shiftedFloatValue1 = shiftedFloatValue1 * 2 + (uint)(absoluteValue1 != 0);\n    absoluteValue1 = tempFloat - 2;\n    if ((shiftedFloatValue1 & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedFloatValue1) - 8;\n      shiftedFloatValue1 = shiftedFloatValue1 << (difference & 0xff);\n      if ((int)absoluteValue1 < (int)difference) {\n        shiftedFloatValue1 = shiftedFloatValue1 >> (-(absoluteValue1 - difference) & 0xff);\n      }\n      else {\n        shiftedFloatValue1 = shiftedFloatValue1 + (absoluteValue1 - difference) * 0x800000;\n      }\n      return shiftedFloatValue1 | floatValue1;\n    }\n  }\n  else {\n    absoluteValue1 = tempFloat - 1;\n    if (0xffffff < shiftedFloatValue1) {\n      absoluteValue1 = shiftedFloatValue1 & 1;\n      shiftedFloatValue1 = shiftedFloatValue1 >> 1;\n      absoluteValue2 = (uint)(absoluteValue1 != 0) << 0x1f | absoluteValue2 >> 1;\n      absoluteValue1 = tempFloat;\n      if (0xfd < tempFloat) goto LAB_0008186a;\n    }\n  }\n  shiftedFloatValue1 = shiftedFloatValue1 + absoluteValue1 * 0x800000 + (uint)(0x7fffffff < absoluteValue2);\n  if (absoluteValue2 == 0x80000000) {\n    shiftedFloatValue1 = shiftedFloatValue1 & 0xfffffffe;\n  }\n  return shiftedFloatValue1 | floatValue1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "floatValue1",
                "param_2": "floatValue2",
                "param_3": "floatParam",
                "param_4": "floatResult",
                "iVar1": "signBitValue",
                "iVar2": "shiftedSignBitValue",
                "uVar3": "absoluteValue1",
                "uVar4": "absoluteValue2",
                "uVar5": "shiftedFloatValue1",
                "uVar6": "tempFloat",
                "uVar7": "difference",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_00081734",
            "code": "\nuint calculateFloat_00081734(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  int shiftRight1;\n  int shiftRight2;\n  uint absValue1;\n  uint absValue2;\n  uint shiftAmount;\n  uint difference;\n  bool isEqual;\n  \n  absValue2 = value1 << 1;\n  isEqual = absValue2 == 0;\n  if (!isEqual) {\n    param4 = value2 << 1;\n    isEqual = param4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = absValue2 == param4;\n  }\n  shiftRight1 = (int)absValue2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftRight1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftRight2 = (int)(value2 << 1) >> 0x18;\n    if (shiftRight1 == -1 || shiftRight2 == -1) {\n      absValue2 = value2;\n      if (shiftRight1 == -1) {\n        absValue2 = value1;\n      }\n      if (shiftRight1 != -1 || shiftRight2 != -1) {\n        value2 = absValue2;\n      }\n      isEqual = (absValue2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (value2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = absValue2 == value2;\n      }\n      if (!isEqual) {\n        absValue2 = absValue2 | 0x400000;\n      }\n      return absValue2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (absValue2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((absValue2 & 0xff000000) == 0) {\n      absValue2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        absValue2 = absValue2 | 0x80000000;\n      }\n      return absValue2;\n    }\n    if (absValue2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_0008186a:\n    return value1 | 0x7f800000;\n  }\n  absValue2 = absValue2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - absValue2;\n  isEqual = difference != 0;\n  shiftAmount = absValue2;\n  if (isEqual && absValue2 <= param4) {\n    shiftAmount = absValue2 + difference;\n  }\n  if (isEqual && absValue2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (isEqual && absValue2 <= param4) {\n    value1 = value1 ^ value2;\n  }\n  if (isEqual && absValue2 <= param4) {\n    value2 = value2 ^ value1;\n  }\n  if (param4 < absValue2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return value1;\n  }\n  absValue2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    absValue2 = -absValue2;\n  }\n  absValue1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    absValue1 = -absValue1;\n  }\n  if (shiftAmount == difference) {\n    absValue1 = absValue1 ^ 0x800000;\n    if (shiftAmount == 0) {\n      absValue2 = absValue2 ^ 0x800000;\n      shiftAmount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  absValue2 = absValue2 + ((int)absValue1 >> (difference & 0xff));\n  absValue1 = absValue1 << (0x20 - difference & 0xff);\n  value1 = absValue2 & 0x80000000;\n  if ((int)absValue2 < 0) {\n    isEqual = absValue1 != 0;\n    absValue1 = -absValue1;\n    absValue2 = -absValue2 - (uint)isEqual;\n  }\n  if (absValue2 < 0x800000) {\n    difference = absValue1 & 0x80000000;\n    absValue1 = absValue1 << 1;\n    absValue2 = absValue2 * 2 + (uint)(difference != 0);\n    difference = shiftAmount - 2;\n    if ((absValue2 & 0x800000) == 0) {\n      shiftAmount = LZCOUNT(absValue2) - 8;\n      absValue2 = absValue2 << (shiftAmount & 0xff);\n      if ((int)difference < (int)shiftAmount) {\n        absValue2 = absValue2 >> (-(difference - shiftAmount) & 0xff);\n      }\n      else {\n        absValue2 = absValue2 + (difference - shiftAmount) * 0x800000;\n      }\n      return absValue2 | value1;\n    }\n  }\n  else {\n    difference = shiftAmount - 1;\n    if (0xffffff < absValue2) {\n      difference = absValue2 & 1;\n      absValue2 = absValue2 >> 1;\n      absValue1 = (uint)(difference != 0) << 0x1f | absValue1 >> 1;\n      difference = shiftAmount;\n      if (0xfd < shiftAmount) goto LAB_0008186a;\n    }\n  }\n  absValue2 = absValue2 + difference * 0x800000 + (uint)(0x7fffffff < absValue1);\n  if (absValue1 == 0x80000000) {\n    absValue2 = absValue2 & 0xfffffffe;\n  }\n  return absValue2 | value1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftRight1",
                "iVar2": "shiftRight2",
                "uVar3": "absValue1",
                "uVar4": "absValue2",
                "uVar5": "shiftAmount",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculateResult_00081894(uint inputNumber)\n\n{\n  uint leadingZeroes;\n  uint tempValue2;\n  int constant;\n  uint tempValue;\n  \n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputNumber);\n  tempValue2 = leadingZeroes - 8;\n  constant = tempValue2 * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    tempValue = 0 << (tempValue2 & 0xff);\n    leadingZeroes = constant + (inputNumber << (tempValue2 & 0xff)) +\n            (0U >> (0x20 - tempValue2 & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  tempValue2 = inputNumber << leadingZeroes + 0x18;\n  leadingZeroes = constant + ((inputNumber >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)tempValue2 >> 0x1f));\n  if ((tempValue2 & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(tempValue2 >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "inputNumber",
                "uVar1": "leadingZeroes",
                "uVar2": "tempValue2",
                "iVar3": "constant",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_set_bits_0008189c",
            "code": "\nuint countSetBits_0008189c(uint input)\n\n{\n  uint numSetBits;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  numSetBits = leadingZeroCount(input);\n  shiftAmount = numSetBits - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < numSetBits) {\n    numSetBits = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < numSetBits);\n    if (numSetBits == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << numSetBits + 0x18;\n  signBit = result + ((input >> (0x20 - (numSetBits + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_set_bits_0008189c",
                "param_1": "input",
                "uVar1": "numSetBits",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_value_00081944",
            "code": "\nuint calculateFloatValue_00081944(uint exponent1,uint exponent2,undefined4 bits1,uint bits2)\n\n{\n  longlong multiplier;\n  uint result;\n  uint exponent1Bit;\n  int sumExponents;\n  int normalizedExponent;\n  uint mantissa;\n  int diffExponents;\n  uint mergedBits;\n  bool isZero;\n  bool isNegative;\n  \n  exponent1Bit = exponent1 >> 0x17 & 0xff;\n  isZero = exponent1Bit == 0;\n  if (!isZero) {\n    bits2 = exponent2 >> 0x17 & 0xff;\n    isZero = bits2 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1Bit == 0xff;\n  }\n  if (!isZero) {\n    isZero = bits2 == 0xff;\n  }\n  if (isZero) {\n    bits2 = exponent2 >> 0x17 & 0xff;\n    if (exponent1Bit == 0xff || bits2 == 0xff) {\n      isZero = exponent1 == 0 || exponent1 == 0x80000000;\n      result = exponent2;\n      if (exponent1 != 0 && exponent1 != 0x80000000) {\n        isZero = exponent2 == 0;\n        result = exponent1;\n      }\n      if (!isZero) {\n        isZero = exponent2 == 0x80000000;\n      }\n      mergedBits = result;\n      if (((isZero) || ((exponent1Bit == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((bits2 == 0xff && (mergedBits = exponent2, (exponent2 & 0x7fffff) != 0)))) {\n        return mergedBits | 0x7fc00000;\n      }\n      result = result ^ exponent2;\n      goto LAB_00081a94;\n    }\n    isZero = (exponent1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (exponent2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (exponent1 ^ exponent2) & 0x80000000;\n    }\n    isZero = exponent1Bit == 0;\n    result = exponent1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent1 = exponent1 << 1;\n        isZero = (exponent1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent1Bit = exponent1Bit - 1;\n    }\n    exponent1 = exponent1 | result;\n    isZero = bits2 == 0;\n    result = exponent2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent2 = exponent2 << 1;\n        isZero = (exponent2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits2 = bits2 - 1;\n    }\n    exponent2 = exponent2 | result;\n  }\n  sumExponents = exponent1Bit + bits2;\n  mergedBits = exponent1 ^ exponent2;\n  exponent1Bit = exponent1 << 9;\n  isZero = exponent1Bit == 0;\n  if (!isZero) {\n    exponent2 = exponent2 << 9;\n    isZero = exponent2 == 0;\n  }\n  if (isZero) {\n    if (exponent1Bit == 0) {\n      exponent2 = exponent2 << 9;\n    }\n    result = mergedBits & 0x80000000 | exponent1 & 0x7fffff | exponent2 >> 9;\n    isNegative = SBORROW4(sumExponents,0x7f);\n    normalizedExponent = sumExponents + -0x7f;\n    isZero = normalizedExponent == 0;\n    diffExponents = normalizedExponent;\n    if (!isZero && 0x7e < sumExponents) {\n      isNegative = SBORROW4(0xff,normalizedExponent);\n      diffExponents = 0xff - normalizedExponent;\n      isZero = normalizedExponent == 0xff;\n    }\n    if (!isZero && diffExponents < 0 == isNegative) {\n      result = result | normalizedExponent * 0x800000;\n    }\n    if (!isZero && diffExponents < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    mantissa = 0;\n    isNegative = SBORROW4(normalizedExponent,1);\n    mergedBits = sumExponents - 0x80;\n    isZero = mergedBits == 0;\n    exponent1Bit = mergedBits;\n  }\n  else {\n    multiplier = (ulonglong)(exponent1Bit >> 5 | 0x8000000) * (ulonglong)(exponent2 >> 5 | 0x8000000);\n    mantissa = (uint)multiplier;\n    result = (uint)((ulonglong)multiplier >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | mantissa >> 0x1f;\n      mantissa = mantissa << 1;\n    }\n    result = mergedBits & 0x80000000 | result;\n    mergedBits = (sumExponents + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(mergedBits,0xfd);\n    isZero = mergedBits == 0xfd;\n    exponent1Bit = mergedBits - 0xfd;\n    if (mergedBits < 0xfe) {\n      result = result + mergedBits * 0x800000 + (uint)(0x7fffffff < mantissa);\n      if (mantissa == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exponent1Bit < 0 != isNegative) {\n    isZero = (int)(mergedBits + 0x19) < 0;\n    if (mergedBits == 0xffffffe7 || isZero != SCARRY4(mergedBits,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mergedBits != 0xffffffe7 && isZero == SCARRY4(mergedBits,0x19)) {\n      exponent1Bit = (result << 1) >> (-mergedBits & 0xff);\n      mergedBits = result << (mergedBits + 0x20 & 0xff);\n      exponent1Bit = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1Bit >> 1) + (uint)((byte)exponent1Bit & 1);\n      if ((mantissa | mergedBits << 1) == 0) {\n        exponent1Bit = exponent1Bit & ~(mergedBits >> 0x1f);\n      }\n      return exponent1Bit;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "param_1": "exponent1",
                "param_2": "exponent2",
                "param_3": "bits1",
                "param_4": "bits2",
                "lVar1": "multiplier",
                "uVar2": "result",
                "uVar3": "exponent1Bit",
                "iVar4": "sumExponents",
                "iVar5": "normalizedExponent",
                "uVar6": "mantissa",
                "iVar7": "diffExponents",
                "uVar8": "mergedBits",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint check_overflow_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_function_00081c54",
            "code": "\nvoid executeFunction_00081c54(undefined4 input1,undefined4 input2)\n\n{\n  FUN_00081c5c(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_function_00081c54",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParam,undefined4 secondParam)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_condition_00081c94",
            "code": "\nbool checkCondition_00081c94(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_00081c5c();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_condition_00081c94",
                "in_CY": "carryFlag",
                "in_ZR": "zeroFlag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_cy_and_zr_00081ca8",
            "code": "\nbool check_CY_and_ZR_00081ca8(void)\n\n{\n  undefined is_ZR_set;\n  undefined is_CY_set;\n  \n  FUN_00081c54();\n  return !(bool)is_CY_set || (bool)is_ZR_set;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_cy_and_zr_00081ca8",
                "in_CY": "is_CY_set",
                "in_ZR": "is_ZR_set"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_and_adjust_value_00081cd0",
            "code": "\nuint extract_and_adjust_value_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint adjustment_factor;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  adjustment_factor = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && adjustment_factor != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (adjustment_factor & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((adjustment_factor == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_and_adjust_value_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "adjustment_factor"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_param_00081d1c",
            "code": "\nuint validate_param_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_param_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newAddress,dword newValue,dword newOffset)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)FUN_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = newAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitMask;\n  relocationEntry[index + 0x42] = newOffset;\n  relocationEntry[99] = bitMask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newAddress",
                "param_2": "newValue",
                "param_3": "newOffset",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_function_set_00081d7c(void)\n\n{\n  int counter;\n  code **function_pointers;\n  \n  FUNC_00085858();\n  function_pointers = (code **)0x85860;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "counter",
                "ppcVar2": "function_pointers"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "execute_elf32_relocation_00081df4",
            "code": "\nvoid executeElf32Relocation_00081df4(undefined4 data)\n\n{\n  FUN_00081e14(relocationTable[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "execute_elf32_relocation_00081df4",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "perform_relocation_00081e04",
            "code": "\nvoid performRelocation_00081e04(undefined4 data)\n\n{\n  FUN_00083d9c(relocationTable[140].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "perform_relocation_00081e04",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *parameter_array,uint size)\n\n{\n  dword offset_dVar1;\n  int offset_iVar2;\n  uint difference_uVar3;\n  uint difference_uVar4;\n  int iVar5;\n  uint difference_uVar6;\n  dword offset_dVar7;\n  uint var_uVar8;\n  int iVar9;\n  undefined *pointer_puVar10;\n  dword anchor_offset1;\n  dword anchor_offset2;\n  int offset_iVar13;\n  dword *pointer_array1;\n  uint aligned_size_temp;\n  undefined *pointer_temp;\n  dword *pointer_array2;\n  uint offset_uVar18;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size_temp = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size_temp = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size_temp < 0) || (aligned_size_temp < size)) {\nLAB_00081e7a:\n      *parameter_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(parameter_array);\n  offset_dVar1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size_temp < 0x1f8) {\n    offset_iVar13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size_temp);\n    if ((offset_iVar13 != aligned_size_temp + 0x20070464) ||\n       (offset_iVar2 = offset_iVar13 + 8, offset_iVar13 = *(int *)(offset_iVar13 + 0x14), offset_iVar2 != offset_iVar13)) {\n      iVar5 = *(int *)(offset_iVar13 + 0xc);\n      iVar9 = (*(uint *)(offset_iVar13 + 4) & 0xfffffffc) + offset_iVar13;\n      aligned_size_temp = *(uint *)(iVar9 + 4);\n      offset_iVar2 = *(int *)(offset_iVar13 + 8);\n      *(int *)(offset_iVar2 + 0xc) = iVar5;\n      *(int *)(iVar5 + 8) = offset_iVar2;\n      *(uint *)(iVar9 + 4) = aligned_size_temp | 1;\n      FUNC_0008259c(parameter_array);\n      return (int *)(offset_iVar13 + 8);\n    }\n    offset_uVar18 = (aligned_size_temp >> 3) + 2;\n  }\n  else {\n    offset_uVar18 = aligned_size_temp >> 9;\n    if (offset_uVar18 == 0) {\n      offset_iVar2 = 0x7e;\n      offset_iVar13 = 0x3f;\n    }\n    else if (offset_uVar18 < 5) {\n      offset_iVar13 = (aligned_size_temp >> 6) + 0x38;\n      offset_iVar2 = offset_iVar13 * 2;\n    }\n    else if (offset_uVar18 < 0x15) {\n      offset_iVar13 = offset_uVar18 + 0x5b;\n      offset_iVar2 = offset_iVar13 * 2;\n    }\n    else if (offset_uVar18 < 0x55) {\n      offset_iVar13 = (aligned_size_temp >> 0xc) + 0x6e;\n      offset_iVar2 = offset_iVar13 * 2;\n    }\n    else if (offset_uVar18 < 0x155) {\n      offset_iVar13 = (aligned_size_temp >> 0xf) + 0x77;\n      offset_iVar2 = offset_iVar13 * 2;\n    }\n    else if (offset_uVar18 < 0x555) {\n      offset_iVar13 = (aligned_size_temp >> 0x12) + 0x7c;\n      offset_iVar2 = offset_iVar13 * 2;\n    }\n    else {\n      offset_iVar2 = 0xfc;\n      offset_iVar13 = 0x7e;\n    }\n    for (offset_dVar7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[offset_iVar2]; offset_iVar2 * 4 + 0x20070464U != offset_dVar7\n        ; offset_dVar7 = *(dword *)(offset_dVar7 + 0xc)) {\n      offset_uVar18 = *(uint *)(offset_dVar7 + 4) & 0xfffffffc;\n      iVar5 = offset_uVar18 - aligned_size_temp;\n      if (0xf < iVar5) {\n        offset_iVar13 = offset_iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar5) {\n        offset_iVar2 = offset_uVar18 + offset_dVar7;\n        aligned_size_temp = *(uint *)(offset_iVar2 + 4);\n        iVar5 = *(int *)(offset_dVar7 + 0xc);\n        offset_iVar13 = *(int *)(offset_dVar7 + 8);\n        *(int *)(offset_iVar13 + 0xc) = iVar5;\n        *(int *)(iVar5 + 8) = offset_iVar13;\n        *(uint *)(offset_iVar2 + 4) = aligned_size_temp | 1;\n        FUNC_0008259c(parameter_array);\n        return (int *)(offset_dVar7 + 8);\n      }\n    }\n    offset_uVar18 = offset_iVar13 + 1;\n  }\n  offset_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    difference_uVar3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    difference_uVar4 = difference_uVar3 & 0xfffffffc;\n    difference_uVar6 = difference_uVar4 - aligned_size_temp;\n    if (0xf < (int)difference_uVar6) {\n      offset_dVar7 = aligned_size_temp + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size_temp | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = offset_dVar7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = offset_dVar7;\n      *(undefined4 *)(offset_dVar7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(offset_dVar7 + 8) = 0x2007046c;\n      *(uint *)(offset_dVar7 + 4) = difference_uVar6 | 1;\n      *(uint *)(offset_dVar7 + difference_uVar6) = difference_uVar6;\n      FUNC_0008259c(parameter_array);\n      return (int *)(offset_dVar1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)difference_uVar6) {\n      *(uint *)(difference_uVar4 + offset_dVar1 + 4) = *(uint *)(difference_uVar4 + offset_dVar1 + 4) | 1;\n      FUNC_0008259c(parameter_array);\n      return (int *)(offset_dVar1 + 8);\n    }\n    if (difference_uVar4 < 0x200) {\n      difference_uVar4 = difference_uVar3 & 0xfffffff8;\n      offset_iVar13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + difference_uVar4);\n      offset_dVar7 = 1 << ((int)(difference_uVar3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(offset_dVar1 + 8) = offset_iVar13;\n      *(uint *)(offset_dVar1 + 0xc) = difference_uVar4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = offset_dVar7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + difference_uVar4) = offset_dVar1;\n      *(dword *)(offset_iVar13 + 0xc) = offset_dVar1;\n    }\n    else {\n      difference_uVar6 = difference_uVar3 >> 9;\n      if (difference_uVar6 < 5) {\n        offset_iVar2 = (difference_uVar3 >> 6) + 0x38;\n        offset_iVar13 = offset_iVar2 * 2;\n      }\n      else if (difference_uVar6 < 0x15) {\n        offset_iVar2 = difference_uVar6 + 0x5b;\n        offset_iVar13 = offset_iVar2 * 2;\n      }\n      else if (difference_uVar6 < 0x55) {\n        offset_iVar2 = (difference_uVar3 >> 0xc) + 0x6e;\n        offset_iVar13 = offset_iVar2 * 2;\n      }\n      else if (difference_uVar6 < 0x155) {\n        offset_iVar2 = (difference_uVar3 >> 0xf) + 0x77;\n        offset_iVar13 = offset_iVar2 * 2;\n      }\n      else if (difference_uVar6 < 0x555) {\n        offset_iVar2 = (difference_uVar3 >> 0x12) + 0x7c;\n        offset_iVar13 = offset_iVar2 * 2;\n      }\n      else {\n        offset_iVar13 = 0xfc;\n        offset_iVar2 = 0x7e;\n      }\n      offset_dVar7 = offset_iVar13 * 4 + 0x20070464;\n      anchor_offset1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[offset_iVar13];\n      if (anchor_offset1 == offset_dVar7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (offset_iVar2 >> 2 & 0xffU);\n        anchor_offset2 = anchor_offset1;\n      }\n      else {\n        do {\n          anchor_offset2 = anchor_offset1;\n          if ((*(uint *)(anchor_offset1 + 4) & 0xfffffffc) <= difference_uVar4) break;\n          anchor_offset1 = *(dword *)(anchor_offset1 + 8);\n          anchor_offset2 = anchor_offset1;\n        } while (offset_dVar7 != anchor_offset1);\n        anchor_offset1 = *(dword *)(anchor_offset2 + 0xc);\n      }\n      offset_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(offset_dVar1 + 0xc) = anchor_offset1;\n      *(dword *)(offset_dVar1 + 8) = anchor_offset2;\n      *(dword *)(anchor_offset1 + 8) = offset_dVar1;\n      *(dword *)(anchor_offset2 + 0xc) = offset_dVar1;\n    }\n  }\n  offset_dVar1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  difference_uVar3 = 1 << ((int)offset_uVar18 >> 2 & 0xffU);\n  if (difference_uVar3 <= offset_dVar7) {\n    if ((offset_dVar7 & difference_uVar3) == 0) {\n      offset_uVar18 = offset_uVar18 & 0xfffffffc;\n      do {\n        difference_uVar3 = difference_uVar3 << 1;\n        offset_uVar18 = offset_uVar18 + 4;\n      } while ((offset_dVar7 & difference_uVar3) == 0);\n    }\n    do {\n      pointer_array2 = &Elf32_Rel_ARRAY_20070000[offset_uVar18 + 0x8c].r_info;\n      pointer_array1 = pointer_array2;\n      difference_uVar4 = offset_uVar18;\n      do {\n        for (pointer_puVar10 = (undefined *)pointer_array1[3]; pointer_array1 != (dword *)pointer_puVar10;\n            pointer_puVar10 = *(undefined **)(pointer_puVar10 + 0xc)) {\n          difference_uVar6 = *(uint *)(pointer_puVar10 + 4) & 0xfffffffc;\n          var_uVar8 = difference_uVar6 - aligned_size_temp;\n          if (0xf < (int)var_uVar8) {\n            offset_iVar2 = *(int *)(pointer_puVar10 + 8);\n            offset_iVar13 = *(int *)(pointer_puVar10 + 0xc);\n            pointer_temp = pointer_puVar10 + aligned_size_temp;\n            *(uint *)(pointer_puVar10 + 4) = aligned_size_temp | 1;\n            *(int *)(offset_iVar2 + 0xc) = offset_iVar13;\n            *(int *)(offset_iVar13 + 8) = offset_iVar2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)pointer_temp;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)pointer_temp;\n            *(undefined4 *)(pointer_temp + 0xc) = 0x2007046c;\n            *(undefined4 *)(pointer_temp + 8) = 0x2007046c;\n            *(uint *)(pointer_temp + 4) = var_uVar8 | 1;\n            *(uint *)(pointer_temp + var_uVar8) = var_uVar8;\n            FUNC_0008259c(parameter_array);\n            return (int *)(pointer_puVar10 + 8);\n          }\n          if (-1 < (int)var_uVar8) {\n            offset_iVar13 = *(int *)(pointer_puVar10 + 8);\n            offset_iVar2 = *(int *)(pointer_puVar10 + 0xc);\n            *(uint *)(pointer_puVar10 + difference_uVar6 + 4) = *(uint *)(pointer_puVar10 + difference_uVar6 + 4) | 1;\n            *(int *)(offset_iVar13 + 0xc) = offset_iVar2;\n            *(int *)(offset_iVar2 + 8) = offset_iVar13;\n            FUNC_0008259c(parameter_array);\n            return (int *)(pointer_puVar10 + 8);\n          }\n        }\n        difference_uVar4 = difference_uVar4 + 1;\n        pointer_array1 = pointer_array1 + 2;\n      } while ((difference_uVar4 & 3) != 0);\n      do {\n        difference_uVar6 = offset_uVar18 & 3;\n        pointer_puVar10 = (undefined *)(pointer_array2 + -2);\n        offset_uVar18 = offset_uVar18 - 1;\n        if (difference_uVar6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~difference_uVar3;\n          break;\n        }\n        pointer_array2 = (dword *)*pointer_array2;\n      } while (pointer_array2 == (dword *)pointer_puVar10);\n      difference_uVar3 = difference_uVar3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= difference_uVar3 &&\n           difference_uVar3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (offset_uVar18 = difference_uVar4, difference_uVar3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & difference_uVar3) == 0; difference_uVar3 = difference_uVar3 << 1) {\n        offset_uVar18 = offset_uVar18 + 4;\n      }\n    } while( true );\n  }\n  offset_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size_temp <= offset_uVar18) &&\n     (difference_uVar3 = offset_uVar18 - aligned_size_temp, offset_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)difference_uVar3))\n  goto LAB_0008211e;\n  difference_uVar3 = Elf32_Rel_ARRAY_20070000[141].r_info + offset_uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    difference_uVar4 = aligned_size_temp + DAT_20071190 + 0x10;\n  }\n  else {\n    difference_uVar4 = aligned_size_temp + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  offset_dVar7 = FUN_00082970(parameter_array,difference_uVar4);\n  if ((offset_dVar7 == 0xffffffff) || ((offset_dVar7 < difference_uVar3 && (offset_dVar1 != 0x20070464)))) {\n    offset_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    difference_uVar6 = DAT_20071194 + difference_uVar4;\n    DAT_20071194 = difference_uVar6;\n    if ((difference_uVar3 == offset_dVar7) && ((difference_uVar3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = difference_uVar4 + offset_uVar18 | 1;\n    }\n    else {\n      anchor_offset1 = offset_dVar7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        anchor_offset1 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = difference_uVar6 + (offset_dVar7 - difference_uVar3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = anchor_offset1;\n      difference_uVar3 = offset_dVar7 & 7;\n      if (difference_uVar3 == 0) {\n        offset_iVar13 = 0x1000;\n      }\n      else {\n        offset_dVar7 = offset_dVar7 + (8 - difference_uVar3);\n        offset_iVar13 = 0x1008 - difference_uVar3;\n      }\n      offset_iVar13 = offset_iVar13 - (difference_uVar4 + offset_dVar7 & 0xfff);\n      offset_iVar2 = FUN_00082970(parameter_array,offset_iVar13);\n      if (offset_iVar2 == -1) {\n        difference_uVar3 = 1;\n        offset_iVar13 = 0;\n      }\n      else {\n        difference_uVar3 = (offset_iVar2 - offset_dVar7) + offset_iVar13 | 1;\n      }\n      difference_uVar6 = DAT_20071194 + offset_iVar13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = offset_dVar7;\n      DAT_20071194 = difference_uVar6;\n      *(uint *)(offset_dVar7 + 4) = difference_uVar3;\n      if (offset_dVar1 != 0x20070464) {\n        if (offset_uVar18 < 0x10) {\n          *(undefined4 *)(offset_dVar7 + 4) = 1;\n          offset_uVar18 = 0;\n          goto LAB_00082108;\n        }\n        offset_uVar18 = offset_uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(offset_dVar1 + 4) = offset_uVar18 | *(uint *)(offset_dVar1 + 4) & 1;\n        *(undefined4 *)(offset_dVar1 + offset_uVar18 + 4) = 5;\n        *(undefined4 *)(offset_dVar1 + offset_uVar18 + 8) = 5;\n        if (0xf < offset_uVar18) {\n          FUN_00083d9c(parameter_array,offset_dVar1 + 8);\n          difference_uVar6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < difference_uVar6) {\n      DAT_2007118c = difference_uVar6;\n    }\n    if (DAT_20071188 < difference_uVar6) {\n      DAT_20071188 = difference_uVar6;\n    }\n    offset_uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset_dVar7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  difference_uVar3 = offset_uVar18 - aligned_size_temp;\n  if ((offset_uVar18 < aligned_size_temp) || ((int)difference_uVar3 < 0x10)) {\n    FUNC_0008259c(parameter_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size_temp + offset_dVar7;\n  *(uint *)(offset_dVar7 + 4) = aligned_size_temp | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = difference_uVar3 | 1;\n  FUNC_0008259c(parameter_array);\n  return (int *)(offset_dVar7 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "parameter_array",
                "param_2": "size",
                "dVar1": "offset_dVar1",
                "iVar2": "offset_iVar2",
                "uVar3": "difference_uVar3",
                "uVar4": "difference_uVar4",
                "uVar6": "difference_uVar6",
                "dVar7": "offset_dVar7",
                "uVar8": "var_uVar8",
                "puVar10": "pointer_puVar10",
                "dVar11": "anchor_offset1",
                "dVar12": "anchor_offset2",
                "iVar13": "offset_iVar13",
                "pdVar14": "pointer_array1",
                "uVar15": "aligned_size_temp",
                "puVar16": "pointer_temp",
                "pdVar17": "pointer_array2",
                "uVar18": "offset_uVar18"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_data_0008234c",
            "code": "\nundefined4 * copyData_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *dest;\n  undefined4 *src;\n  uint remainingSize;\n  uint copySize;\n  bool isRemaining;\n  \n  dest = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          src = dest;\n          isRemaining = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)src = *(undefined *)destPtr;\n          dest = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      size = size - copySize;\n      destPtr = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest = destPtr;\n      source = src;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[0xb] = source[0xb];\n    dest[0xc] = source[0xc];\n    dest[0xd] = source[0xd];\n    dest[0xe] = source[0xe];\n    dest[0xf] = source[0xf];\n    dest = dest + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest = dest + 4;\n      source = source + 4;\n      isRemaining = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemaining);\n  }\n  copySize = remainingSize + 0xc;\n  src = dest;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *src = *destPtr;\n      isRemaining = 3 < copySize;\n      copySize = copySize - 4;\n      dest = src + 1;\n      src = src + 1;\n      destPtr = source;\n    } while (isRemaining);\n  }\nLAB_000823d0:\n  if (copySize + 4 != 0) {\n    destPtr = dest;\n    src = source;\n    if ((copySize & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_data_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "dest",
                "puVar3": "src",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_reverse_bytes_00082438",
            "code": "\nvoid copy_reverse_bytes_00082438(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_length;\n  undefined *temp_char;\n  uint remaining_length;\n  \n  if ((source < destination) && (temp_ptr = (undefined4 *)((int)source + length), destination < temp_ptr)) {\n    temp_char = (undefined *)((int)destination + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_char = temp_char + -1;\n        *temp_char = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    temp_ptr = destination;\n    src_ptr = source;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    remaining_length = length & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    temp_length = remaining_length;\n    temp_ptr = destination;\n    src_ptr = source;\n    if (3 < remaining_length) {\n      do {\n        temp_length = temp_length - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_length);\n      index = (remaining_length - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remaining_length = length & 3;\n    }\n    length = remaining_length;\n    if (length == 0) {\n      return;\n    }\n  }\n  temp_ptr = destination;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_reverse_bytes_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp_length",
                "puVar6": "temp_char",
                "uVar7": "remaining_length"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_buffer_with_pattern_00082504",
            "code": "\nvoid fillBufferWithPattern_00082504(undefined4 *buffer,undefined pattern,uint size)\n\n{\n  undefined4 *currentPointer;\n  undefined4 *nextPointer;\n  undefined4 pattern32;\n  uint tempSize;\n  bool isSizeZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    isSizeZero = size == 0;\n    currentPointer = buffer;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)currentPointer + 1);\n      *(undefined *)currentPointer = pattern;\n      if (((uint)buffer & 3) == 0) break;\n      isSizeZero = size == 0;\n      currentPointer = buffer;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern32 = CONCAT22(CONCAT11(pattern,pattern),CONCAT11(pattern,pattern));\n    tempSize = size;\n    currentPointer = buffer;\n    if (0xf < size) {\n      tempSize = size - 0x10;\n      do {\n        *currentPointer = pattern32;\n        currentPointer[1] = pattern32;\n        currentPointer[2] = pattern32;\n        currentPointer[3] = pattern32;\n        currentPointer = currentPointer + 4;\n      } while (currentPointer != (undefined4 *)((int)buffer + (tempSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((tempSize >> 4) + 1) * 4;\n      tempSize = size;\n      currentPointer = buffer;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *buffer = pattern32;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (undefined4 *)((int)currentPointer + (tempSize - 4 & 0xfffffffc) + 4);\n    size = tempSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    currentPointer = buffer;\n    do {\n      nextPointer = (undefined4 *)((int)currentPointer + 1);\n      *(undefined *)currentPointer = pattern;\n      currentPointer = nextPointer;\n    } while (nextPointer != (undefined4 *)(size + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_buffer_with_pattern_00082504",
                "param_1": "buffer",
                "param_2": "pattern",
                "param_3": "size",
                "puVar1": "currentPointer",
                "puVar2": "nextPointer",
                "uVar3": "pattern32",
                "uVar4": "tempSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "load_relocation_entry_000825a0",
            "code": "\nvoid load_relocation_entry_000825a0(undefined4 address,undefined4 param)\n\n{\n  FUN_000825b0(relocation_entries[140].r_offset,address,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "load_relocation_entry_000825a0",
                "param_1": "address",
                "param_2": "param",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "reallocate_memory_000825b0",
            "code": "\nint * reallocateMemory_000825b0(undefined4 *pointer_value,int *allocated_memory,uint size)\n\n{\n  dword temp;\n  int *new_memory;\n  uint shift;\n  int iVar1;\n  uint original_size;\n  int iVar2;\n  int *new_pointer;\n  uint adjusted_size;\n  uint aligned_size;\n  int *result;\n  \n  if (allocated_memory == (int *)0x0) {\n    new_memory = (int *)FUN_00081e14(pointer_value,size);\n    return new_memory;\n  }\n  FUNC_00082598();\n  original_size = allocated_memory[-1];\n  adjusted_size = original_size & 0xfffffffc;\n  new_memory = allocated_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *pointer_value = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_size < (int)aligned_size) {\n    temp = (int)new_memory + adjusted_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp) {\n      shift = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(shift + adjusted_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_memory + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (shift + adjusted_size) - aligned_size | 1;\n        allocated_memory[-1] = aligned_size | allocated_memory[-1] & 1U;\n        FUNC_0008259c(pointer_value);\n        return allocated_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp + 4) & 0xfffffffe) + temp + 4) & 1) == 0) {\n      shift = *(uint *)(temp + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(shift + adjusted_size)) {\n        iVar2 = *(int *)(temp + 0xc);\n        iVar1 = *(int *)(temp + 8);\n        *(int *)(iVar1 + 0xc) = iVar2;\n        *(int *)(iVar2 + 8) = iVar1;\n        adjusted_size = shift + adjusted_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      shift = 0;\n      temp = 0;\n    }\n    if (-1 < (int)(original_size << 0x1f)) {\n      result = (int *)((int)new_memory - allocated_memory[-2]);\n      original_size = (result[1] & 0xfffffffcU) + adjusted_size;\n      if (temp != 0) {\n        if (temp == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(shift + original_size)) {\n            new_memory = result + 2;\n            iVar1 = *new_memory;\n            iVar2 = result[3];\n            adjusted_size = adjusted_size - 4;\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            if (adjusted_size < 0x25) {\n              new_pointer = new_memory;\n              if (0x13 < adjusted_size) {\n                result[2] = *allocated_memory;\n                result[3] = allocated_memory[1];\n                if (adjusted_size < 0x1c) {\n                  allocated_memory = allocated_memory + 2;\n                  new_pointer = result + 4;\n                }\n                else {\n                  result[4] = allocated_memory[2];\n                  result[5] = allocated_memory[3];\n                  if (adjusted_size == 0x24) {\n                    result[6] = allocated_memory[4];\n                    new_pointer = allocated_memory + 5;\n                    allocated_memory = allocated_memory + 6;\n                    result[7] = *new_pointer;\n                    new_pointer = result + 8;\n                  }\n                  else {\n                    allocated_memory = allocated_memory + 4;\n                    new_pointer = result + 6;\n                  }\n                }\n              }\n              *new_pointer = *allocated_memory;\n              new_pointer[1] = allocated_memory[1];\n              new_pointer[2] = allocated_memory[2];\n            }\n            else {\n              FUN_00082438(new_memory,allocated_memory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (shift + original_size) - aligned_size | 1;\n            result[1] = aligned_size | result[1] & 1U;\n            FUNC_0008259c(pointer_value);\n            return new_memory;\n          }\n        }\n        else {\n          shift = shift + original_size;\n          if ((int)aligned_size <= (int)shift) {\n            iVar2 = *(int *)(temp + 0xc);\n            iVar1 = *(int *)(temp + 8);\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            new_pointer = result + 2;\n            iVar1 = *new_pointer;\n            iVar2 = result[3];\n            original_size = adjusted_size - 4;\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            adjusted_size = shift;\n            if (original_size < 0x25) {\n              new_memory = new_pointer;\n              if (0x13 < original_size) {\n                result[2] = *allocated_memory;\n                result[3] = allocated_memory[1];\n                if (original_size < 0x1c) {\n                  allocated_memory = allocated_memory + 2;\n                  new_memory = result + 4;\n                }\n                else {\n                  result[4] = allocated_memory[2];\n                  result[5] = allocated_memory[3];\n                  if (original_size == 0x24) {\n                    result[6] = allocated_memory[4];\n                    new_memory = allocated_memory + 5;\n                    allocated_memory = allocated_memory + 6;\n                    result[7] = *new_memory;\n                    new_memory = result + 8;\n                  }\n                  else {\n                    allocated_memory = allocated_memory + 4;\n                    new_memory = result + 6;\n                  }\n                }\n              }\n              *new_memory = *allocated_memory;\n              new_memory[1] = allocated_memory[1];\n              new_memory[2] = allocated_memory[2];\n              original_size = result[1];\n              new_memory = result;\n              allocated_memory = new_pointer;\n            }\n            else {\n              FUN_00082438(new_pointer,allocated_memory);\n              original_size = result[1];\n              new_memory = result;\n              allocated_memory = new_pointer;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)original_size) {\n        new_pointer = result + 2;\n        iVar1 = *new_pointer;\n        iVar2 = result[3];\n        shift = adjusted_size - 4;\n        *(int *)(iVar1 + 0xc) = iVar2;\n        *(int *)(iVar2 + 8) = iVar1;\n        adjusted_size = original_size;\n        if (shift < 0x25) {\n          new_memory = new_pointer;\n          if (0x13 < shift) {\n            result[2] = *allocated_memory;\n            result[3] = allocated_memory[1];\n            if (shift < 0x1c) {\n              allocated_memory = allocated_memory + 2;\n              new_memory = result + 4;\n            }\n            else {\n              result[4] = allocated_memory[2];\n              result[5] = allocated_memory[3];\n              if (shift == 0x24) {\n                result[6] = allocated_memory[4];\n                new_memory = allocated_memory + 5;\n                allocated_memory = allocated_memory + 6;\n                result[7] = *new_memory;\n                new_memory = result + 8;\n              }\n              else {\n                allocated_memory = allocated_memory + 4;\n                new_memory = result + 6;\n              }\n            }\n          }\n          *new_memory = *allocated_memory;\n          new_memory[1] = allocated_memory[1];\n          new_memory[2] = allocated_memory[2];\n          original_size = result[1];\n          new_memory = result;\n          allocated_memory = new_pointer;\n        }\n        else {\n          FUN_00082438(new_pointer,allocated_memory);\n          original_size = result[1];\n          new_memory = result;\n          allocated_memory = new_pointer;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    result = (int *)FUN_00081e14(pointer_value,size);\n    if (result == (int *)0x0) goto LAB_000826a4;\n    original_size = allocated_memory[-1];\n    if (result + -2 != (int *)((original_size & 0xfffffffe) + (int)new_memory)) {\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        new_memory = allocated_memory;\n        new_pointer = result;\n        if (0x13 < adjusted_size) {\n          *result = *allocated_memory;\n          result[1] = allocated_memory[1];\n          if (adjusted_size < 0x1c) {\n            new_memory = allocated_memory + 2;\n            new_pointer = result + 2;\n          }\n          else {\n            result[2] = allocated_memory[2];\n            result[3] = allocated_memory[3];\n            if (adjusted_size == 0x24) {\n              result[4] = allocated_memory[4];\n              result[5] = allocated_memory[5];\n              new_memory = allocated_memory + 6;\n              new_pointer = result + 6;\n            }\n            else {\n              new_memory = allocated_memory + 4;\n              new_pointer = result + 4;\n            }\n          }\n        }\n        *new_pointer = *new_memory;\n        new_pointer[1] = new_memory[1];\n        new_pointer[2] = new_memory[2];\n      }\n      else {\n        FUN_00082438(result,allocated_memory);\n      }\n      FUN_00083d9c(pointer_value,allocated_memory);\n      goto LAB_000826a4;\n    }\n    adjusted_size = adjusted_size + (result[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  shift = adjusted_size - aligned_size;\n  result = allocated_memory;\n  if (shift < 0x10) {\n    new_memory[1] = original_size & 1 | adjusted_size;\n    *(uint *)((int)new_memory + adjusted_size + 4) = *(uint *)((int)new_memory + adjusted_size + 4) | 1;\n  }\n  else {\n    new_memory[1] = original_size & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = shift | 1;\n    *(uint *)((int)new_memory + shift + aligned_size + 4) = *(uint *)((int)new_memory + shift + aligned_size + 4) | 1;\n    FUN_00083d9c(pointer_value,(int)new_memory + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(pointer_value);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "reallocate_memory_000825b0",
                "param_1": "pointer_value",
                "param_2": "allocated_memory",
                "param_3": "size",
                "dVar1": "temp",
                "piVar2": "new_memory",
                "uVar3": "shift",
                "iVar4": "iVar1",
                "uVar5": "original_size",
                "iVar6": "iVar2",
                "piVar7": "new_pointer",
                "uVar8": "adjusted_size",
                "uVar9": "aligned_size",
                "piVar10": "result"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_return_value_and_save_00082970",
            "code": "\nvoid checkReturnValueAndSave_00082970(int *resultPtr,undefined4 inputParameter)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_0008118c(inputParameter);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *resultPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_return_value_and_save_00082970",
                "param_1": "resultPtr",
                "param_2": "inputParameter",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_with_null_terminator_00082994",
            "code": "\nvoid copyWithNullTerminator_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextUint;\n  uint *nextUintPlusOne;\n  uint currentUint;\n  uint nextUint;\n  uint *destinationPtr;\n  bool isShortZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextUintPlusOne = source;\n    if (((uint)source & 1) != 0) {\n      nextUintPlusOne = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextUintPlusOne;\n    if (((uint)nextUintPlusOne & 2) != 0) {\n      source = (uint *)((int)nextUintPlusOne + 2);\n      currentShort = *(ushort *)nextUintPlusOne;\n      isShortZero = (currentShort & 0xff) == 0;\n      if (isShortZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isShortZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isShortZero) {\n        return;\n      }\n    }\n  }\n  currentUint = *source;\n  nextUintPlusOne = source + 1;\n  destinationPtr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPtr = destination + 1;\n    *destination = currentUint;\n    nextUintPlusOne = source + 2;\n    currentUint = source[1];\n  }\n  while( true ) {\n    nextUint = nextUintPlusOne + 1;\n    nextUint = *nextUintPlusOne;\n    destination = destinationPtr;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    destination = destinationPtr + 1;\n    *destinationPtr = currentUint;\n    currentUint = nextUint;\n    if ((nextUint + 0xfefefeff & ~nextUint & 0x80808080) != 0) break;\n    nextUintPlusOne = nextUintPlusOne + 2;\n    currentUint = *nextUint;\n    destinationPtr = destinationPtr + 2;\n    *destination = nextUint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentUint;\n    nextUint = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (nextUint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_with_null_terminator_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextUint",
                "puVar4": "nextUintPlusOne",
                "uVar5": "currentUint",
                "uVar6": "nextUint",
                "puVar7": "destinationPtr",
                "bVar8": "isShortZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 arg1,int arg2,int **arg3)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint counter;\n  undefined4 *ptr3;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    result = FUN_00083f34();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = arg3[2];\n  ptr1 = *arg3;\n  while (ptr2 != (int *)0x0) {\n    value1 = ptr1[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      counter = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = FUN_00083c40(arg1,*ptr3,arg2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != counter);\n      ptr2 = arg3[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value1 & 0xfffffffc));\n    arg3[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "counter",
                "puVar5": "ptr3",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int arg1,int arg2,int *******formatString,int **args)\n\n{\n  bool hasLongLongSpec;\n  bool hasIntSpec;\n  bool hasOctalSpec;\n  char specifier;\n  bool hasDecSpec;\n  int ********argStack;\n  int *piVar7;\n  int formatStringIndex;\n  char tmpSpecifier;\n  int *******tmpFormatString;\n  uint counter;\n  int **argPointer;\n  uint origSpecifier;\n  uint tmpChar;\n  int loopCounter;\n  int ********localValues;\n  int innerLoopCounter;\n  int *******extraFormatStr;\n  int *arg;\n  int *******tmpArg;\n  uint uVar21;\n  int *minusArg;\n  int *******tmpExtraFormatStr;\n  undefined4 uVar24;\n  int ********stackVal;\n  bool hasLongSpec;\n  longlong longlongValue;\n  int *******finalArgCount;\n  int *******originalArgCount;\n  int **argPointer;\n  int totalBytes;\n  char *hexDigits;\n  char negativeChar;\n  undefined zeroChar;\n  undefined paddingChar;\n  int ********localValues;\n  int argCount;\n  int *******argLength;\n  undefined specifier;\n  char cStack_6a;\n  undefined tmpHexChar;\n  undefined localValues [4];\n  int *******extraValueArray [16];\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  origSpecifier = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    origSpecifier = origSpecifier | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)origSpecifier;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(origSpecifier << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((origSpecifier & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    formatStringIndex = FUN_00083808(arg1,arg2);\n    if (formatStringIndex != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    formatStringIndex = FUN_0008378c(arg1,arg2,formatString,args);\n    return formatStringIndex;\n  }\nLAB_00082b8a:\n  hexDigits = (char *)0x0;\n  argLength = (int *******)0x0;\n  argCount = 0;\n  totalBytes = 0;\n  argStack = (int ********)localValues;\n  argPointer = args;\n  localValues = (int ********)localValues;\nLAB_00082b9e:\n  tmpFormatString = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      tmpFormatString = (int *******)((int)tmpFormatString + 1);\n      if (*(char *)tmpFormatString == '\\0') break;\n    } while (*(char *)tmpFormatString != '%');\n    tmpArg = (int *******)((int)tmpFormatString - (int)formatString);\n    if (tmpArg != (int *******)0x0) {\n      argCount = argCount + 1;\n      argLength = (int *******)((int)argLength + (int)tmpArg);\n      *argStack = formatString;\n      argStack[1] = tmpArg;\n      if (argCount < 8) {\n        argStack = argStack + 2;\n      }\n      else {\n        if (argLength == (int *******)0x0) {\n          totalBytes = totalBytes + (int)tmpArg;\n          argCount = 0;\n          argStack = (int ********)localValues;\n          goto LAB_00082bee;\n        }\n        formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n        argStack = (int ********)localValues;\n        if (formatStringIndex != 0) goto LAB_000833de;\n      }\n      totalBytes = totalBytes + (int)tmpArg;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)tmpFormatString != '\\0') {\n    negativeChar = '\\0';\n    tmpChar = (uint)*(byte *)((int)tmpFormatString + 1);\n    origSpecifier = 0;\n    hasDecSpec = false;\n    hasIntSpec = false;\n    hasLongLongSpec = false;\n    hasOctalSpec = false;\n    hasLongSpec = false;\n    tmpArg = (int *******)0x0;\n    originalArgCount = (int *******)0xffffffff;\n    formatString = (int *******)((int)tmpFormatString + 1);\nLAB_00082c12:\n    formatString = (int *******)((int)formatString + 1);\nLAB_00082c16:\n    switch(tmpChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (tmpChar != 0) {\n        finalArgCount = (int *******)0x1;\n        originalArgCount = (int *******)0x1;\n        stackVal = (int ********)&specifier;\n        specifier = (char)tmpChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasOctalSpec = true;\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2a:\n      tmpArg = (int *******)*argPointer;\n      argPointer = argPointer + 1;\n      if ((int)tmpArg < 0) {\n        tmpArg = (int *******)-(int)tmpArg;\n        goto switchD_00082c20_caseD_2d;\n      }\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2b:\n      tmpChar = (uint)*(byte *)formatString;\n      negativeChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      origSpecifier = origSpecifier | 4;\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2e:\n      tmpChar = (uint)*(byte *)formatString;\n      tmpFormatString = (int *******)((int)formatString + 1);\n      if (tmpChar == 0x2a) {\n        tmpChar = (uint)*(byte *)((int)formatString + 1);\n        originalArgCount = (int *******)*argPointer;\n        argPointer = argPointer + 1;\n        formatString = tmpFormatString;\n        if ((int)originalArgCount < 0) {\n          originalArgCount = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      counter = tmpChar - 0x30;\n      if (counter < 10) {\n        uVar21 = 0;\n        do {\n          formatString = (int *******)((int)tmpFormatString + 1);\n          tmpChar = (uint)*(byte *)tmpFormatString;\n          uVar21 = counter + uVar21 * 10;\n          counter = tmpChar - 0x30;\n          tmpFormatString = formatString;\n        } while (counter < 10);\n        originalArgCount = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        originalArgCount = (int *******)0x0;\n        formatString = tmpFormatString;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      origSpecifier = origSpecifier | 0x80;\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      hasIntSpec = true;\n      if (hasLongLongSpec == false) goto LAB_00083028;\nLAB_00082e98:\n      argPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      arg = *argPointer;\n      minusArg = argPointer[1];\n      argPointer = argPointer + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      hasIntSpec = true;\n      if (hasLongLongSpec != false) goto LAB_00082d42;\nLAB_00082f2a:\n      formatStringIndex = (uint)hasIntSpec << 4;\n      loopCounter = (uint)hasLongLongSpec << 5;\n      if ((hasIntSpec == 0) && (loopCounter = (uint)hasLongSpec << 6, hasLongSpec != 0)) {\n        arg = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)0x0;\n      }\n      else {\n        formatStringIndex = loopCounter;\n        arg = *argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasIntSpec = true;\n      if (hasLongLongSpec != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((hasIntSpec) || (hasLongSpec == false)) {\n        formatStringIndex = 1;\n        arg = *argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)0x0;\n      }\n      else {\n        minusArg = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n        formatStringIndex = 1;\n      }\n      break;\n    case 0x58:\n      hexDigits = \"0123456789ABCDEF\";\n      if (hasLongLongSpec == false) goto LAB_00083196;\nLAB_00082fb6:\n      argPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = argPointer + 2;\n      arg = *argPointer;\n      minusArg = argPointer[1];\n      goto LAB_00082fca;\n    case 99:\n      arg = *argPointer;\n      argPointer = argPointer + 1;\n      finalArgCount = (int *******)0x1;\n      specifier = SUB41(arg,0);\n      originalArgCount = (int *******)0x1;\n      stackVal = (int ********)&specifier;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (hasLongLongSpec != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((hasIntSpec == false) && (hasLongSpec != false)) {\n        arg = (int *)(int)*(short *)argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)((int)arg >> 0x1f);\n      }\n      else {\n        arg = *argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)((int)arg >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)minusArg < 0) {\n        hasLongSpec = arg != (int *)0x0;\n        arg = (int *)-(int)arg;\n        minusArg = (int *)(-(int)minusArg - (uint)hasLongSpec);\n        negativeChar = '-';\n        specifier = '-';\n        formatStringIndex = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)originalArgCount) {\n        origSpecifier = origSpecifier & 0xffffff7f;\n      }\n      hasDecSpec = false;\n      tmpChar = (uint)arg | (uint)minusArg;\n      formatStringIndex = 1;\n      specifier = negativeChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      hasLongSpec = true;\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x6c:\n      tmpChar = (uint)*(byte *)formatString;\n      if (tmpChar == 0x6c) {\n        hasLongLongSpec = true;\n        tmpChar = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        hasIntSpec = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (hasLongLongSpec == false) {\n        if (hasIntSpec == false) {\n          if (hasLongSpec) {\n            arg = *argPointer;\n            argPointer = argPointer + 1;\n            *(short *)arg = (short)totalBytes;\n          }\n          else {\n            arg = *argPointer;\n            argPointer = argPointer + 1;\n            *arg = totalBytes;\n          }\n        }\n        else {\n          arg = *argPointer;\n          argPointer = argPointer + 1;\n          *arg = totalBytes;\n        }\n      }\n      else {\n        arg = *argPointer;\n        argPointer = argPointer + 1;\n        *arg = totalBytes;\n        arg[1] = totalBytes >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (hasLongLongSpec == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = argPointer + 2;\n      arg = *argPointer;\n      minusArg = argPointer[1];\n      formatStringIndex = 0;\n      break;\n    case 0x70:\n      arg = *argPointer;\n      argPointer = argPointer + 1;\n      paddingChar = 0x78;\n      hasDecSpec = true;\n      minusArg = (int *)0x0;\n      zeroChar = 0x30;\n      hexDigits = \"0123456789abcdef\";\n      formatStringIndex = 2;\n      break;\n    case 0x71:\n      hasLongLongSpec = true;\n      tmpChar = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x73:\n      stackVal = (int ********)*argPointer;\n      negativeChar = '\\0';\n      argPointer = argPointer + 1;\n      if (stackVal != (int ********)0x0) {\n        if ((int)originalArgCount < 0) {\n          originalArgCount = (int *******)FUN_00082a50(stackVal);\n          tmpFormatString = (int *******)0x0;\n          specifier = negativeChar;\n        }\n        else {\n          formatStringIndex = FUN_00084384(stackVal,0,originalArgCount);\n          specifier = negativeChar;\n          if (formatStringIndex == 0) {\n            tmpFormatString = (int *******)0x0;\n          }\n          else {\n            extraFormatStr = (int *******)(formatStringIndex - (int)stackVal);\n            if ((int)originalArgCount <= (int)(int *******)(formatStringIndex - (int)stackVal)) {\n              extraFormatStr = originalArgCount;\n            }\n            tmpFormatString = (int *******)0x0;\n            originalArgCount = extraFormatStr;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < originalArgCount) {\n        originalArgCount = (int *******)0x6;\n      }\n      finalArgCount = (int *******)((uint)originalArgCount & ~((int)originalArgCount >> 0x1f));\n      stackVal = (int ********)&UNK_00085840;\nLAB_00083012:\n      negativeChar = '\\0';\n      tmpFormatString = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!hasLongLongSpec) goto LAB_00082f7c;\nLAB_00082e62:\n      argPointer = (int **)((int)argPointer + 7U & 0xfffffff8);\n      argPointer = argPointer + 2;\n      arg = *argPointer;\n      minusArg = argPointer[1];\n      formatStringIndex = 1;\n      break;\n    case 0x78:\n      hexDigits = \"0123456789abcdef\";\n      if (hasLongLongSpec != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((hasIntSpec == false) && (hasLongSpec != false)) {\n        minusArg = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)argPointer;\n        argPointer = argPointer + 1;\n      }\n      else {\n        arg = *argPointer;\n        argPointer = argPointer + 1;\n        minusArg = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasOctalSpec) && (((uint)arg | (uint)minusArg) != 0)) {\n        hasDecSpec = true;\n        zeroChar = 0x30;\n        formatStringIndex = 2;\n        paddingChar = (char)tmpChar;\n      }\n      else {\n        formatStringIndex = 2;\n      }\n    }\n    negativeChar = '\\0';\n    specifier = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)originalArgCount) {\n      origSpecifier = origSpecifier & 0xffffff7f;\n    }\n    tmpChar = (uint)arg | (uint)minusArg;\njoined_r0x00082d78:\n    longlongValue = CONCAT44(minusArg,arg);\n    tmpFormatString = originalArgCount;\n    if ((tmpChar == 0) && (originalArgCount == (int *******)0x0)) {\n      stackVal = (int ********)localValues;\n      if ((formatStringIndex != 0) || (!hasOctalSpec)) goto LAB_00082da0;\n      stackVal = (int ********)(&cStack_6a + 1);\n      tmpHexChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (formatStringIndex == 1) {\n      if (minusArg != (int *)0x0 || (int *)0x9 < arg) {\n        localValues = (int ********)(&cStack_6a + 1);\n        do {\n          stackVal = localValues;\n          uVar24 = (undefined4)((ulonglong)longlongValue >> 0x20);\n          tmpSpecifier = '\\n';\n          FUN_00084750((int)longlongValue,uVar24,10,0);\n          *(char *)stackVal = tmpSpecifier + '0';\n          longlongValue = FUN_00084750((int)longlongValue,uVar24,10,0);\n          localValues = (int ********)((int)stackVal + -1);\n        } while (longlongValue != 0);\n        originalArgCount = (int *******)((int)localValues - (int)stackVal);\n        goto LAB_00082da0;\n      }\n      tmpHexChar = (char)arg + '0';\n      stackVal = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    localValues = (int ********)(&cStack_6a + 1);\n    if (formatStringIndex != 2) goto LAB_0008337e;\n    do {\n      stackVal = localValues;\n      tmpChar = (uint)arg & 0xf;\n      arg = (int *)((uint)arg >> 4 | (int)minusArg << 0x1c);\n      minusArg = (int *)((uint)minusArg >> 4);\n      *(char *)stackVal = hexDigits[tmpChar];\n      localValues = (int ********)((int)stackVal + -1);\n    } while (((uint)arg | (uint)minusArg) != 0);\n    originalArgCount = (int *******)((int)localValues - (int)stackVal);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (argLength != (int *******)0x0) {\n    FUN_00082ac0(arg1,arg2,&localValues);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalBytes;\nLAB_0008337e:\n  do {\n    stackVal = localValues;\n    piVar7 = (int *)((uint)arg >> 3 | (int)minusArg << 0x1d);\n    minusArg = (int *)((uint)minusArg >> 3);\n    formatStringIndex = ((uint)arg & 7) + 0x30;\n    *(char *)stackVal = (char)formatStringIndex;\n    localValues = (int ********)((int)stackVal + -1);\n    arg = piVar7;\n  } while (((uint)piVar7 | (uint)minusArg) != 0);\n  if (hasOctalSpec) {\n    if (formatStringIndex == 0x30) {\nLAB_00082d9a:\n      originalArgCount = (int *******)((int)localValues - (int)stackVal);\n    }\n    else {\n      *(undefined *)((int)stackVal + -1) = 0x30;\n      stackVal = localValues;\n      originalArgCount = (int *******)((int)localValues - (int)localValues);\n    }\n  }\n  else {\nLAB_0008351e:\n    originalArgCount = (int *******)((int)localValues - (int)stackVal);\n  }\nLAB_00082da0:\n  finalArgCount = originalArgCount;\n  if ((int)originalArgCount < (int)tmpFormatString) {\n    finalArgCount = tmpFormatString;\n  }\n  if (specifier != '\\0') {\n    finalArgCount = (int *******)((int)finalArgCount + 1);\n  }\nLAB_00082dba:\n  if (hasDecSpec) {\n    finalArgCount = (int *******)((int)finalArgCount + 2);\n  }\n  if ((origSpecifier == 0) &&\n     (extraFormatStr = (int *******)((int)tmpArg - (int)finalArgCount), 0 < (int)extraFormatStr)) {\n    if ((int)extraFormatStr < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        tmpExtraFormatStr = extraFormatStr;\n        formatStringIndex = argCount + 1;\n        argLength = argLength + 4;\n        *argStack = (int *******)0x85808;\n        argStack[1] = (int *******)0x10;\n        if (formatStringIndex < 8) {\n          loopCounter = argCount + 2;\n          argStack = argStack + 2;\n          argCount = formatStringIndex;\n        }\n        else if (argLength == (int *******)0x0) {\n          loopCounter = 1;\n          argStack = (int ********)localValues;\n          argCount = 0;\n        }\n        else {\n          argCount = formatStringIndex;\n          formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n          if (formatStringIndex != 0) goto LAB_000833de;\n          loopCounter = argCount + 1;\n          argStack = (int ********)localValues;\n        }\n        extraFormatStr = tmpExtraFormatStr + -4;\n      } while (0x10 < (int)extraFormatStr);\n      extraFormatStr = tmpExtraFormatStr + -4;\n      argCount = loopCounter;\n    }\n    argLength = (int *******)((int)argLength + (int)extraFormatStr);\n    *argStack = (int *******)0x85808;\n    argStack[1] = extraFormatStr;\n    if (argCount < 8) {\n      formatStringIndex = argCount + 1;\n      argStack = argStack + 2;\n    }\n    else if (argLength == (int *******)0x0) {\n      formatStringIndex = 1;\n      argCount = 0;\n      argStack = (int ********)localValues;\n    }\n    else {\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n      formatStringIndex = argCount + 1;\n      argStack = (int ********)localValues;\n    }\n  }\n  else {\n    formatStringIndex = argCount + 1;\n  }\n  loopCounter = formatStringIndex;\n  if (negativeChar != '\\0') {\n    argLength = (int *******)((int)argLength + 1);\n    loopCounter = 1;\n    *argStack = (int *******)&negativeChar;\n    argStack[1] = (int *******)0x1;\n    argCount = formatStringIndex;\n    if (formatStringIndex < 8) {\n      loopCounter = formatStringIndex + 1;\n      argStack = argStack + 2;\n    }\n    else if (argLength == (int *******)0x0) {\n      argCount = 0;\n      argStack = (int ********)localValues;\n    }\n    else {\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n      loopCounter = argCount + 1;\n      argStack = (int ********)localValues;\n    }\n  }\n  formatStringIndex = loopCounter;\n  innerLoopCounter = argCount;\n  if (hasDecSpec) {\n    argLength = (int *******)((int)argLength + 2);\n    *argStack = (int *******)&zeroChar;\n    argStack[1] = (int *******)0x2;\n    if (loopCounter < 8) {\n      formatStringIndex = loopCounter + 1;\n      innerLoopCounter = loopCounter;\n      argStack = argStack + 2;\n    }\n    else if (argLength == (int *******)0x0) {\n      formatStringIndex = 1;\n      innerLoopCounter = 0;\n      argStack = (int ********)localValues;\n    }\n    else {\n      argCount = loopCounter;\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n      formatStringIndex = argCount + 1;\n      innerLoopCounter = argCount;\n      argStack = (int ********)localValues;\n    }\n  }\n  argCount = innerLoopCounter;\n  if ((origSpecifier == 0x80) &&\n     (extraFormatStr = (int *******)((int)tmpArg - (int)finalArgCount), 0 < (int)extraFormatStr)) {\n    if (0x10 < (int)extraFormatStr) {\n      do {\n        while( true ) {\n          tmpExtraFormatStr = extraFormatStr;\n          argCount = innerLoopCounter + 1;\n          argLength = argLength + 4;\n          *argStack = (int *******)&DAT_00085848;\n          argStack[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          formatStringIndex = innerLoopCounter + 2;\n          argStack = argStack + 2;\nLAB_0008348e:\n          innerLoopCounter = argCount;\n          extraFormatStr = tmpExtraFormatStr + -4;\n          if ((int)(tmpExtraFormatStr + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (argLength != (int *******)0x0) {\n          formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n          if (formatStringIndex == 0) {\n            formatStringIndex = argCount + 1;\n            argStack = (int ********)localValues;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        formatStringIndex = 1;\n        innerLoopCounter = 0;\n        extraFormatStr = tmpExtraFormatStr + -4;\n        argStack = (int ********)localValues;\n      } while (0x10 < (int)(tmpExtraFormatStr + -4));\nLAB_000834b4:\n      extraFormatStr = tmpExtraFormatStr + -4;\n    }\n    argLength = (int *******)((int)argLength + (int)extraFormatStr);\n    *argStack = (int *******)&DAT_00085848;\n    argStack[1] = extraFormatStr;\n    argCount = formatStringIndex;\n    if (formatStringIndex < 8) {\n      formatStringIndex = formatStringIndex + 1;\n      argStack = argStack + 2;\n    }\n    else if (argLength == (int *******)0x0) {\n      formatStringIndex = 1;\n      argCount = 0;\n      argStack = (int ********)localValues;\n    }\n    else {\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n      formatStringIndex = argCount + 1;\n      argStack = (int ********)localValues;\n    }\n  }\n  tmpFormatString = (int *******)((int)tmpFormatString - (int)originalArgCount);\n  localValues = (int ********)localValues;\n  if ((int)tmpFormatString < 1) {\nLAB_000832c6:\n    argLength = (int *******)((int)argLength + (int)originalArgCount);\n    *argStack = (int *******)stackVal;\n    argStack[1] = originalArgCount;\n    originalArgCount = argLength;\n    argCount = formatStringIndex;\n    if (formatStringIndex < 8) goto LAB_0008345a;\n    if (argLength == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    loopCounter = argCount;\n    if (0x10 < (int)tmpFormatString) {\n      do {\n        while( true ) {\n          extraFormatStr = tmpFormatString;\n          argCount = loopCounter + 1;\n          argLength = argLength + 4;\n          *argStack = (int *******)&DAT_00085848;\n          argStack[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          formatStringIndex = loopCounter + 2;\n          argStack = argStack + 2;\nLAB_00083282:\n          loopCounter = argCount;\n          tmpFormatString = extraFormatStr + -4;\n          if ((int)(extraFormatStr + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (argLength != (int *******)0x0) {\n          formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n          if (formatStringIndex == 0) {\n            formatStringIndex = argCount + 1;\n            argStack = (int ********)localValues;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        formatStringIndex = 1;\n        argStack = (int ********)localValues;\n        loopCounter = 0;\n        tmpFormatString = extraFormatStr + -4;\n      } while (0x10 < (int)(extraFormatStr + -4));\nLAB_000832aa:\n      tmpFormatString = extraFormatStr + -4;\n    }\n    argLength = (int *******)((int)argLength + (int)tmpFormatString);\n    *argStack = (int *******)&DAT_00085848;\n    argStack[1] = tmpFormatString;\n    if (formatStringIndex < 8) {\n      formatStringIndex = formatStringIndex + 1;\n      argStack = argStack + 2;\n      goto LAB_000832c6;\n    }\n    if (argLength != (int *******)0x0) {\n      argCount = formatStringIndex;\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n      formatStringIndex = argCount + 1;\n      argStack = (int ********)localValues;\n      goto LAB_000832c6;\n    }\n    extraValueArray[0] = originalArgCount;\n    argCount = 1;\n    argStack = (int ********)localValues;\n    localValues = (undefined  [4])stackVal;\nLAB_0008345a:\n    localValues = argStack + 2;\n    argLength = originalArgCount;\n  }\n  if (((origSpecifier & 4) != 0) &&\n     (tmpFormatString = (int *******)((int)tmpArg - (int)finalArgCount), 0 < (int)tmpFormatString)) {\n    formatStringIndex = argCount;\n    if ((int)tmpFormatString < 0x11) {\n      loopCounter = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = formatStringIndex + 1;\n          argLength = argLength + 4;\n          *localValues = (int *******)0x85808;\n          localValues[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          loopCounter = formatStringIndex + 2;\n          localValues = localValues + 2;\nLAB_00083316:\n          tmpFormatString = tmpFormatString + -4;\n          formatStringIndex = argCount;\n          if ((int)tmpFormatString < 0x11) goto LAB_0008333e;\n        }\n        if (argLength != (int *******)0x0) {\n          formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n          if (formatStringIndex == 0) {\n            loopCounter = argCount + 1;\n            localValues = (int ********)localValues;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        tmpFormatString = tmpFormatString + -4;\n        loopCounter = 1;\n        formatStringIndex = 0;\n        localValues = (int ********)localValues;\n      } while (0x10 < (int)tmpFormatString);\n    }\nLAB_0008333e:\n    argLength = (int *******)((int)argLength + (int)tmpFormatString);\n    *localValues = (int *******)0x85808;\n    localValues[1] = tmpFormatString;\n    argCount = loopCounter;\n    if (7 < loopCounter) {\n      if (argLength == (int *******)0x0) {\n        if ((int)finalArgCount < (int)tmpArg) {\n          finalArgCount = tmpArg;\n        }\n        totalBytes = totalBytes + (int)finalArgCount;\n        goto LAB_00083422;\n      }\n      formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues);\n      if (formatStringIndex != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)finalArgCount < (int)tmpArg) {\n    finalArgCount = tmpArg;\n  }\n  totalBytes = totalBytes + (int)finalArgCount;\n  if ((argLength != (int *******)0x0) &&\n     (formatStringIndex = FUN_00082ac0(arg1,arg2,&localValues), formatStringIndex != 0)) goto LAB_000833de;\nLAB_00083422:\n  argCount = 0;\n  argStack = (int ********)localValues;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  counter = tmpChar - 0x30;\n  tmpArg = (int *******)0x0;\n  tmpFormatString = formatString;\n  do {\n    formatString = (int *******)((int)tmpFormatString + 1);\n    tmpChar = (uint)*(byte *)tmpFormatString;\n    tmpArg = (int *******)(counter + (int)tmpArg * 10);\n    counter = tmpChar - 0x30;\n    tmpFormatString = formatString;\n  } while (counter < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  tmpChar = (uint)*(byte *)formatString;\n  if (negativeChar == '\\0') {\n    negativeChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "formatString",
                "param_4": "args",
                "bVar1": "hasLongLongSpec",
                "bVar2": "hasIntSpec",
                "bVar3": "hasOctalSpec",
                "cVar4": "specifier",
                "bVar5": "hasDecSpec",
                "ppppppppiVar6": "argStack",
                "iVar8": "formatStringIndex",
                "cVar9": "tmpSpecifier",
                "pppppppiVar10": "tmpFormatString",
                "uVar11": "counter",
                "ppiVar12": "argPointer",
                "uVar13": "origSpecifier",
                "uVar14": "tmpChar",
                "iVar15": "loopCounter",
                "ppppppppiVar16": "localValues",
                "iVar17": "innerLoopCounter",
                "pppppppiVar18": "extraFormatStr",
                "piVar19": "arg",
                "pppppppiVar20": "tmpArg",
                "piVar22": "minusArg",
                "pppppppiVar23": "tmpExtraFormatStr",
                "ppppppppiVar25": "stackVal",
                "bVar26": "hasLongSpec",
                "lVar27": "longlongValue",
                "local_dc": "finalArgCount",
                "local_d4": "originalArgCount",
                "local_c8": "argPointer",
                "local_c4": "totalBytes",
                "local_c0": "hexDigits",
                "local_a1": "negativeChar",
                "local_a0": "zeroChar",
                "local_9f": "paddingChar",
                "local_9c": "localValues",
                "local_98": "argCount",
                "local_94": "argLength",
                "local_90": "specifier",
                "local_69": "tmpHexChar",
                "local_68": "localValues",
                "local_64": "extraValueArray"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "validate_and_process_data_0008378c",
            "code": "\nint validateAndProcessData_0008378c(undefined4 arg1,int arg2)\n\n{\n  int returnValue;\n  int checkValue;\n  undefined *bufferArray [2];\n  undefined4 bufferSize1;\n  ushort modifiedValue1;\n  undefined2 modifiedValue2;\n  undefined *bufferPointer;\n  undefined4 bufferSize2;\n  undefined4 zeroValue;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined temporaryBuffer [1024];\n  \n  value3 = *(undefined4 *)(arg2 + 100);\n  value1 = *(undefined4 *)(arg2 + 0x1c);\n  modifiedValue2 = *(undefined2 *)(arg2 + 0xe);\n  value2 = *(undefined4 *)(arg2 + 0x24);\n  bufferArray[0] = temporaryBuffer;\n  modifiedValue1 = *(ushort *)(arg2 + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  zeroValue = 0;\n  bufferPointer = bufferArray[0];\n  returnValue = FUN_00082b38(arg1,bufferArray);\n  if ((-1 < returnValue) && (checkValue = FUN_00083adc(arg1,bufferArray), checkValue != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)modifiedValue1 << 0x19) < 0) {\n    *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "validate_and_process_data_0008378c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "returnValue",
                "iVar2": "checkValue",
                "local_488": "bufferArray",
                "local_480": "bufferSize1",
                "local_47c": "modifiedValue1",
                "local_47a": "modifiedValue2",
                "local_478": "bufferPointer",
                "local_474": "bufferSize2",
                "local_470": "zeroValue",
                "local_46c": "value1",
                "local_464": "value2",
                "local_424": "value3",
                "auStack_420": "temporaryBuffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "decode_and_update_00083808",
            "code": "\nundefined4 decode_and_update_00083808(undefined4 *result,int *input)\n\n{\n  int value1;\n  int value2;\n  uint temp1;\n  ushort temp2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp2 = *(ushort *)(input + 3);\n  temp1 = (uint)temp2;\n  if ((int)(temp1 << 0x1c) < 0) {\n    value2 = input[4];\n  }\n  else {\n    if (-1 < (int)(temp1 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(input + 3) = temp2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp1 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          FUN_00083d9c(result);\n          temp2 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      value2 = input[4];\n      temp2 = temp2 & 0xffdb;\n      *input = value2;\n      input[1] = 0;\n    }\n    else {\n      value2 = input[4];\n    }\n    *(ushort *)(input + 3) = temp2 | 8;\n    temp1 = (uint)(temp2 | 8);\n  }\n  if ((value2 == 0) && ((temp1 & 0x280) != 0x200)) {\n    FUN_000842a4(result,input);\n    temp1 = (uint)*(ushort *)(input + 3);\n    value2 = input[4];\n  }\n  if ((temp1 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp1 << 0x1e)) {\n      value1 = input[5];\n    }\n    input[2] = value1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "decode_and_update_00083808",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "temp1",
                "uVar4": "temp2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identityFunction_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "decompress_data_00083adc",
            "code": "\nundefined4 decompressData_00083adc(int *dataBuffer,int *header)\n\n{\n  int *tempPtr;\n  int size;\n  ushort flags;\n  uint tempVar;\n  int tempVar2;\n  code *callback;\n  undefined4 result;\n  int tempVar3;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(header + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(header + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar3 = header[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    size = *header;\n    if ((flags & 3) == 0) {\n      tempVar2 = header[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *header = tempVar3;\n    size = size - tempVar3;\n    header[2] = tempVar2;\n    do {\n      if (size < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)header[9])(dataBuffer,header[7],tempVar3,size,result);\n      size = size - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_00083a54:\n    *(ushort *)(header + 3) = *(ushort *)(header + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(header + 3) = flags | 0x800;\n  if ((header[1] < 1) && (header[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)header[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  tempVar = (uint)(flags | 0x800);\n  tempVar3 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((flags & 0x1000) == 0) {\n    size = (*callback)(dataBuffer,header[7],tempVar & 0x1000,1);\n    if ((size == -1) && (tempVar2 = *dataBuffer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataBuffer = tempVar3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tempVar = (uint)*(ushort *)(header + 3);\n    callback = (code *)header[10];\n  }\n  else {\n    size = header[0x14];\n  }\n  if (((int)(tempVar << 0x1d) < 0) && (size = size - header[1], header[0xc] != 0)) {\n    size = size - header[0xf];\n  }\n  size = (*callback)(dataBuffer,header[7],size,0);\n  if (size == -1) {\n    tempVar2 = *dataBuffer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(header + 3) = *(ushort *)(header + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header + 3) = *(ushort *)(header + 3) & 0xf7ff;\n      *header = header[4];\n      header[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(header + 3) & 0xf7ff;\n    header[1] = 0;\n    *(ushort *)(header + 3) = flags;\n    *header = header[4];\n  }\n  else {\n    flags = *(ushort *)(header + 3) & 0xf7ff;\n    *header = header[4];\n    *(ushort *)(header + 3) = flags;\n    header[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    header[0x14] = size;\n  }\nLAB_00083a00:\n  tempPtr = (int *)header[0xc];\n  *dataBuffer = tempVar3;\n  if (tempPtr == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr != header + 0x10) {\n    FUN_00083d9c(dataBuffer);\n  }\n  header[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "decompress_data_00083adc",
                "param_1": "dataBuffer",
                "param_2": "header",
                "piVar1": "tempPtr",
                "iVar2": "size",
                "uVar3": "flags",
                "uVar4": "tempVar",
                "iVar5": "tempVar2",
                "pcVar6": "callback",
                "unaff_r4": "result",
                "iVar7": "tempVar3"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structure_00083b14",
            "code": "\nvoid initializeDataStructure_00083b14(int dataStructure)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructure + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructure + 4);\n    *(undefined **)(dataStructure + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructure + 0x2e4) = 3;\n    *(int *)(dataStructure + 0x2e8) = dataStructure + 0x2ec;\n    *(undefined4 *)(dataStructure + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructure + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructure + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structure_00083b14",
                "param_1": "dataStructure",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **data)\n\n{\n  int result;\n  uint flag;\n  uint value;\n  byte *bytePtr;\n  uint counter;\n  byte temp;\n  byte abStack_1b [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_00084298();\n  if ((result == 1) && (param2 - 1 < 0xff)) {\n    value = param2 & 0xff;\n    temp = (byte)value;\n    flag = 1;\n  }\n  else {\n    flag = FUN_0008456c(param1,&temp,param2,data + 0x17);\n    if (flag == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (flag == 0) {\n      return param2;\n    }\n    value = (uint)temp;\n  }\n  counter = 0;\n  do {\n    bytePtr = data[2] + -1;\n    data[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)data[6] <= (int)bytePtr) {\n        **data = (byte)value;\n        bytePtr = *data;\n        value = (uint)*bytePtr;\n        if (value != 10) goto LAB_00083c90;\n      }\n      result = FUN_000844c4(param1,value,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)value;\n      bytePtr = *data;\nLAB_00083c90:\n      *data = bytePtr + 1;\n    }\n    if (flag <= counter + 1) {\n      return param2;\n    }\n    value = (uint)abStack_1b[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "uVar3": "value",
                "pbVar4": "bytePtr",
                "uVar5": "counter",
                "local_1c": "temp"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_memory_region_00083d00",
            "code": "\nundefined4 relocateMemoryRegion_00083d00(undefined4 param_address,int param_offset)\n\n{\n  int result;\n  uint elfRelInfo;\n  int newOffset;\n  \n  FUNC_00082598();\n  elfRelInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((elfRelInfo - param_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result = FUN_00082970(param_address,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + elfRelInfo) {\n      result = FUN_00082970(param_address,-newOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = elfRelInfo - newOffset | 1;\n        FUNC_0008259c(param_address);\n        return 1;\n      }\n      newOffset = FUN_00082970(param_address,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param_address);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_memory_region_00083d00",
                "param_1": "param_address",
                "param_2": "param_offset",
                "iVar1": "result",
                "uVar2": "elfRelInfo",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_binary_function_00083d9c",
            "code": "\nvoid updateBinaryFunction_00083d9c(undefined4 param_1,int binaryAddress)\n\n{\n  int index1;\n  bool isConditionMet;\n  uint value1;\n  dword address1;\n  int index2;\n  uint value2;\n  dword address2;\n  uint updatedValue;\n  dword updatedAddress;\n  \n  if (binaryAddress == 0) {\n    return;\n  }\n  FUNC_00082598();\n  value1 = *(uint *)(binaryAddress + -4);\n  address2 = binaryAddress - 8;\n  value2 = value1 & 0xfffffffe;\n  address1 = address2 + value2;\n  updatedValue = *(uint *)(address1 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == address1) {\n    updatedValue = updatedValue + value2;\n    if (-1 < (int)(value1 << 0x1f)) {\n      address2 = address2 - *(int *)(binaryAddress + -8);\n      index2 = *(int *)(address2 + 0xc);\n      index1 = *(int *)(address2 + 8);\n      updatedValue = updatedValue + *(int *)(binaryAddress + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    address1 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(address2 + 4) = updatedValue | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = address2;\n    if (address1 <= updatedValue) {\n      FUN_00083d00(param_1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(address1 + 4) = updatedValue;\n    if ((value1 & 1) == 0) {\n      address2 = address2 - *(int *)(binaryAddress + -8);\n      index1 = *(int *)(address2 + 8);\n      value2 = value2 + *(int *)(binaryAddress + -8);\n      if (index1 == 0x2007046c) {\n        isConditionMet = true;\n      }\n      else {\n        index2 = *(int *)(address2 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isConditionMet = false;\n      }\n    }\n    else {\n      isConditionMet = false;\n    }\n    if (-1 < *(int *)(address1 + updatedValue + 4) << 0x1f) {\n      value2 = value2 + updatedValue;\n      index1 = *(int *)(address1 + 8);\n      if ((!isConditionMet) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = address2;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = address2;\n        *(undefined4 *)(address2 + 0xc) = 0x2007046c;\n        *(undefined4 *)(address2 + 8) = 0x2007046c;\n        *(uint *)(address2 + 4) = value2 | 1;\n        *(uint *)(address2 + value2) = value2;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(address1 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(address2 + 4) = value2 | 1;\n    *(uint *)(address2 + value2) = value2;\n    if (!isConditionMet) {\n      if (value2 < 0x200) {\n        value1 = value2 & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(value2 >> 3) >> 2 & 0xffU);\n        *(int *)(address2 + 8) = index1;\n        *(uint *)(address2 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1) = address2;\n        *(dword *)(index1 + 0xc) = address2;\n        FUNC_0008259c(param_1);\n        return;\n      }\n      value1 = value2 >> 9;\n      if (value1 < 5) {\n        index1 = (value2 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x15) {\n        index1 = value1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x55) {\n        index1 = (value2 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x155) {\n        index1 = (value2 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x555) {\n        index1 = (value2 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      updatedAddress = index2 * 4 + 0x20070464;\n      address1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (address1 == updatedAddress) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        updatedAddress = address1;\n      }\n      else {\n        do {\n          if ((*(uint *)(address1 + 4) & 0xfffffffc) <= value2) break;\n          address1 = *(dword *)(address1 + 8);\n        } while (updatedAddress != address1);\n        updatedAddress = *(dword *)(address1 + 0xc);\n      }\n      *(dword *)(address2 + 0xc) = updatedAddress;\n      *(dword *)(address2 + 8) = address1;\n      *(dword *)(updatedAddress + 8) = address2;\n      *(dword *)(address1 + 0xc) = address2;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_binary_function_00083d9c",
                "param_2": "binaryAddress",
                "iVar1": "index1",
                "bVar2": "isConditionMet",
                "uVar3": "value1",
                "dVar4": "address1",
                "iVar5": "index2",
                "uVar6": "value2",
                "dVar7": "address2",
                "uVar8": "updatedValue",
                "dVar9": "updatedAddress"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *input,uint **pointers)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint uShortValue;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  \n  if (pointers[2] != (uint *)0x0) {\n    flags = *(ushort *)(input + 3);\n    uShortValue = (uint)flags;\n    if (((int)(uShortValue << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *pointers;\n    }\n    else {\n      result = FUN_00083808(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(input + 3);\n      uShortValue = (uint)flags;\n      ptr2 = *pointers;\n    }\n    if ((flags & 2) == 0) {\n      value1 = uShortValue & 2;\n      temp2 = value1;\n      count = value1;\n      temp4 = value1;\n      if ((uShortValue & 1) == 0) {\n        value1 = 0;\n        temp2 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          count = input[2];\n          if ((int)(uShortValue << 0x16) < 0) {\n            if (value1 < count) {\n              uShortValue = *input;\n              count = value1;\n            }\n            else if ((uShortValue & 0x480) == 0) {\n              uShortValue = *input;\n            }\n            else {\n              result = *input - input[4];\n              count = result + 1 + value1;\n              temp1 = (int)(input[5] * 3) / 2;\n              if (count <= temp1) {\n                count = temp1;\n              }\n              if ((int)(uShortValue << 0x15) < 0) {\n                temp1 = FUN_00081e14(output,count);\n                if (temp1 == 0) {\n                  *output = 0xc;\n                  flags = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(temp1,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp1 = FUN_000825b0(output);\n                if (temp1 == 0) {\n                  FUN_00083d9c(output,input[4]);\n                  flags = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uShortValue = temp1 + result;\n              input[4] = temp1;\n              input[5] = count;\n              *input = uShortValue;\n              input[2] = count - result;\n              count = value1;\n            }\n            FUN_00082438(uShortValue,temp2,count);\n            input[2] = input[2] - count;\n            *input = *input + count;\n            count = value1;\n          }\n          else if ((input[4] < *input) || (uShortValue = input[5], value1 < uShortValue)) {\n            if (value1 < count) {\n              count = value1;\n            }\n            FUN_00082438(*input,temp2,count);\n            uShortValue = input[2];\n            input[2] = uShortValue - count;\n            *input = *input + count;\n            if ((uShortValue - count == 0) && (result = FUN_00083adc(output,input), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            count = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count = value1;\n            }\n            count = (*(code *)input[9])(output,input[7],temp2,(count / uShortValue) * uShortValue);\n            if ((int)count < 1) goto LAB_0008402e;\n          }\n          ptr1 = pointers[2];\n          temp2 = temp2 + count;\n          value1 = value1 - count;\n          pointers[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          uShortValue = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count = *ptr2;\n            value1 = ptr2[1];\n            temp4 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp4 == 0) {\n            result = FUN_00084384(count,10,value1);\n            if (result == 0) {\n              temp2 = value1 + 1;\n              temp4 = 1;\n            }\n            else {\n              temp2 = (result + 1) - count;\n              temp4 = 1;\n            }\n          }\n          temp1 = *input;\n          uShortValue = temp2;\n          if (value1 <= temp2) {\n            uShortValue = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < temp1) && (temp3 = input[2] + value2, (int)temp3 < (int)uShortValue)) {\n            FUN_00082438(temp1,count,temp3);\n            *input = *input + temp3;\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)uShortValue < (int)value2) {\n            FUN_00082438(temp1,count,uShortValue);\n            input[2] = input[2] - uShortValue;\n            *input = uShortValue + *input;\n            temp3 = uShortValue;\n          }\n          else {\n            temp3 = (*(code *)input[9])(output,input[7],count,value2);\n            if ((int)temp3 < 1) goto LAB_0008402e;\n          }\n          temp2 = temp2 - temp3;\n          if (temp2 == 0) {\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n            temp4 = 0;\n          }\n          ptr1 = pointers[2];\n          count = count + temp3;\n          value1 = value1 - temp3;\n          pointers[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      uShortValue = 0;\n      do {\n        while( true ) {\n          temp2 = uShortValue;\n          if (0x7ffffbff < uShortValue) {\n            temp2 = 0x7ffffc00;\n          }\n          if (uShortValue != 0) break;\n          value1 = *ptr2;\n          uShortValue = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,temp2);\n        if (result < 1) {\nLAB_0008402e:\n          flags = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = pointers[2];\n        value1 = value1 + result;\n        uShortValue = uShortValue - result;\n        pointers[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "input",
                "param_3": "pointers",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "uShortValue",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "local_2c": "temp4"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_magic_number_00084290",
            "code": "\nundefined4 getMagicNumber_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_magic_number_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationTable[274]info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                ".r_info": "info"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "validate_data_000842a4",
            "code": "\nvoid validateData_000842a4(int address,int *data)\n\n{\n  ushort flags;\n  int result;\n  int errorCode;\n  uint flagsCopy;\n  bool isFlagValid;\n  undefined tempArray [4];\n  uint tempVariable;\n  \n  flags = *(ushort *)(data + 3);\n  flagsCopy = (uint)flags;\n  if ((int)(flagsCopy << 0x1e) < 0) {\n    *data = (int)data + 0x43;\n    data[4] = (int)data + 0x43;\n    data[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)data + 0xe)) {\n    result = FUN_000846b4(address,(int)*(short *)((int)data + 0xe),tempArray);\n    if (-1 < result) {\n      isFlagValid = (tempVariable & 0xf000) == 0x2000;\n      if (((tempVariable & 0xf000) == 0x8000) && (data[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x400;\n        data[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flags = *(ushort *)(data + 3);\n    flagsCopy = (uint)flags;\n  }\n  *(ushort *)(data + 3) = flags | 0x800;\n  if ((flagsCopy & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isFlagValid = false;\nLAB_00084300:\n  errorCode = FUN_00081e14(address,result);\n  flags = *(ushort *)(data + 3);\n  if (errorCode == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(data + 3) = flags | 2;\n      *data = (int)data + 0x43;\n      data[4] = (int)data + 0x43;\n      data[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(address + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(data + 3) = flags | 0x80;\n    *data = errorCode;\n    data[4] = errorCode;\n    data[5] = result;\n    if ((isFlagValid) && (result = FUN_000846dc(address,(int)*(short *)((int)data + 0xe)), result != 0))\n    {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "validate_data_000842a4",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "flags",
                "iVar2": "result",
                "iVar3": "errorCode",
                "uVar4": "flagsCopy",
                "bVar5": "isFlagValid",
                "auStack_54": "tempArray",
                "local_50": "tempVariable"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint size)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool reached_end;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < size) {\n      ptr = array;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        size = size - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        reached_end = index == size - 1;\n        index = index + 1;\n        if (reached_end) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (size == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    size = size - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (size == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      size = size - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "size",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "reached_end"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *outputArray,int inputPointer,undefined4 param1,undefined4 param2)\n\n{\n  int iVar1;\n  ushort shortValue;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 linkRegister;\n  \n  shortValue = *(ushort *)(inputPointer + 0xc);\n  if ((int)((uint)shortValue << 0x17) < 0) {\n    FUN_00084700(outputArray,(int)*(short *)(inputPointer + 0xe),0,2);\n    shortValue = *(ushort *)(inputPointer + 0xc);\n  }\n  *(ushort *)(inputPointer + 0xc) = shortValue & 0xefff;\n  DAT_200711bc = 0;\n  iVar1 = FUN_000811cc((int)*(short *)(inputPointer + 0xe),param1,param2,param2,tempVar1,tempVar2,\n                       tempVar3,linkRegister);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *outputArray = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "outputArray",
                "param_2": "inputPointer",
                "param_3": "param1",
                "param_4": "param2",
                "uVar2": "shortValue",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "unaff_r6": "tempVar3",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_0008449c",
            "code": "\nvoid updateValue_0008449c(undefined4 data,int address)\n\n{\n  int result;\n  ushort newValue;\n  \n  result = FUN_00084700(data,(int)*(short *)(address + 0xe));\n  if (result == -1) {\n    newValue = *(ushort *)(address + 0xc) & 0xefff;\n  }\n  else {\n    newValue = *(ushort *)(address + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(address + 0x50) = result;\n  }\n  *(ushort *)(address + 0xc) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_0008449c",
                "param_1": "data",
                "param_2": "address",
                "iVar1": "result",
                "uVar2": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_input_000844c4",
            "code": "\nuint processInput_000844c4(int inputBuffer,uint character,undefined4 *data,undefined4 value)\n\n{\n  ushort ushortVal;\n  uint uintVal;\n  undefined *ptr;\n  int index;\n  \n  if ((inputBuffer != 0) && (*(int *)(inputBuffer + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushortVal = *(ushort *)(data + 3);\n  uintVal = (uint)ushortVal;\n  data[2] = data[6];\n  if ((-1 < (int)(uintVal << 0x1c)) || (index = data[4], index == 0)) {\n    index = FUN_00083808(inputBuffer,data,ushortVal,uintVal,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushortVal = *(ushort *)(data + 3);\n    index = data[4];\n    uintVal = (uint)ushortVal;\n  }\n  character = character & 0xff;\n  if ((int)(uintVal << 0x12) < 0) {\n    ptr = (undefined *)*data;\n    index = (int)ptr - index;\n    if (index < (int)data[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data;\n    *(ushort *)(data + 3) = ushortVal | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(inputBuffer,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data;\n  index = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = ptr + 1;\n  *ptr = (char)character;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = FUN_00083adc(inputBuffer,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "inputBuffer",
                "param_2": "character",
                "param_3": "data",
                "param_4": "value",
                "uVar1": "ushortVal",
                "uVar2": "uintVal",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_function_0008456c",
            "code": "\nvoid executeFunction_0008456c(undefined4 *outputParam,int flag,undefined4 inputParam,undefined4 *resultParam)\n\n{\n  code *functionPointer;\n  undefined4 randomValue;\n  int returnValue;\n  undefined stackData [12];\n  \n  functionPointer = DAT_20070898;\n  if (flag == 0) {\n    randomValue = FUN_00084290();\n    returnValue = (*functionPointer)(outputParam,stackData,0,randomValue,resultParam);\n  }\n  else {\n    randomValue = FUN_00084290();\n    returnValue = (*functionPointer)(outputParam,flag,inputParam,randomValue,resultParam);\n  }\n  if (returnValue == -1) {\n    *resultParam = 0;\n    *outputParam = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "outputParam",
                "param_2": "flag",
                "param_3": "inputParam",
                "param_4": "resultParam",
                "pcVar1": "functionPointer",
                "uVar2": "randomValue",
                "iVar3": "returnValue",
                "auStack_24": "stackData"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_value_to_byte_000845bc",
            "code": "\nundefined4 convertValueToByte_000845bc(undefined4 *outputPtr,undefined *inputPtr,uint value)\n\n{\n  if (inputPtr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *inputPtr = (char)value;\n    return 1;\n  }\n  *outputPtr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_value_to_byte_000845bc",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_param_000846a4",
            "code": "\nundefined4 processParam_000846a4(int param)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(param + 0xc) != 0) {\n      result = FUN_00083adc(offset,param);\n      if ((*(code **)(param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(param + 0x2c))(offset,*(undefined4 *)(param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(param + 0x10));\n      }\n      if (*(int *)(param + 0x30) != 0) {\n        if (*(int *)(param + 0x30) != param + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(param + 0x30) = 0;\n      }\n      if (*(int *)(param + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_param_000846a4",
                "param_1": "param",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_and_check_value_000846b4",
            "code": "\nvoid initializeAndCheckValue_000846b4(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_and_check_value_000846b4",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_update_value_000846dc",
            "code": "\nvoid checkAndUpdateValue_000846dc(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_update_value_000846dc",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_value_00084700",
            "code": "\nvoid checkAndAssignValue_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_value_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_and_assign_value_00084728",
            "code": "\nvoid checkAndAssignValue_00084728(int *outputPointer,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c6(inputParam1,inputParam2,inputParam3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *outputPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_and_assign_value_00084728",
                "param_1": "outputPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_parameters_00084750",
            "code": "\nint checkParameters_00084750(int input1,int input2,int flag1,int flag2)\n\n{\n  int result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_parameters_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int input_int,undefined4 param3_val,undefined4 param4_val,int *output_values)\n\n{\n  uint result;\n  longlong temp_value;\n  \n  temp_value = FUN_000847e0();\n  temp_value = temp_value * CONCAT44(param4_val,param3_val);\n  result = (uint)temp_value;\n  *output_values = input_value - result;\n  output_values[1] = (input_int - (int)((ulonglong)temp_value >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "input_int",
                "param_3": "param3_val",
                "param_4": "param4_val",
                "param_5": "output_values",
                "uVar1": "result",
                "lVar2": "temp_value"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculate_difference_000847ac(uint input_1,int input_2,undefined4 value_1,undefined4 value_2,int *output_array)\n\n{\n  uint result_1;\n  longlong result_2;\n  \n  result_2 = FUN_00084a80();\n  result_2 = result_2 * CONCAT44(value_2,value_1);\n  result_1 = (uint)result_2;\n  *output_array = input_1 - result_1;\n  output_array[1] = (input_2 - (int)((ulonglong)result_2 >> 0x20)) - (uint)(input_1 < result_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "value_1",
                "param_4": "value_2",
                "param_5": "output_array",
                "uVar1": "result_1",
                "lVar2": "result_2"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "integer_division_000847e0",
            "code": "\nundefined8 integerDivision_000847e0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong tempLong;\n  uint divisor1;\n  uint divisor2;\n  uint divisor3;\n  uint dividend1;\n  int shiftAmount;\n  uint quotient1;\n  uint quotient2;\n  uint sign1;\n  uint sign2;\n  uint temp1;\n  uint temp2;\n  bool carryFlag;\n  \n  if ((int)divisor < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)carryFlag;\n    sign1 = 0xffffffff;\n  }\n  else {\n    sign1 = 0;\n  }\n  if ((int)remainder < 0) {\n    sign1 = ~sign1;\n    carryFlag = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)carryFlag;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount != 0) {\n        divisor2 = dividend >> (0x20U - shiftAmount & 0xff);\n        quotient = quotient << shiftAmount;\n        dividend = dividend << shiftAmount;\n        divisor = divisor << shiftAmount | divisor2;\n      }\n      divisor1 = quotient >> 0x10;\n      divisor3 = divisor / divisor1;\n      quotient1 = (quotient & 0xffff) * divisor3;\n      sign2 = dividend >> 0x10 | (divisor - divisor1 * divisor3) * 0x10000;\n      divisor2 = divisor3;\n      if (sign2 <= quotient1 && quotient1 - sign2 != 0) {\n        carryFlag = CARRY4(sign2,quotient);\n        sign2 = sign2 + quotient;\n        divisor2 = divisor3 - 1;\n        if ((carryFlag == false) && (sign2 <= quotient1 && quotient1 - sign2 != 0)) {\n          divisor2 = divisor3 - 2;\n          sign2 = sign2 + quotient;\n        }\n      }\n      quotient2 = (sign2 - quotient1) / divisor1;\n      divisor3 = (quotient & 0xffff) * quotient2;\n      quotient1 = dividend & 0xffff | ((sign2 - quotient1) - divisor1 * quotient2) * 0x10000;\n      divisor1 = quotient2;\n      if (quotient1 <= divisor3 && divisor3 - quotient1 != 0) {\n        divisor1 = quotient2 - 1;\n        if ((CARRY4(quotient1,quotient) == false) &&\n           (quotient1 + quotient <= divisor3 && divisor3 - (quotient1 + quotient) != 0)) {\n          divisor1 = quotient2 - 2;\n        }\n      }\n      divisor1 = divisor1 | divisor2 << 0x10;\n      divisor2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient;\n        divisor3 = quotient >> 0x10;\n        temp2 = quotient & 0xffff;\n        divisor2 = 1;\n      }\n      else {\n        quotient = quotient << shiftAmount;\n        divisor2 = divisor >> (0x20U - shiftAmount & 0xff);\n        divisor3 = quotient >> 0x10;\n        sign2 = divisor2 / divisor3;\n        temp2 = quotient & 0xffff;\n        quotient1 = temp2 * sign2;\n        quotient2 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        divisor2 = quotient2 >> 0x10 | (divisor2 - divisor3 * sign2) * 0x10000;\n        dividend = dividend << shiftAmount;\n        divisor1 = sign2;\n        if (divisor2 <= quotient1 && quotient1 - divisor2 != 0) {\n          carryFlag = CARRY4(divisor2,quotient);\n          divisor2 = divisor2 + quotient;\n          divisor1 = sign2 - 1;\n          if ((carryFlag == false) && (divisor2 <= quotient1 && quotient1 - divisor2 != 0)) {\n            divisor1 = sign2 - 2;\n            divisor2 = divisor2 + quotient;\n          }\n        }\n        dividend1 = (divisor2 - quotient1) / divisor3;\n        sign2 = temp2 * dividend1;\n        divisor = quotient2 & 0xffff | ((divisor2 - quotient1) - divisor3 * dividend1) * 0x10000;\n        divisor2 = dividend1;\n        if (divisor <= sign2 && sign2 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          divisor2 = dividend1 - 1;\n          if ((carryFlag == false) && (divisor <= sign2 && sign2 - divisor != 0)) {\n            divisor2 = dividend1 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - sign2;\n        divisor2 = divisor2 | divisor1 << 0x10;\n      }\n      divisor1 = divisor / divisor3;\n      sign2 = temp2 * divisor1;\n      quotient2 = dividend >> 0x10 | (divisor - divisor3 * divisor1) * 0x10000;\n      quotient1 = divisor1;\n      if (quotient2 <= sign2 && sign2 - quotient2 != 0) {\n        carryFlag = CARRY4(quotient2,quotient);\n        quotient2 = quotient2 + quotient;\n        quotient1 = divisor1 - 1;\n        if ((carryFlag == false) && (quotient2 <= sign2 && sign2 - quotient2 != 0)) {\n          quotient1 = divisor1 - 2;\n          quotient2 = quotient2 + quotient;\n        }\n      }\n      dividend1 = (quotient2 - sign2) / divisor3;\n      temp2 = temp2 * dividend1;\n      divisor3 = dividend & 0xffff | ((quotient2 - sign2) - divisor3 * dividend1) * 0x10000;\n      divisor1 = dividend1;\n      if (divisor3 <= temp2 && temp2 - divisor3 != 0) {\n        divisor1 = dividend1 - 1;\n        if ((CARRY4(divisor3,quotient) == false) &&\n           (divisor3 + quotient <= temp2 && temp2 - (divisor3 + quotient) != 0)) {\n          divisor1 = dividend1 - 2;\n        }\n      }\n      divisor1 = divisor1 | quotient1 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    divisor2 = 0;\n    divisor1 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        divisor2 = 0;\n        divisor1 = 1;\n      }\n      else {\n        divisor1 = 0;\n        divisor2 = 0;\n      }\n    }\n    else {\n      divisor2 = 0x20 - shiftAmount;\n      divisor3 = divisor >> (divisor2 & 0xff);\n      temp2 = quotient >> (divisor2 & 0xff) | remainder << shiftAmount;\n      sign2 = temp2 >> 0x10;\n      divisor1 = divisor3 / sign2;\n      quotient2 = (temp2 & 0xffff) * divisor1;\n      quotient1 = divisor << shiftAmount | dividend >> (divisor2 & 0xff);\n      divisor3 = quotient1 >> 0x10 | (divisor3 - sign2 * divisor1) * 0x10000;\n      divisor2 = divisor1;\n      if (divisor3 <= quotient2 && quotient2 - divisor3 != 0) {\n        carryFlag = CARRY4(divisor3,temp2);\n        divisor3 = divisor3 + temp2;\n        divisor2 = divisor1 - 1;\n        if ((carryFlag == false) && (divisor3 <= quotient2 && quotient2 - divisor3 != 0)) {\n          divisor2 = divisor1 - 2;\n          divisor3 = divisor3 + temp2;\n        }\n      }\n      dividend1 = (divisor3 - quotient2) / sign2;\n      temp1 = (temp2 & 0xffff) * dividend1;\n      divisor3 = quotient1 & 0xffff | ((divisor3 - quotient2) - sign2 * dividend1) * 0x10000;\n      divisor1 = dividend1;\n      if (divisor3 <= temp1 && temp1 - divisor3 != 0) {\n        carryFlag = CARRY4(divisor3,temp2);\n        divisor3 = divisor3 + temp2;\n        divisor1 = dividend1 - 1;\n        if ((carryFlag == false) && (divisor3 <= temp1 && temp1 - divisor3 != 0)) {\n          divisor1 = dividend1 - 2;\n          divisor3 = divisor3 + temp2;\n        }\n      }\n      divisor1 = divisor1 | divisor2 << 0x10;\n      tempLong = (ulonglong)divisor1 * (ulonglong)(quotient << shiftAmount);\n      quotient1 = (uint)((ulonglong)tempLong >> 0x20);\n      divisor2 = 0;\n      if ((divisor3 - temp1 < quotient1) ||\n         ((divisor3 - temp1 == quotient1 && (dividend << shiftAmount < (uint)tempLong)))) {\n        divisor1 = divisor1 - 1;\n        divisor2 = 0;\n      }\n    }\n  }\n  if (sign1 != 0) {\n    carryFlag = divisor1 != 0;\n    divisor1 = -divisor1;\n    divisor2 = -divisor2 - (uint)carryFlag;\n  }\n  return CONCAT44(divisor2,divisor1);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "integer_division_000847e0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "tempLong",
                "uVar2": "divisor1",
                "uVar3": "divisor2",
                "uVar4": "divisor3",
                "uVar5": "dividend1",
                "iVar6": "shiftAmount",
                "uVar7": "quotient1",
                "uVar8": "quotient2",
                "uVar9": "sign1",
                "uVar10": "sign2",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "div_rem_00084a80",
            "code": "\nulonglong divRem_00084a80(uint dividend,uint divisor,uint quotient1,uint quotient2)\n\n{\n  longlong mulResult;\n  uint result1;\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (quotient2 == 0) {\n    if (quotient1 <= divisor) {\n      if (quotient1 == 0) {\n        quotient1 = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient1);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient1;\n        var1 = quotient1 >> 0x10;\n        var3 = quotient1 & 0xffff;\n        result1 = 1;\n      }\n      else {\n        quotient1 = quotient1 << shiftAmount;\n        var6 = divisor >> (0x20U - shiftAmount & 0xff);\n        var1 = quotient1 >> 0x10;\n        var7 = var6 / var1;\n        var3 = quotient1 & 0xffff;\n        result1 = var3 * var7;\n        var4 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        var2 = var4 >> 0x10 | (var6 - var1 * var7) * 0x10000;\n        dividend = dividend << shiftAmount;\n        var6 = var7;\n        if (var2 <= result1 && result1 - var2 != 0) {\n          carryFlag = CARRY4(var2,quotient1);\n          var2 = var2 + quotient1;\n          var6 = var7 - 1;\n          if ((carryFlag == false) && (var2 <= result1 && result1 - var2 != 0)) {\n            var6 = var7 - 2;\n            var2 = var2 + quotient1;\n          }\n        }\n        var5 = (var2 - result1) / var1;\n        var7 = var3 * var5;\n        divisor = var4 & 0xffff | ((var2 - result1) - var1 * var5) * 0x10000;\n        result1 = var5;\n        if (divisor <= var7 && var7 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient1);\n          divisor = divisor + quotient1;\n          result1 = var5 - 1;\n          if ((carryFlag == false) && (divisor <= var7 && var7 - divisor != 0)) {\n            result1 = var5 - 2;\n            divisor = divisor + quotient1;\n          }\n        }\n        divisor = divisor - var7;\n        result1 = result1 | var6 << 0x10;\n      }\n      var7 = divisor / var1;\n      var2 = var3 * var7;\n      var4 = dividend >> 0x10 | (divisor - var1 * var7) * 0x10000;\n      var6 = var7;\n      if (var4 <= var2 && var2 - var4 != 0) {\n        carryFlag = CARRY4(var4,quotient1);\n        var4 = var4 + quotient1;\n        var6 = var7 - 1;\n        if ((carryFlag == false) && (var4 <= var2 && var2 - var4 != 0)) {\n          var6 = var7 - 2;\n          var4 = var4 + quotient1;\n        }\n      }\n      var7 = (var4 - var2) / var1;\n      var3 = var3 * var7;\n      var4 = dividend & 0xffff | ((var4 - var2) - var1 * var7) * 0x10000;\n      var1 = var7;\n      if (var4 <= var3 && var3 - var4 != 0) {\n        var1 = var7 - 1;\n        if ((CARRY4(var4,quotient1) == false) &&\n           (var4 + quotient1 <= var3 && var3 - (var4 + quotient1) != 0)) {\n          var1 = var7 - 2;\n        }\n      }\n      return CONCAT44(result1,var1 | var6 << 0x10);\n    }\n    shiftAmount = LZCOUNT(quotient1);\n    if (shiftAmount != 0) {\n      var6 = dividend >> (0x20U - shiftAmount & 0xff);\n      quotient1 = quotient1 << shiftAmount;\n      dividend = dividend << shiftAmount;\n      divisor = var6 | divisor << shiftAmount;\n    }\n    result1 = quotient1 >> 0x10;\n    var1 = divisor / result1;\n    var3 = (quotient1 & 0xffff) * var1;\n    var7 = dividend >> 0x10 | (divisor - result1 * var1) * 0x10000;\n    var6 = var1;\n    if (var7 <= var3 && var3 - var7 != 0) {\n      carryFlag = CARRY4(var7,quotient1);\n      var7 = var7 + quotient1;\n      var6 = var1 - 1;\n      if ((carryFlag == false) && (var7 <= var3 && var3 - var7 != 0)) {\n        var6 = var1 - 2;\n        var7 = var7 + quotient1;\n      }\n    }\n    var4 = (var7 - var3) / result1;\n    var1 = (quotient1 & 0xffff) * var4;\n    var3 = dividend & 0xffff | ((var7 - var3) - result1 * var4) * 0x10000;\n    result1 = var4;\n    if (var3 <= var1 && var1 - var3 != 0) {\n      result1 = var4 - 1;\n      if ((CARRY4(var3,quotient1) == false) &&\n         (var3 + quotient1 <= var1 && var1 - (var3 + quotient1) != 0)) {\n        result1 = var4 - 2;\n      }\n    }\n    result1 = result1 | var6 << 0x10;\n  }\n  else {\n    if (divisor < quotient2) {\n      return 0;\n    }\n    shiftAmount = LZCOUNT(quotient2);\n    if (shiftAmount == 0) {\n      if ((quotient2 < divisor) || (quotient1 <= dividend)) {\n        return 1;\n      }\n      result1 = 0;\n    }\n    else {\n      result1 = 0x20 - shiftAmount;\n      var6 = divisor >> (result1 & 0xff);\n      var1 = quotient2 << shiftAmount | quotient1 >> (result1 & 0xff);\n      var3 = var1 >> 0x10;\n      var2 = var6 / var3;\n      var7 = (var1 & 0xffff) * var2;\n      var4 = dividend >> (result1 & 0xff) | divisor << shiftAmount;\n      result1 = var4 >> 0x10 | (var6 - var3 * var2) * 0x10000;\n      var6 = var2;\n      if (result1 <= var7 && var7 - result1 != 0) {\n        carryFlag = CARRY4(result1,var1);\n        result1 = result1 + var1;\n        var6 = var2 - 1;\n        if ((carryFlag == false) && (result1 <= var7 && var7 - result1 != 0)) {\n          var6 = var2 - 2;\n          result1 = result1 + var1;\n        }\n      }\n      var2 = (result1 - var7) / var3;\n      var5 = (var1 & 0xffff) * var2;\n      var3 = var4 & 0xffff | ((result1 - var7) - var3 * var2) * 0x10000;\n      result1 = var2;\n      if (var3 <= var5 && var5 - var3 != 0) {\n        carryFlag = CARRY4(var3,var1);\n        var3 = var3 + var1;\n        result1 = var2 - 1;\n        if ((carryFlag == false) && (var3 <= var5 && var5 - var3 != 0)) {\n          result1 = var2 - 2;\n          var3 = var3 + var1;\n        }\n      }\n      result1 = result1 | var6 << 0x10;\n      mulResult = (ulonglong)result1 * (ulonglong)(quotient1 << shiftAmount);\n      var6 = (uint)((ulonglong)mulResult >> 0x20);\n      if ((var3 - var5 < var6) || ((var3 - var5 == var6 && (dividend << shiftAmount < (uint)mulResult)))\n         ) {\n        result1 = result1 - 1;\n      }\n    }\n  }\n  return (ulonglong)result1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "div_rem_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient1",
                "param_4": "quotient2",
                "lVar1": "mulResult",
                "uVar2": "result1",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "var3",
                "uVar6": "var4",
                "uVar7": "var5",
                "uVar8": "var6",
                "uVar9": "var7",
                "iVar10": "shiftAmount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 100292,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}