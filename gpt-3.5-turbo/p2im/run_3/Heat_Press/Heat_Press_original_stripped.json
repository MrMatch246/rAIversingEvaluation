{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_000816a8",
                "in_r0": "context",
                "_watchdogDefaultSetup": "_watchdog_default_setup",
                "init": "initialize",
                "initVariant": "initialize_variant",
                "delay": "delay_execution",
                "setup": "setup_environment",
                "DAT_000816d0": "data",
                "serialEventRun": "run_serial_event"
            },
            "code": "int main_000816a8(void)\n{\n  EVP_PKEY_CTX *context;\n  _watchdogDefaultSetup();\n  init(context);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_000816d0 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "initVariant",
                "delay",
                "setup",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "init",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_00081042",
                "param_1": "data",
                "param_2": "mask1",
                "param_3": "value1",
                "param_4": "mask2",
                "*(uint *)(param_1 + 4)": "current_value",
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": "new_value",
                "uint": "uint32_t"
            },
            "code": "void set_bits_00081042(uint32_t* data, uint32_t mask1, uint32_t value1, uint32_t mask2, uint32_t value2) {\n  uint32_t* data_ptr = data + 1;\n  uint32_t current_value = *data_ptr;\n  uint32_t new_value = current_value | mask1 | ((value1 & 0xF) << 0x18) | ((value2 & 0x3) << 0x1C);\n  *data_ptr = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "write_formatted_output",
                "param_1": "stream",
                "param_2": "stream_buffer",
                "param_3": "memory_buffer",
                "piVar1": "current_stream_buffer",
                "iVar2": "write_result",
                "piVar3": "current_memory_buffer",
                "uVar4": "num_bytes_processed",
                "puVar5": "current_wchar",
                "uVar6": "num_bytes_remaining",
                "uVar7": "num_wchars_remaining",
                "FUN_00082ac0": "write_formatted_output_00082ac0"
            },
            "code": "int write_formatted_output_00082ac0(FILE* stream, int stream_buffer, int **memory_buffer) {\n  int *current_memory_buffer = memory_buffer[2];\n  int *current_stream_buffer = *memory_buffer;\n  uint num_bytes_remaining;\n  undefined4 *current_wchar;\n  uint num_wchars_remaining;\n  uint num_wchars_processed;\n  int write_result;\n  if (-1 < *(int *)(stream_buffer + 100) << 0x12) {\n    write_result = __sfvwrite_r();\n    memory_buffer[2] = (int *)0x0;\n    memory_buffer[1] = (int *)0x0;\n    return write_result;\n  }\n  while (current_memory_buffer != (int *)0x0) {\n    num_wchars_remaining = current_stream_buffer[1] >> 2;\n    if (num_wchars_remaining != 0) {\n      current_wchar = (undefined4 *)(*current_stream_buffer + -4);\n      num_wchars_processed = 0;\n      do {\n        current_wchar = current_wchar + 1;\n        write_result = _fputwc_r(stream, *current_wchar, stream_buffer);\n        num_wchars_processed = num_wchars_processed + 1;\n        if (write_result == -1) goto LAB_00082b00;\n      } while (num_wchars_remaining != num_wchars_processed);\n      current_memory_buffer = memory_buffer[2];\n    }\n    current_memory_buffer = (int *)((int)current_memory_buffer - (current_stream_buffer[1] & 0xfffffffc));\n    memory_buffer[2] = current_memory_buffer;\n    current_stream_buffer = current_stream_buffer + 2;\n  }\n  write_result = 0;\nLAB_00082b00:\n  memory_buffer[2] = (int *)0x0;\n  memory_buffer[1] = (int *)0x0;\n  return write_result;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_formatted_output_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "checkSerialPortsForData_00080ce0",
                "iVar1": "availableBytes"
            },
            "code": "void checkSerialPortsForData_00080ce0(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availableBytes > 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availableBytes > 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availableBytes > 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availableBytes > 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent3",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialPortsForData_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "wait_forever_00081164"
            },
            "code": "void wait_forever_00081164(void)\n{\n  while(true);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "String::String",
                "this": "this",
                "cstr": "str",
                "length": "str_len",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "length",
                "copy": "copy",
                "FUN_00081682": "String_00081682"
            },
            "code": "String_00081682 * __thiscall String_00081682::String_00081682(String_00081682 *this,char *str)\n{\n  size_t str_len;\n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->length = 0;\n  if (str != nullptr) {\n    str_len = strlen(str);\n    copy(this,str,str_len);\n  }\n  return this;\n}",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "String_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "run_infinite_loop_00081166"
            },
            "code": "void run_infinite_loop_00081166(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "run_infinite_loop_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "getProcessID_00081202"
            },
            "code": "__pid_t getProcessID_00081202(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "getProcessID_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "String::_String": "String::clearBuffer",
                "this": "self",
                "__in_chrg": "inCharge",
                "buffer": "stringBuffer",
                "FUN_000815fe": "clearBuffer_000815fe"
            },
            "code": "void* String::clearBuffer_000815fe(String *this, int __in_chrg)\n{\n    free(this->buffer);\n    return this;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "clearBuffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_flag_at_address_00081720",
                "param_1": "address"
            },
            "code": "void set_flag_at_address_00081720(int address) {\n  *(int *)(address + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_at_address_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_shifted_value_00081d1c",
                "param_1": "value",
                "uVar1": "shift_amount",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "uint calculate_shifted_value_00081d1c(uint value)\n{\n  uint shifted_value;\n  uint shift_amount = 0x9e - ((value << 1) >> 0x18);\n  if (((value & 0x80000000) != 0) || (value << 1 < 0x7f000000)) {\n    shifted_value = 0;\n  }\n  else if (shift_amount == 0xffffff9f && ((value & 0x7fffff) != 0)) {\n    shifted_value = 0;\n  }\n  else if (shift_amount >= 0) {\n    shifted_value = (value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  else {\n    shifted_value = 0xffffffff;\n  }\n  return shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_proc_00083988",
                "__func": "function",
                "iVar1": "exit_proc_return_value"
            },
            "code": "int register_exit_proc_00083988(__func *function)\n{\n  int exit_proc_return_value;\n  exit_proc_return_value = __register_exitproc(0, function, 0, 0);\n  return exit_proc_return_value;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "result_array",
                "uVar1": "product"
            },
            "code": "void calculate_difference_000847ac(uint32_t dividend, int divisor, uint32_t factor_low, uint32_t factor_high, int *result_array)\n{\n  uint32_t product = dividend * factor_low;\n  product += ((uint64_t)dividend * factor_high) >> 32;\n  result_array[0] = dividend - product;\n  result_array[1] = divisor - ((int)(product >> 32)) - ((dividend < product) ? 1 : 0);\n  return;\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_initialized_00080118",
                "param_1": "param1",
                "param_2": "object",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080134": "initialized",
                "PTR_object_7862_0008013c": "object_pointer",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_initialized_00080118(int param1, char* object, int param2, int param3)\n{\n  if (DAT_00080134 != 0) {\n    object = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (void *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, object, param2, DAT_00080144, param3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_initialized_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "getTickCount_00081208",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081208(void)\n{\n    uint32_t* PTR__dwTickCount_0008171c = (uint32_t*) PTR__dwTickCount_0008171c;\n    return *PTR__dwTickCount_0008171c;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "poll",
                "setup",
                "sendTxBuffer",
                "loop"
            ],
            "imported": false,
            "current_name": "getTickCount_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "FUNC_00081728"
            },
            "code": "\nuint FUNC_00081728(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_0008186a:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_for_zero_00081c94",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_for_zero_00081c94(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  __aeabi_cfcmpeq();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_for_zero_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "process_callbacks_000810f4",
                "uVar1": "leading_zeroes_count",
                "uVar2": "callback_array",
                "bit_mask": "bit_mask",
                "callback_array": "callback_array",
                "leading_zeroes_count": "leading_zeroes_count"
            },
            "code": "void process_callbacks_000810f4(void)\n{\n  uint32_t bit_mask;\n  uint32_t callback_array;\n  uint32_t leading_zeroes_count;\n\n  callback_array = *(uint32_t *)(DAT_00081124 + 0x4c);\n  while (true) {\n    leading_zeroes_count = count_leading_zeroes(callback_array);\n    if (leading_zeroes_count > 0x1f) {\n      break;\n    }\n    leading_zeroes_count = 0x1f - leading_zeroes_count;\n    bit_mask = 1 << leading_zeroes_count;\n    if (*(code **)(PTR_callbacksPioC_00081128 + leading_zeroes_count * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00081128 + leading_zeroes_count * 4))();\n    }\n    callback_array &= ~bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure_pointer",
                "puVar5": "data_structure_1",
                "puVar6": "data_structure_2",
                "uVar1": "constant_1",
                "uVar2": "constant_2",
                "uVar3": "constant_3",
                "uVar4": "constant_4"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n    if (*(int *)(param_1 + 0x38) == 0) {\n        undefined4 *data_structure_1 = *(undefined4 **)(param_1 + 4);\n        undefined4 *data_structure_2 = *(undefined4 **)(param_1 + 8);\n        undefined4 *data_structure_3 = *(undefined4 **)(param_1 + 0xc);\n        data_structure_1[0] = 0;\n        data_structure_1[1] = 0;\n        data_structure_1[2] = 0;\n        data_structure_1[3] = 4;\n        data_structure_1[4] = 0;\n        data_structure_1[5] = 0;\n        data_structure_1[6] = 0;\n        data_structure_1[7] = data_structure_1;\n        data_structure_1[8] = PTR_DAT_00083bf8;\n        data_structure_1[9] = PTR_DAT_00083bfc;\n        data_structure_1[10] = PTR_DAT_00083c00;\n        data_structure_1[11] = PTR_DAT_00083c04;\n        data_structure_1[25] = 0;\n        data_structure_1[26] = 0;\n        memset(data_structure_1 + 23, 0, 8);\n        data_structure_2[0] = 0;\n        data_structure_2[1] = 0;\n        data_structure_2[2] = 0;\n        data_structure_2[3] = 9;\n        data_structure_2[4] = 0;\n        data_structure_2[5] = 0;\n        data_structure_2[6] = 0;\n        data_structure_2[7] = data_structure_2;\n        data_structure_2[8] = PTR_DAT_00083bf8;\n        data_structure_2[9] = PTR_DAT_00083bfc;\n        data_structure_2[10] = PTR_DAT_00083c00;\n        data_structure_2[11] = PTR_DAT_00083c04;\n        data_structure_2[25] = 0;\n        data_structure_2[26] = 0;\n        memset(data_structure_2 + 23, 0, 8);\n        data_structure_3[0] = 0;\n        data_structure_3[1] = 0;\n        data_structure_3[2] = 0;\n        data_structure_3[3] = 18;\n        data_structure_3[4] = 0;\n        data_structure_3[5] = 0;\n        data_structure_3[6] = 0;\n        data_structure_3[7] = data_structure_3;\n        data_structure_3[8] = PTR_DAT_00083bf8;\n        data_structure_3[9] = PTR_DAT_00083bfc;\n        data_structure_3[10] = PTR_DAT_00083c00;\n        data_structure_3[11] = PTR_DAT_00083c04;\n        data_structure_3[25] = 0;\n        data_structure_3[26] = 0;\n        memset(data_structure_3 + 23, 0, 8);\n        *(undefined4 *)(param_1 + 0x3c) = PTR_DAT_00083bf4;\n        *(int *)(param_1 + 0x2e4) = 3;\n        *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n        *(undefined4 *)(param_1 + 0x2e0) = 0;\n        *(int *)(param_1 + 0x38) = 1;\n    }\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fclose_r",
                "_fflush_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "allocate_memory_000842a4",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "permissions",
                "iVar2": "file_status",
                "iVar3": "memory_size",
                "uVar4": "permissions_as_uint",
                "bVar5": "is_executable",
                "auStack_54": "NULL",
                "local_50": "unused_local_variable"
            },
            "code": "void allocate_memory_000842a4(int file_descriptor, int *memory_block)\n{\n    ushort permissions = *(ushort *)(memory_block + 3);\n    uint permissions_as_uint = (uint)permissions;\n    if ((int)(permissions_as_uint << 0x1e) < 0) {\n        *memory_block = (int)memory_block + 0x43;\n        memory_block[4] = (int)memory_block + 0x43;\n        memory_block[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)memory_block + 0xe)) {\n        int file_status = _fstat_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe), NULL);\n        if (-1 < file_status) {\n            bool is_executable = (file_status & 0xf000) == 0x2000;\n            if (((file_status & 0xf000) == 0x8000) && (memory_block[10] == PTR_DAT_00084380)) {\n                int memory_size = 0x400;\n                *(ushort *)(memory_block + 3) = permissions | 0x400;\n                memory_block[0x13] = 0x400;\n            }\n            else {\n                int memory_size = 0x400;\n                *(ushort *)(memory_block + 3) = permissions | 0x800;\n            }\n            goto ALLOCATE_MEMORY;\n        }\n        permissions = *(ushort *)(memory_block + 3);\n        permissions_as_uint = (uint)permissions;\n    }\n    *(ushort *)(memory_block + 3) = permissions | 0x800;\n    int memory_size = (permissions_as_uint & 0x80) == 0 ? 0x400 : 0x40;\n    bool is_executable = false;\nALLOCATE_MEMORY:\n    int *allocated_memory = _malloc_r(file_descriptor, memory_size);\n    permissions = *(ushort *)(memory_block + 3);\n    if (allocated_memory == 0) {\n        if (-1 < (int)((uint)permissions << 0x16)) {\n            *(ushort *)(memory_block + 3) = permissions | 2;\n            *memory_block = (int)memory_block + 0x43;\n            memory_block[4] = (int)memory_block + 0x43;\n            memory_block[5] = 1;\n        }\n    }\n    else {\n        *(undefined4 *)(file_descriptor + 0x3c) = PTR_DAT_0008437c;\n        *(ushort *)(memory_block + 3) = permissions | 0x80;\n        *memory_block = allocated_memory;\n        memory_block[4] = allocated_memory;\n        memory_block[5] = memory_size;\n        if ((is_executable) && (_isatty_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe)) != 0)) {\n            *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "process_data_00081dcc",
                "param_1": "data",
                "param_2": "ptr2",
                "param_3": "ptr3",
                "param_4": "ptr4",
                "uStack_c": "val2",
                "uStack_8": "val3",
                "uStack_4": "val4"
            },
            "code": "void process_data_00081dcc(int data, int* ptr2, int* ptr3, int* ptr4)\n{\n  int val2 = *ptr2;\n  int val3 = *ptr3;\n  int val4 = *ptr4;\n  processData(val2, *(int*)(*(int*)ptr1 + 8), data, &val2);\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "waitForTxBufferEmpty_0008143c",
                "this": "thisObj",
                "_tx_buffer": "txBuffer",
                "_iHead": "txBufferHead",
                "_iTail": "txBufferTail",
                "_pUart": "uart"
            },
            "code": "void __thiscall UARTClass::waitForTxBufferEmpty_0008143c(UARTClass *this)\n{\n    while (this->txBufferHead != this->txBufferTail) {}\n    while (-1 < (int)(this->uart->UART_SR << 0x16)) {}\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "waitForTxBufferEmpty_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "read_file_000846a4",
                "__stream": "file_ptr",
                "iVar1": "return_value",
                "_FUN_000846a4_r": "read_file_helper"
            },
            "code": "int read_file_000846a4(FILE *file_ptr)\n{\n  int return_value;\n  return_value = read_file_000846a4_helper(*(undefined4 *)PTR__impure_ptr_000846b0, file_ptr);\n  return return_value;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "read_file_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_data_and_initialize_memory_00080f24",
                "puVar1": "source_ptr",
                "puVar2": "destination_ptr",
                "iVar3": "copy_length",
                "puVar4": "memory_ptr",
                "PTR_banzai_00080f80": "source_ptr",
                "PTR__etext_00080f7c": "destination_ptr",
                "PTR_completed_7857_00080f84": "memory_ptr",
                "PTR_completed_7857_00080f88": "end_of_memory_ptr",
                "DAT_00080f94": "dat_ptr",
                "PTR__ebss_00080f8c": "end_of_memory_ptr",
                "PTR_exception_table_00080f90": "exception_table_ptr",
                "*(undefined4 *)(puVar1 + iVar3)": "*(uint32_t *)(destination_ptr + copy_length)",
                "*(undefined4 *)(puVar2 + iVar3)": "*(uint32_t *)(source_ptr + copy_length)",
                "*(uint *)(DAT_00080f94 + 8)": "*(dat_ptr + 2)",
                "*(uint *)(iVar3 + 8)": "*(dat_ptr + 2)"
            },
            "code": "void copy_data_and_initialize_memory_00080f24(void)\n{\n  uint8_t *PTR_banzai_00080f80 = PTR_banzai_00080f80;\n  uint8_t *PTR__etext_00080f7c = PTR__etext_00080f7c;\n  int copy_length = 0;\n  uint32_t *PTR_completed_7857_00080f84 = (uint32_t *)PTR_completed_7857_00080f84;\n\n  if (PTR__etext_00080f7c != PTR_banzai_00080f80) {\n    copy_length = PTR_completed_7857_00080f88 - PTR_banzai_00080f80;\n    memcpy(PTR__etext_00080f7c, PTR_banzai_00080f80, copy_length);\n  }\n\n  while (PTR_completed_7857_00080f84 < (uint32_t *)PTR__ebss_00080f8c) {\n    *PTR_completed_7857_00080f84 = 0;\n    PTR_completed_7857_00080f84++;\n  }\n\n  uint8_t *PTR_exception_table_00080f90 = PTR_exception_table_00080f90 + -0x20000000;\n  uint32_t *DAT_00080f94 = (uint32_t *)DAT_00080f94;\n  *(uint *)(DAT_00080f94 + 8) = (uint32_t)PTR_exception_table_00080f90 & 0x1fffff80;\n\n  if (PTR_exception_table_00080f90 < (uint8_t *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n\n  (*DAT_00080f98)();\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "pointer_to_struct",
                "param_2": "mask",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint pointer_to_struct, uint mask) {\n  uint result = *(uint *)(pointer_to_struct + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(pointer_to_struct + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initializeSystem_000804a8",
                "puVar1": "telegramPtr",
                "puVar2": "dataPtr",
                "puVar3": "data8024Ptr",
                "this": "masterPtr",
                "uVar4": "currentMillis"
            },
            "code": "void initializeSystem_000804a8(void)\n{\n  uint32_t currentMillis;\n  uint16_t *dataPtr;\n  uint8_t *telegramPtr;\n  uint8_t *data8024Ptr;\n  uint8_t *masterPtr;\n\n  pinMode(LED_BUILTIN, OUTPUT);\n  pinMode(RELAY_PIN, OUTPUT);\n  pinMode(SWITCH_PIN, INPUT_PULLUP);\n  pinMode(BUTTON_PIN, INPUT_PULLUP);\n  digitalWrite(RELAY_PIN, LOW);\n  digitalWrite(LED_BUILTIN, LOW);\n\n  telegramPtr = telegram;\n  dataPtr = data;\n  *(uint16_t *)(telegram + 0xE) = 0x13;\n  *(uint16_t *)(telegram + 0x10) = 10;\n  *(uint8_t **)(telegram + 0x14) = dataPtr + 0x26;\n  telegram[1] = 3;\n  telegram[0x19] = 3;\n  *(uint16_t *)(telegram + 0x1A) = 0x14;\n  *(uint16_t *)(telegram + 0x28) = 3;\n  *(uint16_t *)(telegram + 4) = 0x10;\n  *(uint8_t **)(telegram + 8) = dataPtr;\n  telegram[0xD] = 0x10;\n  *(uint16_t *)(telegram + 0x1C) = 0xC;\n  telegram[0x25] = 0x10;\n  *(uint16_t *)(telegram + 0x34) = 8;\n  data8024Ptr = data8024;\n  *(uint16_t *)(telegram + 0x26) = 0x1C;\n  *(uint8_t **)(telegram + 0x2C) = dataPtr + 0x38;\n  telegram[0x30] = 2;\n  telegram[0x31] = 2;\n  *(uint8_t **)(telegram + 0x38) = data8024Ptr;\n  telegram[0x3C] = 2;\n  *telegram = 1;\n  telegram[0xC] = 1;\n  telegram[0x18] = 1;\n  telegram[0x24] = 1;\n  *(uint16_t *)(telegram + 0x3E) = 1;\n  *(uint16_t *)(telegram + 0x40) = 1;\n  *(uint16_t *)(telegram + 2) = 0;\n  *(uint8_t **)(telegram + 0x20) = dataPtr + 0x28;\n  *(uint16_t *)(telegram + 0x32) = 0;\n  telegram[0x3D] = 5;\n  *(uint8_t **)(telegram + 0x44) = data8024Ptr + 2;\n  Modbus::begin((Modbus *)masterPtr, 0x4B00);\n  *(uint16_t *)(masterPtr + 0x56) = 2000;\n  currentMillis = millis();\n  *(uint32_t *)waitTime = currentMillis;\n  currentMillis = millis();\n  *(uint32_t *)pid1Time = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)dutyHigh1Time = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)dutyLow1Time = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)clockTime = currentMillis + 1000;\n  *state = 0;\n  startForkserver(0);\n}\n",
            "called": [
                "pinMode",
                "startForkserver",
                "digitalWrite",
                "begin",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_file_and_update_count_00084440",
                "param_1": "file_descriptor",
                "param_2": "file_info_address",
                "iVar1": "bytes_read",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void read_file_and_update_count_00084440(int file_descriptor, int file_info_address)\n{\n  int bytes_read;\n  bytes_read = _read_r(file_descriptor,(int)*(short *)(file_info_address + 0xe));\n  if (bytes_read >= 0) {\n    int* count_address = (int *)(file_info_address + 0x50);\n    *count_address = *count_address + bytes_read;\n    return;\n  }\n  ushort* status_address = (ushort *)(file_info_address + 0xc);\n  *status_address = *status_address & 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_file_and_update_count_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "Modbus::FUN_000802da": "modbus_process_request",
                "this": "modbus",
                "telegram": "modbus_t",
                "uVar1": "function_code",
                "in_r1": "transaction_id",
                "bVar3": "register_count",
                "in_r2": "register_pointer",
                "puVar4": "response_buffer_pointer",
                "uVar5": "response_buffer_size",
                "uVar6": "register_value",
                "uVar7": "register_count_uint",
                "puVar8": "response_buffer_end_pointer",
                "local_1c": "function_code_copy",
                "local_1b": "register_count_copy",
                "local_1a": "register_value_copy",
                "uVar2": "transaction_id_low_byte",
                "sendTxBuffer": "send_request_buffer",
                "au8Buffer": "request_buffer",
                "au16regs": "registers",
                "u8BufferSize": "response_buffer_size",
                "u8id": "slave_id",
                "u8state": "state",
                "FUN_000802da": "modbus_process_request_000802da"
            },
            "code": "int8_t __thiscall modbus_process_request_000802da(Modbus* modbus, modbus_t telegram) {\\n  uchar function_code;\\n  ushort transaction_id;\\n  byte register_count;\\n  ushort *register_pointer;\\n  ushort *response_buffer_pointer;\\n  uint8_t response_buffer_size;\\n  ushort register_value;\\n  uint register_count_uint;\\n\\n  register_count_uint = (uint)transaction_id;\\n  if (modbus->slave_id != \"\\0\") {\\n    return -2;\\n  }\\n  if (modbus->state != \"\\0\") {\\n    return -1;\\n  }\\n  if (0xf6 < (byte)(function_code - 1)) {\\n    return -3;\\n  }\\n\\n  modbus->request_buffer[0] = function_code;\\n  modbus->request_buffer[1] = register_count;\\n  modbus->registers = register_pointer;\\n  modbus->request_buffer[2] = (uchar)((uint)register_value >> 8);\\n  modbus->request_buffer[3] = (uchar)register_value;\\n  uchar transaction_id_high_byte = (uchar)transaction_id;\\n  uchar transaction_id_low_byte = (uchar)(register_count_uint >> 8);\\n  switch(register_count) {\\n    case 0x01:\\n    case 0x02:\\n    case 0x03:\\n    case 0x04:\\n      modbus->request_buffer[4] = transaction_id_low_byte;\\n      break;\\n    case 0x05:\\n      register_value = *register_pointer;\\n      if (register_value != 0) {\\n        register_value = 1;\\n      }\\n      modbus->request_buffer[4] = -(char)register_value;\\n      register_count_uint = 0;\\n      break;\\n    case 0x06:\\n      modbus->request_buffer[4] = (uchar)((uint)*register_pointer >> 8);\\n      register_count_uint = (uint)*register_pointer;\\n      break;\\n    default:\\n      goto switchD_0008031e_caseD_7;\\n    case 0x0f:\\n      register_count = (byte)(transaction_id >> 3) & 0xfe;\\n      if ((transaction_id & 0xf) != 0) {\\n        register_count = register_count + 1;\\n      }\\n      modbus->request_buffer[5] = transaction_id_high_byte;\\n      modbus->request_buffer[4] = transaction_id_low_byte;\\n      modbus->request_buffer[6] = register_count;\\n      response_buffer_size = \"\\a\";\\n      goto LAB_0008034a;\\n    case 0x10:\\n      modbus->request_buffer[4] = transaction_id_low_byte;\\n      modbus->request_buffer[5] = transaction_id_high_byte;\\n      response_buffer_pointer = register_pointer - 1;\\n      modbus->request_buffer[6] = transaction_id_high_byte * \"\\x02\";\\n      modbus->response_buffer_size = \"\\a\";\\n      ushort* response_buffer_end_pointer = response_buffer_pointer + register_count_uint;\\n      while (response_buffer_pointer != response_buffer_end_pointer) {\\n        byte response_buffer_size_copy = modbus->response_buffer_size;\\n        modbus->response_buffer[response_buffer_size_copy] = (uchar)((uint)response_buffer_pointer[1] >> 8);\\n        register_count_uint = response_buffer_size_copy + 1 & 0xff;\\n        modbus->response_buffer_size = (uint8_t)register_count_uint;\\n        response_buffer_pointer = response_buffer_pointer + 1;\\n        modbus->response_buffer[register_count_uint] = (uchar)*response_buffer_pointer;\\n        modbus->response_buffer_size = response_buffer_size_copy + 2;\\n      }\\n      goto switchD_0008031e_caseD_7;\\n  }\\n  modbus->request_buffer[5] = (uchar)register_count_uint;\\n  response_buffer_size = \"\\x06\";\\nLAB_0008034a:\\n  modbus->response_buffer_size = response_buffer_size;\\nswitchD_0008031e_caseD_7:\\n  send_request_buffer(modbus);\\n  modbus->state = \"\\x01\";\\n  return \"\\0\";\\n}",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "modbus_process_request_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_index_of_minimum_value_00080f9c",
                "param_1": "result",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "max_value",
                "local_58": "local_array",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_index_of_minimum_value_00080f9c(uint32_t *result, uint32_t input_value, int divisor, int max_value)\n{\n    uint32_t local_array[16];\n    local_array[0] = *(uint32_t *)PTR_DAT_0008102c;\n    local_array[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n    local_array[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n    local_array[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n    local_array[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n    local_array[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n    local_array[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n    local_array[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n    local_array[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n    local_array[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n    local_array[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n    local_array[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n    local_array[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n    local_array[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n    local_array[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n    local_array[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n    \n    *result = 1;\n    *(result + 1) = 0;\n    *(result + 0x48) = 0x202;\n    *(result + 0x41) = 0;\n    *(result + 0x45) = 0;\n    uint32_t quotient = input_value / (uint32_t)(divisor * 2);\n    if (input_value == divisor * 2 * quotient) {\n        quotient--;\n    }\n    uint32_t index = 0;\n    do {\n        if ((uint32_t)(max_value * (int)(((uint64_t)input_value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_array[index]) {\n            *(result + 1) = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | *(result + 1);\n            return 0;\n        }\n        index++;\n    } while (index != 0x10);\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_index_of_minimum_value_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "puVar1": "pin_description",
                "puVar2": "pin_status",
                "uVar3": "pin_function",
                "bVar4": "pin_mode",
                "bVar5": "pin_value",
                "iVar6": "pin_register",
                "iVar7": "pin_index"
            },
            "code": "void configure_pin_00081210(uint32_t pin_number, uint32_t mode)\\n{\\n  uint8_t* pin_status = g_pin_status;\\n  uint8_t* pin_description = g_a_pin_description;\\n  if (pin_description[pin_number * 0x1c + 0xc] != \"\\0\") {\\n    if ((pin_status[pin_number] & 0xf) == PIN_STATUS_ANALOG) {\\n      adc_disable_channel(ADC, pin_description[pin_number * 0x1c + 0x19]);\\n    }\\n    uint8_t pin_value = pin_status[pin_number];\\n    uint8_t pin_mode = pin_value & 0xf;\\n    if ((pin_mode < PIN_MODE_PULLUP) && (pin_value != 0)) {\\n      if (pin_mode == PIN_MODE_PULLDOWN) {\\n        if (mode == PIN_MODE_NONE) {\\n          return;\\n        }\\n      }\\n      else if (pin_mode == PIN_MODE_INPUT) {\\n        if (mode == PIN_MODE_PULLUP) {\\n          return;\\n        }\\n      }\\n      else if (pin_mode == PIN_MODE_OUTPUT) {\\n        if (mode == PIN_MODE_PULLDOWN) {\\n          return;\\n        }\\n        goto LAB_0008126c;\\n      }\\n    }\\n    if (mode != PIN_MODE_PULLDOWN) {\\nLAB_0008126c:\\n      if (mode == PIN_MODE_NONE) {\\n        uint32_t pin_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t *)(pin_description + pin_index + 8));\\n        PIO_Configure(*(uint32_t *)(pin_description + pin_index), PIO_PERIPH_A, *(uint32_t *)(pin_description + pin_index + 4), PIO_DEFAULT);\\n        pin_value = pin_value & 0xf0 | PIN_MODE_OUTPUT;\\n      }\\n      else {\\n        if (mode != PIN_MODE_PULLUP) {\\n          return;\\n        }\\n        uint32_t pin_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(uint32_t *)(pin_description + pin_index + 8));\\n        PIO_Configure(*(uint32_t *)(pin_description + pin_index), PIO_PERIPH_A, *(uint32_t *)(pin_description + pin_index + 4), PIO_PULLUP);\\n        pin_value = pin_value & 0xf0 | PIN_MODE_INPUT;\\n      }\\n      pin_status[pin_number] = pin_value;\\n      return;\\n    }\\n    uint32_t pin_index = pin_number * 0x1c;\\n    uint32_t pin_register = *(uint32_t *)(pin_description + pin_index);\\n    uint32_t pin_function = (pin_value >> 4 == 0) ? PIO_INPUT : PIO_OUTPUT_1;\\n    PIO_Configure(pin_register, pin_function, *(uint32_t *)(pin_description + pin_index + 4), *(uint32_t *)(pin_description + pin_index + 0x10));\\n    pin_status[pin_number] = pin_status[pin_number] & 0xf0 | PIN_MODE_INPUT;\\n    if (*(int *)(pin_register + 0x18) == -1) {\\n      pmc_disable_periph_clk(*(uint32_t *)(pin_description + pin_index + 8));\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "extract_data_00083994",
                "param_1": "data",
                "param_2": "header",
                "piVar1": "data_ptr_1",
                "iVar2": "header_var_1",
                "uVar3": "header_var_2",
                "uVar4": "header_var_3",
                "iVar5": "header_var_4",
                "pcVar6": "header_var_5",
                "iVar7": "header_var_6"
            },
            "code": "undefined4 extract_data_00083994(int *data, int *header)\n{\n    int *data_ptr_1;\n    int header_var_1;\n    ushort header_var_2;\n    uint header_var_3;\n    int header_var_4;\n    code *header_var_5;\n    int header_var_6;\n    \n    header_var_2 = *(ushort *)(header + 3);\n    if ((int)((uint)header_var_2 << 0x1c) < 0) {\n        header_var_6 = header[4];\n        if (header_var_6 == 0) {\n            return 0;\n        }\n        header_var_1 = *header;\n        if ((header_var_2 & 3) == 0) {\n            header_var_4 = header[5];\n        }\n        else {\n            header_var_4 = 0;\n        }\n        *header = header_var_6;\n        header_var_1 = header_var_1 - header_var_6;\n        header[2] = header_var_4;\n        do {\n            if (header_var_1 < 1) {\n                return 0;\n            }\n            header_var_4 = (*(code *)header[9])(data,header[7],header_var_6,header_var_1);\n            header_var_1 = header_var_1 - header_var_4;\n            header_var_6 = header_var_6 + header_var_4;\n        } while (0 < header_var_4);\n        *(ushort *)(header + 3) = *(ushort *)(header + 3) | 0x40;\n        return 0xffffffff;\n    }\n    *(ushort *)(header + 3) = header_var_2 | 0x800;\n    if ((header[1] < 1) && (header[0xf] < 1)) {\n        return 0;\n    }\n    header_var_5 = (code *)header[10];\n    if (header_var_5 == (code *)0x0) {\n        return 0;\n    }\n    header_var_3 = (uint)(header_var_2 | 0x800);\n    header_var_6 = *data;\n    *data = 0;\n    if ((header_var_2 & 0x1000) == 0) {\n        header_var_1 = (*header_var_5)(data,header[7],header_var_3 & 0x1000,1);\n        if ((header_var_1 == -1) && (header_var_4 = *data, header_var_4 != 0)) {\n            if ((header_var_4 == 0x1d) || (header_var_4 == 0x16)) {\n                *data = header_var_6;\n                return 0;\n            }\n            *(ushort *)(header + 3) = *(ushort *)(header + 3) | 0x40;\n            return 0xffffffff;\n        }\n        header_var_2 = *(ushort *)(header + 3);\n        header_var_5 = (code *)header[10];\n    }\n    else {\n        header_var_1 = header[0x14];\n    }\n    if (((int)(header_var_3 << 0x1d) < 0) && (header_var_1 = header_var_1 - header[1], header[0xc] != 0)) {\n        header_var_1 = header_var_1 - header[0xf];\n    }\n    header_var_1 = (*header_var_5)(data,header[7],header_var_1,0);\n    if (header_var_1 == -1) {\n        header_var_4 = *data;\n        if (header_var_4 != 0) {\n            if ((header_var_4 != 0x1d) && (header_var_4 != 0x16)) {\n                *(ushort *)(header + 3) = *(ushort *)(header + 3) | 0x40;\n                return 0xffffffff;\n            }\n            *(ushort *)(header + 3) = *(ushort *)(header + 3) & 0xf7ff;\n            *header = header[4];\n            header[1] = 0;\n            goto LAB_00083a00;\n        }\n        header_var_2 = *(ushort *)(header + 3) & 0xf7ff;\n        header[1] = 0;\n        *(ushort *)(header + 3) = header_var_2;\n        *header = header[4];\n    }\n    else {\n        header_var_2 = *(ushort *)(header + 3) & 0xf7ff;\n        *header = header[4];\n        *(ushort *)(header + 3) = header_var_2;\n        header[1] = 0;\n    }\n    if ((int)((uint)header_var_2 << 0x13) < 0) {\n        header[0x14] = header_var_1;\n    }\nLAB_00083a00:\n    data_ptr_1 = (int *)header[0xc];\n    *data = header_var_6;\n    if (data_ptr_1 == (int *)0x0) {\n        return 0;\n    }\n    if (data_ptr_1 != header + 0x10) {\n        _free_r(data);\n    }\n    header[0xc] = 0;\n    return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "extract_data_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "transmitData_00081454",
                "this": "self",
                "uc_data": "data",
                "_tx_buffer": "transmit_buffer",
                "_pUart": "UART_instance",
                "UART_SR": "UART_status_register",
                "_iTail": "tail_index",
                "_iHead": "head_index",
                "DAT_000814a4": "data_mask",
                "_aucBuffer": "buffer",
                "UART_IER": "UART_interrupt_enable_register"
            },
            "code": "size_t __thiscall transmitData_00081454(UARTClass *this, uint8_t data)\n{\n    RingBuffer *txBuffer;\n    uint status;\n  \n    txBuffer = this->transmit_buffer;\n    status = this->_pUart->UART_SR << 0x1e;\n    if ((int)status < 0 && txBuffer->_iTail == txBuffer->_iHead) {\n        this->_pUart->UART_THR = (uint)data;\n    }\n    else {\n        uint nextHeadIndex = DAT_000814a4 & txBuffer->_iHead + 1U;\n        if ((int)nextHeadIndex < 0) {\n            nextHeadIndex = (nextHeadIndex - 1 | 0xffffff80) + 1;\n        }\n        do {\n        } while (txBuffer->_iTail == nextHeadIndex);\n        txBuffer->_aucBuffer[txBuffer->_iHead] = data;\n        this->transmit_buffer->_iHead = nextHeadIndex;\n        this->_pUart->UART_IER = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "transmitData_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_and_handle_errors_00084600",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_handle_errors_00084600(int *error_code, int file_descriptor) {\n    undefined *errno_ptr;\n    int close_result;\n    errno_ptr = PTR_errno_00084620;\n    *(undefined4 *)PTR_errno_00084620 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_errors_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initializeUART_00081578",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "init": "init"
            },
            "code": "void __thiscall initializeUART_00081578(UARTClass *uart, uint32_t baudRate){\n  init(uart, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initializeUART_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_file_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int read_result;\n  int *errno_ptr = PTR_errno_0008474c;\n  *(int *)PTR_errno_0008474c = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "wait_forever_0008116a"
            },
            "code": "void wait_forever_0008116a(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "isUARTClassValid_000813e0",
                "this": "uartClassInstance"
            },
            "code": "bool isUARTClassValid_000813e0(UARTClass *uartClassInstance)\n{\n    return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "isUARTClassValid_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "convert_and_write_to_stream_00083c40",
                "param_1": "stream",
                "param_2": "value",
                "param_3": "buffer",
                "uVar1": "locale_max",
                "iVar2": "write_result",
                "uVar3": "converted_length",
                "pbVar4": "current_buffer",
                "uVar5": "buffer_index",
                "local_1c": "converted_byte",
                "abStack_1b": "conversion_result",
                "*(ushort *)(param_3 + 3)": "flags",
                "param_3[0x19]": "buffer_start_flags",
                "param_3[2]": "buffer_end",
                "**param_3": "buffer_start",
                "uVar1 == 1": "is_single_byte_encoding",
                "uVar1 <= uVar5 + 1": "reached_end_of_buffer"
            },
            "code": "uint convert_and_write_to_stream_00083c40(undefined4 stream, uint value, byte **buffer){\n  uint locale_max = __locale_mb_cur_max();\n  byte converted_byte;\n  uint converted_length;\n  uint buffer_index = 0;\n  byte *current_buffer;\n  byte *buffer_start = *buffer;\n  byte *buffer_end = buffer[2];\n  ushort *flags = (ushort *)(buffer + 3);\n\n  if (-1 < (int)((uint)*flags << 0x12)) {\n    *flags = *flags | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n\n  if ((locale_max == 1) && (value - 1 < 0xff)) {\n    converted_length = value & 0xff;\n    converted_byte = (byte)converted_length;\n  }\n  else {\n    converted_length = _wcrtomb_r(stream, &converted_byte, value, buffer + 0x17);\n    if (converted_length == 0xffffffff) {\n      *flags = *flags | 0x40;\n      return 0xffffffff;\n    }\n    if (converted_length == 0) {\n      return value;\n    }\n  }\n\n  do {\n    current_buffer = buffer[2] + -1;\n    buffer[2] = current_buffer;\n    if ((int)current_buffer < 0) {\n      if ((int)buffer[6] <= (int)current_buffer) {\n        **buffer = (byte)converted_length;\n        current_buffer = *buffer;\n        converted_length = (uint)*current_buffer;\n        if (converted_length != 10) goto LAB_00083c90;\n      }\n      int write_result = __swbuf_r(stream, converted_length, buffer);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)converted_length;\n      current_buffer = *buffer;\nLAB_00083c90:\n      *buffer = current_buffer + 1;\n    }\n    if (locale_max <= buffer_index + 1) {\n      return value;\n    }\n    converted_length = (uint)buffer[0x1b][buffer_index];\n    buffer_index++;\n  } while( true );\n}",
            "called": [
                "__locale_mb_cur_max",
                "__swbuf_r",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_and_write_to_stream_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "resetTimerAndIncrementTick_0008116e",
                "iVar1": "isFalse"
            },
            "code": "void resetTimerAndIncrementTick_0008116e(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "__false",
                "tickReset",
                "TimeTick_Increment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "resetTimerAndIncrementTick_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  uint32_t uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  int iVar16;\n  int iVar17;\n  int *piVar18;\n  undefined4 uVar19;\n  int iVar20;\n  \n  puVar7 = PTR_estado_0008089c;\n  puVar9 = PTR_segundos_00080898;\n  puVar8 = PTR_minutos_00080894;\n  puVar3 = PTR_mmt_0008087c;\n  puVar5 = PTR_ssres_00080878;\n  puVar4 = PTR_mmres_00080874;\n  puVar2 = PTR_duty1_00080834;\n  puVar1 = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  iVar17 = *(int *)PTR_minutos_00080894;\n  iVar16 = iVar17 - *(int *)PTR_mmres_00080874;\n  if (iVar16 < 0) {\n    iVar16 = iVar16 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = iVar16;\n  puVar6 = PTR_sst_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar16 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_sst_00080880 = iVar16;\n  if (iVar16 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar16 + 0x3c;\n  }\n  iVar16 = *(int *)puVar3;\n  iVar20 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar16;\n  *(short *)(puVar1 + 0x38) = (short)iVar20;\n  if ((iVar16 == 0) && (iVar20 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_segundosp_00080888;\n  puVar3 = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == iVar17) {\n    iVar16 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar16 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = iVar16;\n    if (iVar16 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar17;\n    puVar3 = PTR_espera_plancha_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_espera_plancha_0008088c;\n  puVar3 = PTR_tiempo_espera_00080860;\n  iVar16 = *(int *)puVar7;\n  if (iVar16 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar18 = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *piVar18 = iVar16;\n  }\n  else {\n    if (iVar16 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      uVar12 = millis();\n      puVar7 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar7 = uVar12 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)puVar3 + 1;\n    piVar18 = (int *)PTR_mmres_00080a20;\n    puVar3 = PTR_ssres_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar12 = millis();\n      puVar3 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar3 = uVar12 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar16 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar12 = millis();\n      puVar8 = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < uVar12) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar8 = uVar12 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar12 = millis();\n  puVar8 = PTR_kia1_00080a60;\n  puVar3 = PTR_incre_00080a5c;\n  puVar5 = PTR_tiempopid1_00080a58;\n  puVar4 = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < uVar12) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    puVar9 = PTR_ep1_00080a34;\n    uVar19 = *(undefined4 *)PTR_ep1_00080a34;\n    uVar14 = __addsf3(uVar13,uVar19);\n    uVar14 = __aeabi_fmul(uVar14,*(undefined4 *)puVar8);\n    puVar7 = PTR_kip1_00080a64;\n    uVar14 = __addsf3(uVar14,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)puVar8 = uVar14;\n    uVar19 = __aeabi_fsub(uVar13,uVar19);\n    uVar19 = __aeabi_fmul(uVar19,*(undefined4 *)PTR_kda1_00080a38);\n    puVar8 = PTR_kdp1_00080a3c;\n    uVar19 = __aeabi_fsub(uVar19,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = uVar19;\n    uVar15 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    uVar15 = __addsf3(uVar15,uVar14);\n    __addsf3(uVar15,uVar19);\n    uVar15 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = uVar15;\n    uVar15 = __floatsisf();\n    *(undefined4 *)puVar9 = uVar13;\n    *(undefined4 *)puVar4 = uVar15;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar14;\n    *(undefined4 *)puVar8 = uVar19;\n    uVar12 = millis();\n    *(uint32_t *)puVar5 = uVar12 + *(int *)puVar2;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)puVar2);\n  iVar16 = __aeabi_fcmpge(*(undefined4 *)puVar4,uVar13);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  iVar16 = __aeabi_fcmple(*(undefined4 *)puVar4,0);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  uVar10 = __fixunssfsi(*(undefined4 *)puVar4);\n  iVar16 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar16 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_f2iz",
                "__aeabi_fcmple",
                "__fixunssfsi",
                "query",
                "__aeabi_fsub",
                "poll",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "millis",
                "__floatsisf",
                "__floatunsisf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "getReceivedDataSize_000813e4",
                "this": "this",
                "_rx_buffer": "rxBuffer",
                "_iHead": "rxBufferHead",
                "_iTail": "rxBufferTail"
            },
            "code": "int __thiscall UARTClass::getReceivedDataSize_000813e4(UARTClass *this)\n{\n    int head = this->rxBufferHead;\n    int tail = this->rxBufferTail;\n    int dataSize = head - tail & 0x7f;\n    return dataSize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "getReceivedDataSize_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "isEndOfString_00081cbc",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_00081cbc(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_UART_interrupt_00080aac",
                "PTR_Serial_00080ab4": "&Serial"
            },
            "code": "void handle_UART_interrupt_00080aac(void)\n{\n  UARTClass::IrqHandler(PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "charset"
            },
            "code": "const char* get_charset_00084290() {\n  return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_file_status_000846b4",
                "param_1": "status",
                "param_2": "file_descriptor",
                "param_3": "file_info",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_result"
            },
            "code": "void get_file_status_000846b4(int *status, int file_descriptor, struct stat *file_info) {\n  int fstat_result = 0;\n  int *errno_ptr = PTR_errno_000846d8;\n  *errno_ptr = 0;\n  fstat_result = _fstat(file_descriptor, file_info);\n  if ((fstat_result == -1) && (*(int *)errno_ptr != 0)) {\n    *status = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "returnErrorIfNoChange_000811a8",
                "cOld_UNUSED": "oldString",
                "cNew_UNUSED": "newString"
            },
            "code": "int returnErrorIfNoChange_000811a8(char *oldString, char *newString) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "returnErrorIfNoChange_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8::FUN_000813a8": "InitQueue",
                "this": "queue",
                "memset": "initializeMemory",
                "_iHead": "head",
                "_iTail": "tail",
                "FUN_000813a8": "InitQueue_000813a8"
            },
            "code": "InitQueue_000813a8 * __thiscall InitQueue_000813a8(InitQueue_000813a8 *queue)\n{\n  memset(queue, 0, 0x80);\n  queue->head = 0;\n  queue->tail = 0;\n  return queue;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "InitQueue_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "FUNC_00083d9c"
            },
            "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083e30;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083d9c",
            "calling": [
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "_realloc_r",
                "free",
                "__sflush_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_integer_product_000818c8",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "product",
                "uVar2": "shifted_multiplicand",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "uVar5": "sign_bit_mask",
                "iVar6": "sum",
                "uVar7": "temp",
                "bVar8": "multiplicand_is_zero"
            },
            "code": "uint calculate_integer_product_000818c8(uint multiplicand, uint multiplier) {\n  uint product;\n  uint sign_bit_mask;\n  int leading_zeroes_count;\n  uint shifted_multiplicand;\n  uint shifted_multiplier;\n  uint sum;\n  bool multiplicand_is_zero = multiplicand == 0;\n  bool multiplier_is_zero = multiplier == 0;\n  \n  if (multiplicand_is_zero || multiplier_is_zero) {\n    return multiplicand;\n  }\n  \n  sign_bit_mask = multiplier & 0x80000000;\n  if (sign_bit_mask != 0) {\n    multiplicand = ~multiplicand + 1;\n    multiplier = ~multiplier + (uint)(multiplicand != 0);\n  }\n  \n  shifted_multiplicand = multiplicand;\n  shifted_multiplier = multiplier;\n  if (multiplier_is_zero) {\n    shifted_multiplicand = 0;\n    shifted_multiplier = multiplicand;\n  }\n  \n  sign_bit_mask |= 0x5b000000;\n  if (multiplier_is_zero) {\n    sign_bit_mask += 0xf0000000;\n  }\n  \n  leading_zeroes_count = count_leading_zeroes(shifted_multiplier);\n  sum = (sign_bit_mask - 0x800000) + (leading_zeroes_count - 8) * -0x800000;\n  if (leading_zeroes_count < 8) {\n    shifted_multiplicand <<= (leading_zeroes_count + 0x18) & 0xff;\n    sum += ((shifted_multiplier >> (0x20 - (leading_zeroes_count + 0x18) & 0xff)) - ((int)shifted_multiplicand >> 0x1f)) + (uint)((shifted_multiplicand << 1) == 0);\n    sum &= ~(shifted_multiplicand >> 0x1f);\n    return sum;\n  }\n  \n  sum += shifted_multiplicand << (leading_zeroes_count - 8);\n  sum += shifted_multiplier << (leading_zeroes_count - 8);\n  sum += multiplicand >> (0x20 - (leading_zeroes_count - 8));\n  sum += (uint)(0x7fffffff < (multiplicand << (leading_zeroes_count - 8)));\n  if ((multiplicand << (leading_zeroes_count - 8)) == 0x80000000) {\n    sum &= 0xfffffffe;\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_integer_product_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "result",
                "bVar1": "is_result_negative",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input_1, uint input_2)\n{\n  bool is_negative_1 = ((int)input_1 >> 0x18 == -1);\n  bool is_negative_2 = ((int)input_2 >> 0x18 == -1);\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  if ((is_negative_1 || is_negative_2) && ((is_negative_1 && ((input_1 & 0x7fffff) != 0)) || (is_negative_2 && ((input_2 & 0x7fffff) != 0)))) {\n    return 1;\n  }\n  uint result = doubled_input_1 | input_2 & 0x7fffffff;\n  bool is_result_zero = (result == 0);\n  if (!is_result_zero) {\n    result = input_1 ^ input_2;\n    is_result_zero = (result == 0);\n  }\n  bool is_result_negative = -1 < (int)result;\n  if (is_result_negative) {\n    result = doubled_input_1 + input_2 * -2;\n    is_result_zero = (result == 0);\n  }\n  if (is_result_negative && doubled_input_2 <= doubled_input_1 && !is_result_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  if (!is_result_negative || doubled_input_2 > doubled_input_1) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    result = result | 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_array_and_fini_functions_00081d7c",
                "puVar1": "fini_array_start",
                "puVar2": "preinit_array_start",
                "iVar3": "i",
                "ppcVar4": "preinit_function_ptr",
                "iVar5": "num_preinit_functions",
                "PTR___preinit_array_end_00081dbc": "preinit_array_end",
                "PTR___preinit_array_end_00081dc0": "preinit_array_start",
                "PTR___preinit_array_end_00081dc8": "fini_array_start",
                "PTR__fini_00081dc4": "fini_array_size"
            },
            "code": "void execute_preinit_array_and_fini_functions_00081d7c(void)\n{\n  int num_preinit_functions = (int)PTR___preinit_array_end_00081dbc - (int)PTR___PTR___preinit_array_end_00081dbc_00081dc0 >> 2;\n  if (num_preinit_functions != 0) {\n    code **preinit_function_ptr = (code **)(PTR___PTR___preinit_array_end_00081dbc_00081dc0 - 4);\n    int i = 0;\n    do {\n      i++;\n      preinit_function_ptr++;\n      (**preinit_function_ptr)();\n    } while (num_preinit_functions != i);\n  }\n  undefined *PTR___preinit_array_end_00081dc8 = PTR___preinit_array_end_00081dbc;\n  undefined *fini_array_end = PTR___preinit_array_end_00081dc8 + (int)PTR__fini_00081dc4 >> 2;\n  int num_fini_functions = (int)fini_array_end - (int)PTR___preinit_array_end_00081dc8 >> 2;\n  if (num_fini_functions != 0) {\n    code **fini_function_ptr = (code **)(PTR___preinit_array_end_00081dc8 - 4);\n    int i = 0;\n    do {\n      i++;\n      fini_function_ptr++;\n      (**fini_function_ptr)();\n    } while (num_fini_functions != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_and_fini_functions_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "iterate_callbacks_on_bit_set_000810bc",
                "uVar1": "bit_index",
                "uVar2": "bit_mask"
            },
            "code": "void iterate_callbacks_on_bit_set_000810bc(void)\n{\n  uint32_t bit_mask;\n  uint32_t bit_index;\n  bit_mask = *(uint32_t *)(DAT_000810ec + 0x4c);\n  while( true ) {\n    bit_index = count_leading_zeroes(bit_mask);\n    if (bit_index > 0x1f) break;\n    bit_index = 0x1f - bit_index;\n    if (*(code **)(PTR_callbacksPioB_000810f0 + bit_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioB_000810f0 + bit_index * 4))();\n    }\n    bit_mask &= ~(1 << bit_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "iterate_callbacks_on_bit_set_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_and_concat_00081c5c",
                "param_1": "float32_t num1",
                "param_2": "float32_t num2",
                "CONCAT44": "concat_floats"
            },
            "code": "float32_t compare_and_concat_00081c5c(float32_t param_1, float32_t param_2) {\n    __cmpsf2();\n    return (float64_t)param_2 << 32 | (uint64_t)param_1;\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple"
            ],
            "imported": false,
            "current_name": "compare_and_concat_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "check_ticks_and_call_callback_00081388",
                "iVar1": "ticks_left"
            },
            "code": "void check_ticks_and_call_callback_00081388(void)\n{\n  int ticks_left = *(int *)PTR_ticks_000813a0;\n  if (ticks_left != -1 && --ticks_left == 0) {\n    (*DAT_000813a4)();\n  }\n  *(int *)PTR_ticks_000813a0 = ticks_left;\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_int_ptr_1",
                "puVar4": "source_int_ptr_2",
                "uVar5": "source_int_1",
                "uVar6": "source_int_2",
                "puVar7": "destination_int_ptr_1",
                "puVar8": "destination_int_ptr_2",
                "pcVar9": "destination_char_ptr",
                "bVar10": "is_aligned",
                "LAB_000829f8": "loop_break"
            },
            "code": "char * copy_string_00082994(char *destination, char *source)\n{\n  char current_char;\n  ushort current_short;\n  uint *source_int_ptr_1;\n  uint *source_int_ptr_2;\n  uint source_int_1;\n  uint source_int_2;\n  uint *destination_int_ptr_1;\n  uint *destination_int_ptr_2;\n  char *destination_char_ptr = destination;\n  bool is_aligned = ((((uint)destination ^ (uint)source) & 3) == 0);\n  if (!is_aligned) {\n    do {\n      current_char = *source;\n      *destination_char_ptr = current_char;\n      source++;\n      destination_char_ptr++;\n    } while (current_char != '\\0');\n    return destination;\n  }\n  destination_int_ptr_1 = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    source_int_ptr_2 = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      source_int_ptr_2 = (uint *)(source + 1);\n      current_char = *source;\n      destination_int_ptr_1 = (uint *)(destination + 1);\n      *destination = current_char;\n      if (current_char == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)source_int_ptr_2;\n    if (((uint)source_int_ptr_2 & 2) != 0) {\n      source = (char *)((int)source_int_ptr_2 + 2);\n      current_short = *(ushort *)source_int_ptr_2;\n      bool is_short_zero = (current_short & 0xff) == 0;\n      if (is_short_zero) {\n        *(char *)destination_int_ptr_1 = (char)current_short;\n      }\n      else {\n        *(ushort *)destination_int_ptr_1 = current_short;\n        is_short_zero = (current_short & 0xff00) == 0;\n        destination_int_ptr_1 = (uint *)((int)destination_int_ptr_1 + 2);\n      }\n      if (is_short_zero) {\n        return destination;\n      }\n    }\n  }\n  source_int_1 = *(uint *)source;\n  source_int_ptr_2 = (uint *)((int)source + 4);\n  destination_int_ptr_2 = destination_int_ptr_1;\n  if (((uint)source & 4) != 0) {\n    if ((source_int_1 + 0xfefefeff & ~source_int_1 & 0x80808080) != 0) {\n      goto LAB_000829f8;\n    }\n    destination_int_ptr_2 = destination_int_ptr_1 + 1;\n    *destination_int_ptr_1 = source_int_1;\n    source_int_ptr_2 = (uint *)((int)source + 8);\n    source_int_1 = *(uint *)((int)source + 4);\n  }\n  while (true) {\n    source_int_ptr_1 = source_int_ptr_2 + 1;\n    source_int_2 = *source_int_ptr_2;\n    destination_int_ptr_1 = destination_int_ptr_2;\n    if ((source_int_1 + 0xfefefeff & ~source_int_1 & 0x80808080) != 0) {\n      break;\n    }\n    destination_int_ptr_2 = destination_int_ptr_1 + 1;\n    *destination_int_ptr_1 = source_int_1;\n    source_int_1 = source_int_2;\n    if ((source_int_2 + 0xfefefeff & ~source_int_2 & 0x80808080) != 0) {\n      break;\n    }\n    source_int_ptr_2 = source_int_ptr_2 + 2;\n    source_int_1 = *source_int_ptr_1;\n    destination_int_ptr_2 = destination_int_ptr_1 + 2;\n    *destination_int_ptr_1 = source_int_2;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination_int_ptr_1 = (char)source_int_1;\n    source_int_2 = source_int_1 & 0xff;\n    source_int_1 = source_int_1 >> 8 | source_int_1 << 0x18;\n    destination_int_ptr_1 = (uint *)((int)destination_int_ptr_1 + 1);\n  } while (source_int_2 != 0);\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_uart_ring_buffers_00080c0c",
                "PTR_tx_buffer1_00080ca4": "tx_buffer1",
                "PTR_rx_buffer1_00080ca0": "rx_buffer1",
                "PTR_rx_buffer2_00080cd8": "rx_buffer2",
                "PTR_rx_buffer3_00080cac": "rx_buffer3",
                "PTR_rx_buffer4_00080cb4": "rx_buffer4",
                "PTR_tx_buffer2_00080cdc": "tx_buffer2",
                "PTR_tx_buffer3_00080cb8": "tx_buffer3",
                "PTR_tx_buffer4_00080cbc": "tx_buffer4",
                "PTR_Serial_00080cb0": "serial_port",
                "DAT_00080ca8": "baud_rate",
                "PTR_Serial1_00080cc4": "serial1",
                "DAT_00080cc0": "baud_rate_1",
                "PTR_Serial2_00080ccc": "serial2",
                "DAT_00080cc8": "baud_rate_2",
                "PTR_Serial3_00080cd4": "serial3",
                "DAT_00080cd0": "baud_rate_3"
            },
            "code": "void initialize_uart_ring_buffers_00080c0c(void)\n{\n  RingBuffer PTR_rx_buffer1_00080ca0;\n  RingBuffer PTR_tx_buffer1_00080ca4;\n  RingBuffer PTR_rx_buffer2_00080cd8;\n  RingBuffer PTR_rx_buffer3_00080cac;\n  RingBuffer PTR_rx_buffer4_00080cb4;\n  RingBuffer PTR_tx_buffer2_00080cdc;\n  RingBuffer PTR_tx_buffer3_00080cb8;\n  RingBuffer PTR_tx_buffer4_00080cbc;\n  UARTClass PTR_Serial_00080cb0(PTR_Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, &PTR_rx_buffer1_00080ca0, &PTR_tx_buffer1_00080ca4);\n  USARTClass PTR_Serial1_00080cc4(PTR_Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, &PTR_rx_buffer2_00080cd8, &PTR_tx_buffer2_00080cdc);\n  USARTClass PTR_Serial2_00080ccc(PTR_Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, &PTR_rx_buffer3_00080cac, &PTR_tx_buffer3_00080cb8);\n  USARTClass PTR_Serial3_00080cd4(PTR_Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, &PTR_rx_buffer4_00080cb4, &PTR_tx_buffer4_00080cbc);\n}\n",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_uart_ring_buffers_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "kill_process_and_return_errno_00084418",
                "param_1": "return_errno",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_and_return_errno_00084418(int *return_errno, int process_id, int signal) {\n    undefined *errno_ptr;\n    errno_ptr = PTR_errno_0008443c;\n    *(undefined4 *)PTR_errno_0008443c = 0;\n    _kill(process_id, signal);\n    if ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n        *return_errno = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_and_return_errno_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_param_00080d2e",
                "param_1": "obj_ptr",
                "param_2": "param_val",
                "param_3": "param_type",
                "uVar1": "new_val"
            },
            "code": "void set_param_00080d2e(uint32_t obj_ptr, uint32_t param_val, uint32_t param_type) {\n  uint32_t new_val;\n  switch(param_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      new_val = (*(uint32_t *)(obj_ptr + 0x70) & *(uint32_t *)(obj_ptr + 0x70) & ~param_val);\n      break;\n    case 2:\n      new_val = (*(uint32_t *)(obj_ptr + 0x70) | param_val);\n      break;\n    default:\n      goto switchD_00080d34_caseD_6;\n  }\n  *(uint32_t *)(obj_ptr + 0x70) = new_val;\n\nswitchD_00080d34_caseD_6:\n  *(uint32_t *)(obj_ptr + 0x44) = param_val;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_param_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_bit_is_set_20070000",
                "DAT_2007001c": "ptr_data",
                "DAT_20070020": "value_to_update_register_with",
                "DAT_20070024": "value_to_update_register_with",
                "DAT_20070028": "ptr_register_to_update"
            },
            "code": "void wait_until_bit_is_set_20070000(int* DAT_2007001c, int offset, int value_to_wait_for, int* DAT_20070028, int DAT_20070020) {\n  disableIRQinterrupts();\n  do {\n  } while(value_to_wait_for < (*(int *)(DAT_2007001c + offset)) << 0x1f);\n  *(int *)(DAT_2007001c + offset - 4) = DAT_20070020;\n  do {\n  } while(value_to_wait_for < (*(int *)(DAT_2007001c + offset)) << 0x1f);\n  *DAT_20070028 = DAT_20070020;\n  do {\n  } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_bit_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "PTR_s_Exiting_with_status__d__000811fc": "print_exit_status",
                "status": "status"
            },
            "code": "void exit_with_status_000811f0(int status)\n{\n  PTR_s_Exiting_with_status__d__000811fc(status);\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "incrementTickCount_00081704",
                "PTR__dwTickCount_00081710": "tickCountPtr"
            },
            "code": "void incrementTickCount_00081704(void)\n{\n  int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n  *PTR__dwTickCount_00081710 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "execute_global_destructors_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_array"
            },
            "code": "void execute_global_destructors_00083c10() {\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (num_destructors != 0) {\n    code **destructor_array = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_array--;\n      (**destructor_array)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "check_overflow_and_compare_00081bec",
                "param_1": "x",
                "param_2": "y",
                "uVar2": "x2",
                "uVar3": "y2",
                "uVar4": "combined",
                "bVar1": "overflow",
                "bVar5": "equal"
            },
            "code": "uint check_overflow_and_compare_00081bec(uint x, uint y)\n{\n    uint x2 = x * 2;\n    uint y2 = y * 2;\n    bool overflow = false;\n    bool equal = false;\n    bool less_than = false;\n    bool greater_than = false;\n    \n    if (((int)x2 >> 0x18 == -1 || (int)y2 >> 0x18 == -1) && (((int)x2 >> 0x18 == -1 && ((x & 0x7fffff) != 0)) || ((int)y2 >> 0x18 == -1 && ((y & 0x7fffff) != 0)))) {\n        return 1;\n    }\n    \n    uint combined = x2 | y & 0x7fffffff;\n    equal = (combined == 0);\n    if (!equal) {\n        uint xor = x ^ y;\n        equal = (xor == 0);\n    }\n    \n    overflow = -1 < (int)(x ^ y);\n    if (overflow) {\n        x = x2 + y * -2;\n        equal = (x == 0);\n    }\n    \n    if (overflow && y2 <= x2 && !equal) {\n        less_than = true;\n    }\n    \n    if (!overflow || y2 > x2) {\n        greater_than = true;\n    }\n    \n    if (!equal) {\n        x |= 1;\n    }\n    \n    if (less_than) {\n        x = (int)y >> 0x1f;\n    }\n    \n    if (greater_than) {\n        x = ~((int)y >> 0x1f);\n    }\n    \n    return x;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "check_overflow_and_compare_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_to_file_000844c4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "stream",
                "param_4": "flags",
                "uVar1": "character_count",
                "uVar2": "character_value",
                "puVar3": "stream_pointer",
                "iVar4": "setup_result"
            },
            "code": "uint write_to_file_000844c4(int file_descriptor, uint character, undefined4 *stream, undefined4 flags)\n{\n  ushort character_count;\n  uint character_value;\n  undefined *stream_pointer;\n  int setup_result;\n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_count = *(ushort *)(stream + 3);\n  character_value = (uint)character_count;\n  stream[2] = stream[6];\n  if ((-1 < (int)(character_value << 0x1c)) || ((setup_result = stream[4]), setup_result == 0)) {\n    setup_result = __swsetup_r(file_descriptor, stream, character_count, character_value, flags);\n    if (setup_result != 0) {\n      return 0xffffffff;\n    }\n    character_count = *(ushort *)(stream + 3);\n    setup_result = stream[4];\n    character_value = (uint)character_count;\n  }\n  character = character & 0xff;\n  if ((int)(character_value << 0x12) < 0) {\n    stream_pointer = (undefined *)*stream;\n    setup_result = (int)stream_pointer - setup_result;\n    if (setup_result < (int)stream[5]) {\nLAB_000844f6:\n      setup_result = setup_result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream[0x19] = stream[0x19] & 0xffffdfff;\n    stream_pointer = (undefined *)*stream;\n    *(ushort *)(stream + 3) = character_count | 0x2000;\n    setup_result = (int)stream_pointer - setup_result;\n    if (setup_result < (int)stream[5]) goto LAB_000844f6;\n  }\n  setup_result = _fflush_r(file_descriptor, stream);\n  if (setup_result != 0) {\n    return 0xffffffff;\n  }\n  stream_pointer = (undefined *)*stream;\n  setup_result = 1;\nLAB_000844f8:\n  stream[2] = stream[2] + -1;\n  *stream = stream_pointer + 1;\n  *stream_pointer = (char)character;\n  if (((stream[5] == setup_result) || (((int)((uint)*(ushort *)(stream + 3) << 0x1f) < 0 && (character == 10)))) && (setup_result = _fflush_r(file_descriptor, stream), setup_result != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_file_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "uVar5": "shifted_zero",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_0008189c(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes_count - 8;\n  uint sign_bit = input & 0x80000000;\n  uint shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  uint result = 0;\n\n  if (input == 0)\n  {\n    return 0;\n  }\n\n  if ((int)sign_bit < 0)\n  {\n    input = -input;\n  }\n\n  if (leading_zeroes_count > 7)\n  {\n    uint shifted_zero = 0 << (shift_amount & 0xff);\n    uint shifted_max = 0U >> (0x20 - shift_amount & 0xff);\n    uint shifted_7fffffff = (uint)(0x7fffffff < shifted_zero);\n    result = (sign_bit | 0x4b000000) - 0x800000 + (input << (shift_amount & 0xff)) + shifted_zero + shifted_max + shifted_7fffffff;\n    if (shifted_zero == 0x80000000)\n    {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n\n  result = (sign_bit | 0x4b000000) - 0x800000 + ((input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0)\n  {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dst_char",
                "puVar2": "dst_aligned",
                "puVar3": "dst",
                "puVar4": "dst_char_temp",
                "puVar5": "src_aligned",
                "puVar6": "src_char"
            },
            "code": "void *copy_memory_0008234c(void *destination, const void *source, size_t num_bytes) {\n  unsigned char *dst = (unsigned char *)destination;\n  const unsigned char *src = (const unsigned char *)source;\n  if ((((unsigned int)src | (unsigned int)dst) & 3) != 0) {\n    if (num_bytes < 8) {\n      while (num_bytes--) {\n        *dst++ = *src++;\n      }\n      return destination;\n    }\n    if ((((unsigned int)src & 3) != 0) && (((unsigned int)dst & 3) != 0)) {\n      unsigned int misalignment = 4 - ((unsigned int)dst & 3);\n      num_bytes -= misalignment;\n      while (misalignment--) {\n        *dst++ = *src++;\n      }\n      unsigned int *aligned_dst = (unsigned int *)dst;\n      const unsigned int *aligned_src = (const unsigned int *)src;\n      while (num_bytes >= 16) {\n        aligned_dst[0] = aligned_src[0];\n        aligned_dst[1] = aligned_src[1];\n        aligned_dst[2] = aligned_src[2];\n        aligned_dst[3] = aligned_src[3];\n        aligned_dst += 4;\n        aligned_src += 4;\n        num_bytes -= 16;\n      }\n      dst = (unsigned char *)aligned_dst;\n      src = (unsigned char *)aligned_src;\n    }\n  }\n  while (num_bytes >= 16) {\n    ((unsigned int *)dst)[0] = ((unsigned int *)src)[0];\n    ((unsigned int *)dst)[1] = ((unsigned int *)src)[1];\n    ((unsigned int *)dst)[2] = ((unsigned int *)src)[2];\n    ((unsigned int *)dst)[3] = ((unsigned int *)src)[3];\n    ((unsigned int *)dst)[4] = ((unsigned int *)src)[4];\n    ((unsigned int *)dst)[5] = ((unsigned int *)src)[5];\n    ((unsigned int *)dst)[6] = ((unsigned int *)src)[6];\n    ((unsigned int *)dst)[7] = ((unsigned int *)src)[7];\n    dst += 16;\n    src += 16;\n    num_bytes -= 16;\n  }\n  while (num_bytes--) {\n    *dst++ = *src++;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_master_00080a68",
                "puVar1": "rx_string_ptr",
                "PTR_RxString_00080a94": "rx_string_ptr",
                "PTR_s__00080a98": "s_ptr",
                "DAT_00080aa0": "exit_function",
                "PTR___dso_handle_00080a9c": "dso_handle_ptr",
                "PTR_master_00080aa4": "master_ptr"
            },
            "code": "void initialize_master_00080a68(void)\n{\n  String* PTR_RxString_00080a94 = PTR_RxString_00080a94;\n  String::String(PTR_RxString_00080a94, PTR_s__00080a98);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  uint8_t* PTR_master_00080aa4 = PTR_master_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  PTR_master_00080aa4[5] = 0;\n  PTR_master_00080aa4[6] = 6;\n  *(uint16_t *)(PTR_master_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_master_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "__thiscall String::FUN_0008165c": "createString",
                "this": "str",
                "cstr": "cstring",
                "length": "length",
                "uVar1": "success",
                "len": "length",
                "buffer": "content",
                "FUN_0008165c": "createString_0008165c"
            },
            "code": "String* createString_0008165c(String* str, char* cstring, uint length)\\n{\\n  uchar success = reserve(str, length);\\n  if (success == \"\\0\") {\\n    invalidate(str);\\n  }\\n  else {\\n    str->length = length;\\n    strcpy(str->content, cstring);\\n  }\\n  return str;\\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "createString_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte)\n{\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_first_occurrence_of_character_00084384",
                "__s": "string",
                "__c": "character",
                "__n": "length",
                "puVar1": "last_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "different_bits",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "different_bits_mask",
                "bVar8": "character_found"
            },
            "code": "void *find_first_occurrence_of_character_00084384(void *string, int character, size_t length) {\n  uint *current_word;\n  uint *last_word;\n  uint character_mask;\n  uint different_bits_mask;\n  byte *current_byte;\n  byte *last_byte;\n  uint different_bits;\n  bool character_found;\n  character_mask = character & 0xff;\n  if (((uint)string & 3) == 0) {\n    current_word = (uint *)string;\n    last_word = (uint *)length;\n    if ((uint *)0x3 < length) {\n      different_bits_mask = character_mask | character_mask << 8;\n      do {\n        different_bits = *current_word ^ (different_bits_mask | different_bits_mask << 0x10);\n        current_word = (uint *)string;\n        last_word = (uint *)length;\n        if ((different_bits + 0xfefefeff & ~different_bits & 0x80808080) != 0) break;\n        length = length + -4;\n        current_word = (uint *)((int)string + 4);\n        string = (uint *)((int)string + 4);\n        last_word = (uint *)length;\n      } while ((uint *)0x3 < length);\n    }\n    string = last_word;\n    last_byte = (byte *)((int)string + -1);\n    if (((uint *)string != (uint *)0x0) && (string = current_word, *(byte *)current_word != character_mask)) {\n      current_byte = (byte *)0x0;\n      do {\n        string = (void *)((int)string + 1);\n        character_found = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (character_found) goto character_not_found;\n      } while (*string != character_mask);\n    }\n  }\n  else if (length == 0) {\n    string = (uint *)0x0;\n  }\n  else {\n    if (*string != character_mask) {\n      current_word = (uint *)((int)string + 1);\n      length = (size_t)(length - 1);\n      do {\n        string = current_word;\n        if (((uint)string & 3) == 0) goto look_for_character_in_word;\n        if ((uint *)length == (uint *)0x0) goto character_not_found;\n        current_word = (uint *)((int)string + 1);\n        length = (size_t)(length + -1);\n      } while (*string != character_mask);\n    }\n  }\ncharacter_not_found:\n  return string;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_of_character_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "execute_signal_handler_00082ab0",
                "__pid": "process_id",
                "__sig": "signal_number",
                "iVar1": "result"
            },
            "code": "int execute_signal_handler_00082ab0(__pid_t process_id, int signal_number)\n{\n  int result = _execute_signal_handler_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, process_id, signal_number);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "execute_signal_handler_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "check_if_not_null_00081c6c",
                "in_ZR": "input"
            },
            "code": "bool check_if_not_null_00081c6c(char input){\n  __aeabi_cfcmpeq();\n  return input != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_not_null_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)": "*",
                "+ 4": " + 1",
                "|": " | ",
                "& 1": " & 1",
                "<< 7": " << 7"
            },
            "code": "void update_flags_00081034(uint32_t* data, uint32_t flag, uint32_t value) {\n    uint32_t* flags_ptr = data + 1;\n    uint32_t current_flags = *flags_ptr;\n    uint32_t masked_value = value & 1;\n    uint32_t shifted_value = masked_value << 7;\n    uint32_t new_flags = current_flags | flag | shifted_value;\n    *flags_ptr = new_flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flags_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "file_descriptor",
                "param_2": "file_mode"
            },
            "code": "void close_file_descriptor_000844bc(int file_descriptor, int file_mode) {\n    _close_r(file_descriptor, (int)*(short *)(file_mode + 0xe));\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "initialize_exit_function_00083974",
                "DAT_00083980": "exit_function_pointer",
                "DAT_00083984": "exit_function"
            },
            "code": "void initialize_exit_function_00083974(void)\n{\n  if (DAT_00083980 != 0) {\n    atexit(DAT_00083980);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_exit_function_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_00084700(int *result, int file_descriptor, int offset, int whence) {\n    int seek_result = lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && errno != 0) {\n        *result = errno;\n        return;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_bit_00080e5c",
                "param_1": "bit_position",
                "uVar1": "mask",
                "uVar2": "data"
            },
            "code": "int check_bit_00080e5c(uint bit_position)\n{\n    uint mask;\n    uint data;\n    if (bit_position < 0x2d) {\n        if (bit_position < 0x20) {\n            mask = 1 << (bit_position & 0xff);\n            data = *(uint *)(DAT_00080e98 + 0x18) & mask;\n            if (data == mask) {\n                *(uint *)(DAT_00080e98 + 0x14) = data;\n            }\n        }\n        else {\n            mask = 1 << (bit_position - 0x20 & 0xff);\n            data = *(uint *)(DAT_00080e98 + 0x108) & mask;\n            if (data == mask) {\n                *(uint *)(DAT_00080e98 + 0x104) = data;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_if_not_greater_than_or_equal_to_zero_00081ca8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool check_if_not_greater_than_or_equal_to_zero_00081ca8(void)\n{\n  bool is_CY_zero = __aeabi_cfrcmple();\n  bool is_ZR_zero = !(bool)in_CY;\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_if_not_greater_than_or_equal_to_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "set_pin_value_00081318",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "pin_description_ptr",
                "puVar2": "pin_status_ptr",
                "iVar3": "output_data_status",
                "uVar4": "pin_desc_1",
                "uVar5": "pin_desc_2",
                "uVar6": "new_pin_value"
            },
            "code": "void set_pin_value_00081318(uint32_t pin_number, uint32_t pin_value)\\n{\\n    uint32_t *pin_status_ptr = PTR_g_pinStatus_00081384;\\n    uint32_t *pin_description_ptr = PTR_g_APinDescription_00081380;\\n    if (pin_description_ptr[pin_number * 0x1c + 0xc] != \"\\0\") {\\n        uint32_t new_pin_value = pin_value;\\n        if ((pin_status_ptr[pin_number] & 0xf) == 5) {\\n            pinMode(pin_number, OUTPUT);\\n        }\\n        pin_status_ptr[pin_number] = pin_status_ptr[pin_number] & 0xf | (byte)(pin_value << 4);\\n        uint32_t pin_desc_1 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c);\\n        uint32_t pin_desc_2 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c + 4);\\n        int output_data_status = PIO_GetOutputDataStatus(pin_desc_1, pin_desc_2);\\n        if (output_data_status == 0) {\\n            PIO_PullUp(pin_desc_1, pin_desc_2, pin_value);\\n            return;\\n        }\\n        PIO_SetOutput(pin_desc_1, pin_desc_2, pin_value, 0, 1, new_pin_value);\\n    }\\n    return;\\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "begin",
                "getRxBuffer",
                "init",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "set_pin_value_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getTickCount_00081714",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081714(void)\n{\n  uint32_t* PTR__dwTickCount_0008171c = (uint32_t*) PTR__dwTickCount_0008171c;\n  return *PTR__dwTickCount_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "isEndOfString_00081c80",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_00081c80(void)\n{\n  char current_char;\n  __aeabi_cfcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "seek_and_update_0008449c",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "seek_offset": "*(short *)(buffer_address + 0xe)",
                "flag": "*(ushort *)(buffer_address + 0xc)"
            },
            "code": "void seek_and_update_0008449c(int file_descriptor, int buffer_address){\n  int seek_offset = *(short *)(buffer_address + 0xe);\n  int seek_result = _lseek_r(file_descriptor, seek_offset);\n  ushort flag = *(ushort *)(buffer_address + 0xc);\n  \n  if (seek_result == -1) {\n    flag &= 0xefff;\n  }\n  else {\n    flag |= 0x1000;\n    *(int *)(buffer_address + 0x50) = seek_result;\n  }\n  \n  *(ushort *)(buffer_address + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "result_low",
                "lVar2": "result"
            },
            "code": "void calculate_difference_0008477c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *difference) {\n  uint result_low = dividend * multiplier_low;\n  ulonglong result = (ulonglong)dividend * multiplier_high + (ulonglong)(result_low >> 32);\n  difference[0] = (int)(dividend - (result & 0xffffffff));\n  difference[1] = divisor - (int)(result >> 32) - (uint)(dividend < (result & 0xffffffff));\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "readSerialData_000801b0",
                "this": "modbusInstance",
                "bVar1": "isBufferFull",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "readResult",
                "bVar5": "currentBufferSize",
                "u8txenpin": "transmitEnablePin",
                "u8BufferSize": "bufferSize",
                "u8serno": "serialNumber",
                "au8Buffer": "dataBuffer",
                "u16InCnt": "incomingCount",
                "u16errCnt": "errorCount"
            },
            "code": "int8_t __thiscall Modbus::readSerialData_000801b0(Modbus *modbusInstance) {\n  bool isBufferFull;\n  uchar receivedByte;\n  uint8_t bufferSize;\n  int readResult;\n  byte currentBufferSize;\n\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\n  }\n\n  isBufferFull = false;\n  bufferSize = 0;\n\n  if (modbusInstance->serialNumber < 4) {\n    while (readResult = (**(code **)(*(int *)modbusInstance->port + 8))(), readResult != 0) {\n      currentBufferSize = bufferSize;\n      receivedByte = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n      bufferSize = currentBufferSize + 1;\n      modbusInstance->dataBuffer[currentBufferSize] = receivedByte;\n\n      if (bufferSize > 0x3f) {\n        isBufferFull = true;\n      }\n    }\n  }\n\n  modbusInstance->incomingCount++;\n\n  if (isBufferFull) {\n    bufferSize = 0xfd;\n    modbusInstance->errorCount++;\n  }\n\n  return bufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readSerialData_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "insert_000813c2",
                "this": "buffer",
                "c": "data",
                "_iHead": "head",
                "_iTail": "tail",
                "_aucBuffer": "data"
            },
            "code": "void __thiscall RingBuffer::insert_000813c2(RingBuffer *buffer, uint8_t data) {\n  uint next_head = (buffer->head + 1) & 0x7f;\n  if (next_head != buffer->tail) {\n    buffer->data[buffer->head] = data;\n    buffer->head = next_head;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "insert_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "UART_Controller_000814e4",
                "*this": "this",
                "*pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "*pRx_buffer": "rx_buffer",
                "*pTx_buffer": "tx_buffer",
                "puVar1": "write_ptr"
            },
            "code": "UART_Controller_000814e4 * __thiscall UART_Controller_000814e4::UART_Controller_000814e4(Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  undefined *write_ptr;\n  this->field_0x4 = 0;\n  this->field_0x8 = 1000;\n  write_ptr = PTR_PTR_write_1_00081504;\n  this->uart = uart;\n  this->irq = irq;\n  this->rx_buffer = rx_buffer;\n  this->id = id;\n  this->tx_buffer = tx_buffer;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UART_Controller_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "parameters",
                "param_2": "new_value",
                "param_3": "flags",
                "bVar1": "is_negative_flag",
                "PTR_00000014": "parameters[17]",
                "PTR_0000004c": "parameters[25]",
                "PTR_00000048": "parameters[24]",
                "PTR_00000020": "parameters[8]",
                "PTR_00000024": "parameters[9]",
                "PTR_00000080": "parameters[32]",
                "PTR_00000014[5]": "parameters[5]"
            },
            "code": "void update_parameters_00080d54(int* parameters, int new_value, unsigned int flags)\n{\n  bool is_negative_flag = (int)(flags << 0x1f) < 0;\n  PTR_00000014 = new_value;\n  if (is_negative_flag) {\n    PTR_0000004c = new_value;\n  }\n  if (!is_negative_flag) {\n    PTR_00000048 = new_value;\n  }\n  bool is_second_bit_set = (flags & 0x2) != 0;\n  if (is_second_bit_set) {\n    PTR_00000020 = new_value;\n  }\n  if (!is_second_bit_set) {\n    PTR_00000024 = new_value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    PTR_00000080 = new_value;\n  }\n  PTR_00000014[5] = new_value;\n  *parameters = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculateCRC_0008021c",
                "this": "modbus",
                "u8length": "bufferLength",
                "pMVar1": "currentModbus",
                "uVar2": "crc",
                "cVar3": "loopCounter",
                "uVar4": "bitValue"
            },
            "code": "uint16_t __thiscall Modbus::calculateCRC_0008021c(Modbus *modbus, uint8_t bufferLength) {\n  Modbus *currentModbus = modbus;\n  uint16_t crc = 0xffff;\n  for (; ((int)currentModbus - (int)modbus & 0xffU) < (uint)bufferLength; currentModbus = (Modbus *)((int)&currentModbus->port + 1)) {\n    crc ^= currentModbus->buffer[0];\n    for (int i = 0; i < 8; i++) {\n      if (crc & 0x0001) {\n        crc = (crc >> 1) ^ 0xa001;\n      }\n      else {\n        crc = crc >> 1;\n      }\n    }\n  }\n  return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateCRC_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sbprintf",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "__sinit",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "walk_and_free_memory_blocks_00083b08",
                "param_1": "block",
                "DAT_00083b10": "free_func"
            },
            "code": "void walk_and_free_memory_blocks_00083b08(void* block, void (*DAT_00083b10)(void*))\n{\n    _fwalk(block, DAT_00083b10);\n    return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "walk_and_free_memory_blocks_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "_FUN_00081e04_r": "memcpy",
                "FUN_00081e04": "copy_memory_00081e04",
                "__ptr": "__destination",
                "PTR__impure_ptr_00081e10": "__source"
            },
            "code": "void copy_memory_00081e04(void *__destination, void *PTR__impure_ptr_00081e10)\n{\n  memcpy(__destination, PTR__impure_ptr_00081e10, sizeof(__destination));\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "~String",
                "invalidate"
            ],
            "imported": false,
            "current_name": "copy_memory_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "updateUARTBuffer_000814a8",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "irqNumber",
                "DAT_000814e0": "dat",
                "pmc_disable_periph_clk": "disablePeripheralClock",
                "_dwId": "dwId"
            },
            "code": "void __thiscall updateUARTBuffer_000814a8(UARTClass *uart) {\n    uart->rxBuffer->headIndex = uart->rxBuffer->tailIndex;\n    (**(code **)(*(int *)uart + 0x14))();\n    *(int *)(DAT_000814e0 + (((uint)(int)uart->irqNumber >> 5) + 0x20) * 4) =\n       1 << (uint)(byte)(uart->irqNumber & 0x1f);\n    pmc_disable_periph_clk(uart->dwId);\n    return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "updateUARTBuffer_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "processCallbacks_00081084",
                "uVar1": "callbackIndex",
                "uVar2": "bitMask"
            },
            "code": "void processCallbacks_00081084(void)\n{\n    uint32_t bitMask;\n    uint32_t callbackIndex;\n    \n    bitMask = *(uint32_t *)(DAT_000810b4 + 0x4c);\n    while (true)\n    {\n        callbackIndex = countLeadingZeroes(bitMask);\n        if (callbackIndex > 0x1f)\n        {\n            break;\n        }\n        callbackIndex = 0x1f - callbackIndex;\n        if (*(code **)(PTR_callbacksPioA_000810b8 + callbackIndex * 4) != (code *)0x0)\n        {\n            (**(code **)(PTR_callbacksPioA_000810b8 + callbackIndex * 4))();\n        }\n        bitMask &= ~(1 << callbackIndex);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacks_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_or_throw_error_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient_ptr",
                "param_4": "remainder_ptr"
            },
            "code": "void divide_or_throw_error_00084750(int dividend, int divisor, int quotient_ptr, int remainder_ptr) {\n  if ((divisor == 0) && (quotient_ptr == 0)) {\n    if (dividend != 0) {\n      quotient_ptr = -1;\n    }\n    __aeabi_idiv0(quotient_ptr);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_throw_error_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_adc_00080ae4",
                "ctx": "context",
                "puVar1": "system_clock_pointer",
                "puVar2": "data_pointer",
                "iVar3": "adc_channel_3",
                "iVar4": "adc_channel_4",
                "iVar5": "adc_channel_5",
                "iVar6": "result",
                "ulPin": "pin_number",
                "uVar7": "updated_pin_number"
            },
            "code": "int initialize_adc_00080ae4(EVP_PKEY_CTX *context) {\n  uint32_t pin_number;\n  uint32_t system_clock = *(uint32_t*)PTR_SystemCoreClock_00080be8;\n  SystemInit();\n  uint32_t prescaler = system_clock / 1000 - 1;\n  *(uint8_t*)(DAT_00080bf0 + 0x23) = 0xf0;\n  uint32_t* data = DAT_00080bec;\n  data[2] = 0;\n  *data = 7;\n  __libc_initialize_adc_00080ae4_array();\n  pin_number = 0;\n  do {\n    pin_number++;\n    digitalWrite(pin_number, 0);\n  } while (pin_number != 0x4f);\n  *(uint32_t*)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(uint32_t*)(DAT_00080bf8 + 0xa0) = 0xffffffff;\n  *(uint32_t*)(DAT_00080bfc + 0xa0) = 0xffffffff;\n  *(uint32_t*)(DAT_00080c00 + 0xa0) = 0xffffffff;\n  PIO_Configure(DAT_00080bf4, 1, 0x300, 0);\n  digitalWrite(0, 1);\n  PIO_Configure(DAT_00080bf4, 1, 0xc00, 0);\n  PIO_Configure(DAT_00080bf4, 1, 0x3000, 0);\n  PIO_Configure(DAT_00080bfc, 2, 0x30, 0);\n  PIO_Configure(DAT_00080bf8, 1, 0xc00, 0);\n  PIO_Configure(DAT_00080bf4, 1, 3, 0);\n  PIO_Configure(DAT_00080bf8, 1, 0xc000, 0);\n  pmc_enable_periph_clk(0x25);\n  initialize_adc_00080ae4(DAT_00080c08, system_clock, DAT_00080c04, 0xc);\n  configure_adc_timing(DAT_00080c08, 0, 0x300000, 1);\n  configure_adc_trigger(DAT_00080c08, 0, 0);\n  disable_adc_interrupt(DAT_00080c08, 0xffffffff);\n  int result = disable_all_adc_channels(DAT_00080c08);\n  initialize_analog_output();\n  return result;\n}",
            "called": [
                "PIO_Configure",
                "adc_init",
                "digitalWrite",
                "adc_disable_all_channel",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "analogOutputInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_atexit_handler_00081d5c",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_atexit_handler_00081d5c(void (*func)(void), void *arg) {\n  __cxa_atexit(arg, func);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_atexit_handler_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "error_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_00082970(int *error_code, int size) {\n    undefined *error_ptr;\n    caddr_t memory_ptr;\n    error_ptr = error_code;\n    *(undefined4 *)error_code = 0;\n    memory_ptr = _sbrk(size);\n    if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "alwaysReturnOne_000811be",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int alwaysReturnOne_000811be(int fileDescriptor)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "alwaysReturnOne_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "hypercall_available_0008014c",
                "uVar1": "result",
                "aflCall": "perform_hypercall"
            },
            "code": "int hypercall_available_0008014c(int ticks)\n{\n    uint32_t result;\n    if (*(int *)PTR_noHyperCall_00080160 == 0) {\n        result = perform_hypercall(1, ticks, 0);\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "hypercall_available_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "first_float",
                "param_2": "second_float",
                "__aeabi_cfcmpeq": "N/A"
            },
            "code": "void compare_floats_00081c54(float first_float, float second_float)\n{\n  if(first_float == second_float)\n  {\n    //Do something\n  }\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_floats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "resizeBufferIfNecessary",
                "this": "string",
                "size": "newSize",
                "uVar1": "success",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "len",
                "FUN_0008163a": "resizeBufferIfNecessary_0008163a"
            },
            "code": "uchar __thiscall resizeBufferIfNecessary_0008163a(String *string, uint newSize)\n{\n  uchar success;\n  if ((string->buffer == NULL) || (string->capacity < newSize)) {\n    success = changeBuffer(string, newSize);\n    if (success == 0) {\n      return 0;\n    }\n    if (string->len == 0) {\n      *string->buffer = '\\0';\n    }\n  }\n  return 1;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "resizeBufferIfNecessary_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "FUNC_00081aac"
            },
            "code": "\nuint FUNC_00081aac(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_00081aa2:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_00081ac4;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_00081ac4:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "new_ptr"
            },
            "code": "void * allocate_memory_000825a0(void *ptr, size_t size)\n{\n  void *new_ptr;\n  new_ptr = (void *)_allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac, ptr, size);\n  return new_ptr;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "ImprovedFunction_000815d4",
                "this": "_pUsartWrapper",
                "pUsart": "usart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "super_UARTClass": "uart",
                "_pUsart": "usart"
            },
            "code": "class ImprovedFunction_000815d4 {\n  public:\n    ImprovedFunction_000815d4(Usart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n      uart = new UARTClass(usart, irq, id, rx_buffer, tx_buffer);\n    }\n    UARTClass *uart;\n};\n\nclass ImprovedFunction_000815d4 {\n  public:\n    ImprovedFunction_000815d4 *_pImprovedFunction_000815d4;\n    ImprovedFunction_000815d4(Usart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n      _pImprovedFunction_000815d4 = new ImprovedFunction_000815d4(usart, irq, id, rx_buffer, tx_buffer);\n    }\n};",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "ImprovedFunction_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "assign_value_00080d24",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "condition",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(object_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(object_address + 96)"
            },
            "code": "void assign_value_00080d24(int object_address, int value, int condition)\n{\n    if(condition != 0)\n    {\n        *(int *)(object_address + 100) = value;\n    }\n    else\n    {\n        *(int *)(object_address + 96) = value;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "assign_value_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00082140;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00082140 + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00082140 + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00082140 + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  puVar12 = PTR___malloc_av__00082140 + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00082262;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00082262:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00082148;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_0008211e;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00082154;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00082154 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00082154;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00082108;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "__sfvwrite_r",
                "malloc",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_hash_000818b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash_value",
                "uVar2": "shifted_input_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "constant",
                "uVar6": "shifted_value"
            },
            "code": "uint calculate_hash_000818b8(uint input_1, uint input_2)\n{\n  uint hash_value;\n  uint shifted_input_1;\n  uint shifted_input_2;\n  int leading_zeroes;\n  uint shift_amount;\n  uint shifted_value;\n  int constant = 0x5b000000;\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  hash_value = input_1;\n  shifted_input_2 = input_2;\n  if (input_2 == 0) {\n    hash_value = 0;\n    shifted_input_2 = input_1;\n    constant = 0x4b000000;\n  }\n  leading_zeroes = count_leading_zeroes(shifted_input_2);\n  shift_amount = leading_zeroes - 8;\n  constant = constant + -0x800000 + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    shifted_value = shifted_input_2 << (leading_zeroes + 0x18U & 0xff);\n    shifted_input_2 = constant + ((shifted_input_2 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n    if ((hash_value | shifted_value << 1) == 0) {\n      shifted_input_2 = shifted_input_2 & ~(shifted_value >> 0x1f);\n    }\n    return shifted_input_2;\n  }\n  shifted_value = hash_value << (shift_amount & 0xff);\n  shifted_input_2 = constant + (shifted_input_2 << (shift_amount & 0xff)) + (hash_value >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_value);\n  if (shifted_value == 0x80000000) {\n    shifted_input_2 = shifted_input_2 & 0xfffffffe;\n  }\n  return shifted_input_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initializeModbus_00080164",
                "this": "modbusInstance",
                "u32speed": "speed",
                "puVar1": "serialPointer",
                "iVar2": "readResult"
            },
            "code": "void __thiscall initializeModbus_00080164(Modbus *modbusInstance, long speed) {\\n  undefined *serialPointer;\\n  int readResult;\\n  serialPointer = PTR_Serial_000801ac;\\n  modbusInstance->port = (HardwareSerial *)PTR_Serial_000801ac;\\n  (**(code **)(*(int *)serialPointer + 0x18))(PTR_Serial_000801ac);\\n  if (1 < modbusInstance->u8txenpin) {\\n    pinMode((uint)modbusInstance->u8txenpin, OUTPUT);\\n    digitalWrite((uint)modbusInstance->u8txenpin, LOW);\\n  }\\n  do {\\n    readResult = (**(code **)(*(int *)modbusInstance->port + 0xc))();\\n  } while (-1 < readResult);\\n  modbusInstance->u8BufferSize = \"\\0\";\\n  modbusInstance->u8lastRec = \"\\0\";\\n  modbusInstance->u16errCnt = 0;\\n  modbusInstance->u16OutCnt = 0;\\n  modbusInstance->u16InCnt = 0;\\n  return;\\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeModbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "file_UNUSED": "file_unused",
                "ptr": "source",
                "len": "length",
                "iVar1": "i"
            },
            "code": "int copy_bytes_000811cc(int file_unused, char *source, int length) {\n  int i;\n  for (i = 0; i < length; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)source[i];\n  }\n  return length & ~(length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_isatty_000846dc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "isatty_result"
            },
            "code": "void check_isatty_000846dc(int *error_code, int file_descriptor){\n    undefined *error_ptr;\n    int isatty_result;\n\n    error_ptr = PTR_errno_000846fc;\n    *(undefined4 *)PTR_errno_000846fc = 0;\n    isatty_result = _isatty(file_descriptor);\n    if ((isatty_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "combined_result",
                "bVar1": "is_positive_result",
                "bVar5": "is_zero_result"
            },
            "code": "uint calculate_result_00081be4(uint input_1, uint input_2) {\n  bool is_negative_result = false;\n  uint result_1 = input_1 * 2;\n  uint result_2 = input_2 * 2;\n  if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) && ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint combined_result = result_1 | input_2 & 0x7fffffff;\n  bool is_zero_result = combined_result == 0;\n  if (!is_zero_result) {\n    combined_result = input_1 ^ input_2;\n    is_zero_result = combined_result == 0;\n  }\n  bool is_positive_result = -1 < (int)combined_result;\n  if (is_positive_result) {\n    input_1 = result_1 + input_2 * -2;\n    is_zero_result = input_1 == 0;\n  }\n  if ((is_positive_result && result_2 <= result_1) && !is_zero_result) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_positive_result || result_2 > result_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_result) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initialize_USART_000815ca",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall initialize_USART_000815ca(USARTClass *this, uint32_t baud_rate){\n  UARTClass::init(&this->super_UARTClass, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initialize_USART_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar3": "factor",
                "uVar4": "temp",
                "shifted_input": "shifted_input",
                "shifted_zeroes": "shifted_zeroes",
                "result": "result"
            },
            "code": "uint calculate_value_00081894(uint input_value)\n{\n  int leading_zeroes_count = count_leading_zeroes(input_value);\n  int shift_amount = leading_zeroes_count - 8;\n  int factor = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes_count > 7) {\n    uint temp = 0 << (shift_amount & 0xff);\n    uint shifted_input = input_value << (shift_amount & 0xff);\n    uint shifted_zeroes = 0U >> (0x20 - shift_amount & 0xff);\n    uint result = factor + shifted_input + shifted_zeroes + (uint)(0x7fffffff < temp);\n    if (temp == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  uint shifted_zeroes = ((int)(shifted_input & 0x80000000) >> 0x1f);\n  uint result = factor + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - shifted_zeroes);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_value_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "data_count",
                "param_2": "data_processor",
                "piVar5": "data",
                "uVar4": "result",
                "iVar2": "current_data",
                "iVar3": "data_size",
                "ushort": "unsigned_short",
                "short": "signed_short",
                "*": "pointer"
            },
            "code": "uint process_data_00084248(int data_count, code *data_processor) {\n  uint result = 0;\n  int *data = (int *)(data_count + 0x2e0);\n  if (data != (int *)0x0) {\n    do {\n      int current_data = data[2];\n      int data_size = data[1] + -1;\n      if (data_size >= 0) {\n        do {\n          data_size--;\n          if ((*(ushort *)(current_data + 0xc) > 1) && (*(short *)(current_data + 0xe) != -1)) {\n            uint processed_data = (*data_processor)(current_data);\n            result |= processed_data;\n          }\n          current_data += 0x68;\n        } while (data_size != -1);\n      }\n      data = (int *)*data;\n    } while (data != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_uint8_to_buffer_000845bc",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "buffer_size",
                "*param_1": "*buffer",
                "*param_2": "*value"
            },
            "code": "int write_uint8_to_buffer_000845bc(uint8_t *buffer, uint8_t value, uint buffer_size) {\n    if (buffer == NULL) {\n        return 0;\n    }\n    if (buffer_size < sizeof(value)) {\n        *buffer = value;\n        return 1;\n    }\n    *buffer = 0x8a;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_uint8_to_buffer_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "readByteFromRxBuffer_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "bytesToRead",
                "pRVar2": "rxBuffer",
                "bVar1": "byteRead"
            },
            "code": "ssize_t __thiscall UARTClass::readByteFromRxBuffer_00081412(UARTClass *this, int fileDescriptor, void *buffer, size_t bytesToRead) {\n  byte byteRead;\n  RingBuffer *rxBuffer;\n\n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "readByteFromRxBuffer_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_to_data_structure_000838cc",
                "param_1": "element",
                "param_2": "data",
                "param_3": "size",
                "param_4": "capacity",
                "puVar1": "data_ptr",
                "uVar2": "current_size",
                "iVar3": "global_ptr",
                "uVar4": "index",
                "DAT_00083970": "global_data_alloc"
            },
            "code": "int add_to_data_structure_000838cc(int element, int* data, int* size, int* capacity) {\n  int* global_ptr = *(int **)global_impure_ptr;\n  int* data_ptr = *(int **)(global_ptr + 0x148);\n  if (data_ptr == NULL) {\n    data_ptr = (int *)(global_ptr + 0x14c);\n    *(int **)(global_ptr + 0x148) = data_ptr;\n  }\n  uint32_t current_size = data_ptr[1];\n  if (current_size > 0x1f) {\n    if (DAT_00083970 != 0) {\n      int* new_data = (int *)malloc(400);\n      if (new_data != NULL) {\n        *new_data = *(int *)(global_ptr + 0x148);\n        new_data[1] = 0;\n        current_size = 0;\n        *(int **)(global_ptr + 0x148) = new_data;\n        new_data[0x62] = 0;\n        new_data[99] = 0;\n        goto LAB_00083922;\n      }\n    }\n    return -1;\n  }\nLAB_00083922:\n  if (element != 0) {\n    uint32_t index = 1 << (current_size & 0xff);\n    data_ptr[current_size + 0x22] = *size;\n    new_data[0x62] |= index;\n    data_ptr[current_size + 0x42] = *capacity;\n    if (element == 2) {\n      new_data[99] |= index;\n    }\n  }\n  data_ptr[1] = current_size + 1;\n  data_ptr[current_size + 2] = element;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_data_structure_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "write_n_bytes_00082504",
                "__s": "buffer",
                "__c": "character",
                "__n": "count",
                "puVar1": "ptr_buffer_32bit",
                "puVar2": "ptr_buffer",
                "puVar3": "ptr_buffer_32bit",
                "uVar4": "uVar4",
                "uVar5": "count_copy",
                "bVar6": "is_count_zero"
            },
            "code": "void * write_n_bytes_00082504(void *buffer, int character, size_t count) {\n  uint32_t *ptr_buffer = (uint32_t *)buffer;\n  if (((uint32_t)buffer & 3) != 0) {\n    bool is_count_zero = count == 0;\n    uint8_t *ptr_buffer_8bit = (uint8_t *)buffer;\n    count = count - 1;\n    if (is_count_zero) {\n      return buffer;\n    }\n    while (true) {\n      ptr_buffer = (uint32_t *)((int)ptr_buffer_8bit + 1);\n      *(char *)ptr_buffer_8bit = (char)character;\n      if (((uint32_t)ptr_buffer & 3) == 0) break;\n      is_count_zero = count == 0;\n      ptr_buffer_8bit = (uint8_t *)ptr_buffer;\n      count = count - 1;\n      if (is_count_zero) {\n        return buffer;\n      }\n    }\n  }\n  if (3 < count) {\n    uint32_t uVar4 = character & 0xffU | (character & 0xffU) << 8;\n    uVar4 = uVar4 | uVar4 << 0x10;\n    uint32_t count_copy = count;\n    ptr_buffer = (uint32_t *)buffer;\n    if (0xf < count) {\n      count_copy = count - 0x10;\n      do {\n        *ptr_buffer = uVar4;\n        ptr_buffer[1] = uVar4;\n        ptr_buffer[2] = uVar4;\n        ptr_buffer[3] = uVar4;\n        ptr_buffer = ptr_buffer + 4;\n      } while (ptr_buffer != (uint32_t *)((int)buffer + (count_copy & 0xfffffff0) + 0x10));\n      count = count & 0xf;\n      ptr_buffer = (uint32_t *)((int)ptr_buffer + ((count_copy >> 4) + 1) * 4);\n      count_copy = count;\n      if (count < 4) {\n        goto LAB_00082580;\n      }\n    }\n    do {\n      count = count - 4;\n      *ptr_buffer = uVar4;\n      ptr_buffer = ptr_buffer + 1;\n    } while (3 < count);\n    ptr_buffer = (uint32_t *)((int)ptr_buffer + (count_copy - 4 & 0xfffffffc) + 4);\n    count = count_copy & 3;\n  }\nLAB_00082580:\n  if (count != 0) {\n    uint8_t *ptr_buffer_8bit = (uint8_t *)ptr_buffer;\n    do {\n      uint32_t *ptr_buffer_32bit = (uint32_t *)((int)ptr_buffer_8bit + 1);\n      *(char *)ptr_buffer_8bit = (char)character;\n      ptr_buffer_8bit = (uint8_t *)ptr_buffer_32bit;\n    } while (ptr_buffer_32bit != (uint32_t *)(count + (int)ptr_buffer));\n  }\n  return buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "write_n_bytes_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "get_etext_address_if_completed_not_set_000800f4",
                "param_1": "etext_address",
                "*PTR_completed_7857_0008010c": "*completed_flag",
                "DAT_00080110": "data_flag",
                "PTR__etext_00080114": "etext_address_pointer"
            },
            "code": "char * get_etext_address_if_completed_not_set_000800f4(char *etext_address){\n    if (*PTR_completed_7857_0008010c == \"\\0\") {\n        if (DAT_00080110 != 0) {\n            etext_address = PTR__etext_00080114;\n        }\n        *PTR_completed_7857_0008010c = 1;\n    }\n    return etext_address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "get_etext_address_if_completed_not_set_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_string_0008378c",
                "param_1": "output_file",
                "param_2": "input_address",
                "iVar1": "return_value",
                "iVar2": "fflush_result",
                "local_488": "buffer_ptr",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "overflow_check",
                "local_478": "buffer_ptr[0]",
                "local_474": "vfprintf_return",
                "local_470": "fflush_return",
                "local_46c": "DAT_000837b8",
                "local_464": "DAT_000837bc",
                "local_424": "DAT_000837ec",
                "auStack_420": "stack_buffer"
            },
            "code": "int print_formatted_string_0008378c(FILE* output_file, int input_address)\n{\n    int return_value = 0;\n    int fflush_result = 0;\n    char buffer[1024];\n    char* buffer_ptr[2] = { buffer, NULL };\n    unsigned short flag = *(unsigned short*)(input_address + 0xC) & 0xFFFD;\n    unsigned short overflow_check = (unsigned short)(flag << 0x19);\n    if (overflow_check < 0)\n    {\n        *(unsigned short*)(input_address + 0xC) |= 0x40;\n    }\n    return_value = vfprintf(output_file, buffer_ptr[0], 0x400);\n    if (return_value >= 0)\n    {\n        fflush_result = fflush(output_file);\n        if (fflush_result != 0)\n        {\n            return_value = -1;\n        }\n    }\n    return return_value;\n}",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "initialize_if_not_initialized_00083adc",
                "param_1": "memory_location",
                "param_2": "flag_location",
                "initialize_stream": "__sinit",
                "flush_stream_r": "__sflush_r"
            },
            "code": "void initialize_if_not_initialized_00083adc(int memory_location, int flag_location) {\n  if ((memory_location != 0) && (*(int *)(memory_location + 0x38) == 0)) {\n    initialize_stream();\n  }\n  if (*(short *)(flag_location + 0xc) == 0) {\n    return;\n  }\n  flush_stream_r(memory_location);\n  return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_if_not_initialized_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "process_callbacks_0008112c",
                "uVar1": "callback_index",
                "uVar2": "bit_value",
                "PTR_callbacksPioD_00081160": "callback_pointers",
                "DAT_0008115c": "data_block"
            },
            "code": "void process_callbacks_0008112c(void)\n{\n  uint32_t bit_mask;\n  uint32_t bit_value;\n  uint32_t callback_index;\n  bit_value = *(uint32_t *)(DAT_0008115c + 0x4c);\n  while (true) {\n    callback_index = count_leading_zeroes(bit_value);\n    if (callback_index > 0x1f) {\n      break;\n    }\n    callback_index = 0x1f - callback_index;\n    callback_index &= 0xff;\n    code *callback = *(code **)(PTR_callbacksPioD_00081160 + callback_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bit_mask = ~(1 << callback_index);\n    bit_value = bit_value & bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "checkBufferValidity_000803d4",
                "iVar1": "bufferIndex",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "PTR_fctsupported_0008040c": "supportedFunctions"
            },
            "code": "uint8_t __thiscall Modbus::checkBufferValidity_000803d4(Modbus *this)\n{\n  int bufferIndex;\n  int bufferLength = 8;\n  uint8_t bufferValue = this->au8Buffer[1];\n  uint8_t PTR_fctsupported_0008040c[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x0F, 0x10};\n\n  if ((int)(bufferValue << 0x18) < 0) {\n    this->errorCount++;\n    return 0xfb;\n  }\n\n  for (bufferIndex = 0; bufferIndex < bufferLength; bufferIndex++) {\n    if (PTR_fctsupported_0008040c[bufferIndex] == bufferValue) {\n      return 0x00;\n    }\n  }\n\n  this->errorCount++;\n  return 0x01;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkBufferValidity_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n  int write_result;\n  int *errno_ptr;\n  \n  errno_ptr = PTR_errno_000845fc;\n  *(int *)PTR_errno_000845fc = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "handleCommunication_0008043e",
                "__fds": "__comInfo",
                "__nfds": "__timeout",
                "this": "modbus",
                "u8serno": "serialNumber",
                "bVar1": "serialByte",
                "uVar2": "validateResult",
                "uVar3": "currentTime",
                "unaff_r6": "receivedByte",
                "u32timeOut": "timeout",
                "u8lastError": "lastError",
                "u8state": "state",
                "u16errCnt": "errorCount",
                "getRxBuffer": "getRxBuffer",
                "validateAnswer": "validateAnswer",
                "au8Buffer": "rxBuffer",
                "get_FC3": "handleFunctionCode3",
                "u8BufferSize": "bufferSize"
            },
            "code": "int __thiscall Modbus::handleCommunication_0008043e(Modbus *modbus, CommunicationInfo *__comInfo, int __timeout)\n    {\n        byte serialByte;\n        uint8_t validateResult;\n        uint32_t currentTime;\n        uint receivedByte;\n        \n        if (modbus->serialNumber < 4) {\n            serialByte = (**(code **)(*(int *)modbus->port + 8))();\n            receivedByte = (uint)serialByte;\n        }\n        \n        currentTime = millis();\n        if (modbus->timeout < currentTime) {\n            modbus->lastError = 0xff;\n            modbus->state = \"\\0\";\n            modbus->errorCount = modbus->errorCount + 1;\n        }\n        else if (7 < receivedByte) {\n            getRxBuffer(modbus);\n            validateResult = validateAnswer(modbus);\n            if (validateResult == \"\\0\") {\n                if (modbus->rxBuffer[1] - 3 < 2) {\n                    handleFunctionCode3(modbus);\n                }\n                modbus->state = \"\\0\";\n                validateResult = modbus->bufferSize;\n            }\n            else {\n                modbus->state = \"\\0\";\n            }\n            goto LAB_000804a2;\n        }\n        validateResult = \"\\0\";\n    LAB_000804a2:\n        return (int)(char)validateResult;\n    }",
            "called": [
                "get_FC3",
                "validateAnswer",
                "getRxBuffer",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "handleCommunication_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "String::FUN_0008160c": "clearString",
                "this": "str",
                "buffer": "strBuffer",
                "len": "length",
                "capacity": "capacity",
                "FUN_0008160c": "clearString_0008160c"
            },
            "code": "void clearString_0008160c(String *str) {\n  if (str->buffer != NULL) {\n    free(str->buffer);\n  }\n  str->buffer = NULL;\n  str->length = 0;\n  str->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_character_00080e18",
                "param_1": "character",
                "uVar1": "mask"
            },
            "code": "int check_character_00080e18(uint8_t character) {\n  uint32_t mask;\n  if (character < 45) {\n    if (character < 32) {\n      mask = 1 << (character & 0xff);\n      if ((mask & *(uint32_t *)(DAT_00080e58 + 0x18)) != mask) {\n        *(uint32_t *)(DAT_00080e58 + 0x10) = mask;\n      }\n    }\n    else {\n      mask = 1 << (character - 32);\n      if ((mask & *(uint32_t *)(DAT_00080e58 + 0x108)) != mask) {\n        *(uint32_t *)(DAT_00080e58 + 0x100) = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "imported": false,
            "current_name": "check_character_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "calculate_result_00081184",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_result_00081184(void)\n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "calculate_result_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "receive_data_00081580",
                "this": "uart_instance",
                "_rx_buffer": "rx_buffer",
                "_pUart": "uart_instance->_pUart",
                "UART_SR": "status_register",
                "_tx_buffer": "tx_buffer",
                "_iTail": "tx_buffer->_iTail",
                "_iHead": "tx_buffer->_iHead",
                "_aucBuffer": "tx_buffer->_aucBuffer",
                "UART_RHR": "uart_instance->_pUart->UART_RHR",
                "UART_THR": "uart_instance->_pUart->UART_THR",
                "UART_IDR": "uart_instance->_pUart->UART_IDR"
            },
            "code": "void __thiscall UARTClass::receive_data_00081580(UARTClass *uart_instance) \\n\\\n{\\n\\\n  RingBuffer *rx_buffer = uart_instance->_rx_buffer;\\n\\\n  RoReg status_register = uart_instance->_pUart->UART_SR;\\n\\\n  if ((int)(status_register << 0x1f) < 0) {\\n\\\n    RingBuffer::store_char(rx_buffer, (uint8_t)uart_instance->_pUart->UART_RHR);\\n\\\n  }\\n\\\n  if ((int)(status_register << 0x1e) < 0) {\\n\\\n    RingBuffer *tx_buffer = uart_instance->_tx_buffer;\\n\\\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\\n\\\n      uart_instance->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\\n\\\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\\n\\\n      return;\\n\\\n    }\\n\\\n    uart_instance->_pUart->UART_IDR = 2;\\n\\\n  }\\n\\\n  return;\\n\\\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "UART_Handler",
                "USART1_Handler",
                "USART0_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "receive_data_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "getMaxMultibyteCharLength_00084298",
                "PTR___mb_cur_max_000842a0": "PTR_max_multibyte_char_length"
            },
            "code": "getMaxMultibyteCharLength_00084298() {\n    return *(undefined4 *)PTR___mb_cur_max_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "getMaxMultibyteCharLength_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handle_UART_interrupt_00080ac0",
                "PTR_Serial1_00080ac8": "Serial1"
            },
            "code": "void handle_UART_interrupt_00080ac0(void)\n{\n  UARTClass::IrqHandler(&PTR_Serial1_00080ac8);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_param_1_flag_00081066",
                "param_1": "flag",
                "undefined4": "int"
            },
            "code": "void set_param_1_flag_00081066(int flag)\n{\n  *(int *)(flag + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_1_flag_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "shift_diff",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_to_signed_int_00081cd0(uint input_value) {\n  uint abs_input_value = abs(input_value);\n  if (abs_input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  uint shift_amount = (abs_input_value << 1) >> 0x18;\n  uint shift_diff = 0x9e - shift_amount;\n  if (shift_amount < 0x9f && shift_diff != 0) {\n    uint shifted_value = (abs_input_value << 8 | 0x80000000) >> (shift_diff & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((shift_diff == 0xffffff9f) && ((abs_input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  if ((input_value & 0x80000000) == 0) {\n    return 0x7fffffff;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "wait_forever_00081188"
            },
            "code": "void wait_forever_00081188(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "wait_forever_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "memory_address",
                "_FUN_00081df4_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_00081df4(size_t size)\n{\n  void *memory_address;\n  memory_address = (void *)_allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00,size);\n  return memory_address;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "read_registers_00080410",
                "uVar1": "register_value",
                "uVar2": "byte_offset",
                "bVar3": "byte_index",
                "uVar4": "register_index",
                "puVar5": "registers_ptr",
                "au8Buffer": "buffer",
                "au16regs": "registers",
                "makeWord": "make_word"
            },
            "code": "void __thiscall Modbus::read_registers_00080410(Modbus *this)\n{\n  uint16_t register_value;\n  uint register_index = 0;\n  byte byte_index = 0;\n  uint buffer_length = this->au8Buffer[2] >> 1;\n  while(register_index < buffer_length) {\n    uint byte_offset = register_index * 2 + 3 & 0xff;\n    register_value = makeWord(this->au8Buffer[byte_offset],this->au8Buffer[byte_offset + 1]);\n    this->au16regs[register_index] = register_value;\n    register_index++;\n  }\n  return;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flags",
                "bVar1": "is_negative_flag",
                "DAT_00080df8": "data_func_ptr",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(data_ptr + 0x44)",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(data_ptr + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(data_ptr + 0x60)"
            },
            "code": "int process_data_00080da0(int data_ptr, int data_type, int data_value, unsigned int flags)\n{\n  bool is_negative_flag = (int)(flags << 0x1f) < 0;\n\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(data_ptr, data_type, data_value);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative_flag) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*DAT_00080df8)(data_ptr, data_value, flags, DAT_00080df8, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080df8)(data_ptr, data_value, data_type == 5, (flags << 0x1d) >> 0x1f, flags & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "SendModbusMessage_00080258",
                "this": "modbus",
                "u8length": "bufferLength",
                "uVar1": "crcValue",
                "uVar2": "currentTime",
                "iVar3": "receiveStatus",
                "u8BufferSize": "messageBufferLength",
                "au8Buffer": "messageBuffer",
                "u8txenpin": "transmitEnablePin",
                "u8serno": "serialNumber",
                "port": "serialPort",
                "u16timeOut": "timeoutInterval",
                "u32timeOut": "timeout",
                "u16OutCnt": "outgoingMessageCount"
            },
            "code": "void __thiscall SendModbusMessage_00080258(Modbus *modbus)\n{\n  byte bufferLength;\n  uint16_t crcValue;\n  uint32_t currentTime;\n  int receiveStatus;\n  \n  bufferLength = modbus->messageBufferLength;\n  crcValue = calcCRC(modbus, bufferLength);\n  modbus->messageBuffer[bufferLength] = (uchar)((uint)crcValue >> 8);\n  modbus->messageBuffer[(bufferLength + 1) & 0xff] = (uchar)crcValue;\n  modbus->messageBufferLength = bufferLength + 2;\n  if (modbus->transmitEnablePin > 1) {\n    digitalWrite((uint)modbus->transmitEnablePin, HIGH);\n  }\n  if (modbus->serialNumber < 4) {\n    (**(code **)(*(int *)modbus->serialPort + 4))(modbus->serialPort, modbus->messageBuffer, modbus->messageBufferLength);\n  }\n  if (modbus->transmitEnablePin > 1) {\n    digitalWrite((uint)modbus->transmitEnablePin, LOW);\n  }\n  if (modbus->serialNumber < 4) {\n    do {\n      receiveStatus = (**(code **)(*(int *)modbus->serialPort + 0xc))();\n    } while (receiveStatus < 0);\n  }\n  modbus->messageBufferLength = 0;\n  currentTime = millis();\n  modbus->timeout = currentTime + modbus->timeoutInterval;\n  modbus->outgoingMessageCount = modbus->outgoingMessageCount + 1;\n  return;\n}",
            "called": [
                "calcCRC",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "SendModbusMessage_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "resize_string",
                "*this": "str",
                "maxStrLen": "max_len",
                "pcVar1": "new_buffer",
                "FUN_00081622": "resize_string_00081622"
            },
            "code": "unsigned char resize_string_00081622(String *str, uint32_t max_len) {\n  char *new_buffer = (char *)realloc(str->buffer, max_len + 1);\n  if (new_buffer == NULL) {\n    return 0;\n  }\n  str->buffer = new_buffer;\n  str->capacity = max_len;\n  return 1;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resize_string_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "index",
                "puVar2": "dst",
                "puVar3": "src",
                "puVar4": "dst_tmp",
                "puVar5": "src_tmp",
                "puVar7": "dst_end",
                "uVar6": "remaining_bytes",
                "uVar8": "remaining_bytes_2"
            },
            "code": "void * reverse_copy_00082438(void *destination, const void *source, size_t num_bytes) {\n  int i = 0;\n  uint8_t *src = (uint8_t *)source;\n  uint8_t *dst = (uint8_t *)destination;\n  if (src < dst && dst < src + num_bytes) {\n    src += num_bytes;\n    dst += num_bytes;\n    for (i = num_bytes - 1; i >= 0; i--) {\n      *(dst--) = *(src--);\n    }\n  } else {\n    for (i = 0; i < num_bytes; i++) {\n      *(dst++) = *(src++);\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_uart_00081508",
                "this": "uart_instance",
                "dwBaudRate": "baud_rate",
                "modeReg": "mode_register",
                "puVar1": "clock_speed_pointer",
                "pRVar2": "ring_buffer_pointer",
                "pUVar3": "uart",
                "_dwId": "uart_instance->_dwId",
                "UART_PTCR": "uart->UART_PTCR",
                "UART_CR": "uart->UART_CR",
                "UART_MR": "uart->UART_MR",
                "UART_BRGR": "uart->UART_BRGR",
                "UART_IDR": "uart->UART_IDR",
                "UART_IER": "uart->UART_IER",
                "DAT_00081574": "uart_instance->_dwId + 0x74",
                "_dwIrq": "uart_instance->_dwIrq",
                "_rx_buffer": "uart_instance->_rx_buffer",
                "_tx_buffer": "uart_instance->_tx_buffer",
                "_iTail": "rx_buffer->_iTail and tx_buffer->_iTail",
                "_iHead": "rx_buffer->_iHead and tx_buffer->_iHead"
            },
            "code": "void __thiscall initialize_uart_00081508(UARTClass *uart_instance, uint32_t baud_rate, uint32_t mode_register) {\n  pmc_enable_periph_clk(uart_instance->_dwId);\n  Uart *uart = uart_instance->_pUart;\n  uart->UART_PTCR = 0x202;\n  uart->UART_CR = 0xac;\n  uart->UART_MR = mode_register;\n  uint32_t clock_speed = *(uint *)(uart_instance->_dwId + 0x70) / baud_rate >> 4;\n  uart->UART_BRGR = clock_speed;\n  uart->UART_IDR = 0xffffffff;\n  uart->UART_IER = 0x61;\n  uint32_t irq_index = uart_instance->_dwIrq >> 5;\n  uint32_t irq_bit = uart_instance->_dwIrq & 0x1f;\n  *(int *)(DAT_00081574 + irq_index * 4) = 1 << irq_bit;\n  RingBuffer *rx_buffer = uart_instance->_rx_buffer;\n  rx_buffer->_iTail = 0;\n  rx_buffer->_iHead = 0;\n  RingBuffer *tx_buffer = uart_instance->_tx_buffer;\n  tx_buffer->_iTail = 0;\n  tx_buffer->_iHead = 0;\n  uart->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_uart_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "data",
                "param_2": "status",
                "uVar1": "bit_value",
                "iVar2": "result",
                "uVar3": "shifted_value",
                "uVar4": "value"
            },
            "code": "int process_data_00083808(uint16_t *data, int *status)\n{\n    uint16_t value = data[3];\n    uint32_t shifted_value = (uint32_t)value << 28;\n    int result = 0;\n    \n    if ((*(int *)PTR__impure_ptr_000838c8 != 0) && (*(int *)(*(int *)PTR__impure_ptr_000838c8 + 0x38) == 0)) {\n        __sinit();\n    }\n    \n    if (shifted_value < 0) {\n        result = status[4];\n    }\n    else {\n        if (shifted_value >= 0x80000000) {\n            status[0] = 9;\n            value |= 0x40;\n            return -1;\n        }\n        if ((shifted_value & 0x20000000) != 0) {\n            if ((int *)status[0xc] != (int *)0x0) {\n                if ((int *)status[0xc] != status + 0x10) {\n                    _free_r(&result);\n                    value = data[3];\n                }\n                status[0xc] = 0;\n            }\n            result = status[4];\n            value &= 0xFFDB;\n            status[0] = result;\n            status[1] = 0;\n        }\n        else {\n            result = status[4];\n        }\n        value |= 8;\n        shifted_value = (uint32_t)value;\n    }\n    \n    if (result == 0 && (shifted_value & 0x280) != 0x200) {\n        __smakebuf_r(&result, status);\n        shifted_value = (uint32_t)data[3];\n        result = status[4];\n    }\n    \n    uint32_t bit_value = shifted_value & 1;\n    if (bit_value == 0) {\n        if (shifted_value >= 0x40000000) {\n            bit_value = status[5];\n        }\n        status[2] = bit_value;\n    }\n    else {\n        status[6] = -status[5];\n        status[2] = 0;\n    }\n    \n    if (result == 0 && ((shifted_value & 0x4000000) != 0)) {\n        data[3] |= 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "array_start_index",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "array_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_0008105c(int array_start_index, uint8_t bit_position) {\n    int* array_ptr = (int *)(array_start_index + 0x14);\n    int bit_mask = 1 << (bit_position & 0xff);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wide_char_to_multibyte_string_0008456c",
                "param_1": "num_converted_chars",
                "param_2": "num_wide_chars",
                "param_3": "max_bytes",
                "param_4": "multibyte_string",
                "uVar1": "locale_charset",
                "iVar2": "result",
                "pcVar3": "conversion_function",
                "auStack_24": "stack_buffer"
            },
            "code": "void convert_wide_char_to_multibyte_string_0008456c(int* num_converted_chars, const wchar_t* wide_char_string, int num_wide_chars, char* multibyte_string, int max_bytes) {\n  code* conversion_function;\n  undefined4 locale_charset;\n  int result;\n  undefined stack_buffer[12];\n  \n  if (num_wide_chars == 0) {\n    conversion_function = *(code**)PTR___wctomb_000845b8;\n    locale_charset = __locale_charset();\n    result = (*conversion_function)(num_converted_chars, stack_buffer, 0, locale_charset, multibyte_string);\n  }\n  else {\n    conversion_function = *(code**)PTR___wctomb_000845b8;\n    locale_charset = __locale_charset();\n    result = (*conversion_function)(num_converted_chars, wide_char_string, num_wide_chars, locale_charset, multibyte_string);\n  }\n  \n  if (result == -1) {\n    *multibyte_string = 0;\n    *num_converted_chars = 0x8a;\n  }\n  return;\n}",
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wide_char_to_multibyte_string_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_directory_000811b4",
                "st": "file_stat"
            },
            "code": "int set_file_mode_to_directory_000811b4(stat *file_stat)\n{\n  file_stat->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_next_byte_from_rx_buffer_000813f6",
                "this": "uart_obj",
                "uVar1": "next_byte",
                "pRVar2": "rx_buffer"
            },
            "code": "unsigned int __thiscall get_next_byte_from_rx_buffer_000813f6(UARTClass *uart_obj)\n{\n  unsigned int next_byte;\n  RingBuffer *rx_buffer = uart_obj->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (unsigned int)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_rx_buffer_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "DAT_000816dc": "watchdog_timer"
            },
            "code": "void disable_watchdog_timer_000816d4(void)\n{\n  WDT_Disable(DAT_000816dc);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    DAT_00084244 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_0008402e;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_0008402e;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_0008402e;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_0008402e;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_0008402e;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_0008402e:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memcpy",
                "_free_r",
                "__swsetup_r",
                "memmove",
                "_realloc_r",
                "_fflush_r",
                "memchr",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "execute_isr_callback_if_set_00081074",
                "PTR_gpf_isr_00081080": "g_isr_callback_pointer",
                "code": "function_pointer"
            },
            "code": "void execute_isr_callback_if_set_00081074(void)\n{\n  if (*(code **)PTR_gpf_isr_00081080 != (code *)0x0) {\n    (**(code **)PTR_gpf_isr_00081080)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_callback_if_set_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_parameters_00080d7a",
                "param_1": "param_array",
                "param_2": "parameter",
                "param_3": "has_param3",
                "param_4": "has_param4",
                "param_5": "has_param5",
                "param_1[0x11]": "param_array[17]",
                "param_1[0x14]": "param_array[20]",
                "param_1[0x15]": "param_array[21]",
                "param_1[0x18]": "param_array[24]",
                "param_1[0x19]": "param_array[25]",
                "param_1[0xc]": "param_array[12]",
                "param_1[0xd]": "param_array[13]"
            },
            "code": "void set_parameters_00080d7a(undefined4 *param_array, undefined4 parameter, int has_param3, int has_param4, int has_param5) {\n  param_array[17] = parameter;\n  if (has_param5 == 0) {\n    param_array[24] = parameter;\n  }\n  else {\n    param_array[25] = parameter;\n  }\n  if (has_param4 == 0) {\n    param_array[21] = parameter;\n  }\n  else {\n    param_array[20] = parameter;\n  }\n  if (has_param3 == 0) {\n    param_array[13] = parameter;\n  }\n  else {\n    param_array[12] = parameter;\n  }\n  param_array[4] = parameter;\n  *param_array = parameter;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_clock_00080e9c",
                "DAT_00080f08": "system_core_clock_address",
                "DAT_00080f0c": "systick_address",
                "DAT_00080f10": "systick_reload_value",
                "DAT_00080f14": "systick_ctrl_value_1",
                "DAT_00080f18": "systick_ctrl_value_2",
                "PTR_SystemCoreClock_00080f20": "system_core_clock",
                "PTR_SysTick_CTRL_00080f24": "systick_ctrl",
                "PTR_SysTick_LOAD_00080f28": "systick_load",
                "PTR_SysTick_VAL_00080f2c": "systick_val"
            },
            "code": "void initialize_system_clock_00080e9c(void)\n{\n  uint32_t *PTR_SystemCoreClock_00080f20 = PTR_SystemCoreClock_00080f20;\n  *PTR_SysTick_CTRL_00080f24 = 0;\n  *PTR_SysTick_LOAD_00080f28 = *PTR_SystemCoreClock_00080f20 / 1000 - 1;\n  *PTR_SysTick_VAL_00080f2c = 0;\n  *PTR_SysTick_CTRL_00080f24 = 5;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "write_at_offset_00084464",
                "param_1": "fd",
                "param_2": "offset",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "value"
            },
            "code": "void write_at_offset_00084464(int fd, int offset, void* buffer, size_t size) {\n  ushort value = *(ushort*)(offset + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    _lseek_r(fd, (int)*(short*)(offset + 0xe), 0, 2);\n    value = *(ushort*)(offset + 0xc);\n  }\n  *(ushort*)(offset + 0xc) = value & 0xefff;\n  _write_r(fd, (int)*(short*)(offset + 0xe), buffer, size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "write_at_offset_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_000811ae",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_000811ae(int file_not_used)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "perform_system_interrupt_00080148",
                "a0": "input_value",
                "a1": "interrupt_type",
                "a2": "interrupt_parameter",
                "software_interrupt": "system_interrupt"
            },
            "code": "uint32_t perform_system_interrupt_00080148(uint32_t input_value, uint32_t interrupt_type, int32_t interrupt_parameter) {\n  system_interrupt(interrupt_type);\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "perform_system_interrupt_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handle_UART_interrupt_00080ad8",
                "PTR_Serial3_00080ae0": "&Serial3"
            },
            "code": "void handle_UART_interrupt_00080ad8(void)\n{\n  UARTClass::IrqHandler(PTR_Serial3_00080ae0);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "flush_and_free_00084624",
                "param_1": "file_descriptor",
                "param_2": "buffer_ptr",
                "uVar1": "result",
                "iVar2": "function_result"
            },
            "code": "int flush_and_free_00084624(int file_descriptor, int buffer_ptr){\n    int result;\n    if(buffer_ptr != 0){\n        if(file_descriptor != 0 && *(int *)(file_descriptor + 0x38) == 0){\n            __sinit();\n        }\n        if(*(short *)(buffer_ptr + 0xc) != 0){\n            result = _fflush_r(file_descriptor, buffer_ptr);\n            if(*(code **)(buffer_ptr + 0x2c) != (code *)0x0){\n                int function_result = (**(code **)(buffer_ptr + 0x2c))(file_descriptor, *(undefined4 *)(buffer_ptr + 0x1c));\n                if(function_result < 0){\n                    result = 0xffffffff;\n                }\n            }\n            if((int)((uint)*(ushort *)(buffer_ptr + 0xc) << 0x18) < 0){\n                _free_r(file_descriptor, *(undefined4 *)(buffer_ptr + 0x10));\n            }\n            if(*(int *)(buffer_ptr + 0x30) != 0){\n                if(*(int *)(buffer_ptr + 0x30) != buffer_ptr + 0x40){\n                    _free_r(file_descriptor);\n                }\n                *(undefined4 *)(buffer_ptr + 0x30) = 0;\n            }\n            if(*(int *)(buffer_ptr + 0x44) != 0){\n                _free_r(file_descriptor);\n                *(undefined4 *)(buffer_ptr + 0x44) = 0;\n            }\n            __sfp_lock_acquire();\n            *(undefined2 *)(buffer_ptr + 0xc) = 0;\n            __sfp_lock_release();\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "increment",
                "puVar1": "heap_ptr",
                "pcVar2": "allocated_memory",
                "PTR_heap_000811a0": "heap_start_ptr",
                "PTR__ebss_000811a4": "end_of_bss_ptr"
            },
            "code": "caddr_t allocate_memory_0008118c(int increment)\n{\n  undefined *heap_ptr;\n  caddr_t allocated_memory;\n  \n  heap_ptr = PTR_heap_000811a0;\n  if (*(int *)PTR_heap_000811a0 == 0) {\n    *(undefined **)PTR_heap_000811a0 = PTR__ebss_000811a4;\n  }\n  allocated_memory = *(caddr_t *)heap_ptr;\n  *(caddr_t *)heap_ptr = allocated_memory + increment;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "get_string_length_00082a50",
                "__s": "input_string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "is_null_byte"
            },
            "code": "size_t get_string_length_00082a50(char* input_string)\n{\n  size_t string_length = 0;\n  uint32_t* word_ptr = (uint32_t*)((uint32_t)input_string & 0xfffffffc);\n  size_t offset = -((uint32_t)input_string & 3);\n  uint32_t word = *word_ptr;\n  if (((uint32_t)input_string & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (word = *(++word_ptr), (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n  }\n  if ((word & 0xff) == 0) {\n    offset += 1;\n    if ((word & 0xff00) == 0) {\n      offset += 1;\n      if ((word & 0xff0000) == 0) {\n        offset += 1;\n      }\n    }\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "get_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_0008106e(int base_address, int parameter_value)\n{\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "zero_return_000811c2",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int zero_return_000811c2(int file_unused, int ptr_unused, int dir_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "zero_return_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "__thiscall Print::FUN_000816e0": "printBuffer",
                "this": "printObject",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentPrintObject",
                "sVar2": "bytesPrinted",
                "FUN_000816e0": "printBuffer_000816e0"
            },
            "code": "size_t __thiscall printBuffer_000816e0(Print *printObject, uint8_t *buffer, size_t bufferSize)\n{\n  Print *currentPrintObject;\n  size_t bytesPrinted = 0;\n  currentPrintObject = printObject;\n  while ((bytesPrinted != bufferSize && (currentPrintObject = (Print *)(**printObject->_vptr_Print)(currentPrintObject, (uint)buffer[bytesPrinted]), currentPrintObject != (Print *)0x0))) {\n    bytesPrinted++;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handle_UART2_interrupt_00080acc",
                "PTR_Serial2_00080ad4": "&Serial2"
            },
            "code": "void handle_UART2_interrupt_00080acc(void)\n{\n  UARTClass::IrqHandler(PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART2_interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "process_file_000811c6",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "file_contents",
                "len_UNUSED": "content_length"
            },
            "code": "int process_file_000811c6(int file_descriptor, char *file_contents, int content_length)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "process_file_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "lock",
                "param_2": "size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_current_mallinfo",
                "iVar3": "sbrk_r_res",
                "iVar5": "block_size",
                "uVar4": "mask",
                "_sbrk_r": "_sbrk_r"
            },
            "code": "int allocate_memory_00083d00(void* lock, int size)\n{\n    void* malloc_av = PTR___malloc_av__00083d90;\n    __malloc_lock();\n    uint mask = *(uint *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n    int block_size = ((mask - size) + 0xfef & 0xfffff000) - 0x1000;\n    if (0xfff < block_size) {\n        int sbrk_r_res = _sbrk_r(lock, 0);\n        if (sbrk_r_res == *(int *)(malloc_av + 8) + mask) {\n            sbrk_r_res = _sbrk_r(lock, -block_size);\n            void* malloc_current_mallinfo = PTR___malloc_current_mallinfo_00083d94;\n            if (sbrk_r_res != -1) {\n                int mallinfo_res = *(int *)malloc_current_mallinfo;\n                *(uint *)(*(int *)(malloc_av + 8) + 4) = mask - block_size | 1;\n                *(int *)malloc_current_mallinfo = mallinfo_res - block_size;\n                __malloc_unlock(lock);\n                return 1;\n            }\n            int sbrk_r_res2 = _sbrk_r(lock, 0);\n            void* malloc_sbrk_base = PTR___malloc_sbrk_base_00083d98;\n            uint sbrk_diff = sbrk_r_res2 - *(int *)(malloc_av + 8);\n            if (0xf < (int)sbrk_diff) {\n                int sbrk_base = *(int *)malloc_sbrk_base;\n                *(uint *)(*(int *)(malloc_av + 8) + 4) = sbrk_diff | 1;\n                *(int *)malloc_current_mallinfo = sbrk_r_res2 - sbrk_base;\n            }\n        }\n    }\n    __malloc_unlock(lock);\n    return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_process_00081d68",
                "param_1": "exit_code",
                "param_2": "function_pointer",
                "param_3": "arg_pointer",
                "__register_exitproc": "register_exit_proc"
            },
            "code": "void register_exit_process_00081d68(int exit_code, void* function_pointer, void* arg_pointer, void* cleanup_pointer)\n{\n    __register_exitproc(exit_code, function_pointer, arg_pointer, cleanup_pointer);\n    return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_00081d68"
        }
    },
    "used_tokens": 126584,
    "layers": [
        [
            "FUN_00083d00"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}