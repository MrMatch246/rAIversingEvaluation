{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "initialize_and_execute_device_000816a8",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "do_nothing_with_param",
                "initialize_system_000804a8": "initialize_system",
                "FUNC_000805d0": "execute_function",
                "check_differences_in_pointers_00080ce0": "check_differences_in_pointers"
            },
            "code": "void initialize_and_execute_device_000816a8() {\n    set_dat_value_to_0x8000_000816d4();\n    initialize_and_execute_device_000816a8_00080ae4();\n    do_nothing_000816a6();\n    do_nothing_0008120c(1);\n    initialize_system();\n    do {\n        do {\n            FUNC_000805d0();\n        } while (DAT_000816d0 == 0);\n        check_differences_in_pointers();\n    } while (true);\n}",
            "called": [
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_00080ce0",
                "FUN_000805d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_device_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_parameter_00081042",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "mask",
                "param_4": "shift_amount",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_parameter_00081042(uint32_t* data, uint32_t new_value, uint32_t mask, uint32_t shift_amount) {\n    uint32_t* parameter = data + 1;\n    uint32_t current_value = *parameter;\n    uint32_t masked_current_value = current_value & ~mask;\n    uint32_t shifted_new_value = (new_value & mask) << shift_amount;\n    *parameter = masked_current_value | shifted_new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_parameter_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "input",
                "param_2": "count",
                "param_3": "data_array",
                "piVar1": "current_data",
                "iVar2": "result",
                "piVar3": "current_data_array",
                "uVar4": "i",
                "puVar5": "current_data_ptr",
                "uVar6": "data_size",
                "uVar7": "j"
            },
            "code": "int process_data_00082ac0(int input, int count, int **data_array)\n{\n  int *current_data;\n  int result;\n  int *current_data_array;\n  uint data_size;\n  undefined4 *current_data_ptr;\n  uint i;\n  uint j;\n  \n  if (-1 < *(int *)(count + 100) << 0x12) {\n    result = FUNC_00083f34();\n    data_array[2] = (int *)0x0;\n    data_array[1] = (int *)0x0;\n    return result;\n  }\n  current_data_array = data_array[2];\n  current_data = *data_array;\n  while (current_data_array != (int *)0x0) {\n    data_size = current_data[1];\n    j = data_size >> 2;\n    if (j != 0) {\n      current_data_ptr = (undefined4 *)(*current_data + -4);\n      i = 0;\n      do {\n        current_data_ptr = current_data_ptr + 1;\n        result = process_data_00082ac0_00083c40(input,*current_data_ptr,count);\n        i = i + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (j != i);\n      current_data_array = data_array[2];\n    }\n    current_data_array = (int *)((int)current_data_array - (data_size & 0xfffffffc));\n    data_array[2] = current_data_array;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data_array[2] = (int *)0x0;\n  data_array[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_differences_in_pointers_00080ce0",
                "PTR_DAT_00080d14": "PTR_DATA_1",
                "PTR_DAT_00080d18": "PTR_DATA_2",
                "PTR_DAT_00080d1c": "PTR_DATA_3",
                "PTR_DAT_00080d20": "PTR_DATA_4",
                "calculate_difference_000813e4": "calculate_difference",
                "do_nothing_00080aa8": "do_nothing_1",
                "do_nothing_00080ab8": "do_nothing_2",
                "do_nothing_00080aba": "do_nothing_3",
                "do_nothing_00080abc": "do_nothing_4"
            },
            "code": "void check_differences_in_pointers_00080ce0(void)\n{\n  int difference;\n  difference = calculate_difference_000813e4(PTR_DAT_00080d14);\n  if (difference != 0) {\n    do_nothing_00080aa8();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d18);\n  if (difference != 0) {\n    do_nothing_00080ab8();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d1c);\n  if (difference != 0) {\n    do_nothing_00080aba();\n  }\n  difference = calculate_difference_000813e4(PTR_DAT_00080d20);\n  if (difference != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}",
            "called": [
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_differences_in_pointers_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_with_zeroes_00081682",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "count_with_padding",
                "*param_1": "array[0]",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]",
                "count_bytes_with_padding_00082a50": "count_bytes_with_padding",
                "update_data_if_executed_0008165c": "update_data_if_executed"
            },
            "code": "undefined4 *initialize_array_with_zeroes_00081682(undefined4 *array, int size)\n{\n  undefined4 count_with_padding;\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (size != 0) {\n    count_with_padding = count_bytes_with_padding_00082a50(size);\n    update_data_if_executed_0008165c(array, size, count_with_padding);\n  }\n  return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "allocate_memory_block_and_return_pointer_000815fe",
                "*param_1": "*block_size",
                "allocate_memory_block_00081e04": "allocate_memory_block"
            },
            "code": "void allocate_memory_block_and_return_pointer_000815fe(int *block_size){\n  allocate_memory_block(*block_size);\n  return block_size;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "allocate_memory_block_and_return_pointer_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "validate_uint_00081d1c",
                "param_1": "input_val",
                "uVar1": "subtracted_val",
                "shifted_val": "shifted_val",
                "shift_amount": "shift_amount",
                "shifted_val2": "shifted_val2",
                "shifted_val3": "shifted_val3",
                "or_val": "or_val",
                "or_val2": "or_val2",
                "shift_amount2": "shift_amount2"
            },
            "code": "uint validate_uint_00081d1c(uint input_val)\n{\n    uint return_val;\n    if (((input_val & 0x80000000) != 0) || (input_val << 1 < 0x7f000000)) {\n        return 0;\n    }\n    uint shifted_val = input_val << 1;\n    uint shift_amount = 0x18;\n    uint shifted_val2 = shifted_val >> shift_amount;\n    uint subtracted_val = 0x9e - shifted_val2;\n    if (-1 < (int)subtracted_val) {\n        uint shifted_val3 = input_val << 8;\n        uint or_val = 0x80000000;\n        uint or_val2 = shifted_val3 | or_val;\n        uint shift_amount2 = subtracted_val & 0xff;\n        return_val = or_val2 >> shift_amount2;\n    }\n    else if ((subtracted_val == 0xffffff9f) && ((input_val & 0x7fffff) != 0)) {\n        return_val = 0;\n    }\n    else {\n        return_val = 0xffffffff;\n    }\n    return return_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_uint_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "output",
                "uVar1": "product",
                "lVar2": "shifted_product",
                "*param_5": "output[0]",
                "param_5[1]": "output[1]"
            },
            "code": "void calculate_difference_000847ac(uint input1, int input2, undefined4 input3, undefined4 input4, int *output) {\n  uint product = FUNC_00084a80() * ((long long)input4 << 32 | input3);\n  uint subtracted = input1 - product;\n  uint shifted_product = (uint)((ulonglong)product >> 32);\n  int subtracted2 = input2 - (int)shifted_product - (uint)(input1 < product);\n  output[0] = subtracted;\n  output[1] = subtracted2;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "is_pointer_initialized",
                "PTR_DAT_0008013c": "initialized_pointer",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function_code_pointer",
                "code": "function_code"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, char* param2, int param3, int param4)\n{\n  if (DAT_00080134 != 0) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_numbers_combined_00081c94",
                "in_CY": "num2",
                "in_ZR": "num1"
            },
            "code": "bool check_numbers_combined_00081c94(void)\n{\n    undefined num1;\n    undefined num2;\n    combine_two_numbers();\n    return !(bool)num2 || (bool)num1;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_numbers_combined_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "memory_address",
                "puVar1": "undefined_pointer_1",
                "uVar2": "undefined_integer",
                "puVar3": "undefined_pointer_2",
                "puVar4": "undefined_pointer_3",
                "puVar5": "data_structure_1",
                "puVar6": "data_structure_2"
            },
            "code": "void initialize_data_structures_00083b14(int param_1) {\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *data_structure_1 = *(undefined4 **)(param_1 + 4);\n    undefined4 *data_structure_2 = *(undefined4 **)(param_1 + 8);\n    undefined4 *data_structure_3 = *(undefined4 **)(param_1 + 0xc);\n    *(undefined **)(param_1 + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(data_structure_1 + 3) = 4;\n    *data_structure_1 = 0;\n    data_structure_1[1] = 0;\n    data_structure_1[2] = 0;\n    data_structure_1[0x19] = 0;\n    *(undefined2 *)((int)data_structure_1 + 0xe) = 0;\n    data_structure_1[4] = 0;\n    data_structure_1[5] = 0;\n    data_structure_1[6] = 0;\n    write_to_memory_00082504(data_structure_1 + 0x17, 0, 8);\n    undefined *string_1 = PTR_LAB_000844bc_1_00083c04;\n    undefined *string_2 = PTR_process_data_0008449c_1_00083c00;\n    undefined4 integer_1 = DAT_00083bfc;\n    undefined *string_3 = PTR_LAB_00084440_1_00083bf8;\n    data_structure_1[7] = data_structure_1;\n    data_structure_1[8] = string_3;\n    data_structure_1[9] = integer_1;\n    data_structure_1[10] = string_2;\n    data_structure_1[0xb] = string_1;\n    *(undefined2 *)((int)data_structure_2 + 0xe) = 1;\n    *(undefined2 *)(data_structure_2 + 3) = 9;\n    *data_structure_2 = 0;\n    data_structure_2[1] = 0;\n    data_structure_2[2] = 0;\n    data_structure_2[0x19] = 0;\n    data_structure_2[4] = 0;\n    data_structure_2[5] = 0;\n    data_structure_2[6] = 0;\n    write_to_memory_00082504(data_structure_2 + 0x17, 0, 8);\n    data_structure_2[7] = data_structure_2;\n    data_structure_2[8] = string_3;\n    data_structure_2[9] = integer_1;\n    data_structure_2[10] = string_2;\n    data_structure_2[0xb] = string_1;\n    *(undefined2 *)(data_structure_3 + 3) = 0x12;\n    *(undefined2 *)((int)data_structure_3 + 0xe) = 2;\n    *data_structure_3 = 0;\n    data_structure_3[1] = 0;\n    data_structure_3[2] = 0;\n    data_structure_3[0x19] = 0;\n    data_structure_3[4] = 0;\n    data_structure_3[5] = 0;\n    data_structure_3[6] = 0;\n    write_to_memory_00082504(data_structure_3 + 0x17, 0, 8);\n    data_structure_3[7] = data_structure_3;\n    data_structure_3[8] = string_3;\n    data_structure_3[9] = integer_1;\n    data_structure_3[10] = string_2;\n    data_structure_3[0xb] = string_1;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "set_permissions_and_process_param_000842a4",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "permissions",
                "iVar2": "permissions_set",
                "iVar3": "set_permissions_result",
                "uVar4": "permissions_uint",
                "bVar5": "is_executable",
                "auStack_54": "stack_array",
                "local_50": "local_variable"
            },
            "code": "void set_permissions_and_process_param_000842a4(int file_descriptor, int *file_info)\n{\n    ushort permissions = *(ushort *)(file_info + 3);\n    uint permissions_uint = (uint)permissions;\n\n    if ((int)(permissions_uint << 0x1e) < 0) {\n        *file_info = (int)file_info + 0x43;\n        file_info[4] = (int)file_info + 0x43;\n        file_info[5] = 1;\n        return;\n    }\n\n    bool is_executable = false;\n    if (-1 < *(short *)((int)file_info + 0xe)) {\n        int permissions_set = set_permissions(file_descriptor, (int)*(short *)((int)file_info + 0xe), auStack_54);\n        if (-1 < permissions_set) {\n            is_executable = (local_50 & 0xf000) == 0x2000;\n            if (((local_50 & 0xf000) == 0x8000) && ((undefined *)file_info[10] == PTR_FUN_0008449c_1_00084380)) {\n                permissions |= 0x400;\n                file_info[0x13] = 0x400;\n            }\n            else {\n                permissions |= 0x800;\n            }\n        }\n        else {\n            permissions = permissions | 0x800;\n        }\n    }\n    else {\n        permissions = permissions | 0x800;\n    }\n\n    int process_param_result = process_param(file_descriptor, (int)*(short *)((int)file_info + 0xe));\n    if (process_param_result != 0) {\n        permissions |= 1;\n    }\n\n    int set_permissions_result = set_permissions(file_descriptor, permissions);\n    if (set_permissions_result == 0) {\n        if (-1 < (int)((uint)permissions << 0x16)) {\n            *file_info = (int)file_info + 0x43;\n            file_info[4] = (int)file_info + 0x43;\n            file_info[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(file_descriptor + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n        permissions |= 0x80;\n        *file_info = set_permissions_result;\n        file_info[4] = set_permissions_result;\n        file_info[5] = permissions;\n        if (is_executable && process_param_result != 0) {\n            permissions |= 1;\n        }\n    }\n}\n",
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "set_permissions_and_process_param_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data_ptr",
                "uVar1": "result",
                "iVar2": "allocation_result",
                "iVar3": "data_struct_ptr",
                "*DAT_000846b0": "*PTR_DAT_000846b0",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "process_data_00083adc": "process_data_helper",
                "*(int *)(param_1 + 0x38)": "*(int *)(data_struct_ptr + 0x38)",
                "*(short *)(param_1 + 0xc)": "*(short *)(data_ptr + 0xc)",
                "*(code **)(param_1 + 0x2c)": "*(code **)(data_ptr + 0x2c)",
                "*(undefined4 *)(param_1 + 0x1c)": "*(undefined4 *)(data_ptr + 0x1c)",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(data_ptr + 0x10)",
                "*(int *)(param_1 + 0x30)": "*(int *)(data_ptr + 0x30)",
                "*(int *)(param_1 + 0x44)": "*(int *)(data_ptr + 0x44)",
                "allocateMemoryBlock_00083d9c": "allocate_memory_block",
                "do_nothing_00083c08": "do_nothing_before_return",
                "do_nothing_00083c0c": "do_nothing_after_return"
            },
            "code": "int process_data_000846a4(int data_ptr)\n{\n  int data_struct_ptr = *DAT_000846b0;\n  if (data_ptr != 0) {\n    if ((data_struct_ptr != 0) && (*(int *)(data_struct_ptr + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data_ptr + 0xc) != 0) {\n      int result = process_data_000846a4_00083adc(data_struct_ptr,data_ptr);\n      if ((*(code **)(data_ptr + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(data_ptr + 0x2c))(data_struct_ptr,*(undefined4 *)(data_ptr + 0x1c)), result < 0))\n      {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x18) < 0) {\n        allocate_memory_block(data_struct_ptr,*(undefined4 *)(data_ptr + 0x10));\n      }\n      if (*(int *)(data_ptr + 0x30) != 0) {\n        if (*(int *)(data_ptr + 0x30) != data_ptr + 0x40) {\n          allocate_memory_block(data_struct_ptr);\n        }\n        *(undefined4 *)(data_ptr + 0x30) = 0;\n      }\n      if (*(int *)(data_ptr + 0x44) != 0) {\n        allocate_memory_block(data_struct_ptr);\n        *(undefined4 *)(data_ptr + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(data_ptr + 0xc) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_regions_00080f24",
                "puVar1": "rel_array_start",
                "puVar2": "data_start",
                "iVar3": "rel_data_size",
                "puVar4": "zero_data_start",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_array_start",
                "DAT_00080f7c": "data_start",
                "PTR_DAT_00080f84": "zero_data_start",
                "DAT_00080f94": "rel_data_size",
                "DAT_00080f8c": "zero_data_end",
                "PTR_DAT_00080f90": "memory_region",
                "DAT_00080f98": "function_pointer",
                "*(undefined4 *)(puVar1 + iVar3)": "*(undefined4 *)(rel_array_start + i)",
                "*(undefined4 *)(puVar2 + iVar3)": "*(undefined4 *)(data_start + i)",
                "*(uint *)(DAT_00080f94 + 8)": "*(memory_region + 2)",
                "(uint)PTR_DAT_00080f90 & 0x1fffff80": "(uint)PTR_DAT_00080f90 & 0x1fffff80",
                "*(uint *)(iVar3 + 8)": "*(memory_region + 2)",
                "*(uint *)(iVar3 + 8) | 0x20000000": "*(memory_region + 2) |= 0x20000000"
            },
            "code": "void initialize_memory_regions_00080f24(void)\n{\n  undefined *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  undefined *rel_array_end = PTR_DAT_00080f88;\n  undefined *DAT_00080f7c = DAT_00080f7c;\n  undefined *rel_DAT_00080f7c = PTR_DAT_00080f84;\n  undefined4 *PTR_DAT_00080f84 = (undefined4 *)PTR_DAT_00080f84;\n  int DAT_00080f94 = DAT_00080f94;\n  uint *DAT_00080f8c = (uint *)DAT_00080f8c;\n  uint *PTR_DAT_00080f90 = (uint *)DAT_00080f94;\n  undefined *PTR_DAT_00080f90_end = PTR_DAT_00080f90 + -0x20000000;\n\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (int i = 0; rel_DAT_00080f7c = (undefined4 *)PTR_DAT_00080f84, PTR_Elf32_Rel_ARRAY_00080f80 + i < rel_array_end; i += 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(undefined4 *)(DAT_00080f7c + i);\n    }\n  }\n\n  for (; PTR_DAT_00080f84 < DAT_00080f8c; PTR_DAT_00080f84++) {\n    *PTR_DAT_00080f84 = 0;\n  }\n\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n\n  if (PTR_DAT_00080f90_end < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n\n  (*DAT_00080f98)();\n\n  while (true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_regions_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_flag_00080e04",
                "param_1": "flag_address",
                "param_2": "input_flag",
                "uVar1": "flag_value"
            },
            "code": "uint check_flag_00080e04(int flag_address, uint input_flag) {\n  uint flag_value = *(uint *)(flag_address + 8) & input_flag;\n  if (flag_value != 0) {\n    if ((input_flag & *(uint *)(flag_address + 0x18)) == 0) {\n      flag_value = 0;\n    }\n    else {\n      flag_value = 1;\n    }\n  }\n  return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_flag_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "process_data_00081210": "initialize_data",
                "process_flag_00081318": "set_flag",
                "PTR_DAT_000805a8": "data_array_1",
                "PTR_DAT_000805ac": "data_array_2",
                "PTR_DAT_000805b0": "data_array_3",
                "PTR_DAT_000805b4": "data_array_4",
                "PTR_DAT_000805b8": "data_array_5",
                "PTR_DAT_000805bc": "data_array_6",
                "PTR_DAT_000805c0": "data_array_7",
                "PTR_DAT_000805c4": "data_array_8",
                "PTR_DAT_000805c8": "data_array_9",
                "PTR_DAT_000805cc": "data_array_10"
            },
            "code": "void initialize_system_000804a8(void)\n{\n  initialize_data(1,0);\n  initialize_data(6,1);\n  initialize_data(0,1);\n  initialize_data(1,1);\n  set_flag(0,0);\n  set_flag(1,0);\n  uint8_t* data_ptr = PTR_DAT_000805a8;\n  uint8_t* ptr_2 = PTR_DAT_000805ac;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0xe) = 0x13;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x10) = 10;\n  *(uint8_t**)(PTR_DAT_000805a8 + 0x14) = PTR_DAT_000805ac + 0x26;\n  PTR_DAT_000805a8[1] = 3;\n  PTR_DAT_000805a8[0x19] = 3;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x1a) = 0x14;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x28) = 3;\n  *(uint16_t*)(PTR_DAT_000805a8 + 4) = 0x10;\n  *(uint8_t**)(PTR_DAT_000805a8 + 8) = PTR_DAT_000805ac;\n  PTR_DAT_000805a8[0xd] = 0x10;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x1c) = 0xc;\n  PTR_DAT_000805a8[0x25] = 0x10;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x34) = 8;\n  uint8_t* ptr_3 = PTR_DAT_000805b0;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x26) = 0x1c;\n  *(uint8_t**)(PTR_DAT_000805a8 + 0x2c) = PTR_DAT_000805ac + 0x38;\n  PTR_DAT_000805a8[0x30] = 2;\n  PTR_DAT_000805a8[0x31] = 2;\n  *(uint8_t**)(PTR_DAT_000805a8 + 0x38) = ptr_3;\n  PTR_DAT_000805a8[0x3c] = 2;\n  *PTR_DAT_000805a8 = 1;\n  PTR_DAT_000805a8[0xc] = 1;\n  PTR_DAT_000805a8[0x18] = 1;\n  PTR_DAT_000805a8[0x24] = 1;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x3e) = 1;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x40) = 1;\n  *(uint16_t*)(PTR_DAT_000805a8 + 2) = 0;\n  *(uint8_t**)(PTR_DAT_000805a8 + 0x20) = PTR_DAT_000805ac + 0x28;\n  *(uint16_t*)(PTR_DAT_000805a8 + 0x32) = 0;\n  PTR_DAT_000805a8[0x3d] = 5;\n  *(uint8_t**)(PTR_DAT_000805a8 + 0x44) = ptr_3 + 2;\n  initialize_data(ptr_2,0x4b00);\n  *(uint16_t*)(ptr_2 + 0x56) = 2000;\n  uint32_t uVar5 = get_value_from_pointer_thunk_00081714();\n  *(uint32_t*)PTR_DAT_000805b4 = uVar5;\n  int iVar6 = get_value_from_pointer_thunk_00081714();\n  *(int*)PTR_DAT_000805b8 = iVar6 + 1000;\n  iVar6 = get_value_from_pointer_thunk_00081714();\n  *(int*)PTR_DAT_000805bc = iVar6 + 1000;\n  iVar6 = get_value_from_pointer_thunk_00081714();\n  *(int*)PTR_DAT_000805c0 = iVar6 + 1000;\n  iVar6 = get_value_from_pointer_thunk_00081714();\n  *(int*)PTR_DAT_000805c4 = iVar6 + 1000;\n  *PTR_DAT_000805c8 = 0;\n  if (*(int*)PTR_DAT_000805cc == 0) {\n    software_interrupt(0x3f);\n  }\n}\n",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_data_000802da",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_array",
                "cVar1": "error_code",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "ushort_value",
                "uVar5": "uint_value",
                "puVar6": "ushort_ptr",
                "local_1c": "local_char_1",
                "local_1b": "local_undefined_1",
                "local_1a": "local_ushort_1"
            },
            "code": "int validate_data_000802da(int data_ptr, ushort data_length, ushort *data_array)\n{\n  char error_code;\n  byte byte_value;\n  undefined undefined_value;\n  ushort ushort_value;\n  uint uint_value;\n  ushort *ushort_ptr;\n  char local_char_1;\n  undefined local_undefined_1;\n  ushort local_ushort_1;\n  \n  uint_value = (uint)data_length;\n  if (*(char *)(data_ptr + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data_ptr + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(local_char_1 - 1U)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(data_ptr + 9) = local_char_1;\n  *(undefined *)(data_ptr + 10) = local_undefined_1;\n  *(ushort **)(data_ptr + 0x4c) = data_array;\n  *(char *)(data_ptr + 0xb) = (char)((uint)local_ushort_1 >> 8);\n  *(char *)(data_ptr + 0xc) = (char)local_ushort_1;\n  error_code = (char)data_length;\n  undefined_value = (undefined)(uint_value >> 8);\n  switch(local_undefined_1) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    break;\n  case 5:\n    ushort_value = *data_array;\n    if (ushort_value != 0) {\n      ushort_value = 1;\n    }\n    *(char *)(data_ptr + 0xd) = -(char)ushort_value;\n    uint_value = 0;\n    break;\n  case 6:\n    *(char *)(data_ptr + 0xd) = (char)((uint)*data_array >> 8);\n    uint_value = (uint)*data_array;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(data_length >> 3) & 0xfe;\n    if ((data_length & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(data_ptr + 0xe) = error_code;\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    *(byte *)(data_ptr + 0xf) = byte_value;\n    undefined_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data_ptr + 0xd) = undefined_value;\n    *(char *)(data_ptr + 0xe) = error_code;\n    data_array = data_array + -1;\n    *(char *)(data_ptr + 0xf) = error_code * '\\x02';\n    *(undefined *)(data_ptr + 0x49) = 7;\n    ushort_ptr = data_array + uint_value;\n    while (data_array != ushort_ptr) {\n      byte_value = *(byte *)(data_ptr + 0x49);\n      *(char *)(data_ptr + (uint)byte_value + 9) = (char)((uint)data_array[1] >> 8);\n      uint_value = byte_value + 1 & 0xff;\n      *(char *)(data_ptr + 0x49) = (char)uint_value;\n      data_array = data_array + 1;\n      *(char *)(uint_value + data_ptr + 9) = (char)*data_array;\n      *(byte *)(data_ptr + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data_ptr + 0xe) = (char)uint_value;\n  undefined_value = 6;\nLAB_0008034a:\n  *(undefined *)(data_ptr + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n  calculate_checksum_and_update_data_00080258(data_ptr);\n  *(undefined *)(data_ptr + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_data_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_value_00080f9c",
                "param_1": "result",
                "param_2": "input_size",
                "local_58": "local_values",
                "uVar1": "division_result",
                "uVar2": "index"
            },
            "code": "uint32_t calculate_value_00080f9c(uint32_t *result, uint32_t input_size, int param_3, int param_4) {\n  uint32_t local_values[16];\n  local_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint32_t uVar1 = input_size / (uint32_t)(param_3 * 2);\n  if (input_size == param_3 * 2 * uVar1) {\n    uVar1 = uVar1 - 1;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(param_4 * (int)(((uint64_t)input_size / (uint64_t)((uVar1 + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (uVar1 & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index++;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "calculate_value_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "index",
                "param_2": "action",
                "puVar1": "data_ptr",
                "puVar2": "flag_ptr",
                "iVar3": "result",
                "uVar4": "flag_offset",
                "uVar5": "handle_data_arg1",
                "uVar6": "flag_value",
                "bVar7": "flag_low",
                "bVar8": "flag_high",
                "iVar9": "data_index",
                "iVar10": "data_ptr"
            },
            "code": "int process_data_00081210(int index, int action)\\n{\\n    uint8_t *data_ptr = data_table;\\n    uint8_t *flag_ptr = flag_table;\\n    int result = index;\\n    if (data_table[index * 0x1c + 0xc] != \"\\0\") {\\n        uint8_t flag = flag_table[index];\\n        uint8_t flag_low = flag & 0xf;\\n        if ((flag_low < 3) && (flag != 0)) {\\n            if (flag_low == 2 && action == 0) {\\n                return result;\\n            }\\n            else if (flag_low == 1 && action == 2) {\\n                return result;\\n            }\\n            else if (flag_low == 3) {\\n                if (action == 1) {\\n                    return result;\\n                }\\n                goto LAB_0008126c;\\n            }\\n        }\\n        if (action != 1) {\\nLAB_0008126c:\\n            if (action == 0) {\\n                int data_index = index * 0x1c;\\n                check_character(*(uint32_t *)(data_ptr + data_index + 8));\\n                result = handle_data(*(uint32_t *)(data_ptr + data_index), 3, *(uint32_t *)(data_ptr + data_index + 4), 0);\\n                flag = (flag & 0xf0) | 2;\\n            }\\n            else {\\n                if (action != 2) {\\n                    return result;\\n                }\\n                int data_index = index * 0x1c;\\n                check_character(*(uint32_t *)(data_ptr + data_index + 8));\\n                result = handle_data(*(uint32_t *)(data_ptr + data_index), 3, *(uint32_t *)(data_ptr + data_index + 4), 1);\\n                flag = (flag & 0xf0) | 1;\\n            }\\n            flag_table[index] = flag;\\n            return result;\\n        }\\n        int data_index = index * 0x1c;\\n        int data_ptr = *(int *)(data_table + data_index);\\n        uint8_t flag_high = flag >> 4;\\n        uint32_t handle_data_arg1 = (flag_high == 0) ? 4 : 5;\\n        result = handle_data(data_ptr, handle_data_arg1, *(uint32_t *)(data_table + data_index + 4), *(uint32_t *)(data_table + data_index + 0x10));\\n        flag_table[index] = (flag & 0xf0) | 3;\\n        if (*(int *)(data_ptr + 0x18) == -1) {\\n            uint32_t flag_offset = *(uint32_t *)(data_table + data_index + 8);\\n            if (flag_offset > 0x2c) {\\n                return 1;\\n            }\\n            if (flag_offset < 0x20) {\\n                uint32_t flag_bit = 1 << (flag_offset & 0xff);\\n                uint32_t flag_value = *(uint32_t *)(flag_table + 0x18) & flag_bit;\\n                if (flag_value == flag_bit) {\\n                    *(uint32_t *)(flag_table + 0x14) = flag_value;\\n                }\\n            }\\n            else {\\n                uint32_t flag_bit = 1 << (flag_offset - 0x20 & 0xff);\\n                uint32_t flag_value = *(uint32_t *)(flag_table + 0x108) & flag_bit;\\n                if (flag_value == flag_bit) {\\n                    *(uint32_t *)(flag_table + 0x104) = flag_value;\\n                }\\n            }\\n            return 0;\\n        }\\n    }\\n    return result;\\n}",
            "called": [
                "FUN_00080da0",
                "FUN_00080e18",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_value_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "value",
                "iVar1": "buffer_info_address",
                "uVar2": "buffer_write_index_plus_1",
                "buffer_size": "buffer_size",
                "buffer_data_address": "buffer_data_address",
                "buffer_write_index": "buffer_write_index",
                "buffer_value_count": "buffer_value_count",
                "buffer_write_allowed": "buffer_write_allowed"
            },
            "code": "int write_value_to_buffer_00081454(int buffer_address, int value) {\n  int buffer_info_address = *(int *)(buffer_address + 0x18);\n  int buffer_size = *(int *)(buffer_info_address + 0x14);\n  int buffer_data_address = *(int *)(buffer_address + 0x14);\n  int buffer_write_index = *(int *)(buffer_data_address + 0x80);\n  int buffer_value_count = *(int *)(buffer_data_address + 0x84);\n  int buffer_write_allowed = *(int *)(buffer_info_address + 0x14) << 0x1e;\n\n  if (buffer_write_allowed < 0 && *(int *)(buffer_data_address + 0x84) == *(int *)(buffer_data_address + 0x80)) {\n    *(int *)(buffer_info_address + 0x1c) = value;\n  }\n  else {\n    uint buffer_write_index_plus_1 = (unsigned int)(DAT_000814a4 & buffer_write_index + 1);\n    if ((int)buffer_write_index_plus_1 < 0) {\n      buffer_write_index_plus_1 = (buffer_write_index_plus_1 - 1 | 0xffffff80) + 1;\n    }\n    while (*(uint *)(buffer_data_address + 0x84) == buffer_write_index_plus_1);\n    *(char *)(buffer_data_address + buffer_write_index) = (char)value;\n    *(uint *)(buffer_data_address + 0x80) = buffer_write_index_plus_1;\n    *(int *)(buffer_info_address + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_value_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "processReturnValue_00084728",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "dataPtr",
                "iVar2": "returnValue"
            },
            "code": "void processReturnValue_00084728(int* result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined* dataPtr = PTR_DAT_0008474c;\n  *(undefined4*)PTR_DAT_0008474c = 0;\n  int returnValue = returnZero_000811c6(arg2, arg3, arg4);\n  if (returnValue == -1 && (*(int*)dataPtr != 0)) {\n    *result = *(int*)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "processReturnValue_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "iVar2": "int1",
                "uVar3": "value2",
                "pbVar4": "bytePtr1",
                "local_1c": "byte1",
                "abStack_1b": "byteArr1"
            },
            "code": "uint process_data_00083c40(uint param1, uint param2, byte **param3)\n{\n  uint value1;\n  int int1;\n  uint value2;\n  byte *bytePtr1;\n  uint value3;\n  byte byte1;\n  byte byteArr1[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  value1 = get_value_from_dat_a0_00084298();\n  if ((value1 == 1) && (param2 - 1 < 0xff)) {\n    value2 = param2 & 0xff;\n    byte1 = (byte)value2;\n  }\n  else {\n    value1 = process_data_00083c40_0008456c(param1,&byte1,param2,param3 + 0x17);\n    if (value1 == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (value1 == 0) {\n      return param2;\n    }\n    value2 = (uint)byte1;\n  }\n  value3 = 0;\n  do {\n    bytePtr1 = param3[2] + -1;\n    param3[2] = bytePtr1;\n    if ((int)bytePtr1 < 0) {\n      if ((int)param3[6] <= (int)bytePtr1) {\n        **param3 = (byte)value2;\n        bytePtr1 = *param3;\n        value2 = (uint)*bytePtr1;\n        if (value2 != 10) goto LAB_00083c90;\n      }\n      int1 = process_data_00083c40_000844c4(param1,value2,param3);\n      if (int1 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)value2;\n      bytePtr1 = *param3;\nLAB_00083c90:\n      *param3 = bytePtr1 + 1;\n    }\n    if (value1 <= value3 + 1) {\n      return param2;\n    }\n    value2 = (uint)byteArr1[value3];\n    value3 = value3 + 1;\n  } while( true );\n}",
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = get_value_from_pointer_thunk_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = leading_zero_bits_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = calculate_value_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = leading_zero_bits_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = get_value_from_pointer_thunk_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = leading_zero_bits_0008189c(*(undefined4 *)puVar2);\n  iVar15 = check_if_not_both_zero_and_return_sum_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = check_numbers_combined_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = validate_uint_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081730",
                "FUN_00081894",
                "FUN_00081ca8",
                "FUN_00081d1c",
                "FUN_00081734",
                "FUN_00081c94",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_0008189c",
                "FUN_0008043e",
                "FUN_00081cd0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "difference": "unmasked_difference",
                "masked_difference": "difference"
            },
            "code": "int calculate_difference_000813e4(int input_value) {\n    int* ptr_1 = (int*)(*(int*)(input_value + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_value + 0x10) + 0x84);\n    int difference = *ptr_1 - *ptr_2;\n    int masked_difference = difference & 0x7f;\n    return masked_difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data"
            },
            "code": "int get_data_00084290() {\n    return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "set_permissions_000846b4",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "last_result",
                "iVar2": "status"
            },
            "code": "void set_permissions_000846b4(int *result, int start_address, int size, int permissions, int pid) {\n    undefined *last_result = PTR_DAT_000846d8;\n    *(undefined4 *)PTR_DAT_000846d8 = 0;\n    int status = set_memory_permissions_000811b4(start_address, size, size, permissions, pid);\n    if (status == -1 && *(int *)last_result != 0) {\n        *result = *(int *)last_result;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "set_permissions_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address",
                "write_to_memory_00082504": "write_to_memory"
            },
            "code": "int initialize_memory_000813a8(int memory_address){\n    write_to_memory_00082504(memory_address, 0, 128);\n    *(undefined4 *)(memory_address + 128) = 0;\n    *(undefined4 *)(memory_address + 132) = 0;\n    return memory_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_memory_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocateMemoryBlock_00083d9c",
                "param_1": "allocator",
                "param_2": "block_size",
                "iVar1": "prev_block_data_start",
                "uVar2": "block_flags",
                "iVar3": "block_data_start",
                "uVar4": "block_data_size",
                "iVar5": "block_data_end",
                "uVar7": "next_block_size",
                "iVar8": "allocator_start",
                "DAT_00083f24": "allocator_start",
                "DAT_00083f28": "allocator_start + 8",
                "DAT_00083f2c": "*allocator_start + 0x20",
                "PTR_DAT_00083f30": "allocator_start + 0x2c"
            },
            "code": "void allocateMemoryBlock_00083d9c(void* allocator, int block_size)\n{\n    if (block_size == 0) {\n        return;\n    }\n    doNothing();\n    int DAT_00083f24 = DAT_00083f24;\n    uint block_flags = *(uint*)(block_size - 4);\n    int block_data_start = block_size - 8;\n    uint block_data_size = block_flags & 0xfffffffe;\n    int block_data_end = block_data_start + block_data_size;\n    uint next_block_size = *(uint*)(block_data_end + 4) & 0xfffffffc;\n    if (*(int*)(DAT_00083f28) == block_data_end) {\n        next_block_size += block_data_size;\n        if (-1 < (int)(block_flags << 0x1f)) {\n            block_data_start -= *(int*)(block_size - 8);\n            int prev_block_data_start = *(int*)(block_data_start + 0xc);\n            int next_block_data_start = *(int*)(block_data_start + 8);\n            next_block_size += *(int*)(block_size - 8);\n            *(int*)(next_block_data_start + 0xc) = prev_block_data_start;\n            *(int*)(prev_block_data_start + 8) = next_block_data_start;\n        }\n        uint* free_block_size = *DAT_00083f2c;\n        *(uint*)(block_data_start + 4) = next_block_size | 1;\n        *(int*)(DAT_00083f28) = block_data_start;\n        if (free_block_size <= next_block_size) {\n            calculateMemoryOffsetAndReturnSuccess(allocator, *(undefined4*)PTR_DAT_00083f30);\n        }\n    }\n    else {\n        block_flags = block_flags & 1;\n        *(uint*)(block_data_end + 4) = next_block_size;\n        if (block_flags == 0) {\n            block_data_start -= *(int*)(block_size - 8);\n            int prev_block_data_start = *(int*)(block_data_start + 8);\n            uint prev_block_data_size = block_data_size + *(int*)(block_size - 8);\n            if (prev_block_data_start == DAT_00083f28) {\n                block_flags = 1;\n            }\n            else {\n                int prev_block_data_end = *(int*)(block_data_start + 0xc);\n                *(int*)(prev_block_data_start + 0xc) = prev_block_data_end;\n                *(int*)(prev_block_data_end + 8) = prev_block_data_start;\n            }\n        }\n        else {\n            block_flags = 0;\n        }\n        if (-1 < *(int*)(block_data_end + next_block_size + 4) << 0x1f) {\n            uint prev_block_data_size = block_data_size + next_block_size;\n            int next_block_data_start = *(int*)(block_data_end + 8);\n            if ((block_flags == 0) && (next_block_data_start == DAT_00083f28)) {\n                *(int*)(DAT_00083f24 + 0x14) = block_data_start;\n                *(int*)(DAT_00083f24 + 0x10) = block_data_start;\n                *(int*)(block_data_start + 0xc) = next_block_data_start;\n                *(int*)(block_data_start + 8) = next_block_data_start;\n                *(uint*)(block_data_start + 4) = prev_block_data_size | 1;\n                *(uint*)(block_data_start + prev_block_data_size) = prev_block_data_size;\n                goto LAB_00083e30;\n            }\n            int next_block_data_end = *(int*)(block_data_end + 0xc);\n            *(int*)(next_block_data_start + 0xc) = next_block_data_end;\n            *(int*)(next_block_data_end + 8) = next_block_data_start;\n        }\n        *(uint*)(block_data_start + 4) = prev_block_data_size | 1;\n        *(uint*)(block_data_start + prev_block_data_size) = prev_block_data_size;\n        if (block_flags == 0) {\n            if (prev_block_data_size < 0x200) {\n                uint free_block_map = *(uint*)(DAT_00083f24 + 4);\n                int free_block_index = DAT_00083f24 + (prev_block_data_size & 0xfffffff8);\n                int next_free_block_start = *(int*)(free_block_index + 8);\n                *(int*)(block_data_start + 8) = next_free_block_start;\n                *(int*)(block_data_start + 0xc) = free_block_index;\n                *(uint*)(DAT_00083f24 + 4) = free_block_map | 1 << ((int)(prev_block_data_size >> 3) >> 2 & 0xffU);\n                *(int*)(free_block_index + 8) = block_data_start;\n                *(int*)(next_free_block_start + 0xc) = block_data_start;\n                doNothing(allocator);\n                return;\n            }\n            uint free_block_index = prev_block_data_size >> 9;\n            if (free_block_index < 5) {\n                int free_block_map_index = (prev_block_data_size >> 6) + 0x38;\n                int free_block_map_start = free_block_map_index * 2;\n            }\n            else if (free_block_index < 0x15) {\n                int free_block_map_index = free_block_index + 0x5b;\n                int free_block_map_start = free_block_map_index * 2;\n            }\n            else if (free_block_index < 0x55) {\n                int free_block_map_index = (prev_block_data_size >> 0xc) + 0x6e;\n                int free_block_map_start = free_block_map_index * 2;\n            }\n            else if (free_block_index < 0x155) {\n                int free_block_map_index = (prev_block_data_size >> 0xf) + 0x77;\n                int free_block_map_start = free_block_map_index * 2;\n            }\n            else if (free_block_index < 0x555) {\n                int free_block_map_index = (prev_block_data_size >> 0x12) + 0x7c;\n                int free_block_map_start = free_block_map_index * 2;\n            }\n            else {\n                int free_block_map_start = 0xfc;\n                int free_block_map_index = 0x7e;\n            }\n            int free_block_start = DAT_00083f24 + free_block_map_start * 4;\n            int free_block_data_start = *(int*)(free_block_start + 8);\n            if (free_block_data_start == free_block_start) {\n                *(uint*)(DAT_00083f24 + 4) = *(uint*)(DAT_00083f24 + 4) | 1 << (free_block_map_index >> 2 & 0xffU);\n                free_block_data_start = free_block_start;\n            }\n            else {\n                do {\n                    if ((*(uint*)(free_block_data_start + 4) & 0xfffffffc) <= prev_block_data_size) break;\n                    free_block_data_start = *(int*)(free_block_data_start + 8);\n                } while (free_block_start != free_block_data_start);\n                free_block_data_start = *(int*)(free_block_data_start + 0xc);\n            }\n            *(int*)(block_data_start + 0xc) = free_block_data_start;\n            *(int*)(block_data_start + 8) = free_block_start;\n            *(int*)(free_block_data_start + 8) = block_data_start;\n            *(int*)(free_block_start + 0xc) = block_data_start;\n        }\n    }\nLAB_00083e30:\n    doNothing(allocator);\n    return;\n}",
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_00081e14",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "allocateMemoryBlock_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "perform_bitwise_operations_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "bitwise_or_result",
                "bVar5": "is_zero"
            },
            "code": "uint perform_bitwise_operations_00081bf4(uint input_1, uint input_2)\n{\n  bool is_negative;\n  uint multiplied_input_1;\n  uint multiplied_input_2;\n  uint bitwise_or_result;\n  bool is_zero;\n  \n  multiplied_input_1 = input_1 * 2;\n  multiplied_input_2 = input_2 * 2;\n  if (((int)multiplied_input_1 >> 0x18 == -1 || (int)multiplied_input_2 >> 0x18 == -1) && ((((int)multiplied_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)multiplied_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  bitwise_or_result = multiplied_input_1 | input_2 & 0x7fffffff;\n  is_zero = bitwise_or_result == 0;\n  if (!is_zero) {\n    bitwise_or_result = input_1 ^ input_2;\n    is_zero = bitwise_or_result == 0;\n  }\n  is_negative = -1 < (int)bitwise_or_result;\n  if (is_negative) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && multiplied_input_2 <= multiplied_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "perform_bitwise_operations_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "PTR_DAT_00081dbc": "PTR_FUNCTION_LIST_END",
                "PTR_DAT_00081dc0": "PTR_FUNCTION_LIST_START",
                "code": "function_ptr",
                "iVar3": "i",
                "PTR_DAT_00081dc8": "PTR_DATA_END",
                "PTR_LAB_00081dc4": "PTR_DATA_START",
                "puVar1": "start_ptr",
                "puVar2": "end_ptr",
                "do_nothing_00085858": "do_nothing",
                "iVar5": "num_functions",
                "num_functions != 0": "num_functions > 0",
                "i++": "i = i + 1",
                "num_functions != i": "i != num_functions",
                "num_data": "num_data",
                "data_ptr": "data_ptr"
            },
            "code": "void execute_functions_00081d7c() {\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_DAT_00081dc0 + -4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n  }\n  undefined *end_ptr = PTR_DAT_00081dc8;\n  undefined *start_ptr = PTR_LAB_00081dc4;\n  do_nothing();\n  int num_data = (int)start_ptr - (int)end_ptr >> 2;\n  if (num_data != 0) {\n    code **data_ptr = (code **)(end_ptr + -4);\n    int i = 0;\n    do {\n      i++;\n      data_ptr++;\n      (**data_ptr)();\n    } while (num_data != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "combine_two_numbers_00081c5c",
                "param_1": "first_number",
                "param_2": "second_number",
                "CONCAT44": "",
                "perform_bitwise_operations_00081bf4": "perform_bitwise_operations"
            },
            "code": "uint64_t combine_two_numbers_00081c5c(uint32_t first_number, uint32_t second_number)\n{\n  perform_bitwise_operations_00081bf4();\n  return ((uint64_t)second_number << 32) | first_number;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": false,
            "current_name": "combine_two_numbers_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000813a4)();\n  }\n  *DAT_000813a0 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "uVar5": "current_word",
                "uVar6": "next_word",
                "puVar7": "dest_ptr",
                "bVar8": "null_found"
            },
            "code": "void copy_string_00082994(uint *dest, uint *src) {\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_word;\n  uint next_word;\n  bool null_found;\n\n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n\n  if (((uint)src & 3) != 0) {\n    src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n\n    src = src_ptr;\n    if (((uint)src_ptr & 2) != 0) {\n      src = (uint *)((int)src_ptr + 2);\n      current_short = *(ushort *)src_ptr;\n      null_found = (current_short & 0xff) == 0;\n      if (null_found) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        null_found = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (null_found) {\n        return;\n      }\n    }\n  }\n\n  current_word = *src;\n  src_ptr = src + 1;\n  dest_ptr = dest;\n\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n      goto LAB_000829f8;\n    }\n\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    src_ptr = src + 2;\n    current_word = src[1];\n  }\n\n  while (true) {\n    next_word = *src_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n      break;\n    }\n\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    current_word = next_word;\n\n    if ((next_word + 0xfefefeff & ~next_word & 0x80808080) != 0) {\n      break;\n    }\n\n    src_ptr = src_ptr + 2;\n    dest_ptr = dest + 1;\n    *dest = next_word;\n    current_word = src_ptr[0];\n  }\n\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)current_word;\n    next_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (next_word != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_buffers_and_write_values_00080c0c",
                "param_1": "buffer1_size",
                "param_2": "buffer2_size",
                "param_3": "value_to_write",
                "puVar1": "buffer1_start",
                "puVar2": "buffer2_start",
                "puVar3": "buffer3_start",
                "puVar4": "buffer4_start",
                "puVar5": "buffer5_start",
                "puVar6": "buffer6_start"
            },
            "code": "void initialize_buffers_and_write_values_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *buffer1_start = PTR_DAT_00080ca0;\n  undefined *buffer2_start = PTR_DAT_00080ca4;\n  undefined *buffer3_start = PTR_DAT_00080cac;\n  undefined *buffer4_start = PTR_DAT_00080cb0;\n  undefined *buffer5_start = PTR_DAT_00080cb4;\n  undefined *buffer6_start = PTR_DAT_00080cb8;\n  undefined *buffer7_start = PTR_DAT_00080cbc;\n  undefined *buffer8_start = PTR_DAT_00080cdc;\n  initialize_memory_000813a8(buffer1_start);\n  initialize_memory_000813a8(buffer2_start);\n  initialize_memory_000813a8(buffer3_start);\n  initialize_memory_000813a8(buffer4_start);\n  initialize_memory_000813a8(buffer5_start);\n  initialize_memory_000813a8(buffer6_start);\n  initialize_memory_000813a8(buffer7_start);\n  initialize_memory_000813a8(buffer8_start);\n  write_value_to_buffer_000815d4(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, buffer2_start, buffer8_start);\n  write_value_to_buffer_000815d4(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, buffer3_start, buffer6_start);\n  write_value_to_buffer_000815d4(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, buffer5_start, buffer7_start);\n}\n",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_buffers_and_write_values_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_status_00080d2e",
                "param_1": "status",
                "param_2": "mode",
                "param_3": "value",
                "uVar1": "new_status"
            },
            "code": "void update_status_00080d2e(int status, uint32_t mode, uint32_t value)\n{\n  uint32_t new_status;\n  \n  *(uint32_t *)(status + 0x44) = value;\n  switch(mode) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      new_status = *(uint32_t *)(status + 0x70) & *(uint32_t *)(status + 0x70) & ~value;\n      break;\n    case 2:\n      new_status = *(uint32_t *)(status + 0x70) | value;\n      break;\n    default:\n      goto default_case;\n  }\n  *(uint32_t *)(status + 0x70) = new_status;\ndefault_case:\n  *(uint32_t *)(status + 4) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_status_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "dataStruct",
                "param_4": "param4",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "ptr1",
                "iVar4": "var1"
            },
            "code": "uint process_data_000844c4(int param1, uint param2, undefined4 *dataStruct, undefined4 param4) {\n  ushort value1;\n  uint value2;\n  undefined *ptr1;\n  int var1;\n  \n  if ((param1 != 0) && (*(int *)(param1 + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  value1 = *(ushort *)(dataStruct + 3);\n  value2 = (uint)value1;\n  dataStruct[2] = dataStruct[6];\n  if ((-1 < (int)(value2 << 0x1c)) || (var1 = dataStruct[4], var1 == 0)) {\n    var1 = process_data_000844c4_00083808(param1,dataStruct,value1,value2,param4);\n    if (var1 != 0) {\n      return 0xffffffff;\n    }\n    value1 = *(ushort *)(dataStruct + 3);\n    var1 = dataStruct[4];\n    value2 = (uint)value1;\n  }\n  param2 = param2 & 0xff;\n  if ((int)(value2 << 0x12) < 0) {\n    ptr1 = (undefined *)*dataStruct;\n    var1 = (int)ptr1 - var1;\n    if (var1 < (int)dataStruct[5]) {\n      goto LAB_000844f6;\n    }\n  }\n  else {\n    dataStruct[0x19] = dataStruct[0x19] & 0xffffdfff;\n    ptr1 = (undefined *)*dataStruct;\n    *(ushort *)(dataStruct + 3) = value1 | 0x2000;\n    var1 = (int)ptr1 - var1;\n    if (var1 < (int)dataStruct[5]) {\n      goto LAB_000844f6;\n    }\n  }\n  var1 = process_data_000844c4_00083adc(param1,dataStruct);\n  if (var1 != 0) {\n    return 0xffffffff;\n  }\n  ptr1 = (undefined *)*dataStruct;\n  var1 = 1;\nLAB_000844f8:\n  dataStruct[2] = dataStruct[2] + -1;\n  *dataStruct = ptr1 + 1;\n  *ptr1 = (char)param2;\n  if (((dataStruct[5] == var1) || (((int)((uint)*(ushort *)(dataStruct + 3) << 0x1f) < 0 && (param2 == 10)))) && (var1 = process_data_000844c4_00083adc(param1,dataStruct), var1 != 0)) {\n    return 0xffffffff;\n  }\n  return param2;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "leading_zero_bits_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "mask",
                "iVar4": "output",
                "uVar3": "mask",
                "uVar5": "check_mask"
            },
            "code": "uint leading_zero_bits_0008189c(uint input) {\n  int leading_zeroes;\n  uint mask, output;\n  \n  mask = input & 0x80000000;\n  if ((int)mask < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input);\n  output = ((mask | 0x4b000000) - 0x800000) + ((leading_zeroes - 8) * -0x800000);\n  if (leading_zeroes > 7) {\n    mask = 0 << (leading_zeroes - 8);\n    output += (input << (leading_zeroes - 8)) + (0U >> (0x20 - (leading_zeroes - 8))) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      output &= 0xfffffffe;\n    }\n    return output;\n  }\n  mask = input << (leading_zeroes + 0x18U);\n  output += ((input >> (0x20 - (leading_zeroes + 0x18U))) - ((int)mask >> 0x1f));\n  if ((mask & 0x7fffffff) == 0) {\n    output &= ~(mask >> 0x1f);\n  }\n  return output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "leading_zero_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_aligned_0008234c",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "num_bytes",
                "puVar1": "dst_ptr",
                "puVar2": "src_ptr",
                "puVar3": "num_words",
                "uVar4": "num_remaining_bytes",
                "uVar5": "is_aligned",
                "bVar6": "loop_condition"
            },
            "code": "undefined4* copy_memory_aligned_0008234c(undefined4* dst, undefined4* src, uint num_bytes) {\n  undefined4* dst_ptr;\n  undefined4* src_ptr;\n  uint num_words;\n  uint num_remaining_bytes;\n  bool is_aligned;\n  \n  dst_ptr = dst;\n  is_aligned = (((uint)dst | (uint)src) & 3) == 0;\n  if (!is_aligned) {\n    if (num_bytes < 8) {\n      num_remaining_bytes = num_bytes - 4;\n      if (3 < num_bytes) {\n        do {\n          src_ptr = src;\n          dst_ptr = dst;\n          num_remaining_bytes--;\n          *(byte*)dst_ptr = *(byte*)src_ptr;\n          dst = (undefined4*)((int)dst_ptr + 1);\n          src = (undefined4*)((int)src_ptr + 1);\n        } while (num_remaining_bytes != 0);\n        *(byte*)(undefined4*)((int)dst_ptr + 1) = *(byte*)(undefined4*)((int)src_ptr + 1);\n        *(byte*)((int)dst_ptr + 2) = *(byte*)((int)src_ptr + 2);\n        *(byte*)((int)dst_ptr + 3) = *(byte*)((int)src_ptr + 3);\n        return dst_ptr;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dst & 3) != 0)) {\n      num_remaining_bytes = 4 - ((uint)dst & 3);\n      num_bytes -= num_remaining_bytes;\n      src_ptr = src;\n      dst_ptr = dst;\n      if (((uint)dst & 1) != 0) {\n        src_ptr = (undefined4*)((int)src + 1);\n        dst_ptr = (undefined4*)((int)dst + 1);\n        *(byte*)dst = *(byte*)src;\n      }\n      dst = dst_ptr;\n      src = src_ptr;\n      if ((num_remaining_bytes & 2) != 0) {\n        src = (undefined4*)((int)src_ptr + 2);\n        dst = (undefined4*)((int)dst_ptr + 2);\n        *(ushort*)dst_ptr = *(ushort*)src_ptr;\n      }\n    }\n  }\n  num_words = num_bytes >> 6;\n  while (num_words != 0) {\n    *dst_ptr++ = *src++;\n    dst_ptr[1] = src[1];\n    dst_ptr[2] = src[2];\n    dst_ptr[3] = src[3];\n    dst_ptr[4] = src[4];\n    dst_ptr[5] = src[5];\n    dst_ptr[6] = src[6];\n    dst_ptr[7] = src[7];\n    dst_ptr[8] = src[8];\n    dst_ptr[9] = src[9];\n    dst_ptr[10] = src[10];\n    dst_ptr[11] = src[11];\n    dst_ptr[12] = src[12];\n    dst_ptr[13] = src[13];\n    dst_ptr[14] = src[14];\n    dst_ptr[15] = src[15];\n    dst_ptr += 16;\n    src += 16;\n    num_words--;\n  }\n  num_remaining_bytes = num_bytes - 16 * (num_bytes >> 6);\n  if (num_remaining_bytes > 15) {\n    do {\n      *dst_ptr++ = *src++;\n      dst_ptr[1] = src[1];\n      dst_ptr[2] = src[2];\n      dst_ptr[3] = src[3];\n      dst_ptr = dst_ptr + 4;\n      src = src + 4;\n      num_remaining_bytes -= 16;\n    } while (num_remaining_bytes > 15);\n  }\n  if (num_remaining_bytes != 0) {\n    src_ptr = src;\n    dst_ptr = dst;\n    if ((num_remaining_bytes & 1) != 0) {\n      src_ptr = (undefined4*)((int)src + 1);\n      dst_ptr = (undefined4*)((int)dst + 1);\n      *(byte*)dst = *(byte*)src;\n    }\n    if ((num_remaining_bytes & 2) != 0) {\n      *(ushort*)dst_ptr = *(ushort*)src_ptr;\n    }\n  }\n  return dst_ptr;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copy_memory_aligned_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_and_add_to_buffer_00080a68",
                "*puVar1": "buffer_start",
                "puVar1": "buffer_end"
            },
            "code": "void initialize_and_add_to_buffer_00080a68(void)\n{\n  undefined *buffer_start = PTR_DAT_00080a94;\n  initialize_array_with_zeroes_00081682(PTR_DAT_00080a94,PTR_s__00080a98);\n  add_to_buffer_00081d5c(buffer_start,DAT_00080aa0,DAT_00080a9c);\n  undefined *buffer_end = PTR_DAT_00080aa4;\n  buffer_end[4] = 0;\n  buffer_end[5] = 0;\n  buffer_end[6] = 6;\n  *(undefined2 *)(buffer_end + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_add_to_buffer_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "update_data_if_executed_0008165c",
                "param_1": "data",
                "param_2": "new_data",
                "param_3": "data_size",
                "iVar1": "execution_status",
                "reset_memory_0008160c": "reset_memory",
                "copy_string_00082994": "copy_string"
            },
            "code": "undefined4 *update_data_if_executed_0008165c(undefined4 *data, undefined4 new_data, undefined4 data_size) {\n  int execution_status = execute_and_update_data(data, data_size);\n  if (execution_status == 0) {\n    reset_memory(data);\n  }\n  else {\n    data[2] = data_size;\n    copy_string_00082994(*data, new_data);\n  }\n  return data;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "update_data_if_executed_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint16_t combine_values_000815f8(int value1, uint8_t value2) {\n  return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "search_uint_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "end",
                "puVar1": "result",
                "uVar2": "value",
                "pcVar3": "current",
                "pcVar4": "last",
                "bVar5": "found"
            },
            "code": "uint * search_uint_00084384(uint *data, char target, uint *end) {\n  uint *result;\n  uint value;\n  char *current;\n  char *last;\n  bool found;\n  if (((uint)data & 3) == 0) {\n    result = data;\n    if (end > (uint *)3) {\n      do {\n        value = *data ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        result = data;\n        if ((value + 0xfefefeff & ~value & 0x80808080) != 0) break;\n        end--;\n        result = data + 1;\n        data++;\n      } while (end > (uint *)3);\n    }\n    data = end;\n    last = (char *)((int)data - 1);\n    if ((data != (uint *)0) && (*result != target)) {\n      current = (char *)0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = current == last;\n        current++;\n        if (found) goto LAB_000843dc;\n      } while (*data != target);\n    }\n  }\n  else if (end == (uint *)0) {\n    result = (uint *)0;\n  }\n  else if (*data != target) {\n    result = (uint *)((int)data + 1);\n    end--;\n    do {\n      data = result;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (end == (uint *)0) goto LAB_000843dc;\n      result = (uint *)((int)data + 1);\n      end--;\n    } while (*data != target);\n  }\n  return data;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "search_uint_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_register_00081034",
                "param_1": "register_address",
                "param_2": "value",
                "param_3": "mask",
                "PTR_": "register_ptr",
                "DAT_": "mask"
            },
            "code": "void update_register_00081034(int register_address, uint32_t value, uint32_t DAT_) {\n    uint32_t *PTR_ = (uint32_t *)(register_address + 4);\n    *PTR_ = (*PTR_ & ~DAT_) | (value & DAT_);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_register_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_data_to_buffer_00083974",
                "param_1": "data",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_size",
                "iVar4": "buffer_start_address"
            },
            "code": "undefined4 add_data_to_buffer_00083974(undefined4 data) {\n  undefined *data_ptr;\n  undefined4 *buffer_ptr;\n  int buffer_size;\n  int buffer_start_address;\n  data_ptr = data_pointer;\n  if (buffer_size == 0) {\n    return data;\n  }\n  buffer_start_address = *(int *)buffer_start_address_ptr;\n  buffer_ptr = *(undefined4 **)(buffer_start_address + 0x148);\n  if (buffer_ptr == (undefined4 *)0x0) {\n    buffer_ptr = (undefined4 *)(buffer_start_address + 0x14c);\n    *(undefined4 **)(buffer_start_address + 0x148) = buffer_ptr;\n  }\n  buffer_size = buffer_ptr[1];\n  if (0x1f < buffer_size) {\n    if ((is_data_execution_allowed == 0) ||\n       (buffer_ptr = (undefined4 *)execute_function_with_data_pointer_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(undefined4 *)(buffer_start_address + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_size = 0;\n    *(undefined4 **)(buffer_start_address + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = buffer_size + 1;\n  buffer_ptr[buffer_size + 2] = data_ptr;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_data_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "zeroOrValue_00084700",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "dataPtr",
                "iVar2": "returnVal"
            },
            "code": "void zeroOrValue_00084700(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *dataPtr;\n  int returnVal;\n  dataPtr = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  returnVal = returnZero_000811c2(arg2, arg3, arg4);\n  if ((returnVal == -1) && (*(int *)dataPtr != 0)) {\n    *result = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "zeroOrValue_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714",
                "PTR_DAT_0008171c": "PTR_DATA",
                "undefined4": "int",
                "*(undefined4 *)": "*(int*)"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n  int* pointer_to_value = (int*)PTR_DAT_0008171c;\n  return *pointer_to_value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_if_not_both_zero_and_return_sum_00081ca8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero",
                "combine_numbers_and_return_sum_00081c54": "is_CY_eq_zero_00081c54 and is_ZR_eq_zero_00081c54"
            },
            "code": "bool check_if_not_both_zero_and_return_sum_00081ca8(void)\n{\n  bool is_CY_zero = is_CY_eq_zero_00081c54();\n  bool is_ZR_zero = is_ZR_eq_zero_00081c54();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_if_not_both_zero_and_return_sum_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "process_flag_00081318",
                "param_1": "flag_index",
                "param_2": "flag_value",
                "param_3": "param",
                "puVar1": "flag_data",
                "puVar2": "flag_status",
                "iVar3": "flag_check",
                "uVar4": "data_value",
                "iVar5": "data_ptr"
            },
            "code": "void process_flag_00081318(int flag_index, int flag_value, undefined4 param){\\n    undefined *flag_data = PTR_FLAG_DATA;\\n    undefined *flag_status = PTR_FLAG_STATUS;\\n    if (flag_data[flag_index * 0x1c + 0xc] != \"\\0\"){\\n        if ((flag_status[flag_index] & 0xf) == 5){\\n            process_data(flag_index, 1, param, 5, flag_index, flag_value, param);\\n        }\\n        flag_status[flag_index] = flag_status[flag_index] & 0xf | (byte)(flag_value << 4);\\n        int data_ptr = *(int *)(flag_data + flag_index * 0x1c);\\n        undefined4 data_value = *(undefined4 *)(flag_data + flag_index * 0x1c + 4);\\n        int flag_check = check_flag(data_ptr, data_value);\\n        if (flag_check == 0){\\n            if (flag_value != 0){\\n                *(undefined4 *)(data_ptr + 100) = data_value;\\n                return;\\n            }\\n            *(undefined4 *)(data_ptr + 0x60) = data_value;\\n            return;\\n        }\\n        set_flag_params(data_ptr, data_value, flag_value, 0, 1);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "process_flag_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "get_value_from_pointer": "get_value_from_pointer",
                "PTR_DAT_0008171c": "pointer_to_data",
                "FUN_00081714": "get_value_from_pointer_00081714"
            },
            "code": "int get_value_from_pointer_00081714() {\n    int *PTR_DAT_0008171c = PTR_DAT_0008171c;\n    return *PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_data_0008449c",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "flag",
                "zeroOrValue_00084700": "get_data_result"
            },
            "code": "void process_data_0008449c(undefined4 data, int data_info)\n{\n  int result;\n  ushort flag;\n  result = get_data_result(data, (int)*(short *)(data_info + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info + 0x50) = result;\n  }\n  *(ushort *)(data_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "param_5": "output",
                "uVar1": "product",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008477c(uint input1, int input2, uint32_t multiplier1, uint32_t multiplier2, int *output) {\n  uint32_t product = FUNC_000847e0() * ((uint64_t)multiplier2 << 32 | multiplier1);\n  uint32_t difference1 = input1 - product;\n  uint32_t difference2 = input2 - (product >> 32) - (input1 < product);\n  output[0] = difference1;\n  output[1] = difference2;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "flag_processed",
                "uVar2": "data_index",
                "cVar3": "data_char",
                "iVar4": "process_result",
                "bVar5": "data_byte"
            },
            "code": "int process_data_000801b0(int **data)\n{\n    bool flag_processed;\n    undefined data_index;\n    char data_char;\n    int process_result;\n    byte data_byte;\n    if (1 < *(byte *)((int)data + 6)) {\n        process_flag_00081318(*(byte *)((int)data + 6),0);\n    }\n    flag_processed = false;\n    *(undefined *)((int)data + 0x49) = 0;\n    if (*(byte *)((int)data + 5) < 4) {\n        while (process_result = (**(code **)(**data + 8))(), process_result != 0) {\n            data_byte = *(byte *)((int)data + 0x49);\n            data_index = (**(code **)(**data + 0xc))();\n            data_char = *(char *)((int)data + 0x49);\n            *(undefined *)((int)data + data_byte + 9) = data_index;\n            data_byte = data_char + 1;\n            *(byte *)((int)data + 0x49) = data_byte;\n            if (0x3f < data_byte) {\n                flag_processed = true;\n            }\n        }\n    }\n    *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n    if (flag_processed) {\n        data_char = -3;\n        *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    }\n    else {\n        data_char = *(char *)((int)data + 0x49);\n    }\n    return (int)data_char;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined new_value)\n{\n  uint new_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "ptr1"
            },
            "code": "void initialize_params_000814e4(int* params, int param2, char param3, int param4, int param5, int param6)\n{\n    int* ptr1;\n    params[1] = 0;\n    params[2] = 1000;\n    ptr1 = PTR_PTR_FUN_00081454_1_00081504;\n    params[6] = param2;\n    *params = ptr1;\n    *(char*)(params + 7) = param3;\n    params[4] = param5;\n    params[8] = param4;\n    params[5] = param6;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_params_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "assignValuesToPointerArray_00080d54",
                "param_1": "pointerArray",
                "param_2": "valueToAssign",
                "param_3": "bitmask",
                "bVar1": "isBitmaskNegative",
                "PTR_": "pointerArray",
                "DAT_": "valueToAssign"
            },
            "code": "void assignValuesToPointerArray_00080d54(int* PTR_, int DAT_, uint32_t bitmask) {\n    bool isBitmaskNegative = (int)(bitmask << 0x1f) < 0;\n    PTR_[17] = DAT_;\n    if (isBitmaskNegative) {\n        PTR_[25] = DAT_;\n    }\n    if (!isBitmaskNegative) {\n        PTR_[24] = DAT_;\n    }\n    bool isBitmaskBitSet = (bitmask & 10) != 0;\n    if (isBitmaskBitSet) {\n        PTR_[8] = DAT_;\n    }\n    if (!isBitmaskBitSet) {\n        PTR_[9] = DAT_;\n    }\n    if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n        PTR_[32] = DAT_;\n    }\n    PTR_[5] = DAT_;\n    *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "assignValuesToPointerArray_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "lsb"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint lsb = checksum & 1;\n      checksum = checksum >> 1;\n      if (lsb != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index = bit_index - 1;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = process_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_and_check_error_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_with_padding_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)search_uint_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_or_default_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_or_default_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082ac0",
                "FUN_00082a50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "allocate_memory_block_00081e04",
                "param_1": "size",
                "*DAT_00081e10": "memory_block"
            },
            "code": "void allocate_*allocate_memory_block_00081e04(uint32_t **allocate_memory_block_00081e04, uint32_t size){\n    allocateMemoryBlock_00083d9c(**allocate_memory_block_00081e04, size);\n    return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "calculate_difference_or_default_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "default_value",
                "param_4": "default_value_2",
                "iVar1": "difference"
            },
            "code": "int calculate_difference_or_default_00084750(int input_1, int input_2, int default_value, int default_value_2)\n{\n    if (default_value_2 == 0 && default_value == 0)\n    {\n        if (input_2 != 0 || input_1 != 0)\n        {\n            input_1 = -1;\n        }\n        return input_1;\n    }\n    int difference = calculate_difference_000847ac();\n    return difference;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "calculate_difference_or_default_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_and_execute_device_00080ae4",
                "puVar1": "device_data_ptr",
                "puVar2": "device_functions_ptr",
                "iVar3": "device_data_ptr",
                "iVar4": "device_data_ptr + 0xf8",
                "iVar5": "device_data_ptr + 0xfc",
                "iVar6": "device_data_ptr + 0x100",
                "iVar7": "i",
                "iVar8": "i + 1",
                "DAT_00080be8": "device_data_ptr",
                "DAT_00080bec": "device_functions_ptr",
                "DAT_00080bf0": "device_data_ptr",
                "DAT_00080bf4": "device_data_ptr",
                "DAT_00080bf8": "device_data_ptr + 0xf8",
                "DAT_00080bfc": "device_data_ptr + 0xfc",
                "DAT_00080c00": "device_data_ptr + 0x100",
                "DAT_00080c04": "device_functions_ptr",
                "DAT_00080c08": "device_functions_ptr + 4"
            },
            "code": "void initialize_and_execute_device_00080ae4() {\n  uint *device_data = DAT_00080be8;\n  initialize_device();\n  undefined4 *device_functions = DAT_00080bec;\n  uint device_data_value = *device_data / 1000 - 1;\n  *(undefined *)(DAT_00080be8 + 0x23) = 0xf0;\n  device_functions[2] = 0;\n  *device_functions = 7;\n  execute_device_functions();\n  for (int i = 0; i < 0x4f; i++) {\n    process_device_flag(i, 0);\n  }\n  *(undefined4 *)(DAT_00080be8 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(DAT_00080bf8) = 0xffffffff;\n  *(undefined4 *)(DAT_00080bfc) = 0xffffffff;\n  *(undefined4 *)(DAT_00080c00) = 0xffffffff;\n  handle_device_data(device_data_value, 1, 0x300, 0);\n  process_device_flag(0, 1);\n  handle_device_data(device_data_value, 1, 0xc00, 0);\n  handle_device_data(device_data_value, 1, 0x3000, 0);\n  handle_device_data(DAT_00080bfc, 2, 0x30, 0);\n  handle_device_data(DAT_00080bf8, 1, 0xc00, 0);\n  handle_device_data(device_data_value, 1, 3, 0);\n  handle_device_data(DAT_00080bf8, 1, 0xc000, 0);\n  check_character(0x25);\n  calculate_device_value(device_functions[1], device_data_value, device_functions[0], 0xc);\n  update_device_parameter(device_functions[1], 0, 0x300000, 1);\n  update_device_register(device_functions[1], 0, 0);\n  set_device_parameter(device_functions[1], 0xffffffff);\n  set_device_default_value(device_functions[1]);\n}",
            "called": [
                "FUN_00081034",
                "FUN_00080f9c",
                "FUN_00080da0",
                "FUN_00081042",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00081d7c",
                "FUN_00081066"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_device_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_buffer_00081d5c",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_index",
                "iVar3": "buffer_offset",
                "uVar4": "buffer_bitmask"
            },
            "code": "uint32_t add_to_buffer_00081d5c(uint32_t data, uint32_t *buffer, uint32_t buffer_size)\n{\n    uint32_t *buffer_ptr;\n    uint32_t buffer_index;\n    uint32_t buffer_bitmask;\n    int32_t buffer_offset;\n\n    buffer_offset = *(int32_t *)PTR_DAT_0008396c;\n    buffer_ptr = *(uint32_t **)(buffer_offset + 0x148);\n    if (buffer_ptr == (uint32_t *)0x0) {\n        buffer_ptr = (uint32_t *)(buffer_offset + 0x14c);\n        *(uint32_t **)(buffer_offset + 0x148) = buffer_ptr;\n    }\n    buffer_index = buffer_ptr[1];\n    if (buffer_index > 0x1f) {\n        if ((DAT_00083970 == 0) ||\n            (buffer_ptr = (uint32_t *)FUN_00081df4(400), buffer_ptr == (uint32_t *)0x0)) {\n            return 0xffffffff;\n        }\n        *buffer_ptr = *(uint32_t *)(buffer_offset + 0x148);\n        buffer_ptr[1] = 0;\n        buffer_index = 0;\n        *(uint32_t **)(buffer_offset + 0x148) = buffer_ptr;\n        buffer_ptr[0x62] = 0;\n        buffer_ptr[99] = 0;\n    }\n    buffer_bitmask = 1 << (buffer_index & 0xff);\n    buffer_ptr[buffer_index + 0x22] = data;\n    buffer_ptr[0x62] |= buffer_bitmask;\n    buffer_ptr[buffer_index + 0x42] = buffer_size;\n    buffer_ptr[99] |= buffer_bitmask;\n    buffer_ptr[1] = buffer_index + 1;\n    buffer_ptr[buffer_index + 2] = buffer_size;\n    return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "calculateSumAndReturnIfValid_00082970",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "dataPointer",
                "iVar2": "sum"
            },
            "code": "void calculateSumAndReturnIfValid_00082970(int *result, undefined4 input)\n{\n  undefined *dataPointer = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int sum = calculateSum(input);\n  if ((sum == -1) && (*(int *)dataPointer != 0)) {\n    *result = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "calculateSumAndReturnIfValid_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be",
                "undefined4": "int"
            },
            "code": "int return_one_000811be(void)\n{\n  int one = 1;\n  return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "combine_numbers_and_return_sum_00081c54",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "void combine_numbers_and_return_sum_00081c54(int num1, int num2)\n{\n    combine_two_numbers_00081c5c(num2, num1);\n    return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "combine_numbers_and_return_sum_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "execute_and_update_data_0008163a",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "iVar1": "result"
            },
            "code": "int execute_and_update_data_0008163a(int *data_ptr) {\n    int result = 0;\n    if (*data_ptr == 0 || data_ptr[1] < data_ptr[2]) {\n        result = execute_and_update_data_0008163a_00081622(data_ptr);\n        if (result == 0) {\n            return 0;\n        }\n        if (data_ptr[2] == 0) {\n            *(char *)*data_ptr = 0;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "execute_and_update_data_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "execute_function_with_data_000825a0",
                "param_1": "param1",
                "param_2": "param2",
                "FUNC_000825b0": "call_function",
                "*DAT_000825ac": "data"
            },
            "code": "void execute_function_with_*execute_function_with_data_000825a0(int* *execute_function_with_data_000825a0, int param1, int param2) {\n  call_function(**execute_function_with_data_000825a0, param1, param2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "write_value_to_buffer_000815d4",
                "param_1": "buffer",
                "param_2": "value",
                "initialize_params_000814e4": "initialize_params",
                "*param_1": "*buffer",
                "PTR_PTR_write_value_to_buffer_00081454_1_000815f4": "write_value_to_buffer_1",
                "param_1[9]": "buffer[9]"
            },
            "code": "undefined4 * write_value_to_buffer_000815d4(undefined4 *buffer, undefined4 value){\n                        initialize_params_000814e4();\n                        *buffer = PTR_PTR_write_value_to_buffer_000815d4_00081454_1_000815f4;\n                        buffer[9] = value;\n                        return buffer;\n                     }",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "write_value_to_buffer_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculateSumAndReturnIfValid_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculateSumAndReturnIfValid_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocateMemoryBlock_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00081df4",
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "data",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void process_data_00080164(int **data){\n  undefined *data_ptr;\n  int status;\n  \n  data_ptr = data[1];\n  *data = (int *)data[1];\n  (**(code **)(*(int *)data_ptr + 0x18))(data_ptr);\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_00080164_00081210(*(byte *)((int)data + 6),1);\n    process_flag_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    status = (**(code **)(*data)[3])();\n  } while (-1 < status);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_dat_000811cc",
                "param_1": "bytes",
                "param_2": "num_bytes",
                "param_3": "dat_size",
                "iVar1": "i",
                "DAT_000811ec": "dat_ptr"
            },
            "code": "uint copy_bytes_to_dat_000811cc(uint8_t* bytes, int num_bytes, uint dat_size)\n{\n  int i;\n  uint DAT_000811ec = DAT_000811ec;\n  for (i = 0; i < num_bytes; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(bytes + i);\n  }\n  return dat_size & ~((int)dat_size >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_dat_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "process_param_000846dc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "PTR_DAT_000846fc": "data_pointer"
            },
            "code": "void process_param_000846dc(int *output, undefined4 input) {\n  undefined *PTR_DAT_000846fc;\n  int result;\n  PTR_DAT_000846fc = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  result = calculate_result(input);\n  if ((result == -1) && (*(int *)PTR_DAT_000846fc != 0)) {\n    *output = *(int *)PTR_DAT_000846fc;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_param_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "input_num",
                "iVar1": "leading_zeroes",
                "uVar2": "result",
                "iVar3": "temp",
                "uVar4": "mask",
                "count_leading_zeroes": "count_leading_zeroes",
                "0U": "zero",
                "0x7fffffff": "max_int",
                "0x80000000": "min_int"
            },
            "code": "uint calculate_00081894(uint num)\n{\n  uint count = 0;\n  while (num >> 31 == 0)\n  {\n    count++;\n    num <<= 1;\n  }\n  return count;\n}\n\nuint calculate_00081894(uint input_num)\n{\n  uint leading_zeroes = 0;\n  uint result = 0;\n  uint temp = 0;\n  uint mask = 0;\n  uint constant = 0x4a800000;\n\n  if (input_num == 0)\n  {\n    return 0;\n  }\n  leading_zeroes = calculate_00081894(input_num);\n  mask = leading_zeroes - 8;\n  temp = mask * -0x800000 + constant;\n\n  if (leading_zeroes > 7)\n  {\n    result = 0 << (mask & 0xff);\n    result = temp + (input_num << (mask & 0xff)) + (0U >> (0x20 - mask & 0xff)) + (uint)(0x7fffffff < result);\n    if (result == 0x80000000)\n    {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n\n  result = input_num << (leading_zeroes + 0x18U & 0xff);\n  result = temp + ((input_num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)result >> 0x1f));\n  if ((result & 0x7fffffff) == 0)\n  {\n    result = result & ~(result >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_000845bc",
                "param_1": "memory",
                "param_2": "byte",
                "param_3": "memory_size",
                "*param_1": "*memory",
                "*param_2": "*byte"
            },
            "code": "int write_byte_to_memory_000845bc(uint8_t *memory, uint8_t byte, uint memory_size) {\n                      if (memory == NULL) {\n                          return 0;\n                      }\n                      if (memory_size < 256) {\n                          *memory = byte;\n                          return 1;\n                      }\n                      *memory = 0x8a;\n                      return -1;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "write_to_memory_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "repeated_value",
                "uVar4": "remaining_size",
                "bVar5": "is_size_zero"
            },
            "code": "void write_to_memory_00082504(uint32_t *memory, uint8_t value, uint32_t size) {\n  uint32_t *current_word = memory;\n  uint32_t remaining_size = size;\n  uint32_t repeated_value = (value << 24) | (value << 16) | (value << 8) | value;\n\n  // Handle unaligned memory address\n  if (((uint32_t)memory & 3) != 0) {\n    if (size == 0) {\n      return;\n    }\n    *current_word = (uint8_t)(*current_word & 0xFFFFFF00) | value;\n    remaining_size--;\n    current_word++;\n  }\n\n  // Write 16 bytes at a time\n  while (remaining_size >= 16) {\n    *current_word++ = repeated_value;\n    *current_word++ = repeated_value;\n    *current_word++ = repeated_value;\n    *current_word++ = repeated_value;\n    remaining_size -= 16;\n  }\n\n  // Write remaining bytes\n  while (remaining_size > 0) {\n    *current_word = (uint8_t)(*current_word & 0xFFFFFF00) | value;\n    remaining_size--;\n    current_word++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "write_to_memory_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_flag_set_and_return_value_000800f4",
                "param_1": "input_value",
                "*PTR_DAT_0008010c": "*flag_pointer",
                "DAT_00080110": "flag_value",
                "DAT_00080114": "flag_return_value"
            },
            "code": "int check_if_flag_set_and_return_value_000800f4(int input_value) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      input_value = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return input_value;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_flag_set_and_return_value_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_and_check_error_0008378c",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result1",
                "iVar2": "result2",
                "local_488": "local_buffer",
                "local_480": "local_variable1",
                "local_47c": "local_variable2",
                "local_47a": "local_variable3",
                "local_478": "local_variable4",
                "local_474": "local_variable5",
                "local_470": "local_variable6",
                "local_46c": "local_variable7",
                "local_464": "local_variable8",
                "local_424": "local_variable9",
                "auStack_420": "local_stack"
            },
            "code": "int process_data_and_check_error_0008378c(int input1, int input2)\n{\n    int result1;\n    int result2;\n    undefined *local_buffer[2];\n    undefined4 local_variable1;\n    ushort local_variable2;\n    undefined2 local_variable3;\n    undefined *local_variable4;\n    undefined4 local_variable5;\n    undefined4 local_variable6;\n    undefined4 local_variable7;\n    undefined4 local_variable8;\n    undefined4 local_variable9;\n    undefined local_stack[1024];\n    \n    local_variable9 = *(undefined4 *)(input2 + 100);\n    local_variable7 = *(undefined4 *)(input2 + 0x1c);\n    local_variable3 = *(undefined2 *)(input2 + 0xe);\n    local_variable8 = *(undefined4 *)(input2 + 0x24);\n    local_buffer[0] = local_stack;\n    local_variable2 = *(ushort *)(input2 + 0xc) & 0xfffd;\n    local_variable1 = 0x400;\n    local_variable5 = 0x400;\n    local_variable6 = 0;\n    local_variable4 = local_buffer[0];\n    result1 = process_data(input1, local_buffer);\n    if ((-1 < result1) && (result2 = process_data_00083adc(input1, local_buffer), result2 != 0)) {\n        result1 = -1;\n    }\n    if ((int)((uint)local_variable2 << 0x19) < 0) {\n        *(ushort *)(input2 + 0xc) = *(ushort *)(input2 + 0xc) | 0x40;\n    }\n    return result1;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_and_check_error_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data_buffer",
                "param_2": "data_info",
                "piVar1": "data_ptr_1",
                "iVar2": "data_var_1",
                "uVar3": "data_var_2",
                "uVar4": "data_var_3",
                "iVar5": "data_var_4",
                "pcVar6": "data_func_ptr_1",
                "unaff_r4": "return_val",
                "iVar7": "data_var_5"
            },
            "code": "undefined4 process_data_00083adc(int *data_buffer,int *data_info)\n{\n  int *data_ptr_1;\n  int data_var_1;\n  ushort data_var_2;\n  uint data_var_3;\n  int data_var_4;\n  code *data_func_ptr_1;\n  undefined4 return_val;\n  int data_var_5;\n  \n  if ((data_buffer != NULL) && (data_buffer[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(data_info + 3) == 0) {\n    return 0;\n  }\n  data_var_2 = *(ushort *)(data_info + 3);\n  if ((int)((uint)data_var_2 << 0x1c) < 0) {\n    data_var_5 = data_info[4];\n    if (data_var_5 == 0) {\n      return 0;\n    }\n    data_var_1 = *data_info;\n    if ((data_var_2 & 3) == 0) {\n      data_var_4 = data_info[5];\n    }\n    else {\n      data_var_4 = 0;\n    }\n    *data_info = data_var_5;\n    data_var_1 = data_var_1 - data_var_5;\n    data_info[2] = data_var_4;\n    do {\n      if (data_var_1 < 1) {\n        return 0;\n      }\n      data_var_4 = (*(code *)data_info[9])(data_buffer,data_info[7],data_var_5,data_var_1,return_val);\n      data_var_1 = data_var_1 - data_var_4;\n      data_var_5 = data_var_5 + data_var_4;\n    } while (0 < data_var_4);\n    *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(data_info + 3) = data_var_2 | 0x800;\n  if ((data_info[1] < 1) && (data_info[0xf] < 1)) {\n    return 0;\n  }\n  data_func_ptr_1 = (code *)data_info[10];\n  if (data_func_ptr_1 == NULL) {\n    return 0;\n  }\n  data_var_3 = (uint)(data_var_2 | 0x800);\n  data_var_5 = *data_buffer;\n  *data_buffer = 0;\n  if ((data_var_2 & 0x1000) == 0) {\n    data_var_1 = (*data_func_ptr_1)(data_buffer,data_info[7],data_var_3 & 0x1000,1);\n    if ((data_var_1 == -1) && (data_var_4 = *data_buffer, data_var_4 != 0)) {\n      if ((data_var_4 == 0x1d) || (data_var_4 == 0x16)) {\n        *data_buffer = data_var_5;\n        return 0;\n      }\n      *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x40;\n      return 0xffffffff;\n    }\n    data_var_2 = *(ushort *)(data_info + 3);\n    data_func_ptr_1 = (code *)data_info[10];\n  }\n  else {\n    data_var_1 = data_info[0x14];\n  }\n  if (((int)(data_var_3 << 0x1d) < 0) && (data_var_1 = data_var_1 - data_info[1], data_info[0xc] != 0)) {\n    data_var_1 = data_var_1 - data_info[0xf];\n  }\n  data_var_1 = (*data_func_ptr_1)(data_buffer,data_info[7],data_var_1,0);\n  if (data_var_1 == -1) {\n    data_var_4 = *data_buffer;\n    if (data_var_4 != 0) {\n      if ((data_var_4 != 0x1d) && (data_var_4 != 0x16)) {\n        *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) & 0xf7ff;\n      *data_info = data_info[4];\n      data_info[1] = 0;\n      goto LAB_00083a00;\n    }\n    data_var_2 = *(ushort *)(data_info + 3) & 0xf7ff;\n    data_info[1] = 0;\n    *(ushort *)(data_info + 3) = data_var_2;\n    *data_info = data_info[4];\n  }\n  else {\n    data_var_2 = *(ushort *)(data_info + 3) & 0xf7ff;\n    *data_info = data_info[4];\n    *(ushort *)(data_info + 3) = data_var_2;\n    data_info[1] = 0;\n  }\n  if ((int)((uint)data_var_2 << 0x13) < 0) {\n    data_info[0x14] = data_var_1;\n  }\nLAB_00083a00:\n  data_ptr_1 = (int *)data_info[0xc];\n  *data_buffer = data_var_5;\n  if (data_ptr_1 == NULL) {\n    return 0;\n  }\n  if (data_ptr_1 != data_info + 0x10) {\n    allocateMemoryBlock(data_buffer);\n  }\n  data_info[0xc] = 0;\n  return 0;\n}\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00082438(piVar9,param_2);\n      }\n      allocateMemoryBlock_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocateMemoryBlock_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "<original_function_name>": "check_for_value",
                "param_1": "value",
                "iVar1": "index",
                "is_negative": "is_negative",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "*(byte *)(param_1 + 10)": "*(byte *)(value + 10)",
                "*(short *)(param_1 + 0x54)": "*(short *)(value + 0x54)",
                "FUN_000803d4": "check_for_value_000803d4"
            },
            "code": "int check_for_value_000803d4(int value){\n                      int index = 0;\n                      int is_negative = ((uint)*(byte *)(value + 10) << 0x18) < 0;\n                      if (is_negative) {\n                        *(short *)(value + 0x54) += 1;\n                        return 0xfb;\n                      }\n                      while (index != 8) {\n                        if (PTR_DAT_0008040c[index] == *(byte *)(value + 10)) {\n                          return 0;\n                        }\n                        index += 1;\n                      }\n                      *(short *)(value + 0x54) += 1;\n                      return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_for_value_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "check_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "value",
                "piVar3": "ptr",
                "iVar4": "check_result"
            },
            "code": "int check_data_0008043e(int **data)\n{\n  char result = 0;\n  char num_values = *(byte *)((int)data + 5);\n  uint value = 0;\n  int *ptr = (int *)get_value_from_pointer_thunk_00081714();\n  if (num_values < 4) {\n    value = (**(code **)(**data + 8))() & 0xff;\n  }\n  if (data[0x17] < ptr) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) += 1;\n  }\n  else if (7 < value) {\n    process_data(data);\n    int check_result = check_for_value(data);\n    if (check_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        process_values(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)check_result;\n    }\n  }\n  return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_memory_0008160c",
                "param_1": "memory",
                "allocate_memory_block_00081e04": "allocate_memory_block"
            },
            "code": "void reset_memory_0008160c(int *memory){\n  if (*memory != 0) {\n    allocate_memory_block();\n  }\n  *memory = 0;\n  memory[2] = 0;\n  memory[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_memory_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "<original_function_name>": "check_character",
                "param_1": "character",
                "uVar1": "bit_mask",
                "is_valid_character": "is_valid_character",
                "FUN_00080e18": "check_character_00080e18"
            },
            "code": "int check_character_00080e18(uint character){\n                      uint bit_mask;\n                      int is_valid_character = 0;\n                      \n                      if (character < 45) {\n                        if (character < 32) {\n                          bit_mask = 1 << (character & 0xff);\n                          if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n                            *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n                          }\n                        }\n                        else {\n                          bit_mask = 1 << (character - 0x20 & 0xff);\n                          if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n                            *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n                          }\n                        }\n                      }\n                      else {\n                        is_valid_character = 1;\n                      }\n                      return is_valid_character;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_character_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "returnZero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_value_from_dat_a0_00084298",
                "*DAT_000842a0": "ptr_to_value"
            },
            "code": "int get_value_from_dat_a0_00084298(void)\n{\n  int* *DAT_000842a0 = DAT_000842a0;\n  return **DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_value_from_dat_a0_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "value"
            },
            "code": "void set_default_value_00081066(int value) {\n    *(undefined4 *)(value + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_default_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "calculate_value_00081cd0",
                "param_1": "input",
                "uVar1": "shift_by_eight",
                "uVar2": "result"
            },
            "code": "uint calculate_value_00081cd0(uint input)\n{\n  uint shift_by_one = input << 1;\n  if (shift_by_one < 0x7f000000) {\n    return 0;\n  }\n  uint shift_by_eight = shift_by_one >> 0x18;\n  uint result = 0x9e - shift_by_eight;\n  if (shift_by_eight < 0x9f && result != 0) {\n    uint shifted_input = (input << 8 | 0x80000000) >> (result & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shifted_input = -shifted_input;\n    }\n    return shifted_input;\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_value_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "execute_function_with_data_pointer_00081df4",
                "param_1": "parameter",
                "FUNC_00081e14": "call_function_with_data_pointer",
                "*DAT_00081e00": "data_pointer"
            },
            "code": "void execute_function_with_*execute_function_with_data_pointer_00081df4(void* *execute_function_with_data_pointer_00081df4, int parameter){\n  call_function_with_*execute_function_with_data_pointer_00081df4(**execute_function_with_data_pointer_00081df4, parameter);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_pointer_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_values_00080410",
                "param_1": "base_addr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "combined_value",
                "iVar2": "address",
                "bVar3": "index",
                "uVar4": "byte_val",
                "iVar5": "value_addr"
            },
            "code": "void process_values_00080410(int base_addr, int value1, int value2, int value3)\n{\n    int index = 0;\n    while(true)\n    {\n        uint8_t byte_val = (uint8_t)index;\n        index++;\n        if(*(uint8_t *)(base_addr + 0xb) >> 1 <= byte_val) break;\n        int address = (byte_val * 2 + 3 & 0xff) + base_addr;\n        int value_addr = *(int *)(base_addr + 0x4c);\n        uint16_t combined_value = combine_values(*(uint8_t *)(address + 9), *(uint8_t *)(address + 10), address, *(uint8_t *)(base_addr + 0xb), value3);\n        *(uint16_t *)(value_addr + byte_val * 2) = combined_value;\n    }\n    return;\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_values_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "handle_data_00080da0",
                "param_1": "handle",
                "param_2": "data_type",
                "param_3": "data",
                "param_4": "data_size",
                "bVar1": "is_negative"
            },
            "code": "int handle_data_00080da0(int handle, int data_type, int data, unsigned int data_size) {\n    bool is_negative = (int)(data_size << 0x1f) < 0;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*PTR_HANDLE_DATA1)(handle, data_type, data);\n            *(int *)(handle + 0x44) = data;\n            if (is_negative) {\n                *(int *)(handle + 100) = data;\n            }\n            if (!is_negative) {\n                *(int *)(handle + 0x60) = data;\n            }\n            break;\n        case 3:\n            (*PTR_HANDLE_DATA2)(handle, data, data_size, PTR_HANDLE_DATA2, handle);\n            break;\n        case 4:\n        case 5:\n            (*PTR_HANDLE_DATA3)(handle, data, data_type == 5, (data_size << 0x1d) >> 0x1f, data & 1, data_type, data);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "handle_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "calculate_checksum_and_update_data_00080258",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "offset",
                "param_4": "initial_value",
                "bVar1": "current_offset",
                "uVar4": "checksum_length",
                "uVar2": "checksum",
                "iVar3": "result"
            },
            "code": "void calculate_checksum_and_update_data_00080258(int **data, int data_length, int offset, int initial_value) {\n    byte current_offset = *(byte *)((int)data + offset);\n    uint checksum_length = (uint)current_offset;\n    uint checksum = calculate_checksum_0008021c(data, checksum_length, data_length, offset, initial_value);\n    *(char *)((int)data + checksum_length + 9) = (char)((ushort)checksum >> 8);\n    *(char *)((int)data + ((checksum_length + 1) & 0xff) + 9) = (char)checksum;\n    *(byte *)((int)data + offset) = current_offset + 2;\n    if (data[0][5] < 4) {\n        (**(code **)(**data + 4))(*data, (int)data + 9, *(undefined *)((int)data + offset));\n    }\n    if (data[0][6] > 1) {\n        process_flag_00081318(data[0][6], 1);\n    }\n    if (data[0][5] < 4) {\n        int result;\n        do {\n            result = (**(code **)(**data + 0xc))();\n        } while (result >= 0);\n    }\n    *(undefined *)((int)data + offset) = 0;\n    int value = get_value_from_pointer_thunk_00081714();\n    data[0x17] = (int *)(value + (uint)*(ushort *)((int)data + 0x56));\n    *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n    return;\n}",
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "calculate_checksum_and_update_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "execute_and_update_data_00081622",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "iVar1": "result"
            },
            "code": "int execute_and_update_data_00081622(int *data_ptr, int data_size, undefined4 param_3, undefined4 param_4) {\n    int result = execute_function_with_data_000825a0(*data_ptr, data_size + 1, param_3, param_4, param_4);\n    if (result != 0) {\n        *data_ptr = result;\n        data_ptr[1] = data_size;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "execute_and_update_data_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "n",
                "puVar2": "d",
                "puVar3": "s",
                "puVar4": "d",
                "puVar6": "temp2",
                "iVar1": "i",
                "uVar5": "remaining",
                "uVar7": "remaining"
            },
            "code": "void reverse_copy_00082438(void *dest, void *src, size_t n) {\n  if (dest < src && (char*)dest + n > (char*)src) {\n    char *d = (char*)dest + n;\n    char *s = (char*)src + n;\n    while (n--) {\n      *(--d) = *(--s);\n    }\n  } else if (n >= 16 && ((uintptr_t)src | (uintptr_t)dest) % sizeof(uint32_t) == 0) {\n    uint32_t *d = (uint32_t*)dest;\n    uint32_t *s = (uint32_t*)src;\n    size_t i;\n    for (i = 0; i <= (n - 16) / sizeof(uint32_t); i++) {\n      d[i] = s[i];\n    }\n    size_t remaining = n - (i - 1) * sizeof(uint32_t);\n    if (remaining >= sizeof(uint16_t)) {\n      *(uint16_t*)&d[i] = *(uint16_t*)&s[i];\n      i += sizeof(uint16_t);\n      remaining -= sizeof(uint16_t);\n    }\n    if (remaining >= sizeof(uint8_t)) {\n      *(uint8_t*)&d[i] = *(uint8_t*)&s[i];\n    }\n  } else {\n    char *d = (char*)dest;\n    char *s = (char*)src;\n    while (n--) {\n      *(d++) = *(s++);\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_data_00081508",
                "param_1": "data_address",
                "param_2": "divisor",
                "param_3": "value",
                "puVar1": "dividend_pointer",
                "iVar2": "integer_variable",
                "puVar3": "data_pointer"
            },
            "code": "void initialize_data_00081508(int data_address, uint divisor, undefined4 value)\n{\n    uint *dividend_pointer;\n    int integer_variable;\n    undefined4 *data_pointer;\n\n    check_character(*(undefined4 *)(data_address + 0x20));\n    data_pointer = *(undefined4 **)(data_address + 0x18);\n    data_pointer[72] = 0x202;\n    *data_pointer = 0xac;\n    dividend_pointer = PTR_DAT_00081570;\n    data_pointer[1] = value;\n    data_pointer[8] = *dividend_pointer / divisor >> 4;\n    data_pointer[3] = -1;\n    data_pointer[2] = 0x61;\n    *(int *)(PTR_DAT_00081574 + ((uint)(int)(char)*(byte *)(data_address + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(data_address + 0x1c) & 0x1f);\n    integer_variable = *(int *)(data_address + 0x10);\n    *(undefined4 *)(integer_variable + 0x84) = 0;\n    *(undefined4 *)(integer_variable + 0x80) = 0;\n    integer_variable = *(int *)(data_address + 0x14);\n    *(undefined4 *)(integer_variable + 0x84) = 0;\n    *(undefined4 *)(integer_variable + 0x80) = 0;\n    *data_pointer = 0x50;\n    return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "*param_1": "*data_out",
                "*param_2": "*data_in",
                "uVar1": "temp_var_1",
                "iVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "DAT_000838c8": "PTR_DAT_000838c8",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "allocateMemoryBlock_00083d9c": "allocate_memory_block",
                "set_permissions_and_process_param_000842a4": "set_permissions_and_process_param",
                "uVar5": "temp_var_5"
            },
            "code": "int process_data_00083808(uint32_t* data_out, int* data_in) {\n  uint32_t uVar1;\n  int iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar4 = *(uint16_t *)(data_in + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int)(uVar3 << 0x1c) < 0) {\n    iVar2 = data_in[4];\n  }\n  else {\n    if (-1 < (int)(uVar3 << 0x1b)) {\n      *data_out = 9;\n      *(uint16_t *)(data_in + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int)(uVar3 << 0x1d) < 0) {\n      if ((int *)data_in[0xc] != (int *)0x0) {\n        if ((int *)data_in[0xc] != data_in + 0x10) {\n          allocate_memory_block(data_out);\n          uVar4 = *(uint16_t *)(data_in + 3);\n        }\n        data_in[0xc] = 0;\n      }\n      iVar2 = data_in[4];\n      uVar4 = uVar4 & 0xffdb;\n      *data_in = iVar2;\n      data_in[1] = 0;\n    }\n    else {\n      iVar2 = data_in[4];\n    }\n    *(uint16_t *)(data_in + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    set_permissions_and_process_param(data_out, data_in);\n    uVar3 = (uint32_t)*(uint16_t *)(data_in + 3);\n    iVar2 = data_in[4];\n  }\n  uint32_t uVar5 = uVar3 & 1;\n  if (uVar5 == 0) {\n    if (-1 < (int)(uVar3 << 0x1e)) {\n      uVar5 = data_in[5];\n    }\n    data_in[2] = uVar5;\n  }\n  else {\n    data_in[6] = -data_in[5];\n    data_in[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int)((uint32_t)*(uint16_t *)(data_in + 3) << 0x18) < 0)) {\n    *(uint16_t *)(data_in + 3) = *(uint16_t *)(data_in + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "address_of_bit_to_set",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_0008105c(int base_address, uint8_t bit_position) {\n  int* address_of_bit_to_set = (int*)(base_address + 0x14);\n  int bit_mask = 1 << (bit_position & 0xff);\n  *address_of_bit_to_set = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_value",
                "param_4": "result_ptr",
                "uVar1": "function_result",
                "iVar2": "function_status",
                "pcVar3": "function_ptr",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008456c(undefined4 *data_ptr, int data_size, undefined4 data_value, undefined4 *result_ptr)\n{\n  undefined4 function_result;\n  int function_status;\n  code *function_ptr;\n  undefined stack_buffer[12];\n  \n  if (data_size == 0) {\n    function_ptr = *(code **)PTR_DAT_000845b8;\n    function_result = get_data_00084290();\n    function_status = (*function_ptr)(data_ptr, stack_buffer, 0, function_result, result_ptr);\n  }\n  else {\n    function_ptr = *(code **)PTR_DAT_000845b8;\n    function_result = get_data_00084290();\n    function_status = (*function_ptr)(data_ptr, data_size, data_value, function_result, result_ptr);\n  }\n  if (function_status == -1) {\n    *result_ptr = 0;\n    *data_ptr = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "<original_function_name>": "FUN_000811b4",
                "param_1": "address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(ptr_address + 1)",
                "0x2000": "new_permissions",
                "FUN_000811b4": "set_memory_permissions_000811b4"
            },
            "code": "void set_memory_permissions_000811b4(int* address, int permissions){\n                      int* ptr_address = address;\n                      int new_permissions = 0x2000;\n                      *(ptr_address + 1) = new_permissions;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_dat_value_to_0x8000_000816d4",
                "DAT_000816dc": "dat_pointer"
            },
            "code": "void set_dat_value_to_0x8000_000816d4(void)\n{\n  *(undefined4 *)(DAT_000816dc + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_dat_value_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = process_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_aligned_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  allocateMemoryBlock_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = process_data_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = search_uint_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = process_data_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = process_data_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008234c",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_params_00080d7a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "param_3_is_zero",
                "param_4": "param_4_is_zero",
                "param_5": "param_5_is_zero"
            },
            "code": "void set_params_00080d7a(undefined4 *params, undefined4 value, int param_3_is_zero, int param_4_is_zero, int param_5_is_zero) {\n  params[0x11] = value;\n  if (param_5_is_zero) {\n    params[0x18] = value;\n  }\n  else {\n    params[0x19] = value;\n  }\n  if (param_4_is_zero) {\n    params[0x15] = value;\n  }\n  else {\n    params[0x14] = value;\n  }\n  if (param_3_is_zero) {\n    params[0xd] = value;\n  }\n  else {\n    params[0xc] = value;\n  }\n  params[4] = value;\n  *params = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "set_params_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_device_00080e9c",
                "puVar1": "device_config_ptr",
                "iVar2": "device_config_int",
                "DAT_00080f08": "DEVICE_CONFIG_PTR",
                "DAT_00080f0c": "DEVICE_CONFIG_INT",
                "DAT_00080f10": "DEVICE_CONFIG_VAR_2",
                "DAT_00080f14": "DEVICE_CONFIG_VAR_1",
                "DAT_00080f18": "DEVICE_CONFIG_VAR_3",
                "DAT_00080f20": "DEVICE_CONFIG_PTR_2"
            },
            "code": "void initialize_device_00080e9c(void)\n{\n  uint32_t *device_config_ptr;\n  int device_config_int;\n\n  device_config_ptr = DAT_00080f08;\n  *device_config_ptr = 0x400;\n  device_config_ptr[0x80] = 0x400;\n  device_config_int = DAT_00080f0c;\n\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(uint32_t *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    while (-1 < *(int *)(device_config_int + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(device_config_int + 0x20) = DAT_00080f10;\n  while (-1 < *(int *)(device_config_int + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(device_config_int + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  while (-1 < *(int *)(device_config_int + 0x68) << 0x1e);\n  *(uint32_t *)(DAT_00080f0c + 0x30) = DEVICE_CONFIG_VAR_4;\n  while (-1 < *(int *)(device_config_int + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080f0c + 0x30) = DEVICE_CONFIG_VAR_5;\n  while (-1 < *(int *)(device_config_int + 0x68) << 0x1c);\n  *DAT_00080f20 = DEVICE_CONFIG_VAR_6;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_device_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "copy_start",
                "param_4": "copy_end",
                "sVar1": "data_size",
                "puVar2": "data_ptr",
                "iVar3": "copy_result",
                "uVar4": "flags"
            },
            "code": "void process_data_00084464(int *output, int input_address, int copy_start, int copy_end) {\n  short data_size = *(short *)(input_address + 0xe);\n  ushort flags = *(ushort *)(input_address + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    zero_fill(output, (int)data_size, 0, 2);\n    flags = *(ushort *)(input_address + 0xc);\n  }\n  *(ushort *)(input_address + 0xc) = flags & 0xefff;\n  undefined *data_ptr = PTR_DAT_000845fc;\n  *(int *)data_ptr = 0;\n  int copy_result = copy_bytes_to_dat_000811cc((int)data_size, copy_start, copy_end, copy_end, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((copy_result == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "uint32_t",
                "0xffffffff": "ERROR_CODE_MAX"
            },
            "code": "uint32_t get_error_code_000811ae(void)\n{\n  return ERROR_CODE_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculateSum_0008118c",
                "param_1": "input",
                "puVar1": "pointerToData",
                "iVar2": "currentValue"
            },
            "code": "int calculateSum_0008118c(int input){\n    undefined *pointerToData = PTR_DAT_000811a0;\n    if (*(int *)PTR_DAT_000811a0 == 0) {\n        *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n    }\n    int currentValue = *(int *)pointerToData;\n    *(int *)pointerToData = input + currentValue;\n    return currentValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculateSum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_with_padding_00082a50",
                "param_1": "address",
                "iVar1": "byte_count",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "byte_is_zero"
            },
            "code": "int count_bytes_with_padding_00082a50(uint32_t address) {\n  int byte_count = 0;\n  uint32_t *word_ptr = (uint32_t *)(address & 0xfffffffc);\n  int padding = -(address & 3);\n  uint32_t word = *word_ptr;\n  if ((address & 3) != 0) {\n    word = word | 0xffffffffU >> ((padding + 4U & 0x1f) << 3);\n  }\n  while (word + 0xfefefeffU & ~word & 0x80808080U) {\n    padding += 4;\n    word = *(++word_ptr);\n  }\n  bool byte_is_zero = (word & 0xff) == 0;\n  if (!byte_is_zero) {\n    padding += 1;\n    byte_is_zero = (word & 0xff00) == 0;\n  }\n  if (!byte_is_zero) {\n    padding += 1;\n    byte_is_zero = (word & 0xff0000) == 0;\n  }\n  if (!byte_is_zero) {\n    padding += 1;\n  }\n  return padding;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "count_bytes_with_padding_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "void set_parameter_0008106e(int base_address, int parameter_value)\n{\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "returnZero_000811c2"
            },
            "code": "int returnZero_000811c2(){\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "returnZero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "int returnZero_000811c6(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "calculateMemoryOffsetAndReturnSuccess_00083d00",
                "param_1": "base_address",
                "param_2": "offset",
                "iVar1": "data_section_start",
                "puVar2": "ptr_data_section",
                "iVar3": "sum",
                "uVar4": "aligned_offset",
                "iVar5": "calculated_offset",
                "calculateSumAndReturnIfValid_00082970": "calculateSumAndReturnIfValid",
                "PTR_DAT_00083d94": "ptr_data_section",
                "DAT_00083d90": "data_section_start",
                "do_nothing_00082598": "do_nothing_1",
                "do_nothing_0008259c": "do_nothing_2",
                "DAT_00083d98": "data_section_start_offset"
            },
            "code": "int calculateMemoryOffsetAndReturnSuccess_00083d00(int base_address, int offset){\n  int DAT_00083d90 = DAT_00083d90;\n  do_nothing_00082598();\n  uint32_t aligned_offset = (*(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4)) & 0xfffffffc;\n  int calculated_offset = ((aligned_offset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < calculated_offset) {\n    int sum = calculateSumAndReturnIfValid_00082970(base_address, 0);\n    if (sum == (*(int *)(DAT_00083d90 + 8) + aligned_offset)) {\n      int negative_offset = -calculated_offset;\n      int sum_neg_offset = calculateSumAndReturnIfValid_00082970(base_address, negative_offset);\n      undefined *PTR_DAT_00083d94 = PTR_DAT_00083d94;\n      if (sum_neg_offset != -1) {\n        int data_section_offset = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4) = aligned_offset - calculated_offset | 1;\n        *(int *)PTR_DAT_00083d94 = data_section_offset - calculated_offset;\n        do_nothing_0008259c(base_address);\n        return 1;\n      }\n      int sum_zero_offset = calculateSumAndReturnIfValid_00082970(base_address, 0);\n      uint32_t new_aligned_offset = sum_zero_offset - *(int *)(DAT_00083d90 + 8);\n      if (0xf < (int)new_aligned_offset) {\n        int DAT_00083d98 = *DAT_00083d98;\n        *(uint32_t *)(*(int *)(DAT_00083d90 + 8) + 4) = new_aligned_offset | 1;\n        *(int *)PTR_DAT_00083d94 = sum_zero_offset - DAT_00083d98;\n      }\n    }\n  }\n  do_nothing_0008259c(base_address);\n  return 0;\n}",
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "calculateMemoryOffsetAndReturnSuccess_00083d00"
        }
    },
    "used_tokens": 97484,
    "layers": [
        [
            "FUN_00080ce0",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00084750",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00084298",
            "FUN_00080410",
            "FUN_00081622",
            "FUN_00081508",
            "FUN_0008456c"
        ],
        [
            "FUN_00081c94",
            "FUN_000842a4",
            "FUN_00080c0c",
            "FUN_00081318",
            "FUN_0008449c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00084464",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258"
        ],
        [
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00081e04",
            "FUN_00083adc",
            "FUN_0008043e",
            "FUN_00083808"
        ],
        [
            "FUN_000816a8",
            "FUN_000815fe",
            "FUN_000846a4",
            "FUN_000844c4",
            "FUN_0008378c",
            "FUN_0008160c"
        ],
        [
            "FUN_00083c40",
            "FUN_00080a68"
        ],
        [
            "FUN_00082ac0"
        ],
        [
            "FUN_00081714"
        ]
    ],
    "locked_functions": []
}